@class CIVector, NSDictionary, NSArray, CIImage, NSNumber;

@interface RAWReduceNoise : RAWFilter {
    CIImage *inputImage;
    NSNumber *inputLNRAmount;
    NSNumber *inputCNRAmount;
    NSNumber *inputSharpenAmount;
    NSNumber *inputSharpenThreshold;
    NSNumber *inputContrastAmount;
    NSNumber *inputDetailAmount;
    NSNumber *inputMoireRadius;
    NSNumber *inputMoireAmount;
    NSNumber *inputOpponentColorEnabled;
    CIVector *inputNeutralFactors;
    NSNumber *inputRepresentativeNoise;
    NSNumber *inputScaleFactor;
    NSNumber *inputBoostMethod;
    CIVector *inputLumFactors;
    NSNumber *inputBaselineExposure;
    NSNumber *inputISO;
    NSNumber *inputSensorPattern;
    NSDictionary *inputISODictionary;
    NSDictionary *inputTrimParameters;
    NSArray *inputLowCurvatureThreshold;
    NSDictionary *inputDespeckleParameters;
    NSNumber *inputHighFrequencyFactor;
    NSNumber *inputShowHF;
    NSNumber *inputVersion;
    id inputColorSpace;
}

+ (id)customAttributes;
+ (id)smartNoiseAdjustmentsForValue:(double)a0 andStatistics:(id)a1;
+ (id)smartNoiseStatistics:(id)a0;

- (id)customAttributes;
- (void).cxx_destruct;
- (id)outputImage;
- (id)reduce:(id)a0;
- (id)fineGrainNoise2:(id)a0 tinyBlurFactor:(float)a1;
- (id)YAndRGBGather:(id)a0 cnrRGB:(id)a1 sushiFactors:(id)a2 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 lumFactors:(id)a4;
- (id)addNoise:(id)a0 noise:(id)a1 amount:(float)a2;
- (float)adjustedRNAmount;
- (id)blurGradient:(id)a0 lothresh:(float)a1 factor:(float)a2;
- (id)V8OutputImage;
- (id)fineGrainNoise:(id)a0;
- (id)YAndRGBGatherOpponentColor:(id)a0 cnrRGB:(id)a1 originalY:(id)a2 sushiFactors:(id)a3 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 lumFactors:(id)a5;
- (id)blurGradientPlusCurvature:(id)a0 lothresh:(float)a1 factor:(float)a2 cthresh:(float)a3 cfactor:(float)a4;
- (id)compositeThroughGradientMask:(id)a0 fullSize:(id)a1 fullSizeMask:(id)a2;
- (void)computeLowThreshold:(float *)a0 andFactor:(float *)a1 withThreshold:(float)a2 andSoftness:(float)a3;
- (void)computeScaleA:(float *)a0 B:(float *)a1 withSmoothingAmount:(float)a2;
- (id)directionsToCurvature:(id)a0 threshold:(float)a1;
- (id)expandAndAddDetailsThroughGradientMask2:(id)a0 halfSize:(id)a1 fullSizeDetails:(id)a2 soften:(float)a3 sharpen:(float)a4;
- (id)expandAndAddDetailsThroughGradientMask3:(id)a0 fullSize:(id)a1 fullSizeDetails:(id)a2 fullSizeMask:(id)a3 amount:(float)a4 sharpen:(float)a5 interpolant:(float)a6;
- (id)expandAndAddDetailsThroughGradientMask:(id)a0 fullSize:(id)a1 fullSizeDetails:(id)a2 fullSizeMask:(id)a3 amount:(float)a4 contrastOverdrive:(float)a5 interpolant:(float)a6;
- (id)expandAndAddDetailsWithOverdrive:(id)a0 fullSize:(id)a1 contrast:(float)a2;
- (id)expandAndMakeDetails:(id)a0 halfSize:(id)a1;
- (id)expandAndSharpenDetailsThroughGradientMaskGather:(id)a0 halfSizeY:(id)a1 cnrRGB:(id)a2 sharpen:(float)a3 soften:(float)a4 floor:(float)a5 sushiFactors:(id)a6 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a7 lumFactors:(id)a8;
- (id)expandAndSharpenDetailsThroughGradientMaskGatherOpponentColor:(id)a0 halfSizeY:(id)a1 cnrRGB:(id)a2 originalY:(id)a3 sharpen:(float)a4 soften:(float)a5 floor:(float)a6 sushiFactors:(id)a7 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a8 lumFactors:(id)a9;
- (id)expandAndSharpenThroughGradientMask:(id)a0 fullSizeY:(id)a1 sharpen:(float)a2;
- (id)expandAndSharpenThroughGradientMaskGather:(id)a0 halfSizeY:(id)a1 cnrRGB:(id)a2 sharpen:(float)a3 floor:(float)a4 sushiFactors:(id)a5 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 lumFactors:(id)a7;
- (id)expandAndSharpenThroughGradientMaskGatherOpponentColor:(id)a0 halfSizeY:(id)a1 cnrRGB:(id)a2 originalY:(id)a3 sharpen:(float)a4 floor:(float)a5 sushiFactors:(id)a6 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a7 lumFactors:(id)a8;
- (id)expandHalfSizeRGB:(id)a0;
- (id)extractHalfSizeRGB:(id)a0 neutralFactors:(id)a1;
- (id)extractHalfSizeRGBHF:(id)a0 neutralFactors:(id)a1 threshold:(float)a2;
- (id)extractY:(id)a0 neutralFactors:(id)a1;
- (id)extractYOpponentColor:(id)a0 neutralFactors:(id)a1 luminanceFactors:(id)a2 noiseVector:(id)a3;
- (id)gaborFiltersToLuminanceAndVectorField:(id)a0 thresh:(float)a1;
- (id)gaborFiltersToSmoothedLuminanceAndGradient:(id)a0 smoothAmt:(float)a1 tinyBlurFactor:(float)a2;
- (id)gaborFiltersToVectorField:(id)a0;
- (id)highFrequencyIntoAlpha:(id)a0 threshold:(float)a1 neutralFactors:(id)a2;
- (id)image:(id)a0 croppedTo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)isBayerGreenAlignedforImage:(id)a0 andPattern:(int)a1;
- (id)kernelArrayWithResourceName:(id)a0;
- (id)kernelWithName:(id)a0 inArray:(id)a1;
- (id)mergeHalfSizeCurvature:(id)a0 intoFullSizeCurvature:(id)a1;
- (id)multiply:(id)a0 byNeutralFactors:(id)a1;
- (id)outputBoost:(id)a0;
- (id)outputCNR:(id)a0 E0:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 E1:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)outputCNR:(id)a0 extent:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 returningDebugProduct:(BOOL *)a2;
- (id)outputUnboost:(id)a0;
- (id)perceptualToLinear:(id)a0;
- (id)powerBlur:(id)a0 threshold:(float)a1 scale:(float)a2;
- (id)powerBlurDespeckle:(id)a0 threshold:(float)a1 scale:(float)a2 countThreshold:(int)a3 luminanceThreshold:(float)a4 diffAmount:(float)a5;
- (id)powerBlurDespeckleHF:(id)a0 threshold:(float)a1 moireAmount:(float)a2 scale:(float)a3 countThreshold:(int)a4 luminanceThreshold:(float)a5 diffAmount:(float)a6;
- (id)powerBlurEarlyOut2:(id)a0 threshold:(float)a1 scale:(float)a2 neutralThreshold:(float)a3 thresholdScale:(float)a4;
- (id)powerBlurEarlyOut2HF:(id)a0 threshold:(float)a1 moireAmount:(float)a2 scale:(float)a3 neutralThreshold:(float)a4 thresholdScale:(float)a5;
- (id)powerBlurEarlyOut:(id)a0 threshold:(float)a1 scale:(float)a2;
- (id)powerBlurEarlyOutHF:(id)a0 threshold:(float)a1 moireAmount:(float)a2 scale:(float)a3;
- (id)powerBlurFS:(id)a0 threshold:(float)a1 neutralFactors:(id)a2;
- (id)powerBlurFSHF:(id)a0 threshold:(float)a1 moireAmount:(float)a2 neutralFactors:(id)a3;
- (id)powerBlurHF:(id)a0 threshold:(float)a1 moireAmount:(float)a2 scale:(float)a3;
- (id)powerBlurY:(id)a0 threshold:(float)a1;
- (id)samplerForImage:(id)a0;
- (id)smoothDetailsAlongDirections:(id)a0 directions:(id)a1 amount:(float)a2;
- (id)smoothDetailsAlongDirectionsAtScale:(id)a0 directions:(id)a1 scale:(float)a2 thresh:(float)a3 smooth:(float)a4;
- (id)smoothDetailsAlongDirectionsAtScaleAntiBloom:(id)a0 directions:(id)a1 scale:(float)a2 thresh:(float)a3 smooth:(float)a4 maxContrast:(float)a5;
- (id)smoothDetailsAlongDirectionsAtScaleWithSharpen:(id)a0 directions:(id)a1 scale:(float)a2 thresh:(float)a3 smooth:(float)a4 sharp:(float)a5 pscale:(float)a6 coringThreshold:(float)a7;
- (id)smoothDetailsAlongDirectionsAtScaleWithSharpenAntiBloom:(id)a0 directions:(id)a1 scale:(float)a2 thresh:(float)a3 smooth:(float)a4 sharp:(float)a5 pscale:(float)a6 coringThreshold:(float)a7 maxContrast:(float)a8;
- (id)smoothVectorFieldAlongVectors:(id)a0;
- (id)vectorFieldToDirectionsAndGradients:(id)a0;
- (id)viewBlend:(id)a0 sushiFactors:(id)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewC:(id)a0 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)viewD:(id)a0 factor:(float)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewDIR:(id)a0 do360:(BOOL)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewG:(id)a0 scale:(float)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewGDIR:(id)a0 do360:(BOOL)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewHue:(id)a0 sushiFactors:(id)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewRGB:(id)a0 sushiFactors:(id)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)viewTG:(id)a0 lothresh:(float)a1 factor:(float)a2 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (id)viewTGDIR:(id)a0 lothresh:(float)a1 factor:(float)a2 do360:(BOOL)a3 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4;
- (id)viewVF:(id)a0 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)viewY:(id)a0 sushiFactors:(id)a1 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;

@end

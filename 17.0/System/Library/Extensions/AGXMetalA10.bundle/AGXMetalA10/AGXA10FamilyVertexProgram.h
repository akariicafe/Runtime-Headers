@class NSString, NSObject;
@protocol OS_dispatch_group, OS_dispatch_data;

@interface AGXA10FamilyVertexProgram : NSObject {
    struct VertexProgram { struct VectorMap<AGX::VertexProgramKey, AGX::Program<AGX::G9::VertexProgramVariant, AGX::VertexProgramKey, AGX::G9::IndirectArgumentLayout, AGXA10FamilyIndirectArgumentBufferLayout>::VariantEntry, 4U> { struct Chunk { struct VertexProgramKey { void /* function */ **_vptr$ProgramKey; int streamType; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } stream; struct _AGCVertexContextStateAGP { unsigned long long mutableBuffers; union _AGCPCFStateAGP { struct { unsigned int depthCompareClampMask : 32; } ; unsigned int key; } pcf; union _AGCCommonContextStateAGP { struct { unsigned char genCompilerStatistics : 1; unsigned char genTelemetryStatistics : 1; unsigned char disableTextureRWBoundsCheck : 1; unsigned char debugInstrumentationEnabled : 1; unsigned char bufferBoundsCheckMode : 3; unsigned char disableDMAPromotion : 1; unsigned char forceSoftwareEmulatedRaytracing : 1; unsigned char mayLinkBinaryFunctions : 1; unsigned short maxTempRegisters : 16; unsigned char debugInfoEnabled : 1; unsigned char enableStackShadow : 1; unsigned char disableGIN1087SWWA : 1; unsigned char unused : 3; } ; unsigned int key; } common; union { struct { unsigned char clipDistanceEnableMask : 8; unsigned char partition_mode : 2; unsigned char step_function : 2; unsigned char vertex_amplification_mode : 2; unsigned char max_vertex_amplification_count : 4; unsigned char manufactureUnlinkedVaryings : 1; unsigned char customBorderColor : 1; unsigned char addDefaultPointSize : 1; unsigned char flatVaryingAnalysis : 1; unsigned char tessFactorFormat : 1; unsigned char positionInvariance : 1; unsigned char enableFMAFold : 1; unsigned char supportExternalVisibleFunctions : 1; unsigned char debugTraceBufferEnabled : 1; unsigned char enableFlushNANVaryings : 1; unsigned short reservedForDAS : 12; unsigned int unused : 24; } ; unsigned long long key; } ; } cs; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; struct __short { char __data_[23]; unsigned char __padding_[0]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } geometry_buffer_desc; union { struct { unsigned char supportIndirectCommandBuffers : 1; unsigned char hasPrimId : 1; unsigned int reserved : 30; } ; unsigned int geometrySharedKeyFlags; } ; struct ProgramKeyDynamicLibrariesImpl<false> { struct vector<MTLUINT256_t, std::allocator<MTLUINT256_t>> { struct *__begin_; struct *__end_; struct __compressed_pair<MTLUINT256_t *, std::allocator<MTLUINT256_t>> { struct *__value_; } __end_cap_; } dynamic_libraries_hash; } dynamic_libraries; struct ProgramKeyVisibleFunctionTableImpl<false> { struct vector<MTLUINT256_t, std::allocator<MTLUINT256_t>> { struct *__begin_; struct *__end_; struct __compressed_pair<MTLUINT256_t *, std::allocator<MTLUINT256_t>> { struct *__value_; } __end_cap_; } visible_functions_hash; } visible_functions; struct FragmentProgramVaryings { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; struct __short { char __data_[23]; unsigned char __padding_[0]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } varying_semantics; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; struct __short { char __data_[23]; unsigned char __padding_[0]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } varying_types; BOOL manufacture_unlinked_varyings; } fv; unsigned long long non_reflection_pipeline_options; } keys[4]; struct VariantEntry { NSObject<OS_dispatch_group> *ve_group; struct VertexProgramVariant *variant; unsigned long long error; NSString *message; NSObject<OS_dispatch_data> *pipeline_archiver_id; BOOL needsReattempt; BOOL candidate_entry; } values[4]; struct Chunk *next; } initial_chunk; struct Chunk *head; unsigned int count; struct VariantEntry { NSObject<OS_dispatch_group> *ve_group; struct VertexProgramVariant *variant; unsigned long long error; NSString *message; NSObject<OS_dispatch_data> *pipeline_archiver_id; BOOL needsReattempt; BOOL candidate_entry; } default_value; } variants; struct VectorMap<ReflectionKey, AGX::Program<AGX::G9::VertexProgramVariant, AGX::VertexProgramKey, AGX::G9::IndirectArgumentLayout, AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry, 4U> { struct Chunk { struct ReflectionKey { struct { unsigned char key[32]; } gpuCompilerSPIOptionsHash; } keys[4]; struct ReflectionEntry { unsigned long long requested_options; unsigned long long completed_options; NSObject<OS_dispatch_data> *reflection_data; } values[4]; struct Chunk *next; } initial_chunk; struct Chunk *head; unsigned int count; struct ReflectionEntry { unsigned long long requested_options; unsigned long long completed_options; NSObject<OS_dispatch_data> *reflection_data; } default_value; } reflections; struct AGXA_UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } lock; struct IndirectArgumentLayout *argument_layouts[31]; BOOL has_layouts; } _impl;
}

- (id).cxx_construct;
- (void).cxx_destruct;

@end

@class NSData, NSArray, NSString, NSDictionary, ACAccount, NSObject, NSNumber;
@protocol OS_dispatch_queue;

@interface SSAccount : NSObject <SSXPCCoding, NSCopying> {
    ACAccount *_backingAccount;
    NSData *_bioToken;
    BOOL _didFallbackToPassword;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *backingAccountAccessQueue;
@property long long accountSource;
@property (copy, nonatomic) NSArray *automaticDownloadKinds;
@property (readonly, nonatomic) ACAccount *backingAccount;
@property (readonly, nonatomic, getter=isDemoAccount) BOOL demoAccount;
@property (copy, nonatomic) NSString *demoAccountRawPassword;
@property (readonly, nonatomic, getter=isDirty) BOOL dirty;
@property (readonly, nonatomic) BOOL hasBrokenDSID;
@property (readonly, nonatomic, getter=isLocalAccount) BOOL localAccount;
@property (copy, nonatomic) NSString *secureToken;
@property BOOL didFallbackToPassword;
@property (getter=isActive) BOOL active;
@property (getter=isActiveLockerAccount) BOOL activeLockerAccount;
@property (copy) NSString *ITunesPassSerialNumber;
@property (getter=isNewCustomer) BOOL newCustomer;
@property (getter=isManagedAppleID) BOOL managedAppleID;
@property (copy, nonatomic) NSString *passwordEquivalentToken;
@property (copy, nonatomic) NSString *rawPassword;
@property long long accountKind;
@property (copy) NSString *accountName;
@property long long accountScope;
@property (copy) NSString *altDSID;
@property (getter=isAuthenticated) BOOL authenticated;
@property (copy) NSString *creditsString;
@property (copy) NSString *firstName;
@property (copy) NSString *lastName;
@property (copy) NSDictionary *privacyAcknowledgement;
@property (getter=isSocialEnabled) BOOL socialEnabled;
@property (copy) NSString *storeFrontIdentifier;
@property (retain) NSNumber *uniqueIdentifier;
@property long long availableServiceTypes;
@property long long enabledServiceTypes;
@property long long freeDownloadsPasswordSetting;
@property long long paidPurchasesPasswordSetting;
@property (readonly) NSString *localizedName;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_lastAttemptForServerPromptKeyWithIdentifier:(id)a0;
+ (BOOL)isNewCustomerFromAuthenticationResponseDictionary:(id)a0;
+ (id)accountNameFromAuthenticationResponseDictionary:(id)a0;
+ (id)_displayedServerPromptKeyWithIdentifier:(id)a0;
+ (id)altDSIDFromAuthenticationResponseDictionary:(id)a0;
+ (id)storeFrontIdentifierFromURLResponse:(id)a0;
+ (id)lastNameFromAuthenticationResponseDictionary:(id)a0;
+ (BOOL)backingAccountIsLocalAccount:(id)a0;
+ (BOOL)isManagedAppleIDFromAuthenticationResponseDictionary:(id)a0;
+ (id)DSIDFromAuthenticationResponseDictionary:(id)a0;
+ (id)serverValueForAccountPasswordSettingValue:(long long)a0;
+ (id)secureTokenForIdentifier:(id)a0;
+ (id)creditsStringFromAuthenticationResponseDictionary:(id)a0;
+ (long long)accountKindFromAuthenticationResponseDictionary:(id)a0;
+ (BOOL)backingAccountIsDemoAccount:(id)a0;
+ (id)_countryCodeFromStorefrontIdentifier:(id)a0;
+ (id)_valueForFirstAvailableKeyPath:(id)a0 inDictionary:(id)a1;
+ (id)firstNameFromAuthenticationResponseDictionary:(id)a0;

- (id)init;
- (void)setLastAttemptDate:(id)a0 forServerPromptWithIdentifier:(id)a1;
- (id)accountPropertyForKey:(id)a0;
- (id)initWithBackingAccount:(id)a0;
- (void)removeAvailableServiceTypes:(long long)a0;
- (void)addAvailableServiceTypes:(long long)a0;
- (id)lastAttemptDateForServerPromptWithIdentifier:(id)a0;
- (void)setEligibility:(id)a0 forServiceType:(long long)a1;
- (void)_removeAccountPropertyBitmask:(long long)a0 forKey:(id)a1;
- (void)setLockdownDictionary:(id)a0;
- (BOOL)mergeValuesFromAccount:(id)a0;
- (void)setDisplayedServerPrompt:(BOOL)a0 withIdentifier:(id)a1;
- (void)getITunesMatchStatusWithCompletionBlock:(id /* block */)a0;
- (void)_addAccountPropertyBitmask:(long long)a0 forKey:(id)a1;
- (void)addEnabledServiceTypes:(long long)a0;
- (void)getDownloadKindsEligibleForContentRestoreWithBlock:(id /* block */)a0;
- (void)setBiometricToken:(id)a0;
- (BOOL)isDuplicate:(id)a0;
- (id)initWithXPCEncoding:(id)a0;
- (void)setStoreFrontIdentifier:(id)a0 forRequest:(id)a1 response:(id)a2;
- (void)_setBackingAccount:(id)a0;
- (BOOL)displayedServerPromptWithIdentifier:(id)a0;
- (void)getTermsAndConditionsWithBlock:(id /* block */)a0;
- (void)acceptTermsAndConditions:(id)a0 withCompletionBlock:(id /* block */)a1;
- (void)_setAccountProperty:(id)a0 forKey:(id)a1;
- (void).cxx_destruct;
- (void)getKeybagSyncDataWithType:(long long)a0 completionHandler:(id /* block */)a1;
- (id)_backingAccount;
- (id)popBiometricToken;
- (void)removeEnabledServiceTypes:(long long)a0;
- (id)copyXPCEncoding;
- (void)getEligibilityForService:(long long)a0 completionBlock:(id /* block */)a1;
- (void)updateAccountPasswordSettings:(id /* block */)a0;
- (void)_sendMessage:(id)a0 withReply:(id /* block */)a1;
- (void)getPurchasedItemsForItems:(id)a0 completionBlock:(id /* block */)a1;
- (void)resetTransientData;
- (BOOL)isEqual:(id)a0;
- (id)copyLockdownRepresentation;
- (id)hashedDescription;
- (void)updateAccountPasswordSettingsWithRequestProperties:(id)a0 completionBlock:(id /* block */)a1;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)eligibilityForService:(long long)a0;

@end

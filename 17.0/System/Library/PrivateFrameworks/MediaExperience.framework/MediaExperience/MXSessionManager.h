@class NSDate, NSString, NSLock, NSArray, NSSet, NSMutableDictionary, NSDictionary, NSRecursiveLock, NSObject, NSPointerArray, NSNumber;
@protocol OS_dispatch_semaphore;

@interface MXSessionManager : NSObject

@property (nonatomic) unsigned int actuatorVADID;
@property (nonatomic) unsigned int decoupledInputVADID;
@property (nonatomic) unsigned int defaultVADID;
@property (nonatomic) unsigned int lowLatencyVADID;
@property (nonatomic) unsigned int musicVADID;
@property (nonatomic) unsigned int perAppAirPlayVADID;
@property (nonatomic) unsigned int siriOutputVADID;
@property (nonatomic) unsigned int speakerAlertVADID;
@property (nonatomic) unsigned int speechDetectionVADID;
@property (nonatomic) unsigned int systemSoundLocalVADID;
@property (nonatomic) unsigned int systemSoundRemoteVADID;
@property (retain, nonatomic) NSDictionary *figCustomizedCategoryWithBluetooth_Dict;
@property (retain, nonatomic) NSDictionary *figCustomizedCategoryWithoutBluetooth_Dict;
@property (retain, nonatomic) NSLock *mxCoreSessionListReadLock;
@property (nonatomic) unsigned int mxCoreSessionListActiveReaders;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *mxCoreSessionListWriteSemaphore;
@property (retain, nonatomic) NSDictionary *figUncustomizedCategory_Dict;
@property (retain, nonatomic) NSDictionary *figCustomizedCategoryWithDefaultBuiltIn_Speaker_Dict;
@property (retain, nonatomic) NSDictionary *figCustomizedCategoryWithDefaultBuiltIn_Receiver_Dict;
@property (retain, nonatomic) NSDictionary *figCustomizedCategoryWithDefaultBuiltIn_Default_Dict;
@property (retain, nonatomic) NSDictionary *figCategoryToMuteabilityDict;
@property (retain, nonatomic) NSDictionary *figCategoryToOutputOverridabilityDict;
@property (retain, nonatomic) NSDictionary *figCategoryToVADCategoryDict;
@property (retain, nonatomic) NSDictionary *figRouteToVADOutputPortTypeDict;
@property (retain, nonatomic) NSDictionary *figRouteToVADInputPortTypeDict;
@property (retain, nonatomic) NSDictionary *vadOutputPortTypeToFigOutputDeviceNameDict;
@property (retain, nonatomic) NSDictionary *vadOutputPortTypeToMuteabilityDict;
@property (retain, nonatomic) NSDictionary *vadInputPortTypeToFigInputDeviceNameDict;
@property (retain, nonatomic) NSDictionary *figModeTypeToVADModeType;
@property (retain) NSString *appAllowedToFadeInTemporarily;
@property (retain) NSString *appAllowedToInitiatePlaybackTemporarily;
@property (retain) NSString *appAllowedToInitiateRecordingTemporarily;
@property (readonly, retain) NSDate *appAllowedToInitiateRecordingTemporarilyTimestamp;
@property (retain) NSNumber *applyUplinkMuteToPhoneCallBehaviorSession;
@property (retain) NSDictionary *audioDeviceInfo;
@property (retain) NSString *currentAudioCategory;
@property (retain) NSString *currentAudioMode;
@property unsigned int currentStream0;
@property (retain) NSString *defaultMusicApp;
@property (retain) NSDictionary *detailedRoutesDescription;
@property (retain) NSDictionary *devicesSampleRates;
@property (retain, nonatomic) NSPointerArray *sessionsThatWantToSuspendNeroScreenMirroring;
@property (retain) NSString *nowPlayingAppDisplayID;
@property (retain) NSDate *nowPlayingAppStopTime;
@property (retain) NSSet *mutedSessionBundleIDs;
@property (retain) NSMutableDictionary *quiesceableWiredPortsAutoRouteOnConnectPreference;
@property (retain) NSDate *silentModeEnabledUntilTime;
@property (retain) NSString *silentModeReason;
@property (retain) NSString *uplinkMutedBundleID;
@property BOOL voiceOverVADVolumeNeedsUpdate;
@property (retain) NSDictionary *vadIDToName;
@property (retain) NSDictionary *vadNameToID;
@property (readonly, nonatomic) NSSet *audioCategoriesWithInput;
@property (readonly, nonatomic) NSSet *audioModesWithShortVoicePromptStyle;
@property (nonatomic) BOOL carPlayIsConnected;
@property (retain, nonatomic) NSArray *longFormVideoApps;
@property (retain, nonatomic) NSPointerArray *mxCoreSessionList;
@property (retain, nonatomic) NSRecursiveLock *propertiesLock;
@property (retain, nonatomic) NSArray *recordingClientPIDs;
@property (nonatomic) unsigned int silentModeClient;
@property (nonatomic) BOOL silentModeEnabled;
@property (nonatomic) BOOL starkMainAudioIsOwnedByiOSButBorrowedByCar;
@property (retain, nonatomic) NSString *systemMirroringRoutingContextUUID;
@property (nonatomic) BOOL uplinkMute;
@property (nonatomic) BOOL uplinkMuteSetByClient;
@property (nonatomic) BOOL wombatEnabled;
@property (retain, nonatomic) NSMutableDictionary *pickableRoutesDescriptions;

+ (id)sharedInstance;
+ (BOOL)getSilentModeStateFromDisk;
+ (id)copySilentModeUntilTimeFromDisk;
+ (id)copyDefaultMusicAppFromPlist;

- (BOOL)updateDuckVolumeForDucker:(id)a0 duckVolume:(float)a1 duckFadeDuration:(float)a2;
- (void)updateDeviceSampleRate:(unsigned int)a0;
- (id)init;
- (id)getDuckingSource:(id)a0 duckerSession:(id)a1;
- (void)dealloc;
- (id)getSilentModeClientTypeAsString:(unsigned int)a0;
- (id)getUncustomizedCategory:(id)a0;
- (id)copyVoiceOverSession;
- (BOOL)isSessionWithAudioModePlaying:(id)a0;
- (BOOL)isAudioCategoryMuteable:(id)a0;
- (unsigned long long)mxCoreSessionListAddSession:(id)a0;
- (void)handleSilentModeTimerDidFire;
- (unsigned long long)removeSessionThatWantsToSuspendNeroScreenMirroring:(id)a0;
- (id)copySpeechDetectSession;
- (void)updateDuckingSourceInfoForSession:(id)a0 duckerSession:(id)a1 duckVolume:(float)a2 duckFadeDuration:(float)a3;
- (BOOL)areSessionsWithAudioModesActive:(id)a0;
- (void)mxCoreSessionListEndIteration;
- (void)removeDuckerForSession:(id)a0 sessionCausingUnduck:(id)a1 duckingSource:(id)a2 outLastDuckingSourceWasRemoved:(BOOL *)a3;
- (BOOL)isAnyOtherUnduckedPlayingSessionMatchingVolumeRampCategory:(id)a0;
- (void)refreshDeviceSampleRateCache;
- (void)makeStarkPortRoutableForPhoneCall:(BOOL)a0;
- (void)updateMutedBundleIDs:(id)a0 muteValue:(BOOL)a1;
- (float)getDuckVolumeForBlurEffect:(id)a0 duckeeSession:(id)a1;
- (void)unduckVolume:(id)a0 sessionCausingUnduck:(id)a1 duckingSource:(id)a2;
- (BOOL)isSessionWithAudioCategoryActive:(id)a0;
- (id)copySessionWithPID:(int)a0;
- (void)updateSilentModeTimer:(BOOL)a0 untilTime:(id)a1 clientType:(unsigned int)a2;
- (BOOL)isAnExistingDuckingSource:(id)a0;
- (void)resetWaitingToResume:(id)a0;
- (BOOL)shouldBlurOnAudioAccessory:(id)a0 duckerSession:(id)a1;
- (void)ringerIsOnChanged:(BOOL)a0;
- (id)copyHighestPriorityActiveSession:(id)a0 deviceIdentifier:(id)a1;
- (void)volumePreferenceDidChangeCallback:(id)a0;
- (BOOL)isAudioCategoryAllowedForSharePlayMedia:(id)a0;
- (BOOL)areBothBudsInEarForA2DPPort;
- (void)cleanupSessionAssertionsIfNeeded:(id)a0 cleanupReason:(long long)a1;
- (void)updateDuckVolume:(id)a0 duckerSession:(id)a1 duckVolume:(float)a2 duckFadeDuration:(float)a3;
- (BOOL)isSmartRoutingEligibleSessionAvailable;
- (BOOL)updateUnduckVolumeForDucker:(id)a0 unduckVolume:(float)a1 unduckFadeDuration:(float)a2;
- (id)getCleanupSessionAssertionReasonString:(long long)a0;
- (BOOL)isPotentialSharePlayMediaSessionActive;
- (int)updateDuckToLevelScalarSetByClient:(BOOL)a0 session:(id)a1 newLevel:(float)a2 newLevelSetByClient:(BOOL)a3 currentLevel:(float)a4 currentLevelSetByClient:(BOOL)a5;
- (void)setUpStringConversionDictionaries;
- (void)addDuckerToSession:(id)a0 duckerSession:(id)a1 duckingSource:(id)a2;
- (void)unduckSessionsForDucker:(id)a0;
- (void)updateNeroScreenState:(id)a0 suspendScreen:(BOOL)a1;
- (id)copySessionInformationFromVARouteConfiguration:(id)a0;
- (void)nowPlayingAppShouldResumeForCarPlay:(BOOL)a0;
- (void)makeStarkPortRoutableForPlayingSession:(BOOL)a0;
- (unsigned long long)mxCoreSessionListRemoveSession:(id)a0;
- (BOOL)isAuditTokenEqual:(struct { unsigned int x0[8]; })a0 compareTo:(struct { unsigned int x0[8]; })a1;
- (id)getClientPriorityAsString:(unsigned int)a0;
- (void)duckVolume:(id)a0 duckerSession:(id)a1 duckingSource:(id)a2;
- (BOOL)isSessionWithAudioModeActive:(id)a0;
- (void)postDisallowedActivationDueToContinuityCaptureNotification:(BOOL)a0 videoPlaybackWasIntended:(BOOL)a1;
- (void)updateUnduckVolume:(id)a0 duckerSession:(id)a1 unduckVolume:(float)a2 unduckFadeDuration:(float)a3;
- (unsigned long long)addSessionThatWantsToSuspendNeroScreenMirroring:(id)a0;
- (BOOL)unblurOnAudioAccessory:(id)a0 unduckDuration:(float)a1;
- (BOOL)shouldResetWaitingToResume:(id)a0 currentSession:(id)a1;
- (void)applyUplinkMute:(id)a0;
- (void)removeSilentModeTimer;
- (void)getUpdatedDuckVolume:(id)a0 outDuckVolume:(float *)a1;
- (int)getMuteState:(struct { unsigned int x0[8]; })a0 outMuteValue:(BOOL *)a1;
- (void)updateDetailedRouteDescription:(unsigned int)a0;
- (BOOL)sessionCanBecomeSharePlayMedia:(id)a0;
- (id)getDefaultBuiltInCustomizedAlternateCategory:(id)a0 defaultBuiltInRoute:(id)a1;
- (BOOL)isSessionDucked:(id)a0 duckingSource:(id)a1;
- (id)copyMXCoreSessionList;
- (void)replaceMutedBundleIDwithHostID;
- (void)mxCoreSessionListBeginIteration;
- (int)updateMuteState:(struct { unsigned int x0[8]; })a0 muteValue:(id)a1;
- (BOOL)isCurrentPortTypeMuteable:(unsigned int)a0;
- (void)appToInterruptCurrentNowPlayingSession:(id)a0;
- (void)unduckSessionsForDuckingSource:(id)a0;
- (id)copyPotentialActiveSharePlayMediaSession;
- (void)interruptPlayingSessionsNotOptedIntoWombat;
- (BOOL)isSessionAllowedToStartRecordingTemporarily:(id)a0;
- (void)updateActiveSessionsOnDeviceRelinquished;
- (id)copyInterruptedSessions:(id)a0;
- (BOOL)isAuditTokenValid:(struct { unsigned int x0[8]; })a0;
- (void)duckSessionIfDuckerIsActive:(id)a0;
- (id)getBluetoothCustomizedAlternateCategory:(id)a0 enableBluetooth:(BOOL)a1;
- (BOOL)doesSessionPreferInterruptionOnRouteDisconnect:(id)a0;
- (id)copySessionToBeMuted:(struct { unsigned int x0[8]; })a0;
- (unsigned int)getSpeechDetectStyleForSessionConfiguration:(id)a0;
- (void)updateActiveSessionInformation;
- (id)copyDetailedRouteDescription:(unsigned int)a0;
- (void)setQuiesceableWiredPortPreference:(unsigned int)a0 autoRouteOnConnect:(BOOL)a1;
- (float)getScalarVolume:(float)a0;
- (void)resetDefaultMusicApp;
- (void)interruptSessionsForCategoryNoLongerRoutable;
- (void)setVADID:(unsigned int)a0 forVADName:(id)a1;
- (int)getSessionPriority:(struct MXSessionPlayingInfo { id x0; id x1; unsigned int x2; id x3; id x4; })a0 forTipi:(BOOL)a1;
- (id)copyPhoneCallBehaviorRecordingSession;
- (BOOL)isSessionWithAudioModeRecording:(id)a0;
- (void)duckSessionsForDucker:(id)a0 sessionsToDuck:(id)a1;
- (BOOL)isLongFormVideoApp:(id)a0;
- (void)removeEntryFromMutedBundleIDCache:(int)a0 bundleID:(id)a1;
- (void)cancelAnyInProgressRampIfNeeded:(id)a0 reason:(unsigned short)a1;
- (void)blurOnAudioAccessory:(id)a0 duckerSession:(id)a1 duckVolume:(float)a2 duckFadeDuration:(float)a3;
- (BOOL)isSpeechDetectCategory:(id)a0;
- (void)interruptSessionsOnRouteDisconnect:(id)a0;
- (BOOL)isAtleastOneBudNotInEarForA2DPPort;
- (BOOL)getQuiesceableWiredPortAutoRouteOnConnectPreference:(unsigned int)a0;
- (unsigned int)currentSpeechDetectStyle:(id)a0;
- (void)updateSilentModeState:(BOOL)a0 untilTime:(id)a1 withReason:(id)a2 forClientType:(unsigned int)a3 updateForStartup:(BOOL)a4;
- (BOOL)shouldSetDeviceFormatAndSampleRate:(id)a0;

@end

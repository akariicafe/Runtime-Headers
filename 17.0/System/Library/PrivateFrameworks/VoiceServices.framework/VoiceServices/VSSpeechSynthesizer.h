@class NSUUID, NSString, NSMutableDictionary, AFAudioPowerUpdater, VSSpeechConnection, NSObject, AFAudioPowerXPCProvider, SiriTTSDaemonSession;
@protocol OS_dispatch_queue, VSSpeechSynthesizerDelegate;

@interface VSSpeechSynthesizer : NSObject <VSSpeechConnectionDelegate, AFAudioPowerProviding> {
    NSString *_clientBundleIdentifier;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    VSSpeechConnection *_xpcConnection;
    NSString *_identifier;
    struct { unsigned char delegateStartWithRequest : 1; unsigned char delegateFinishWithPhonemesSpokenWithRequest : 1; unsigned char delegateSuccessWithInstrumentMetrics : 1; unsigned char delegatePauseWithRequest : 1; unsigned char delegateContinueWithRequest : 1; unsigned char delegateWillSpeakWithRequest : 1; unsigned char delegateStreamSynthesisAudioData : 1; unsigned char willUseInput : 1; unsigned char delegateDidStartPreviewRequest : 1; } _synthesizerFlags;
}

@property (copy, nonatomic) NSString *language;
@property (copy, nonatomic) NSUUID *accessoryID;
@property (retain, nonatomic) NSMutableDictionary *durationRequests;
@property (retain, nonatomic) SiriTTSDaemonSession *proxySession;
@property (retain, nonatomic) NSMutableDictionary *stsRequestMapping;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *audioPowerUpdaterQueue;
@property (retain, nonatomic) AFAudioPowerUpdater *audioPowerUpdater;
@property (nonatomic) BOOL isPlayingPreview;
@property (retain, nonatomic) AFAudioPowerXPCProvider *previewAudioPowerXPCProvider;
@property (weak, nonatomic) id<VSSpeechSynthesizerDelegate> delegate;
@property (nonatomic) BOOL keepActive;
@property (nonatomic) float rate;
@property (nonatomic) float pitch;
@property (nonatomic) float volume;
@property (retain, nonatomic) NSString *voice;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedInstance;
+ (BOOL)playVoicePreviewForLanguageCode:(id)a0 voiceName:(id)a1 previewType:(long long)a2 completion:(id /* block */)a3;
+ (void)stopPlayingVoicePreview;
+ (id)validateRequest:(id)a0;
+ (id)characterClassCountForUtterance:(id)a0 language:(id)a1;
+ (id)errorWithReason:(id)a0;
+ (id)validateAudioCachingRequest:(id)a0;
+ (id)validateAudioRequest:(id)a0;
+ (id)validatePrewarmRequest:(id)a0;

- (void)_setDelegate:(id)a0;
- (void)triggerCellularDownloadedVoiceAssets:(id)a0;
- (void)getLocalVoiceAssets:(id /* block */)a0;
- (id)init;
- (void)connection:(id)a0 speechRequest:(id)a1 successWithInstrumentMetrics:(id)a2;
- (id)initWithAccessoryID:(id)a0;
- (id)startSynthesizingRequest:(id)a0;
- (void)STS_subscribeVoices:(id)a0;
- (void)cancelAudioRequest:(id)a0;
- (void)endAudioPowerUpdate;
- (void)getVoiceInfoForLanguageCode:(id)a0 name:(id)a1 footprint:(long long)a2 gender:(long long)a3 type:(long long)a4 reply:(id /* block */)a5;
- (void)beginAudioPowerUpdateWithReply:(id /* block */)a0;
- (void)connection:(id)a0 speechRequestDidPause:(id)a1;
- (id)_continueSpeakingRequest;
- (void)STS_cancelRequest:(id)a0;
- (void)playVoicePreviewForLanguageCode:(id)a0 voiceName:(id)a1 previewType:(long long)a2 completion:(id /* block */)a3;
- (BOOL)pauseSpeakingAtNextBoundary:(long long)a0 synchronously:(BOOL)a1 error:(id *)a2;
- (void)connection:(id)a0 invalidatedWithError:(id)a1;
- (id)STS_startSpeakingRequest:(id)a0;
- (id)availableVoicesForLanguageCode:(id)a0;
- (void)connection:(id)a0 synthesisRequest:(id)a1 didFinishWithInstrumentMetrics:(id)a2 error:(id)a3;
- (void)STS_textToPhonemesWithRequest:(id)a0 phonemeSystem:(long long)a1 completion:(id /* block */)a2;
- (void)STS_cancelAudioRequest:(id)a0;
- (void)connection:(id)a0 speechRequest:(id)a1 didStopAtEnd:(BOOL)a2 phonemesSpoken:(id)a3 error:(id)a4;
- (BOOL)stopSpeakingAtNextBoundary:(long long)a0 synchronously:(BOOL)a1 error:(id *)a2;
- (void)cleanUnusedAssets:(id /* block */)a0;
- (BOOL)getAveragePower:(float *)a0 andPeakPower:(float *)a1;
- (BOOL)queryPhaticCapability:(id)a0;
- (void)connection:(id)a0 speechRequest:(id)a1 willSpeakMark:(long long)a2 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)connection:(id)a0 speechRequest:(id)a1 didReceiveTimingInfo:(id)a2;
- (void)getLocalVoiceAssetsForLanguage:(id)a0 reply:(id /* block */)a1;
- (void)connection:(id)a0 presynthesizedAudioRequest:(id)a1 successWithInstrumentMetrics:(id)a2 error:(id)a3;
- (void)estimateDurationOfRequest:(id)a0 completion:(id /* block */)a1;
- (void)forwardStreamObject:(id)a0;
- (void)STS_subscribedVoicesWithClientID:(id)a0 reply:(id /* block */)a1;
- (void)willBeginAccessPower;
- (void)connection:(id)a0 speechRequestDidStart:(id)a1;
- (void)connection:(id)a0 speechRequest:(id)a1 didGenerateAudioChunk:(id)a2;
- (id)availableLanguageCodes;
- (id)STS_startSpeakingAudioRequest:(id)a0;
- (void)getVoiceResourceForLanguage:(id)a0 reply:(id /* block */)a1;
- (BOOL)isSystemSpeaking;
- (id)STS_startSynthesizingRequest:(id)a0;
- (void)cancelRequest:(id)a0;
- (void)textToPhonemesWithRequest:(id)a0 phonemeSystem:(long long)a1 completion:(id /* block */)a2;
- (id)cachePresynthesizedAudioRequest:(id)a0;
- (void)STS_downloadedVoicesMatching:(id)a0 reply:(id /* block */)a1;
- (double)STS_estimateDurationOfRequest:(id)a0;
- (id)startSpeakingRequest:(id)a0;
- (void)didEndAccessPower;
- (BOOL)isSpeaking;
- (void).cxx_destruct;
- (id)initForInputFeedback;
- (void)connection:(id)a0 previewRequestDidStartPlaying:(id)a1;
- (void)connection:(id)a0 speechRequestDidContinue:(id)a1;
- (id)STS_signalInlineStreaming:(id)a0;
- (BOOL)STS_isSpeaking;
- (double)estimateDurationOfRequest:(id)a0;
- (void)STS_forwardStreamObject:(id)a0;
- (id)_stopSpeakingPresynthesizedAudioRequest:(id)a0 synchronously:(BOOL)a1;
- (void)getVoiceInfoForLanguageCode:(id)a0 name:(id)a1 type:(long long)a2 footprint:(long long)a3 reply:(id /* block */)a4;
- (void)getAutoDownloadedVoiceAssets:(id /* block */)a0;
- (float)maximumRate;
- (void)setAutoDownloadedVoiceAssets:(id)a0;
- (void)invokeDaemon:(id /* block */)a0;
- (id)errorFromSTSError:(id)a0;
- (id)STS_prewarmRequest:(id)a0;
- (void)getAllAutoDownloadedVoiceAssets:(id /* block */)a0;
- (void)connection:(id)a0 presynthesizedAudioRequest:(id)a1 didStopAtEnd:(BOOL)a2 error:(id)a3;
- (id)_pauseSpeakingRequestAtNextBoundary:(long long)a0 synchronously:(BOOL)a1;
- (void)STS_estimateDurationOfRequest:(id)a0 completion:(id /* block */)a1;
- (void)stopPlayingVoicePreview;
- (void)getLocalVoiceResources:(id /* block */)a0;
- (id)_stopSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 synchronously:(BOOL)a2;
- (void)STS_getSynthesisVoiceMatching:(id)a0 reply:(id /* block */)a1;
- (id)speechString;
- (float)minimumRate;
- (void)connection:(id)a0 presynthesizedAudioRequestDidStart:(id)a1;
- (id)prewarmIfNeededWithRequest:(id)a0;
- (BOOL)continueSpeakingWithError:(id *)a0;
- (BOOL)stopSpeakingPresynthesizedAudioSynchronously:(BOOL)a0 error:(id *)a1;
- (id)startSpeakingPresynthesizedAudioRequest:(id)a0;
- (void)killDaemon;
- (id)availableFootprintsForVoice:(id)a0 languageCode:(id)a1;
- (void)STS_queryPhaticCapabilityWithRequest:(id)a0 reply:(id /* block */)a1;
- (void)STS_subscribedVoices:(id /* block */)a0;

@end

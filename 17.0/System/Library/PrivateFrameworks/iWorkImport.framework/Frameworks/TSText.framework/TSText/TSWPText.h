@class TSWPStorage, TSDCanvas, TSWPListStyle, TSWPColumnStyle, NSObject, TSUColor, NSMutableArray, TSDLayoutController, NSString, TSWPTextParentLayout, TSWPParagraphStyle, TSWPPadding, TSPObject, NSArray, TSSStylesheet, TSULocale, TSWPTextParentInfo;
@protocol TSWPFootnoteHeightMeasurer, TSWPTextDelegate, TSWPOffscreenColumn, TSWPTopicNumberHints, TSWPFootnoteMarkProvider, TSDHint;

@interface TSWPText : NSObject <TSWPLayoutTarget, TSWPLayoutOwner, TSWPColumnMetrics, TSWPStyleProviding> {
    TSWPListStyle *_listStyle;
    TSWPColumnStyle *_columnStyle;
    TSSStylesheet *_stylesheet;
    struct CGSize { double width; double height; } _minSize;
    struct CGSize { double width; double height; } _maxSize;
    unsigned long long _pageNumber;
    unsigned long long _pageCount;
    int _flags;
    struct CGPoint { double x; double y; } _anchor;
    TSWPTextParentInfo *_parentInfo;
    TSWPTextParentLayout *_parentLayout;
    TSDLayoutController *_layoutController;
}

@property (weak, nonatomic) NSObject<TSWPTextDelegate> *delegate;
@property (readonly, nonatomic) TSWPParagraphStyle *paragraphStyle;
@property (retain, nonatomic) TSUColor *textColorOverride;
@property (readonly, nonatomic) TSULocale *locale;
@property (readonly, nonatomic) NSArray *childLayouts;
@property (nonatomic) BOOL vertical;
@property (readonly, nonatomic) NSMutableArray *columns;
@property (readonly, nonatomic) id<TSWPOffscreenColumn> previousTargetLastColumn;
@property (readonly, nonatomic) id<TSWPOffscreenColumn> nextTargetFirstColumn;
@property (readonly, nonatomic) NSObject<TSWPTopicNumberHints> *nextTargetTopicNumberHints;
@property (readonly, nonatomic) id<TSWPFootnoteHeightMeasurer> footnoteHeightMeasurer;
@property (readonly, nonatomic) id<TSWPFootnoteMarkProvider> footnoteMarkProvider;
@property (readonly, nonatomic) TSPObject<TSDHint> *nextTargetFirstChildHint;
@property (readonly, nonatomic) TSWPStorage *storage;
@property (readonly, nonatomic) BOOL isInstructional;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } minSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } maxSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } currentSize;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } position;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } anchorPoint;
@property (readonly, nonatomic) unsigned long long autosizeFlags;
@property (readonly, nonatomic) int verticalAlignment;
@property (readonly, nonatomic) long long naturalAlignment;
@property (readonly, nonatomic) int naturalDirection;
@property (readonly, nonatomic) BOOL wantsLineFragments;
@property (readonly, nonatomic) BOOL textIsVertical;
@property (readonly, nonatomic) BOOL layoutIsValid;
@property (readonly, nonatomic) BOOL shouldWrapAroundExternalDrawables;
@property (readonly, nonatomic) double maxAnchorInBlockDirection;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } maskRect;
@property (retain, nonatomic) NSMutableArray *anchoredDrawablesForRelayout;
@property (readonly, nonatomic) TSDCanvas *canvas;
@property (readonly, nonatomic) BOOL shouldHyphenate;
@property (readonly, nonatomic) struct __CFLocale { } *hyphenationLocale;
@property (readonly, nonatomic) BOOL shouldIgnoreAnchoredAttachments;
@property (readonly, nonatomic) BOOL repShouldPreventCaret;
@property (readonly, nonatomic) BOOL isLinked;
@property (readonly, nonatomic) BOOL marginsAreMirrored;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } restrictedLayoutCharRange;
@property (readonly, nonatomic) Class inlineTableOfContentsLayoutClass;
@property (readonly, nonatomic) BOOL alwaysIncludesSpaceBefore;
@property (readonly, nonatomic) BOOL alwaysIncludesSpaceAfter;
@property (readonly, nonatomic) unsigned long long pageNumber;
@property (readonly, nonatomic) unsigned long long pageCount;
@property (readonly, nonatomic) BOOL supportsPageNumbers;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) TSWPPadding *layoutMargins;
@property (readonly, nonatomic) unsigned long long columnCount;
@property (readonly, nonatomic) BOOL alwaysStartsNewTarget;
@property (readonly, nonatomic) BOOL shrinkTextToFit;
@property (readonly, nonatomic) BOOL columnsAreLeftToRight;
@property (readonly, nonatomic) double textScaleFactor;

+ (double)columnLayoutWidthForBodyWidth:(double)a0 insets:(inout struct UIEdgeInsets { double x0; double x1; double x2; double x3; } *)a1;

- (id)init;
- (void).cxx_destruct;
- (id)styleProvider;
- (id)columnMetricsForCharIndex:(unsigned long long)a0 outRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)currentAnchoredDrawableLayouts;
- (id)currentInlineDrawableLayouts;
- (double)gapForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1;
- (id)interiorClippingPath;
- (BOOL)isLastTarget;
- (BOOL)isLayoutOffscreen;
- (id)layoutForInlineDrawable:(id)a0;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)textWrapper;
- (id)validatedLayoutForAnchoredDrawable:(id)a0;
- (double)widthForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1;
- (BOOL)caresAboutStorageChanges;
- (void)drawColumn:(id)a0 inContext:(struct CGContext { } *)a1 isFlipped:(BOOL)a2 viewScale:(double)a3;
- (void)drawColumn:(id)a0 selection:(id)a1 inContext:(struct CGContext { } *)a2 isFlipped:(BOOL)a3 viewScale:(double)a4;
- (BOOL)forceWesternLineBreaking;
- (id)initWithParagraphStyle:(id)a0 columnStyle:(id)a1;
- (id)initWithParagraphStyle:(id)a0 listStyle:(id)a1 columnStyle:(id)a2;
- (void)layoutManager:(id)a0 didClearDirtyRangeWithDelta:(long long)a1 afterCharIndex:(unsigned long long)a2;
- (void)layoutManagerNeedsLayout:(id)a0;
- (id)layoutText:(id)a0 minSize:(struct CGSize { double x0; double x1; })a1 maxSize:(struct CGSize { double x0; double x1; })a2 anchor:(struct CGPoint { double x0; double x1; })a3 flags:(int)a4;
- (id)layoutTextStorage:(id)a0 minSize:(struct CGSize { double x0; double x1; })a1 maxSize:(struct CGSize { double x0; double x1; })a2 anchor:(struct CGPoint { double x0; double x1; })a3 flags:(int)a4;
- (id)layoutTextStorage:(id)a0 minSize:(struct CGSize { double x0; double x1; })a1 maxSize:(struct CGSize { double x0; double x1; })a2 anchor:(struct CGPoint { double x0; double x1; })a3 pageNumber:(unsigned long long)a4 pageCount:(unsigned long long)a5 flags:(int)a6;
- (struct CGSize { double x0; double x1; })measureText:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })adjustedInsetsForTarget:(id)a0;
- (BOOL)descendersCannotClip;
- (double)positionForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1 target:(id)a2 outWidth:(double *)a3 outGap:(double *)a4;
- (id)styleProviderForTextLayout:(id)a0;
- (BOOL)wantsToProvideStylesForTextLayout:(id)a0;
- (void)markHiddenInlineDrawableLayout:(id)a0;
- (id)addPartitionableAttachmentLayout:(id)a0;
- (void)clearHiddenInlineDrawableLayoutMarks;
- (BOOL)containsStartOfRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)didLayoutChangingDirtyRanges;
- (void)drawColumn:(id)a0 selection:(id)a1 inContext:(struct CGContext { } *)a2 isFlipped:(BOOL)a3 viewScale:(double)a4 renderMode:(unsigned long long)a5;
- (void)drawText:(id)a0 inContext:(struct CGContext { } *)a1 minSize:(struct CGSize { double x0; double x1; })a2 maxSize:(struct CGSize { double x0; double x1; })a3 anchor:(struct CGPoint { double x0; double x1; })a4 flags:(int)a5 isFlipped:(BOOL)a6 viewScale:(double)a7;
- (id)initWithStylesheet:(id)a0 paragraphStyle:(id)a1 listStyle:(id)a2 columnStyle:(id)a3 alignmentForNaturalAlignment:(long long)a4 naturalDirection:(int)a5;
- (id)layoutText:(id)a0 context:(id)a1 kind:(unsigned char)a2 minSize:(struct CGSize { double x0; double x1; })a3 maxSize:(struct CGSize { double x0; double x1; })a4 anchor:(struct CGPoint { double x0; double x1; })a5 flags:(int)a6;
- (struct CGSize { double x0; double x1; })measureText:(id)a0 withMaxWidth:(double)a1;
- (void)p_setParentLayoutMaximumFrameSizeForChildren;
- (double)textScaleForChild:(id)a0;

@end

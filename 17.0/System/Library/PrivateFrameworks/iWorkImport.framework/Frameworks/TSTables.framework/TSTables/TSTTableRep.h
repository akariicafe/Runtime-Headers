@class TSTLayout, NSObject, TSTCellRegionGatherer, TSTAnimation, NSMutableArray, TSTCellSelection, TSTLayoutEngine, NSString, NSSet, TSTSelectionDragController, CAShapeLayer, NSArray, TSTTableReferences, TSTTableInfo;
@protocol TSTCanvasReferenceController, TSTTableChromeProvider, TSDContainerInfo, TSTTableAnimationController, TSTTableRepDelegate;

@interface TSTTableRep : TSWPTextHostRep <TSWPRepParent, TSTTableRepInternal, UITextFieldDelegate, CALayerDelegate>

@property (nonatomic, getter=isTableNameValid) BOOL tableNameValid;
@property (nonatomic) BOOL shouldRepositionStockPopover;
@property (nonatomic) BOOL zoomToEditOperationIsInProgress;
@property (nonatomic) BOOL aspectOperationIsInProgress;
@property (nonatomic) BOOL zoomOperationIsInProgress;
@property (nonatomic) double currentScreenScale;
@property (retain, nonatomic) TSTCellRegionGatherer *dirtyCellRegionGatherer;
@property (nonatomic, getter=isRecursivelyDrawingInContext) BOOL recursivelyDrawingInContext;
@property (readonly, nonatomic) NSMutableArray *animationStack;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } zoomToEditVisibleCellRange;
@property (readonly, nonatomic) BOOL dragByHandleOnly;
@property (retain, nonatomic) NSMutableArray *cellEditingMaskLayers;
@property (retain, nonatomic) CAShapeLayer *findSelectionHighlightLayer;
@property BOOL tableRepIsBeingRemovedFromBackgroundLayout;
@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSTLayout *tableLayout;
@property (readonly, nonatomic) TSTLayoutEngine *layoutEngine;
@property (weak, nonatomic) id<TSTTableAnimationController> animationController;
@property (readonly, nonatomic) id<TSTTableRepDelegate> delegate;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformToCanvas;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformFromCanvas;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } canvasVisibleRect;
@property (readonly, nonatomic) id<TSTTableChromeProvider> tableChrome;
@property (readonly, weak, nonatomic) id<TSTCanvasReferenceController> canvasReferenceController;
@property (readonly, nonatomic) TSTCellSelection *selection;
@property (readonly, nonatomic) long long selectionType;
@property (readonly, nonatomic) BOOL isZoomToEditOperationInProgress;
@property (readonly, nonatomic) BOOL layoutDirectionIsLeftToRight;
@property (readonly, nonatomic) BOOL hasVisibleCellWarnings;
@property (readonly, nonatomic) NSArray *viewsOverlappingTableCells;
@property (readonly, nonatomic) TSTAnimation *currentAnimation;
@property (readonly, nonatomic) NSObject<TSDContainerInfo> *containerInfo;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } searchSelectionBounds;
@property (nonatomic) struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } ratingsDragCellID;
@property (readonly, nonatomic) TSTTableReferences *references;
@property (weak, nonatomic) TSTSelectionDragController *cellDragController;
@property (nonatomic) BOOL selectionDragAbortedOnNewSelection;
@property (readonly, nonatomic) BOOL selectionUsesBezierPath;
@property (readonly, nonatomic) BOOL selectsCellOnInitialTap;
@property (readonly, nonatomic) BOOL usesSelectionChromeResizer;
@property (copy, nonatomic) NSSet *visibleFillKnobs;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)a0 incomingObject:(id)a1 mixingTypeContext:(id)a2;
+ (Class)tableRepDelegateClass;
+ (unsigned long long)p_countOfIdenticalCellsBetweenOutgoingTableInfo:(id)a0 incomingTableInfo:(id)a1;

- (BOOL)isDraggable;
- (void)dealloc;
- (id)actionForLayer:(id)a0 forKey:(id)a1;
- (void)drawInContext:(struct CGContext { } *)a0;
- (void)drawLayer:(id)a0 inContext:(struct CGContext { } *)a1;
- (void).cxx_destruct;
- (void)willBeRemoved;
- (BOOL)canDrawInBackgroundDuringScroll;
- (id)editorSelection;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForCellSelection:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)canDrawInParallel;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasBoundsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)contentsRectForCellRangeAcrossSpaces:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 contentsCenterInfo:(struct { BOOL x0; double x1; double x2; double x3; double x4; double x5; double x6; } *)a1 canvasFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2 contentsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })deviceBoundsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)hyperlinkContainerRep;
- (id)hyperlinkRegions;
- (id)initWithLayout:(id)a0 canvas:(id)a1;
- (void)invalidateEditingCell;
- (void)invalidateFrozenHeaders;
- (BOOL)isFullyVisibleWithBorder:(int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layerFrameInScaledCanvas;
- (BOOL)mustDrawOnMainThreadForInteractiveCanvas;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })naturalBoundsRectForHyperlinkField:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_alignedLayerFrameForLayoutSpace:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)popAnimation;
- (void)pushAnimation:(id)a0;
- (void)updateChildrenFromLayout;
- (void)updateFromLayout;
- (void)validateFrozenHeaderColumns;
- (void)validateFrozenHeaderCorner;
- (void)validateFrozenHeaderRows;
- (void)validateFrozenHeaderTableBodyMask;
- (void)validateStrokesInEditingSpillingTextRange;
- (void)validateVisibleRect;
- (void)recursivelyDrawInContext:(struct CGContext { } *)a0 keepingChildrenPassingTest:(id /* block */)a1;
- (id)textureForDescription:(id)a0;
- (void)setTableChrome:(id)a0;
- (BOOL)tappedStockCellAtUnscaledPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)asyncPostTextChangedInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)attachmentCellRepForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (void)didDrawCellImageFill:(id)a0 inCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1;
- (id)hitRep:(struct CGPoint { double x0; double x1; })a0 withPrecision:(BOOL)a1;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })logicalCellIDForUnscaledCanvasPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)p_addObservers;
- (void)p_addTexture:(id)a0 forAnimationStage:(unsigned long long)a1 isFinal:(BOOL)a2 description:(id)a3;
- (id)p_cellAtUnscaledPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })p_cellIDForHyperlinkField:(id)a0;
- (id)p_columnForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 useCache:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_contentFrameWithCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)p_deleteEmptyPivotMessage;
- (void)p_drawAnimation:(id)a0 inContext:(struct CGContext { } *)a1;
- (void)p_drawBackgroundFillInLayoutSpace:(id)a0 gridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 context:(struct CGContext { } *)a2;
- (void)p_drawCheckboxOrRatingInContext:(struct CGContext { } *)a0 viewScale:(double)a1 contentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 cell:(id)a3 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a4;
- (void)p_drawFinalElements:(id)a0 inContext:(struct CGContext { } *)a1;
- (void)p_drawGroupingArrowInContext:(struct CGContext { } *)a0 contentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 cell:(id)a2 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a3 groupingArrowState:(long long)a4 alignedClipFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a5 verticalAlignment:(int)a6 wpColumn:(id)a7;
- (void)p_drawLayoutSpace:(id)a0 dirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inContext:(struct CGContext { } *)a2;
- (void)p_drawLayoutSpace:(id)a0 range:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 inContext:(struct CGContext { } *)a2;
- (void)p_drawTableNameInContext:(struct CGContext { } *)a0 animation:(id)a1;
- (BOOL)p_drawingCheckboxOrRatingInCell:(id)a0 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)p_fontColorAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 cell:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_getImageFrameForAnimation:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })p_horizontalAlignmentTransformForHyperlinkWithBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })p_horizontalAlignmentTransformForHyperlinkWithColumn:(id)a0 cell:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (BOOL)p_isTableRenderingRotated;
- (void)p_lockAndDrawLayoutSpace:(id)a0 checkFrameHasWidthAndHeight:(BOOL)a1 dirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 inContext:(struct CGContext { } *)a3;
- (void)p_manageEmptyPivotMessage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_naturalBoundsRectForHyperlinkField:(id)a0 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 column:(id)a2 contentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 horizontalAlignmentTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4;
- (void)p_positionEmptyPivotMessage;
- (void)p_removeObservers;
- (void)p_resetDynamicModePropertiesForContainedTextEditing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_scaledCanvasFrame;
- (void)p_updateDynamicModePropertiesForContainedTextEditing;
- (void)p_updateDynamicModePropertiesForContainedTextEditingWithSpillingTextRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)tappedControlCellAtUnscaledPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)wantsActivityLine;

@end

@class NSIndexSet, NSMapTable;

@interface TSTCategoryTranslator : TSTTableTranslator <TSTGroupByChangeProtocol> {
    unsigned long long _groupingsChangingLevel;
    BOOL _sawGroupingChangeNeedingReset;
}

@property (nonatomic) BOOL suspendNotify;
@property (nonatomic) BOOL cachedIndexSetsAreValid;
@property (nonatomic) struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } cachedIndexesUnfairLock;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForSummaryRows;
@property (retain, nonatomic) NSMapTable *cachedSummaryRowIndexesAtLevels;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForLabelRows;
@property (retain, nonatomic) NSMapTable *cachedLabelRowIndexesAtLevels;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForSummaryAndLabelRows;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForLeadingRows;
@property (retain, nonatomic) NSMapTable *cachedLeadingRowIndexesAtLevels;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForLeadingSummaryRows;
@property (retain, nonatomic) NSMapTable *cachedLeadingSummaryRowIndexesAtLevels;

+ (unsigned long long)tableStyleAreaForCategoryLevel:(unsigned char)a0 isLabel:(BOOL)a1;

- (void).cxx_destruct;
- (id)columnWidths;
- (BOOL)isCategorized;
- (id)rowHeights;
- (void)removeRowsAtIndexes:(id)a0;
- (id)initWithTableInfo:(id)a0;
- (id)mergedGridIndicesForDimension:(long long)a0;
- (struct TSUViewColumnIndex { unsigned short x0; })numberOfHeaderColumns;
- (void)setNumberOfHeaderColumns:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned long long)tableAreaForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)allRichTextStorages;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForChromeCellCoord:(struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)baseCellRegionForViewCellRegion:(id)a0;
- (struct TSUModelColumnIndex { unsigned short x0; })baseColumnIndexForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })baseRowIndexForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)indexesForSummaryRows;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)a0;
- (unsigned char)maxVisibleRowLevel;
- (struct TSUViewColumnIndex { unsigned short x0; })numberOfCategoryColumns;
- (unsigned long long)numberOfRowLevels;
- (id)viewCellRegionForBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)viewCellRegionForBaseCellRegion:(id)a0;
- (struct TSUViewColumnIndex { unsigned short x0; })viewColumnIndexForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (void)i_populateIndexesForSummaryRows;
- (BOOL)mergeCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)allRowGroupUIDs;
- (void)didCreateGroup:(id)a0;
- (void)didRemoveGroup:(id)a0;
- (void)i_populateIndexesForLeadingRows;
- (struct TSUModelRowIndex { unsigned int x0; })summaryRowIndexForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (double)widthOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (void)addReceiverToGroupBy:(id)a0;
- (id)aggregateFormulaOwner;
- (BOOL)areMapsStale;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct RefTypeHolder<TSCECellRef, 0> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })baseCellRefForViewCellRef:(const void *)a0;
- (id)baseCellRegionForViewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (struct TSUModelColumnIndex { unsigned short x0; })baseColumnIndexForChromeColumnIndex:(struct TSUChromeColumnIndex { unsigned short x0; })a0;
- (id)baseColumnIndexesForViewColumnIndexes:(id)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })baseCoordFromViewCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })baseRowIndexForChromeRowIndex:(struct TSUChromeRowIndex { unsigned int x0; })a0;
- (id)baseRowIndexesForViewRowIndexes:(id)a0;
- (id)baseShuffleMapForViewShuffleMap:(id)a0;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyBoundingRangeForBaseLevel;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyRangeForLowestLevelGroupEnclosingCellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)cellExistsAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })cellIDForCellContainingRichTextStorage:(id)a0;
- (id)cellRegionForTableStyleArea:(unsigned long long)a0;
- (id)cellStyleAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })cellUIDForSummaryCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (unsigned char)cellValueTypeAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (BOOL)checkMapsAndAssert:(BOOL)a0;
- (struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })chromeCellCoordForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })chromeCellCoordForViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct RefTypeHolder<TSCECellRef, 2> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })chromeCellRefForBaseCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCECellRef, 2> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })chromeCellRefForViewCellRef:(const void *)a0;
- (struct TSUChromeColumnIndex { unsigned short x0; })chromeColumnIndexForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (struct TSUChromeColumnIndex { unsigned short x0; })chromeColumnIndexForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)chromeColumnIndexesForViewColumnIndexes:(id)a0;
- (struct TSUChromeRowIndex { unsigned int x0; })chromeRowIndexForBaseRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (struct TSUChromeRowIndex { unsigned int x0; })chromeRowIndexForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)chromeRowIndexesForViewRowIndexes:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (id)commentHostingAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)commentHostingAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 forCommentStorage:(id)a1 updateCommentMaps:(BOOL)a2;
- (id)conditionalStyleSetAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)coordinateMapper;
- (id)defaultCellStyleForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (void)defaultStyleHandlesForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 styleDefaultsCache:(id)a2 outCellStyleHandle:(id *)a3 outTextStyleHandle:(id *)a4;
- (id)defaultTextStyleForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (void)didAddRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 toGroup:(id)a1;
- (void)didChangeGroupByStructure;
- (void)didMakeGroupingChangesInRowUIDs:(id)a0;
- (void)didRemoveRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 fromGroup:(id)a1;
- (void)endOfGroupingChangesBatch;
- (void)enumerateMergesIntersectingCellRegion:(id)a0 usingBlock:(id /* block */)a1;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })expandCellRangeToCoverMergedCells:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)expandCellRegionToCoverMergedCells:(id)a0;
- (void)flushCachedIndexSets;
- (void)forceGroupingChangeReset;
- (id)formulaAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)getCell:(id)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 suppressCellBorder:(BOOL)a2;
- (int)getDefaultCell:(out id)a0 forCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (int)getValue:(out struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[32]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[11]; } x0; unsigned char x1; } *)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (unsigned char)groupLevelAtLabelRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned char)groupLevelAtSummaryRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (BOOL)hasCommentAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (BOOL)hasFormulaAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (BOOL)hasFormulaAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasMergeRangeSpanningRowsForCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)hasMergeRangesIntersectingCellRegion:(id)a0;
- (BOOL)hasRangeSpanningRowsForCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (double)heightOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (id)i_indexesForLabelRowsAtGroupLevel:(unsigned char)a0;
- (id)i_indexesForLeadingRowsAtGroupLevel:(unsigned char)a0;
- (id)i_indexesForLeadingSummaryRowsAtGroupLevel:(unsigned char)a0;
- (id)i_indexesForSummaryRowsAtGroupLevel:(unsigned char)a0;
- (void)i_populateCachedIndexSetsIfNeeded;
- (void)i_populateIndexesForLabelRows;
- (void)i_populateIndexesForLeadingSummaryRows;
- (void)i_populateIndexesForSummaryAndLabelRows;
- (id)indexesForLabelRows;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingRows;
- (id)indexesForLeadingRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingSummaryRows;
- (id)indexesForLeadingSummaryRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForRowsContainedByGroupUIDs:(id)a0;
- (id)indexesForSummaryAndLabelRows;
- (int)insertColumnsAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (int)insertRowsAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3 unsetFilterHidingAction:(BOOL)a4;
- (BOOL)isGroupedForRows;
- (BOOL)isValidMergeRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (Class)iteratorClass;
- (unsigned int)maxNumberOfHeaderColumns;
- (unsigned char)maxRowLevel;
- (id)mergeActionForRegion:(id)a0;
- (id)mergeActionForRegion:(id)a0 nonOriginPartialsOnly:(BOOL)a1;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })mergeOriginForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })mergeRangeAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct vector<TSUViewCellRect, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; struct TSUViewCellRect *x1; struct __compressed_pair<TSUViewCellRect *, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; } x2; })mergeRangesAndCrumbsIntersectingRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (struct vector<TSUViewCellRect, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; struct TSUViewCellRect *x1; struct __compressed_pair<TSUViewCellRect *, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; } x2; })mergeRangesIntersectingCellRegion:(id)a0;
- (struct vector<TSUViewCellRect, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; struct TSUViewCellRect *x1; struct __compressed_pair<TSUViewCellRect *, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; } x2; })mergeRangesIntersectingRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRegion:(id)a0;
- (id)metadataForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)metadataForRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned int)minNumberOfHeaderColumns;
- (unsigned char)minRowLevel;
- (void)moveColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (unsigned long long)numberOfPopulatedCells;
- (int)p_applyViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 toSummaryUsingBlock:(id /* block */)a1 toLabelUsingBlock:(id /* block */)a2 toCategoryColumnUsingBlock:(id /* block */)a3 toBaseUsingBlock:(id /* block */)a4;
- (void)p_applyViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 toCategoryColumnUsingBlock:(id /* block */)a1 toBaseUsingBlock:(id /* block */)a2 toBeyondBoundsUsingBlock:(id /* block */)a3;
- (void)p_applyViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 toSummaryUsingBlock:(id /* block */)a1 toLabelUsingBlock:(id /* block */)a2 toBaseUsingBlock:(id /* block */)a3 toBeyondBoundsUsingBlock:(id /* block */)a4;
- (id)p_defaultCellStyleOfSummaryOrLabelRowAtLevel:(unsigned char)a0 isLabel:(BOOL)a1;
- (void)p_defaultStyleHandlesOfSummaryOrLabelRowAtLevel:(unsigned char)a0 isLabel:(BOOL)a1 styleDefaultsCache:(id)a2 outCellStyleHandle:(id *)a3 outTextStyleHandle:(id *)a4;
- (void)p_defaultStylesOfSummaryOrLabelRowAtLevel:(unsigned char)a0 isLabel:(BOOL)a1 outCellStyle:(id *)a2 outTextStyle:(id *)a3;
- (id)p_defaultTextStyleOfSummaryOrLabelRowAtLevel:(unsigned char)a0 isLabel:(BOOL)a1;
- (id)populatedCategoryGroupLevelsInColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (void)postCommentNotificationForStorage:(id)a0 atViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 notificationKey:(id)a2;
- (id)regionForValueOrCommentCellsInRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (void)removeAnnotationsFromColumnsAtIndexes:(id)a0;
- (void)removeAnnotationsFromRowsAtIndexes:(id)a0;
- (void)removeColumnsAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 count:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (void)removeColumnsAtIndexes:(id)a0;
- (id)removeReturningInverseForRegion:(id)a0;
- (void)removeRowsAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 count:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (void)resetViewMap;
- (void)resetViewMapAndNotify;
- (unsigned int)rowAggregateGroupSize;
- (int)setCellStyle:(id)a0 ofColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (int)setCellStyle:(id)a0 ofRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (void)setHeight:(double)a0 ofRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (int)setTextStyle:(id)a0 ofColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (int)setTextStyle:(id)a0 ofRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (id)shrinkReturningInverseForRegion:(id)a0;
- (void)startOfGroupingChangesBatch;
- (id)stringAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 optionalCell:(id)a1;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })summaryCellCoordForCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })summaryCellCoordForViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)summaryCellVendor;
- (struct TSUModelColumnIndex { unsigned short x0; })summaryColumnIndexForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)summaryModel;
- (void)suspendChangeDescriptorNotificationsDuringBlock:(id /* block */)a0;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (unsigned long long)tableStyleAreaForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (unsigned long long)tableStyleAreaForRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)textStyleAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (id)translatedCellRangeName:(const void *)a0 usedSymbolicName:(out BOOL *)a1;
- (BOOL)unmergeCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForChromeCellCoord:(struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForSummaryCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct RefTypeHolder<TSCECellRef, 1> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })viewCellRefForBaseCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCECellRef, 1> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })viewCellRefForChromeCellRef:(const void *)a0;
- (id)viewColumnGridIndexesForBaseColumnGridIndexes:(id)a0;
- (struct TSUViewColumnIndex { unsigned short x0; })viewColumnIndexForChromeColumnIndex:(struct TSUChromeColumnIndex { unsigned short x0; })a0;
- (id)viewColumnIndexesForBaseColumnIndexes:(id)a0;
- (id)viewColumnIndexesForChromeColumnIndexes:(id)a0;
- (struct TSUViewRowIndex { unsigned int x0; })viewRowIndexForBaseRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (struct TSUViewRowIndex { unsigned int x0; })viewRowIndexForChromeRowIndex:(struct TSUChromeRowIndex { unsigned int x0; })a0;
- (id)viewRowIndexesForBaseRowIndexes:(id)a0;
- (id)viewRowIndexesForChromeRowIndexes:(id)a0;
- (void)willRemoveGroup:(id)a0;
- (BOOL)withinGroupingChangesBatch;

@end

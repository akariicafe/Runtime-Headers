@class TSWPStorage, NSDate, TSTImportWarningSet, NSObject, TSDCommentStorage, TSTCellStyle, TSCEFormulaObject, NSString, TSTCellSpec, TSTTextStyleHandle, TSWPParagraphStyle, TSDFill, TSTStockDetails, TSTCellStyleHandle, TSKFormat, TSULocale, TSTCellBorder, TSTConditionalStyleSet;

@interface TSTCell : NSObject <NSCopying> {
    struct TSUDecimal { struct { unsigned long long w[2]; } _decimal; } _valueBigNumber;
    double _valueDouble;
    unsigned int _valueID;
    NSObject *_valueObject;
    TSTCellStyle *_strongCellStyle;
    TSWPParagraphStyle *_strongTextStyle;
}

@property (readonly, nonatomic) struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } _rawValueForDecimalCoercion;
@property (readonly, nonatomic) NSString *_rawValueForStringCoercion;
@property (nonatomic) unsigned char valueType;
@property (readonly, nonatomic) unsigned char cellFormatKind;
@property (nonatomic) unsigned int stringID;
@property (nonatomic) unsigned int formulaSyntaxErrorID;
@property (nonatomic) unsigned int richTextID;
@property (nonatomic) unsigned int cellStyleID;
@property (nonatomic) unsigned int textStyleID;
@property (nonatomic) unsigned int conditionalStyleID;
@property (nonatomic) unsigned int formulaID;
@property (nonatomic) unsigned int controlCellSpecID;
@property (nonatomic) unsigned int numberFormatID;
@property (nonatomic) unsigned int currencyFormatID;
@property (nonatomic) unsigned int dateFormatID;
@property (nonatomic) unsigned int durationFormatID;
@property (nonatomic) unsigned int textFormatID;
@property (nonatomic) unsigned int booleanFormatID;
@property (nonatomic) unsigned int commentStorageID;
@property (nonatomic) unsigned int importWarningSetID;
@property (readonly, nonatomic) BOOL hasNumberFormat;
@property (readonly, nonatomic) BOOL hasCurrencyFormat;
@property (readonly, nonatomic) BOOL hasDateFormat;
@property (readonly, nonatomic) BOOL hasDurationFormat;
@property (readonly, nonatomic) BOOL hasTextFormat;
@property (readonly, nonatomic) BOOL hasBooleanFormat;
@property (nonatomic) TSULocale *locale;
@property (readonly, nonatomic) BOOL isEmptyForDataStore;
@property (readonly, nonatomic) BOOL isEmpty;
@property (nonatomic) double numberDoubleValue;
@property (nonatomic) double currencyDoubleValue;
@property (readonly, nonatomic) double underlyingDoubleValue;
@property (nonatomic) BOOL boolValue;
@property (nonatomic) double durationTimeIntervalValue;
@property (retain, nonatomic) NSDate *dateValue;
@property (retain, nonatomic) NSString *stringValue;
@property (retain, nonatomic) TSWPStorage *formulaSyntaxError;
@property (nonatomic) struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } numberDecimalValue;
@property (nonatomic) struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } currencyDecimalValue;
@property (readonly, nonatomic) struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } underlyingDecimalValue;
@property (retain, nonatomic) TSWPStorage *richTextValue;
@property (readonly, nonatomic) BOOL hasFormulaSyntaxError;
@property (readonly, nonatomic) BOOL hasRichText;
@property (readonly, nonatomic) BOOL mightBeInterestedInMigration;
@property (readonly, nonatomic) NSString *formulaSyntaxErrorString;
@property (readonly, nonatomic) NSString *formattedValue;
@property (readonly, nonatomic) NSString *stringForEditing;
@property (readonly, nonatomic) NSString *stringForDisplayWithoutColor;
@property (readonly, nonatomic) NSString *stringForUnderlyingValue;
@property (readonly, nonatomic) TSWPStorage *richTextStorageForLayout;
@property (readonly, nonatomic) BOOL valueIsText;
@property (readonly, nonatomic) BOOL valueIsStringOrNumber;
@property (readonly, nonatomic) BOOL valueIsNumberOrTime;
@property (readonly, nonatomic) BOOL valueRepresentsDateWithoutTime;
@property (readonly, nonatomic) BOOL hasValue;
@property (readonly, nonatomic) BOOL hasValueOrError;
@property (readonly, nonatomic) BOOL hasContentBreakingMergeFragment;
@property (readonly, nonatomic) BOOL dataIsReplaceable;
@property (readonly, nonatomic) TSTCellStyleHandle *cellStyleHandle;
@property (nonatomic) TSTCellStyle *cellStyle;
@property (readonly, nonatomic) TSTTextStyleHandle *textStyleHandle;
@property (nonatomic) TSWPParagraphStyle *textStyle;
@property (retain, nonatomic) TSTConditionalStyleSet *conditionalStyle;
@property (nonatomic) unsigned char conditionalStyleAppliedRule;
@property (retain, nonatomic) TSTCellBorder *cellBorder;
@property (readonly, nonatomic) BOOL hasCellStyle;
@property (readonly, nonatomic) BOOL hasTextStyle;
@property (readonly, nonatomic) BOOL hasConditionalStyle;
@property (readonly, nonatomic) TSWPParagraphStyle *effectiveTextStyle;
@property (readonly, nonatomic) int writingDirection;
@property (readonly, nonatomic) TSDFill *cellFill;
@property (readonly, nonatomic) unsigned int interactionType;
@property (retain, nonatomic) TSTCellSpec *cellSpec;
@property (retain, nonatomic) TSCEFormulaObject *formulaObject;
@property (readonly, nonatomic) BOOL hasCellSpec;
@property (readonly, nonatomic) BOOL hasFormula;
@property (readonly, nonatomic) BOOL hasStockFormulaForStockUI;
@property (readonly, nonatomic) TSTStockDetails *stockDetails;
@property (readonly, nonatomic) TSTCellSpec *cellSpecForDiff;
@property (readonly, nonatomic) BOOL hasFormulaAnyError;
@property (readonly, nonatomic) BOOL hasFormulaEvaluationError;
@property (readonly, nonatomic) BOOL hasControl;
@property (readonly, nonatomic) unsigned long long popupChoiceIndex;
@property (nonatomic) unsigned short explicitFormatFlags;
@property (readonly, nonatomic) unsigned int formatType;
@property (readonly, nonatomic) TSKFormat *currentFormat;
@property (readonly, nonatomic) TSKFormat *numberFormat;
@property (readonly, nonatomic) TSKFormat *currencyFormat;
@property (readonly, nonatomic) TSKFormat *dateFormat;
@property (readonly, nonatomic) TSKFormat *durationFormat;
@property (readonly, nonatomic) TSKFormat *textFormat;
@property (readonly, nonatomic) TSKFormat *booleanFormat;
@property (readonly, nonatomic) BOOL hasCurrentFormat;
@property (readonly, nonatomic) BOOL currentFormatIsExplicit;
@property (readonly, nonatomic) BOOL currentFormatIsExplicitForCalcEngine;
@property (readonly, nonatomic) BOOL currencyIsMostRecentlySet;
@property (readonly, nonatomic) BOOL currentFormatUsesAccountingStyle;
@property (readonly, nonatomic) unsigned char currentFormatNegativeStyle;
@property (readonly, nonatomic) BOOL hasAnyFormats;
@property (readonly, nonatomic) BOOL hasAnyExplicitFormats;
@property (readonly, nonatomic) BOOL isMostRecentlyExplicitPercent;
@property (readonly, nonatomic) NSString *customFormatString;
@property (readonly, nonatomic) BOOL hasAnyCustomFormat;
@property (readonly, nonatomic) BOOL hasMismatchedFormatAndValue;
@property (readonly, nonatomic) BOOL hasAnyWarning;
@property (readonly, nonatomic) BOOL hasImportWarningSet;
@property (retain, nonatomic) TSTImportWarningSet *importWarningSet;
@property (nonatomic) unsigned short cellFlags;
@property (retain, nonatomic) TSDCommentStorage *commentStorage;
@property (readonly, nonatomic) BOOL hasCommentStorage;

+ (unsigned char)cellFormatKindForValueType:(unsigned char)a0;
+ (BOOL)cellFormatKindIsExpected:(unsigned char)a0;
+ (BOOL)cellValueTypeIsExpected:(unsigned char)a0;
+ (BOOL)formatType:(unsigned int)a0 isSameCellFormatKindAs:(unsigned int)a1;
+ (BOOL)formatType:(unsigned int)a0 isSameCellFormatKindAs:(unsigned int)a1 allowNumberCurrencyMismatch:(BOOL)a2;
+ (BOOL)formatTypeIsExpected:(unsigned int)a0;
+ (BOOL)mismatchBetweenValueType:(unsigned char)a0 andFormatType:(unsigned int)a1;
+ (BOOL)p_mismatchBetweenValueType:(unsigned char)a0 andCellFormatKind:(unsigned char)a1;
+ (id)stringForCellValueType:(unsigned char)a0;

- (void)clear;
- (id)initWithLocale:(id)a0;
- (id).cxx_construct;
- (id)description;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)clearValue;
- (void)inflateFromStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1;
- (id)initWithStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1;
- (BOOL)hasExplicitFormatOfType:(unsigned int)a0 allowMismatchedSpare:(BOOL)a1;
- (void)setCurrentFormat:(id)a0 isExplicit:(BOOL)a1;
- (void)setFormat:(id)a0 isExplicit:(BOOL)a1;
- (BOOL)_coerceToCustomNumberishFormat:(unsigned int)a0;
- (BOOL)coerceToFormatType:(unsigned int)a0 usingSpares:(BOOL)a1;
- (void)setFormat:(id)a0 shouldSetExplFlags:(BOOL)a1 isExplicit:(BOOL)a2 makeCurrent:(BOOL)a3 clearingID:(BOOL)a4;
- (void)clearAllFormats;
- (void)inflateFromStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1 cache:(id)a2 suppressingTransmutation:(BOOL)a3;
- (void)setConditionalStyle:(id)a0 clearingID:(BOOL)a1;
- (void)setCurrencyOrNumberDoubleValue:(double)a0;
- (void)setImportWarningSet:(id)a0 clearingID:(BOOL)a1;
- (BOOL)_coerceEmptyCellToFormat:(unsigned int)a0;
- (BOOL)_coerceTextCellToBestNumberFormatUsingLimitedParsing:(BOOL)a0 allowFractions:(BOOL)a1;
- (BOOL)_coerceToBooleanFormat;
- (BOOL)_coerceToCheckboxFormat;
- (BOOL)_coerceToCurrencyFormat;
- (BOOL)_coerceToCustomCurrencyFormat;
- (BOOL)_coerceToCustomDateTimeFormat;
- (BOOL)_coerceToCustomNumberFormat;
- (BOOL)_coerceToCustomTextFormat;
- (BOOL)_coerceToDateTimeFormat;
- (BOOL)_coerceToDecimalFormat;
- (BOOL)_coerceToDurationFormat;
- (BOOL)_coerceToFractionFormat;
- (BOOL)_coerceToNumberFormatWithSeparatorFixing:(unsigned int)a0;
- (BOOL)_coerceToPercentageFormat;
- (BOOL)_coerceToRatingFormat;
- (BOOL)_coerceToScientificFormat;
- (BOOL)_coerceToTextFormat;
- (BOOL)_parseFormulaFromString:(id)a0 tableInfo:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (BOOL)_validateCustomFormatWrapper:(id)a0;
- (void)adoptStylesheet:(id)a0 withMapper:(id)a1 supportsInlineAttachments:(BOOL)a2;
- (void)applyFormulaResult:(const struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[32]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[11]; } x0; unsigned char x1; } *)a0;
- (void)applyFormulaResult:(const struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[32]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[11]; } x0; unsigned char x1; } *)a0 context:(id)a1 hasWarnings:(BOOL)a2 outWriteDidBeginOrEndWithTextCell:(BOOL *)a3 propagateCheckboxesAndRatings:(BOOL)a4;
- (void)applyPopupChoiceIndex:(unsigned long long)a0;
- (void)bakeFormulaToValue;
- (id)candidateFormatForSliderStepperControlWithIsCurrent:(BOOL *)a0;
- (id)cellByApplyingCellDiff:(id)a0 toTable:(id)a1 andUpdateInverse:(id)a2 optionalConcurrentStylesheet:(id)a3;
- (id)cellFillComparedToDefault:(id)a0 suppressCS:(BOOL)a1 isDefault:(BOOL *)a2;
- (id)cellValueDescription;
- (id)cellValueTypeDescription;
- (void)clearDataListIDs;
- (void)clearFormatOfType:(unsigned int)a0;
- (void)clearStrokes;
- (BOOL)coerceTextCellToBestNumberFormatUsingLimitedParsing:(BOOL)a0;
- (BOOL)coerceToBaseFormat:(id)a0;
- (void)copyAllFormatsToCell:(id)a0;
- (void)copyJustStrokesToCell:(id)a0;
- (void)copyJustStyleAndStrokesToCell:(id)a0;
- (void)copyJustValueToCell:(id)a0;
- (void)copyToCell:(id)a0;
- (void)copyValueAndFormatToCell:(id)a0;
- (id)formatForStorageFlag:(unsigned int)a0;
- (unsigned int)formatIDForStorageFlag:(unsigned int)a0;
- (id)formatOfCellFormatKind:(unsigned char)a0 isExplicit:(BOOL *)a1;
- (id)formatOfType:(unsigned int)a0 allowMismatchedSpare:(BOOL)a1;
- (BOOL)hasEqualContentToCell:(id)a0;
- (BOOL)hasEqualContentToCell:(id)a0 usingRichTextObjectComparisonBlock:(id /* block */)a1;
- (BOOL)hasEqualValueToCell:(id)a0;
- (BOOL)hasFormatOfType:(unsigned int)a0 allowMismatchedSpare:(BOOL)a1;
- (void)inflateFromStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1 cache:(id)a2;
- (void)inflateFromStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 dataStore:(id)a1 suppressingTransmutation:(BOOL)a2;
- (void)p_TSTCellSetMostRecentlySetNumberFormatWithCurrencyFlag:(BOOL)a0;
- (void)p_clearFormatOfCellFormatKind:(unsigned char)a0;
- (BOOL)p_clearIfImplicitAndNotCurrentForKind:(unsigned char)a0 format:(id)a1 explicitFormatMask:(unsigned short)a2;
- (BOOL)p_currentFormatIsEqualToOtherCellFormat:(id)a0;
- (id)p_formatOfCellFormatKind:(unsigned char)a0 create:(BOOL)a1 returnFormat:(BOOL)a2 outCreated:(BOOL *)a3;
- (BOOL)p_formatTypeIsANumberFormatTypeForMostRecentlySet:(unsigned int)a0;
- (BOOL)p_hasExplicitFormatOfCellFormatKind:(unsigned char)a0;
- (void)p_setFormatExplicit:(BOOL)a0 fromCellFormatKind:(unsigned char)a1 setMostRecentlySet:(BOOL)a2;
- (void)p_setFormatFlags:(unsigned short)a0 explicit:(BOOL)a1;
- (void)p_setFormatForFormulaResult:(id)a0 propagation:(BOOL)a1;
- (void)parseContentFromString:(id)a0 flags:(unsigned long long)a1;
- (void)parseContentOrFormulaFromString:(id)a0 tableInfo:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2 flags:(unsigned long long)a3;
- (void)processCustomFormatsWithBlock:(id /* block */)a0;
- (BOOL)removeControlCellSpec;
- (BOOL)removeCustomFormatsWithIDs:(id)a0;
- (id)reorganizeValueForSorting;
- (void)setCellSpec:(id)a0 clearingID:(BOOL)a1;
- (void)setCellStyle:(id)a0 clearingID:(BOOL)a1;
- (void)setCellStyleHandle:(id)a0 clearingID:(BOOL)a1;
- (void)setCommentStorage:(id)a0 clearingID:(BOOL)a1;
- (void)setCurrencyDecimalValue:(struct TSUDecimal { struct { unsigned long long x0[2]; } x0; })a0 roundToDoublePrecision:(BOOL)a1;
- (void)setCurrencyOrNumberDecimalValue:(const struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } *)a0;
- (void)setCurrentFormat:(id)a0 flags:(unsigned short)a1;
- (void)setCurrentFormat:(id)a0 isExplicit:(BOOL)a1 forExcel:(BOOL)a2;
- (void)setDefaultFormatForValue;
- (void)setFormatID:(unsigned int)a0 forStorageFlag:(unsigned int)a1;
- (void)setFormulaObject:(id)a0 clearingID:(BOOL)a1;
- (void)setFormulaSyntaxError:(id)a0 clearingID:(BOOL)a1;
- (void)setNumberDecimalValue:(struct TSUDecimal { struct { unsigned long long x0[2]; } x0; })a0 roundToDoublePrecision:(BOOL)a1;
- (void)setProvidedValueTypeBeforeUpgrade;
- (void)setRichTextValue:(id)a0 clearingID:(BOOL)a1 convertToPlaintextIfPossible:(BOOL)a2;
- (void)setRichTextValueWithoutPlaintextCollapse:(id)a0;
- (void)setStringValue:(id)a0 clearingID:(BOOL)a1;
- (void)setStringValue:(id)a0 clearingID:(BOOL)a1 shouldWrap:(BOOL)a2;
- (void)setTextStyle:(id)a0 clearingID:(BOOL)a1;
- (void)setTextStyleHandle:(id)a0 clearingID:(BOOL)a1;
- (void)shallowCopyToCell:(id)a0;
- (void)suggestCellFormatKind:(unsigned char)a0;
- (void)updateCustomFormatFromPaste:(id)a0;
- (BOOL)validateAndRepair;

@end

@class TSDTilingLayer, TSWPStorage, TSTTableSelection, TSTSearchReference, NSString, NSMutableArray, TSDEditorController, TSTTableReferences, TSDKnobTracker, TSWPHyperlinkField, NSSet, TSTMasterLayout, TSWPTextEditing, TSTLayout, TSTSelectionDragController, TSTTableModel, TSTTableCellTextEditingRep, TSTCellRegion, CALayer, TSTEditingState, TSDCanvasView, TSTAnimation, CAShapeLayer, TSTTableInfo;
@protocol TSTCanvasReferenceController, TSTTableChromeProvider, TSTTableKnobTrackerVisitorProtocol, TSTTableAnimationController, TSTTableRepDelegate;

@interface TSTTableRep : TSWPTextHostRep <TSDTilingLayerDelegate, UITextFieldDelegate> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCanvasVisibleRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mSearchSelectionBounds;
    TSDTilingLayer *mOverlayTableName;
    TSDTilingLayer *mOverlayFrozenHeaderCorner;
    TSDTilingLayer *mOverlayFrozenHeaderRows;
    TSDTilingLayer *mOverlayFrozenHeaderColumns;
    CALayer *mOverlayFrozenHeaderRowsMask;
    CALayer *mOverlayFrozenHeaderColumnsMask;
    CALayer *mOverlayFrozenHeaderTableBodyMask;
    CALayer *mOverlayFrozenHeaderTableNameMask;
    double mCurrentScreenScale;
    struct { struct { unsigned short row; unsigned char column; unsigned char reserved; } origin; struct { unsigned short numberOfColumns; unsigned short numberOfRows; } size; } mDirtyCellRange;
    BOOL mRecursivelyDrawingInContext;
    NSMutableArray *mAnimationStack;
    TSTTableCellTextEditingRep *mContainedTextEditingRep;
    TSWPTextEditing *mTableNameTextEditing;
    struct { unsigned short row; unsigned char column; unsigned char reserved; } mControlCellID;
    TSTTableReferences *mReferences;
    CAShapeLayer *mHighlightedHyperlinkLayer;
    BOOL mIsAspectOperationInProgress;
    BOOL mIsZoomOperationInProgress;
    struct { struct { unsigned short row; unsigned char column; unsigned char reserved; } origin; struct { unsigned short numberOfColumns; unsigned short numberOfRows; } size; } mZoomToEditVisibleCellRange;
    CAShapeLayer *mFindSelectionHighlightLayer;
    TSTTableSelection *mSourceFillSelection;
    TSTTableSelection *mTargetFillSelection;
    BOOL mWPEndedTableNameEditing;
    BOOL _settingSelection;
    BOOL mDragByHandleOnly;
    BOOL mSelectionUsesBezierPath;
    BOOL mSelectsCellOnInitialTap;
    BOOL mUsesWholeChromeResizer;
    NSSet *mVisibleFillKnobs;
    struct { unsigned short row; unsigned char column; unsigned char reserved; } mEditingHyperlinkCellID;
    TSWPStorage *mHyperlinkParentStorage;
    BOOL mHyperlinkModified;
    BOOL mInspectingHyperlinkInEditingStorage;
    TSWPHyperlinkField *mHyperlinkField;
    CAShapeLayer *mCellEditingMaskLayer;
}

@property (nonatomic) TSTSelectionDragController *cellDragController;
@property (nonatomic) struct { unsigned short row; unsigned char column; unsigned char reserved; } ratingsDragCellID;
@property (retain, nonatomic) TSTSearchReference *activeSearchReference;
@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSTTableModel *tableModel;
@property (readonly, nonatomic) TSTEditingState *editingState;
@property (readonly, nonatomic) TSTLayout *tableLayout;
@property (readonly, nonatomic) TSTMasterLayout *masterLayout;
@property (nonatomic) id<TSTTableAnimationController> animationController;
@property (readonly, nonatomic) id<TSTTableRepDelegate> delegate;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformToCanvas;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformFromCanvas;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } canvasVisibleRect;
@property (readonly, nonatomic) TSDCanvasView *canvasView;
@property (readonly, nonatomic) TSDEditorController *editorController;
@property (readonly, nonatomic) id<TSTTableChromeProvider> tableChrome;
@property (readonly, nonatomic) id<TSTCanvasReferenceController> canvasReferenceController;
@property (readonly, nonatomic) TSTCellRegion *selectionRegion;
@property (readonly, nonatomic) CALayer *layerForRep;
@property (readonly, nonatomic) TSDKnobTracker<TSTTableKnobTrackerVisitorProtocol> *visitorKnobTracker;
@property (readonly, nonatomic) BOOL isZoomToEditOperationInProgress;
@property (readonly, nonatomic) TSTAnimation *currentAnimation;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (Class)tableRepDelegateClass;

- (void)setNeedsDisplay;
- (BOOL)isDraggable;
- (void)dealloc;
- (id)actionForLayer:(id)a0 forKey:(id)a1;
- (void)drawInContext:(struct CGContext { } *)a0;
- (void)drawLayer:(id)a0 inContext:(struct CGContext { } *)a1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)invalidateSelection;
- (void)willBeRemoved;
- (int)tilingMode;
- (void)viewScaleDidChange;
- (void)orientationDidChange:(id)a0;
- (BOOL)canDrawTilingLayerInBackground:(id)a0;
- (BOOL)canDrawInBackgroundDuringScroll;
- (void)dirtyCellRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0;
- (id)editorSelection;
- (BOOL)handlesEditMenu;
- (id)hitRep:(struct CGPoint { double x0; double x1; })a0;
- (void)p_editingDidEnd;
- (void)addAdditionalChildLayersToArray:(id)a0;
- (id)additionalLayersOverLayer;
- (id)additionalLayersUnderLayer;
- (void)asyncPostTextChangedInRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0 strokeRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a1;
- (void)beginDragInsertFromPalette;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForCellSelection:(struct { unsigned short x0; unsigned char x1; unsigned char x2; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForResizeGuideUI;
- (BOOL)canDrawInParallel;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasBoundsForCellRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0;
- (void)contentsRectForCellRangeAcrossSpaces:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0 contentsCenterInfo:(struct { BOOL x0; double x1; double x2; double x3; double x4; double x5; double x6; } *)a1 canvasFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2 contentsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })deviceBoundsForCellRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0;
- (void)endDragInsertFromPalette;
- (id)hitRepChrome:(struct CGPoint { double x0; double x1; })a0;
- (id)imageForSearchReference:(id)a0 forPath:(struct CGPath { } *)a1 shouldPulsate:(BOOL)a2;
- (id)initWithLayout:(id)a0 canvas:(id)a1;
- (void)invalidateAnnotationColor;
- (void)invalidateCellRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0;
- (void)invalidateCellRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0 fittingRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a1 invalidateSize:(BOOL)a2;
- (void)invalidateComments;
- (void)invalidateEditingCell;
- (void)invalidateFrozenHeaders;
- (void)invalidateTableName;
- (BOOL)isFullyVisibleWithBorder:(int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layerFrameInScaledCanvas;
- (void)layoutInRootChangedFrom:(id)a0 to:(id)a1 translatedOnly:(BOOL)a2;
- (BOOL)mustDrawOnMainThreadForInteractiveCanvas;
- (id)newCommandToApplyGeometry:(id)a0 toInfo:(id)a1;
- (struct CGPath { } *)newPathForSearchReference:(id)a0;
- (id)overlayLayers;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_alignedLayerFrameForLayoutSpace:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (id)p_frozenHeaderOverlayLayers;
- (void)p_hideSelectionLayers;
- (void)p_invalidateCellCommentBadges;
- (struct CGPath { } *)p_newPathForSearchReference:(id)a0;
- (id)p_tableNameOverlayLayers;
- (id)p_textImageForPath:(struct CGPath { } *)a0 shouldPulsate:(BOOL)a1;
- (void)popAnimation;
- (void)pushAnimation:(id)a0;
- (void)recursivelyDrawInContext:(struct CGContext { } *)a0;
- (id)repForDragging;
- (void)screenScaleDidChange;
- (void)setNeedsDisplayInCellRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; })a0;
- (BOOL)shouldCommitPendingTextEdit;
- (BOOL)shouldRestartTextEditing;
- (void)updateChildrenFromLayout;
- (void)updateDynamicModeForEditingSpillText;
- (void)updateFromLayout;
- (void)validateFrozenHeaderColumns;
- (void)validateFrozenHeaderCorner;
- (void)validateFrozenHeaderRows;
- (void)validateFrozenHeaderTableBodyMask;
- (void)validateStrokesInEditingSpillingTextRange;
- (void)validateTableName;
- (void)validateVisibleRect;

@end

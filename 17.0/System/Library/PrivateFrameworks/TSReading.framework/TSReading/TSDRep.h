@class TSDTextureContext, TSDTilingBackgroundQueue, TSDTextureSet, NSDictionary, TSDCanvas, TSDInteractiveCanvasController, NSObject, TSDLayout, CALayer, NSString, TSDKnobTracker, NSArray, TSDLayoutGeometry;
@protocol OS_dispatch_queue, TSDContainerRep;

@interface TSDRep : NSObject <TSDMagicMoveMatching, TSDRepTextContaining> {
    NSArray *mKnobs;
    BOOL mKnobPositionsInvalid;
    BOOL mShowKnobsWhenManipulated;
    BOOL mKnobsAreShowing;
    BOOL mSelectionHighlightLayerValid;
    CALayer *mSelectionHighlightLayer;
    BOOL mShowTemporaryHighlight;
    CALayer *mTemporaryHighlightLayer;
    BOOL mShowDragAndDropHighlight;
    CALayer *mDragAndDropHighlightLayer;
    unsigned long long mLayerUpdatesPausedCount;
    struct CGColor { } *mDefaultSelectionHighlightColor;
    TSDLayoutGeometry *mLastGeometryInRoot;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mOriginalLayerFrameInScaledCanvas;
    TSDTilingBackgroundQueue *mTileQueue;
    long long mTileQueueOnce;
    long long mTileProviderQueueLock;
    NSObject<OS_dispatch_queue> *mTileProviderQueue;
    BOOL mHasBeenRemoved;
}

@property (readonly, nonatomic) TSDLayout *layout;
@property (readonly, nonatomic) TSDCanvas *canvas;
@property (retain, nonatomic) TSDLayout *temporaryMixingLayout;
@property (readonly, nonatomic) TSDInteractiveCanvasController *interactiveCanvasController;
@property BOOL forceRasterization;
@property (nonatomic) TSDRep<TSDContainerRep> *parentRep;
@property (readonly, nonatomic) NSArray *knobs;
@property (nonatomic) TSDKnobTracker *currentKnobTracker;
@property (nonatomic) struct CGColor { } *selectionHighlightColor;
@property (retain, nonatomic) TSDTextureSet *texture;
@property (copy, nonatomic) TSDTextureContext *textureContext;
@property (nonatomic) unsigned long long textureDeliveryStyle;
@property (nonatomic) int textureByGlyphStyle;
@property (nonatomic) unsigned long long textureStage;
@property (retain, nonatomic) NSDictionary *textureActionAttributes;
@property (retain, nonatomic) NSDictionary *textureAnimationInfo;
@property (readonly, nonatomic) double textureAngle;
@property (readonly, nonatomic) NSArray *hyperlinkRegions;
@property (readonly, nonatomic) BOOL isEditingPath;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (double)opacity;
- (void)setNeedsDisplay;
- (BOOL)isOpaque;
- (BOOL)isDraggable;
- (void)dealloc;
- (BOOL)isSelected;
- (Class)layerClass;
- (void)drawInContext:(struct CGContext { } *)a0;
- (BOOL)isSelectable;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clipRect;
- (BOOL)isPlaceholder;
- (id)beginEditing;
- (id)info;
- (BOOL)isLocked;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)masksToBounds;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 animated:(BOOL)a1;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)willBeRemoved;
- (int)tilingMode;
- (BOOL)hasBeenRemoved;
- (void)viewScaleDidChange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameInScreenSpace;
- (void)didUpdateLayer:(id)a0;
- (id)hitRep:(struct CGPoint { double x0; double x1; })a0 withGesture:(id)a1 passingTest:(id /* block */)a2;
- (struct CGPoint { double x0; double x1; })convertNaturalPointFromUnscaledCanvas:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertNaturalRectFromUnscaledCanvas:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertNaturalRectToUnscaledCanvas:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)directlyManagesLayerContent;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameInUnscaledCanvas;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })naturalBounds;
- (void)processChangedProperty:(int)a0;
- (BOOL)canDrawTilingLayerInBackground:(id)a0;
- (unsigned long long)enabledKnobMask;
- (void)processChanges:(id)a0;
- (id)repForSelecting;
- (void)setupForDrawingInLayer:(id)a0 context:(struct CGContext { } *)a1;
- (BOOL)shouldShowKnobs;
- (BOOL)wantsToDistortWithImagerContext;
- (BOOL)canDrawInBackgroundDuringScroll;
- (void)didCreateLayer:(id)a0;
- (BOOL)handlesEditMenu;
- (id)hitRep:(struct CGPoint { double x0; double x1; })a0;
- (void)i_willBeRemoved;
- (void)invalidateKnobs;
- (void)addActionGhostKnobToArrayIfNecessary:(id)a0;
- (void)addBitmapsToRenderingQualityInfo:(id)a0 inContext:(struct CGContext { } *)a1;
- (void)addCommentKnobToArray:(id)a0;
- (void)addHyperlinkKnobToArray:(id)a0;
- (void)addKnobsToArray:(id)a0;
- (void)addLockedKnobsToArray:(id)a0;
- (void)addSelectionKnobsToArray:(id)a0;
- (void)addToSet:(id)a0;
- (void)addTracking:(id)a0;
- (void)addTrackingAboveChildren:(id)a0;
- (id)additionalLayersOverLayer;
- (id)additionalLayersUnderLayer;
- (id)additionalRepsForDragging;
- (double)additionalRotationForKnobOrientation;
- (unsigned long long)adjustedKnobForComputingResizeGeometry:(unsigned long long)a0;
- (id)allLayers;
- (BOOL)allowTrackingContainedRep:(id)a0;
- (double)angleForRotation;
- (double)angleInRoot;
- (void)antiAliasDefeatLayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)antiAliasDefeatLayerTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a0 forFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)becameNotSelected;
- (void)becameSelected;
- (void)beginDrawingOperation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForHighlightLayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForResizeGuideUI;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForStandardKnobs;
- (BOOL)canClipThemeContentToCanvas;
- (BOOL)canDrawInParallel;
- (BOOL)canEditWithEditor:(id)a0;
- (BOOL)canUseSpecializedHitRegionForKnob:(id)a0;
- (struct CGPoint { double x0; double x1; })centerForRotation;
- (id)colorBehindLayer:(id)a0;
- (void)computeDirectLayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 andTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1;
- (void)computeDirectLayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 andTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 basedOnLayoutGeometry:(id)a2;
- (void)computeDirectLayerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 andTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 basedOnTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 andSize:(struct CGSize { double x0; double x1; })a3;
- (id)connectedReps;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })a0 withSlop:(struct CGSize { double x0; double x1; })a1;
- (struct CGPoint { double x0; double x1; })convertKnobPositionToUnscaledCanvas:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertNaturalPointFromLayerRelative:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertNaturalPointToLayerRelative:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertNaturalPointToUnscaledCanvas:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertNaturalRectFromLayerRelative:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertNaturalRectToLayerRelative:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })convertUnscaledPointFromLayerRelative:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertUnscaledPointToLayerRelative:(struct CGPoint { double x0; double x1; })a0;
- (id)delegateConformingToProtocol:(id)a0 forRep:(id)a1;
- (void)didDrawInLayer:(id)a0 context:(struct CGContext { } *)a1;
- (void)didEndDrawingTilingLayerInBackground:(id)a0 withToken:(id)a1;
- (BOOL)directlyManagesVisibilityOfKnob:(id)a0;
- (int)dragHUDAndGuidesTypeAtCanvasPoint:(struct CGPoint { double x0; double x1; })a0;
- (int)dragTypeAtCanvasPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)drawInLayerContext:(struct CGContext { } *)a0;
- (void)dynamicRotateDidBegin;
- (void)endDrawingOperation;
- (void)fadeKnobsIn;
- (void)fadeKnobsOut;
- (BOOL)forcesPlacementOnTop;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameInUnscaledCanvasIncludingChrome;
- (BOOL)handleDoubleTapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)handleDoubleTapAtPoint:(struct CGPoint { double x0; double x1; })a0 onKnob:(id)a1;
- (BOOL)handleSingleTapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)handleSingleTapAtPoint:(struct CGPoint { double x0; double x1; })a0 onKnob:(id)a1;
- (id)hitRepChrome:(struct CGPoint { double x0; double x1; })a0;
- (id)hitRepChrome:(struct CGPoint { double x0; double x1; })a0 passingTest:(id /* block */)a1;
- (id)hitReps:(struct CGPoint { double x0; double x1; })a0 withSlop:(struct CGSize { double x0; double x1; })a1;
- (id)hitReps:(struct CGPoint { double x0; double x1; })a0 withSlopBlock:(id /* block */)a1;
- (void)i_configureFontSmoothingForContext:(struct CGContext { } *)a0 layer:(id)a1;
- (struct CGPoint { double x0; double x1; })i_dragOffset;
- (BOOL)i_hasInteractiveCanvasController;
- (void)i_invalidateSelectionHighlightLayer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })i_layerFrameInScaledCanvasIgnoringDragging;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })i_originalLayerFrameInScaledCanvas;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })i_partition_deepClipRect;
- (id)i_queueForTileProvider;
- (void)i_shutdownTileQueue;
- (id)i_tileQueue;
- (void)i_willEnterForeground;
- (id)infoForTransforming;
- (id)initWithLayout:(id)a0 canvas:(id)a1;
- (BOOL)intersectsUnscaledRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)invalidateAnnotationColor;
- (void)invalidateComments;
- (void)invalidateKnobPositions;
- (BOOL)isBeingRotated;
- (BOOL)isDrawingInFlippedContext;
- (BOOL)isInDynamicOperation;
- (BOOL)isSelectedIgnoringLocking;
- (BOOL)isVisibleOnCanvas;
- (id)itemsToAddToEditMenu;
- (id)knobForTag:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layerFrameInScaledCanvas;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layerFrameInScaledCanvasRelativeToParent;
- (struct CGPoint { double x0; double x1; })layerOffsetForDragging;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })layerTransform;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })layerTransformInRootForZeroAnchor;
- (BOOL)layerUpdatesPaused;
- (void)layoutInRootChangedFrom:(id)a0 to:(id)a1 translatedOnly:(BOOL)a2;
- (void)markTextureDirty;
- (BOOL)mustDrawOnMainThreadForInteractiveCanvas;
- (BOOL)mustDrawTilingLayerOnMainThread:(id)a0;
- (struct CGPath { } *)newPathInScaledCanvasFromNaturalRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)newSelectionKnobForType:(int)a0 tag:(unsigned long long)a1;
- (id)newTrackerForKnob:(id)a0;
- (id)overlayLayers;
- (void)p_actionGhostKnobHit;
- (id)p_addLayersForKnobsToArray:(id)a0 withDelegate:(id)a1 isOverlay:(BOOL)a2;
- (void)p_dynamicRotateDidBegin;
- (struct CGPoint { double x0; double x1; })p_positionOfActionGhostKnobForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)p_setMagicMoveTextureAttributes:(id)a0;
- (void)p_toggleHyperlinkUIVisibility;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })parentLayerInverseTransformInRootForZeroAnchor;
- (id)parentRepToPerformSelecting;
- (void)pauseLayerUpdates;
- (id)popoutLayers;
- (struct CGPoint { double x0; double x1; })positionOfActionGhostKnob;
- (struct CGPoint { double x0; double x1; })positionOfHyperlinkKnob;
- (struct CGPoint { double x0; double x1; })positionOfStandardKnob:(id)a0 forBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)queueForDrawingTilingLayerInBackground:(id)a0;
- (void)recursivelyDrawChildrenInContext:(struct CGContext { } *)a0;
- (void)recursivelyDrawInContext:(struct CGContext { } *)a0;
- (void)recursivelyPerformSelector:(SEL)a0;
- (void)recursivelyPerformSelector:(SEL)a0 withObject:(id)a1;
- (void)recursivelyPerformSelector:(SEL)a0 withObject:(id)a1 withObject:(id)a2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)a0;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)a0 withObject:(id)a1;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)a0 withObject:(id)a1 withObject:(id)a2;
- (BOOL)repDirectlyManagesContentsScaleOfLayer:(id)a0;
- (id)repForDragging;
- (id)repForHandleSingleTap;
- (id)repForRotating;
- (void)replaceContentsFromRep:(id)a0;
- (BOOL)resizeFromCenterOnly;
- (void)resumeLayerUpdates;
- (void)resumeLayerUpdatesAndLayoutImmediately;
- (double)scaleToConvertNaturalToLayerRelative;
- (void)screenScaleDidChange;
- (id)selectionHighlightLayer;
- (double)selectionHighlightWidth;
- (double)shortestDistanceToPoint:(struct CGPoint { double x0; double x1; })a0 countAsHit:(BOOL *)a1;
- (BOOL)shouldBeginDrawingTilingLayerInBackground:(id)a0 returningToken:(id *)a1 andQueue:(id *)a2;
- (BOOL)shouldCreateCommentKnob;
- (BOOL)shouldCreateKnobs;
- (BOOL)shouldCreateLockedKnobs;
- (BOOL)shouldCreateSelectionKnobs;
- (BOOL)shouldDisplayHyperlinkUI;
- (BOOL)shouldExpandHitRegionWhenSmall;
- (BOOL)shouldIgnoreEditMenuTapAtPoint:(struct CGPoint { double x0; double x1; })a0 withRecognizer:(id)a1;
- (BOOL)shouldIgnoreSingleTapAtPoint:(struct CGPoint { double x0; double x1; })a0 withRecognizer:(id)a1;
- (BOOL)shouldLayoutTilingLayer:(id)a0;
- (BOOL)shouldShowCommentHighlight;
- (BOOL)shouldShowCommentUIDirectlyOverRep;
- (BOOL)shouldShowDragHUD;
- (BOOL)shouldShowSelectionHighlight;
- (BOOL)shouldShowSizesInRulers;
- (void)showKnobsDuringManipulation:(BOOL)a0;
- (id)subviewsController;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })targetRectForEditMenu;
- (id)textureForContext:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackingBoundsForStandardKnobs;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForHighlightLayer;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformToConvertNaturalFromLayerRelative;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformToConvertNaturalToLayerRelative;
- (void)turnKnobsOn;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })unRotatedTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (struct CGPoint { double x0; double x1; })unscaledGuidePosition;
- (void)updateChildrenFromLayout;
- (void)updateFromLayout;
- (void)updateLayerGeometryFromLayout:(id)a0;
- (void)updatePositionsOfKnobs:(id)a0;
- (void)viewScrollDidChange;
- (void)viewScrollWillChange;
- (void)viewScrollingEnded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleBoundsForTilingLayer:(id)a0;
- (BOOL)wantsEditMenuForTapAtPoint:(struct CGPoint { double x0; double x1; })a0 onKnob:(id)a1;
- (BOOL)wantsGuidesWhileResizing;
- (BOOL)wantsToHandleTapsOnContainingGroup;
- (BOOL)wantsToHandleTapsWhenLocked;
- (void)wasAddedToParent;
- (void)wideGamutValueDidChange;
- (void)willBeRemovedFromParent;
- (void)willReplaceContentsFromRep:(id)a0;
- (void)willUpdateLayer:(id)a0;

@end

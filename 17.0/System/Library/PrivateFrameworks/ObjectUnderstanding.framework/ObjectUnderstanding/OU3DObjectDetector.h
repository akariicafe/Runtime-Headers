@class OUObjectAsset, OUPointCloud, NSArray, NSSet, OU3DObjectMerger, NSDictionary, OUInternalInfoDumper, _OUFrame, OUObjectCompleteness;
@protocol OUPointCloud, OUCamera;

@interface OU3DObjectDetector : NSObject {
    BOOL isOnline_;
    struct { int x0; float *x1; id *x2; void *x3; void *x4; void *x5; void *x6; } *det_params;
    struct map<NSString *, short, CompareNSString, std::allocator<std::pair<NSString *const, short>>> { struct __tree<std::__value_type<NSString *, short>, std::__map_value_compare<NSString *, std::__value_type<NSString *, short>, CompareNSString>, std::allocator<std::__value_type<NSString *, short>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<NSString *, short>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<NSString *, std::__value_type<NSString *, short>, CompareNSString>> { unsigned long long __value_; } __pair3_; } __tree_; } obj_type_to_index;
    OUPointCloud *arframePointCloud_;
    double latestTimestamp;
    struct float4x4 { void /* unknown type, empty encoding */ columns[4]; } latestPose;
    NSDictionary *keyframesPointCloud_;
    struct float4x4 { void /* unknown type, empty encoding */ columns[4]; } cameraPose_;
    struct float4x4 { void /* unknown type, empty encoding */ columns[4]; } sceneUnderstandingPose_;
    float tanRgbFOV_;
    id<OUCamera> camera_;
    _OUFrame *arframe_;
    struct float4x4 { void /* unknown type, empty encoding */ columns[4]; } ucr;
    struct float4x4 { void /* unknown type, empty encoding */ columns[4]; } inv_ucr;
    struct OUPointCloudCpp { struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> { void *__value_; } __end_cap_; } rgb; struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> { void *__value_; } __end_cap_; } xyz; struct vector<unsigned char __attribute__((ext_vector_type(4))), std::allocator<unsigned char __attribute__((ext_vector_type(4)))>> { void *__begin_; void *__end_; struct __compressed_pair<unsigned char * __attribute__((ext_vector_type(4))), std::allocator<unsigned char __attribute__((ext_vector_type(4)))>> { void *__value_; } __end_cap_; } labels; struct vector<unsigned short __attribute__((ext_vector_type(4))), std::allocator<unsigned short __attribute__((ext_vector_type(4)))>> { void *__begin_; void *__end_; struct __compressed_pair<unsigned short * __attribute__((ext_vector_type(4))), std::allocator<unsigned short __attribute__((ext_vector_type(4)))>> { void *__value_; } __end_cap_; } votes; } online_model_input_;
    int pred_boxes_cnt_;
    struct unique_ptr<OU3DObjectRGBSizeRefiner, std::default_delete<OU3DObjectRGBSizeRefiner>> { struct __compressed_pair<OU3DObjectRGBSizeRefiner *, std::default_delete<OU3DObjectRGBSizeRefiner>> { struct OU3DObjectRGBSizeRefiner *__value_; } __ptr_; } object_rgb_size_refiner_;
    struct unique_ptr<ou3dod::OU3DODInterface, std::default_delete<ou3dod::OU3DODInterface>> { struct __compressed_pair<ou3dod::OU3DODInterface *, std::default_delete<ou3dod::OU3DODInterface>> { struct OU3DODInterface *__value_; } __ptr_; } online_detector_;
    struct unique_ptr<ou3dod::OU3DODInterface, std::default_delete<ou3dod::OU3DODInterface>> { struct __compressed_pair<ou3dod::OU3DODInterface *, std::default_delete<ou3dod::OU3DODInterface>> { struct OU3DODInterface *__value_; } __ptr_; } offline_detector_;
    struct OU3DKitchenObjectMerger { struct vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__begin_; struct OU3DKitchenObject *__end_; struct __compressed_pair<OU3DKitchenObject *, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__value_; } __end_cap_; } old_cabinets_; struct vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__begin_; struct OU3DKitchenObject *__end_; struct __compressed_pair<OU3DKitchenObject *, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__value_; } __end_cap_; } new_cabinets_; struct vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__begin_; struct OU3DKitchenObject *__end_; struct __compressed_pair<OU3DKitchenObject *, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__value_; } __end_cap_; } other_objects_; struct vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__begin_; struct OU3DKitchenObject *__end_; struct __compressed_pair<OU3DKitchenObject *, std::allocator<OU3DKitchenObject>> { struct OU3DKitchenObject *__value_; } __end_cap_; } fused_cabinets_; float ground_plane_height_; float ceil_plane_height_; } offline_merger_;
    struct unique_ptr<ou3dor::OU3DObjectRepresentation, std::default_delete<ou3dor::OU3DObjectRepresentation>> { struct __compressed_pair<ou3dor::OU3DObjectRepresentation *, std::default_delete<ou3dor::OU3DObjectRepresentation>> { struct OU3DObjectRepresentation *__value_; } __ptr_; } ou3dor_;
    OU3DObjectMerger *merger;
    OUObjectCompleteness *object_completeness_;
    OUObjectAsset *objectAsset_;
    struct vector<OUBox3d, std::allocator<OUBox3d>> { struct OUBox3d *__begin_; struct OUBox3d *__end_; struct __compressed_pair<OUBox3d *, std::allocator<OUBox3d>> { struct OUBox3d *__value_; } __end_cap_; } cur_box3ds_;
    struct vector<OUBox3d, std::allocator<OUBox3d>> { struct OUBox3d *__begin_; struct OUBox3d *__end_; struct __compressed_pair<OUBox3d *, std::allocator<OUBox3d>> { struct OUBox3d *__value_; } __end_cap_; } acc_box3ds_;
    struct vector<OUBox3d, std::allocator<OUBox3d>> { struct OUBox3d *__begin_; struct OUBox3d *__end_; struct __compressed_pair<OUBox3d *, std::allocator<OUBox3d>> { struct OUBox3d *__value_; } __end_cap_; } merged_box3ds_;
    struct vector<std::vector<float>, std::allocator<std::vector<float>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<float> *, std::allocator<std::vector<float>>> { void *__value_; } __end_cap_; } hist_ori_iou_mat_;
    struct vector<std::vector<float>, std::allocator<std::vector<float>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<float> *, std::allocator<std::vector<float>>> { void *__value_; } __end_cap_; } hist_nms_iou_mat_;
    struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } hist_kept_box_ids_;
    unsigned long long hist_boxes_cnt_;
    struct vector<int, std::allocator<int>> { int *__begin_; int *__end_; struct __compressed_pair<int *, std::allocator<int>> { int *__value_; } __end_cap_; } size_refined_box_ids_;
    NSArray *pre_size_refined_;
    NSArray *pre_rgb_size_refined_;
    int num_pre_key_frames_;
    int num_cur_key_frames_;
    float floor_height_;
    NSSet *rgb_refine_supported_types_;
    OUInternalInfoDumper *debug_dumper_;
    struct unique_ptr<ou3dod::OU3DLShapeObjectMerger, std::default_delete<ou3dod::OU3DLShapeObjectMerger>> { struct __compressed_pair<ou3dod::OU3DLShapeObjectMerger *, std::default_delete<ou3dod::OU3DLShapeObjectMerger>> { struct OU3DLShapeObjectMerger *__value_; } __ptr_; } l_shape_merger_;
}

@property (readonly, nonatomic) short online_model_;
@property (readonly, nonatomic) short offline_model_;
@property (readonly, nonatomic) NSSet *supportedObjectTypes;
@property (readonly, nonatomic) OUPointCloud *worldPointCloud;
@property (nonatomic) unsigned long long worldPointCloudCapacity;
@property (readonly, nonatomic) id<OUPointCloud> frustumPointCloud;
@property (nonatomic) float frustumFOV;
@property (nonatomic) double minDetectionInterval;
@property (nonatomic) double maxDetectionInterval;
@property (nonatomic) float translationalSensitivity;
@property (nonatomic) float rotationalSensitivity;
@property (nonatomic) float depthConfidenceThreshold;
@property (readonly, nonatomic) BOOL RgbRefinementEnabled;
@property (readonly, nonatomic) BOOL ObjectRepresentationEnabled;
@property (readonly, nonatomic) NSArray *allObjects;

- (id)init:(BOOL)a0;
- (void)clear;
- (id)run;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)postprocess;
- (BOOL)preprocess;
- (id)MergeLShapeObjects:(id)a0 isLastFrame:(BOOL)a1;
- (void)CopyObjectEmbedding:(id)a0 fromOldObjects:(id)a1;
- (id)FindNeedRefineBoxUUID:(id)a0 withOldObjects:(id)a1;
- (void)ResestObjectSizeHistoryIfSizeChange:(id)a0 withOldObjects:(id)a1;
- (BOOL)IsValidLShapePair:(const void *)a0 l_shape_pair:(const void *)a1;
- (void)CopyRefineHistory:(id)a0 fromOldObjects:(id)a1;
- (void)InitializeRGBRefinement:(id)a0;
- (void)OfflineModelInitialization;
- (void)setObjectRepresentationEnabled:(BOOL)a0;
- (id)updateWithAccumulatePC:(id)a0 ouframe:(id)a1;
- (void)ValidateRawDetections:(void *)a0;
- (void)assignIdentifiersForNewObjects:(id)a0 withOldObjects:(id)a1;
- (void)assignParentId:(id)a0 isOffline:(BOOL)a1;
- (void)buildFrustumPointCloudFromWorldPointCloud;
- (id)combineBoxTypeAndEmbeddingByUUID:(id)a0;
- (id)generateOfflineObjects:(id)a0 onlineObjects:(id)a1;
- (id)getObjectAsset;
- (void)initialization;
- (void)modelProcess;
- (void)regulateObjectCornerOrders:(id)a0 withOldObjects:(id)a1;
- (id)regulateObjectSize:(id)a0 withOldObjects:(id)a1;
- (void)reviseObjectsUponParentId:(id)a0;
- (void)runAssignParentID:(id)a0;
- (void)runRegulateObjectCornerOrders:(id)a0 withOldObjects:(id)a1;
- (void)runReviseObjectsUponParentId:(id)a0;
- (void)runValidateRawDetections:(void *)a0;
- (struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; })runwithinClassNMS:(const void *)a0 ids:(void *)a1 ori_iou:(void *)a2 nms_iou:(void *)a3;
- (void)setRgbRefinementEnabled:(BOOL)a0;
- (id)updateWithAccumulatePC:(id)a0 currentCameraPose:(struct { void /* unknown type, empty encoding */ x0[4]; })a1;

@end

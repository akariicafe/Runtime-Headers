@class NSDictionary, RTIInputSystemSourceSession, UITextPosition, _UICascadingTextStorage, UITextRange, NSString, UIImage, NSTextContainer, NSAttributedString, NSTimer, UIInputContextHistory, UITextInputPasswordRules, UITextInteractionAssistant, UIAutoscroll, UIView, _UISupplementalLexicon, NSTextStorage, UITextInputController, _UITextLayoutControllerBase, UIColor, UITextField, NSLayoutManager, NSIndexSet;
@protocol UITextInputDelegate, UITextInputTokenizer, _UITextLayoutController, UITextInputSuggestionDelegate, _UITextCanvas;

@interface UIFieldEditor : UIScrollView <UITextInputControllerDelegate, NSLayoutManagerDelegate, UIKeyInputPrivate, UITextFieldContent, NSUITextViewCommonMethods, UIAutoscrollContainer, UITextInput, UITextInputPrivate, UITextAutoscrolling, UIKeyboardInput> {
    UITextField *_textField;
    BOOL _active;
    UIAutoscroll *_autoscroll;
    BOOL _cachedUserInteractionEnabled;
    NSAttributedString *_originalAttributedString;
    NSDictionary *_originalDefaultAttributes;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _contentInsetsFromFonts;
    UITextInputController *__textInputController;
    NSTextContainer *__textContainer;
    _UITextLayoutControllerBase<_UITextLayoutController> *__textLayoutController;
    _UICascadingTextStorage *__textStorage;
    struct { unsigned char delegateRespondsToFieldEditorDidChange : 1; unsigned char delegateRespondsToFieldEditorDidChangeSelection : 1; unsigned char delegateRespondsToShouldInsertText : 1; unsigned char delegateRespondsToShouldReplaceWithText : 1; unsigned char suppressScrollToSelection : 1; unsigned char clearOnNextEdit : 1; unsigned char needsInvalidationAfterObscuredRangeChange : 1; unsigned char isAnimatingPaste : 1; unsigned char contentInsetsFromFontsValid : 1; } _feFlags;
    unsigned long long _obscuredSecureLength;
    NSTimer *_obscureAllTextTimer;
    double _desiredContentWidth;
    UIView<_UITextCanvas> *_contentView;
}

@property (copy, nonatomic, setter=_setScrollAnimationEndedAction:) id /* block */ _scrollAnimationEndedAction;
@property (nonatomic) struct CGPoint { double x; double y; } autoscrollContentOffset;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } padding;
@property (nonatomic) BOOL _shouldObscureNextInput;
@property (readonly, nonatomic) BOOL isSingleLineDocument;
@property (retain, nonatomic) UIColor *tintColor;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (nonatomic) BOOL allowsAttachments;
@property (readonly, nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) NSTextContainer *textContainer;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } markedRange;
@property (readonly, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) long long layoutOrientation;
@property (nonatomic) BOOL shouldAutoscroll;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) id<UITextInputDelegate> inputDelegate;
@property (readonly, nonatomic) id<UITextInputTokenizer> tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) long long cursorBehavior;
@property (readonly, nonatomic) id<UITextInputSuggestionDelegate> textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet { } *textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic, getter=isDevicePasscodeEntry) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;

+ (id)excludedElementsForHTML;
+ (id)sharedFieldEditor;
+ (id)activeFieldEditor;

- (struct CGSize { double x0; double x1; })minSize;
- (id)positionWithinRange:(id)a0 farthestInDirection:(long long)a1;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0 withinRange:(id)a1;
- (void)setSecureTextEntry:(BOOL)a0;
- (id)characterRangeByExtendingPosition:(id)a0 inDirection:(long long)a1;
- (void)selectAll;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)a0;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })a0 animated:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (void)cancelAutoscroll;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_fullContentInsetsFromFonts;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)metadataDictionariesForDictationResults;
- (id)positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (id)undoManager;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)keyboardInputChanged:(id)a0;
- (void)_resetTypingAttributes;
- (id)textColorForCaretSelection;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (id)textField;
- (void)textInputDidChangeSelection:(id)a0;
- (long long)baseWritingDirectionForPosition:(id)a0 inDirection:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutManager:(id)a0 boundingBoxForControlGlyphAtIndex:(unsigned long long)a1 forTextContainer:(id)a2 proposedLineFragment:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 glyphPosition:(struct CGPoint { double x0; double x1; })a4 characterIndex:(unsigned long long)a5;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1;
- (void)setText:(id)a0 andSetCaretSelectionAfterText:(BOOL)a1;
- (void)scrollSelectionToVisible:(BOOL)a0;
- (id)selectionRectsForRange:(id)a0;
- (void)unmarkText;
- (id)_textContainer;
- (void)removeDictationResultPlaceholder:(id)a0 willInsertResult:(BOOL)a1;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })a0;
- (void)replaceRange:(id)a0 withText:(id)a1;
- (struct CGPoint { double x0; double x1; })textContainerOriginForTextAlignment:(long long)a0;
- (void)dealloc;
- (id)attributedSubstringForMarkedRange;
- (long long)comparePosition:(id)a0 toPosition:(id)a1;
- (void)addTextAlternativesDisplayStyle:(long long)a0 toRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)a0 replacementText:(id)a1;
- (BOOL)setUpClippingWithMaskForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 contentFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)hasMarkedText;
- (long long)nonEditingLinebreakMode;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })textInput:(id)a0 willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 toCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)updateInsertionPointStateAndRestartTimer:(BOOL)a0;
- (id)textRangeFromPosition:(id)a0 toPosition:(id)a1;
- (id)_responderForBecomeFirstResponder;
- (id)textInRange:(id)a0;
- (void)beginSelectionChange;
- (void)traitCollectionDidChange:(id)a0;
- (void)setBaseWritingDirection:(long long)a0 forRange:(id)a1;
- (id)positionFromPosition:(id)a0 offset:(long long)a1;
- (id)layoutManager:(id)a0 effectiveCUICatalogForTextEffect:(id)a1;
- (void)keyboardInputChangedSelection:(id)a0;
- (void)setAttributedText:(id)a0;
- (void)endSelectionChange;
- (id)_textSelectingContainer;
- (BOOL)isFirstResponder;
- (void)setMarkedTextStyle:(id)a0;
- (void)_handleObscuredTextAfterActivationChange;
- (id)textColor;
- (id)forwardingTargetForSelector:(SEL)a0;
- (void)_obscureAllText;
- (void)setScrollXOffset:(int)a0 scrollYOffset:(int)a1 adjustForPurpleCaret:(BOOL)a2;
- (id)_textStorage;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 animated:(BOOL)a1;
- (void)textContainerUsageDidChangeToSize:(struct CGSize { double x0; double x1; })a0;
- (void)_setAttributedTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementText:(id)a1 andSetCaretSelectionAfterText:(BOOL)a2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_contentInsetsFromFonts;
- (void)setSelection:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_deactivateSelectionView;
- (void)_invalidateAfterObscuredRangeChangeIfNeeded;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)enclosingScrollView;
- (void)_ephemerallyUnobscureCharacterAtIndex:(unsigned long long)a0;
- (void)_ephemerallyUnobscureTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)_textCanvasView;
- (void)setTextContainer:(id)a0;
- (void)setScrollXOffset:(int)a0 scrollYOffset:(int)a1;
- (void)_handleObscuredTextInputIfNecessaryWithEditingBlock:(id /* block */)a0;
- (id)font;
- (id)_textInputController;
- (void)invalidateTextContainerOrigin;
- (id)_visualSelectionRangeForExtent:(id)a0 forPoint:(struct CGPoint { double x0; double x1; })a1 fromPosition:(id)a2 inDirection:(long long)a3;
- (double)_passcodeStyleAlpha;
- (void)textInputDidAnimatePaste:(id)a0;
- (id)attributedText;
- (id)methodSignatureForSelector:(SEL)a0;
- (id)_inputController;
- (void)_unobscureAllText;
- (BOOL)keyboardInput:(id)a0 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (id)_textLayoutController;
- (void)_deleteBackwardAndNotify:(BOOL)a0;
- (void)_cancelObscureAllTextTimer;
- (void)removeTextPlaceholder:(id)a0;
- (void)insertText:(id)a0;
- (BOOL)_shouldObscureInput;
- (void)_textStorageDidProcessEditing:(id)a0;
- (void)setText:(id)a0;
- (void)textInput:(id)a0 prepareAttributedTextForInsertion:(id)a1;
- (void)clearText;
- (void)setConstrainedFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)_setValue:(id)a0 forTextAttribute:(id)a1;
- (void)textInputWillAnimatePaste:(id)a0;
- (void).cxx_destruct;
- (void)_tvUpdateTextColor;
- (void)layoutManager:(id)a0 didCompleteLayoutForTextContainer:(id)a1 atEnd:(BOOL)a2;
- (BOOL)textInputShouldExtendCaretHeight:(id)a0;
- (void)_unobscureTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 settingTimerToReobscure:(BOOL)a1;
- (BOOL)keyboardInput:(id)a0 shouldInsertText:(id)a1 isMarkedText:(BOOL)a2;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0;
- (id)linkTextAttributes;
- (id)text;
- (void)deleteBackward;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 avoidAdditionalLayout:(BOOL)a1;
- (id)_textInputTraits;
- (void)setAttributedMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)_hasDictationPlaceholder;
- (void)setAttributedText:(id)a0 andSetCaretSelectionAfterText:(BOOL)a1;
- (struct CGPoint { double x0; double x1; })textContainerOrigin;
- (void)activateEditor;
- (BOOL)_clearOnEditIfNeeded;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })textContainerInset;
- (void)_scrollViewAnimationEnded:(id)a0 finished:(BOOL)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })insertFilteredText:(id)a0;
- (void)setAttributedTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementText:(id)a1;
- (BOOL)isHorizontallyResizable;
- (unsigned long long)layoutManager:(id)a0 shouldGenerateGlyphs:(const unsigned short *)a1 properties:(const long long *)a2 characterIndexes:(const unsigned long long *)a3 font:(id)a4 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a5;
- (void)_setNeedsInvalidateAfterObscuredRangeChange;
- (void)setTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementText:(id)a1;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_applyCorrectTextContainerSize;
- (void)layoutSubviews;
- (BOOL)_shouldIgnoreAutofillSave;
- (id)initWithTextField:(id)a0;
- (void)setTextColor:(id)a0;
- (long long)layoutManager:(id)a0 shouldUseAction:(long long)a1 forControlCharacterAtIndex:(unsigned long long)a2;
- (void)updateAutoscroll:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderExternalTouchRectForWindow:(id)a0;
- (BOOL)keyboardInputShouldDelete:(id)a0;
- (void)insertAttributedText:(id)a0;
- (void)_updateLayoutManagerStyleEffectConfiguration;
- (void)replaceRange:(id)a0 withAttributedText:(id)a1;
- (BOOL)textInput:(id)a0 shouldChangeCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (void)textInputDidChange:(id)a0;
- (id)textInputTraits;
- (void)insertDictationResult:(id)a0 withCorrectionIdentifier:(id)a1;
- (void)_applyCorrectTextContainerSize:(id)a0;
- (void)setFont:(id)a0;
- (int)scrollXOffset;
- (void)setNonEditingLinebreakMode:(long long)a0;
- (id)attributedTextInRange:(id)a0;
- (int)scrollYOffset;
- (BOOL)isEditing;
- (void)_setTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementText:(id)a1 andSetCaretSelectionAfterText:(BOOL)a2;
- (void)_performWhileSuppressingDelegateNotifications:(id /* block */)a0;
- (id)rangeWithTextAlternatives:(id *)a0 atPosition:(id)a1;
- (BOOL)_mightHaveSelection;
- (BOOL)respondsToSelector:(SEL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrameForView:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_unobscuredSecureRange;
- (void)deactivateEditorDiscardingEdits:(BOOL)a0;
- (void)setLayoutOrientation:(long long)a0;

@end

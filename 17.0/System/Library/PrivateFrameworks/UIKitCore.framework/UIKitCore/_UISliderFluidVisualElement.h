@interface _UISliderFluidVisualElement : UIView <UIGestureRecognizerDelegate, _UIFluidSliderDirectDrivingDelegate, _UISliderFluidStyleVisualElement> {
    void /* unknown type, empty encoding */ clipView;
    void /* unknown type, empty encoding */ minimumTrackView;
    void /* unknown type, empty encoding */ maximumTrackView;
    void /* unknown type, empty encoding */ minimumTrackEffectView;
    void /* unknown type, empty encoding */ maximumTrackEffectView;
    void /* unknown type, empty encoding */ minimumView;
    void /* unknown type, empty encoding */ maximumView;
    void /* unknown type, empty encoding */ usingSliderStyling;
    void /* unknown type, empty encoding */ fluidInteraction;
    void /* unknown type, empty encoding */ expansionGesture;
    void /* unknown type, empty encoding */ isInteractivelyChanging;
    void /* unknown type, empty encoding */ stretchLimit;
    void /* unknown type, empty encoding */ paddingAroundImage;
    void /* unknown type, empty encoding */ defaultSliderHeight;
    void /* unknown type, empty encoding */ defaultExpansionFactor;
}

@property (nonatomic, weak) void /* unknown type, empty encoding */ slider;
@property (nonatomic, retain) void /* unknown type, empty encoding */ data;
@property (nonatomic) void /* unknown type, empty encoding */ changeWithVolumeButtons;
@property (nonatomic) void /* unknown type, empty encoding */ fluidUpdateSource;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;

- (BOOL)cancelTouchTracking;
- (id)thumbViewNeue;
- (void)didSetValues;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })valueTextRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)didSetMaximumValueImage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)didSetThumbEnabled;
- (void)_controlTouchMoved:(id)a0 withEvent:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)didSetMinimumTrackImageForState:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 trackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 value:(float)a2;
- (BOOL)cancelMouseTracking;
- (id)currentMinimumTrackImage;
- (void)didSetThumbImageForState:(unsigned long long)a0;
- (id)createThumbView;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (BOOL)isAnimatingValueChange;
- (void)setValue:(float)a0 animated:(BOOL)a1;
- (void)didChangeMinimumTrackVisibleWithDuration:(double)a0;
- (void)didSetMaximumTrackImageForState:(unsigned long long)a0;
- (void)didSetThumbImageForStates;
- (id)maxTrackView;
- (void)didSetSelected;
- (void)didSetThumbTintColor;
- (void)didUpdateTraitCollection;
- (id)currentThumbImage;
- (id)thumbView;
- (void)didSetMaximumTrackImageForStates;
- (BOOL)continueTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })thumbHitEdgeInsets;
- (void)_controlTouchEnded:(id)a0 withEvent:(id)a1;
- (BOOL)beginTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (void)_controlTouchBegan:(id)a0 withEvent:(id)a1;
- (void)didSetEnabled;
- (id)minTrackView;
- (void)didSetMinimumTrackImageForStates;
- (id)minValueImageView;
- (void)didSetHighlighted;
- (void)didPerformLayout;
- (void)didSetShowValue;
- (id)currentMaximumTrackImage;
- (void)didSetMinimumTrackTintColor;
- (id)maxValueImageView;
- (void)didSetMaximumTrackTintColor;
- (void)endTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (void)didSetContinuous;
- (void)didSetMinimumValueImage;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void)didSetFluidTrackHidden;
- (void)didSetUserInteractionEnabled;
- (void)didUpdateConfiguration;
- (BOOL)driver:(id)a0 shouldBeginAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)overriddenTrackingState;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void).cxx_destruct;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (id)initWithCoder:(id)a0;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (void)handleExpansionGesture:(id)a0;

@end

@class UIColor, UIVisualEffect, NSString, UIView, UIScrollView, UISwipeActionController, NSSet, NSMutableArray, NSMutableSet, UITableViewRowData, NSIndexPath;
@protocol UICollectionViewDelegateTableLayout, UICollectionViewDataSourceTableLayout, UITableConstants;

@interface UICollectionViewTableLayout : UICollectionViewLayout <UIGestureRecognizerDelegate, UICollectionViewTableAttributes, UITable_Internal, UISwipeActionHost> {
    NSSet *_floatingElementKinds;
    UIColor *_separatorColor;
    UIColor *_darkenedSeparatorColor;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _sectionContentInset;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _previousLayoutMargins;
    NSMutableArray *_indexPathCache;
    NSMutableSet *_preferredAttributesCache;
    NSMutableSet *_headerPreferredAttributesCache;
    NSMutableSet *_footerPreferredAttributesCache;
    double _memoizedScale;
}

@property (retain, nonatomic, getter=_constants) id<UITableConstants> constants;
@property (retain, nonatomic) UITableViewRowData *rowData;
@property (retain, nonatomic) NSMutableArray *deleteIndexPaths;
@property (retain, nonatomic) NSMutableArray *insertIndexPaths;
@property (readonly, nonatomic, getter=_delegateActual) id<UICollectionViewDelegateTableLayout> delegateActual;
@property (readonly, nonatomic, getter=_delegateProxy) id<UICollectionViewDelegateTableLayout> delegateProxy;
@property (readonly, nonatomic, getter=_dataSourceActual) id<UICollectionViewDataSourceTableLayout> dataSourceActual;
@property (retain, nonatomic, getter=_swipeActionController, setter=_setSwipeActionController:) UISwipeActionController *swipeActionController;
@property (retain, nonatomic) NSIndexPath *deletedIndexPath;
@property (nonatomic, getter=_showsAdditionalSeparators, setter=_setShowsAdditionalSeparators:) BOOL showsAdditionalSeparators;
@property (nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } separatorInset;
@property (nonatomic) double rowHeight;
@property (nonatomic) double sectionHeaderHeight;
@property (nonatomic) double sectionFooterHeight;
@property (nonatomic) long long separatorStyle;
@property (copy, nonatomic) UIColor *separatorColor;
@property (retain, nonatomic) UIVisualEffect *separatorEffect;
@property (nonatomic) BOOL cellLayoutMarginsFollowReadableWidth;
@property (nonatomic) BOOL insetsContentViewsToSafeArea;
@property (nonatomic) BOOL separatorInsetIsRelativeToCellEdges;
@property (nonatomic) double estimatedRowHeight;
@property (nonatomic) double estimatedSectionHeaderHeight;
@property (nonatomic) double estimatedSectionFooterHeight;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) UIColor *backgroundColor;
@property (readonly, nonatomic, getter=_headerFooterLeadingMarginWidth) double headerFooterLeadingMarginWidth;
@property (readonly, nonatomic, getter=_headerFooterTrailingMarginWidth) double headerFooterTrailingMarginWidth;
@property (readonly, nonatomic, getter=_defaultSectionHeaderHeight) double defaultSectionHeaderHeight;
@property (readonly, nonatomic, getter=_defaultSectionFooterHeight) double defaultSectionFooterHeight;
@property (readonly, nonatomic, getter=_sidePadding) double sidePadding;
@property (readonly, nonatomic, getter=_contentInset) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _contentInset;
@property (readonly, nonatomic, getter=_tableContentInset) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } tableContentInset;
@property (readonly, nonatomic, getter=_paddingAboveFirstSectionHeader) double paddingAboveFirstSectionHeader;
@property (readonly, nonatomic, getter=_paddingAboveSectionHeaders) double paddingAboveSectionHeaders;
@property (readonly, nonatomic, getter=_sectionHeaderToFirstRowPadding) double sectionHeaderToFirstRowPadding;
@property (readonly, nonatomic, getter=_sectionFooterToLastRowPadding) double sectionFooterToLastRowPadding;
@property (readonly, nonatomic, getter=_headerFooterPinningBehavior) long long headerFooterPinningBehavior;
@property (readonly, nonatomic, getter=_rowSpacing) double rowSpacing;
@property (readonly, nonatomic, getter=_isTableHeaderAutohiding) BOOL isTableHeaderAutohiding;
@property (readonly, nonatomic, getter=_heightForTableHeader) double heightForTableHeader;
@property (readonly, nonatomic, getter=_heightForTableFooter) double heightForTableFooter;
@property (readonly, nonatomic, getter=_providesRowHeights) BOOL providesRowHeights;
@property (readonly, nonatomic, getter=_estimatesHeights) BOOL estimatesHeights;
@property (readonly, nonatomic, getter=_estimatesRowHeights) BOOL estimatesRowHeights;
@property (readonly, nonatomic, getter=_estimatesSectionHeaderHeights) BOOL estimatesSectionHeaderHeights;
@property (readonly, nonatomic, getter=_estimatesSectionFooterHeights) BOOL estimatesSectionFooterHeights;
@property (readonly, nonatomic, getter=_tableHeaderView) UIView *tableHeaderView;
@property (readonly, nonatomic, getter=_tableFooterView) UIView *tableFooterView;
@property (readonly, nonatomic, getter=_shouldUseSearchBarHeaderBehavior) BOOL shouldUseSearchBarHeaderBehavior;
@property (readonly, nonatomic, getter=_shouldUseNewHeaderFooterBehavior) BOOL shouldUseNewHeaderFooterBehavior;
@property (readonly, nonatomic, getter=_scrollView) UIScrollView *scrollView;
@property (readonly, nonatomic, getter=_numberOfSections) long long numberOfSections;
@property (readonly, nonatomic) BOOL allowsMultipleSelection;
@property (readonly, nonatomic) BOOL allowsMultipleSelectionDuringEditing;
@property (readonly, nonatomic) BOOL usesVariableMargins;
@property (readonly, nonatomic) BOOL overlapsSectionHeaderViews;
@property (readonly, nonatomic, getter=_backgroundInset) double backgroundInset;
@property (readonly, nonatomic, getter=_cellSafeAreaInsets) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } cellSafeAreaInsets;
@property (readonly, nonatomic, getter=_topPadding) double topPadding;
@property (readonly, nonatomic, getter=_bottomPadding) double bottomPadding;
@property (readonly, nonatomic, getter=_isShowingIndex) BOOL showingIndex;
@property (readonly, nonatomic, getter=_indexFrame) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } indexFrame;
@property (readonly, nonatomic, getter=_indexBarExtentFromEdge) double indexBarExtentFromEdge;
@property (readonly, nonatomic, getter=_sectionContentInset) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } sectionContentInset;
@property (readonly, nonatomic, getter=_rawSectionContentInset) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } rawSectionContentInset;
@property (readonly, nonatomic, getter=_sectionCornerRadius) double sectionCornerRadius;
@property (readonly, nonatomic, getter=_sectionContentInsetFollowsLayoutMargins) BOOL sectionContentInsetFollowsLayoutMargins;
@property (readonly, nonatomic, getter=_accessoryBaseColor) UIColor *accessoryBaseColor;
@property (readonly, nonatomic, getter=_multiselectCheckmarkColor) UIColor *multiselectCheckmarkColor;
@property (readonly, nonatomic) BOOL canBeEdited;
@property (nonatomic, getter=isEditing) BOOL editing;
@property (readonly, nonatomic, getter=_tableStyle) long long tableStyle;
@property (readonly, nonatomic, getter=_rawSeparatorInset) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } rawSeparatorInset;

+ (Class)layoutAttributesClass;
+ (Class)invalidationContextClass;

- (id)_invalidationContextForUpdatedLayoutMargins:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (struct CGSize { double x0; double x1; })collectionViewContentSize;
- (id)layoutAttributesForInteractivelyMovingItemAtIndexPath:(id)a0 withTargetPosition:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)_wantsBandSelectionVisualsInSection:(long long)a0;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)invalidationContextForBoundsChange:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_cellsShouldConferWithAutolayoutEngineForSizingInfo;
- (id)itemContainerViewForSwipeActionController:(id)a0;
- (void)invalidateLayoutWithContext:(id)a0;
- (void)prepareLayout;
- (id)invalidationContextForPreferredLayoutAttributes:(id)a0 withOriginalAttributes:(id)a1;
- (id)layoutAttributesForSupplementaryViewOfKind:(id)a0 atIndexPath:(id)a1;
- (BOOL)shouldInvalidateLayoutForPreferredLayoutAttributes:(id)a0 withOriginalAttributes:(id)a1;
- (BOOL)_estimatesSizes;
- (id)layoutAttributesForElementsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)finalLayoutAttributesForDisappearingItemAtIndexPath:(id)a0;
- (id)init;
- (void)_setCollectionView:(id)a0;
- (id)layoutAttributesForItemAtIndexPath:(id)a0;
- (id)layoutAttributesForDecorationViewOfKind:(id)a0 atIndexPath:(id)a1;
- (void)dealloc;
- (long long)layoutDirectionForSwipeActionController:(id)a0;
- (id)swipeActionController:(id)a0 viewForItemAtIndexPath:(id)a1;
- (BOOL)swipeActionController:(id)a0 mayBeginSwipeForItemAtIndexPath:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRect;
- (void)swipeActionController:(id)a0 willBeginSwipeForItemAtIndexPath:(id)a1;
- (id)gestureRecognizerViewForSwipeActionController:(id)a0;
- (id)swipeActionController:(id)a0 leadingSwipeConfigurationForItemAtIndexPath:(id)a1;
- (void).cxx_destruct;
- (BOOL)_shouldDrawThickSeparators;
- (void)swipeActionController:(id)a0 didEndSwipeForItemAtIndexPath:(id)a1;
- (id)swipeActionController:(id)a0 indexPathForTouchLocation:(struct CGPoint { double x0; double x1; })a1;
- (id)swipeActionController:(id)a0 trailingSwipeConfigurationForItemAtIndexPath:(id)a1;
- (long long)_editingStyleForRowAtIndexPath:(id)a0;
- (void)prepareForTransitionFromLayout:(id)a0;
- (BOOL)_shouldApplyReadableWidthInsets;
- (long long)_accessoryTypeForCell:(id)a0 forRowAtIndexPath:(id)a1;
- (void)_applyContentSizeDeltaImmediately:(double)a0;
- (BOOL)_canReorderRowAtIndexPath:(id)a0;
- (void)_cellAccessoryButtonTappedAtIndexPath:(id)a0;
- (void)_coalesceContentSizeUpdateWithDelta:(double)a0;
- (struct CGPoint { double x0; double x1; })_contentOffsetFromProposedContentOffset:(struct CGPoint { double x0; double x1; })a0 forScrollingToItemAtIndexPath:(id)a1 atScrollPosition:(unsigned long long)a2;
- (void)_darkenedColorsChanged:(id)a0;
- (double)_dataSourceHeightForFooterInSection:(long long)a0;
- (double)_dataSourceHeightForHeaderInSection:(long long)a0;
- (double)_dataSourceHeightForRowAtIndexPath:(id)a0;
- (double)_defaultCellHeight;
- (id)_detailTextForHeaderInSection:(long long)a0;
- (double)_estimatedHeightForFooterInSection:(long long)a0;
- (double)_estimatedHeightForHeaderInSection:(long long)a0;
- (double)_estimatedHeightForRowAtIndexPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_extraSeparatorFrameForIndexPath:(id)a0 offset:(double)a1;
- (id)_floatingElementKinds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForSectionElementKind:(id)a0 atSection:(long long)a1 visibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 floating:(BOOL *)a3 canGuess:(BOOL)a4;
- (BOOL)_hasHeaderFooterBelowRowAtIndexPath:(id)a0;
- (void)_headerFooterDidInvalidateIntrinsicContentSize:(id)a0;
- (double)_heightForFooterInSection:(long long)a0;
- (double)_heightForFooterInSection:(long long)a0 useRowData:(BOOL)a1;
- (double)_heightForHeaderInSection:(long long)a0;
- (double)_heightForHeaderInSection:(long long)a0 useRowData:(BOOL)a1;
- (double)_heightForRowAtIndexPath:(id)a0;
- (long long)_indentationLevelForRowAtIndexPath:(id)a0;
- (id)_indexPathsBelowIndexPath:(id)a0;
- (void)_invalidateIndexPathsBelowIndexPath:(id)a0 withInvalidationContext:(id)a1;
- (id)_layoutAttributesForCellWithIndexPath:(id)a0;
- (id)_layoutAttributesForSectionElementKind:(id)a0 atSection:(long long)a1;
- (id)_layoutAttributesForSeparatorWithIndexPath:(id)a0;
- (id)_layoutAttributesForViewElementKind:(id)a0;
- (double)_maxTitleWidthForFooterInSection:(long long)a0;
- (double)_maxTitleWidthForHeaderInSection:(long long)a0;
- (BOOL)_needsRecomputeOfPreferredAttributesForVisibleEstimatedItemsDuringUpdate;
- (long long)_numberOfRowsInSection:(long long)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_preferredLayoutMargins;
- (void)_prepareForRowDataHeaderFooterSizing;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_sectionRangeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_separatorColorChanged;
- (BOOL)_separatorInsetIsRelativeToCellEdges;
- (void)_setFloatingElementKinds:(id)a0;
- (void)_setHeight:(double)a0 forRowAtIndexPath:(id)a1 usingPresentationValues:(BOOL)a2;
- (void)_setSectionContentInset:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (BOOL)_shouldDisplayExtraSeparatorsAtOffset:(double *)a0;
- (BOOL)_shouldDrawSeparatorAtTop:(BOOL)a0 ofSection:(long long)a1;
- (BOOL)_shouldDrawTopSeparatorDueToMergedBarForSectionAtIndex:(long long)a0;
- (BOOL)_shouldHaveFooterViewForSection:(long long)a0;
- (BOOL)_shouldHaveGlobalViewForElementOfKind:(id)a0;
- (BOOL)_shouldHaveHeaderViewForSection:(long long)a0;
- (BOOL)_shouldHaveViewForElementOfKind:(id)a0 atSection:(long long)a1 useRowData:(BOOL)a2;
- (BOOL)_shouldIndentWhileEditingForRowAtIndexPath:(id)a0;
- (BOOL)_shouldStripHeaderTopPaddingForSection:(long long)a0;
- (void)_swipeToDeleteCell:(id)a0;
- (long long)_titleAlignmentForFooterInSection:(long long)a0;
- (long long)_titleAlignmentForHeaderInSection:(long long)a0;
- (id)_titleForFooterInSection:(long long)a0;
- (id)_titleForHeaderInSection:(long long)a0;
- (BOOL)_wantsSwipes;
- (id)contextualActionForDeletingRowAtIndexPath:(id)a0;
- (void)finalizeCollectionViewUpdates;
- (id)invalidationContextForInteractivelyMovingItems:(id)a0 withTargetPosition:(struct CGPoint { double x0; double x1; })a1 previousIndexPaths:(id)a2 previousPosition:(struct CGPoint { double x0; double x1; })a3;
- (void)prepareForCollectionViewUpdates:(id)a0;
- (void)prepareForTransitionToLayout:(id)a0;
- (void)resetSwipedRowWithCompletion:(id /* block */)a0;
- (void)swipeActionController:(id)a0 animateView:(id)a1 actionsView:(id)a2 forDestructiveAction:(id)a3 atIndexPath:(id)a4 withSwipeInfo:(struct { unsigned long long x0; unsigned long long x1; BOOL x2; double x3; double x4; double x5; })a5 completion:(id /* block */)a6;
- (void)swipeActionController:(id)a0 didCompleteAction:(id)a1 cancelled:(BOOL)a2 atIndexPath:(id)a3;
- (void)swipeActionController:(id)a0 willPerformAction:(id)a1 atIndexPath:(id)a2;
- (id)swipeActionForDeletingRowAtIndexPath:(id)a0;

@end

@class UIImage, _UIBadgeView, NSMutableDictionary, _UITabBarItemData, UIVisualEffectView, UITabBarSwappableImageView, UITabBarButtonLabel, UIColor, UIView, NSString, UITabBar, NSArray, UIVibrancyEffect, UIImageView;

@interface UITabBarButton : UIControl <UISpringLoadedInteractionSupporting> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _hitRect;
    UITabBarSwappableImageView *_imageView;
    UIVisualEffectView *_vibrancyEffectView;
    UITabBarButtonLabel *_label;
    _UIBadgeView *_badge;
    UIImageView *_selectedIndicator;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _imageInsets;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _imageLandscapeInsets;
    UIImage *_customSelectedIndicatorImage;
    struct UIOffset { double horizontal; double vertical; } _labelOffset;
    NSMutableDictionary *_buttonTintColorsForState;
    NSMutableDictionary *_contentTintColorsForState;
    UIColor *_defaultUnselectedLabelTintColor;
    UIColor *_badgeColor;
    NSMutableDictionary *_badgeTextAttributesForState;
    struct UIOffset { double horizontal; double vertical; } _badgeOffset;
    UIView *_highContrastFocusIndicator;
    BOOL _selected;
    BOOL _accessibilityButtonShapesEnabled;
    BOOL _accessibilityHighContractFocusIndicatorEnabled;
    BOOL _accessibilityGrayStatusEnabled;
}

@property (nonatomic, getter=isSpringLoaded) BOOL springLoaded;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) NSArray *carplayConstraints;
@property (readonly, nonatomic) UIView *focusView;
@property (readonly, nonatomic, getter=isDefaultTVLayout) BOOL _defaultTVLayout;
@property (nonatomic) long long layoutStyle;
@property (retain, nonatomic) _UITabBarItemData *itemAppearanceData;
@property (retain, nonatomic) UIVibrancyEffect *itemVibrantEffect;
@property (readonly, weak, nonatomic) UITabBar *tabBar;
@property (retain, nonatomic, setter=_setAppearanceGuideClass:) Class _appearanceGuideClass;
@property (retain, nonatomic, getter=_unselectedTintColor, setter=_setUnselectedTintColor:) UIColor *unselectedTintColor;
@property (nonatomic, setter=_setShowsHighlightedState:) BOOL _showsHighlightedState;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _contentRect;
@property (readonly, nonatomic) UIColor *_defaultUnselectedLabelTintColor;
@property (nonatomic, getter=_isSelected, setter=_setSelected:) BOOL _selected;

+ (id)_defaultLabelColor;

- (void)_setTitleTextAttributes:(id)a0 forState:(unsigned long long)a1;
- (void)pressesEnded:(id)a0 withEvent:(id)a1;
- (void)_didChangeFromIdiom:(long long)a0 onScreen:(id)a1 traverseHierarchy:(BOOL)a2;
- (void)dealloc;
- (id)badgeTextAttributesForState:(long long)a0;
- (void)traitCollectionDidChange:(id)a0;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)_UIAppearance_setTitlePositionAdjustment:(struct UIOffset { double x0; double x1; })a0;
- (struct UIOffset { double x0; double x1; })titlePositionAdjustmentForState:(long long)a0;
- (void)setHighlighted:(BOOL)a0;
- (BOOL)canBecomeFocused;
- (void)_UIAppearance_setTitleTextAttributes:(id)a0 forState:(unsigned long long)a1;
- (id)_selectedIndicatorImage;
- (void)pressesBegan:(id)a0 withEvent:(id)a1;
- (id)_systemDefaultFocusGroupIdentifier;
- (void)setEnabled:(BOOL)a0;
- (void)setSemanticContentAttribute:(long long)a0;
- (void)pressesChanged:(id)a0 withEvent:(id)a1;
- (BOOL)_isEligibleForFocusInteraction;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_defaultFocusRegionFrame;
- (void)_applyTabBarButtonAppearanceStorage:(id)a0 withTaggedSelectors:(id)a1;
- (id)iconColorForState:(long long)a0;
- (void)_UIAppearance_setBadgeColor:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderSelectionRectForWindow:(id)a0;
- (void).cxx_destruct;
- (struct UIOffset { double x0; double x1; })badgePositionAdjustmentForState:(long long)a0;
- (void)_UIAppearance_setBadgeTextAttributes:(id)a0 forState:(unsigned long long)a1;
- (void)_reducedTransparencyDidChange:(id)a0;
- (struct UIOffset { double x0; double x1; })badgeTitlePositionAdjustmentForState:(long long)a0;
- (void)setImage:(id)a0;
- (id)badgeBackgroundColorForState:(long long)a0;
- (id)titleTextAttributesForState:(long long)a0;
- (void)didUpdateFocusInContext:(id)a0 withAnimationCoordinator:(id)a1;
- (void)_setBadgeTextAttributes:(id)a0 forState:(unsigned long long)a1;
- (id)_info;
- (void)_accessibilityButtonShapesDidChangeNotification:(id)a0;
- (void)_setTitlePositionAdjustment:(struct UIOffset { double x0; double x1; })a0;
- (void)layoutSubviews;
- (void)_setBadgeColor:(id)a0;
- (void)pressesCancelled:(id)a0 withEvent:(id)a1;
- (BOOL)shouldUpdateFocusInContext:(id)a0;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 forEvent:(struct __GSEvent { } *)a1;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (void)_setBadgeValue:(id)a0;
- (id)_tabBar;
- (BOOL)labelShouldUseVibrancyForState:(long long)a0;
- (struct CGSize { double x0; double x1; })_horizontalLayout_sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (long long)defaultCompositingModeForState:(long long)a0;
- (void)_accessibilityGrayStatusDidChangeNotification:(id)a0;
- (void)_accessibilityHighContractFocusIndicatorDidChangeNotification:(id)a0;
- (void)_appleTV_layoutSubviews;
- (struct CGSize { double x0; double x1; })_appleTV_sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_areTabBarButtonAccessibilityButtonShapesEnabled;
- (id)_buttonTintColorForState:(unsigned long long)a0;
- (id)_contentTintColorForState:(unsigned long long)a0;
- (long long)_currentItemState;
- (long long)_focusTouchSensitivityStyle;
- (void)_ios_layoutSubviews;
- (void)_positionBadge;
- (void)_positionBadgeAfterChangesIfNecessary:(id /* block */)a0;
- (void)_removeCarplayConstraints;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderSelectionRect;
- (id)_selectedIndicatorView;
- (void)_sendFocusAction:(id)a0;
- (void)_setBadgeOffset:(struct UIOffset { double x0; double x1; })a0;
- (void)_setButtonTintColor:(id)a0 forState:(unsigned long long)a1;
- (void)_setContentTintColor:(id)a0 forState:(unsigned long long)a1;
- (void)_setCustomSelectedIndicatorImage:(id)a0;
- (void)_setTabBarHitRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setupCarplayConstraints;
- (void)_setupSymbolConfigurationsForIdiom:(long long)a0;
- (void)_showBoundsViewAt:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alignmentViewAt:(double)a1 forSymbolImage:(BOOL)a2;
- (void)_showSelectedIndicator:(BOOL)a0 changeSelection:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tabBarHitRect;
- (struct UIOffset { double x0; double x1; })_titlePositionAdjustment;
- (void)_updateAfterTraitCollectionOrAccessibilityDidChangeTV;
- (void)_updateBadgeAppearanceAndLayoutNow:(BOOL)a0;
- (void)_updateSelectedIndicatorFrame;
- (void)_updateSelectedIndicatorView;
- (void)_updateToMatchCurrentState;
- (void)_updateVibrancyEffectView;
- (double)defaultAlphaForState:(long long)a0;
- (id)defaultColorForState:(long long)a0;
- (BOOL)iconShouldUseVibrancyForState:(long long)a0;
- (id)initWithImage:(id)a0 landscapeImage:(id)a1 selectedImage:(id)a2 landscapeSelectedImage:(id)a3 label:(id)a4 withInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a5 landscapeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a6 tabBar:(id)a7;
- (id)initWithImage:(id)a0 selectedImage:(id)a1 label:(id)a2 withInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a3 tabBar:(id)a4;
- (BOOL)isDefaultColor:(id)a0 forState:(long long)a1;
- (void)set_info:(id)a0;

@end

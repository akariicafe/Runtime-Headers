@class NSString, NSDictionary, NSArray, NSDate, NSObject;
@protocol OS_dispatch_queue;

@interface MCProfile : NSObject {
    int _trustQueueTrustLevel;
    BOOL _trustQueueTrustHasBeenEvaluated;
    NSObject<OS_dispatch_queue> *_trustEvaluationQueue;
    NSString *_signerQueueSignerSummary;
    NSArray *_signerQueueSignerCertificates;
    NSObject<OS_dispatch_queue> *_signerEvaluationQueue;
}

@property (readonly, retain, nonatomic) NSString *stubFileName;
@property (readonly, retain, nonatomic) NSString *profileIDHashFileName;
@property (readonly, retain, nonatomic) NSString *profileDataFileName;
@property (readonly, retain, nonatomic) NSString *friendlyName;
@property (retain, nonatomic) NSString *displayName;
@property (readonly, retain, nonatomic) NSString *profileDescription;
@property (readonly, retain, nonatomic) NSString *identifier;
@property (readonly, retain, nonatomic) NSString *UUID;
@property (readonly, retain, nonatomic) NSString *organization;
@property (readonly, nonatomic) long long version;
@property (retain, nonatomic) NSDate *installDate;
@property (retain, nonatomic) NSDictionary *installOptions;
@property (nonatomic) BOOL mustInstallNonInteractively;
@property (nonatomic, getter=isEncrypted) BOOL encrypted;
@property (readonly, nonatomic) BOOL isSigned;
@property (readonly, nonatomic) int trustLevel;
@property (readonly, nonatomic) NSString *signerSummary;
@property (readonly, nonatomic) struct __SecCertificate { } *signerCertificate;
@property (retain, nonatomic) NSArray *signerCertificates;
@property (readonly, nonatomic) NSArray *signerCertificatesData;
@property (readonly, nonatomic) BOOL isStub;
@property (readonly, retain, nonatomic) NSString *productBuildVersion;
@property (readonly, retain, nonatomic) NSString *productVersion;
@property (nonatomic, getter=isLocked) BOOL locked;
@property (retain, nonatomic) NSString *removalPasscode;
@property (readonly, nonatomic) BOOL needsReboot;
@property (readonly, nonatomic) long long installType;
@property (readonly, nonatomic) BOOL isInstalledForSystem;
@property (readonly, nonatomic) BOOL isInstalledForUser;
@property (readonly, nonatomic) BOOL shouldHaveFullSSLTrust;
@property (readonly, retain, nonatomic) NSArray *payloads;
@property (readonly, retain, nonatomic) NSArray *managedPayloads;
@property (readonly, retain, nonatomic) NSArray *payloadsContentInfo;
@property (readonly, retain, nonatomic) NSArray *localizedPayloadSummaryByType;
@property (readonly, retain, nonatomic) NSArray *localizedManagedPayloadSummaryByType;
@property (readonly, retain, nonatomic) NSDate *earliestCertificateExpiryDate;
@property (readonly, retain, nonatomic) NSDate *expiryDate;
@property (readonly, retain, nonatomic) NSDate *unmodifiedExpiryDate;
@property (readonly, nonatomic) unsigned long long targetDeviceType;
@property (readonly, nonatomic) BOOL isManagedByProfileService;
@property (readonly, retain, nonatomic) NSArray *installationWarnings;
@property (readonly, nonatomic) NSString *localizedConsentText;
@property (readonly, nonatomic) NSDate *removalDate;
@property (readonly, nonatomic) BOOL isManagedByMDM;
@property (readonly, nonatomic) NSString *managingProfileIdentifier;
@property (readonly, nonatomic) BOOL isSupervisionProfile;

+ (id)_malformedProfileError;
+ (int)evaluateTrust:(struct __SecTrust { } *)a0;
+ (id)newProfileSignatureVersion;
+ (id)badFieldTypeErrorWithField:(id)a0;
+ (id)profileDictionaryFromProfileData:(id)a0 outSignerCerts:(id *)a1 outError:(id *)a2;
+ (int)evaluateTrustOfCertificateChain:(id)a0 signatureVersion:(id)a1;
+ (id)removeOptionalObjectInDictionary:(id)a0 key:(id)a1 type:(Class)a2 errorDomain:(id)a3 invalidDataCode:(long long)a4 invalidDataErrorString:(id)a5 outError:(id *)a6;
+ (int)evaluateTrustOfCertificateChain:(id)a0 signatureVersion:(id)a1 outIsAllowedToWriteDefaults:(BOOL *)a2;
+ (id)profileWithData:(id)a0 options:(id)a1 fileName:(id)a2 allowEmptyPayload:(BOOL)a3 outError:(id *)a4;
+ (id)stringForDeviceType:(unsigned long long)a0;
+ (id)removeRequiredObjectInDictionary:(id)a0 key:(id)a1 type:(Class)a2 errorDomain:(id)a3 missingDataCode:(long long)a4 missingDataErrorString:(id)a5 invalidDataCode:(long long)a6 invalidDataErrorString:(id)a7 outError:(id *)a8;
+ (int)evaluateTrustOfCertificateChain:(id)a0 signatureVersion:(id)a1 outIsAllowedToInstallUnsupportedPayloads:(BOOL *)a2 outIsAllowedToWriteDefaults:(BOOL *)a3;
+ (id)profileWithData:(id)a0 options:(id)a1 outError:(id *)a2;
+ (id)missingFieldErrorWithField:(id)a0;
+ (id)removeOptionalNonZeroLengthStringInDictionary:(id)a0 key:(id)a1 errorDomain:(id)a2 invalidDataCode:(long long)a3 invalidDataErrorString:(id)a4 outError:(id *)a5;
+ (id)profileWithData:(id)a0 fileName:(id)a1 allowEmptyPayload:(BOOL)a2 outError:(id *)a3;
+ (id)profileWithDictionary:(id)a0 options:(id)a1 signerCerts:(id)a2 fileName:(id)a3 allowEmptyPayload:(BOOL)a4 outError:(id *)a5;
+ (BOOL)checkString:(id)a0 isOneOfStrings:(id)a1 key:(id)a2 errorDomain:(id)a3 errorCode:(long long)a4 errorString:(id)a5 outError:(id *)a6;
+ (id)_unsupportedEnrollmentServiceProfileError;
+ (id)removeRequiredNonZeroLengthStringInDictionary:(id)a0 key:(id)a1 errorDomain:(id)a2 missingDataCode:(long long)a3 missingDataErrorString:(id)a4 invalidDataCode:(long long)a5 invalidDataErrorString:(id)a6 outError:(id *)a7;
+ (id)signerSummaryOfCertificate:(struct __SecCertificate { } *)a0;
+ (id)_unsupportedProfileTypeError;
+ (id)dataFromCMSEncodedData:(id)a0 outSignerCertificates:(id *)a1;
+ (id)profileWithData:(id)a0 outError:(id *)a1;
+ (id)profileWithData:(id)a0 fileName:(id)a1 outError:(id *)a2;
+ (int)evaluateTrustOfCertificateChain:(id)a0 signatureVersion:(id)a1 outIsAllowedToInstallUnsupportedPayloads:(BOOL *)a2 outIsAllowedToWriteDefaults:(BOOL *)a3 outIsAllowedToInstallSupervisedRestrictionsOnUnsupervisedDevices:(BOOL *)a4;

- (id)loggingID;
- (id)verboseDescription;
- (id)serializedDictionary;
- (BOOL)isProfileUIInstallationEffectivelyAllowed;
- (id)description;
- (void).cxx_destruct;
- (id)signatureVersion;
- (id)malformedProfileErrorWithError:(id)a0;
- (id)appAccessibilityParameters;
- (BOOL)containsAnyPayloadOfClasses:(id)a0;
- (BOOL)containsOnlyPayloadsOfClasses:(id)a0;
- (BOOL)containsPayloadOfClass:(Class)a0;
- (struct __SecCertificate { } *)copyCertificateFromPayloadWithUUID:(id)a0;
- (struct __SecCertificate { } *)copyCertificateWithPersistentID:(id)a0;
- (unsigned long long)countOfPayloadsOfClass:(Class)a0;
- (BOOL)doesSigningAllowReplacementWithProfile:(id)a0;
- (BOOL)doesSigningAllowReplacementWithProfile:(id)a0 useOriginalCheck:(BOOL)a1;
- (void)evaluateSignerTrust;
- (void)evaluateSignerTrustAsynchronouslyWithCompletion:(id /* block */)a0;
- (id)hasRequiredAppIDForMDM;
- (id)initWithDictionary:(id)a0 signerCerts:(id)a1 allowEmptyPayload:(BOOL)a2 outError:(id *)a3;
- (id)installationWarningsIncludeUnsignedProfileWarning:(BOOL)a0;
- (BOOL)isUserEnrollmentProfile;
- (BOOL)mayInstallWithOptions:(id)a0 hasInteractionClient:(BOOL)a1 outError:(id *)a2;
- (id)payloadWithUUID:(id)a0;
- (id)payloadsOfKindOfClass:(Class)a0;
- (id)payloadsWithClass:(Class)a0;
- (void)replacePayloadWithUUID:(id)a0 withPayload:(id)a1;
- (id)restrictionsWithHeuristicsAppliedOutError:(id *)a0;
- (id)stubDictionary;
- (id)subjectSummaryFromCertificatePayloadWithUUID:(id)a0;
- (id)subjectSummaryFromCertificateWithPersistentID:(id)a0;
- (BOOL)writeStubToDirectory:(id)a0;
- (BOOL)writeStubToPath:(id)a0;

@end

@class PXExploreParsingState, PXExploreLayoutMetrics, NSString;

@interface PXExploreLayoutGenerator : PXLayoutGenerator <PXGDiagnosticsProvider, PXPresentedGridLayout> {
    long long _count;
    long long _capacity;
    struct { long long x0; long long x1; unsigned long long x2; double x3; double x4; } *_inputItemInfos;
    struct _PXLayoutGeometry { long long x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; float x4; long long x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; struct CGSize { double x0; double x1; } x7; } *_outputGeometries;
    long long *_outputItemIndexToParseLocation;
    struct { long long x0; long long x1; long long x2; long long x3; } *_outputItemLocations;
    long long _rowCount;
    long long _rowCapacity;
    long long *_outputNumberOfColumnsAtRow;
    BOOL _isPrepared;
    struct CGPoint { double x; double y; } _origin;
    long long _row;
    long long _localNumberOfColumns;
    long long _localNumberOfRows;
    struct CGSize { double width; double height; } _cellSize;
    struct CGSize { double width; double height; } _intercellSpacing;
    struct CGSize { double width; double height; } _contentSize;
    struct _PXCornerSpriteIndexes { unsigned int topLeft; unsigned int topRight; unsigned int bottomLeft; unsigned int bottomRight; } _cornerSpriteIndexes;
    struct CGSize { double width; double height; } _headerItemSize;
    struct CGSize { double width; double height; } _minHeroItemsSize;
}

@property (readonly, nonatomic) PXExploreParsingState *localState;
@property (readonly, nonatomic) long long numberOfRemainingItems;
@property (readonly, nonatomic) BOOL canReorderItemsAcrossRows;
@property (copy, nonatomic) PXExploreLayoutMetrics *metrics;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } headerItemSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } minHeroItemsSize;
@property (readonly, nonatomic) struct CGSize { double width; double height; } minimumItemSize;
@property (readonly, nonatomic) struct CGSize { double width; double height; } buildingBlockSize;
@property (readonly, copy, nonatomic) NSString *diagnosticDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) long long presentedNumberOfRows;

- (void)dealloc;
- (struct CGSize { double x0; double x1; })size;
- (void)invalidate;
- (void).cxx_destruct;
- (id)initWithMetrics:(id)a0;
- (long long)itemIndexForPresentedItemIndex:(long long)a0;
- (BOOL)nextInputItems:(unsigned long long)a0;
- (void)endRowWithType:(long long)a0;
- (void)getGeometries:(struct _PXLayoutGeometry { long long x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; float x4; long long x5; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x6; struct CGSize { double x0; double x1; } x7; } *)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 withKind:(long long)a2;
- (void)_addThreeItemsToSixColumnRowWithHeroItemType:(long long)a0 options:(unsigned long long)a1 rowType:(long long *)a2;
- (void)_addTwoItemsForThreeColumnRowPreferringTallVariant:(BOOL)a0;
- (double)_buildingBlockAspectRatioForNumberOfColumns:(long long)a0 options:(unsigned long long)a1;
- (struct CGSize { double x0; double x1; })_cellSizeForNumberOfColumns:(long long)a0;
- (struct CGSize { double x0; double x1; })_estimatedSizeForColumns:(long long)a0 headerRows:(long long)a1 averageItemsPerBlock:(double)a2 averageRowsPerBlock:(double)a3 withOptions:(unsigned long long)a4;
- (struct CGSize { double x0; double x1; })_estimatedSizeForFourColumnLayoutWithOptions:(unsigned long long)a0;
- (struct CGSize { double x0; double x1; })_estimatedSizeForSixColumnLayoutWithOptions:(unsigned long long)a0;
- (struct CGSize { double x0; double x1; })_estimatedSizeForThreeColumnLayoutWithOptions:(unsigned long long)a0;
- (BOOL)_isShortRowNextFollowedByLargeHero;
- (void)_parseFourColumnHeroRowWithType:(long long)a0 heroItemType:(long long)a1 numberOfItems:(long long)a2;
- (BOOL)_parseFourColumnLayoutWithOptions:(unsigned long long)a0;
- (void)_parseFourColumnShortRowWithNumberOfItems:(long long)a0;
- (void)_parseSixColumnHeroRowWithNumberOfItems:(long long)a0 heroItemType:(long long)a1 subsequentShortRowItems:(long long)a2 options:(unsigned long long)a3;
- (BOOL)_parseSixColumnLayoutWithOptions:(unsigned long long)a0;
- (void)_parseSixColumnShortRowWithNumberOfItems:(long long)a0;
- (void)_parseThreeColumnHeaderRowWithNumberOfItems:(long long)a0;
- (BOOL)_parseThreeColumnLayoutWithOptions:(unsigned long long)a0;
- (void)_parseThreeColumnMediumHeroRowWithNumberOfItems:(long long)a0;
- (void)_parseThreeColumnShortRowWithNumberOfItems:(long long)a0;
- (void)_prepareIfNeeded;
- (void)addFullWidthItemWithType:(long long)a0 atRow:(long long)a1 aspectRatio:(double)a2;
- (void)addLocalItemWithType:(long long)a0 atColumn:(long long)a1 row:(long long)a2 columnSpan:(long long)a3 rowSpan:(long long)a4;
- (unsigned long long)attributesForNextItemAtIndex:(long long)a0;
- (void)beginRowWithNumberOfColumns:(long long)a0;
- (struct _PXCornerSpriteIndexes { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; })cornerSpriteIndexes;
- (void)endFullWidthRowWithType:(long long)a0 aspectRatio:(double)a1;
- (struct CGSize { double x0; double x1; })estimatedSize;
- (struct CGSize { double x0; double x1; })estimatedSizeForPadLandscape;
- (struct CGSize { double x0; double x1; })estimatedSizeForPadPortrait;
- (struct CGSize { double x0; double x1; })estimatedSizeForPhoneLandscape;
- (struct CGSize { double x0; double x1; })estimatedSizeForPhonePortrait;
- (void)getLowestAspectRatio:(double *)a0 highestAspectRatio:(double *)a1 forNextItems:(long long)a2;
- (long long)indexWithinNextItems:(long long)a0 having:(long long)a1 keyIndex:(long long)a2;
- (BOOL)isAcceptableLargeHeroNextItemAtIndex:(long long)a0;
- (long long)itemIndexForItem:(long long)a0 inDirection:(unsigned long long)a1;
- (void)moveNextItemAtIndex:(long long)a0 toIndex:(long long)a1;
- (BOOL)nextItems:(long long)a0 areAll:(unsigned long long)a1;
- (BOOL)nextItems:(long long)a0 isAny:(unsigned long long)a1;
- (long long)numberOf:(unsigned long long)a0 withinNextItems:(long long)a1;
- (long long)numberOfItemsInFourColumnMediumHeroRowForNumberOfRemainingItems:(long long)a0;
- (long long)numberOfItemsInSixColumnHeroRowForNumberOfRemainingItems:(long long)a0 rowOptions:(unsigned long long *)a1;
- (long long)numberOfItemsInSixColumnShortRowForNumberOfRemainingItems:(long long)a0;
- (BOOL)parseFourColumnGroupWithShortRowFollowedByLargeHero;
- (BOOL)parseFourColumnRowWithType:(long long)a0 numberOfItems:(long long)a1;
- (BOOL)parseMacLayout;
- (BOOL)parsePadLandscapeLayout;
- (BOOL)parsePadPortraitLayout;
- (BOOL)parsePhoneLandscapeLayout;
- (BOOL)parsePhonePortraitLayout;
- (BOOL)parseSixColumnRowWithType:(long long)a0 numberOfItems:(long long)a1 options:(unsigned long long)a2;
- (BOOL)parseSixColumnRowWithType:(long long)a0 numberOfItems:(long long)a1 subsequentShortRowItems:(long long)a2 options:(unsigned long long)a3;
- (BOOL)parseThreeColumnGroupWithFiveItems;
- (BOOL)parseThreeColumnGroupWithShortRowFollowedByLargeHero;
- (BOOL)parseThreeColumnGroupWithThreeItemsFollowedByOneItemAllowingLargeHeroAtEnd:(BOOL)a0;
- (BOOL)parseThreeColumnMediumHeroRowWithPano;
- (BOOL)parseThreeColumnRowWithType:(long long)a0 numberOfItems:(long long)a1;
- (BOOL)parseThreeColumnShortRowWithPano;
- (long long)preferredRowTypeAfterRowWithType:(long long)a0;
- (BOOL)prepareNextItems:(long long)a0 withLargeHeroIndex:(long long)a1;
- (struct { long long x0; long long x1; long long x2; long long x3; })presentedItemLocationForItemAtIndex:(long long)a0;
- (id)presentedItemsBetweenItem:(long long)a0 andItem:(long long)a1;
- (id)presentedItemsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)presentedNumberOfColumnsAtRow:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })presentedRectForItemAtIndex:(long long)a0;
- (void)reorderNextItems:(long long)a0 usingMapping:(id /* block */)a1;
- (double)score:(long long)a0 forNextItemAtIndex:(long long)a1;
- (void)setBuildingBlockColumnSpan:(long long)a0 rowSpan:(long long)a1 withNumberOfColumns:(long long)a2;
- (void)sortNextItems:(long long)a0 withItemAtIndex:(long long)a1 having:(long long)a2;

@end

@class BRCPowerLogReporter, BRCVolume, NSMutableSet, BRCFSUploader, BRCDeadlineScheduler, BRCApplyScheduler, BRCDownloadTrackers, BRCClientState, BRCUserNotification, BRCServerPersistedState, BRCTimerScheduler, BRDSIDString, NSURL, BRCFileUnlinker, BRCThrottle, NSNumber, BRCFSDownloader, BRCPQLConnection, BRCFSReader, BRCContainerScheduler, br_pacer, BRCAccountHandler, NSMutableDictionary, NSString, BRCNotificationManager, BRCAccountWaitOperation, NSObject, NSHashTable, BRCItemTransmogrifier, BRCAnalyticsReporter, BRCFSWriter, BRCRecentsEnumerator, BRCSyncUpScheduler, BRCDiskSpaceReclaimer, BRCFairScheduler, BRCStageRegistry, BRCGlobalProgress;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_dispatch_workloop;

@interface BRCAccountSession : NSObject <BRCCloudDocsAppsObserver> {
    NSMutableDictionary *_syncContexts;
    NSURL *_dbURL;
    NSObject<OS_dispatch_source> *_dbWatcher;
    NSObject<OS_dispatch_queue> *_dbWatcherQueue;
    NSObject<OS_dispatch_queue> *_dbCorruptionQueue;
    NSObject<OS_dispatch_workloop> *_clientTruthWorkloop;
    NSObject<OS_dispatch_workloop> *_serverTruthWorkloop;
    NSObject<OS_dispatch_workloop> *_readOnlyWorkloop;
    int _cloudDocsFD;
    id /* block */ _dbProfilingHook;
    NSString *_databaseID;
    NSHashTable *_miscOperations;
    BOOL _forDBDump;
    BRCPQLConnection *_clientDB;
    BRCPQLConnection *_serverDB;
    BRCPQLConnection *_readOnlyDB;
    BRCPQLConnection *_expensiveReadOnlyDB;
    BRCClientState *_clientState;
    BRCServerPersistedState *_serverState;
    struct brc_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } pthread; } _zonesLock;
    struct brc_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } pthread; } _zonesCreationLock;
    BOOL _resumed;
    NSMutableDictionary *_libraryRowIDsByMangledID;
    NSMutableDictionary *_appLibrariesByRowID;
    NSMutableDictionary *_serverZonesByZoneRowID;
    NSMutableDictionary *_sharedServerZonesByMangledID;
    NSMutableDictionary *_sharedClientZonesByMangledID;
    NSMutableDictionary *_privateServerZonesByID;
    NSMutableDictionary *_privateClientZonesByID;
    NSMutableDictionary *_rootsByFolderType;
    BRCFSReader *_fsReader;
    BRCFSWriter *_fsWriter;
    NSMutableDictionary *_fsEventsMonitors;
    unsigned long long _lastDiskSpaceCheckTime;
    unsigned long long _availableDiskSpace;
    unsigned long long _totalDiskSpace;
    br_pacer *_reschedulePendingDiskItemsPacer;
    br_pacer *_updateDiskSpacePacer;
    NSString *_acAccountID;
    NSMutableSet *_xpcClients;
    BOOL _isGreedy;
    BOOL _accountIsReady;
    BRCAccountWaitOperation *_accountWaitOperation;
    BOOL _isDBOpened;
    NSNumber *_isInCarry;
    NSObject<OS_dispatch_queue> *_ciconiaRepeatQueue;
    NSObject<OS_dispatch_source> *_ciconiaRepeatSource;
}

@property (readonly, nonatomic) BRCClientState *clientState;
@property (readonly, nonatomic) BRCServerPersistedState *serverState;
@property (readonly, nonatomic) unsigned long long databaseID;
@property (readonly, nonatomic) BRCPQLConnection *clientDB;
@property (readonly, nonatomic) BRCPQLConnection *readOnlyDB;
@property (readonly, nonatomic) BRCPQLConnection *expensiveReadOnlyDB;
@property (readonly, nonatomic) BRCPQLConnection *serverDB;
@property (readonly, nonatomic) NSObject<OS_dispatch_workloop> *clientTruthWorkloop;
@property (readonly, nonatomic) NSObject<OS_dispatch_workloop> *serverTruthWorkloop;
@property (readonly, nonatomic) NSObject<OS_dispatch_workloop> *readOnlyWorkloop;
@property (readonly, nonatomic) BRCFSReader *fsReader;
@property (readonly, nonatomic) BRCFSWriter *fsWriter;
@property (readonly, nonatomic) unsigned long long availableDiskSpace;
@property (readonly, nonatomic) BOOL isOpen;
@property (retain, nonatomic) NSString *sessionDirPath;
@property (retain, nonatomic) NSString *cacheDirPath;
@property (readonly, nonatomic) BRDSIDString *accountDSID;
@property (readonly, nonatomic) NSString *ubiquityTokenSalt;
@property (readonly, nonatomic) BRCGlobalProgress *globalProgress;
@property (readonly, nonatomic) BRCDeadlineScheduler *defaultScheduler;
@property (readonly, nonatomic) BRCApplyScheduler *applyScheduler;
@property (readonly, nonatomic) BRCContainerScheduler *containerScheduler;
@property (readonly, nonatomic) BRCFairScheduler *fairClientDBScheduler;
@property (readonly, nonatomic) BRCFSUploader *fsUploader;
@property (readonly, nonatomic) BRCFSDownloader *fsDownloader;
@property (readonly, nonatomic) BRCSyncUpScheduler *syncUpScheduler;
@property (readonly, nonatomic) BRCVolume *volume;
@property (readonly, nonatomic) BRCDownloadTrackers *downloadTrackers;
@property (readonly, nonatomic) BRCAnalyticsReporter *analyticsReporter;
@property (readonly, nonatomic) BRCItemTransmogrifier *itemTransmogrifier;
@property (readonly, nonatomic) BRCTimerScheduler *autoResumeSyncTimerScheduler;
@property (readonly, nonatomic) BRCPowerLogReporter *powerLogReporter;
@property (readonly, nonatomic) BRCNotificationManager *notificationManager;
@property (readonly, nonatomic) BRCStageRegistry *stageRegistry;
@property (readonly, nonatomic) BRCDiskSpaceReclaimer *diskReclaimer;
@property (readonly, nonatomic) BRCFileUnlinker *fileUnlinker;
@property (readonly, nonatomic) BRCUserNotification *userNotification;
@property (readonly, nonatomic) BRCRecentsEnumerator *recentsEnumerator;
@property (readonly, nonatomic) BOOL isCancelled;
@property (readonly, nonatomic) BOOL isGreedy;
@property (readonly, nonatomic) BRCAccountWaitOperation *accountWaitOperation;
@property (readonly, nonatomic) BRCAccountHandler *accountHandler;
@property (readonly, nonatomic) NSString *personaIdentifier;
@property (readonly, nonatomic) BOOL isDataSeparated;
@property (readonly, nonatomic) BOOL offline;
@property (nonatomic) unsigned long long ciconiaVersion;
@property (nonatomic) int ciconiaState;
@property (readonly, nonatomic) BOOL hasOptimizeStorageEnabled;
@property (readonly, nonatomic) BRCThrottle *appLibraryScanThrottle;
@property (readonly, nonatomic) BRCThrottle *appLibraryResetThrottle;
@property (readonly, nonatomic) BRCThrottle *sharedAppLibraryResetThrottle;
@property (readonly, nonatomic) BRCThrottle *appLibraryAliasRemovalThrottle;
@property (readonly, nonatomic) BRCThrottle *lostItemThrottle;
@property (readonly, nonatomic) BRCThrottle *operationFailureThrottle;
@property (readonly, nonatomic) BRCThrottle *syncClientZoneThrottle;
@property (readonly, nonatomic) BRCThrottle *syncClientZoneErrorThrottle;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *resetQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sessionForDumpingDatabasesAtURL:(id)a0;
+ (BOOL)_openConnection:(id)a0 databaseName:(id)a1 baseURL:(id)a2 readonly:(BOOL)a3 error:(id *)a4;
+ (id)sessionForCheckingInconsistencies;
+ (void)_registerLastBootIfNeeded:(id)a0 table:(id)a1 cleanTelemetryIfNeeded:(BOOL)a2 skipControlFiles:(BOOL)a3;
+ (id)sessionForDumpingDatabasesAtURL:(id)a0 with:(id)a1;
+ (BOOL)upgradeOfflineDB:(id)a0 serverTruth:(BOOL)a1 session:(id)a2 error:(id *)a3;
+ (id)userIdentityForName:(id)a0 db:(id)a1;
+ (id)nameComponentsForKey:(id)a0 db:(id)a1;
+ (BOOL)_checkIntegrity:(id)a0 serverTruth:(BOOL)a1 session:(id)a2 skipControlFiles:(BOOL)a3 error:(id *)a4;
+ (BOOL)_openConnection:(id)a0 serverTruth:(BOOL)a1 databaseName:(id)a2 baseURL:(id)a3 initialVersion:(unsigned int *)a4 lastCurrentVersion:(unsigned int *)a5 error:(id *)a6;
+ (id)sessionForSendingTelemetryAtURL:(id)a0;
+ (id)sessionForBackingUpDatabasesAtURL:(id)a0;
+ (id)_classesForClientState;
+ (BOOL)_validateDatabase:(id)a0 baseURL:(id)a1 session:(id)a2 serverTruth:(BOOL)a3 initialVersion:(unsigned int)a4 lastCurrentVersion:(unsigned int)a5 error:(id *)a6;
+ (id)userIdentityForKey:(id)a0 db:(id)a1;
+ (id)nameComponentsForName:(id)a0 db:(id)a1;
+ (BOOL)openAndValidateDatabase:(id)a0 serverTruth:(BOOL)a1 session:(id)a2 baseURL:(id)a3 skipControlFiles:(BOOL)a4 initialVersion:(unsigned int *)a5 lastCurrentVersion:(unsigned int *)a6 error:(id *)a7;
+ (BOOL)_registerStaticDBFunctions:(id)a0 error:(id *)a1;

- (void)resetThrottles;
- (BOOL)icloudAccountIsInCarry;
- (void)close;
- (void)enumerateSharedClientZones:(id /* block */)a0;
- (void)closeXPCClientsSync;
- (void)dbBecameCorruptedWithDescription:(id)a0 error:(id)a1;
- (id)_appLibrariesEnumerator:(id)a0;
- (id)_privateServerZonesEnumerator:(id)a0;
- (void)enumerateServerZones:(id /* block */)a0;
- (id)defaultSyncContext;
- (id)fallbackAppLibraryForClientZone:(id)a0 extension:(id)a1;
- (id)transferSyncContextForMangledID:(id)a0;
- (void)addMiscOperation:(id)a0;
- (void)closeOfflineSession;
- (BOOL)backupDatabaseToURL:(id)a0 error:(id *)a1;
- (BOOL)registerClient:(id)a0;
- (id)init;
- (id)dirPathForSyncedFolderType:(unsigned long long)a0;
- (void)destroyLocalDataWaitingForFilesToBeUnlinked:(BOOL)a0 completionBlock:(id /* block */)a1;
- (id)fsEventsMonitors;
- (BOOL)globalID:(id)a0 isStrictChildOfGlobalID:(id)a1;
- (id)_sharedServerZonesEnumerator:(id)a0;
- (void)dealloc;
- (void)enumerateSideFaultsUnderParent:(id)a0 db:(id)a1 block:(id /* block */)a2;
- (void)_cancelCiconiaRepeatQueue;
- (void)enumerateSupportedFolderTypes:(id /* block */)a0;
- (void)enumerateAppLibraries:(id /* block */)a0;
- (BOOL)saveClientZoneToDB:(id)a0;
- (void)getPreviousMigrationAttempts:(unsigned long long *)a0 failed:(unsigned long long *)a1 withVersion:(id)a2 comperator:(id)a3;
- (void)enumerateContainersWithDB:(id)a0 handler:(id /* block */)a1;
- (id)newServerItemFromPQLResultSet:(id)a0 error:(id *)a1;
- (id)itemIDByRowID:(unsigned long long)a0 db:(id)a1;
- (id)newSharedServerZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (BOOL)saveAppLibrary:(id)a0 toDB:(id)a1;
- (void)learnParticipantIdentitiesForShare:(id)a0 forceUpdate:(BOOL)a1;
- (void)disableDatabaseProfilingForDB:(id)a0;
- (BOOL)saveAppLibraryToDB:(id)a0;
- (void)_reportFailedQueueingMigration:(id)a0;
- (id)globalItemByDocumentID:(unsigned int)a0;
- (id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)a0 appLibraryExists:(BOOL *)a1;
- (id)serverAliasItemForSharedItem:(id)a0;
- (id)resolvedOpenRelpathForPath:(id)a0 mustExist:(BOOL)a1 errcode:(int *)a2;
- (id)appLibraryByRowID:(id)a0;
- (id)fsEventsMonitorForSyncedFolderType:(unsigned long long)a0;
- (id)accountStatisticsWithDB:(id)a0;
- (id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)a0;
- (void)_enumerateAppLibraryRowIDs:(id)a0 usingBlock:(id /* block */)a1;
- (unsigned long long)accountSize;
- (void)_setUserIdentity:(id)a0 forName:(id)a1;
- (void)setFSEventsMonitor:(id)a0 forSyncedFolderType:(unsigned long long)a1;
- (id)foldersNeedingTransmogrifyEnumerator;
- (id)getOrCreateSharedZones:(id)a0;
- (void)_clearNeedsUpgradeErrors:(id)a0 brVersion:(id)a1;
- (id)sharedClientZoneByMangledID:(id)a0;
- (id)_privateServerZoneByName:(id)a0 db:(id)a1;
- (BOOL)applySyncPolicy:(long long)a0 forSyncedFolderType:(unsigned long long)a1 isInitialCreation:(BOOL)a2 error:(id *)a3;
- (id)newAppLibraryFromPQLResultSet:(id)a0 error:(id *)a1;
- (BOOL)_deleteAppLibrary:(id)a0;
- (id)_sharedServerZoneByName:(id)a0 ownerName:(id)a1 db:(id)a2;
- (void)cloudDocsAppsListDidChange:(id)a0;
- (void)destroySharedClientZone:(id)a0;
- (id)serverZoneByRowID:(id)a0;
- (void)setOptimizeStorageEnabled:(BOOL)a0 synchronous:(BOOL)a1;
- (void)setRoot:(id)a0 forSyncedFolderType:(unsigned long long)a1;
- (void)_fixupItemsAtStartup;
- (BOOL)_getRootPathXattrValue:(id *)a0 forRootPath:(id)a1 error:(id *)a2;
- (BOOL)dumpFileCoordinationInfoToFileHandle:(id)a0 error:(id *)a1;
- (void)availableDiskSpaceDidChange;
- (id)globalItemByDocumentID:(unsigned int)a0 db:(id)a1;
- (BOOL)_shouldPrivateAppLibraryBeCZMMoved:(id)a0;
- (id)roots;
- (unsigned long long)lastCiconiaVersion:(id)a0;
- (void)_refreshCiconiaState;
- (void)computeTotalEvictableSizeWithAccessLowTimeDelta:(double)a0 medTimeDelta:(double)a1 highTimeDelta:(double)a2 db:(id)a3 reply:(id /* block */)a4;
- (void)_unlinkContainersWithPristineContainerIDs:(id)a0 containersActualRoot:(id)a1;
- (id)globalItemByFileID:(unsigned long long)a0;
- (id)_clientZonesMatchingSearchString:(id)a0;
- (id)_privateClientZoneByName:(id)a0 db:(id)a1;
- (void)userDefaultsChanged;
- (id)createUserKeyForOwnerName:(id)a0;
- (void)addOfflineAppLibrary:(id)a0;
- (BOOL)dumpItemsToHandle:(id)a0 itemType:(id)a1 tracker:(id)a2 error:(id *)a3;
- (id)itemByFileObjectID:(id)a0 db:(id)a1;
- (id)stagedItemsEnumerator;
- (BOOL)_openConnection:(id)a0 databaseName:(id)a1 readonly:(BOOL)a2 error:(id *)a3;
- (id)rootForSyncedFolderType:(unsigned long long)a0;
- (BOOL)openAndValidateDatabase:(id)a0 serverTruth:(BOOL)a1 initialVersion:(unsigned int *)a2 lastCurrentVersion:(unsigned int *)a3 error:(id *)a4;
- (id)clientZones;
- (id)newConnection:(id)a0;
- (void)dumpMiscOperationsToContext:(id)a0;
- (id)fetchAccountWaitOperationWithAccountReady:(BOOL *)a0;
- (BOOL)_dumpClientZoneStatus:(id)a0 toContext:(id)a1 error:(id *)a2;
- (id)userKeyForOwnerName:(id)a0 db:(id)a1;
- (BOOL)_setupBackupDetector:(struct backup_detector { unsigned long long x0; unsigned long long x1; unsigned long long x2; } *)a0 error:(id *)a1;
- (void)captureDBCorruptionInfoWithDescription:(id)a0 error:(id)a1;
- (void)_closeSharedPackageExtensionsPlist;
- (BOOL)initializeOfflineDatabaseWhileUpgrading:(BOOL)a0 loadClientState:(BOOL)a1 error:(id *)a2;
- (unsigned long long)availableDiskSpaceUsingCache:(BOOL)a0 schedulingPendingDiskItemsIfNeeded:(BOOL)a1;
- (void)_submitSessionOpenFailedTelemetryEventIfNeeded;
- (BOOL)dumpDatabaseToFileHandle:(id)a0 zoneName:(id)a1 includeAllItems:(BOOL)a2 tracker:(id)a3 error:(id *)a4;
- (id)_computePathOfItemWithName:(id)a0 appLibrary:(id)a1 parentClientZoneRowID:(id)a2 parentID:(id)a3 type:(char)a4 needsLocalName:(BOOL)a5 db:(id)a6;
- (id)_old_privateAppLibraryByZoneName:(id)a0 db:(id)a1;
- (id)_appLibrariesMatchingSearchString:(id)a0;
- (id)itemByRowID:(unsigned long long)a0 db:(id)a1;
- (void)unregisterClient:(id)a0;
- (id)singleClientZoneMatchingSearchString:(id)a0 error:(id *)a1;
- (id)itemIDByRowID:(unsigned long long)a0;
- (void)_refreshRootsCache;
- (id)fsWriter;
- (id)clientTruthWorkloop;
- (id)cachedCurrentUserRecordName;
- (void)resumeIfNecessary;
- (id)createFSEventsMonitorForSyncedFolderType:(unsigned long long)a0;
- (void)_mutexZonesLock;
- (BOOL)openDBWithError:(id *)a0;
- (void)closeDBs;
- (id)privateServerZoneByID:(id)a0;
- (BOOL)_setupConnection:(id)a0 readonly:(BOOL)a1 forChecker:(BOOL)a2 error:(id *)a3;
- (void)closeAndResetLocalStateWithDescription:(id)a0 error:(id)a1;
- (id)globalItemByFileID:(unsigned long long)a0 db:(id)a1;
- (id)serverAliasItemForSharedItem:(id)a0 db:(id)a1;
- (BOOL)initializeOfflineDatabaseWhileUpgrading:(BOOL)a0 error:(id *)a1;
- (void)removeDesktopSymlink:(BOOL)a0 andDocumentsSymlink:(BOOL)a1;
- (id)clientZoneByMangledID:(id)a0;
- (id)userNameForKey:(id)a0 db:(id)a1;
- (void)openForSendingTelemetry;
- (void)_markDBOpened;
- (id)_containerMetadataRecordsToSaveWithBatchSize:(unsigned long long)a0 requestID:(unsigned long long)a1;
- (BOOL)dumpItemsURLsToHandle:(id)a0 itemRowIDs:(id)a1 error:(id *)a2;
- (BOOL)shouldPathBeDesktopSymlink:(id)a0;
- (void)computeDocumentEvictableSizesForLowTime:(unsigned long long)a0 medTime:(unsigned long long)a1 highTime:(unsigned long long)a2 lowSize:(unsigned long long)a3 medSize:(unsigned long long)a4 highSize:(unsigned long long)a5 minRowID:(unsigned long long)a6 minSize:(unsigned long long)a7 batchSize:(unsigned long long)a8 injection:(id)a9 db:(id)a10 reply:(id /* block */)a11;
- (BOOL)_createAppLibraryRootsIfNeededWithError:(id *)a0;
- (int)_resolveDeviceID;
- (void)markAccountMigrationComplete;
- (BOOL)_recursivelyPrepareFolderForLogOutAtURL:(id)a0 pruneEmptyFolders:(BOOL)a1 pruneEmptyTopLevelFolder:(BOOL)a2 maxDepth:(unsigned long long)a3;
- (id)createDeviceKeyForNameInServerDB:(id)a0;
- (void)recomputeAppSyncBlockStateForPrivateClientZone:(id)a0;
- (BOOL)createServerZone:(id)a0;
- (BOOL)enumerateSharedToMeItemsWithBlock:(id /* block */)a0 error:(id *)a1;
- (id)_reserveRowIDForLibrary:(id)a0;
- (void)enumeratePrivateServerZones:(id /* block */)a0;
- (id)metadataSyncContextForMangledID:(id)a0;
- (id)_sharedClientZonesEnumerator:(id)a0;
- (id)clientZonesMatchingSearchString:(id)a0 error:(id *)a1;
- (BOOL)_stepBackupDetector:(struct backup_detector { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 newState:(struct backup_detector { unsigned long long x0; unsigned long long x1; unsigned long long x2; } *)a1 error:(id *)a2;
- (void)assertNotOnZoneMutex;
- (id)getMigrationAttemptOriginatorIDsForVersion:(unsigned long long)a0 withDB:(id)a1;
- (void)_createAccountSupportPathIfNeeded:(id)a0 protectParent:(BOOL)a1;
- (BOOL)_createAppLibraryRootIfNeededAtPath:(id)a0 error:(id *)a1;
- (id)_syncContextForContextIdentifier:(id)a0 isShared:(BOOL)a1 createIfNeeded:(BOOL)a2;
- (BOOL)_createAppLibrary:(id)a0;
- (void)_cleanupOldCiconiaLocations;
- (id)resolvedOpenRelpathForPath:(id)a0 mustExist:(BOOL)a1 allowResolveInPkg:(BOOL)a2 errcode:(int *)a3;
- (void)_validatePersona;
- (id)fsReader;
- (id)_privateClientZonesEnumerator:(id)a0;
- (void)removeRootForSyncedFolderType:(unsigned long long)a0;
- (BOOL)_isExpectedCiconiaError:(id)a0;
- (BOOL)_createClientZone:(id)a0;
- (void)_submitDBCorruptionTelemetryEventIfNeeded;
- (BOOL)createAppLibrariesIfNeededWithError:(id *)a0;
- (BOOL)shouldLastCiconiaRunConsideredAsSuccessForFPFSMigrationRollup;
- (id)_getFPFSMigrationStatus:(id)a0 withError:(id *)a1;
- (id)sideCarSyncContext;
- (void)_recreateSymlinkIfNecessaryForDocumentsPath:(id)a0 folderName:(id)a1 destinationPath:(id)a2;
- (void)fetchUserRecordIDWithCompletionHandler:(id /* block */)a0;
- (id)__getOrCreateClientZone:(id)a0 withServerZone:(id)a1 alreadyExists:(BOOL *)a2;
- (id)sharedMetadataSyncContext;
- (id)serverAliasItemForSharedItem:(id)a0 inZone:(id)a1;
- (id)serverTruthWorkloop;
- (void)_startWatcher;
- (void)captureSessionOpenFailedInfoWithError:(id)a0;
- (void).cxx_destruct;
- (BOOL)openWithError:(id *)a0 pushWorkloop:(id)a1;
- (void)_resolvePathInMobileDocsRoot:(id)a0 appLibrary:(id *)a1;
- (unsigned int)_recoverAndReportMissingJobs;
- (id)appLibraries;
- (void)removeFSEventsMonitorForSyncedFolderType:(unsigned long long)a0;
- (void)setupDatabase;
- (BOOL)enumerateItemsWithType:(id)a0 itemRowIDs:(id)a1 db:(id)a2 withBlock:(id /* block */)a3;
- (BOOL)_createSharedAppLibrary:(id)a0;
- (id)newConnectionWithLabel:(id)a0 readonly:(BOOL)a1 error:(id *)a2;
- (id)localAliasForSharedItem:(id)a0 inZone:(id)a1;
- (void)_registerBackgroundXPCActivities;
- (BOOL)dumpFPFSMigrationStatusToFileHandle:(id)a0 tracker:(id)a1 includeNonMigratedItems:(BOOL)a2 error:(id *)a3;
- (id)itemsWithSideCarInFlightDiffsEnumerator;
- (BOOL)shouldPerformPCSMigration;
- (id)appLibraryByMangledID:(id)a0;
- (BOOL)backupDatabaseToURL:(id)a0 includeServer:(BOOL)a1 doNotObfuscate:(BOOL)a2 error:(id *)a3;
- (void)_cloudDocsAppsListDidChange:(id)a0;
- (void)saveMigrationAttemptForReport:(id)a0 uuid:(id)a1;
- (void)enumeratePrivateClientZones:(id /* block */)a0;
- (void)getPreviousMigrationAttempts:(unsigned long long *)a0 failed:(unsigned long long *)a1 forVersion:(id)a2;
- (void)enumerateFileTypesWithFilterBlock:(id /* block */)a0 enumerationBlock:(id /* block */)a1;
- (BOOL)dumpStatusToFileHandle:(id)a0 zoneName:(id)a1 tracker:(id)a2 error:(id *)a3;
- (id)deviceKeyForName:(id)a0 db:(id)a1;
- (BOOL)saveServerZoneToDB:(id)a0;
- (id)serverAliasItemForSharedItem:(id)a0 inZone:(id)a1 db:(id)a2;
- (void)preventDatabaseFromBeingReused;
- (id)getOrCreateSharedZones:(id)a0 shareAcceptOp:(id)a1;
- (id)appLibraryByID:(id)a0;
- (void)_loadClientZonesFromDisk;
- (void)_dumpClientZoneBlockedState:(id)a0 toContext:(id)a1;
- (BOOL)shouldStartCiconiaBasedOnItemsCountWithAcountHash:(unsigned long long)a0;
- (void)_destroyLocalDataWaitingForFilesToBeUnlinked:(BOOL)a0 pristineContainerIDs:(id)a1 completionBlock:(id /* block */)a2;
- (void)invalidateAccountStatus;
- (void)stopDBWatcher;
- (void)_setupThrottles;
- (unsigned long long)syncedFolderTypeForURL:(id)a0;
- (BOOL)deleteServerZone:(id)a0;
- (id)singleAppLibraryMatchingSearchString:(id)a0 error:(id *)a1;
- (id)__getOrCreateAppLibrary:(id)a0 rowID:(id)a1 createOnDisk:(BOOL)a2 alreadyExists:(BOOL *)a3 withClientZone:(id)a4 createCZMMoved:(BOOL)a5;
- (BOOL)_deleteClientZone:(id)a0;
- (BOOL)initializeOfflineDatabaseWhileUpgrading:(BOOL)a0 loadClientState:(BOOL)a1 forDBDump:(BOOL)a2 error:(id *)a3;
- (void)addOfflineServerZone:(id)a0;
- (void)__registerServerZone:(id)a0 clientZone:(id)a1 appLibrary:(id)a2 isShared:(BOOL)a3;
- (id)appLibrariesMatchingSearchString:(id)a0 error:(id *)a1;
- (BOOL)saveServerZone:(id)a0 toDB:(id)a1;
- (BOOL)disableSyncforSyncedFolderType:(unsigned long long)a0 isInitialCreation:(BOOL)a1 error:(id *)a2;
- (void)getPreviousMigrationAttempts:(unsigned long long *)a0 failed:(unsigned long long *)a1 beforeVersion:(id)a2;
- (void)setOptimizeStorageEnabled:(BOOL)a0 forKey:(id)a1 synchronous:(BOOL)a2;
- (id)newPrivateServerZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (BOOL)hasRootForSyncedFolderType:(unsigned long long)a0;
- (id)bouncedItemsEnumerator;
- (BOOL)_createPrivateAppLibrary:(id)a0;
- (void)enumerateClientZones:(id /* block */)a0;
- (BOOL)PCSMigrationComplete;
- (id)newSharedClientZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (id)newPrivateClientZoneFromPQLResultSet:(id)a0 error:(id *)a1;
- (void)_setupCiconiaRepeatQueue;
- (BOOL)_finishServerTruthConnectionSetupWithError:(id *)a0;
- (id)_unloadClientZones;
- (id)privateClientZoneByID:(id)a0;
- (void)setNeedsPCSMigration:(BOOL)a0;
- (id)newLocalItemFromPQLResultSet:(id)a0 db:(id)a1 error:(id *)a2;
- (id)getMiscOperations;
- (void)_pcsChainAllItemsWithActivity:(id)a0;
- (id)cloudDocsClientZone;
- (void)_registerObfuscationFunction:(id)a0;
- (void)destroyLocalDataWithPristineContainerIDs:(id)a0;
- (id)_appLibraryEnumeratorForZoneRowID:(id)a0 db:(id)a1;
- (BOOL)createAppLibraryOnDisk:(id)a0 createdRoot:(BOOL *)a1 createdDocuments:(BOOL *)a2 rootFileID:(unsigned long long *)a3;
- (void)dumpXPCClientsToContext:(id)a0;
- (id)allSyncContexts;
- (void)_loadClientStateFromDB:(id)a0;
- (id)itemByItemGlobalID:(id)a0 db:(id)a1;
- (id)serverZoneByName:(id)a0 ownerName:(id)a1;
- (void)_enumerateAccountHandlerSupportedFolderTypes:(id /* block */)a0;
- (id)sharedServerZoneRowIDsByOwnerNamePrefix:(id)a0;
- (void)startDownloadsForGreediness;
- (id)initWithACAccountID:(id)a0 dbAccountDSID:(id)a1 salt:(id)a2 accountHandler:(id)a3;
- (void)scheduleZoneMovesToCloudDocs:(id)a0;
- (void)performBlock:(id /* block */)a0 whileRemovingPrivateClientZone:(id)a1;
- (id)cachedCurrentUserRecordNameIfExists;
- (id)transferSyncContextForMangledID:(id)a0 createIfNeeded:(BOOL)a1;
- (id)itemByItemGlobalID:(id)a0;
- (void)_startCiconiaIfRelevant;
- (id)fixObfuscatedMangledID:(id)a0;
- (BOOL)_dumpClientZone:(id)a0 toContext:(id)a1 includeAllItems:(BOOL)a2 error:(id *)a3;
- (BOOL)_finishClientTruthConnectionSetupWithError:(id *)a0;
- (id)itemsNeedingIndexingEnumeratorFromNotifRank:(unsigned long long)a0 batchSize:(unsigned long long)a1 db:(id)a2;
- (id)itemByFileObjectID:(id)a0;
- (unsigned int)_recoverAndReportBoosting;
- (void)enableDatabaseProfilingForDB:(id)a0;
- (id)_privateClientZoneByID:(id)a0 db:(id)a1;
- (void)_setupSharedPackageExtensionsPlist;
- (id)userIdentityForKey:(id)a0;
- (void)addOfflineClientZone:(id)a0;
- (BOOL)hasFSEventsMonitorForSyncedFolderType:(unsigned long long)a0;
- (BOOL)_registerDynamicDBFunctions:(id)a0 error:(id *)a1;
- (id)getFPFSNonMigratedItemsWithDB:(id)a0;
- (id)__getOrCreateServerZone:(id)a0;
- (id)readOnlyWorkloop;
- (void)enumerateItemsWithShareIDUnderParent:(id)a0 block:(id /* block */)a1;
- (void)openForDumping;
- (id)createRootForSyncedFolderType:(unsigned long long)a0;
- (BOOL)enableSyncforSyncedFolderType:(unsigned long long)a0 isInitialCreation:(BOOL)a1 error:(id *)a2;
- (unsigned long long)availableDiskSpaceUsingCache:(BOOL)a0;
- (id)_getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)a0 creationFlags:(unsigned int *)a1;
- (id)getOrReserveLibraryRowIDForLibrary:(id)a0;
- (id)fsEventsMonitorForAppLibraryID:(id)a0;
- (void)recreateDesktopSymlinksIfNecessary;
- (unsigned long long)computeTotalLiveDocumentSizeWithDb:(id)a0;
- (id)sharedServerZoneByMangledID:(id)a0;
- (id)itemByRowID:(unsigned long long)a0;
- (id)zoneHealthSyncContext;
- (void)_unlinkContainersWithRootURL:(id)a0;
- (void)destroyLocalData;
- (id)serverZoneByMangledID:(id)a0;
- (int)resolvePathAdditionalMetadata:(id)a0 appLibrary:(id *)a1;

@end

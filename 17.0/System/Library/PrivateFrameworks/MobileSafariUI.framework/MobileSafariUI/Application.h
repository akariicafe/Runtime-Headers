@class HistoryController, NSMutableSet, NSMutableArray, WBSUnifiedBarAnalyticsRecorder, BrowserWindowController, WBProfile, BrowserController, CKContextClient, WBSForYouRecentParsecResultsManager, SystemNoteTakingController, LAContext, WBSPhishingClassifierController, WBSAllowedLegacyTLSHostManager, ReadingListLeadImageCache, UIScene, HighlightManager, WebBookmarkCollection, WBDatabaseLockAcquisitor, WBSCyclerConnectionManager, WBSFormAutoFillCorrectionsHistoryObserver, NSArray, AutomationController, WKProcessPool, NSMutableDictionary, WBTabGroupManager, WBSOfflineSearchSuggestionsModelUpdateManager, NSString, ForYouRecommendationMediator, SFWebExtensionsController, NSTimer, SBSAssertion, NSSet, BookmarksDatabaseHealthReporter, WBSBrowserTabCompletionProvider, SafariSettingsSyncEngine;
@protocol WBSPhishingClassifier, WBSUnifiedBarAnalyticsProviding, WBSCloudHistoryServiceProtocol, BSInvalidatable, NSObject;

@interface Application : SFBrowserApplication <PageLoadTestRunnerDelegate, TabSnapshotCacheStressTestRunnerDelegate, ASSavedAccountContextProviding, MCProfileConnectionObserver, SFBrowserApplicationProxy, SFUIApplicationModifierFlagsProviding, UIApplicationDelegatePrivate, WBDatabaseLockAcquisitorDelegate, WBSBrowserTabCompletionProviderSource, _SFDownloadDelegate, WBTabGroupManagerObserver, CompletionListVendorForHistoryServiceDataSource, SFContentBlockerManagerDelegate, WBSUnifiedBarAnalyticsRecorderDelegate, SFWebExtensionControllerProfileDelegate, BKSMousePointerDeviceObserver, WBSSystemNoteTakingControllerDelegate, SFWebExtensionsControllerDelegate, CSSearchableIndexDelegate, _SFNavigationIntentHandling> {
    BOOL _isReadingDefaults;
    BOOL _shouldReadDefaultsOnResume;
    BOOL _isRunningShowBookmarksTest;
    BOOL _startedBookmarksTest;
    BOOL _isRunningCanvasTest;
    BOOL _willEnterSuspendedState;
    NSMutableSet *_pointerDevices;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _pointerDeviceLock;
    id<BSInvalidatable> _pointerDeviceObserverToken;
    NSMutableArray *_activeDownloads;
    unsigned long long _bookmarksDatabaseBackgroundTaskIdentifier;
    WBDatabaseLockAcquisitor *_bookmarksDatabaseBackgroundTaskLockAcquisitor;
    BookmarksDatabaseHealthReporter *_bookmarksDatabaseHealthReporter;
    id<WBSCloudHistoryServiceProtocol> _cloudHistory;
    WBSCyclerConnectionManager *_cyclerConnectionManager;
    WBTabGroupManager *_ephemeralTabGroupManager;
    BOOL _finishedLaunching;
    WBSForYouRecentParsecResultsManager *_forYouRecentParsecResultsManager;
    ForYouRecommendationMediator *_forYouRecommendationMediator;
    WBSFormAutoFillCorrectionsHistoryObserver *_formAutoFillCorrectionsHistoryObserver;
    ReadingListLeadImageCache *_readingListImageCache;
    BOOL _resigningActive;
    WBSBrowserTabCompletionProvider *_tabCompletionProvider;
    WBTabGroupManager *_tabGroupManager;
    SBSAssertion *_wallpaperSuspensionAssertion;
    NSString *_openURLOriginBundleIdentifier;
    HighlightManager *_highlightManager;
    WBSPhishingClassifierController *_phishingClassifier;
    HistoryController *_historyController;
    NSMutableSet *_pendingFrequentlyVisitedSites;
    NSMutableDictionary *_processPools;
    WBSAllowedLegacyTLSHostManager *_cachedLegacyTLSHostManager;
    SystemNoteTakingController *_systemNoteTakingController;
    WBSUnifiedBarAnalyticsRecorder *_unifiedBarAnalyticsRecorder;
    id<NSObject> _developerPreferencesDidChangeNotificationToken;
    NSTimer *_lockPrivateBrowsingInBackgroundTimer;
    BOOL _shouldPrivateBrowsingBeLockedIfPossible;
    LAContext *_lockedPrivateBrowsingAuthenticationContext;
    NSMutableArray *_lockedPrivateBrowsingAuthenticationCompletionHandlers;
    NSMutableDictionary *_profileServerIDToWebExtensionsControllers;
    NSMutableDictionary *_profileServerIDToContentBlockerManagers;
    WBSOfflineSearchSuggestionsModelUpdateManager *_offlineSearchSuggestionsModelUpdateManager;
    BOOL _readingListWidgetNeedsReloading;
}

@property (class, readonly, nonatomic) CKContextClient *contextClient;
@property (class, copy, nonatomic) id /* block */ browserControllerUIDelegateProvider;

@property (readonly, nonatomic) BOOL isRunningPPT;
@property (readonly, nonatomic) BOOL shouldRestoreStateForPPT;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL privateBrowsingRequiresAuthentication;
@property (copy, nonatomic) NSString *focusProfileIdentifier;
@property (readonly, nonatomic) BrowserWindowController *browserWindowController;
@property (readonly, nonatomic) NSArray *browserControllers;
@property (readonly, nonatomic) BrowserController *primaryBrowserController;
@property (readonly, nonatomic) BOOL isCloudHistoryEnabled;
@property (readonly, nonatomic) AutomationController *automationController;
@property (readonly, nonatomic) ReadingListLeadImageCache *readingListLeadImageCache;
@property (readonly, nonatomic) BOOL usesDefaultBrowsingModeInAllWindows;
@property (readonly, nonatomic) BOOL usesPrivateBrowsingModeInAnyWindow;
@property (readonly, nonatomic, getter=isPrivateBrowsingLocked) BOOL privateBrowsingLocked;
@property (readonly, nonatomic) unsigned long long maximumTabCount;
@property (weak, nonatomic) ForYouRecommendationMediator *existingForYouRecommendationMediator;
@property (readonly, nonatomic) WBSForYouRecentParsecResultsManager *forYouRecentParsecResultsManager;
@property (readonly, nonatomic) SafariSettingsSyncEngine *settingsSyncEngine;
@property (readonly, nonatomic) HighlightManager *highlightManager;
@property (readonly, nonatomic) id<WBSPhishingClassifier> phishingClassifier;
@property (readonly, nonatomic) HistoryController *historyController;
@property (readonly, copy, nonatomic) NSSet *historiesForProfiles;
@property (readonly, nonatomic) WBSAllowedLegacyTLSHostManager *legacyTLSHostManager;
@property (readonly, nonatomic) SystemNoteTakingController *systemNoteTakingController;
@property (readonly, nonatomic) WBTabGroupManager *tabGroupManager;
@property (readonly, nonatomic) WBTabGroupManager *ephemeralTabGroupManager;
@property (readonly, nonatomic) BOOL hasPointerDevice;
@property (readonly, copy, nonatomic) WBProfile *focusProfile;
@property (nonatomic) BOOL needsFocusProfileUpdate;
@property (readonly, copy, nonatomic) NSString *focusedTabGroupUUIDString;
@property (readonly, nonatomic) BOOL prefersSingleWindow;
@property (nonatomic) BOOL needsFocusedTabGroupUpdate;
@property (readonly, nonatomic) BOOL usesLoweredSearchBar;
@property (readonly, nonatomic) WKProcessPool *defaultProcessPool;
@property (readonly, nonatomic) NSArray *allProcessPools;
@property (readonly, nonatomic) SFWebExtensionsController *defaultWebExtensionsController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIScene *currentScene;
@property (readonly, nonatomic) WebBookmarkCollection *bookmarkCollection;
@property (readonly, copy, nonatomic) NSArray *tabEntitiesForAutomation;
@property (readonly, nonatomic) long long currentKeyboardModifierFlags;
@property (readonly, nonatomic) id<WBSUnifiedBarAnalyticsProviding> unifiedBarAnalyticsProvider;

+ (void)initialize;
+ (id)sharedApplication;
+ (void)commandLineTestOption:(int)a0 arg:(const char *)a1;
+ (void)postTestNotificationName:(id)a0 object:(id)a1;
+ (void)postTestNotificationName:(id)a0 object:(id)a1 userInfo:(id)a2;
+ (id)sharedTestRunner;
+ (unsigned long long)systemMemorySize;

- (void)profileConnectionDidReceiveRestrictionChangedNotification:(id)a0 userInfo:(id)a1;
- (void)searchableIndex:(id)a0 reindexAllSearchableItemsWithAcknowledgementHandler:(id /* block */)a1;
- (BOOL)runTest:(id)a0 options:(id)a1;
- (id)proxy;
- (void)dispatchNavigationIntent:(id)a0;
- (void)downloadDidStart:(id)a0;
- (void)searchableIndex:(id)a0 reindexSearchableItemsWithIdentifiers:(id)a1 acknowledgementHandler:(id /* block */)a2;
- (void)handleNavigationIntent:(id)a0 completion:(id /* block */)a1;
- (void)downloadDidFinish:(id)a0;
- (void)_applicationWillEnterForeground:(id)a0;
- (void)downloadShouldContinueAfterReceivingResponse:(id)a0 decisionHandler:(id /* block */)a1;
- (void)_applicationWillResignActive:(id)a0;
- (void)downloadDidFail:(id)a0;
- (void)_applicationDidBecomeActive:(id)a0;
- (void)pressesEnded:(id)a0 withEvent:(id)a1;
- (void)_applicationDidEnterBackground:(id)a0;
- (BOOL)canAddNewTabForPrivateBrowsing:(BOOL)a0;
- (void)_historyWasCleared:(id)a0;
- (void)mousePointerDevicesDidConnect:(id)a0;
- (void)pressesBegan:(id)a0 withEvent:(id)a1;
- (void)pressesChanged:(id)a0 withEvent:(id)a1;
- (void)buildMenuWithBuilder:(id)a0;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)a0 userInfo:(id)a1;
- (void)tabGroupManager:(id)a0 didRemoveProfileWithIdentifier:(id)a1;
- (void)_handleHIDEvent:(struct __IOHIDEvent { } *)a0;
- (void)userDefaultsDidChange:(id)a0;
- (void)tabGroupManagerDidUpdateProfiles:(id)a0;
- (void)didReceiveMemoryWarning;
- (BOOL)application:(id)a0 didFinishLaunchingWithOptions:(id)a1;
- (void)clearCachedTabCompletionData;
- (void)downloadDidReceiveResponse:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void).cxx_destruct;
- (void)updateTabCount;
- (id)_extendLaunchTest;
- (void)applicationWillSuspend;
- (void)saveChangesToCloudHistoryStore;
- (void)applicationWillTerminate;
- (void)mousePointerDevicesDidDisconnect:(id)a0;
- (void)pressesCancelled:(id)a0 withEvent:(id)a1;
- (void)_readDefaults;
- (void)application:(id)a0 didDiscardSceneSessions:(id)a1;
- (void)handleKeyUIEvent:(id)a0;
- (id)sfWebExtensionsControllersContentBlockerManagersForAllProfiles:(id)a0;
- (void)sfWebExtensionsControllerDidChangeExtensionForPermissionBanner:(id)a0;
- (id)allContentBlockerManagers;
- (id)contentBlockerManagerForProfileServerID:(id)a0;
- (void)enumerateContentBlockerManagersUsingBlock:(id /* block */)a0;
- (BOOL)sfWebExtensionsController:(id)a0 canSendMessageFromWebView:(id)a1;
- (void)sfWebExtensionsController:(id)a0 captureVisibleTab:(id)a1 format:(id)a2 quality:(double)a3 completionHandler:(id /* block */)a4;
- (void)sfWebExtensionsController:(id)a0 createNewTabInWindow:(id)a1 tabIndex:(id)a2 url:(id)a3 makeActive:(BOOL)a4 completionHandler:(id /* block */)a5;
- (id)sfWebExtensionsController:(id)a0 duplicateTab:(id)a1;
- (id)sfWebExtensionsController:(id)a0 forProfileServerID:(id)a1;
- (void)sfWebExtensionsController:(id)a0 relateParentTab:(id)a1 toTab:(id)a2;
- (id)sfWebExtensionsController:(id)a0 reusableTabWithID:(double)a1;
- (void)sfWebExtensionsController:(id)a0 showPopupForExtension:(id)a1 inWindow:(id)a2 completionHandler:(id /* block */)a3;
- (id)sfWebExtensionsController:(id)a0 tabForWebView:(id)a1;
- (id)sfWebExtensionsController:(id)a0 tabWithID:(double)a1;
- (id)sfWebExtensionsController:(id)a0 windowForWebView:(id)a1 extension:(id)a2;
- (id)sfWebExtensionsController:(id)a0 windowWithID:(double)a1;
- (id)sfWebExtensionsControllerAllProfileExtensionsControllers:(id)a0;
- (id)sfWebExtensionsControllerAllWindows:(id)a0;
- (void)sfWebExtensionsControllerCompileContentBlocker:(id)a0 identifier:(id)a1 rules:(id)a2 completionHandler:(id /* block */)a3;
- (void)sfWebExtensionsControllerContentBlockerListDidChange:(id)a0;
- (id)sfWebExtensionsControllerContentBlockerManager:(id)a0 forProfileServerID:(id)a1;
- (id)sfWebExtensionsControllerDomainForDefaultSearchProvider:(id)a0;
- (id)sfWebExtensionsControllerLastFocusedWindow:(id)a0;
- (id)sfWebExtensionsControllerTabGroupManager:(id)a0;
- (id)sfWebExtensionsControllersForAllProfiles:(id)a0;
- (id)webExtensionsControllerForProfileServerID:(id)a0;
- (void)reloadContentBlockers;
- (id)sfWebExtensionsController:(id)a0 navigationIntentUUIDForWindow:(id)a1;
- (id)selectedTabInfoForBrowserTabCompletionProvider:(id)a0;
- (id)tabInfosForBrowserTabCompletionProvider:(id)a0;
- (void)extensionBaseURIMapChangedForExtensionsController:(id)a0;
- (void)extensionsController:(id)a0 closeOpenExtensionTabsInPrivateBrowsingWithBaseURI:(id)a1;
- (void)extensionsController:(id)a0 closeOpenExtensionTabsWithBaseURI:(id)a1;
- (BOOL)isNoteTakingControllerSupportedInPrivateBrowsing:(id)a0;
- (void)noteTakingController:(id)a0 addHighlightForUserActivity:(id)a1 completion:(id /* block */)a2;
- (void)notifyAddedLinkPreviewMetadata:(id)a0 toUserActivity:(id)a1 webView:(id)a2;
- (void)tabGroupManager:(id)a0 didInsertProfileWithIdentifier:(id)a1;
- (void)reloadReadingListWidgetIfNeeded;
- (id)sceneForTabGroupWithUUIDString:(id)a0;
- (void)_loadLargeForm:(id /* block */)a0;
- (void)_runSidebarTest;
- (void)_updateCloudFeatureAvailability;
- (void)setReadingListWidgetNeedsReload;
- (BOOL)startTabBarTest;
- (void)_addDefaultsObserver;
- (id)_allTabsWithExtensionContentLoadedForBrowserController:(id)a0 extensionHost:(id)a1;
- (void)_appleKeyboardsChanged:(id)a0;
- (id)_browserControllerForApplicationTesting;
- (id)_browserControllerForExternalNavigation;
- (id)_browserControllerForTabWithUUID:(id)a0;
- (void)_clearInvalidCertificateBypassesOlderThanOneWeek;
- (void)_connectToCyclerIfNecessary;
- (void)_createExtensionControllersIfNeededForProfileServerID:(id)a0;
- (void)_deleteExtensionControllersForProfileServerID:(id)a0;
- (void)_determineIfAuthenticationIsAvailableForLockedPrivateBrowsingWithCompletionHandler:(id /* block */)a0;
- (void)_didEnableCustomizationSync;
- (void)_doSearchTestOnCVC:(id)a0 WithTestStrings:(id)a1 andDispatchGroup:(id)a2;
- (void)_downloadDidStartNotification:(id)a0;
- (void)_downloadDidStopNotification:(id)a0;
- (void)_export30DaysWorthOfHistoryAfterUpgrade;
- (void)_frequentlyVisitedSitesWereChanged:(id)a0;
- (id)_generateMemoryFootprintResults:(id)a0;
- (void)_getBookmarksDataClassEnabledWithCompletionHandler:(id /* block */)a0;
- (BOOL)_hasLockablePrivateTabsOpenInAnyWindow;
- (BOOL)_hasPrivateBrowserControllerActiveInAnyWindow;
- (void)_historyHostnamesWereRemoved:(id)a0;
- (void)_initializeProcessPoolForProfileIdentifier:(id)a0;
- (void)_loadAlternateHTMLString:(id)a0 completionHandler:(id /* block */)a1;
- (void)_loadExtensionsInProfile:(id)a0;
- (void)_loadTabsForTesting:(unsigned long long)a0 presentTabView:(BOOL)a1 completion:(id /* block */)a2;
- (void)_managedProfileConfigurationDidUpdate;
- (unsigned long long)_maximumTabCount;
- (BOOL)_mediaIsPlayingInPrivateBrowsing;
- (unsigned long long)_numberOfTabsForPrivateBrowsing:(BOOL)a0;
- (id)_numberOption:(id)a0;
- (void)_observeNotificationOnce:(id)a0 handler:(id /* block */)a1;
- (void)_performBookmarksDatabaseTasksInBackground;
- (void)_pollCanvasTest:(id)a0;
- (void)_populateInMemoryBookmarksDBForTestNamed:(id)a0;
- (void)_preparePageLoadTestControllerParameters;
- (void)_prepareTabViewBringUpTest;
- (void)_prepareTabViewCloseTest;
- (void)_prepareTabViewOpenTest;
- (void)_prepareTabViewRotationTest;
- (void)_prepareTabViewScrollTest;
- (void)_prepareTabViewSelectTest;
- (void)_prewarmAutomationControllerIfEnabled;
- (void)_profileFocusConfigurationChanged;
- (void)_pruneExpiredScenes;
- (void)_readFocusConfigurationKeys;
- (void)_reloadSearchEngines;
- (void)_reportBookmarksDatabaseHealth;
- (void)_reportLaunchAnalyticsSoon;
- (void)_resetCloudHistoryAccountIfNeeded;
- (BOOL)_resetHistoryWithCompressedDatabaseAtURL:(id)a0 error:(id *)a1;
- (void)_runFormTypingTextWithSetupScript:(id)a0;
- (void)_runTabBarSwitchTabTest;
- (void)_runTabOverviewOpenNewTabTest;
- (void)_runTabOverviewPresentingAndDismissalTest;
- (void)_runTabOverviewScrollPerfTest;
- (void)_saveBrowserState;
- (void)_scrollContentWithTestName:(id)a0 scrollingBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 amplitude:(double)a2 completionHandler:(id /* block */)a3;
- (id)_scrollViewForTestNamed:(id)a0;
- (BOOL)_shouldLockPrivateBrowsing;
- (void)_showExtensionPermissionBannerIfNecessary;
- (void)_showSearchEngineAlertIfNeeded;
- (id)_sortedBrowserControllers;
- (BOOL)_startResizeTestWithName:(id)a0;
- (void)_suspendOrResumeWallpaperAnimationIfNeeded;
- (void)_switchToBookmarksCollectionForTestNamed:(id)a0;
- (id)_syntheticHTMLString;
- (id)_tabCompletionProvider;
- (void)_tabGroupFocusConfigurationChanged;
- (void)_typeTextInForm:(id)a0 completionHandler:(id /* block */)a1;
- (void)_updateKeyboardCorrectionLearningAllowed;
- (void)_updateProfileLocalIdentifiersToServerIdentifiersMapInCloudHistory;
- (void)_webBookmarksDidReload;
- (id)allWebExtensionsControllers;
- (void)authenticateToUnlockPrivateBrowsingWithCompletionHandler:(id /* block */)a0;
- (id)browserControllerForCompletionListVendorForHistoryService:(id)a0;
- (void)checkExtendedLaunchPageLoad:(id)a0 forTabDocument:(id)a1;
- (id)createRecommendationMediatorOrReuseExistingOneIfPossible;
- (void)databaseLockAcquisitor:(id)a0 acquiredLock:(BOOL)a1;
- (BOOL)didStartBookmarksTest;
- (void)failedPurpleTestWithError:(id)a0;
- (void)finishedBookmarksTest;
- (void)finishedCanvasTestWithURL:(id)a0 forTabDocument:(id)a1;
- (void)finishedPurpleTest:(id)a0;
- (BOOL)isRunningCanvasTest;
- (BOOL)isRunningShowBookmarksTest;
- (void)loadBlankPageforKeyboardTests;
- (void)loadExtensionsInProfileIfNecessary:(id)a0;
- (void)loadTabsForTesting:(unsigned long long)a0 presentTabView:(BOOL)a1;
- (void)loadTabsForTesting:(unsigned long long)a0 presentTabView:(BOOL)a1 completion:(id /* block */)a2;
- (void)lockPrivateBrowsing;
- (void)notifyExtensionControllersThatSettingsWereUpdatedExternallyFromSettingsApp;
- (BOOL)overrideBrowserStateForTestNamed:(id)a0 browserController:(id)a1;
- (void)pageLoadTestRunnerFinished:(id)a0;
- (BOOL)prepareBookmarksTest;
- (void)prepareTabViewBringUpTest;
- (void)prepareTabViewCloseTest;
- (void)prepareTabViewOpenTest;
- (void)prepareTabViewRotationTest;
- (void)prepareTabViewScrollTest;
- (void)prepareTabViewSelectTest;
- (void)prewarmAndRemoveOrphanedProfileDataStores;
- (id)processPoolForProfileIdentifier:(id)a0;
- (void)runBookmarksViewTest;
- (void)runGeneratePasswordTest;
- (void)runLargeFormFocusTest;
- (void)runLargeFormTypingTest;
- (BOOL)runMemoryOrIOTestWithType:(unsigned long long)a0;
- (void)runTabOverviewTest;
- (void)runTabSnapshotCacheStressTest;
- (id)savedAccountContextForWebPageID:(unsigned long long)a0;
- (void)sceneForTabWithUUID:(id)a0 completionHandler:(id /* block */)a1;
- (id)searchParametersWithCFEnabled:(BOOL)a0;
- (void)setObject:(id)a0 forInjectedBundleParameter:(id)a1;
- (void)startBookmarksTest;
- (BOOL)startCanvasTest:(id)a0;
- (void)startCommandLineTest;
- (BOOL)startHistoryLoadTest;
- (BOOL)startHistoryTest;
- (void)startKeyboardBringupTest;
- (void)startKeyboardRotationTest;
- (void)startKeyboardSplitAndMergeTest;
- (void)startSearchPerformanceDetailedTestWithCF:(BOOL)a0;
- (void)startSearchPerformanceTest;
- (void)startSearchPerformanceTestWithTestStrings:(id)a0;
- (void)startSearchPerformanceTestWithTestStrings:(id)a0 perQuery:(BOOL)a1 withCF:(BOOL)a2;
- (void)startSearchPerformanceUnifiedFieldKeyTimeTest;
- (BOOL)startSidebarTest;
- (void)startTabViewBringUpTest;
- (void)startTabViewCloseTest;
- (void)startTabViewOpenTest;
- (void)startTabViewRotationTest;
- (void)startTabViewScrollTest;
- (void)startTabViewSelectTest;
- (void)startedPurpleTest;
- (id)tabCollectionConfiguration;
- (void)tabEntitiesMatchingQuery:(id)a0 completionHandler:(id /* block */)a1;
- (id)tabEntityWithUUID:(id)a0;
- (void)tabSnapshotCacheStressTestRunnerDidFinish:(id)a0;
- (void)unlockPrivateBrowsing;
- (void)updateBiometricAuthenticationAndPasscodeAvailabilityForLockedPrivateBrowsing;
- (void)updateLockedPrivateBrowsingState;
- (void)updateShouldLockPrivateBrowsingWithTimerIfNecessary;

@end

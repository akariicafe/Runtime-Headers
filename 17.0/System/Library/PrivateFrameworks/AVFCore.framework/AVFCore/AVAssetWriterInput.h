@class AVAssetWriterInputInternal, NSString, NSDictionary, AVAssetWriterInputHelper, AVWeakReference, AVOutputSettings, NSArray;

@interface AVAssetWriterInput : NSObject <AVWeakObservable, AVKeyPathDependencyHost> {
    AVAssetWriterInputInternal *_internal;
}

@property (readonly) long long numberOfAppendFailures;
@property (readonly, getter=_markAsFinishedCalled) BOOL markAsFinishedCalled;
@property (retain, nonatomic, getter=_helper, setter=_setHelper:) AVAssetWriterInputHelper *helper;
@property (copy, nonatomic, getter=_sourcePixelBufferAttributes, setter=_setSourcePixelBufferAttributes:) NSDictionary *sourcePixelBufferAttributes;
@property (readonly, nonatomic, getter=_pixelBufferPool) struct __CVPixelBufferPool { } *pixelBufferPool;
@property (readonly, nonatomic, getter=_outputSettingsObject) AVOutputSettings *outputSettingsObject;
@property (readonly, nonatomic, getter=_status) long long status;
@property (readonly, nonatomic, getter=_isAttachedToAdaptor) BOOL attachedToAdaptor;
@property (retain, nonatomic, getter=_weakReferenceToAssetWriter, setter=_setWeakReferenceToAssetWriter:) AVWeakReference *weakReferenceToAssetWriter;
@property (nonatomic, getter=_alternateGroupID, setter=_setAlternateGroupID:) short alternateGroupID;
@property (nonatomic, getter=_provisionalAlternateGroupID, setter=_setProvisionalAlternateGroupID:) short provisionalAlternateGroupID;
@property (readonly, nonatomic, getter=_trackReferences) NSDictionary *trackReferences;
@property (readonly, nonatomic) NSString *mediaType;
@property (readonly, nonatomic) NSDictionary *outputSettings;
@property (readonly, nonatomic) struct opaqueCMFormatDescription { } *sourceFormatHint;
@property (copy, nonatomic) NSArray *metadata;
@property (readonly, nonatomic, getter=isReadyForMoreMediaData) BOOL readyForMoreMediaData;
@property (nonatomic) BOOL expectsMediaDataInRealTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)assetWriterInputWithMediaType:(id)a0 outputSettings:(id)a1;
+ (id)assetWriterInputWithMediaType:(id)a0 outputSettings:(id)a1 sourceFormatHint:(struct opaqueCMFormatDescription { } *)a2;

- (float)preferredVolume;
- (void)requestMediaDataWhenReadyOnQueue:(id)a0 usingBlock:(id /* block */)a1;
- (BOOL)marksOutputTrackAsEnabled;
- (void)stopRequestingMediaData;
- (long long)layer;
- (void)setTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (id)currentPassDescription;
- (id)init;
- (BOOL)writesMediaDataToBeginningOfFile;
- (BOOL)_appendPixelBuffer:(struct __CVBuffer { } *)a0 withPresentationTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)setLayer:(long long)a0;
- (void)markAsFinished;
- (void)setNaturalSize:(struct CGSize { double x0; double x1; })a0;
- (void)dealloc;
- (void)setMediaDataLocation:(id)a0;
- (BOOL)_appendTaggedPixelBufferGroup:(struct OpaqueCMTaggedBufferGroup { } *)a0 withPresentationTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)addCallbackToCancelDuringDeallocation:(id)a0;
- (void)declareKeyPathDependenciesWithRegistry:(id)a0;
- (void)setLanguageCode:(id)a0;
- (void)setPreferredMediaChunkSize:(long long)a0;
- (id)mediaDataLocation;
- (long long)preferredMediaChunkAlignment;
- (id)languageCode;
- (BOOL)canAddTrackAssociationWithTrackOfInput:(id)a0 type:(id)a1;
- (id)_attachedAdaptor;
- (void)markCurrentPassAsFinished;
- (void)addTrackAssociationWithTrackOfInput:(id)a0 type:(id)a1;
- (id)associatedInputsWithTrackAssociationType:(id)a0;
- (void)_didStartInitialSession;
- (void)setMaximizePowerEfficiency:(BOOL)a0;
- (void)setPreferredVolume:(float)a0;
- (void)setExtendedLanguageTag:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (id)extendedLanguageTag;
- (BOOL)appendSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)setWritesMediaDataToBeginningOfFile:(BOOL)a0;
- (BOOL)performsMultiPassEncodingIfSupported;
- (struct CGSize { double x0; double x1; })naturalSize;
- (BOOL)canPerformMultiplePasses;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })preferredMediaChunkDuration;
- (void)setPreferredMediaChunkDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (id)availableTrackAssociationTypes;
- (long long)_appendSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 error:(id *)a1;
- (id)initWithMediaType:(id)a0 outputSettings:(id)a1;
- (void)setSampleReferenceBaseURL:(id)a0;
- (id)initWithMediaType:(id)a0 outputSettings:(id)a1 sourceFormatHint:(struct opaqueCMFormatDescription { } *)a2;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_prepareToEndSession;
- (void)setPreferredMediaChunkAlignment:(long long)a0;
- (BOOL)maximizePowerEfficiency;
- (int)outputTrackID;
- (void)_setAttachedAdaptor:(id)a0;
- (void)setMediaTimeScale:(int)a0;
- (BOOL)_prepareForWritingWithFigAssetWriter:(struct OpaqueFigAssetWriter { } *)a0 mediaFileType:(id)a1 error:(id *)a2;
- (void)_transitionToTerminalStatus:(long long)a0;
- (void)respondToEachPassDescriptionOnQueue:(id)a0 usingBlock:(id /* block */)a1;
- (void)setPerformsMultiPassEncodingIfSupported:(BOOL)a0;
- (id)sampleReferenceBaseURL;
- (long long)preferredMediaChunkSize;
- (int)mediaTimeScale;
- (BOOL)_prepareToFinishWritingReturningError:(id *)a0;
- (void)_tellAssetWriterToTransitionToFailedStatusWithError:(id)a0;
- (void)setMarksOutputTrackAsEnabled:(BOOL)a0;

@end

@class AVAudioEngine, MTLRenderPassDescriptor, AVTARMaskRenderer, AVTPresentationConfiguration, SCNNode, AVTViewTransitionHelper, AVTAvatar, AVAudioEnvironmentNode, NSString, AVTHUDView, NSTimer, SCNTechnique, AVTAvatarEnvironment, SKScene, SCNScene, AVTFaceTracker, NSLock;
@protocol MTLRenderCommandEncoder, SCNSceneRendererDelegate, MTLDevice, SCNCaptureDeviceOutputConsumer, MTLCommandQueue, AVTViewFaceTrackingDelegate;

@interface AVTView : SCNView <_SCNSceneCommandBufferStatusMonitor, _SCNSceneRendererResourceManagerMonitor, AVTFaceTrackerDelegate, AVTSceneRenderer> {
    AVTAvatarEnvironment *_environment;
    AVTPresentationConfiguration *_presentationConfiguration;
    AVTFaceTracker *_faceTracker;
    BOOL _enableFaceTracking;
    BOOL _faceTrackingPaused;
    BOOL _faceIsTracked;
    BOOL _enableReticle;
    BOOL _captureImageIsTooDark;
    BOOL _isSensorCovered;
    BOOL _directRetargetingMode;
    double _lastFaceTrackerUpdateTimestamp;
    double _lastFaceTrackerUpdateWithTrackedFaceTimestamp;
    id<AVTViewFaceTrackingDelegate> _faceTrackingDelegate;
    id /* block */ _faceTrackerDidUpdateBlock;
    id<SCNCaptureDeviceOutputConsumer> _arCaptureDeviceOutputConsumer;
    AVTAvatar *_avatar;
    SCNNode *_avatarNode;
    SCNTechnique *_arMaskTechnique;
    AVTARMaskRenderer *_arMaskRenderer;
    AVTViewTransitionHelper *_transitionHelper;
    struct { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; struct *head; int current; unsigned int capacity; BOOL reached_max_capacity; } _perfTimes;
    double _perfPacketUpdateTimestamp;
    BOOL _packetNeedRecording;
    BOOL _showPerfHUD;
    int _droppedFrameCount;
    NSTimer *_perfTimeRefreshTimer;
    AVTHUDView *_debugView;
    NSLock *_lock;
}

@property (retain, nonatomic) AVTAvatar *avatar;
@property (nonatomic) BOOL enableFaceTracking;
@property (nonatomic, getter=faceTrackingIsPaused) BOOL faceTrackingPaused;
@property (readonly, nonatomic) BOOL faceIsTracked;
@property (readonly, nonatomic) BOOL captureImageIsTooDark;
@property (readonly, nonatomic, getter=isSensorCovered) BOOL sensorCovered;
@property (nonatomic) BOOL arMode;
@property (nonatomic) BOOL enableReticle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) SCNScene *scene;
@property (nonatomic) double sceneTime;
@property (weak, nonatomic) id<SCNSceneRendererDelegate> delegate;
@property (getter=isPlaying) BOOL playing;
@property (nonatomic) BOOL loops;
@property (retain, nonatomic) SCNNode *pointOfView;
@property (nonatomic) BOOL autoenablesDefaultLighting;
@property (nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
@property (nonatomic, getter=isTemporalAntialiasingEnabled) BOOL temporalAntialiasingEnabled;
@property (nonatomic) BOOL showsStatistics;
@property (nonatomic) unsigned long long debugOptions;
@property (retain, nonatomic) SKScene *overlaySKScene;
@property (readonly, nonatomic) unsigned long long renderingAPI;
@property (readonly, nonatomic) struct CGColorSpace { } *workingColorSpace;
@property (readonly, nonatomic) void *context;
@property (readonly, nonatomic) id<MTLRenderCommandEncoder> currentRenderCommandEncoder;
@property (readonly, nonatomic) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (readonly, nonatomic) id<MTLDevice> device;
@property (readonly, nonatomic) unsigned long long colorPixelFormat;
@property (readonly, nonatomic) unsigned long long depthPixelFormat;
@property (readonly, nonatomic) unsigned long long stencilPixelFormat;
@property (readonly, nonatomic) id<MTLCommandQueue> commandQueue;
@property (readonly, nonatomic) AVAudioEngine *audioEngine;
@property (readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (retain, nonatomic) SCNNode *audioListener;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentViewport;
@property (nonatomic) BOOL usesReverseZ;

- (void)dealloc;
- (void)_drawAtTime:(double)a0;
- (id)environment;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (id)initWithCoder:(id)a0;
- (void)setup;
- (void)didMoveToWindow;
- (id)arSession;
- (id)presentationConfiguration;
- (id)snapshotWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)updateInterfaceOrientation;
- (void)setSensorCovered:(BOOL)a0;
- (void)updateAtTime:(double)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(id)a1;
- (void)setFramingMode:(id)a0;
- (void)setShowPerfHUD:(BOOL)a0;
- (void)addAvatarPresentedOnScreenCallbackWithQueue:(id)a0 block:(id /* block */)a1;
- (id)faceTracker;
- (id)framingMode;
- (void)setFaceTrackingDelegate:(id)a0;
- (id)snapshotWithSize:(struct CGSize { double x0; double x1; })a0 scaleFactor:(float)a1;
- (id)snapshotWithSize:(struct CGSize { double x0; double x1; })a0 scaleFactor:(float)a1 options:(id)a2;
- (void)transitionToFaceTrackingWithDuration:(double)a0 completionHandler:(id /* block */)a1;
- (void)transitionToFaceTrackingWithDuration:(double)a0 enableBakedAnimations:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)transitionToFaceTrackingWithDuration:(double)a0 style:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (void)transitionToPose:(id)a0 duration:(double)a1 completionHandler:(id /* block */)a2;
- (void)transitionToStickerConfiguration:(id)a0 duration:(double)a1 completionHandler:(id /* block */)a2;
- (void)transitionToStickerConfiguration:(id)a0 duration:(double)a1 style:(unsigned long long)a2 completionHandler:(id /* block */)a3;
- (void)_renderer:(id)a0 didApplyAnimationsAtTime:(double)a1;
- (void)_renderer:(id)a0 updateAtTime:(double)a1;
- (void)_renderer:(id)a0 willRenderScene:(id)a1 atTime:(double)a2;
- (void)_UIOrientationDidChangeNotification:(id)a0;
- (void)_renderer:(id)a0 didBuildSubdivDataForHash:(id)a1 dataProvider:(id /* block */)a2;
- (id)_renderer:(id)a0 subdivDataForHash:(id)a1;
- (void)renderer:(id)a0 commandBufferDidCompleteWithError:(id)a1;
- (void)renderer:(id)a0 didFallbackToDefaultTextureForSource:(id)a1 message:(id)a2;
- (void)setFaceTracker:(id)a0;
- (void)avatarDidChange;
- (void)_animateToNoTrackingStateShowingReticle:(BOOL)a0;
- (void)_avtCommonInit;
- (void)_cancelDelayedtrackingLoss;
- (void)_delayedTrackingLoss;
- (void)_didLostTrackingForAWhile;
- (void)_disconnectRendererFromAllAvatars;
- (void)_disconnectRendererFromAvatar:(id)a0 avatarNode:(id)a1;
- (void)_fireTrackingLoss;
- (void)_refreshPerfTimesInfo;
- (void)_resetFaceToRandomPosition;
- (void)_transitionCoordinatorOutOfStickerConfigurationWithDuration:(double)a0 style:(unsigned long long)a1 options:(unsigned long long)a2;
- (void)_transitionCoordinatorToStickerConfiguration:(id)a0 duration:(double)a1 style:(unsigned long long)a2 options:(unsigned long long)a3;
- (void)_transitionToFaceTrackingWithDuration:(double)a0 style:(unsigned long long)a1 enableBakedAnimations:(BOOL)a2 completionHandler:(id /* block */)a3;
- (void)_updatePhysicsWorldForAvatarARScaleAndARMode:(BOOL)a0;
- (BOOL)allowTrackSmoothing;
- (void)clearOutAnimationToNoTrackingState;
- (void)crashAppExtensionOrViewService_rdar98130076:(id /* block */)a0;
- (double)currentAudioTime;
- (double)currentlyRenderedTrackingDate;
- (BOOL)directRetargetingMode;
- (BOOL)faceIsFullyActive;
- (void)faceTracker:(id)a0 session:(id)a1 didFailWithError:(id)a2;
- (void)faceTracker:(id)a0 sessionInterruptionEnded:(id)a1;
- (void)faceTracker:(id)a0 sessionWasInterrupted:(id)a1;
- (void)faceTrackerDidUpdate:(id)a0 withARFrame:(id)a1;
- (id)faceTrackingDelegate;
- (BOOL)isDoubleBuffered;
- (void)lockAvatar;
- (void)setCaptureImageIsTooDark:(BOOL)a0;
- (void)setDirectRetargetingMode:(BOOL)a0;
- (void)setEnableFaceTracking:(BOOL)a0 byPausingSessionInsteadOfStopping:(BOOL)a1;
- (void)setFaceIsTracked:(BOOL)a0;
- (void)setPresentationConfiguration:(id)a0;
- (void)setupOrientation;
- (BOOL)showPerfHUD;
- (void)transitionToFaceTrackingWithDuration:(double)a0 style:(unsigned long long)a1 enableBakedAnimations:(BOOL)a2 completionHandler:(id /* block */)a3;
- (void)transitionToPose:(id)a0 duration:(double)a1 style:(unsigned long long)a2 completionHandler:(id /* block */)a3;
- (void)unlockAvatar;
- (void)updateForChangedFaceTrackingPaused;
- (void)updateForMultiAvatarPositioningStyle;
- (void)updateProjectionMatrixForARModeIfNeeded:(struct CGSize { double x0; double x1; })a0;
- (void)warmupMemoji;

@end

@class SUUIViewElement, NSString, SUUIGridComponent, SUUIViewElementTextLayoutCache, SUUIMutableIntegerValue, NSMutableDictionary, SUUIViewElementLayoutContext, SUUIGridViewElementPageSectionConfiguration, CPLRUDictionary, SUUIDynamicPageSectionIndexMapper, _SUUIDynamicGridSizeCacheKey;
@protocol SUUIEntityProviding;

@interface SUUIDynamicGridViewElementPageSection : SUUIStorePageSection <SUUIArtworkRequestDelegate, SUUIGridViewElementPageSectionConfigurationDataSource, SUUICollectionDOMFeatureTargetting> {
    SUUIViewElementLayoutContext *_cellLayoutContext;
    SUUIGridViewElementPageSectionConfiguration *_configuration;
    SUUIDynamicPageSectionIndexMapper *_dynamicPageSectionIndexMapper;
    BOOL _editing;
    id<SUUIEntityProviding> _entityProvider;
    CPLRUDictionary *_globalIndexToEntityValueProviderValueCache;
    CPLRUDictionary *_globalIndexToTemplateViewElementCache;
    SUUIViewElement *_independentlySizedViewElement;
    SUUIViewElementTextLayoutCache *_labelLayoutCache;
    long long _minimumEntityCountForSections;
    _SUUIDynamicGridSizeCacheKey *_reusableSizeCacheKey;
    SUUIMutableIntegerValue *_reusableGlobalIndexIntegerValue;
    unsigned long long *_sectionHeaderGlobalIndices;
    unsigned long long _numberOfSections;
    BOOL _showsSectionHeaders;
    NSMutableDictionary *_sizeCacheKeyToCachedCellSize;
    NSMutableDictionary *_templateViewElementsCache;
    BOOL _usesSizingEntityValueProvider;
    struct { unsigned char respondsToSectionEntityValueProviderAtIndex : 1; } _entityProviderFlags;
}

@property (readonly, nonatomic) SUUIGridComponent *pageComponent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic, getter=isEditing) BOOL editing;

- (void)dealloc;
- (void)setEditing:(BOOL)a0 animated:(BOOL)a1;
- (void).cxx_destruct;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })sectionContentInset;
- (long long)numberOfCells;
- (void)_setContext:(id)a0;
- (long long)pinningStyleForItemAtIndexPath:(id)a0;
- (void)reloadCellWithIndexPath:(id)a0 reason:(long long)a1;
- (id)_dynamicGridViewElement;
- (long long)_entityGlobalIndexForGlobalIndex:(long long)a0 returningSection:(out long long *)a1;
- (id)_entityValueProviderForGlobalIndex:(long long)a0 sectionIndex:(long long *)a1;
- (void)_enumerateVisibleCellsUsingBlock:(id /* block */)a0;
- (long long)_globalIndexForEntityGlobalIndex:(long long)a0;
- (void)_invalidateCellSizeCache;
- (id)_itemTemplateViewElementForEntityValueProvider:(id)a0;
- (void)_reloadEntityProperties;
- (void)_reloadViewElementProperties;
- (void)_reloadVisibleCellsAnimated:(BOOL)a0;
- (void)_resetLayoutProperties;
- (id)_sectionTemplateViewElementForEntityValueProvider:(id)a0;
- (id)_templateViewElementsForType:(id)a0 mode:(id)a1;
- (BOOL)_updateShowsSectionHeaders;
- (void)_updateStyleProperties;
- (id)_viewElementAtGlobalIndex:(long long)a0;
- (long long)applyUpdateType:(long long)a0;
- (void)artworkRequest:(id)a0 didLoadImage:(id)a1;
- (id)backgroundColorForIndexPath:(id)a0;
- (id)cellForIndexPath:(id)a0;
- (struct CGSize { double x0; double x1; })cellSizeForIndexPath:(id)a0;
- (void)collectionViewDidConfirmButtonElement:(id)a0 withClickInfo:(id)a1 forItemAtIndexPath:(id)a2;
- (void)collectionViewDidSelectItemAtIndexPath:(id)a0;
- (void)collectionViewWillApplyLayoutAttributes:(id)a0;
- (void)deselectItemsAnimated:(BOOL)a0;
- (void)entityProvider:(id)a0 didInvalidateWithContext:(id)a1;
- (void)gridViewElementPageSectionConfiguration:(id)a0 configurePosition:(inout long long *)a1 forItemAtIndexPath:(id)a2;
- (id)gridViewElementPageSectionConfiguration:(id)a0 viewElementForIndexPath:(id)a1;
- (id)indexPathsForPinningItems;
- (id)initWithPageComponent:(id)a0;
- (void)invalidateCachedLayoutInformation;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })pinningContentInsetForItemAtIndexPath:(id)a0;
- (id)relevantEntityProviders;
- (void)reloadVisibleCellsWithReason:(long long)a0;
- (id)targetScrollingIndexPathForElementWithIndexBarEntryID:(id)a0 relativeSectionIndex:(long long)a1;
- (BOOL)updateCellWithIndexPath:(id)a0 itemState:(id)a1 animated:(BOOL)a2;
- (void)willAppearInContext:(id)a0;
- (void)willTransitionToSize:(struct CGSize { double x0; double x1; })a0 withTransitionCoordinator:(id)a1;

@end

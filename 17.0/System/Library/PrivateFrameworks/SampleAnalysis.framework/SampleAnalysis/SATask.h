@class NSString, NSArray, SAThread, SATimestamp, NSMutableDictionary, SASharedCache, SABinary, NSMutableArray, NSMutableSet, SABinaryLoadInfo;

@interface SATask : NSObject <SASerializable> {
    NSString *_mainBinaryPath;
    SABinary *_mainBinary;
    NSString *_name;
    BOOL _alreadyAttemptedToGetLoadInfoFromLiveProcess;
    BOOL _isBeta;
    BOOL _alreadyGatheredDataFromLiveProcess;
    BOOL _hasNoSharedCache;
    BOOL _assumeBinaryLoadInfosContainsMainBinary;
    int _pid;
    int _ppid;
    int _rpid;
    NSString *_bundleName;
    NSString *_bundleBuildVersion;
    NSString *_bundleProjectName;
    NSString *_bundleSourceVersion;
    NSString *_bundleProductBuildVersion;
    unsigned long long _resourceCoalitionID;
    unsigned long long _adamID;
    NSString *_installerVersionID;
    NSString *_vendorID;
    NSString *_cohortID;
    NSString *_appType;
    SATimestamp *_execTimestamp;
    SATimestamp *_exitTimestamp;
    SASharedCache *_sharedCache;
    SAThread *_mainThread;
    SATimestamp *_pidStartTimestamp;
    NSMutableSet *_rootFrames;
    struct _CSArchitecture { int cpu_type; int cpu_subtype; } _architecture;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) int pid;
@property (readonly) int ppid;
@property (readonly) int rpid;
@property (readonly) unsigned int uid;
@property (readonly) unsigned long long uniquePid;
@property (readonly, copy) NSString *name;
@property (readonly) NSString *bundleName;
@property (readonly) NSString *bundleVersion;
@property (readonly) NSString *bundleShortVersion;
@property (readonly) NSString *bundleBuildVersion;
@property (readonly) NSString *bundleProjectName;
@property (readonly) NSString *bundleSourceVersion;
@property (readonly) NSString *bundleProductBuildVersion;
@property (readonly) NSString *bundleIdentifier;
@property (readonly) unsigned long long resourceCoalitionID;
@property (readonly) unsigned long long adamID;
@property (readonly) NSString *installerVersionID;
@property (readonly) NSString *vendorID;
@property (readonly) char developerType;
@property (readonly) BOOL isBeta;
@property (readonly) NSString *cohortID;
@property (readonly) NSString *codesigningID;
@property (readonly) NSString *teamID;
@property (readonly) NSString *appType;
@property (readonly) NSString *commerceAppID;
@property (readonly) NSString *commerceExternalID;
@property (readonly) SATimestamp *execTimestamp;
@property (readonly) SATimestamp *exitTimestamp;
@property (readonly) BOOL isUnresponsive;
@property (readonly) double timeOfLastResponse;
@property (readonly) BOOL usesSuddenTermination;
@property (readonly) BOOL allowsIdleExit;
@property (readonly) BOOL isTranslocated;
@property (readonly) NSArray *binaryLoadInfos;
@property (readonly) SASharedCache *sharedCache;
@property (readonly) SABinaryLoadInfo *mainBinaryLoadInfo;
@property (copy) NSString *mainBinaryPath;
@property (readonly) SABinary *mainBinary;
@property (readonly) NSMutableArray *taskStates;
@property (readonly) SAThread *mainThread;
@property (readonly) NSMutableDictionary *threads;
@property (readonly) NSMutableDictionary *dispatchQueues;
@property (readonly) NSMutableDictionary *swiftTasks;

+ (id)newInstanceWithoutReferencesFromSerializedBuffer:(const void *)a0 bufferLength:(unsigned long long)a1;
+ (id)classDictionaryKey;

- (unsigned long long)sizeInBytesForSerializedVersion;
- (void)populateReferencesUsingBuffer:(const void *)a0 bufferLength:(unsigned long long)a1 andDeserializationDictionary:(id)a2 andDataBufferDictionary:(id)a3;
- (id)startTimestamp;
- (void)addSelfToSerializationDictionary:(id)a0;
- (id)architectureString;
- (BOOL)addSelfToBuffer:(struct { unsigned char x0; unsigned char x1; int x2; int x3; int x4; unsigned int x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; double x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; struct _CSArchitecture { int x0; int x1; } x20; union { unsigned short x0; struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; } x1; } x21; } *)a0 bufferLength:(unsigned long long)a1 withCompletedSerializationDictionary:(id)a2;
- (void)dealloc;
- (unsigned long long)indexOfLastTaskStateOnOrBeforeTime:(id)a0 withSampleIndex:(BOOL)a1;
- (unsigned long long)sampleCountInTimestampRangeStart:(id)a0 end:(id)a1;
- (void)enumerateTaskStatesBetweenStartTime:(id)a0 startSampleIndex:(unsigned long long)a1 endTime:(id)a2 endSampleIndex:(unsigned long long)a3 reverseOrder:(BOOL)a4 block:(id /* block */)a5;
- (id)lastTaskStateOnOrBeforeTime:(id)a0 withSampleIndex:(BOOL)a1;
- (unsigned long long)sampleCountInSampleIndexRangeStart:(unsigned long long)a0 end:(unsigned long long)a1;
- (id)firstTaskStateOnOrAfterTime:(id)a0 sampleIndex:(unsigned long long)a1;
- (void)enumerateTaskStatesBetweenStartTime:(id)a0 endTime:(id)a1 reverseOrder:(BOOL)a2 withSampleIndex:(BOOL)a3 block:(id /* block */)a4;
- (unsigned long long)indexOfFirstTaskStateOnOrAfterTime:(id)a0 withSampleIndex:(BOOL)a1;
- (id)initWithPid:(int)a0 uniquePid:(unsigned long long)a1 name:(const char *)a2 mainBinaryPath:(id)a3 pidStartTime:(unsigned long long)a4 loadInfos:(const struct dyld_uuid_info_64 { unsigned long long x0; unsigned char x1[16]; } *)a5 numLoadInfos:(unsigned int)a6 textExecLoadInfos:(const struct dyld_uuid_info_64 { unsigned long long x0; unsigned char x1[16]; } *)a7 numTextExecLoadInfos:(unsigned int)a8 architecture:(struct _CSArchitecture { int x0; int x1; })a9 sharedCache:(id)a10;
- (unsigned long long)indexOfLastTaskStateOnOrBeforeTime:(id)a0 sampleIndex:(unsigned long long)a1;
- (void).cxx_destruct;
- (void)cpuTimeNs:(unsigned long long *)a0 cpuInstructions:(unsigned long long *)a1 cpuCycles:(unsigned long long *)a2 betweenStartTime:(id)a3 endTime:(id)a4;
- (id)endTimestamp;
- (id)firstTaskStateOnOrAfterTime:(id)a0 withSampleIndex:(BOOL)a1;
- (BOOL)isEqual:(id)a0;
- (id)initWithPid:(int)a0 andUniquePid:(unsigned long long)a1 andName:(id)a2 sharedCache:(id)a3;
- (unsigned long long)indexOfFirstTaskStateOnOrAfterTime:(id)a0 sampleIndex:(unsigned long long)a1;
- (id)lastTaskStateOnOrBeforeTime:(id)a0 sampleIndex:(unsigned long long)a1;

@end

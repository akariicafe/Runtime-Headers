@interface CRNMS : NSObject {
    struct deque<nms::RectForest<unsigned short, double>, std::allocator<nms::RectForest<unsigned short, double>>> { struct __split_buffer<nms::RectForest<unsigned short, double> *, std::allocator<nms::RectForest<unsigned short, double> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<nms::RectForest<unsigned short, double> **, std::allocator<nms::RectForest<unsigned short, double> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<nms::RectForest<unsigned short, double>>> { unsigned long long __value_; } __size_; } _preNMSForests;
    struct PyramidNMS<unsigned short, double, unsigned char> { void /* function */ **_vptr$PyramidNMS; struct deque<bool, std::allocator<bool>> { struct __split_buffer<bool *, std::allocator<bool *>> { BOOL **__first_; BOOL **__begin_; BOOL **__end_; struct __compressed_pair<bool **, std::allocator<bool *>> { BOOL **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<bool>> { unsigned long long __value_; } __size_; } fullySpecifiedForests; struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> { struct __split_buffer<std::valarray<bool> *, std::allocator<std::valarray<bool> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<bool> **, std::allocator<std::valarray<bool> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<bool>>> { unsigned long long __value_; } __size_; } masksValid; struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> { struct __split_buffer<std::valarray<bool> *, std::allocator<std::valarray<bool> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<bool> **, std::allocator<std::valarray<bool> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<bool>>> { unsigned long long __value_; } __size_; } masksInvalid; struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> { struct __split_buffer<std::valarray<bool> *, std::allocator<std::valarray<bool> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<bool> **, std::allocator<std::valarray<bool> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<bool>>> { unsigned long long __value_; } __size_; } masksPendingInvalid; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsWordCoincide; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsWordCoincide; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsWordContain; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsWordContain; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsWordConstitute; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsWordConstitute; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsWordOverlap; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsWordOverlap; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsLineCoincide; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsLineCoincide; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsLineContain; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsLineContain; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsLineConstitute; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsLineConstitute; struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> { struct __split_buffer<std::valarray<unsigned char> *, std::allocator<std::valarray<unsigned char> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::valarray<unsigned char> **, std::allocator<std::valarray<unsigned char> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> { unsigned long long __value_; } __size_; } histsLineOverlap; struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>> *, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>> **, std::allocator<std::deque<std::deque<std::deque<unsigned short>>> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> { unsigned long long __value_; } __size_; } idxsLineOverlap; void *pForests; struct PyramidNMSConfig { void /* function */ **_vptr$PyramidNMSConfig; unsigned long long methodType; unsigned long long scoreType; double scoreMinThreshold; unsigned char scoreMapMinThreshold; BOOL scoreUseScaleIndex; BOOL scoreUseArea; double scoreAggregationScalingFactor; BOOL scoreUseNumSubDatums; unsigned long long scoreNumSubDatumsUpperClip; unsigned long long scoreNumSubDatumsLowerClip; BOOL ignoreOrphansInFullTile; double heightRatioMinThresholdForContainment; BOOL computeIntrascaleGeometricRelationships; unsigned long long intersectionNumSamples; double iouMinThresholdToAcceptContainedDatum; double normalizedAreaMinThresholdToAcceptContainedDatum; BOOL pendingInvalidRejectCompetingDatums; BOOL computeAndFilterByIndividualScores; BOOL processCoincidence; BOOL processContainment; BOOL processOverlap; BOOL processPendingInvalid; unsigned long long favorSubDatumUndersegmentationInProcessingCoincidence; BOOL favorLargerAreaInProcessingCoincidence; BOOL favorFineScaleInProcessingCoincidence; double datumMinHeightRatioToUseFullTile; BOOL useOverlappingWordsInProcessingContainment; double minValidCosAngleInDistributionCheckInProcessingContainment; unsigned long long favorSubDatumUndersegmentationInProcessingContainment; BOOL favorLargerAreaInProcessingContainment; BOOL favorFullTileInProcessingContainment; double heightRatioFineToFullMinThresholdFavorFullTileInProcessingContainment; double heightRatioFineToFullMaxThresholdFavorFullTileInProcessingContainment; double widthRatioFineToFullMinThresholdFavorFullTileInProcessingContainment; double widthRatioFineToFullMaxThresholdFavorFullTileInProcessingContainment; double heightRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment; double heightRatioFineToFullMaxThresholdFavorFullTileInProcessingSingleConstituentContainment; double widthRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment; double widthRatioFineToFullMaxThresholdFavorFullTileInProcessingSingleConstituentContainment; double favorFullTileInProcessingOverlap; double coincidenceIOUMinThreshold; double coincidenceIOMinMinThreshold; double containmentIOUMaxThreshold; double containmentIOMinMinThreshold; double constitutionIOUMaxThreshold; double constitutionIOMinMinThreshold; double overlapIOUMinThreshold; double overlapIOUMaxThreshold; double overlapIOMinMinThreshold; double overlapIOMinMaxThreshold; } config; } _pyrNMS;
    struct deque<nms::RectForest<unsigned short, double>, std::allocator<nms::RectForest<unsigned short, double>>> { struct __split_buffer<nms::RectForest<unsigned short, double> *, std::allocator<nms::RectForest<unsigned short, double> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<nms::RectForest<unsigned short, double> **, std::allocator<nms::RectForest<unsigned short, double> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<nms::RectForest<unsigned short, double>>> { unsigned long long __value_; } __size_; } _postNMSForests;
    unsigned long long _forestFeatureType;
    unsigned long long _outputTextFeatureLevel;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)buildRectForest:(void *)a0 fromTextDetectorQuadFeatures:(const void *)a1 forestFeatureType:(unsigned long long)a2 withInputSize:(struct CGSize { double x0; double x1; })a3 scoreMap:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a4 scoreMapScaleFactor:(double)a5 andTileRects:(id)a6 options:(id)a7;
- (unsigned long long)convertSubTextFeatures:(id)a0 toRects:(void *)a1;
- (BOOL)addTextDetectorQuadFeatures:(const void *)a0 withInputSize:(struct CGSize { double x0; double x1; })a1 andScoreMap:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a2 options:(id)a3;
- (BOOL)addTextDetectorQuadFeatures:(const void *)a0 withInputSize:(struct CGSize { double x0; double x1; })a1 scoreMap:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a2 andScoreMapScaleFactor:(double)a3 options:(id)a4;
- (BOOL)addTextDetectorQuadFeatures:(const void *)a0 withInputSize:(struct CGSize { double x0; double x1; })a1 scoreMap:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a2 scoreMapScaleFactor:(double)a3 andTileRects:(id)a4 options:(id)a5;
- (BOOL)buildRectForest:(void *)a0 fromTextDetectorQuadFeatures:(const void *)a1 forestFeatureType:(unsigned long long)a2 withInputSize:(struct CGSize { double x0; double x1; })a3 scoreMap:(struct vImage_Buffer { void *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a4 andScoreMapScaleFactor:(double)a5 options:(id)a6;
- (id)buildTextFeaturesFromRectForest:(const void *)a0 byEdge:(unsigned long long)a1 options:(id)a2;
- (void)fillRectForestDatum:(void *)a0 asDimType:(unsigned long long)a1 withCGRect:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (void)fillRectForestDatum:(void *)a0 asDimType:(unsigned long long)a1 withCRTextDetectorQuad:(const void *)a2 andInputSize:(struct CGSize { double x0; double x1; })a3;
- (void)fillRectForestDatum:(void *)a0 asDimType:(unsigned long long)a1 withQuad:(const void *)a2 andDimType:(unsigned long long)a3;
- (void)fillTextFeature:(id)a0 withRectDatum:(const void *)a1;
- (id)generateConsolidatedTextFeatures:(id)a0;
- (id)generateConsolidatedTextFeatures:(id)a0 withScaleIds:(void *)a1;
- (id)getTextFeatureFromQuadAngleDatum:(const void *)a0;
- (id)initForRevision:(unsigned long long)a0;
- (id)initWithNMSMethodType:(unsigned long long)a0 NMSScoreType:(unsigned long long)a1;
- (BOOL)preprocessScoreMaps;

@end

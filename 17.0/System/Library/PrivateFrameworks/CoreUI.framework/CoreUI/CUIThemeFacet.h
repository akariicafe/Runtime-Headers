@class NSString;

@interface CUIThemeFacet : NSObject <CUIThemeImageSource, NSCopying, NSCoding> {
    struct _renditionkeytoken { unsigned short x0; unsigned short x1; } *_renditionKeyList;
    unsigned long long _themeIndex;
    long long _renditionType;
    struct CGSize { double width; double height; } _thumbnailSize;
    struct CGPoint { double x; double y; } _hotSpot;
    int _isTintable;
    struct { unsigned char hasCheckedButtonGlyph : 1; unsigned char isButtonGlyph : 1; unsigned short reserved : 14; } _fFlags;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)themeUnregisterThemeRef:(unsigned long long)a0;
+ (id)facetWithElement:(long long)a0 part:(long long)a1 dimension1:(long long)a2 dimension2:(long long)a3 fromTheme:(unsigned long long)a4;
+ (unsigned long long)themeWithContentsOfURL:(id)a0 error:(id *)a1;
+ (void)initialize;
+ (id)_bundleIdentifierForThemeRef:(unsigned long long)a0;
+ (id)facetWithRenditionKey:(id)a0 fromTheme:(unsigned long long)a1;
+ (id)facetWithElement:(long long)a0 part:(long long)a1 fromTheme:(unsigned long long)a2;
+ (void)_invalidateArtworkCaches;
+ (unsigned long long)themeWithBytes:(const void *)a0 length:(unsigned long long)a1 error:(id *)a2;
+ (unsigned long long)themeForBundleIdentifier:(id)a0 error:(id *)a1;
+ (id)_facetWithKeyList:(const struct _renditionkeytoken { unsigned short x0; unsigned short x1; } *)a0 andRenditionKeyClass:(Class)a1 orRenditionKey:(id)a2 fromTheme:(unsigned long long)a3;
+ (unsigned long long)themeNamed:(id)a0 forBundleIdentifier:(id)a1 error:(id *)a2;
+ (id)_themeStoreForThemeIndex:(unsigned long long)a0;
+ (BOOL)assetExistsForRenditionKey:(id)a0 fromTheme:(unsigned long long)a1;
+ (id)cursorFacetWithName:(id)a0 fromTheme:(unsigned long long)a1;

- (struct CGSize { double x0; double x1; })thumbnailSize;
- (unsigned long long)themeIndex;
- (struct CGSize { double x0; double x1; })imageSize;
- (id)init;
- (id)imageForSliceIndex:(long long)a0;
- (void)dealloc;
- (int)blendMode;
- (id)image;
- (id)properties;
- (void)encodeWithCoder:(id)a0;
- (double)alpha;
- (long long)renditionType;
- (id)thumbnail;
- (id)renditionKey;
- (id)displayName;
- (id)initWithCoder:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)imageForState:(long long)a0;
- (id)initWithRenditionKey:(id)a0 fromTheme:(unsigned long long)a1;
- (void)_setThemeIndex:(unsigned long long)a0;
- (id)maskForSlice:(long long)a0 withKeyAdjustment:(id)a1;
- (id)renditionForSpecificKeyWrapper:(id)a0;
- (void)_applyFixedAttributesToKey:(id)a0;
- (BOOL)_canGetRenditionForKey:(id)a0 withDrawingLayer:(long long)a1;
- (void)_drawSlice:(long long)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withKeyAdjustment:(id)a2 context:(struct CGContext { } *)a3;
- (struct CGPoint { double x0; double x1; })_hotSpot;
- (BOOL)_isButtonGlyph;
- (id)_rendition;
- (id)_renditionForSpecificKey:(id)a0;
- (void)_setHasCheckedButtonGlyph:(BOOL)a0;
- (void)_setIsButtonGlyph:(BOOL)a0;
- (long long)_sliceIndexForSlice:(long long)a0 ofRendition:(id)a1;
- (id)_themeStore;
- (struct CGSize { double x0; double x1; })_thumbnailSizeForRendition:(id)a0;
- (void)_updateSpecificRenditionKey:(id)a0 isFocused:(BOOL *)a1 owner:(id)a2 userInfo:(id)a3;
- (double)alphaWithKeyAdjustment:(id)a0;
- (id)blendModeAsCAFilterString;
- (id)blendModeAsCAFilterStringWithKeyAjustment:(id)a0;
- (int)blendModeWithKeyAdjustment:(id)a0;
- (struct CGImage { } *)copyLayerImageContentsAndCenter:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (struct CGImage { } *)copyLayerImageContentsAndCenter:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 renditionKey:(id)a1;
- (void)drawAbsoluteAnimationFrame:(double)a0 destinationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 context:(struct CGContext { } *)a4;
- (void)drawAnimationFrameMappedFrom0_1RangedValue:(double)a0 destinationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 context:(struct CGContext { } *)a4;
- (void)drawAnimationFrameMappedFrom0_1RangedValue:(double)a0 destinationFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 context:(struct CGContext { } *)a4 effects:(id)a5;
- (void)drawAsOnePartWithSlice:(int)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 context:(struct CGContext { } *)a4 effects:(id)a5;
- (void)drawGradientInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 angle:(double)a1 alpha:(double)a2 operation:(int)a3 isFocused:(int)a4 focusRingColor:(struct CGColor { } *)a5 keyAdjustment:(id)a6 context:(struct CGContext { } *)a7 effects:(id)a8;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 keyAdjustment:(id)a2 context:(struct CGContext { } *)a3;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 operation:(int)a2 keyAdjustment:(id)a3 context:(struct CGContext { } *)a4;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 operation:(int)a2 owner:(id)a3 userInfo:(id)a4 context:(struct CGContext { } *)a5;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 owner:(id)a2 userInfo:(id)a3 context:(struct CGContext { } *)a4;
- (void)drawHighlightInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userInfo:(id)a2 context:(struct CGContext { } *)a3;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 context:(struct CGContext { } *)a4;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 context:(struct CGContext { } *)a4 effects:(id)a5;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 keyAdjustment:(id)a4 context:(struct CGContext { } *)a5;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 operation:(int)a2 isFocused:(int)a3 focusRingColor:(struct CGColor { } *)a4 context:(struct CGContext { } *)a5 effects:(id)a6;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 operation:(int)a2 isFocused:(int)a3 focusRingColor:(struct CGColor { } *)a4 keyAdjustment:(id)a5 context:(struct CGContext { } *)a6;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 operation:(int)a2 owner:(id)a3 userInfo:(id)a4 context:(struct CGContext { } *)a5;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 owner:(id)a2 userInfo:(id)a3 context:(struct CGContext { } *)a4;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isFocused:(int)a1 context:(struct CGContext { } *)a2;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isFocused:(int)a1 focusRingColor:(struct CGColor { } *)a2 context:(struct CGContext { } *)a3;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isFocused:(int)a1 focusRingColor:(struct CGColor { } *)a2 context:(struct CGContext { } *)a3 effects:(id)a4;
- (void)drawInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userInfo:(id)a2 context:(struct CGContext { } *)a3;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 keyAdjustment:(id)a4 context:(struct CGContext { } *)a5;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 operation:(int)a2 isFocused:(int)a3 focusRingColor:(struct CGColor { } *)a4 keyAdjustment:(id)a5 context:(struct CGContext { } *)a6;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 alpha:(double)a1 owner:(id)a2 userInfo:(id)a3 context:(struct CGContext { } *)a4;
- (void)drawMaskInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 owner:(id)a1 userInfo:(id)a2 context:(struct CGContext { } *)a3;
- (void)drawPulseInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 pulseValue:(double)a1 isFocused:(int)a2 focusRingColor:(struct CGColor { } *)a3 keyAdjustment:(id)a4 context:(struct CGContext { } *)a5;
- (void)drawPulseInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 pulseValue:(double)a1 owner:(id)a2 userInfo:(id)a3 context:(struct CGContext { } *)a4;
- (void)drawSegmentInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isFocused:(int)a1 focusRingColor:(struct CGColor { } *)a2 segmentType:(int)a3 context:(struct CGContext { } *)a4 effects:(id)a5;
- (id)gradientWithKeyAdjustment:(id)a0 angle:(double *)a1 style:(unsigned long long *)a2;
- (BOOL)hasValueSlices;
- (id)highlightWithSize:(struct CGSize { double x0; double x1; })a0 keyAdjustment:(id)a1;
- (BOOL)hitTestAtPoint:(struct CGPoint { double x0; double x1; })a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 owner:(id)a2 userInfo:(id)a3;
- (id)imageForSlice:(long long)a0 withKeyAdjustment:(id)a1;
- (id)imageForState:(long long)a0 value:(long long)a1;
- (id)imageForState:(long long)a0 value:(long long)a1 size:(unsigned long long)a2;
- (id)imageForState:(long long)a0 withValue:(long long)a1;
- (id)imageWithSize:(struct CGSize { double x0; double x1; })a0 keyAdjustment:(id)a1;
- (BOOL)isTintable;
- (BOOL)isValidButtonImageSource;
- (id)makeLayer;
- (id)maskWithSize:(struct CGSize { double x0; double x1; })a0 keyAdjustment:(id)a1;
- (id)renditionMetricsWithKeyAdjustment:(id)a0;
- (id)renditionSliceInformationForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 keyAdjustment:(id)a1;
- (struct CGSize { double x0; double x1; })sizeForSegmentOfType:(int)a0;
- (id)themeRendition;
- (struct CGSize { double x0; double x1; })topLeftCapSize;
- (void)updateLayer:(id)a0;
- (void)updateLayer:(id)a0 effects:(id)a1;
- (void)updateSegmentBezelLeadingCapLayer:(id)a0 bezelFillLayer:(id)a1 trailingBezelCapLayer:(id)a2 forSegmentType:(int)a3 segmentBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 leadingSeparatorWidth:(double)a5 trailingSeparatorWidth:(double)a6 renditionKey:(id)a7 effects:(id)a8;

@end

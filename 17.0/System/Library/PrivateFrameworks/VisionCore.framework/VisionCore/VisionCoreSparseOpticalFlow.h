@interface VisionCoreSparseOpticalFlow : NSObject

+ (id)computeHomographiesForQuadrilaterals:(id)a0 inFrame:(struct __CVBuffer { } *)a1 session:(id)a2 options:(id)a3 error:(id *)a4;
+ (id)quadsConformHomographySrcQuads:(id)a0 destQuads:(id)a1 reprojError:(float)a2;
+ (struct vector<int, std::allocator<int>> { int *x0; int *x1; struct __compressed_pair<int *, std::allocator<int>> { int *x0; } x2; })getInlierCountsPerQuad:(void *)a0 inliers:(void *)a1;
+ (struct { void /* unknown type, empty encoding */ x0[3]; })_convertToSIMDHomography:(struct VisionCoreHomography { struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x0; struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct vector<bool, std::allocator<bool>> { unsigned long long *x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long x0; } x2; } x3; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x4; struct _RANSAC_Parameters_ { int x0; float x1; int x2; float x3; } x5; })a0;
+ (struct VisionCoreHomography { struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x0; struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct vector<bool, std::allocator<bool>> { unsigned long long *x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long x0; } x2; } x3; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x4; struct _RANSAC_Parameters_ { int x0; float x1; int x2; float x3; } x5; })_estimateTransformSrcPts:(void *)a0 DstPts:(void *)a1 ransacReprojErrorThreshold:(float)a2;
+ (void)_gatherKeyPtsFromQuadsForSession:(id)a0 minGridFrequency:(int)a1;
+ (unsigned long long)_mtlPixelFormatForBuffer:(struct __CVBuffer { } *)a0;
+ (BOOL)_point:(struct CGPoint { double x0; double x1; })a0 inQuad:(id)a1;
+ (struct vector<VisionCoreHomography, std::allocator<VisionCoreHomography>> { struct VisionCoreHomography *x0; struct VisionCoreHomography *x1; struct __compressed_pair<VisionCoreHomography *, std::allocator<VisionCoreHomography>> { struct VisionCoreHomography *x0; } x2; })_runSparseOpticalFlowOnFrame:(struct __CVBuffer { } *)a0 shouldRunCorr:(BOOL)a1 forSession:(id)a2 error:(id *)a3 groups:(void *)a4 options:(id)a5;
+ (BOOL)_updateSession:(id)a0 referenceFrame:(struct __CVBuffer { } *)a1 error:(id *)a2;
+ (BOOL)_validateBuffer:(struct __CVBuffer { } *)a0;
+ (id)destinationKptsForTransform:(struct VisionCoreHomography { struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x0; struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct vector<bool, std::allocator<bool>> { unsigned long long *x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long x0; } x2; } x3; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x4; struct _RANSAC_Parameters_ { int x0; float x1; int x2; float x3; } x5; })a0;
+ (void)recursiveRansacSrcPts:(void *)a0 DstPts:(void *)a1 QuadsMatchingKptsCount:(void *)a2 resultingHomographies:(void *)a3 groups:(void *)a4 inlierRatio:(float)a5 ransacReprojErrorThreshold:(float)a6;
+ (id)sourceKptsForTransform:(struct VisionCoreHomography { struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x0; struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct vector<bool, std::allocator<bool>> { unsigned long long *x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long x0; } x2; } x3; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x4; struct _RANSAC_Parameters_ { int x0; float x1; int x2; float x3; } x5; })a0;
+ (id)sparseOpticalFlowResultsFromHomography:(struct VisionCoreHomography { struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x0; struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct vector<bool, std::allocator<bool>> { unsigned long long *x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long x0; } x2; } x3; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x4; struct _RANSAC_Parameters_ { int x0; float x1; int x2; float x3; } x5; })a0;
+ (void)updateGroupingWithQuadsOnMemory:(id)a0 groups:(void *)a1;
+ (id)updateSparseOpticalFlowResults:(id)a0 homography:(struct VisionCoreHomography { struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x0; struct Geometry2D_cart2D { float *x0; float *x1; int x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct vector<bool, std::allocator<bool>> { unsigned long long *x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long x0; } x2; } x3; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x4; struct _RANSAC_Parameters_ { int x0; float x1; int x2; float x3; } x5; })a1;

@end

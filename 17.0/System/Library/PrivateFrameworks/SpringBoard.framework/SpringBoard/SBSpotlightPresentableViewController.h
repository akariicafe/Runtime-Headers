@class UIView, NSString, SBFFluidBehaviorSettings, _UIPortalView, SBSpotlightMultiplexingViewController, NSMutableSet, SBHomeGrabberView, UIViewFloatAnimatableProperty, SBHHomePullToSearchSettings;
@protocol SBHSearchAffordance, SBSpotlightBackgroundWeighting, SBSpotlightPresentableViewControllerDelegate;

@interface SBSpotlightPresentableViewController : UIViewController <SPUIRemoteSearchViewDelegate, SBSpotlightMultiplexingViewControllerDelegate, PTSettingsKeyObserver, SBSearchPresentable, BSInvalidatable>

@property (retain, nonatomic) UIView<SBSpotlightBackgroundWeighting> *searchBackgroundView;
@property (retain, nonatomic) UIView *scaleView;
@property (retain, nonatomic) UIViewFloatAnimatableProperty *scaleProperty;
@property (retain, nonatomic) SBFFluidBehaviorSettings *scaleSettings;
@property (retain, nonatomic) UIView<SBHSearchAffordance> *searchAffordance;
@property (retain, nonatomic) UIView *searchAffordanceContentContainerView;
@property (retain, nonatomic) UIView *searchAffordanceBackgroundCapturingView;
@property (nonatomic) struct SBSpotlightPresentationMetrics { double backgroundWeighting; struct CGPoint { double x; double y; } searchContentCenter; double searchContentAlpha; struct CGSize { double width; double height; } searchAffordanceSize; struct CGPoint { double x; double y; } searchAffordanceCenter; double searchAffordanceAlpha; long long searchAffordanceContentAlignment; double searchAffordanceContentScale; double searchAffordanceCornerRadius; struct CGSize { double width; double height; } fullSearchBarSize; double searchBarAlpha; struct CGPoint { double x; double y; } keyboardCenter; double keyboardAlpha; struct CGPoint { double x; double y; } keyboardProtectorCenter; struct CGPoint { double x; double y; } homeAffordanceCenter; double searchContentVelocity; double keyboardVelocity; } appliedKeyboardAlignedElementsMetrics;
@property (retain, nonatomic) SBHomeGrabberView *homeAffordance;
@property (retain, nonatomic) UIView *searchAffordanceReferenceView;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } searchAffordanceReferenceFrame;
@property (retain, nonatomic) UIView *keyboardView;
@property (nonatomic) BOOL initializingKeyboardView;
@property (readonly, nonatomic) BOOL hasUnifiedKeyboardBackground;
@property (retain, nonatomic) _UIPortalView *keyboardProtectorPortalView;
@property (nonatomic) struct SBSpotlightHostedContentMetrics { double keyboardHeight; double keyboardProtectorHeight; struct CGSize { double width; double height; } searchBarSize; struct CGSize { double width; double height; } dockedSearchBarSize; double searchBarCornerRadius; } hostedContentMetrics;
@property (retain, nonatomic) _UIPortalView *searchBarPortalView;
@property (retain, nonatomic) _UIPortalView *searchBarBackgroundPortalView;
@property (retain, nonatomic) UIView *searchBarPortalClippingContainerView;
@property (retain, nonatomic) NSMutableSet *searchBarPortalRequirementReasons;
@property (readonly, nonatomic) BOOL supportsSeparateSearchBarBackground;
@property (nonatomic) double presentationProgress;
@property (nonatomic) double presentationOffset;
@property (nonatomic) long long presentationState;
@property (nonatomic) long long previousPresentationState;
@property (nonatomic) long long anticipatedPresentationState;
@property (nonatomic) long long searchAffordancePresentationState;
@property (nonatomic) unsigned long long outstandingAnimationCount;
@property (nonatomic) BOOL cancellingDismissAnimation;
@property (retain, nonatomic) UIViewFloatAnimatableProperty *searchContentFadeProperty;
@property (retain, nonatomic) UIViewFloatAnimatableProperty *backgroundBlurProperty;
@property (nonatomic) BOOL dismissingFromFullyPresented;
@property (nonatomic) BOOL waitingForSearchContentAvailabilityForFadeIn;
@property (nonatomic) double searchContentFadeInStartValue;
@property (retain, nonatomic) UIViewFloatAnimatableProperty *keyboardFadeProperty;
@property (nonatomic) BOOL waitingForKeyboardPresentationForFadeIn;
@property (nonatomic) double keyboardFadeInStartValue;
@property (retain, nonatomic) SBFFluidBehaviorSettings *searchAnimationSettings;
@property (nonatomic) double spotlightActivationThreshold;
@property (nonatomic) double backgroundInteractiveBlurDistance;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } backgroundBlurRange;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } backgroundUnblurRange;
@property (nonatomic) double searchContentInteractiveFadeInDistance;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } searchContentFadeInRange;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } searchContentFadeOutRange;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } searchAffordanceContentFadeRange;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } searchBarContentFadeRange;
@property (nonatomic) BOOL scalesSearchAffordanceContentWhileFading;
@property (nonatomic) struct SBSpotlightTransitionRange { double start; double end; } searchAffordanceScaleAndTranslateRange;
@property (nonatomic) double searchAffordanceMaxScaleX;
@property (nonatomic) double searchAffordanceMaxScaleY;
@property (nonatomic) double searchAffordanceScaleRubberbandingRange;
@property (nonatomic) double searchAffordanceMaxOffset;
@property (nonatomic) double searchAffordanceOffsetRubberbandingRange;
@property (nonatomic) double searchAffordanceTransientFadeInThreshold;
@property (nonatomic) double pullTransitionDistance;
@property (nonatomic) BOOL allowsKeyboardWhileInteractive;
@property (nonatomic) BOOL allowsKeyboardWhileInteractiveWithoutSearchAffordance;
@property (nonatomic) double interactiveKeyboardPresentationThreshold;
@property (nonatomic) double interactiveKeyboardPresentationOffset;
@property (nonatomic) BOOL keyboardFollowsSpotlightContent;
@property (nonatomic) BOOL allowsVelocityInjection;
@property (nonatomic) BOOL injectsVelocityOnlyForShortSwipes;
@property (nonatomic) double shortSwipeMaximumPercentageOfExpectedVelocity;
@property (nonatomic) double injectedPercentageOfGestureVelocity;
@property (nonatomic) double keyboardInjectedVelocityPercentage;
@property (nonatomic) BOOL injectsVelocityForNonInteractiveTransitions;
@property (nonatomic) double injectedVelocityForNonInteractiveTransitions;
@property (nonatomic) double keyboardInjectedVelocityPercentageForNonInteractiveTransitions;
@property (weak, nonatomic) id<SBSpotlightPresentableViewControllerDelegate> delegate;
@property (readonly, nonatomic) SBSpotlightMultiplexingViewController *spotlightMultiplexingViewController;
@property (nonatomic) double topOffset;
@property (nonatomic) double maxPresentationOffset;
@property (retain, nonatomic) SBHHomePullToSearchSettings *searchTransitionSettings;
@property (readonly, nonatomic) UIView *scalingContentView;
@property (readonly, nonatomic) UIView<SBHSearchAffordance> *searchAffordanceView;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)_layoutSearchAffordanceWithMetrics:(struct SBSpotlightPresentationMetrics { double x0; struct CGPoint { double x0; double x1; } x1; double x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; double x5; long long x6; double x7; double x8; struct CGSize { double x0; double x1; } x9; double x10; struct CGPoint { double x0; double x1; } x11; double x12; struct CGPoint { double x0; double x1; } x13; struct CGPoint { double x0; double x1; } x14; double x15; double x16; })a0;
- (void)_setUpSearchAnimationSettings;
- (void)dismissSearchView;
- (id /* block */)willBeginModifyingPresentationProgressForState:(long long)a0 animated:(BOOL)a1 needsInitialLayout:(BOOL *)a2;
- (void)_setHitTestingDisabledOnHostedContent:(BOOL)a0;
- (void)_positionKeyboardAlignedElementsWithMetrics:(struct SBSpotlightPresentationMetrics { double x0; struct CGPoint { double x0; double x1; } x1; double x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; double x5; long long x6; double x7; double x8; struct CGSize { double x0; double x1; } x9; double x10; struct CGPoint { double x0; double x1; } x11; double x12; struct CGPoint { double x0; double x1; } x13; struct CGPoint { double x0; double x1; } x14; double x15; double x16; })a0;
- (void)dealloc;
- (void)_setUpSearchAffordance;
- (void)_createKeyboardFadeProperty;
- (void)_layoutSearchContentWithMetrics:(struct SBSpotlightPresentationMetrics { double x0; struct CGPoint { double x0; double x1; } x1; double x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; double x5; long long x6; double x7; double x8; struct CGSize { double x0; double x1; } x9; double x10; struct CGPoint { double x0; double x1; } x11; double x12; struct CGPoint { double x0; double x1; } x13; struct CGPoint { double x0; double x1; } x14; double x15; double x16; })a0;
- (void)_setUpSearchBackground;
- (void)spotlightMultiplexingViewController:(id)a0 searchContentAvailabilityDidChange:(BOOL)a1;
- (void)_tearDownBackgroundBlurProperty;
- (void)_layoutWithMetrics:(struct SBSpotlightPresentationMetrics { double x0; struct CGPoint { double x0; double x1; } x1; double x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; double x5; long long x6; double x7; double x8; struct CGSize { double x0; double x1; } x9; double x10; struct CGPoint { double x0; double x1; } x11; double x12; struct CGPoint { double x0; double x1; } x13; struct CGPoint { double x0; double x1; } x14; double x15; double x16; })a0;
- (void)_setUpSearchBackgroundMatchMoveAnimation;
- (void)viewDidLoad;
- (struct SBSpotlightPresentationMetrics { double x0; struct CGPoint { double x0; double x1; } x1; double x2; struct CGSize { double x0; double x1; } x3; struct CGPoint { double x0; double x1; } x4; double x5; long long x6; double x7; double x8; struct CGSize { double x0; double x1; } x9; double x10; struct CGPoint { double x0; double x1; } x11; double x12; struct CGPoint { double x0; double x1; } x13; struct CGPoint { double x0; double x1; } x14; double x15; double x16; })_presentationMetricsWithProgress:(double)a0 offset:(double)a1 velocity:(double)a2 presentationState:(long long)a3 previousPresentationState:(long long)a4 anticipatedPresentationState:(long long)a5 searchContentPresentationState:(long long)a6 searchAffordancePresentationState:(long long)a7 hostedContentMetrics:(struct SBSpotlightHostedContentMetrics { double x0; double x1; struct CGSize { double x0; double x1; } x2; struct CGSize { double x0; double x1; } x3; double x4; })a8;
- (void)invalidate;
- (void)_getSearchAffordanceMetricsForDefaultSize:(struct CGSize { double x0; double x1; })a0 presentationState:(long long)a1 presentationOffset:(double)a2 scaleX:(double *)a3 scaleY:(double *)a4 offset:(double *)a5 size:(struct CGSize { double x0; double x1; } *)a6 cornerRadius:(double *)a7;
- (void)_createScaleProperty;
- (void)setSpotlightScale:(double)a0 interactive:(BOOL)a1;
- (void)invalidateSearchAffordanceView;
- (id)_sharedRemoteSearchViewController;
- (void)loadView;
- (void)_beginRequiringSearchBarPortalViewForReason:(id)a0;
- (BOOL)_setUpHostedContentMetrics;
- (void)_configureHostedContent;
- (BOOL)_canShowWhileLocked;
- (void)settings:(id)a0 changedValueForKey:(id)a1;
- (void)_createSearchContentFadeProperty;
- (void)_updatePresentationProgress:(double)a0 withOffset:(double)a1 velocity:(double)a2 presentationState:(long long)a3 previousPresentationState:(long long)a4;
- (void).cxx_destruct;
- (void)_setCornerRounded:(BOOL)a0;
- (long long)_searchAffordancePresentationStateWithOffset:(double)a0 presentationState:(long long)a1 previousSearchAffordancePresentationState:(long long)a2;
- (unsigned long long)_activeTransitionCount;
- (void)viewDidMoveToWindow:(id)a0 shouldAppearOrDisappear:(BOOL)a1;
- (void)_updateForScalePropertyChanged;
- (void)invalidateBackgroundView;
- (void)_tearDownKeyboardFadeProperty;
- (void)spotlightMultiplexingViewController:(id)a0 externalKeyboardViewContainsKeyboardDidChange:(BOOL)a1;
- (void)viewWillTransitionToSize:(struct CGSize { double x0; double x1; })a0 withTransitionCoordinator:(id)a1;
- (void)_setUpHomeAffordance;
- (void)_createBackgroundBlurProperty;
- (void)_endRequiringSearchBarPortalViewForReason:(id)a0;
- (void)updatePresentationProgress:(double)a0 withOffset:(double)a1 velocity:(double)a2 presentationState:(long long)a3;
- (id)initWithSpotlightMultiplexingViewController:(id)a0;

@end

@class NSRegularExpression, NSString, NSMutableDictionary, NSDictionary, TypistHWKeyboard, NSNumber, TypistCandidateBar;

@interface TypistKeyboard : NSObject <NSSecureCoding>

@property (class, readonly) BOOL supportsSecureCoding;

@property (copy, nonatomic) NSNumber *typeInterval;
@property (copy, nonatomic) NSNumber *touchMajorRadius;
@property (copy, nonatomic) NSString *keyboardID;
@property (copy, nonatomic) NSNumber *pressDuration;
@property (retain, nonatomic) TypistCandidateBar *candidatebar;
@property (retain, nonatomic) TypistHWKeyboard *hardwareKeyboard;
@property (copy, nonatomic) NSString *layoutName;
@property (copy, nonatomic) NSString *languageID;
@property (copy, nonatomic) NSString *regionCode;
@property (copy, nonatomic) NSString *keyboardSW;
@property (copy, nonatomic) NSString *keyboardType;
@property (nonatomic) BOOL usePopupKeys;
@property (nonatomic) BOOL usePredictionBar;
@property (retain, nonatomic) NSMutableDictionary *keyPlanes;
@property (copy, nonatomic) NSString *defaultPlaneName;
@property (copy, nonatomic) NSDictionary *planeSwitchTable;
@property (nonatomic, getter=dictationSupported) BOOL dictationSupported;
@property (nonatomic, getter=shouldShowDictationKey) BOOL shouldShowDictationKey;
@property (nonatomic, getter=shouldShowGlobeKey) BOOL shouldShowGlobeKey;
@property (nonatomic, getter=isTenKey) BOOL isTenKey;
@property (nonatomic, getter=isKanaKeyboard) BOOL isKana;
@property (nonatomic, getter=isHandwriting) BOOL isHandwriting;
@property (nonatomic) BOOL fastTyping;
@property (nonatomic) BOOL hasCandidatesToCommit;
@property (nonatomic) BOOL isCapsLockedState;
@property (retain, nonatomic) NSString *sentenceDelimitingCharacters;
@property (retain, nonatomic) NSString *sentenceTrailingCharacters;
@property (retain, nonatomic) NSString *sentencePrefixingCharacters;
@property (retain, nonatomic) NSRegularExpression *autoshiftRegex;
@property (nonatomic) BOOL flickTyping;
@property (nonatomic) int tapStyle;
@property (retain, nonatomic) NSNumber *tapSigma;
@property (retain, nonatomic) NSNumber *tapBounds;
@property (nonatomic) BOOL swipeForceSpace;
@property (retain, nonatomic) NSNumber *swipeSigma;
@property (retain, nonatomic) NSNumber *swipeAlpha;
@property (retain, nonatomic) NSNumber *swipePivotProbability;
@property (retain, nonatomic) NSNumber *swipeErrantProbability;
@property (retain, nonatomic) NSNumber *swipeConvexProbability;
@property (retain, nonatomic) NSNumber *swipeErrantSigma;
@property (retain, nonatomic) NSNumber *swipeConvexSigma;

+ (id)keyboardLanguageValueMap;
+ (void)typeStringOnHardwareKeyboard:(id)a0 withLanguage:(id)a1;

- (id)init:(id)a0;
- (void)dealloc;
- (void)encodeWithCoder:(id)a0;
- (void)typeString:(id)a0;
- (BOOL)isFloating;
- (void).cxx_destruct;
- (void)activate:(BOOL)a0;
- (void)detachHardwareKeyboard;
- (id)initWithCoder:(id)a0;
- (id)init:(id)a0 options:(id)a1;
- (void)moveFloatingKeyboardToPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)switchKeyPlaneOnActiveKeyboard:(id)a0;
- (void)typeKeystrokeStream:(id)a0 completion:(id /* block */)a1;
- (void)setupExtraKeyplaneDataIfNeeded:(id)a0;
- (void)typeStringWithHardwareKeyboard:(id)a0;
- (void)_bailWithError:(id)a0 completion:(id /* block */)a1;
- (id)_character_set_pattern_from_string:(id)a0;
- (id)_constructSwitchPath:(id)a0 toPlane:(id)a1 fromPlane:(id)a2;
- (id)_convertCollationCharacters:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_determineHandwritingBound;
- (struct CGPoint { double x0; double x1; })_determinePointBetween:(struct CGPoint { double x0; double x1; })a0 nextPoint:(struct CGPoint { double x0; double x1; })a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_determineTransformationinFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 segmentStart:(double)a1 totalSegmentWidth:(unsigned long long)a2 scale:(double)a3 characterHeight:(double)a4 characterWidth:(double)a5 dimensions:(id)a6;
- (id)_generateArgumentList:(id)a0;
- (id)_generateHandwritingStream:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isPencil:(BOOL)a2 dimensions:(id)a3;
- (double)_getScaleInFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 isPencil:(BOOL)a1 dimensions:(id)a2;
- (struct CGPoint { double x0; double x1; })_guardAgainstOffScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_isPlaneControlKey:(id)a0;
- (id)_sanitizedStringForAutoShiftCheck:(id)a0;
- (void)_setKeyboardUserPreferences:(id)a0;
- (id)_setupAutoShiftRegex;
- (id)addAccentKeyAction:(id)a0;
- (id)addKeyboardPopupKeys:(id)a0 inPlane:(id)a1 addTo:(id)a2 keyplaneKeycaps:(id)a3;
- (void)attachHardwareKeyboard:(id)a0;
- (void)attachHardwareKeyboardWithCountryCode:(id)a0;
- (id)attemptToFindKeystrokeAsGesture:(id)a0;
- (struct CGPoint { double x0; double x1; })calculateCoordinatesForFlickGesture:(struct CGPoint { double x0; double x1; })a0 direction:(id)a1 offset:(float)a2;
- (struct CGPoint { double x0; double x1; })centerOfKey:(struct CGPoint { double x0; double x1; })a0 withOffset:(struct CGPoint { double x0; double x1; })a1;
- (id)changeKeyNameToGenericCharacter:(id)a0;
- (long long)commitCandidate:(id)a0;
- (long long)commitCandidateAtIndex:(long long)a0;
- (id)convertRepresentedStringsIfNecessary:(id)a0;
- (id)createAutoshiftRegularExpressionWithDelimitingCharacters:(id)a0 sentenceTrailingCharacters:(id)a1 sentencePrefixingCharacters:(id)a2;
- (void)dragFromKey:(id)a0 toKey:(id)a1 completion:(id /* block */)a2;
- (void)dragPopoverKey:(id)a0 completion:(id /* block */)a1;
- (id)findKey:(id)a0 inPlane:(id)a1;
- (id)findKeyInOtherPlanes:(id)a0 currentPlane:(id)a1;
- (id)findKeyOnAnyPlane:(id)a0;
- (id)findKeyOnCurrentPlane:(id)a0;
- (void)flickKey:(id)a0 withDirection:(id)a1 completion:(id /* block */)a2;
- (id)generateHandwritingStream:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isPencil:(BOOL)a2;
- (id)generateHandwritingStream:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isPencil:(BOOL)a2 rotationBias:(double)a3;
- (id)generateHandwritingStream:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isPencil:(BOOL)a2 rotationBias:(double)a3 isCursive:(BOOL)a4;
- (id)generateKeyplaneSwitchTable:(id)a0;
- (id)generateKeyplaneSwitchTableFor10Key:(id)a0;
- (id)generateKeystrokeStream:(id)a0;
- (id)generatePencilGestureStream:(int)a0 gestureStyle:(int)a1 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)generateSwipeStream:(id)a0;
- (id)getAllCandidates;
- (id)getAlternatePlanesForDefaultPlane;
- (id)getAlternativeKeyPlaneName:(id)a0;
- (id)getExpectedPlaneNameForKey:(id)a0 currentPlane:(id)a1;
- (id)getPostfixKey:(id)a0;
- (id)getShiftPlaneForAlternatePlane;
- (id)getShiftPlaneForDefaultPlane;
- (id)getShiftedKeyPlaneName:(id)a0;
- (id)getVisibleCandidates;
- (BOOL)hasCandidate:(id)a0;
- (BOOL)hasCandidate:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)hasCandidates:(id)a0;
- (BOOL)hasCandidates:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)init:(id)a0 options:(id)a1 locale:(id)a2;
- (id)initWithHardwareKeyboard:(id)a0;
- (BOOL)isAutoshiftedToCapitalPlane:(id)a0;
- (BOOL)isAvailableFlickOnCurrentPlane:(id)a0 withDirection:(id)a1;
- (BOOL)isAvailableGestureOnCurrentPlane:(id)a0 withDirection:(id)a1;
- (BOOL)isAvailableKeyOnCurrentPlane:(id)a0;
- (BOOL)isAvailablePopoverOnCurrentPlane:(id)a0;
- (BOOL)isSwitchedToCapitalPlane:(id)a0 previous:(id)a1 currentPlane:(id)a2 context:(id)a3;
- (id)keysDataForInputMode:(id)a0 andFileName:(id)a1;
- (void)preprocessing;
- (void)pressAndHoldHardwareKeys:(id)a0 forDuration:(double)a1 withValidation:(id /* block */)a2 validateAfter:(double)a3;
- (void)pressKeycode:(unsigned short)a0;
- (void)setFloatingKeyboard:(BOOL)a0;
- (void)setOneHandedPosition:(id)a0;
- (void)setTapStyleNoise:(id)a0;
- (void)setup50OnFlick:(id)a0 forKey:(id)a1 keyName:(id)a2 planeName:(id)a3;
- (id)setupKeyboardInfo:(id)a0 options:(id)a1;
- (void)setupSentenceBoundryStrings;
- (void)setupTenKey:(id)a0 forKey:(id)a1 keyName:(id)a2 planeName:(id)a3;
- (id)splitKeystrokeStreamByWord:(id)a0 originalText:(id)a1;
- (void)swipeGestureKey:(id)a0 withDirection:(id)a1 completion:(id /* block */)a2;
- (void)swipeGestureOrFlickKey:(id)a0 withDirection:(id)a1 completion:(id /* block */)a2;
- (void)swipeString:(id)a0;
- (id)switchToPlane:(id)a0 fromPlane:(id)a1;
- (void)tapGlobeKey;
- (void)tapKey:(id)a0 tapCount:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)tapKey:(id)a0 tapCount:(unsigned long long)a1 overriddenTypeInterval:(id)a2 completion:(id /* block */)a3;
- (void)tapMoreKey;
- (void)toggleCapsLock;
- (id)tryAlternateVariationsOfKey:(id)a0;
- (void)typeKeystrokeStream:(id)a0;
- (void)typeKeystrokeStreamWithPredictive:(id)a0 originalText:(id)a1 completion:(id /* block */)a2;
- (void)typeString:(id)a0 completion:(id /* block */)a1;
- (void)typeString:(id)a0 withCommit:(id)a1;
- (void)typeWordKeystrokeWithPredictive:(id)a0 atIndex:(long long)a1 completion:(id /* block */)a2;
- (void)typeWordKeystrokes:(id)a0 expectedWord:(id)a1 atIndex:(long long)a2 completion:(id /* block */)a3;
- (BOOL)usesMecabraCandidateBar;
- (void)writePencilGesture:(int)a0 inStyle:(int)a1 gestureRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (void)writePencilGesture:(int)a0 inStyle:(int)a1 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)writeString:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)writeString:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 isCursive:(BOOL)a2;
- (void)writeString:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 rotationBias:(double)a2;
- (void)writeString:(id)a0 inFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 rotationBias:(double)a2 isCursive:(BOOL)a3;

@end

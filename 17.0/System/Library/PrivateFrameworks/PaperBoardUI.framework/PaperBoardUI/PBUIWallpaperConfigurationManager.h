@class NSArray, PBUIWallpaperConfiguration, PBUIMagnifyMode, NSString, NSMutableDictionary;
@protocol PBUIWallpaperConfigurationManagerDelegate, PBUIProceduralWallpaperProvider;

@interface PBUIWallpaperConfigurationManager : NSObject <BSDescriptionProviding> {
    NSMutableDictionary *_wallpaperImageCache;
    int _externalNotificationToken;
    unsigned long long _batchChangeCount;
    long long _batchNotifyVariants;
}

@property (nonatomic) BOOL cachedVariantsShareWallpaperConfiguration;
@property (nonatomic, getter=isCachedVariantsShareWallpaperConfigurationValid) BOOL cachedVariantsShareWallpaperConfigurationValid;
@property (readonly, copy, nonatomic) NSArray *dataStores;
@property (weak, nonatomic) id<PBUIWallpaperConfigurationManagerDelegate> delegate;
@property (readonly, nonatomic) struct CGSize { double width; double height; } wallpaperSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } wallpaperSizeIncludingParallaxOverhang;
@property (readonly, nonatomic) double wallpaperScale;
@property (nonatomic) long long wallpaperMode;
@property (nonatomic) BOOL enableWallpaperDimming;
@property (readonly, nonatomic) long long wallpaperSizeType;
@property (readonly, nonatomic) long long parallaxDeviceType;
@property (readonly, copy, nonatomic) PBUIWallpaperConfiguration *lockScreenWallpaperConfiguration;
@property (readonly, copy, nonatomic) PBUIWallpaperConfiguration *homeScreenWallpaperConfiguration;
@property (readonly, nonatomic) BOOL variantsShareWallpaperConfiguration;
@property (readonly, nonatomic) unsigned long long numberOfCachedStaticImages;
@property (weak, nonatomic) id<PBUIProceduralWallpaperProvider> proceduralWallpaperProvider;
@property (retain, nonatomic) PBUIMagnifyMode *magnifyMode;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;

- (void)migrateWallpaperOptionsForImageIfNecessaryForVariant:(long long)a0 representingVariants:(long long)a1;
- (BOOL)setWallpaperConfigurationFromDefaultWallpaperConfiguration:(id)a0 forVariants:(long long)a1 wallpaperMode:(long long)a2 name:(id)a3;
- (BOOL)isInChangeBatch;
- (void)removeWallpaperColorForVariants:(long long)a0;
- (id)init;
- (id)wallpaperImageForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (id)proceduralWallpaperInfoForVariant:(long long)a0;
- (id)wallpaperConfigurationForVariant:(long long)a0 includingValuesForTypes:(unsigned long long)a1;
- (void)regenerateStaticWallpaperThumbnailImages;
- (BOOL)setWallpaperColor:(id)a0 forVariants:(long long)a1;
- (void)removeWallpaperOptionsForVariants:(long long)a0;
- (BOOL)setWallpaperOptions:(id)a0 forVariants:(long long)a1 wallpaperMode:(long long)a2;
- (void)dealloc;
- (BOOL)hasWallpaperImageForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (id)wallpaperOriginalImageForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (id)cleanedProceduralWallpaperInfo:(id)a0;
- (void)performMigrationWithFailureHandler:(id /* block */)a0;
- (void)removeWallpaperImageHashDataForVariants:(long long)a0;
- (BOOL)setWallpaperOptions:(id)a0 forVariants:(long long)a1;
- (void)removeWallpaperImageDataTypes:(unsigned long long)a0 forVariants:(long long)a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_naturalPreferredTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 forNaturalSize:(struct CGSize { double x0; double x1; })a1;
- (id)normalizeImage:(id)a0;
- (void)removeProceduralWallpaperForVariants:(long long)a0;
- (void)getBestCropRect:(out struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 zoomScale:(out double *)a1 forImageSize:(struct CGSize { double x0; double x1; })a2 portrait:(BOOL)a3 parallaxFactor:(double)a4;
- (void)removeVideoForVariants:(long long)a0;
- (id)succinctDescriptionBuilder;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRectForViewPort:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 portrait:(BOOL)a1 zoomScale:(double)a2 parallaxFactor:(double)a3 forImageSize:(struct CGSize { double x0; double x1; })a4 contentScaleFactor:(double)a5;
- (void)wallpaperDidChangeForVariants:(long long)a0 shouldNotify:(BOOL)a1;
- (BOOL)setWallpaperColorName:(id)a0 forVariants:(long long)a1;
- (void)beginChangeBatch;
- (BOOL)setWallpaperGradient:(id)a0 forVariants:(long long)a1;
- (id)lockScreenWallpaperConfigurationIncludingValuesForTypes:(unsigned long long)a0;
- (id)wallpaperOptionsForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (BOOL)safeMigrateWallpaperImageIfNecessaryForVariant:(long long)a0 representingVariants:(long long)a1 wallpaperMode:(long long)a2;
- (void)restoreDefaultWallpaperForAllVariantsAndNotify:(BOOL)a0;
- (void)removeWallpaperImagesForVariants:(long long)a0 variantsShareWallpaperConfiguration:(BOOL)a1;
- (void)delayNotifyingChangeForVariants:(long long)a0;
- (void)endChangeBatch;
- (char)_providerForVariant:(long long)a0 lockConfig:(id)a1 homeConfig:(id)a2;
- (id)migratedWallpaperOptionsForWallpaperOptions:(id)a0 originalImageSize:(struct CGSize { double x0; double x1; })a1;
- (id)posterMigrationInfo;
- (id)wallpaperColorForVariant:(long long)a0 fromDataStore:(id)a1 colorName:(id *)a2;
- (void)removeAllDataExceptForType:(long long)a0 variants:(long long)a1 variantsShareWallpaperConfiguration:(BOOL)a2;
- (id)descriptionBuilderWithMultilinePrefix:(id)a0;
- (id)wallpaperThumbnailImageForFulfillingLookupForConfiguration:(id)a0;
- (id)wallpaperThumbnailImageForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (void)wallpaperWillChangeForVariants:(long long)a0;
- (void)clearDelayedChangeNotifications;
- (BOOL)isVideoSupportedByDefaultForVariant:(long long)a0;
- (double)parallaxFactorForCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 portrait:(BOOL)a1 forImageSize:(struct CGSize { double x0; double x1; })a2 zoomScale:(double)a3;
- (void)removeDataForTypes:(unsigned long long)a0 variants:(long long)a1 variantsShareWallpaperConfiguration:(BOOL)a2;
- (id)wallpaperConfigurationForVariant:(long long)a0;
- (BOOL)setWallpaperThumbnailFromFullsizeImage:(id)a0 forVariant:(long long)a1 wallpaperMode:(long long)a2;
- (id)wallpaperConfigurationForVariant:(long long)a0 includingValuesForTypes:(unsigned long long)a1 wallpaperMode:(long long)a2;
- (id)fallbackWallpaperConfigurationForVarient:(long long)a0;
- (void)regenerateThumbnailsIfNecessary;
- (BOOL)setWallpaperThumbnailData:(id)a0 forVariant:(long long)a1;
- (long long)wallpaperTypeForSharedWallpaperConfigurationForTypes:(unsigned long long)a0;
- (id)descriptionWithMultilinePrefix:(id)a0;
- (BOOL)setWallpaperImage:(id)a0 wallpaperOptions:(id)a1 forVariants:(long long)a2;
- (id)wallpaperThumbnailImageDataForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (BOOL)setProceduralWallpaperIdentifier:(id)a0 options:(id)a1 forVariants:(long long)a2;
- (BOOL)setWallpaperImage:(id)a0 originalImage:(id)a1 forVariants:(long long)a2 options:(unsigned long long)a3;
- (void)removeWallpaperImagesForVariants:(long long)a0;
- (id)wallpaperThumbnailImageDataForVariant:(long long)a0 wallpaperMode:(long long)a1 inDataStore:(id)a2;
- (void)clearCacheForVariants:(long long)a0 memoryOnly:(BOOL)a1;
- (void).cxx_destruct;
- (id)wallpaperThumbnailImageDataForFulfillingLookupForConfiguration:(id)a0;
- (id)initWithWallpaperDataStores:(id)a0;
- (void)removeAllDataExceptForTypes:(unsigned long long)a0 variants:(long long)a1 variantsShareWallpaperConfiguration:(BOOL)a2;
- (BOOL)shouldSetWallpaperImageHashData;
- (id)initWithWallpaperDataStores:(id)a0 wallpaperSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2 sizeType:(long long)a3;
- (id)getWallpaperLegibilitySettingsForVariant:(long long)a0;
- (BOOL)isVideoSupportedForVariant:(long long)a0;
- (Class)proceduralWallpaperClassForIdentifier:(id)a0;
- (id)thumbnailDataForImage:(id)a0;
- (BOOL)isProceduralWallpaperInfoValid:(id)a0;
- (id)succinctDescription;
- (id)videoURLForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (double)thumbnailWidth;
- (BOOL)setWallpaperThumbnailData:(id)a0 forVariant:(long long)a1 wallpaperMode:(long long)a2;
- (long long)effectiveSharedVariantForVariants:(long long)a0;
- (void)saveCroppedVideo:(id)a0 toURL:(id)a1 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 completionHandler:(id /* block */)a3;
- (void)safeMigrateWallpaperImageIfNecessary;
- (void)clearCacheForVariants:(long long)a0;
- (void)notifyDelegateOfChangesToVariants:(long long)a0;
- (void)regenerateThumbnailIfNecessaryForVariant:(long long)a0 wallpaperMode:(long long)a1;
- (BOOL)setWallpaperImageHashData:(id)a0 forVariants:(long long)a1 wallpaperMode:(long long)a2;
- (void)removeWallpaperGradientForVariants:(long long)a0;
- (BOOL)setWallpaperImage:(id)a0 adjustedImage:(id)a1 thumbnailData:(id)a2 imageHashData:(id)a3 wallpaperOptions:(id)a4 forVariants:(long long)a5 wallpaperMode:(long long)a6;
- (BOOL)setWallpaperImage:(id)a0 originalImage:(id)a1 thumbnailData:(id)a2 imageHashData:(id)a3 wallpaperOptions:(id)a4 forVariants:(long long)a5 options:(unsigned long long)a6 wallpaperMode:(long long)a7 isMigrating:(BOOL)a8;
- (BOOL)setVideoURL:(id)a0 forVariant:(long long)a1 shoudCrop:(BOOL)a2 relativeCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 wallpaperMode:(long long)a4;
- (BOOL)variantsShareWallpaperConfigurationForTypes:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRectForOldCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 portrait:(BOOL)a1 zoomScale:(double)a2 oldParallaxFactor:(double)a3 forImageSize:(struct CGSize { double x0; double x1; })a4 newZoomScale:(double *)a5;
- (id)homeScreenWallpaperConfigurationIncludingValuesForTypes:(unsigned long long)a0;
- (id)wallpaperImageHashDataForVariant:(long long)a0 wallpaperMode:(long long)a1;

@end

@class ABPK2DDetectionResult;

@interface ABPK2DExtrapolationFiltering : NSObject {
    struct SkeletonJointFilter<float> { struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_values; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_speed; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } m_timestamps; float m_smoothing; float m_lowest_threshold; float m_low_threshold; float m_high_threshold; float m_highest_threshold; float m_temporal_smoothing; float m_prediction_factor; float m_min_smoothing; float m_up_slope; float m_down_slope; float m_temporal_slope; } _extrapolationFilter2D;
    double _extrapolationTime;
    struct SkeletonJointFilter<float> { struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_values; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_speed; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } m_timestamps; float m_smoothing; float m_lowest_threshold; float m_low_threshold; float m_high_threshold; float m_highest_threshold; float m_temporal_smoothing; float m_prediction_factor; float m_min_smoothing; float m_up_slope; float m_down_slope; float m_temporal_slope; } _extrapolationFilter2DForLiftingData;
    struct Human { struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } keypoints; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } _jointsTrackingState; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _confidence; struct optional<std::vector<float __attribute__((ext_vector_type(2)))>> { union { char __null_state_; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } __val_; } ; BOOL __engaged_; } _jointVector; unsigned long long _trackedJointsCount; struct optional<float> { union { char __null_state_; float __val_; } ; BOOL __engaged_; } _area; } _trackedHuman;
    struct Human { struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } keypoints; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } _jointsTrackingState; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _confidence; struct optional<std::vector<float __attribute__((ext_vector_type(2)))>> { union { char __null_state_; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } __val_; } ; BOOL __engaged_; } _jointVector; unsigned long long _trackedJointsCount; struct optional<float> { union { char __null_state_; float __val_; } ; BOOL __engaged_; } _area; } _rawTrackedHuman;
    BOOL _shouldPush3DSupportSkeleton;
    BOOL _use3DSupportSkeletonForExtrapolation;
    struct vector<abpk::Human, std::allocator<abpk::Human>> { struct Human *__begin_; struct Human *__end_; struct __compressed_pair<abpk::Human *, std::allocator<abpk::Human>> { struct Human *__value_; } __end_cap_; } _rawTrackedHumanVector;
    struct Human { struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } keypoints; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } _jointsTrackingState; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } _confidence; struct optional<std::vector<float __attribute__((ext_vector_type(2)))>> { union { char __null_state_; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } __val_; } ; BOOL __engaged_; } _jointVector; unsigned long long _trackedJointsCount; struct optional<float> { union { char __null_state_; float __val_; } ; BOOL __engaged_; } _area; } _trackedHumanForLifting;
    struct __wrap_iter<const abpk::Human *> { struct Human *__i_; } _iteratorToTrackedInstance;
    unsigned long long _lastANSTTrackedInstanceId;
    double _lastANSTTrackedInstanceIdTime;
}

@property (readonly, nonatomic) ABPK2DDetectionResult *aligned3DSkeleton;

- (id).cxx_construct;
- (void).cxx_destruct;
- (const void *)rawTrackedHuman;
- (struct Human { struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *x0; } **x0; } x0; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *x0; } x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct optional<std::vector<float __attribute__((ext_vector_type(2)))>> { union { char x0; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *x0; } **x0; } x1; } x0; BOOL x1; } x3; unsigned long long x4; struct optional<float> { union { char x0; float x1; } x0; BOOL x1; } x5; })_getTrackedHumanForHumans:(struct vector<abpk::Human, std::allocator<abpk::Human>> { struct Human *x0; struct Human *x1; struct __compressed_pair<abpk::Human *, std::allocator<abpk::Human>> { struct Human *x0; } x2; })a0 atTimestamp:(double)a1 withImageResolution:(struct CGSize { double x0; double x1; })a2;
- (struct Human { struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *x0; } **x0; } x0; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *x0; } x2; } x1; struct vector<float, std::allocator<float>> { float *x0; float *x1; struct __compressed_pair<float *, std::allocator<float>> { float *x0; } x2; } x2; struct optional<std::vector<float __attribute__((ext_vector_type(2)))>> { union { char x0; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *x0; } **x0; } x1; } x0; BOOL x1; } x3; unsigned long long x4; struct optional<float> { union { char x0; float x1; } x0; BOOL x1; } x5; })_getTrackedHumanForHumans:(struct vector<abpk::Human, std::allocator<abpk::Human>> { struct Human *x0; struct Human *x1; struct __compressed_pair<abpk::Human *, std::allocator<abpk::Human>> { struct Human *x0; } x2; })a0 atTimestamp:(double)a1 withImageResolution:(struct CGSize { double x0; double x1; })a2 withPersonTracker:(id)a3;
- (id)initWithUse3DSkeletonForExtrapolation:(BOOL)a0 shouldPush3DSupportSkeleton:(BOOL)a1 withExtrapolationTime:(double)a2;
- (int)performExtrapolationOnHumans:(struct vector<abpk::Human, std::allocator<abpk::Human>> { struct Human *x0; struct Human *x1; struct __compressed_pair<abpk::Human *, std::allocator<abpk::Human>> { struct Human *x0; } x2; })a0 withImageResolution:(struct CGSize { double x0; double x1; })a1 atTimestamp:(double)a2 rotationNeeded:(long long)a3 previousSkeleton3D:(id)a4;
- (int)performExtrapolationOnHumans:(struct vector<abpk::Human, std::allocator<abpk::Human>> { struct Human *x0; struct Human *x1; struct __compressed_pair<abpk::Human *, std::allocator<abpk::Human>> { struct Human *x0; } x2; })a0 withImageResolution:(struct CGSize { double x0; double x1; })a1 atTimestamp:(double)a2 rotationNeeded:(long long)a3 previousSkeleton3D:(id)a4 personTracker:(id)a5;
- (const void *)rawTrackedHumanVector;
- (const void *)trackedHuman;
- (const void *)trackedHumanForLifting;

@end

@class NSString;

@interface BNBannerLayoutManager : NSObject <BNLayoutManagingPrivate, BNLayoutManaging>

@property (nonatomic) struct BNBannerLayoutInfoV2 { unsigned long long presentationEdge; struct UIEdgeInsets { double top; double left; double bottom; double right; } contentInsets; struct CGSize { double width; double height; } maximumContentSize; double interBannerSpacing; } layoutInfoV2;
@property (nonatomic) struct BNBannerLayoutInfo { unsigned long long presentationEdge; struct UIEdgeInsets { double top; double left; double bottom; double right; } contentInsets; struct CGSize { double width; double height; } maximumContentSize; } layoutInfo;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_dismissedFrameForContentWithPreferredSize:(struct CGSize { double x0; double x1; })a0 inUseableContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 containerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 layoutInfo:(struct BNBannerLayoutInfoV2 { unsigned long long x0; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x1; struct CGSize { double x0; double x1; } x2; double x3; })a3 overshoot:(BOOL)a4 scale:(double)a5;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_presentedFrameForContentWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 afterContentWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 layoutInfo:(struct BNBannerLayoutInfoV2 { unsigned long long x0; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x1; struct CGSize { double x0; double x1; } x2; double x3; })a2;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_presentedFrameForContentWithPreferredSize:(struct CGSize { double x0; double x1; })a0 inUseableContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 containerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 layoutInfo:(struct BNBannerLayoutInfoV2 { unsigned long long x0; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x1; struct CGSize { double x0; double x1; } x2; double x3; })a3 scale:(double)a4;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_useableContainerFrameInContainerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inWindow:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_useableContainerFrameInContainerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_useableContainerFrameInContainerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1 interfaceOrientation:(long long)a2;

- (id)init;
- (struct BNBannerLayoutInfoV2 { unsigned long long x0; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x1; struct CGSize { double x0; double x1; } x2; double x3; })_effectiveLayoutInfo;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dismissedFrameForContentWithPreferredSize:(struct CGSize { double x0; double x1; })a0 inUseableContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 containerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 overshoot:(BOOL)a3 scale:(double)a4;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })presentedFrameForContentWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 afterContentWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })presentedFrameForContentWithPreferredSize:(struct CGSize { double x0; double x1; })a0 inUseableContainerFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 containerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 scale:(double)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })useableContainerFrameInContainerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inWindow:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })useableContainerFrameInContainerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })useableContainerFrameInContainerBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 onScreen:(id)a1 interfaceOrientation:(long long)a2;

@end

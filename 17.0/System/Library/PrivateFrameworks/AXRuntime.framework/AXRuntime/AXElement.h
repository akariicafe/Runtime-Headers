@class AXElementGroup, NSArray, NSString, NSURL, AXUIElement, NSDictionary;

@interface AXElement : NSObject <AXGroupable>

@property (class, readonly, nonatomic) AXElement *systemEventDispatchElement;

@property (retain, nonatomic) AXUIElement *uiElement;
@property (retain, nonatomic) AXElement *cachedRemoteParent;
@property (retain, nonatomic) AXElement *cachedRemoteParentForContextID;
@property (retain, nonatomic) struct CGPath { } *cachedPath;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cachedFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cachedVisibleFrame;
@property (readonly, nonatomic) struct __AXUIElement { } *elementRef;
@property (readonly, nonatomic) BOOL isSystemWideElement;
@property (nonatomic, getter=isPassivelyListeningForEvents) BOOL passivelyListeningForEvents;
@property (readonly, nonatomic) AXElement *currentApplication;
@property (readonly, nonatomic) NSArray *currentApplications;
@property (readonly, nonatomic) NSArray *currentApplicationsIgnoringSiri;
@property (readonly, nonatomic) AXElement *springBoardApplication;
@property (readonly, nonatomic) AXElement *systemApplication;
@property (readonly, nonatomic) AXElement *accessibilityUIServerApplication;
@property (readonly, nonatomic) BOOL isScreenLocked;
@property (readonly, nonatomic) long long applicationOrientation;
@property (readonly, nonatomic) NSArray *visibleElements;
@property (readonly, nonatomic) AXElement *firstResponder;
@property (readonly, nonatomic) AXElement *nativeFocusElement;
@property (readonly, nonatomic) AXElement *nativeFocusPreferredElement;
@property (readonly, nonatomic) AXElement *firstElementInApplication;
@property (readonly, nonatomic) AXElement *firstElementInApplicationForFocus;
@property (readonly, nonatomic) NSString *bundleId;
@property (readonly, nonatomic) NSString *processName;
@property (readonly, nonatomic) BOOL isSpringBoard;
@property (readonly, nonatomic) BOOL isSystemApplication;
@property (readonly, nonatomic) BOOL isControlCenterVisible;
@property (readonly, nonatomic) BOOL isDictationListening;
@property (readonly, nonatomic) BOOL isAXUIServer;
@property (readonly, nonatomic) NSArray *explorerElements;
@property (readonly, nonatomic) NSArray *nativeFocusableElements;
@property (readonly, nonatomic) NSArray *elementsWithSemanticContext;
@property (readonly, nonatomic) NSArray *siriContentNativeFocusableElements;
@property (readonly, nonatomic) NSArray *siriContentElementsWithSemanticContext;
@property (readonly, nonatomic) NSString *focusedSceneIdentifier;
@property (readonly, nonatomic) AXElement *currentFocusContainer;
@property (readonly, nonatomic) AXElement *application;
@property (readonly, nonatomic) BOOL isAccessibleElement;
@property (readonly, nonatomic) BOOL isVisible;
@property (readonly, nonatomic) NSString *label;
@property (readonly, nonatomic) NSString *speakThisString;
@property (readonly, nonatomic) NSString *localizedStringKey;
@property (readonly, nonatomic) NSString *localizationBundleID;
@property (readonly, nonatomic) NSString *localizationBundlePath;
@property (readonly, nonatomic) NSString *localizedStringTableName;
@property (readonly, nonatomic) NSString *hint;
@property (readonly, nonatomic) NSString *speechInputLabel;
@property (readonly, nonatomic) NSArray *userInputLabels;
@property (nonatomic) NSString *value;
@property (readonly, nonatomic) struct CGPath { } *path;
@property (readonly, nonatomic) NSURL *url;
@property (readonly, nonatomic) NSString *language;
@property (readonly, nonatomic) NSString *identifier;
@property (readonly, nonatomic) unsigned long long traits;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } visibleFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } textCursorFrame;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } centerPoint;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } visiblePoint;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } focusableFrameForZoom;
@property (readonly, nonatomic) BOOL isValid;
@property (readonly, nonatomic) AXElement *touchContainer;
@property (readonly, nonatomic) AXElement *accessibleAncestor;
@property (readonly, nonatomic) NSArray *accessibleDescendants;
@property (readonly, nonatomic) unsigned long long containerType;
@property (readonly, nonatomic) BOOL isKeyboardKey;
@property (readonly, nonatomic) BOOL isTouchContainer;
@property (readonly, nonatomic) BOOL hasWebContent;
@property (readonly, nonatomic) BOOL hasTextEntry;
@property (readonly, nonatomic) BOOL isMathEquation;
@property (readonly, nonatomic) unsigned int windowContextId;
@property (readonly, nonatomic) NSString *fbSceneIdentifier;
@property (readonly, nonatomic) unsigned int windowDisplayId;
@property (readonly, nonatomic) NSString *windowSceneIdentifier;
@property (readonly, nonatomic) NSArray *variantKeys;
@property (readonly, nonatomic) BOOL hasVariantKeys;
@property (readonly, nonatomic) NSArray *textOperations;
@property (readonly, nonatomic) NSArray *typingCandidates;
@property (nonatomic) BOOL assistiveTechFocused;
@property (readonly, nonatomic) NSArray *customActions;
@property (readonly, nonatomic) NSArray *customContent;
@property (readonly, nonatomic) NSArray *drags;
@property (readonly, nonatomic) NSArray *drops;
@property (readonly, nonatomic) BOOL isAccessibilityOpaqueElementProvider;
@property (readonly, nonatomic) NSDictionary *semanticContext;
@property (readonly, nonatomic) AXElement *remoteParent;
@property (readonly, nonatomic) AXElement *elementParent;
@property (readonly, nonatomic) unsigned long long scanningBehaviorTraits;
@property (readonly, nonatomic) int pid;
@property (readonly, nonatomic) BOOL applicationIsModal;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } rowRange;
@property (readonly, nonatomic) BOOL required;
@property (readonly, nonatomic) NSString *roleDescription;
@property (readonly, nonatomic) NSString *textualContext;
@property (readonly, nonatomic) BOOL isComboBox;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedTextRange;
@property (readonly, nonatomic, getter=isNativeFocused) BOOL nativeFocus;
@property (readonly, nonatomic) BOOL canPerformEscape;
@property (readonly, nonatomic) BOOL canPerformZoom;
@property (readonly, nonatomic) NSString *elementTransactionSummary;
@property (readonly, nonatomic) NSArray *supportedGestures;
@property (readonly, nonatomic) AXElement *elementForTextInsertionAndDeletion;
@property (readonly, nonatomic) BOOL respondsToUserInteraction;
@property (readonly, nonatomic) BOOL isScannerElement;
@property (readonly, nonatomic) BOOL representsScannerGroup;
@property (readonly, nonatomic) long long scannerActivateBehavior;
@property (retain, nonatomic) AXElement *autoscrollTarget;
@property (readonly, nonatomic) BOOL isAutoscrolling;
@property (readonly, nonatomic) NSArray *children;
@property (readonly, nonatomic) NSArray *parent;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (nonatomic) AXElementGroup *parentGroup;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)elementWithAXUIElement:(struct __AXUIElement { } *)a0;
+ (id)elementWithUIElement:(id)a0;
+ (id)systemApplication;
+ (id)applicationAtCoordinate:(struct CGPoint { double x0; double x1; })a0;
+ (id)elementAtCoordinate:(struct CGPoint { double x0; double x1; })a0 withVisualPadding:(BOOL)a1;
+ (id)elementAtCoordinate:(struct CGPoint { double x0; double x1; })a0 withVisualPadding:(BOOL)a1 displayID:(unsigned int)a2;
+ (id)elementWithData:(id)a0;
+ (id)elementsWithUIElements:(id)a0;
+ (id)primaryApp;
+ (void)registerNotifications:(id)a0 withIdentifier:(id)a1 withHandler:(id /* block */)a2;
+ (id)systemWideElement;
+ (void)unregisterNotifications:(id)a0;

- (BOOL)longPress;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromContextId:(unsigned int)a1;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toContextId:(unsigned int)a1;
- (void)_updateLabel;
- (BOOL)isGroup;
- (void)dealloc;
- (BOOL)performAction:(int)a0;
- (void)scrollToTop;
- (BOOL)zoomOut;
- (void)insertText:(id)a0;
- (void).cxx_destruct;
- (BOOL)zoomIn;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromContextId:(unsigned int)a1 displayId:(unsigned int)a2;
- (BOOL)isEqual:(id)a0;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toContextId:(unsigned int)a1 displayId:(unsigned int)a2;
- (id)serializeToData;
- (id)accessibilityLocalizedStringKey;
- (BOOL)press;
- (BOOL)supportsAction:(int)a0;
- (id)accessibilityLocalizationBundleID;
- (id)accessibilityLocalizationBundlePath;
- (id)accessibilityLocalizedStringTableName;
- (BOOL)autoscrollInDirection:(unsigned long long)a0;
- (void)scrollToBottom;
- (void)setAutoscrollSpeed:(double)a0;
- (double)distanceToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)deleteText;
- (id)elementsForAttribute:(long long)a0 parameter:(id)a1;
- (BOOL)scrollToVisible;
- (BOOL)showContextMenu;
- (BOOL)pressTVUpButton;
- (id)_axElementsForAXUIElements:(id)a0;
- (id)_elementForAttribute:(long long)a0 shouldUpdateCache:(BOOL)a1 shouldFetchAttributes:(BOOL)a2;
- (id)_makeTinkerKitRequest:(id)a0;
- (id)_objectForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withParameterizedAttribute:(long long)a1;
- (BOOL)_performActivate;
- (id)_remoteParentForContextID;
- (BOOL)_showContextMenuWithTargetPointValue:(id)a0;
- (id)_textOperationsOperator;
- (id)_uiElementForTextInsertionAndDeletion;
- (BOOL)_zoomInOrOut:(BOOL)a0;
- (id)alternativesForTextAtPosition:(unsigned long long)a0;
- (id)auditIssuesForOptions:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)canPerformActivate;
- (BOOL)canPerformSecondaryActivate;
- (BOOL)canPerformTrackingDetail;
- (BOOL)canScrollInAtLeastOneDirection;
- (id)carPlaySystemApplication;
- (void)clearCachedFrame:(BOOL)a0 cachedVisibleFrame:(BOOL)a1;
- (id)containerTypes;
- (unsigned int)contextIdForPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPath { } *)convertPath:(struct CGPath { } *)a0 fromContextId:(unsigned int)a1;
- (struct CGPath { } *)convertPath:(struct CGPath { } *)a0 fromContextId:(unsigned int)a1 displayId:(unsigned int)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromContextId:(unsigned int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromContextId:(unsigned int)a1 displayId:(unsigned int)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toContextId:(unsigned int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toContextId:(unsigned int)a1 displayId:(unsigned int)a2;
- (void)decreaseAutoscrollSpeed;
- (unsigned int)displayIdForContextId:(unsigned int)a0;
- (double)distanceToElement:(id)a0;
- (id)elementForAttribute:(long long)a0;
- (id)elementForAttribute:(long long)a0 parameter:(id)a1;
- (id)elementForAttribute:(long long)a0 shouldFetchAttributes:(BOOL)a1;
- (id)elementsForAttribute:(long long)a0;
- (id)elementsMatchingText:(id)a0;
- (BOOL)eligibleForIconVision;
- (id)firstResponderForFocus;
- (id)focusContainersForCurrentSceneIdentifier:(id)a0;
- (BOOL)hasAllTraits:(unsigned long long)a0;
- (BOOL)hasAnyTraits:(unsigned long long)a0;
- (BOOL)hasOnlyTraits:(unsigned long long)a0;
- (id)highestAncestorGroup;
- (void)increaseAutoscrollSpeed;
- (id)initWithAXUIElement:(struct __AXUIElement { } *)a0;
- (id)initWithUIElement:(id)a0;
- (void)insertText:(id)a0 asUndoableAction:(BOOL)a1;
- (void)insertTextWithAlternatives:(id)a0;
- (BOOL)isMap;
- (id)keyboardContainer;
- (id)makeLookingGlassRequest:(id)a0;
- (id)nextElementsWithCount:(unsigned long long)a0;
- (void)pauseAutoscrolling;
- (BOOL)performAction:(int)a0 withValue:(id)a1;
- (BOOL)pressTVBackButton;
- (BOOL)pressTVDataOnScreenButton;
- (BOOL)pressTVDownButton;
- (BOOL)pressTVFastForwardButton;
- (BOOL)pressTVLeftButton;
- (BOOL)pressTVMenuButton;
- (BOOL)pressTVMicButton;
- (BOOL)pressTVNextTrackButton;
- (BOOL)pressTVPauseButton;
- (BOOL)pressTVPlayButton;
- (BOOL)pressTVPlayPauseButton;
- (BOOL)pressTVPreviousTrackButton;
- (BOOL)pressTVRewindButton;
- (BOOL)pressTVRightButton;
- (BOOL)pressTVSelectButton;
- (BOOL)pressTVSkipBackwardsButton;
- (BOOL)pressTVSkipForwardsButton;
- (BOOL)pressTVStopButton;
- (id)previousElementsWithCount:(unsigned long long)a0;
- (id)remoteApplication;
- (struct __AXUIElement { } *)scrollAncestorForScrollAction:(int)a0;
- (void)sendUserEventOccurred;
- (BOOL)setNativeFocus;
- (BOOL)systemLongPressTVHomeButton;
- (BOOL)systemLongPressTVMenuButton;
- (BOOL)systemPressTVDownButton;
- (BOOL)systemPressTVHomeButton;
- (BOOL)systemPressTVLeftButton;
- (BOOL)systemPressTVMenuButton;
- (BOOL)systemPressTVPlayPauseButton;
- (BOOL)systemPressTVRightButton;
- (BOOL)systemPressTVSelectButton;
- (BOOL)systemPressTVSiriButton;
- (BOOL)systemPressTVUpButton;
- (void)updateCache:(long long)a0;
- (BOOL)viewHierarchyHasNativeFocus;

@end

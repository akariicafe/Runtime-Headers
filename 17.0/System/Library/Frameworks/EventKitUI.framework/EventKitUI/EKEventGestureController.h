@class _UIDragSnappingFeedbackGenerator, UITapGestureRecognizer, EKCalendarDate, EKUIRecurrenceAlertController, UIDropInteraction, UIView, EKEvent, NSString, UILongPressGestureRecognizer, EKUIEmailCompositionManager, NSTimer, EKDayOccurrenceView, EKICSPreviewController, UIDragInteraction;
@protocol EKEventGestureControllerUntimedDelegate, EKEventGestureControllerDelegate;

@interface EKEventGestureController : NSObject <UIDropInteractionDelegate, UIDragInteractionDelegate, EKICSPreviewControllerDelegate, UIGestureRecognizerDelegate, UIAlertViewDelegate> {
    UILongPressGestureRecognizer *_draggingGestureRecognizer;
    UITapGestureRecognizer *_tapGestureRecognizer;
    UIView *_targetView;
    int _currentDraggingState;
    int _pendingDraggingState;
    int _queuedDraggingState;
    BOOL _dragCompletionPending;
    BOOL _dropAnimationInProgress;
    BOOL _waitingForDragToInitialize;
    BOOL _needToSetSystemDragPreview;
    BOOL _dragInitiationLocked;
    BOOL _dragInteractionCancellingWithoutDragging;
    int _snappingTypeForCurrentDrag;
    int _currentDragType;
    double _firstTouchTime;
    struct CGPoint { double x; double y; } _previousTouchPoint;
    double _previousTouchTime;
    double _previousTouchVelocity;
    long long _touchOffsetDays;
    double _dateAtFirstTouchPoint;
    BOOL _isNewEvent;
    BOOL _isInCancelRegion;
    BOOL _isMultiDayTimedEvent;
    EKCalendarDate *_currentDay;
    BOOL _horizontalDragLocked;
    BOOL _dragLockDisabled;
    BOOL _isDragging;
    NSTimer *_scrollTimer;
    double _timeSinceEnteredPageMargin;
    double _firstContactOfDraggingViewTop;
    BOOL _hasStartedScrolling;
    long long _consecutivePageTurnCount;
    BOOL _forcedStart;
    BOOL _needsCommit;
    EKUIRecurrenceAlertController *_recurrenceAlertController;
    _UIDragSnappingFeedbackGenerator *_dragSnappingFeedback;
    EKICSPreviewController *_currentICSPreviewController;
    UIDropInteraction *_dropInteraction;
    UIDragInteraction *_dragInteraction;
    long long _currentDropDataOwnerCache;
    UITapGestureRecognizer *_multiSelectGestureRecognizer;
}

@property (retain, nonatomic) EKEvent *event;
@property (retain, nonatomic) NSString *sessionIdentifierForDebug;
@property (retain, nonatomic) EKDayOccurrenceView *draggingViewSource;
@property (retain, nonatomic) EKUIEmailCompositionManager *messageSendingManager;
@property (weak, nonatomic) id<EKEventGestureControllerUntimedDelegate> untimedDelegate;
@property (weak, nonatomic) id<EKEventGestureControllerDelegate> delegate;
@property (nonatomic) BOOL usesXDragOffsetInCancelRegion;
@property (nonatomic) BOOL usesHorizontalDragLocking;
@property (nonatomic) BOOL commitBlocked;
@property (readonly, nonatomic) struct CGPoint { double x; double y; } firstTouchPoint;
@property (readonly, nonatomic) struct CGPoint { double x; double y; } latestTouchPoint;
@property (readonly, nonatomic) struct CGPoint { double x; double y; } touchOffset;
@property (readonly, nonatomic) EKDayOccurrenceView *draggingView;
@property (readonly, nonatomic) BOOL dragGestureInProgress;
@property (readonly, nonatomic) int currentDragSnappingType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_captureImageOfOccurrenceView:(id)a0 withFrameOfOpaqueContent:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;

- (id)initWithView:(id)a0;
- (void)_cancel;
- (void)endForcedStartAndUndim;
- (void)removeDraggedOccurrence;
- (void)_commit;
- (long long)_dragInteraction:(id)a0 dataOwnerForAddingToSession:(id)a1 withTouchAtPoint:(struct CGPoint { double x0; double x1; })a2;
- (void)_update;
- (void)_writeDraggingChangesToOccurrenceWithTouchPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)dragInteraction:(id)a0 session:(id)a1 willEndWithOperation:(unsigned long long)a2;
- (void)_updateFlingToCancelParameters;
- (void)_dragInteractionDidCancelLiftWithoutDragging:(id)a0;
- (id)_clippingPathForDraggingView;
- (id)_debugStringForDraggingState:(int)a0;
- (void)_manageFeedbackForStateChangeFrom:(int)a0 to:(int)a1;
- (void)liftUpOccurrenceForEditingEvent:(id)a0;
- (id)dragInteraction:(id)a0 itemsForBeginningSession:(id)a1;
- (BOOL)dragInteraction:(id)a0 prefersFullSizePreviewsForSession:(id)a1;
- (void)dealloc;
- (id)_acceptedNonFileExternalTypes;
- (BOOL)dragInteraction:(id)a0 sessionIsRestrictedToDraggingApplication:(id)a1;
- (void)_setupEvent:(id)a0 withImportData:(id)a1;
- (BOOL)_setDraggingState:(int)a0 withPoint:(struct CGPoint { double x0; double x1; })a1 event:(id)a2 context:(id)a3;
- (BOOL)_beginNewDragFromOffStateWithPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updateDraggingOccurrenceFrame;
- (void)icsPreviewControllerImportDidImportEvents:(id)a0;
- (id)_createTemporaryView:(id)a0 animated:(BOOL)a1;
- (BOOL)gestureRecognizer:(id)a0 shouldReceiveTouch:(id)a1;
- (BOOL)dragInteraction:(id)a0 sessionAllowsMoveOperation:(id)a1;
- (void)_tapGesture:(id)a0;
- (long long)_dragInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (void)_setEventCalendar:(id)a0 useManagedCalendar:(BOOL)a1;
- (void)_enableSystemPreviewForDrag:(id)a0;
- (void)dropInteraction:(id)a0 item:(id)a1 willAnimateDropWithAnimator:(id)a2;
- (double)_alignedYOriginForAllDayOccurrence:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 floorAtAllDayRegionBottom:(BOOL)a2;
- (double)_capOccurrenceViewYOrigin:(double)a0;
- (void)dragInteraction:(id)a0 session:(id)a1 didEndWithOperation:(unsigned long long)a2;
- (void)_animateInNewEvent;
- (void)attemptDisplayReviewPrompt;
- (double)_Debug_HoursSinceStartOfDay:(double)a0;
- (double)_cancelRegionMargin;
- (BOOL)canProposeNewTime:(id)a0;
- (void)updateDraggingOccurrenceFrameFromSource;
- (long long)_dropInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (id)originalStartDateForEvent:(id)a0 includingTravel:(BOOL)a1;
- (BOOL)_calendarCanAcceptManagedData:(id)a0;
- (id)_eventToUseAtInteractionStart:(struct CGPoint { double x0; double x1; })a0;
- (double)_minimumDuration;
- (void)dropInteraction:(id)a0 sessionDidEnd:(id)a1;
- (id)_findFirstCalendar:(id)a0;
- (void)_handleImportingICSData:(id)a0 intoEventStore:(id)a1;
- (void)dragInteraction:(id)a0 sessionWillBegin:(id)a1;
- (id)dropInteraction:(id)a0 previewForDroppingItem:(id)a1 withDefault:(id)a2;
- (void)icsPreviewControllerWantsDismissal:(id)a0;
- (BOOL)dropInteraction:(id)a0 canHandleSession:(id)a1;
- (void)_manageDraggingViewInteractivityForStateChangeFrom:(int)a0 to:(int)a1;
- (BOOL)_dropSessionRequiresExternalDataExtraction:(id)a0;
- (void)invalidate;
- (void)dropInteraction:(id)a0 performDrop:(id)a1;
- (void)updateDraggingOccurrenceForced:(BOOL)a0 animated:(BOOL)a1;
- (void)_dismissCurrentICSPreviewControllerAnimated:(BOOL)a0;
- (void)icsPreviewControllerImportDidFail:(id)a0;
- (id)dropInteraction:(id)a0 sessionDidUpdate:(id)a1;
- (void)_scrollTimerFired:(id)a0;
- (BOOL)_flingOrCancelDraggingViewIfNeeded;
- (void)dropInteraction:(id)a0 concludeDrop:(id)a1;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)dropInteraction:(id)a0 sessionDidEnter:(id)a1;
- (id)_acceptedExternalTypes;
- (id)_createNewEventIfNeededAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)_allDayBottomPadding;
- (void)_setUpInitialTouchPointsWithPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_getEventUsingDropSession:(id)a0;
- (void)_longPress:(id)a0;
- (id)dragInteraction:(id)a0 previewForLiftingItem:(id)a1 session:(id)a2;
- (void)promptUserForRecurrenceActionOnOccurrence:(id)a0 whenFinished:(id /* block */)a1;
- (void)_setToLocalDraggingImageForDrag:(id)a0;
- (void)dropInteraction:(id)a0 sessionDidExit:(id)a1;
- (BOOL)_setDraggingState:(int)a0 withPoint:(struct CGPoint { double x0; double x1; })a1 event:(id)a2;
- (void)_cleanUpAllStateWithTouchPoint:(struct CGPoint { double x0; double x1; })a0 commit:(BOOL)a1;
- (void)_createAndSetUpDraggingViewWithTouchPoint:(struct CGPoint { double x0; double x1; })a0 event:(id)a1 ignoreOffsets:(BOOL)a2 showEditMenu:(BOOL)a3;
- (void)endForcedStart;
- (id)_findLocalDragItemInSession:(id)a0;
- (void)didCrossDragBoundary:(int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calculateFrameForDraggingViewIncludingTravelTime:(BOOL)a0;
- (void)_setLocalDraggingViewHidden:(BOOL)a0;
- (BOOL)_shouldUseSystemAPIForDrag;
- (void)_setToSystemDraggingImageForDrag:(id)a0;
- (void)_hideEditingMenuForView:(id)a0;
- (void)_adjustNewEventDates:(id)a0 withPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)_setTouchOffsetsFromPoint:(struct CGPoint { double x0; double x1; })a0 fixedToCenter:(BOOL)a1;
- (void)_dragFailedToStart;
- (double)_computeHeightForOccurrenceViewOfDuration:(double)a0 event:(id)a1 allDay:(BOOL)a2;
- (void)_icsPreviewControllerCancelButtonPressed;
- (void)_setUpAfterForcedStartFromPoint:(struct CGPoint { double x0; double x1; })a0;
- (void).cxx_destruct;
- (void)_updateSnappingTypeForCurrentDrag;
- (int)_draggingState;
- (BOOL)_useNewDragAndDropAPI;
- (BOOL)_beginEditingSessionAtPoint:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (BOOL)_isTouchFromDragSessionInResizeHandles:(id)a0;
- (void)_removeScrollTimer;
- (void)_cleanUpForcedStart;
- (void)_resumePreviousDrag;
- (unsigned long long)numberOfDragSourcesForView:(id)a0;
- (id)_viewForTracking;
- (struct CGPoint { double x0; double x1; })_computeOriginAtTouchPoint:(struct CGPoint { double x0; double x1; })a0 forDate:(double)a1 isAllDay:(BOOL)a2 allowXOffset:(BOOL)a3 allowFloorAtRegionBottom:(BOOL)a4;
- (void)_disableSystemPreviewForDrag:(id)a0;
- (BOOL)_isPointInCancelRegion:(struct CGPoint { double x0; double x1; })a0;
- (void)forceStartWithOccurrence:(id)a0 shouldUpdateViewSource:(BOOL)a1 shouldUpdateOrigin:(BOOL)a2 shouldPresentEditMenu:(BOOL)a3;
- (void)_extractFileFromSession:(id)a0;
- (void)_updatePositionOfEditingMenuForView:(id)a0;
- (void)_commitUntimed;
- (void)_returnDraggingViewToLastCommittedPositionFromTouchPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_updateHorizontalDragLockForPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })_estimateFinalDropOriginForTimedDelegate;
- (id)_acceptedFileExternalTypes;
- (id)_captureImageOfDraggingView;
- (void)_suspendCurrentDrag;
- (double)_computeWidthForOccurrenceView;
- (void)_handleShowingEventWithUniqueId:(id)a0 date:(id)a1 eventStore:(id)a2;
- (BOOL)__timedDelegateBeginEditingSessionAtPoint:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)promptUserForProposeNewTime:(id)a0 forEvent:(id)a1 whenFinished:(id /* block */)a2;
- (unsigned long long)_dropOperationGivenDropSession:(id)a0;
- (void)_handleLongPressResponseForOldAPI:(id)a0;
- (id)_acceptedTypes;
- (void)_installScrollTimer;
- (BOOL)_dragInteraction:(id)a0 sessionSupportsSystemDrag:(id)a1;
- (void)updateDraggingOccurrence;
- (void)updateDraggingOccurrenceOrigin;
- (void)_presentICSPreviewControllerIfNeeded;
- (void)_multiSelect:(id)a0;

@end

@class MTLArchitecture, NSString, NSArray, MTLDeviceFeatureQueries, MTLResourceListPool, NSDictionary, MTLCompiler, NSObject, MTLGPUBVHBuilder, MTLTargetDeviceArchitecture, NSMutableArray, MTLLoader;
@protocol MTLRenderPipelineState, OS_dispatch_data, OS_dispatch_queue, MTLComputePipelineState;

@interface _MTLDevice : NSObject {
    struct { unsigned int maxFramebufferStorageBits; unsigned int linearTextureArrayAlignmentBytes; unsigned int linearTextureArrayAlignmentSlice; unsigned int maxTileBuffers; unsigned int maxTileTextures; unsigned int maxTileSamplers; unsigned int maxTileInlineDataSize; unsigned int minTilePixels; unsigned int maxColorAttachments; unsigned int maxVertexAttributes; unsigned int maxVertexBuffers; unsigned int maxVertexTextures; unsigned int maxVertexSamplers; unsigned int maxVertexInlineDataSize; unsigned int maxInterpolants; unsigned int maxFragmentBuffers; unsigned int maxFragmentTextures; unsigned int maxFragmentSamplers; unsigned int maxFragmentInlineDataSize; unsigned int maxComputeBuffers; unsigned int maxComputeTextures; unsigned int maxComputeSamplers; unsigned int maxComputeInlineDataSize; unsigned int maxComputeLocalMemorySizes; unsigned int maxTotalComputeThreadsPerThreadgroup; unsigned int maxComputeThreadgroupMemory; float maxLineWidth; float maxPointSize; unsigned int maxVisibilityQueryOffset; unsigned int padmaxBufferLength; unsigned int minConstantBufferAlignmentBytes; unsigned int minBufferNoCopyAlignmentBytes; unsigned int maxTextureWidth1D; unsigned int maxTextureWidth2D; unsigned int maxTextureHeight2D; unsigned int maxTextureWidth3D; unsigned int maxTextureHeight3D; unsigned int maxTextureDepth3D; unsigned int maxTextureDimensionCube; unsigned int maxTextureLayers; unsigned int linearTextureAlignmentBytes; unsigned int iosurfaceTextureAlignmentBytes; unsigned int iosurfaceReadOnlyTextureAlignmentBytes; unsigned int deviceLinearTextureAlignmentBytes; unsigned int deviceLinearReadOnlyTextureAlignmentBytes; unsigned int maxFunctionConstantIndices; unsigned int maxComputeThreadgroupMemoryAlignmentBytes; unsigned int maxInterpolatedComponents; unsigned int maxTessellationFactor; unsigned int maxIndirectBuffers; unsigned int maxIndirectTextures; unsigned int maxIndirectSamplers; unsigned int maxIndirectSamplersPerDevice; unsigned int maxFenceInstances; unsigned int maxViewportCount; unsigned int maxCustomSamplePositions; unsigned int maxVertexAmplificationFactor; unsigned int maxVertexAmplificationCount; unsigned int maxTextureBufferWidth; unsigned int maxComputeAttributes; unsigned int maxIOCommandsInFlight; unsigned int maxPredicatedNestingDepth; unsigned int maxAccelerationStructureLevels; unsigned int maxConstantBufferArguments; unsigned long long maxBufferLength; } _limits;
    void *_supportedGPUFamilies;
    NSObject<OS_dispatch_queue> *_pipelineSerializationQueue;
    BOOL _hasInitSerializationPaths;
    struct MTLCompilerConnectionManager { void /* function */ **x0; BOOL x1; int x2; } *_compilerConnectionManager;
    NSMutableArray *_progressTrackBufferStack;
    BOOL _needsEncoderTypeMatchingProgressBlits;
    id<MTLRenderPipelineState> _progressTrackRenderPipeline;
    id<MTLComputePipelineState> _progressTrackComputePipeline;
    MTLDeviceFeatureQueries *_featureQueries;
    _Atomic int _commandQueueCount;
    void *_libraryBuilder;
    struct MTLPipelineLibraryBuilder { id x0; id x1; } *_pipelineLibraryBuilder;
    void *_pipelineCollection;
    NSString *_pipelineDescriptorsOutputFile;
    NSString *_librariesOutputDirectory;
    BOOL _collectAllLibraries;
    BOOL _gpuAssertionsEnabled;
    MTLLoader *_dynamicLoader;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _GPUBVHBuilderLock;
    MTLGPUBVHBuilder *_GPUBVHBuilder;
    MTLResourceListPool *_akIOResourceListPool;
    struct once_flag { unsigned long long __state_; } _initProgressTrackingOnceToken;
    NSDictionary *_pluginData;
    NSObject<OS_dispatch_data> *_serializedPluginData;
    struct MTLArchiveMapDB { struct MDB_env *x0; unsigned int x1; BOOL x2; BOOL x3; } *_recompiledBinaryArchiveMap;
    struct MTLArchiveUsageDB { struct MDB_env *x0; unsigned int x1; BOOL x2; BOOL x3; } *_binaryArchiveUsage;
    BOOL _isFirstParty;
    BOOL _enableAssetUpgraderDaemon;
    MTLArchitecture *_architecture;
    struct once_flag { unsigned long long __state_; } _initConnectionOnceToken;
    BOOL _workaroundNewLibraryWithSourceImplicitInvariantPosition;
}

@property (readonly) BOOL workaroundNewLibraryWithSourceImplicitInvariantPosition;
@property (readonly, nonatomic) BOOL supportsBufferlessClientStorageTexture;
@property (readonly, nonatomic) BOOL supportsComputeMemoryBarrier;
@property (readonly, nonatomic) BOOL supportsRenderMemoryBarrier;
@property (readonly, nonatomic) BOOL supportsArgumentBuffersTier2;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureArgumentsTier2;
@property (readonly, nonatomic) BOOL supportsStreamingCodecSignaling;
@property (readonly, nonatomic) BOOL supportsProgrammableSamplePositions;
@property (readonly, nonatomic) BOOL supportsLargeFramebufferConfigs;
@property (readonly, nonatomic) BOOL supportsCustomBorderColor;
@property (readonly, nonatomic) BOOL supportsSamplerAddressModeClampToHalfBorder;
@property (readonly, nonatomic) BOOL supportsBCTextureCompression;
@property (readonly, nonatomic) BOOL supports3DBCTextures;
@property (readonly, nonatomic) BOOL supportsRGBA10A2Gamma;
@property (readonly, nonatomic) BOOL supportsBGR10A2;
@property (readonly, nonatomic) BOOL supportsPrimitiveRestartOverride;
@property (readonly, nonatomic) BOOL supportsGlobalVariableRelocation;
@property (readonly, nonatomic) BOOL supportsGlobalVariableRelocationRender;
@property (readonly, nonatomic) BOOL supportsGlobalVariableRelocationCompute;
@property (readonly, nonatomic) BOOL supportsTLS;
@property (readonly, nonatomic) BOOL supports32bpcMSAATextures;
@property (readonly, nonatomic) BOOL supports32BitMSAA;
@property (readonly, nonatomic) BOOL supports32BitFloatFiltering;
@property (readonly, nonatomic) BOOL supportsQueryTextureLOD;
@property (readonly, nonatomic) BOOL supportsVertexAmplification;
@property (readonly, nonatomic) BOOL supportsPlacementHeaps;
@property (readonly, nonatomic) BOOL supportsOpenCLTextureWriteSwizzles;
@property (readonly, nonatomic) BOOL supportsPullModelInterpolation;
@property (readonly, nonatomic) BOOL supportsInt64;
@property (readonly, nonatomic) BOOL supportsFixedLinePointFillDepthGradient;
@property (readonly, nonatomic) BOOL supportsLateEvalEvent;
@property (readonly, nonatomic) BOOL supportsNonZeroTextureWriteLOD;
@property (readonly, nonatomic) BOOL supportsSharedTextureHandles;
@property (readonly, nonatomic) BOOL supportsBufferPrefetchStatistics;
@property (readonly, nonatomic) BOOL supportsLimitedYUVFormats;
@property (readonly, nonatomic) BOOL supportsNonPrivateDepthStencilTextures;
@property (readonly, nonatomic) BOOL supportsNonPrivateMSAATextures;
@property (readonly, nonatomic) BOOL supportsSharedStorageHeapResources;
@property (readonly, nonatomic) BOOL supportsSharedStorageTextures;
@property (readonly, nonatomic) BOOL supportsLinearTextureFromSharedBuffer;
@property (readonly, nonatomic) BOOL supportsPipelineLibraries;
@property (readonly, nonatomic) BOOL supportsFragmentOnlyEncoders;
@property (readonly, nonatomic) BOOL supportsBufferWithIOSurface;
@property (readonly, nonatomic) BOOL supportsProgrammableBlending;
@property (readonly, nonatomic) BOOL supportsRenderToLinearTextures;
@property (readonly, nonatomic) BOOL supportsMemorylessRenderTargets;
@property (readonly, nonatomic) BOOL supportsFastMathInfNaNPropagation;
@property (readonly, nonatomic) BOOL supportsInvariantVertexPosition;
@property (readonly, nonatomic) BOOL supportsShaderLODAverage;
@property (readonly, nonatomic) BOOL supportsRelaxedTextureViewRequirements;
@property (readonly, nonatomic) BOOL supportsSeparateDepthStencil;
@property (readonly, nonatomic) BOOL supportsGPUStatistics;
@property (readonly, nonatomic) BOOL supportsCompressedTextureViewSPI;
@property (readonly, nonatomic) BOOL supportsRenderTargetTextureRotation;
@property (readonly, nonatomic) BOOL supportsDynamicControlPointCount;
@property (readonly, nonatomic) BOOL supportsIABHashForTools;
@property (readonly, nonatomic) BOOL supportsBinaryArchives;
@property (readonly, nonatomic) BOOL supportsBinaryLibraries;
@property (readonly, nonatomic) BOOL supportsDeadlineProfile;
@property (readonly, nonatomic) BOOL supportsFillTexture;
@property (readonly, nonatomic) BOOL supportsSetThreadgroupPackingDisabled;
@property (readonly, nonatomic) BOOL supportsASTCTextureCompression;
@property (readonly, nonatomic) BOOL supportsExtendedYUVFormats;
@property (readonly, nonatomic) BOOL supportsPublicXR10Formats;
@property (readonly, nonatomic) BOOL supportsSRGBwrites;
@property (readonly, nonatomic) BOOL supportsDepthClipMode;
@property (readonly, nonatomic) BOOL supportsPacked32TextureBufferWrites;
@property (readonly, nonatomic) BOOL supports3DASTCTextures;
@property (readonly, nonatomic) BOOL supportsExtendedXR10Formats;
@property (readonly, nonatomic) BOOL supportsFragmentBufferWrites;
@property (readonly, nonatomic) BOOL supportsCountingOcclusionQuery;
@property (readonly, nonatomic) BOOL supportsBaseVertexInstanceDrawing;
@property (readonly, nonatomic) BOOL supportsIndirectDrawAndDispatch;
@property (readonly, nonatomic) BOOL supportsTessellation;
@property (readonly, nonatomic) BOOL supportsReadWriteBufferArguments;
@property (readonly, nonatomic) BOOL supportsArrayOfTextures;
@property (readonly, nonatomic) BOOL supportsArrayOfSamplers;
@property (readonly, nonatomic) BOOL supportsCombinedMSAAStoreAndResolveAction;
@property (readonly, nonatomic) BOOL supportsMutableTier1ArgumentBuffers;
@property (readonly, nonatomic) BOOL supportsSamplerCompareFunction;
@property (readonly, nonatomic) BOOL supportsMSAADepthResolve;
@property (readonly, nonatomic) BOOL supportsMSAAStencilResolve;
@property (readonly, nonatomic) BOOL supportsMSAADepthResolveFilter;
@property (readonly, nonatomic) BOOL supportsGFXIndirectCommandBuffers;
@property (readonly, nonatomic) BOOL supportsCMPIndirectCommandBuffers;
@property (readonly, nonatomic) BOOL supportsIndirectStageInRegion;
@property (readonly, nonatomic) BOOL supportsIndirectTextures;
@property (readonly, nonatomic) BOOL supportsNorm16BCubicFiltering;
@property (readonly, nonatomic) BOOL supportsTextureOutOfBoundsReads;
@property (readonly, nonatomic) BOOL supportsTextureSwizzle;
@property (readonly, nonatomic) BOOL supportsAlphaYUVFormats;
@property (readonly, nonatomic) BOOL supportsMemoryOrderAtomics;
@property (readonly, nonatomic) BOOL supportsQuadGroup;
@property (readonly, nonatomic) BOOL supportsRenderTextureWrites;
@property (readonly, nonatomic) BOOL supportsImageBlocks;
@property (readonly, nonatomic) BOOL supportsTileShaders;
@property (readonly, nonatomic) BOOL supportsImageBlockSampleCoverageControl;
@property (readonly, nonatomic) BOOL supportsNativeHardwareFP16;
@property (readonly, nonatomic) BOOL supportsPostDepthCoverage;
@property (readonly, nonatomic) BOOL supportsMipLevelsSmallerThanBlockSize;
@property (readonly, nonatomic) BOOL supportsNonUniformThreadgroupSize;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureArguments;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureCubeArguments;
@property (readonly, nonatomic) BOOL supportsTextureCubeArray;
@property (readonly, nonatomic) BOOL supportsQuadShufflesAndBroadcast;
@property (readonly, nonatomic) BOOL supportsConcurrentComputeDispatch;
@property (readonly, nonatomic) BOOL supportsRenderPassWithoutRenderTarget;
@property (readonly, nonatomic) BOOL supportsRasterOrderGroups;
@property (readonly, nonatomic) BOOL supportsRasterOrderGroupsColorAttachment;
@property (readonly, nonatomic) BOOL supportsDynamicAttributeStride;
@property (readonly, nonatomic) BOOL supportsLinearTexture2DArray;
@property (readonly, nonatomic) BOOL supportsNonSquareTileShaders;
@property (readonly, nonatomic) BOOL supportsSeparateVisibilityAndShadingRate;
@property (readonly, nonatomic) BOOL supports2DLinearTexArraySPI;
@property (readonly, nonatomic) BOOL supportsLayeredRendering;
@property (readonly, nonatomic) BOOL supportsViewportAndScissorArray;
@property (readonly, nonatomic) BOOL supportsIndirectTessellation;
@property (readonly, nonatomic) BOOL supportsMSAAStencilResolveFilter;
@property (readonly, nonatomic) BOOL supportsStencilFeedback;
@property (readonly, nonatomic) BOOL supportsFP32TessFactors;
@property (readonly, nonatomic) BOOL supportsUnalignedVertexFetch;
@property (readonly, nonatomic) BOOL supportsExtendedVertexFormats;
@property (readonly, nonatomic) BOOL supportsSIMDGroup;
@property (readonly, nonatomic) BOOL supportsShaderMinLODClamp;
@property (readonly, nonatomic) BOOL supportsSIMDShufflesAndBroadcast;
@property (readonly, nonatomic) BOOL supportsWritableArrayOfTextures;
@property (readonly, nonatomic) BOOL supportsVariableRateRasterization;
@property (readonly, nonatomic) BOOL supportsYCBCRFormats;
@property (readonly, nonatomic) BOOL supportsYCBCRFormatsPQ;
@property (readonly, nonatomic) BOOL supportsYCBCRFormats12;
@property (readonly, nonatomic) BOOL supportsYCBCRFormatsXR;
@property (readonly, nonatomic) BOOL supportsASTCHDRTextureCompression;
@property (readonly, nonatomic) BOOL supportsSparseTextures;
@property (readonly, nonatomic) BOOL supportsSparseHeaps;
@property (readonly, nonatomic) BOOL supportsIndirectWritableTextures;
@property (readonly, nonatomic) BOOL supportsFunctionPointers;
@property (readonly, nonatomic) BOOL supportsDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsStatefulDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsRenderDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsFunctionPointersFromRender;
@property (readonly, nonatomic) BOOL supportsSharedFunctionTables;
@property (readonly, nonatomic) BOOL supportsRaytracingFromRender;
@property (readonly, nonatomic) BOOL supportsPrimitiveMotionBlur;
@property (readonly, nonatomic) BOOL supportsRayTracingExtendedVertexFormats;
@property (readonly, nonatomic) BOOL supportsHeapAccelerationStructureAllocation;
@property (readonly, nonatomic) BOOL supportsRayTracingPerPrimitiveData;
@property (readonly, nonatomic) BOOL supportsRayTracingTraversalMetrics;
@property (readonly, nonatomic) BOOL supportsRayTracingBuffersFromTables;
@property (readonly, nonatomic) BOOL supportsRayTracingAccelerationStructureCPUDeserialization;
@property (readonly, nonatomic) BOOL supportsRayTracingMultiLevelInstancing;
@property (readonly, nonatomic) BOOL supportsRayTracingIndirectInstanceAccelerationStructureBuild;
@property (readonly, nonatomic) BOOL supportsRayTracingGPUTableUpdateBuffers;
@property (readonly, nonatomic) BOOL supportsRayTracingCurves;
@property (readonly, nonatomic) BOOL supportsShaderBarycentricCoordinates;
@property (readonly, nonatomic) BOOL supportsBlackOrWhiteSamplerBorderColors;
@property (readonly, nonatomic) BOOL supportsMirrorClampToEdgeSamplerMode;
@property (readonly, nonatomic) BOOL supportsSIMDReduction;
@property (readonly, nonatomic) BOOL supportsDepthClipModeClampExtended;
@property (readonly, nonatomic) BOOL supportsTexture2DMultisampleArray;
@property (readonly, nonatomic) BOOL supportsForceSeamsOnCubemaps;
@property (readonly, nonatomic) BOOL supportsFloat16BCubicFiltering;
@property (readonly, nonatomic) BOOL supportsFloat16InfNanFiltering;
@property (readonly, nonatomic) BOOL supportsRTZRounding;
@property (readonly, nonatomic) BOOL supportsAnisoSampleFix;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormatsPQ;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormats12;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormatsXR;
@property (readonly, nonatomic) BOOL supportsBufferBoundsChecking;
@property (readonly, nonatomic) BOOL supportsForkJoin;
@property (readonly, nonatomic) BOOL supportsDevicePartitioning;
@property (readonly, nonatomic) BOOL supportsComputeCompressedTextureWrite;
@property (readonly, nonatomic) BOOL supportsSIMDGroupMatrix;
@property (readonly, nonatomic) BOOL supportsInterchangeTiled;
@property (readonly, nonatomic) BOOL supportsQuadReduction;
@property (readonly, nonatomic) BOOL supportsVirtualSubstreams;
@property (readonly, nonatomic) BOOL supportsSIMDShuffleAndFill;
@property (readonly, nonatomic) BOOL supportsBfloat16Format;
@property (readonly, nonatomic) BOOL supportsSparseDepthAttachments;
@property (readonly, nonatomic) BOOL supportsAtomicUlongVoidMinMax;
@property (readonly, nonatomic) BOOL supportsLossyCompression;
@property (readonly, nonatomic) BOOL supportsMeshShaders;
@property (readonly, nonatomic) BOOL supportsFunctionPointersFromMesh;
@property (readonly, nonatomic) BOOL supportsMeshShadersInICB;
@property (readonly, nonatomic) BOOL supportsBfloat16Buffers;
@property (readonly, nonatomic) BOOL supportsCommandBufferJump;
@property (readonly, nonatomic) BOOL supportsColorSpaceConversionMatrixSelection;
@property (readonly, nonatomic) BOOL supportsPerPlaneCompression;
@property (readonly, nonatomic) BOOL supportsAtomicWaitNotify;
@property (readonly, nonatomic) BOOL supportsConditionalLoadStore;
@property (readonly, nonatomic) BOOL supportsStackOverflowErrorCode;
@property (readonly, nonatomic) BOOL supportsRayTracingICBs;
@property (readonly, nonatomic) BOOL supportsPerformanceStateAssertion;
@property (readonly, nonatomic) BOOL supportsExplicitVisibilityGroups;
@property (readonly) NSString *name;
@property BOOL shaderDebugInfoCaching;
@property (readonly) unsigned long long bufferRobustnessSupport;
@property (readonly) unsigned long long deviceCreationFlags;
@property (readonly) const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; float x26; float x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; unsigned int x60; unsigned int x61; unsigned int x62; unsigned int x63; unsigned long long x64; } *limits;
@property (readonly) unsigned long long globalTraceObjectID;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long minTilePixels;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxFenceInstances;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxIOCommandsInFlight;
@property (readonly) unsigned long long maxPredicatedNestingDepth;
@property (readonly) unsigned long long maxAccelerationStructureLevels;
@property (readonly) unsigned long long maxConstantBufferArguments;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (readonly) NSObject<OS_dispatch_queue> *concurrentQueue;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) MTLCompiler *compiler;
@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; } indirectArgumentBufferCapabilities;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (readonly, getter=areRasterOrderGroupsSupported) BOOL rasterOrderGroupsSupported;
@property (readonly, getter=isFloat32FilteringSupported) BOOL float32FilteringSupported;
@property (readonly, getter=isBCTextureCompressionSupported) BOOL BCTextureCompressionSupported;
@property (readonly, getter=isMsaa32bSupported) BOOL msaa32bSupported;
@property (readonly, getter=isRGB10A2GammaSupported) BOOL RGB10A2GammaSupported;
@property (readonly, getter=areBarycentricCoordsSupported) BOOL barycentricCoordsSupported;
@property (readonly, getter=isRTZRoundingSupported) BOOL RTZRoundingSupported;
@property (readonly) long long defaultTextureWriteRoundingMode;
@property (readonly, getter=isAnisoSampleFixSupported) BOOL AnisoSampleFixSupported;
@property (readonly, getter=isFixedLinePointFillDepthGradientSupported) BOOL FixedLinePointFillDepthGradientSupported;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) BOOL gpuAssertionsEnabled;
@property (readonly, getter=isLargeMRTSupported) BOOL largeMRTSupported;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly) NSArray *counterSets;
@property (readonly, getter=isPlacementHeapSupported) BOOL placementHeapSupported;
@property (nonatomic) unsigned long long commandBufferErrorOptions;
@property (readonly) BOOL supportsRaytracing;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (readonly) BOOL requiresRaytracingEmulation;
@property (readonly) const struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } *targetDeviceInfo;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property (copy, nonatomic) NSDictionary *pluginData;
@property (readonly, nonatomic) long long currentPerformanceState;
@property (readonly) unsigned long long maxAccelerationStructureTraversalDepth;
@property (readonly) BOOL requiresBFloat16Emulation;

+ (BOOL)featureProfile:(unsigned long long)a0 supportsFeatureSet:(unsigned long long)a1;
+ (BOOL)useNewPrimitiveRestartBehavior;

- (id)newArgumentEncoderWithLayout:(id)a0;
- (void)freeObjectFunctionDriverData:(void *)a0 objectFunctionDriverDataSize:(unsigned long long)a1;
- (id)endCollectingPipelineDescriptors;
- (id)vendorName;
- (BOOL)isClampToHalfBorderSupported;
- (id)productName;
- (BOOL)isMagicMipmapSupported;
- (void)sampleTimestamps:(unsigned long long *)a0 gpuTimestamp:(unsigned long long *)a1;
- (BOOL)supportsPrimitiveType:(unsigned long long)a0;
- (BOOL)supportsTextureSampleCount:(unsigned long long)a0;
- (id)newCommandQueue;
- (id)getRawBVHBuilderPtr;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0 withDescriptor:(id)a1;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned long x5 : 59; })pipelineFlagsWithComputeVariant:(id)a0;
- (id)newDynamicLibraryFromURL:(id)a0 error:(id *)a1;
- (id)newUncachedIOFileHandleWithURL:(id)a0 error:(id *)a1;
- (id)newFunctionWithGLCoreIR:(void *)a0 inputsDescription:(id)a1 functionType:(unsigned long long)a2;
- (id)newArgumentEncoderWithArguments:(id)a0 structType:(id *)a1;
- (id)newDefaultLibrary;
- (unsigned long long)sparseTileSizeInBytes;
- (id)newLibraryWithDAG:(id)a0 functions:(id)a1 error:(id *)a2;
- (void)newComputePipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newBinaryArchiveWithDescriptor:(id)a0 error:(id *)a1;
- (id)newDynamicLibraryWithURL:(id)a0 error:(id *)a1;
- (id)newSharedTextureWithDescriptor:(id)a0;
- (id)newUncachedIOHandleWithURL:(id)a0 error:(id *)a1;
- (id)newAccelerationStructureWithDescriptor:(id)a0;
- (id)newRenderPipelineWithTileDescriptor:(id)a0 tileVariant:(id)a1 errorMessage:(id *)a2;
- (id)newLibraryWithFile:(id)a0 error:(id *)a1;
- (void *)getShaderCacheKeys;
- (id)newFunctionWithGLIR:(void *)a0 functionType:(unsigned long long)a1;
- (void)initProgressTracking;
- (BOOL)copyShaderCacheToPath:(id)a0;
- (id)newLibraryWithStitchedDescriptor:(id)a0 error:(id *)a1;
- (void)startCollectingPipelineDescriptorsFromLibrary:(id)a0 filePath:(id)a1;
- (void)setRawBVHBuilderPtr:(id)a0;
- (id)resolveCounters:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)newFragmentVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (struct { unsigned int x0; unsigned int x1; })libraryCacheStats;
- (id)initWithAcceleratorPort:(unsigned int)a0;
- (BOOL)isCollectingPipelines;
- (BOOL)validateDynamicLibraryDescriptor:(id)a0 error:(id *)a1;
- (unsigned long long)minimumLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (void)initFeatureQueries;
- (id)newEvent;
- (id)newSharedEvent;
- (id)newLibraryWithData:(id)a0 error:(id *)a1;
- (id)newEventWithOptions:(long long)a0;
- (void)newRenderPipelineStateWithMeshDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithTileVariant:(id)a0;
- (struct { unsigned int x0; unsigned int x1; })pipelineCacheStats;
- (id)loadDynamicLibrariesForFunction:(id)a0 insertLibraries:(id)a1 error:(id *)a2;
- (id)newLateEvalEvent;
- (void)_purgeDevice;
- (unsigned long long)sparseTileSizeInBytesForSparsePageSize:(long long)a0;
- (id)newComputePipelineStateWithFunction:(id)a0 error:(id *)a1;
- (id)newLibraryWithDescriptor:(id)a0 error:(id *)a1;
- (id)serializeMeshRenderPipelineDescriptor:(id)a0;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forComputeVariant:(id)a4;
- (id)serializeStructType:(id)a0 version:(unsigned int)a1;
- (void *)objectFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 objectKeySize:(unsigned long long *)a3;
- (id)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)formattedDescription:(unsigned long long)a0;
- (id)newIOHandleWithURL:(id)a0 compressionType:(long long)a1 error:(id *)a2;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0 resourceIndex:(unsigned long long)a1;
- (id)newDynamicLibrary:(id)a0 computeDescriptor:(id)a1 error:(id *)a2;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0;
- (id)pipelinePerformanceStatisticsWithObjectVariant:(id)a0 meshVariant:(id)a1 fragmentVariant:(id)a2 objectCompileTimeOutput:(id)a3 meshCompileTimeOutput:(id)a4 fragmentCompileTimeOutput:(id)a5;
- (id)loadDynamicLibrariesForFunction:(id)a0 insertLibraries:(id)a1 options:(unsigned long long)a2 error:(id *)a3;
- (id)init;
- (id)newLibraryWithImageFilterFunctionsSPI:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (id)newComputePipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })accelerationStructureSizesWithDescriptor:(id)a0;
- (void)freeTileFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (void)dealloc;
- (void)freeMeshFunctionKey:(void *)a0 meshKeySize:(unsigned long long)a1;
- (id)newRasterizationRateMapWithDescriptor:(id)a0;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forTileVariant:(id)a3;
- (BOOL)validateDynamicLibraryURL:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithMeshDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (void)unloadShaderCaches;
- (void *)getVertexFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (id)newArgumentEncoderWithArguments:(id)a0;
- (void)freeTranslatedDriverCompilerOptions:(char **)a0 compilerOptionsSize:(unsigned long long)a1;
- (id)newDagStringWithGraphs:(id)a0;
- (id)newDynamicLibrary:(id)a0 error:(id *)a1;
- (id)newStructTypeWithSerializedData:(id)a0;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (BOOL)validateDynamicLibrary:(id)a0 state:(BOOL)a1 error:(id *)a2;
- (BOOL)supportsCounterSampling:(unsigned long long)a0;
- (id)newUncachedIOHandleWithURL:(id)a0 compressionType:(long long)a1 error:(id *)a2;
- (void)convertSparsePixelRegions:(const struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a0 toTileRegions:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a1 withTileSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2 alignmentMode:(unsigned long long)a3 numRegions:(unsigned long long)a4;
- (void *)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 previousStateVariant:(id)a2 fragmentKeySize:(unsigned long long *)a3;
- (id)newComputeVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)_deviceWrapper;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newObjectVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void)initGPUFamilySupport;
- (id)akIOResourceListPool;
- (BOOL)isCollectingLibraries;
- (BOOL)supportsRasterizationRateMapWithLayerCount:(unsigned long long)a0;
- (void)freeVertexFunctionKey:(void *)a0 vertexKeySize:(unsigned long long)a1;
- (void)registerRenderPipelineDescriptor:(id)a0;
- (void)initWorkarounds;
- (struct os_unfair_lock_s { unsigned int x0; } *)getBVHBuilderLock;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)a0 compileTimeOutput:(id)a1;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newIOHandleWithURL:(id)a0 error:(id *)a1;
- (id)newLibraryWithDescriptorSPI:(id)a0 error:(id *)a1;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithObjectVariant:(id)a0 meshVariant:(id)a1 fragmentVariant:(id)a2;
- (void)initSerializationPaths;
- (id)newRenderPipelineWithDescriptor:(id)a0 vertexVariant:(id)a1 fragmentVariant:(id)a2 errorMessage:(id *)a3;
- (void)newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)fragmentVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (void)newLibraryWithStitchedDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (void)freeComputeLibraryKey:(void *)a0 libraryKeySize:(unsigned long long)a1;
- (id)newBinaryLibraryWithOptions:(unsigned long long)a0 url:(id)a1 error:(id *)a2;
- (id)newIOFileHandleWithURL:(id)a0 compressionMethod:(long long)a1 error:(id *)a2;
- (BOOL)supportsFamily:(long long)a0;
- (void)startCollectingPipelineDescriptorsUsingPrefixForNames:(id)a0;
- (BOOL)isCustomBorderColorSupported;
- (id)newSharedTextureWithHandle:(id)a0;
- (void)freeFragmentFunctionKey:(void *)a0 fragmentKeySize:(unsigned long long)a1;
- (BOOL)isQuadDataSharingSupported;
- (id)vertexVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)lookupRecompiledBinaryArchive:(id)a0;
- (id)familyName;
- (void)registerComputePipelineDescriptor:(id)a0;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (void)freeVertexFunctionDriverData:(void *)a0 vertexFunctionDriverDataSize:(unsigned long long)a1;
- (id).cxx_construct;
- (char *)getComputeFunctionId:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 compilerOptionsSize:(unsigned long long)a3;
- (id)newTileVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1 functionType:(unsigned long long)a2;
- (id)newSharedEventWithHandle:(id)a0;
- (BOOL)deviceOrFeatureProfileSupportsFeatureSet:(unsigned long long)a0;
- (void)startCollectingPipelineDescriptors;
- (BOOL)supportsTextureWriteRoundingMode:(long long)a0;
- (id)newRenderPipelineStateWithMeshDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)_setDeviceWrapper:(id)a0;
- (void *)tileFunctionKeyWithTilePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (id)newRenderPipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (id)pipelinePerformanceStatisticsWithTileVariant:(id)a0 compileTimeOutput:(id)a1;
- (void *)meshFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 meshKeySize:(unsigned long long *)a3;
- (id)newAccelerationStructureWithBuffer:(id)a0 offset:(unsigned long long)a1;
- (void)deserializeInstanceAccelerationStructureFromBytes:(const void *)a0 toBuffer:(id)a1 primitiveAccelerationStructures:(id)a2 forAccelerationStructure:(id)a3;
- (id)newPerformanceStateAssertion:(long long)a0 error:(id *)a1;
- (id)newComputePipelineWithDescriptor:(id)a0 variant:(id)a1;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)a0 fragmentVariant:(id)a1;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forObjectVariant:(id)a4 meshVariant:(id)a5 fragmentVariant:(id)a6;
- (id)serializeTileRenderPipelineDescriptor:(id)a0;
- (char *)getVertexFunctionId:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 compilerOptionsSize:(unsigned long long)a3 compiledFragmentVariant:(id)a4;
- (char *)getVertexFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned long x11 : 53; })pipelineFlagsWithVertexVariant:(id)a0 fragmentVariant:(id)a1;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forTileVariant:(id)a4;
- (void)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newLibraryWithCIFilters:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (BOOL)areProgrammableSamplePositionsSupported;
- (id)description;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)a0 error:(id *)a1;
- (void)_decrementCommandQueueCount;
- (char *)getMeshFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 stride:(unsigned int *)a3 forVertexVariant:(id)a4 fragmentVariant:(id)a5;
- (id)deserializePrimitiveAccelerationStructureFromBytes:(void *)a0 withDescriptor:(id)a1;
- (struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; })indirectArgumentBufferCapabilities;
- (id)newLibraryWithStitchedDescriptorSPI:(id)a0 error:(id *)a1;
- (void *)computeFunctionKeyWithComputePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (id)newDynamicLibraryError:(unsigned long long)a0 message:(id)a1;
- (void)getDefaultSamplePositions:(struct { float x0; float x1; } *)a0 count:(unsigned long long)a1;
- (id)newArgumentEncoderWithBufferBinding:(id)a0;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forObjectVariant:(id)a3 meshVariant:(id)a4 fragmentVariant:(id)a5;
- (id)newCommandQueueWithDescriptor:(id)a0;
- (id)newDefaultLibraryWithBundle:(id)a0 error:(id *)a1;
- (id)newLibraryWithURL:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newMeshVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (char *)getVisibleFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (id)newTextureWithDescriptor:(id)a0 iosurface:(struct __IOSurface { } *)a1 plane:(unsigned long long)a2 slice:(unsigned long long)a3;
- (id)newRenderPipelineWithDescriptor:(id)a0 objectVariant:(id)a1 meshVariant:(id)a2 fragmentVariant:(id)a3 errorMessage:(id *)a4;
- (BOOL)setCompilerProcessesCount:(int)a0;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)a0;
- (char **)newTranslatedDriverCompilerOptions:(id)a0 compilerOptionsSize:(unsigned long long *)a1;
- (BOOL)isCompatibleWithAccelerationStructure:(struct { unsigned int x0; unsigned int x1; })a0;
- (id)newIOFileHandleWithURL:(id)a0 error:(id *)a1;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forVertexVariant:(id)a3 fragmentVariant:(id)a4;
- (id)serializeStructType:(id)a0;
- (struct MTLCompilerConnectionManager { void /* function */ **x0; BOOL x1; int x2; } *)getCompilerConnectionManager:(int)a0;
- (id)newTileRenderPipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (id)newDynamicLibraryWithURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (void)newComputePipelineStateWithFunction:(id)a0 completionHandler:(id /* block */)a1;
- (id)deserializeInstanceAccelerationStructureFromBytes:(void *)a0 primitiveAccelerationStructures:(id)a1 withDescriptor:(id)a2;
- (id)newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)registerMeshRenderPipelineDescriptor:(id)a0;
- (id)newLibraryWithDescriptor:(id)a0 destinationBinaryArchive:(id)a1 error:(id *)a2;
- (unsigned long long)optionsForPipelineLibrarySerialization;
- (struct { unsigned long long x0; unsigned long long x1; })heapAccelerationStructureSizeAndAlignWithSize:(unsigned long long)a0;
- (id)newIOHandleWithURL:(id)a0 compressionMethod:(long long)a1 error:(id *)a2;
- (BOOL)isVendorSliceCompatibleWithDeploymentTarget:(unsigned int)a0 platform:(unsigned int)a1 sdkVersion:(unsigned int)a2 compilerPluginVersion:(unsigned int)a3;
- (void)releaseCacheEntry:(struct MTLLibraryContainer { struct MTLPipelineCollection *x0; _Atomic int x1; struct { unsigned char x0[32]; } x2; struct MTLLibraryData *x3; id x4; id x5; id x6; id x7; id x8; } *)a0;
- (id)newProfileWithExecutionSize:(unsigned long long)a0;
- (void)deserializeInstanceAccelerationStructure:(id)a0 fromBytes:(const void *)a1 primitiveAccelerationStructures:(id)a2 withDescriptor:(id)a3;
- (id)newMeshRenderPipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)a0 fragmentVariant:(id)a1 vertexCompileTimeOutput:(id)a2 fragmentCompileTimeOutput:(id)a3;
- (id)newFunctionWithGLIR:(void *)a0 inputsDescription:(id)a1 functionType:(unsigned long long)a2;
- (id)serializeRenderPipelineDescriptor:(id)a0;
- (void)dumpPipelineDescriptorsIfRequested;
- (id)newFunctionWithGLESIR:(void *)a0 inputsDescription:(id)a1 functionType:(unsigned long long)a2;
- (void)allowLibrariesFromOtherPlatforms;
- (void)compilerPropagatesThreadPriority:(BOOL)a0;
- (id)newAccelerationStructureWithBuffer:(id)a0 offset:(unsigned long long)a1 resourceIndex:(unsigned long long)a2;
- (id)computeVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)newFunctionWithGLCoreIR:(void *)a0 functionType:(unsigned long long)a1;
- (id)newSharedEventWithOptions:(long long)a0;
- (id)newSharedEventWithMachPort:(unsigned int)a0;
- (void)freeComputeFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (id)serializeComputePipelineDescriptor:(id)a0;
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)a0;
- (void)convertSparseTileRegions:(const struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a0 toPixelRegions:(struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } *)a1 withTileSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a2 numRegions:(unsigned long long)a3;
- (id)newLibraryWithStitchedDescriptor:(id)a0 destinationBinaryArchive:(id)a1 error:(id *)a2;
- (void)getConstantSamplersBitmasks:(unsigned long long **)a0 uniqueIdentifiers:(unsigned long long **)a1 constantSamplerCount:(unsigned long long *)a2 forComputeVariant:(id)a3;
- (void)freeObjectFunctionKey:(void *)a0 objectKeySize:(unsigned long long)a1;
- (id)architecture;
- (void *)vertexFunctionKeyWithRenderPipelineDescriptor:(id)a0 options:(unsigned long long)a1 nextStageVariant:(id)a2 vertexKeySize:(unsigned long long *)a3;
- (unsigned long long)maxRasterizationRateLayerCount;
- (id)newComputePipelineDescriptorWithSerializedData:(id)a0 deserializationContext:(id)a1;
- (id)newPipelineLibraryWithFilePath:(id)a0 error:(id *)a1;
- (BOOL)deviceSupportsFeatureSet:(unsigned long long)a0;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 error:(id *)a2;
- (void)deserializePrimitiveAccelerationStructureFromBytes:(const void *)a0 toBuffer:(id)a1 forAccelerationStructure:(id)a2;
- (void)registerTileRenderPipelineDescriptor:(id)a0;
- (id)newRenderPipelineStateWithMeshDescriptor:(id)a0 error:(id *)a1;
- (id)newRasterizationRateMapWithScreenSize:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0 layerCount:(unsigned long long)a1 layers:(const id *)a2;
- (void)initLimits;
- (void)freeVisibleFunctionKey:(void *)a0 keySize:(unsigned long long)a1;
- (id)newDynamicLibraryWithDescriptor:(id)a0 error:(id *)a1;
- (unsigned int)maximumComputeSubstreams;
- (id)newComputePipelineWithDescriptor:(id)a0 variant:(id)a1 errorMessage:(id *)a2;
- (char *)getVertexFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2 compiledFragmentVariant:(id)a3;
- (char *)getObjectFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (struct { unsigned long long x0; unsigned long long x1; })heapAccelerationStructureSizeAndAlignWithDescriptor:(id)a0;
- (id)counterSets;
- (id)newUncachedIOFileHandleWithURL:(id)a0 compressionMethod:(long long)a1 error:(id *)a2;
- (id)newFunctionWithGLESIR:(void *)a0 functionType:(unsigned long long)a1;
- (id)newIOCommandQueueWithDescriptor:(id)a0 error:(id *)a1;
- (void)deserializePrimitiveAccelerationStructure:(id)a0 fromBytes:(const void *)a1 withDescriptor:(id)a2;
- (void *)getObjectFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (id)_newDynamicLibraryWithDescriptor:(id)a0 computeDescriptor:(id)a1 error:(id *)a2;
- (id)newLibraryWithSource:(id)a0 options:(id)a1 error:(id *)a2;
- (void)deserializeCompileTimeStats:(id)a0 addToDictionary:(id)a1;
- (void)_incrementCommandQueueCount;
- (void)newLibraryWithSource:(id)a0 options:(id)a1 completionHandler:(id /* block */)a2;
- (unsigned long long)getSupportedCommandBufferErrorOptions;
- (void)newLibraryWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (char *)getIntersectionFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (char *)getComputeFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (void *)libraryKeyWithComputePipelineDescriptor:(id)a0 options:(unsigned long long)a1 keySize:(unsigned long long *)a2;
- (void *)getMeshFunctionDriverData:(const void *)a0 function:(id)a1 compilerOptions:(char **)a2 nextStageVariant:(id)a3 driverDataSize:(unsigned long long *)a4;
- (id)newRenderPipelineWithDescriptor:(id)a0 vertexVariant:(id)a1 fragmentVariant:(id)a2;
- (id)newCounterSampleBufferWithDescriptor:(id)a0 error:(id *)a1;
- (void *)visibleFunctionKey:(id)a0 withFunctionDescriptor:(id)a1 keySize:(unsigned long long *)a2;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 destinationBinaryArchive:(id)a2 error:(id *)a3;
- (id)getMostCompatibleArchitecture:(id)a0;
- (BOOL)supportsFeatureSet:(unsigned long long)a0;
- (void)recordBinaryArchiveUsage:(id)a0;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 completionHandler:(id /* block */)a2;
- (char *)getFragmentFunctionId:(const void *)a0 compilerOptions:(char **)a1 compilerOptionsSize:(unsigned long long)a2;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)freeMeshFunctionDriverData:(void *)a0 meshFunctionDriverDataSize:(unsigned long long)a1;
- (id)newVertexVariantWithCompilerOutput:(id)a0 pipelineStatisticsOutput:(id)a1;
- (BOOL)supportsTextureWriteFPRoundingMode:(long long)a0;

@end

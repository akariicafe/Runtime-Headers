@class SKDisplayLink, NSData, NSMutableDictionary, SKScene, CAEAGLLayer, NSObject, CAMetalLayer, NSMapTable, SKTransition;
@protocol SKViewDelegate, OS_dispatch_queue, OS_dispatch_semaphore;

@interface SKView : UIView {
    struct SKCStats { void /* function */ **_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _currentStats;
    struct SKCStats { void /* function */ **_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _nextStats;
    struct SKCStats { void /* function */ **_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _frameStats;
    void *_renderer;
    void /* unknown type, empty encoding */ _viewScale;
    void /* unknown type, empty encoding */ _viewTranslation;
    struct shared_ptr<jet_framebuffer> { struct jet_framebuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _framebuffer;
    struct shared_ptr<jet_texture> { struct jet_texture *__ptr_; struct __shared_weak_count *__cntrl_; } _frameBufferColorTexture;
    struct shared_ptr<jet_texture> { struct jet_texture *__ptr_; struct __shared_weak_count *__cntrl_; } _frameBufferDepthStencilTexture;
    unsigned int _colorRenderBuffer;
    unsigned int _depthStencilRenderBuffer;
    struct shared_ptr<jet_fence> { struct jet_fence *__ptr_; struct __shared_weak_count *__cntrl_; } _renderFence;
    CAMetalLayer *_metalLayer;
    CAEAGLLayer *_eaglLayer;
    BOOL _needsInitialUpdate;
    BOOL _didRunOnce;
    BOOL _viewFramebufferIsValid;
    void /* unknown type, empty encoding */ _viewFramebufferPixelSize;
    BOOL _isBackgrounded;
    BOOL _allowsTransparency;
    BOOL _priorResignActivePausedState;
    unsigned long long _frameInterval;
    unsigned long long _preferredFramesPerSecond;
    SKDisplayLink *_displayLink;
    NSObject<OS_dispatch_queue> *_updateQueue;
    double _timePreviousUpdate;
    BOOL _prefersLowPowerGPU;
    BOOL _usesAsyncUpdateQueue;
    BOOL _hasRenderedOnce;
    BOOL _hasRenderedForCurrentUpdate;
    BOOL _disableInput;
    BOOL _mouseIsDown;
    BOOL _rightMouseIsDown;
    SKTransition *_transition;
    SKScene *_nextScene;
    SKScene *_scene;
    BOOL _paused;
    NSData *_spriteArrayHint;
    NSMutableDictionary *_viewRenderOptions;
    NSMapTable *_touchMap;
    float _prevBackingScaleFactor;
    id /* block */ _dynamicRenderBlock;
    NSObject<OS_dispatch_queue> *_renderQueue;
    NSObject<OS_dispatch_semaphore> *_renderSemaphore;
    int _queuedFrameCount;
    double _prevVsyncRenderTime;
    double _prevRenderTime;
}

@property (readonly, nonatomic) struct CGSize { double width; double height; } pixelSize;
@property void *_layerBackedRenderer;
@property (retain, nonatomic) NSMutableDictionary *_info;
@property (readonly) NSMutableDictionary *options;
@property (nonatomic) double physicsDebugStrokeWidth;
@property (nonatomic, getter=disableDepthStencilBuffer, setter=setDisableDepthStencilBuffer:) BOOL disableStencilBuffers;
@property (nonatomic, getter=isPaused) BOOL paused;
@property (nonatomic) BOOL showsFPS;
@property (nonatomic) BOOL showsDrawCount;
@property (nonatomic) BOOL showsNodeCount;
@property (nonatomic) BOOL showsQuadCount;
@property (nonatomic) BOOL showsPhysics;
@property (nonatomic) BOOL showsFields;
@property (nonatomic, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic) BOOL allowsTransparency;
@property (nonatomic) BOOL ignoresSiblingOrder;
@property (nonatomic) BOOL shouldCullNonVisibleNodes;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic) BOOL disableDepthStencilBuffer;
@property (weak, nonatomic) NSObject<SKViewDelegate> *delegate;
@property (nonatomic) long long frameInterval;
@property (nonatomic) float preferredFrameRate;
@property (readonly, nonatomic) SKScene *scene;

+ (BOOL)supportsSecureCoding;
+ (Class)layerClass;
+ (id)debugHierarchyObjectsInGroupWithID:(id)a0 onObject:(id)a1 outOptions:(id *)a2;
+ (void)_setCurrentTime:(double)a0;
+ (id)debugHierarchyAdditionalGroupingIDs;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)a0 onObject:(id)a1 outOptions:(id *)a2 outError:(id *)a3;

- (void)touchesCancelled:(id)a0 withEvent:(id)a1;
- (BOOL)isOpaque;
- (void)dealloc;
- (void)CBApplicationDidBecomeActive;
- (id)snapshot;
- (void)CBApplicationWillResignActive;
- (void)encodeWithCoder:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id).cxx_construct;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)touchesBegan:(id)a0 withEvent:(id)a1;
- (void)_update:(double)a0;
- (double)alphaValue;
- (void).cxx_destruct;
- (void)_searchForFocusRegionsInContext:(id)a0;
- (void)touchesEnded:(id)a0 withEvent:(id)a1;
- (void)layoutSubviews;
- (void)touchesMoved:(id)a0 withEvent:(id)a1;
- (id)initWithCoder:(id)a0;
- (void)_commonInit;
- (void)didMoveToWindow;
- (double)_fps;
- (long long)_preferredFocusMovementStyle;
- (double)_viewScale;
- (void *)getRootNode;
- (void)debugPrint;
- (void)_ensureRenderer;
- (struct shared_ptr<jet_framebuffer> { struct jet_framebuffer *x0; struct __shared_weak_count *x1; })nextFramebuffer;
- (void)runOnce;
- (void)_dispatchRenderToIOSurfaceID:(unsigned int)a0 async:(BOOL)a1 onQueue:(id)a2 waitOnFence:(BOOL)a3 preRender:(id /* block */)a4 postRender:(id /* block */)a5;
- (void)_endFrameStats;
- (id)_focusedItemRegionContainer;
- (unsigned long long)_getEffectivePreferredFramesPerSecond;
- (id)_getPerformanceStats;
- (float)_getViewContentsScale;
- (void)_renderContent;
- (void)_renderSynchronouslyForTime:(double)a0 preRender:(id /* block */)a1 postRender:(id /* block */)a2;
- (void)_renderSynchronouslyForTime:(double)a0 preRender:(id /* block */)a1 postRender:(id /* block */)a2 withMTLScheduleHandler:(id /* block */)a3;
- (void)_renderToIOSurfaceID:(unsigned int)a0 scaleFactor:(float)a1 asynchronous:(BOOL)a2 preRender:(id /* block */)a3 postRender:(id /* block */)a4;
- (void)_renderToIOSurfaceID:(unsigned int)a0 scaleFactor:(float)a1 asynchronous:(BOOL)a2 waitOnFence:(BOOL)a3 preRender:(id /* block */)a4 postRender:(id /* block */)a5;
- (BOOL)_renderUpdateEnabled;
- (void)_reshape;
- (void)_setUpdateQueue:(id)a0;
- (BOOL)_shouldRenderForTime:(double)a0;
- (void)_showAllStats;
- (BOOL)_showsCPUStats;
- (BOOL)_showsGPUStats;
- (int)_spriteRenderCount;
- (int)_spriteSubmitCount;
- (BOOL)_usesAsyncUpdateQueue;
- (struct CGPoint { double x0; double x1; })_viewTranslation;
- (void)_vsyncRenderForTime:(double)a0 preRender:(id /* block */)a1 postRender:(id /* block */)a2;
- (id)archiveToFile:(id)a0;
- (id)captureToFile:(id)a0;
- (void *)chooseViewRenderer;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromScene:(id)a1;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toScene:(id)a1;
- (id)getRenderOptions;
- (struct { void /* unknown type, empty encoding */ x0[4]; })getViewTransform;
- (void /* unknown type, empty encoding */)getViewport;
- (BOOL)hasValidViewFramebuffer;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 updateQueue:(id)a1;
- (BOOL)isEqualToView:(id)a0;
- (void)notifyWillRenderContent;
- (void)onInit;
- (void)overrideMetalCommandQueue:(id)a0;
- (void)presentScene:(id)a0;
- (void)presentScene:(id)a0 transition:(id)a1;
- (void)remakeFramebuffer;
- (void)remakeFramebuffer:(double)a0;
- (void)renderContent;
- (void)renderForTime:(double)a0 shouldBlock:(BOOL)a1;
- (void)renderToIOSurfaceID:(unsigned int)a0 withScaleFactor:(double)a1;
- (void)setDynamicRenderBlock:(id /* block */)a0;
- (void)setUpRenderCallback;
- (void)set_renderUpdateEnabled:(BOOL)a0;
- (void)set_showsCPUStats:(BOOL)a0;
- (void)set_showsGPUStats:(BOOL)a0;
- (void)set_usesAsyncUpdateQueue:(BOOL)a0;
- (void)set_viewScale:(double)a0;
- (void)set_viewTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)startRenderCallbacks;
- (void)stopRenderCallbacks;
- (id)textureFromNode:(id)a0;
- (id)textureFromNode:(id)a0 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)textureFromNode:(id)a0 withOptions:(id)a1;
- (void)willRenderContent;
- (void)writeContentsToPNG:(id)a0;

@end

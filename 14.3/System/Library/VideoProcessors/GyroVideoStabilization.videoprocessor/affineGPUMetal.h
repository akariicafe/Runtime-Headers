@class FigM2MController, FigMetalContext;
@protocol MTLComputePipelineState, MTLTexture, MTLRenderPipelineState;

@interface affineGPUMetal : NSObject {
    FigMetalContext *_metalContext;
    id<MTLRenderPipelineState> _pipelineRenderStates[24];
    id<MTLComputePipelineState> _pipelineComputeStates[1];
    struct __CVMetalTextureCache { } *_cvMetalTextureCacheRef;
    BOOL _isSynchronous;
    BOOL _useBicubic;
    unsigned int _inputWidth;
    unsigned int _inputHeight;
    unsigned int _outputWidth;
    unsigned int _outputHeight;
    unsigned int _texMatCount;
    struct { void /* unknown type, empty encoding */ x0[3]; } *_texMats;
    unsigned int _transformRowStride;
    struct { BOOL clampingEnabled; void /* unknown type, empty encoding */ replicationRect; } _transformConfig;
    void *_swathVertices;
    unsigned int _swathVerticesSize;
    struct { void /* unknown type, empty encoding */ x0[3]; } *_swathMatrices;
    unsigned int _swathMatricesSize;
    unsigned int _overscanWidth;
    unsigned int _overscanHeight;
    struct { BOOL mixEnabled; void /* unknown type, empty encoding */ dUV; void /* unknown type, empty encoding */ noiseOffset; void /* unknown type, empty encoding */ textureSize; } _blurMetalConfig;
    BOOL _blurEnabled;
    BOOL _blurMixEnabled;
    unsigned int _blurPasses;
    struct CGSize { double width; double height; } _blurOverscan;
    int _blurNoiseRadius;
    unsigned char _blurRadiusTable[10];
    unsigned int _blurFrameCounter;
    unsigned int _blurPreviousTextureIndex;
    unsigned short _blurBorderIndices[24];
    void /* unknown type, empty encoding */ _blurBorderVertices[8];
    void *_blurSwathVerticesInStabilizedImage;
    unsigned int _blurSwathVerticesInStabilizedImageSize;
    unsigned short *_blurOverscanTrianglesIndices;
    unsigned int _blurOverscanTrianglesIndicesSize;
    struct { unsigned int count; id<MTLTexture> texture[2]; } _blurTempTextures[2];
    struct { unsigned int count; id<MTLTexture> texture[2]; } _blurPreviousTextures[3];
    void *_blurRenderVertex;
    unsigned int _blurRenderVertexSize;
    unsigned short *_blurRenderVertexIndices;
    unsigned int _blurRenderVertexIndicesSize;
    BOOL _fillExtendedRowsInOutputBuffer;
    int _P3ToBT2020ConversionMethod;
    struct __CVBuffer { } *_intermediateOutputPixelBuffer;
    FigM2MController *_m2m;
}

- (void)finish;
- (void)setPriority:(int)a0;
- (void)setTransform:(float[6])a0;
- (void)setTransformArray:(unsigned int)a0 transforms3x3:(float[9] *)a1 transformRowStride:(unsigned int)a2;
- (void).cxx_destruct;
- (void)setAdaptiveUnsharpMaskParameters:(float)a0 lowLumaDelta:(float)a1 lowLumaDeltaBlurAmount:(float)a2 highLumaDelta:(float)a3 highLumaDeltaBlurAmount:(float)a4;
- (int)getBlurBuffersDecimationFactor;
- (void)setRenderFromTopLeft:(BOOL)a0;
- (void)dealloc;
- (void)cacheSourcePixelBuffer:(struct __CVBuffer { } *)a0;
- (void)setBlockOnLastBuffer:(BOOL)a0;
- (void)renderWithPixelBuffer:(struct __CVBuffer { } *)a0 pixelBufferValidRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 outputPixelBuffer:(struct __CVBuffer { } *)a2;
- (void)configureBlurWith:(struct { unsigned char x0; BOOL x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; struct __CVBuffer *x9[4]; } *)a0;
- (void)configureP3ToBT2020conversion:(BOOL)a0;
- (void)setFillExtendedRowsInOutputBuffer:(BOOL)a0;
- (void)resetFirstFrameParameters;
- (void)setFinishTransactionsSynchronously:(BOOL)a0;
- (id)initWithMetalContext:(id)a0;
- (void)setUnsharpMaskParameters:(float)a0 baseAmount:(float)a1 adaptiveAmount:(float)a2;
- (void)setRenderMethod:(int)a0;
- (void)setOverscan:(int)a0 height:(int)a1;
- (int)_initTransformShaders;
- (int)_initBlurShaders;
- (int)_initComputeShaders;
- (int)_cachedTexturesFromPixelBuffer:(struct __CVBuffer { } *)a0 isTwoPass:(BOOL)a1 isOptimized:(BOOL)a2 textures:(struct { unsigned int x0; id x1[2]; } *)a3;
- (int)_transformAndConvertToBT2020InputPixelBuffer:(struct __CVBuffer { } *)a0 outputPixelBuffer:(struct __CVBuffer { } *)a1 commandBuffer:(id)a2;
- (int)_transformInputPixelBuffer:(struct __CVBuffer { } *)a0 outputPixelBuffer:(struct __CVBuffer { } *)a1 commandBuffer:(id)a2;
- (void)_blurDuplicatedPixelsOnPixelBuffer:(struct __CVBuffer { } *)a0 validBufferRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (int)_duplicateBottomRowsOnPixelBuffer:(struct __CVBuffer { } *)a0;
- (int)_getTransformShaderParameters:(unsigned long long)a0 isLuma:(BOOL)a1 pixelRatio:(unsigned int *)a2 pipelineIndexToUse:(int *)a3;
- (int)_getBlurShaderParameters:(unsigned long long)a0 pipelineIndexToUse:(int *)a1;
- (int)_renderBlurInputTextures:(struct { unsigned int x0; id x1[2]; } *)a0 inputTexturesCount:(unsigned int)a1 outputTextures:(struct { unsigned int x0; id x1[2]; } *)a2;
- (int)_createRenderPipelinesForShaders:(id)a0;
- (id)_compileShader:(id)a0 fragment:(id)a1 pixelFormat:(unsigned long long)a2 constants:(id)a3;

@end

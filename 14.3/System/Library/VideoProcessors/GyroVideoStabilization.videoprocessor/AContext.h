@class EAGLContext, NSMutableArray, FigMetalContext;
@protocol MTLComputePipelineState;

@interface AContext : NSObject {
    EAGLContext *_glContext;
    unsigned int _framebuffer[2];
    unsigned int _renderbuffer[2];
    unsigned int _lumaTexture;
    unsigned int _chromaTexture;
    unsigned int _uniformLuma;
    unsigned int _uniformChroma;
    float _lumaQuadVertices[8];
    float _chromaQuadVertices[8];
    NSMutableArray *_filters;
    int _currentFilter;
    struct CGSize { double width; double height; } _size;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _lumaRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _chromaRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _bgraRect;
    unsigned int _pixelFormat;
    int _GPUMode;
    int _GPUOutputMode;
    struct _SurfaceCache { } *_surfaceCache;
    struct _SurfaceCache { } *_outputSurfaceCache;
    BOOL _directTexture;
    BOOL _directFBO;
    struct __CVBuffer { } *_lastInputBuffer;
    unsigned int _glFence;
    BOOL _singlePlane;
    BOOL _wasSinglePlane;
    BOOL _finishTransactionsSynchronously;
    BOOL _blockOnLastBuffer;
    BOOL _fillExtendedRowsInOutputBuffer;
    FigMetalContext *_metal;
    id<MTLComputePipelineState> _fillExtendedRowsKernel;
}

- (void)finish;
- (struct __CVBuffer { } *)lastInputBuffer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bgraRect;
- (void)setPriority:(int)a0;
- (int)GPUOutputMode;
- (BOOL)singlePlane;
- (unsigned int)framebuffer2;
- (void)fillExtendedRowsInPixelBufferIfNecessary:(struct __CVBuffer { } *)a0;
- (void)addFilter:(id)a0;
- (unsigned int)chromaTexture;
- (int)GPUMode;
- (unsigned int)framebuffer;
- (void)dealloc;
- (unsigned int)renderbuffer;
- (BOOL)directTexture;
- (void)cacheSourcePixelBuffer:(struct __CVBuffer { } *)a0;
- (struct CGSize { double x0; double x1; })size;
- (void)setOperationFence;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })chromaRect;
- (void)setBlockOnLastBuffer:(BOOL)a0;
- (void)renderWithPixelBuffer:(struct __CVBuffer { } *)a0 pixelBufferValidRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1 outputPixelBuffer:(struct __CVBuffer { } *)a2;
- (void)resizeRenderBuffer:(struct CGSize { double x0; double x1; })a0 pixelFormat:(unsigned int)a1 plane:(int)a2;
- (BOOL)directFBO;
- (void)nextFilter;
- (id)glContext;
- (void)setFillExtendedRowsInOutputBuffer:(BOOL)a0;
- (void)setFinishTransactionsSynchronously:(BOOL)a0;
- (struct _SurfaceCache { } *)surfaceCache;
- (BOOL)finishTransactionsSynchronously;
- (void)updateTextureMode:(int)a0;
- (void)updateFBOMode:(int)a0;
- (void)waitForLastInputBufferToFinish:(BOOL)a0;
- (struct _SurfaceCache { } *)outputSurfaceCache;
- (void)setDirectFBO:(BOOL)a0;
- (unsigned int)lumaTexture;
- (void)setDirectTexture:(BOOL)a0;
- (void)setLastInputBuffer:(struct __CVBuffer { } *)a0;
- (void)executeFillKernelForDesc:(struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned int x3; unsigned short x4; unsigned int x5; unsigned short x6; unsigned int x7; unsigned short x8; unsigned int x9; unsigned short x10; unsigned short x11; unsigned int x12; } *)a0 ioSurface:(struct __IOSurface { } *)a1 topFillSize:(unsigned int)a2 bottomFillSize:(unsigned int)a3;
- (id)initWithSize:(struct CGSize { double x0; double x1; })a0 useOpenGLES3:(BOOL)a1 metalLibrary:(char *)a2 metalLibrarySize:(unsigned int)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lumaRect;
- (unsigned int)renderbuffer2;
- (void)resizeContext:(struct CGSize { double x0; double x1; })a0 pixelFormat:(unsigned int)a1;
- (void)bindTexture:(unsigned int)a0 toUnit:(unsigned int)a1;
- (void)fillTopBottomRowsInPixelBufferIfNecessary:(struct __CVBuffer { } *)a0 pixelBufferValidRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a1;
- (BOOL)blockOnLastBuffer;

@end

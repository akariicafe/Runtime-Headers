@class FigMetalContext;
@protocol MTLComputePipelineState;

@interface SegmentationFusion : NSObject {
    FigMetalContext *_mtlCtx;
    id<MTLComputePipelineState> _apply_kernel;
}

- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithMetalContent:(id)a0;
- (int)enqueueFusionWithThreadgroupSizes:(const struct threadgroup_sizes_config { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x2; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x3; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x4; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x5; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x6; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x7; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x8; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x9; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x10; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x11; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x12; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x13; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x14; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x15; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x16; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x17; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x18; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x19; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x20; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x21; } *)a0 segmentationFusionParams:(const struct segmentation_fusion_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; } *)a1 inputBlurMap:(id)a2 inputSegmentationMask:(id)a3 outputBlurMap:(id)a4;
- (int)validateInputsWithThreadgroupSizes:(const struct threadgroup_sizes_config { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x2; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x3; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x4; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x5; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x6; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x7; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x8; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x9; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x10; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x11; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x12; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x13; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x14; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x15; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x16; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x17; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x18; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x19; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x20; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x21; } *)a0 inputBlurMap:(id)a1 inputSegmentationMask:(id)a2 outputBlurMap:(id)a3;
- (int)enqueuePassthroughWithInputBlurMap:(id)a0 outputBlurMap:(id)a1;
- (struct segmentation_fusion_shader_params { void /* unknown type, blank encoding */ x0; void /* unknown type, blank encoding */ x1; void /* unknown type, blank encoding */ x2; void /* unknown type, blank encoding */ x3; void /* unknown type, blank encoding */ x4; void /* unknown type, blank encoding */ x5; })calcShaderParamsFromConfigParams:(const struct segmentation_fusion_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; } *)a0;
- (int)enqueueApplyWithThreadgroupSizes:(const struct threadgroup_sizes_config { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x2; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x3; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x4; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x5; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x6; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x7; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x8; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x9; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x10; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x11; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x12; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x13; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x14; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x15; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x16; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x17; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x18; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x19; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x20; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x21; } *)a0 inputParams:(struct segmentation_fusion_shader_params { void /* unknown type, blank encoding */ x0; void /* unknown type, blank encoding */ x1; void /* unknown type, blank encoding */ x2; void /* unknown type, blank encoding */ x3; void /* unknown type, blank encoding */ x4; void /* unknown type, blank encoding */ x5; } *)a1 inputBlurMap:(id)a2 inputSegmentationMask:(id)a3 outputBlurMap:(id)a4;

@end

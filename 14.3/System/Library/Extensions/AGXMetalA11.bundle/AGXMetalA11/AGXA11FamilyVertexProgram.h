@class NSString, NSObject;
@protocol OS_dispatch_group, OS_dispatch_data, OS_dispatch_queue;

@interface AGXA11FamilyVertexProgram : NSObject {
    struct VertexProgram { struct VectorMap<AGX::VertexProgramKey, AGX::Program<AGX::G10::VertexProgramVariant, AGX::VertexProgramKey, AGX::G10::IndirectArgumentLayout, AGXA11FamilyIndirectArgumentBufferLayout>::VariantEntry, 4> { struct Chunk { struct VertexProgramKey { void /* function */ **_vptr$ProgramKey; int streamType; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *__value_; } __end_cap_; } stream; struct _AGCVertexContextStateAGP { unsigned long long mutableBuffers; union _AGCPCFStateAGP { struct { unsigned int depthCompareClampMask : 32; } ; unsigned int key; } pcf; union { struct { unsigned char genCompilerStatistics : 1; unsigned char genTelemetryStatistics : 1; unsigned char clipDistanceEnableMask : 8; unsigned char partition_mode : 2; unsigned char step_function : 2; unsigned char vertex_amplification_mode : 2; unsigned char max_vertex_amplification_count : 4; unsigned char manufactureUnlinkedVaryings : 1; unsigned char customBorderColor : 1; unsigned char disableTextureRWBoundsCheck : 1; unsigned char debugInstrumentationEnabled : 1; unsigned char bufferBoundsCheckMode : 3; unsigned char addDefaultPointSize : 1; unsigned char disableDMAPromotion : 1; unsigned char flatVaryingAnalysis : 1; unsigned char tessFactorFormat : 1; unsigned char positionInvariance : 1; unsigned char disableFMAFold : 1; unsigned int unused : 31; } ; unsigned long long key; } ; } cs; struct FragmentProgramVaryings { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } varying_semantics; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } varying_types; BOOL manufacture_unlinked_varyings; } fv; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } vertex_buffer_desc; union { struct { unsigned char supportIndirectCommandBuffers : 1; unsigned char hasPrimId : 1; unsigned int reserved : 30; } ; unsigned int vertexKeyFlags; } ; unsigned long long non_reflection_pipeline_options; } keys[4]; struct VariantEntry { NSObject<OS_dispatch_group> *ve_group; struct VertexProgramVariant *variant; unsigned long long error; NSString *message; BOOL created; } values[4]; struct Chunk *next; } initial_chunk; struct Chunk *head; unsigned int count; struct VariantEntry { NSObject<OS_dispatch_group> *ve_group; struct VertexProgramVariant *variant; unsigned long long error; NSString *message; BOOL created; } default_value; } variants; unsigned long long requested_options; unsigned long long completed_options; NSObject<OS_dispatch_data> *reflection_data; NSObject<OS_dispatch_queue> *queue; struct IndirectArgumentLayout *argument_layouts[96]; BOOL has_layouts; } _impl;
}

- (void).cxx_destruct;
- (id).cxx_construct;

@end

@class NSString, NSArray, NSMutableDictionary, NSObject, MTLGPUBVHBuilder, MTLTargetDeviceArchitecture, NSMutableArray, NSPointerArray;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface AGXA11FamilyDevice : IOGPUMetalDevice <MTLDeviceSPI> {
    struct Device { struct BackgroundObjectProgram *x0; struct EndOfTileProgram *x1; struct BlitFragmentProgram *x2; struct BlitVertexProgram *x3; struct BlitComputeProgram *x4; struct BlitSparseProgram *x5; struct SWEndOfTileProgram *x6; BOOL x7; struct ResourceGroupUsageList { } x8; struct __IOGPUDevice *x9; id x10; struct HeapSet { struct Heap { struct _ResourceHead { struct _Resource *x0; struct _Resource **x1; } x0; id x1; struct __IOGPUDevice *x2; struct AGXNewTextureDataStruc { struct IOGPUNewResourceData { unsigned int x0; unsigned int x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned int x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; union { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned int x3; } x0; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4[2]; } x1; } x14; } x0; union { struct { unsigned char x0 : 1; unsigned char x1 : 3; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 2; unsigned char x5 : 2; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 4; unsigned char x10 : 4; unsigned char x11 : 4; unsigned char x12 : 1; unsigned char x13 : 3; unsigned char x14 : 2; unsigned char x15 : 1; unsigned char x16 : 1; unsigned char x17 : 1; unsigned char x18 : 1; } x0; unsigned long long x1; } x1; unsigned long long x2; } x3; unsigned long long x4; unsigned long long x5; } x0[3]; } x11; struct ClearVisibilityVertexProgramVariant *x12; struct AGXGPUCoreConfig { int x0; int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; BOOL x13; BOOL x14; unsigned int x15; unsigned int x16; unsigned long long x17; unsigned long long x18; } x13; struct DeviceUSCStateLoader { struct VDMStateSyncProgramVariant *x0; struct TileDispatchVertexProgramVariant *x1; } x14; struct Compiler *x15; struct UserCommonShaderFactory *x16; struct UserTileShaderFactory *x17; struct DeviceInternalBuffer<AGX::USCSpillBufferResourceInfo> *x18; struct DeviceInternalBuffer<AGX::USCSpillBufferResourceInfo> *x19; struct DeviceInternalBuffer<AGX::USCSpillBufferResourceInfo> *x20; struct DeviceInternalBuffer<AGX::EMRTTileBufferResourceInfo> *x21; struct DummyHeap { } x22; struct DummyHeap { } x23; struct PooledAllocator { unsigned long long x0; struct AllocationInfo *x1; unsigned int x2; unsigned int x3; struct os_unfair_lock_s { unsigned int x0; } x4; } x24; struct PooledAllocator { unsigned long long x0; struct AllocationInfo *x1; unsigned int x2; unsigned int x3; struct os_unfair_lock_s { unsigned int x0; } x4; } x25; struct PooledAllocator { unsigned long long x0; struct AllocationInfo *x1; unsigned int x2; unsigned int x3; struct os_unfair_lock_s { unsigned int x0; } x4; } x26; struct DeviceSWTessellationState *x27; struct FenceGroupPool { struct FenceGroupList { struct FenceGroup *x0; } x0; struct FenceGroupAllocationBlockList { struct FenceGroupAllocationBlock *x0; } x1; id x2; } x28; struct SamplerStateFields { union _AgxTexSamplerWord0 { unsigned long long x0; struct { unsigned short x0 : 10; unsigned short x1 : 10; unsigned char x2 : 3; unsigned char x3 : 2; unsigned char x4 : 2; unsigned char x5 : 2; unsigned char x6 : 3; unsigned char x7 : 3; unsigned char x8 : 3; unsigned char x9 : 1; unsigned char x10 : 3; unsigned char x11 : 1; unsigned char x12 : 5; unsigned char x13 : 3; unsigned char x14 : 3; unsigned char x15 : 1; unsigned char x16 : 1; unsigned char x17 : 1; unsigned char x18 : 7; } x1; } x0; } x29; union DeviceOptions { struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 1; unsigned char x5 : 1; unsigned char x6 : 1; unsigned char x7 : 1; unsigned char x8 : 1; unsigned char x9 : 1; unsigned char x10 : 1; unsigned char x11 : 1; unsigned char x12 : 1; unsigned char x13 : 1; unsigned char x14 : 1; unsigned char x15 : 1; unsigned char x16 : 5; unsigned char x17 : 1; unsigned long x18 : 42; } x0; unsigned long long x1; } x30; unsigned int x31; unsigned int x32; id x33; struct ImageStateFields { union _AgxTexState0Word0 { unsigned long long x0; struct { unsigned char x0 : 3; unsigned char x1 : 2; unsigned char x2 : 7; unsigned char x3 : 3; unsigned char x4 : 3; unsigned char x5 : 3; unsigned char x6 : 3; unsigned char x7 : 3; unsigned short x8 : 14; unsigned short x9 : 14; unsigned char x10 : 4; unsigned char x11 : 4; unsigned char x12 : 1; } x1; } x0; union _AgxTexState0Word1 { unsigned long long x0; struct { unsigned char x0 : 2; unsigned long x1 : 36; unsigned char x2 : 3; unsigned char x3 : 3; unsigned char x4 : 2; unsigned short x5 : 16; unsigned char x6 : 1; unsigned char x7 : 1; } x1; } x1; union _AgxTexState1Word0 { unsigned long long x0; struct { unsigned long x0 : 36; unsigned short x1 : 16; unsigned short x2 : 12; } x1; } x2; } x34[2]; id x35; id x36; struct SpillInfo *x37; struct SpillInfo *x38; struct SpillInfo *x39; struct { BOOL x0; void *x1; BOOL x2; unsigned int x3; } x40; struct { unsigned long long *x0; unsigned int x1; } x41; id x42; struct map<AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *, std::__1::less<AGX::DepthStencilStateDescriptorGen2>, std::__1::allocator<std::__1::pair<const AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *> > > { struct __tree<std::__1::__value_type<AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *>, std::__1::__map_value_compare<AGX::DepthStencilStateDescriptorGen2, std::__1::__value_type<AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *>, std::__1::less<AGX::DepthStencilStateDescriptorGen2>, true>, std::__1::allocator<std::__1::__value_type<AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AGX::DepthStencilStateDescriptorGen2, std::__1::__value_type<AGX::DepthStencilStateDescriptorGen2, AGXA11FamilyDepthStencilState *>, std::__1::less<AGX::DepthStencilStateDescriptorGen2>, true> > { unsigned long long x0; } x2; } x0; } x43; id x44; struct map<AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler>, std::__1::less<AGX::SamplerDescriptor>, std::__1::allocator<std::__1::pair<const AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler> > > > { struct __tree<std::__1::__value_type<AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler> >, std::__1::__map_value_compare<AGX::SamplerDescriptor, std::__1::__value_type<AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler> >, std::__1::less<AGX::SamplerDescriptor>, true>, std::__1::allocator<std::__1::__value_type<AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AGX::SamplerDescriptor, std::__1::__value_type<AGX::SamplerDescriptor, AGX::WeakObjCPtr<AGXA11FamilySampler> >, std::__1::less<AGX::SamplerDescriptor>, true> > { unsigned long long x0; } x2; } x0; } x45; struct vector<AGX::ConstantSamplerList<AGX::G10::Encoders> *, std::__1::allocator<AGX::ConstantSamplerList<AGX::G10::Encoders> *> > { struct ConstantSamplerList<AGX::G10::Encoders> **x0; struct ConstantSamplerList<AGX::G10::Encoders> **x1; struct __compressed_pair<AGX::ConstantSamplerList<AGX::G10::Encoders> **, std::__1::allocator<AGX::ConstantSamplerList<AGX::G10::Encoders> *> > { struct ConstantSamplerList<AGX::G10::Encoders> **x0; } x2; } x46; unsigned int x47; struct IONotificationPort *x48; id x49; id x50; id x51; id x52; id x53; id x54; id x55; BOOL x56; BOOL x57; unsigned int x58; unsigned long long x59; unsigned long long x60; unsigned long long x61; struct IOGPUResourceInfo { struct __IOSurface *x0; unsigned long x1 : 56; unsigned char x2 : 8; unsigned int x3; } x62; int x63; BOOL x64; int x65; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x66; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x67; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x68; struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } x69; int x70; unsigned long long x71; id x72; id x73; struct ComputePipeline *x74; id x75; struct RenderPipeline *x76; struct ComputePipeline *x77; struct RenderPipeline *x78; struct os_unfair_lock_s { unsigned int x0; } x79; struct unordered_map<unsigned long, AGX::FunctionCompiledEventInfo, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, AGX::FunctionCompiledEventInfo> > > { struct __hash_table<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, std::__1::hash<unsigned long>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, AGX::FunctionCompiledEventInfo>, std::__1::equal_to<unsigned long>, true> > { float x0; } x3; } x0; } x80; id /* block */ x81; struct ComputePipeline *x82; id x83; struct unordered_map<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> > > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, std::__1::hash<unsigned int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::pair<const IOGPUResourceInfo *, int> >, std::__1::equal_to<unsigned int>, true> > { float x0; } x3; } x0; } x84; unsigned long long x85; id x86; } *_impl;
    struct AGXATelemetry { struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__1::__cxx_atomic_base_impl<unsigned long long> > { _Atomic unsigned long long __a_value; } __a_; } usage[2]; unsigned long long prevUsage[2]; struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__1::__cxx_atomic_base_impl<unsigned long long> > { _Atomic unsigned long long __a_value; } __a_; } textureCount[66]; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } concurrentComputeLock; unsigned int maxConcurrentComputeDispatchCount; struct atomic<unsigned short> { struct __cxx_atomic_impl<unsigned short, std::__1::__cxx_atomic_base_impl<unsigned short> > { _Atomic unsigned short __a_value; } __a_; } commandQsInFlight; NSArray *clientKeys; NSMutableArray *clientAggdValues; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int __a_value; } __a_; } clientMask; unsigned int prevClientMask; NSObject<OS_dispatch_queue> *queue; NSObject<OS_dispatch_source> *timer; NSString *deviceName; NSMutableDictionary *dimensionPayload; NSMutableDictionary *payload; BOOL isEnabled; } _telemetry;
    struct CDMSubstreamProcessor { } *cdmSubstreamProcessor;
    struct DeviceCounterState { id x0; id x1; struct AGXBitmap<240> { unsigned long long x0[4]; } x2; unsigned int x3; unsigned int x4; id x5; unsigned int x6; } *_counterState;
    NSPointerArray *_pipelineStates;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _pipelineStatesLock;
    id /* block */ _signpostEnablementCallback;
    NSString *_compatDeviceName;
    NSString *_compatDeviceVendor;
}

@property BOOL disableComputeEncoderCoalescing;
@property (readonly) struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } maxThreadsPerThreadgroup;
@property (readonly) unsigned long long deviceCreationFlags;
@property (readonly, nonatomic) BOOL supportsBufferlessClientStorageTexture;
@property (readonly, nonatomic) BOOL supportsComputeMemoryBarrier;
@property (readonly, nonatomic) BOOL supportsRenderMemoryBarrier;
@property (readonly, nonatomic) BOOL supportsArgumentBuffersTier2;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureArgumentsTier2;
@property (readonly, nonatomic) BOOL supportsProgrammableSamplePositions;
@property (readonly, nonatomic) BOOL supportsLargeFramebufferConfigs;
@property (readonly, nonatomic) BOOL supportsCustomBorderColor;
@property (readonly, nonatomic) BOOL supportsSamplerAddressModeClampToHalfBorder;
@property (readonly, nonatomic) BOOL supportsBCTextureCompression;
@property (readonly, nonatomic) BOOL supports3DBCTextures;
@property (readonly, nonatomic) BOOL supportsRGBA10A2Gamma;
@property (readonly, nonatomic) BOOL supportsPrimitiveRestartOverride;
@property (readonly, nonatomic) BOOL supports32bpcMSAATextures;
@property (readonly, nonatomic) BOOL supports32BitMSAA;
@property (readonly, nonatomic) BOOL supports32BitFloatFiltering;
@property (readonly, nonatomic) BOOL supportsVertexAmplification;
@property (readonly, nonatomic) BOOL supportsPlacementHeaps;
@property (readonly, nonatomic) BOOL supportsOpenCLTextureWriteSwizzles;
@property (readonly, nonatomic) BOOL supportsPullModelInterpolation;
@property (readonly, nonatomic) BOOL supportsInt64;
@property (readonly, nonatomic) BOOL supportsFixedLinePointFillDepthGradient;
@property (readonly, nonatomic) BOOL supportsNonZeroTextureWriteLOD;
@property (readonly, nonatomic) BOOL supportsSharedTextureHandles;
@property (readonly, nonatomic) BOOL supportsBufferPrefetchStatistics;
@property (readonly, nonatomic) BOOL supportsLimitedYUVFormats;
@property (readonly, nonatomic) BOOL supportsNonPrivateDepthStencilTextures;
@property (readonly, nonatomic) BOOL supportsNonPrivateMSAATextures;
@property (readonly, nonatomic) BOOL supportsSharedStorageHeapResources;
@property (readonly, nonatomic) BOOL supportsSharedStorageTextures;
@property (readonly, nonatomic) BOOL supportsLinearTextureFromSharedBuffer;
@property (readonly, nonatomic) BOOL supportsPipelineLibraries;
@property (readonly, nonatomic) BOOL supportsFragmentOnlyEncoders;
@property (readonly, nonatomic) BOOL supportsBufferWithIOSurface;
@property (readonly, nonatomic) BOOL supportsProgrammableBlending;
@property (readonly, nonatomic) BOOL supportsRenderToLinearTextures;
@property (readonly, nonatomic) BOOL supportsMemorylessRenderTargets;
@property (readonly, nonatomic) BOOL supportsFastMathInfNaNPropagation;
@property (readonly, nonatomic) BOOL supportsInvariantVertexPosition;
@property (readonly, nonatomic) BOOL supportsShaderLODAverage;
@property (readonly, nonatomic) BOOL supportsRelaxedTextureViewRequirements;
@property (readonly, nonatomic) BOOL supportsSeparateDepthStencil;
@property (readonly, nonatomic) BOOL supportsGPUStatistics;
@property (readonly, nonatomic) BOOL supportsCompressedTextureViewSPI;
@property (readonly, nonatomic) BOOL supportsRenderTargetTextureRotation;
@property (readonly, nonatomic) BOOL supportsDynamicControlPointCount;
@property (readonly, nonatomic) BOOL supportsIABHashForTools;
@property (readonly, nonatomic) BOOL supportsBinaryArchives;
@property (readonly, nonatomic) BOOL supportsBinaryLibraries;
@property (readonly, nonatomic) BOOL supportsASTCTextureCompression;
@property (readonly, nonatomic) BOOL supportsExtendedYUVFormats;
@property (readonly, nonatomic) BOOL supportsPublicXR10Formats;
@property (readonly, nonatomic) BOOL supportsSRGBwrites;
@property (readonly, nonatomic) BOOL supportsDepthClipMode;
@property (readonly, nonatomic) BOOL supportsPacked32TextureBufferWrites;
@property (readonly, nonatomic) BOOL supports3DASTCTextures;
@property (readonly, nonatomic) BOOL supportsExtendedXR10Formats;
@property (readonly, nonatomic) BOOL supportsFragmentBufferWrites;
@property (readonly, nonatomic) BOOL supportsCountingOcclusionQuery;
@property (readonly, nonatomic) BOOL supportsBaseVertexInstanceDrawing;
@property (readonly, nonatomic) BOOL supportsIndirectDrawAndDispatch;
@property (readonly, nonatomic) BOOL supportsTessellation;
@property (readonly, nonatomic) BOOL supportsReadWriteBufferArguments;
@property (readonly, nonatomic) BOOL supportsArrayOfTextures;
@property (readonly, nonatomic) BOOL supportsArrayOfSamplers;
@property (readonly, nonatomic) BOOL supportsCombinedMSAAStoreAndResolveAction;
@property (readonly, nonatomic) BOOL supportsMutableTier1ArgumentBuffers;
@property (readonly, nonatomic) BOOL supportsSamplerCompareFunction;
@property (readonly, nonatomic) BOOL supportsMSAADepthResolve;
@property (readonly, nonatomic) BOOL supportsMSAAStencilResolve;
@property (readonly, nonatomic) BOOL supportsMSAADepthResolveFilter;
@property (readonly, nonatomic) BOOL supportsGFXIndirectCommandBuffers;
@property (readonly, nonatomic) BOOL supportsCMPIndirectCommandBuffers;
@property (readonly, nonatomic) BOOL supportsIndirectStageInRegion;
@property (readonly, nonatomic) BOOL supportsIndirectTextures;
@property (readonly, nonatomic) BOOL supportsNorm16BCubicFiltering;
@property (readonly, nonatomic) BOOL supportsTextureOutOfBoundsReads;
@property (readonly, nonatomic) BOOL supportsTextureSwizzle;
@property (readonly, nonatomic) BOOL supportsAlphaYUVFormats;
@property (readonly, nonatomic) BOOL supportsMemoryOrderAtomics;
@property (readonly, nonatomic) BOOL supportsQuadGroup;
@property (readonly, nonatomic) BOOL supportsRenderTextureWrites;
@property (readonly, nonatomic) BOOL supportsImageBlocks;
@property (readonly, nonatomic) BOOL supportsTileShaders;
@property (readonly, nonatomic) BOOL supportsImageBlockSampleCoverageControl;
@property (readonly, nonatomic) BOOL supportsNativeHardwareFP16;
@property (readonly, nonatomic) BOOL supportsPostDepthCoverage;
@property (readonly, nonatomic) BOOL supportsMipLevelsSmallerThanBlockSize;
@property (readonly, nonatomic) BOOL supportsNonUniformThreadgroupSize;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureArguments;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureCubeArguments;
@property (readonly, nonatomic) BOOL supportsTextureCubeArray;
@property (readonly, nonatomic) BOOL supportsQuadShufflesAndBroadcast;
@property (readonly, nonatomic) BOOL supportsConcurrentComputeDispatch;
@property (readonly, nonatomic) BOOL supportsRenderPassWithoutRenderTarget;
@property (readonly, nonatomic) BOOL supportsRasterOrderGroups;
@property (readonly, nonatomic) BOOL supportsRasterOrderGroupsColorAttachment;
@property (readonly, nonatomic) BOOL supportsLinearTexture2DArray;
@property (readonly, nonatomic) BOOL supportsNonSquareTileShaders;
@property (readonly, nonatomic) BOOL supportsSeparateVisibilityAndShadingRate;
@property (readonly, nonatomic) BOOL supports2DLinearTexArraySPI;
@property (readonly, nonatomic) BOOL supportsLayeredRendering;
@property (readonly, nonatomic) BOOL supportsViewportAndScissorArray;
@property (readonly, nonatomic) BOOL supportsIndirectTessellation;
@property (readonly, nonatomic) BOOL supportsMSAAStencilResolveFilter;
@property (readonly, nonatomic) BOOL supportsStencilFeedback;
@property (readonly, nonatomic) BOOL supportsFP32TessFactors;
@property (readonly, nonatomic) BOOL supportsUnalignedVertexFetch;
@property (readonly, nonatomic) BOOL supportsSIMDGroup;
@property (readonly, nonatomic) BOOL supportsShaderMinLODClamp;
@property (readonly, nonatomic) BOOL supportsSIMDShufflesAndBroadcast;
@property (readonly, nonatomic) BOOL supportsWritableArrayOfTextures;
@property (readonly, nonatomic) BOOL supportsVariableRateRasterization;
@property (readonly, nonatomic) BOOL supportsYCBCRFormats;
@property (readonly, nonatomic) BOOL supportsYCBCRFormatsPQ;
@property (readonly, nonatomic) BOOL supportsYCBCRFormats12;
@property (readonly, nonatomic) BOOL supportsYCBCRFormatsXR;
@property (readonly, nonatomic) BOOL supportsASTCHDRTextureCompression;
@property (readonly, nonatomic) BOOL supportsSparseTextures;
@property (readonly, nonatomic) BOOL supportsSparseHeaps;
@property (readonly, nonatomic) BOOL supportsIndirectWritableTextures;
@property (readonly, nonatomic) BOOL supportsFunctionPointers;
@property (readonly, nonatomic) BOOL supportsBinaryFunctionPointers;
@property (readonly, nonatomic) BOOL supportsDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsStatefulDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsShaderBarycentricCoordinates;
@property (readonly, nonatomic) BOOL supportsBlackOrWhiteSamplerBorderColors;
@property (readonly, nonatomic) BOOL supportsMirrorClampToEdgeSamplerMode;
@property (readonly, nonatomic) BOOL supportsSIMDReduction;
@property (readonly, nonatomic) BOOL supportsDepthClipModeClampExtended;
@property (readonly, nonatomic) BOOL supportsTexture2DMultisampleArray;
@property (readonly, nonatomic) BOOL supportsForceSeamsOnCubemaps;
@property (readonly, nonatomic) BOOL supportsFloat16BCubicFiltering;
@property (readonly, nonatomic) BOOL supportsFloat16InfNanFiltering;
@property (readonly, nonatomic) BOOL supportsRTZRounding;
@property (readonly, nonatomic) BOOL supportsAnisoSampleFix;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormatsPQ;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormats12;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormatsXR;
@property (readonly, nonatomic) BOOL supportsBufferBoundsChecking;
@property (readonly, nonatomic) BOOL supportsForkJoin;
@property (readonly, nonatomic) BOOL supportsDevicePartitioning;
@property (readonly, nonatomic) BOOL supportsComputeCompressedTextureWrite;
@property (readonly, nonatomic) BOOL supportsSIMDGroupMatrix;
@property (readonly, nonatomic) BOOL supportsInterchangeTiled;
@property (readonly, nonatomic) BOOL supportsQuadReduction;
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) BOOL gpuAssertionsEnabled;
@property (nonatomic) unsigned long long commandBufferErrorOptions;
@property (readonly, getter=isBCTextureCompressionSupported) BOOL BCTextureCompressionSupported;
@property (readonly) const struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } *targetDeviceInfo;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property BOOL shaderDebugInfoCaching;
@property (readonly) unsigned long long halfFPConfig;
@property (readonly) unsigned long long singleFPConfig;
@property (readonly) unsigned long long doubleFPConfig;
@property (nonatomic) BOOL metalAssertionsEnabled;
@property (readonly) unsigned long long featureProfile;
@property (readonly) const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; float x26; float x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; unsigned int x59; unsigned int x60; unsigned long long x61; } *limits;
@property (readonly) unsigned long long maxFramebufferStorageBits;
@property (readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property (readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property (readonly) unsigned long long maxTileBuffers;
@property (readonly) unsigned long long maxTileTextures;
@property (readonly) unsigned long long maxTileSamplers;
@property (readonly) unsigned long long maxTileInlineDataSize;
@property (readonly) unsigned long long minTilePixels;
@property (readonly) unsigned long long maxColorAttachments;
@property (readonly) unsigned long long maxVertexAttributes;
@property (readonly) unsigned long long maxVertexBuffers;
@property (readonly) unsigned long long maxVertexTextures;
@property (readonly) unsigned long long maxVertexSamplers;
@property (readonly) unsigned long long maxVertexInlineDataSize;
@property (readonly) unsigned long long maxInterpolants;
@property (readonly) unsigned long long maxFragmentBuffers;
@property (readonly) unsigned long long maxFragmentTextures;
@property (readonly) unsigned long long maxFragmentSamplers;
@property (readonly) unsigned long long maxFragmentInlineDataSize;
@property (readonly) unsigned long long maxComputeBuffers;
@property (readonly) unsigned long long maxComputeTextures;
@property (readonly) unsigned long long maxComputeSamplers;
@property (readonly) unsigned long long maxComputeInlineDataSize;
@property (readonly) unsigned long long maxComputeLocalMemorySizes;
@property (readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property (readonly) unsigned long long maxComputeThreadgroupMemory;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) unsigned long long maxVisibilityQueryOffset;
@property (readonly) unsigned long long minConstantBufferAlignmentBytes;
@property (readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property (readonly) unsigned long long maxTextureWidth1D;
@property (readonly) unsigned long long maxTextureWidth2D;
@property (readonly) unsigned long long maxTextureHeight2D;
@property (readonly) unsigned long long maxTextureWidth3D;
@property (readonly) unsigned long long maxTextureHeight3D;
@property (readonly) unsigned long long maxTextureDepth3D;
@property (readonly) unsigned long long maxTextureDimensionCube;
@property (readonly) unsigned long long maxTextureLayers;
@property (readonly) unsigned long long linearTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property (readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property (readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) unsigned long long maxFunctionConstantIndices;
@property (readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) unsigned long long maxInterpolatedComponents;
@property (readonly) unsigned long long maxTessellationFactor;
@property (readonly) unsigned long long maxIndirectBuffers;
@property (readonly) unsigned long long maxIndirectTextures;
@property (readonly) unsigned long long maxIndirectSamplers;
@property (readonly) unsigned long long maxIndirectSamplersPerDevice;
@property (readonly) unsigned long long maxFenceInstances;
@property (readonly) unsigned long long maxViewportCount;
@property (readonly) unsigned long long maxCustomSamplePositions;
@property (readonly) unsigned long long maxVertexAmplificationFactor;
@property (readonly) unsigned long long maxVertexAmplificationCount;
@property (readonly) unsigned long long maxTextureBufferWidth;
@property (readonly) unsigned long long maxComputeAttributes;
@property (readonly) unsigned long long maxConstantBufferArguments;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) BOOL supportPriorityBand;
@property (readonly) unsigned long long sharedMemorySize;
@property (readonly) unsigned long long dedicatedMemorySize;
@property (readonly) struct IndirectArgumentBufferCapabilities { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; } indirectArgumentBufferCapabilities;
@property (readonly, getter=isQuadDataSharingSupported) BOOL quadDataSharingSupported;
@property (readonly) unsigned long long sparseTexturesSupport;
@property (readonly, getter=isFloat32FilteringSupported) BOOL float32FilteringSupported;
@property (readonly, getter=isMsaa32bSupported) BOOL msaa32bSupported;
@property (readonly, getter=isRTZRoundingSupported) BOOL RTZRoundingSupported;
@property (readonly) long long defaultTextureWriteRoundingMode;
@property (readonly, getter=isAnisoSampleFixSupported) BOOL AnisoSampleFixSupported;
@property (readonly, getter=isFixedLinePointFillDepthGradientSupported) BOOL FixedLinePointFillDepthGradientSupported;
@property (readonly, getter=isBinaryFunctionPointersSupported) BOOL BinaryFunctionPointersSupported;
@property (readonly, getter=isLargeMRTSupported) BOOL largeMRTSupported;
@property (readonly) unsigned long long maxRasterizationRateLayerCount;
@property (readonly, getter=isRGB10A2GammaSupported) BOOL RGB10A2GammaSupported;
@property (readonly, getter=isCustomBorderColorSupported) BOOL CustomBorderColorSupported;
@property (readonly, getter=isClampToHalfBorderSupported) BOOL ClampToHalfBorderSupported;
@property (readonly, getter=isPlacementHeapSupported) BOOL placementHeapSupported;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (readonly) BOOL requiresRaytracingEmulation;
@property (readonly) NSString *name;
@property (readonly) unsigned long long registryID;
@property (readonly, getter=isLowPower) BOOL lowPower;
@property (readonly, getter=isHeadless) BOOL headless;
@property (readonly, getter=isRemovable) BOOL removable;
@property (readonly) BOOL hasUnifiedMemory;
@property (readonly) unsigned long long recommendedMaxWorkingSetSize;
@property (readonly, getter=isDepth24Stencil8PixelFormatSupported) BOOL depth24Stencil8PixelFormatSupported;
@property (readonly) unsigned long long readWriteTextureSupport;
@property (readonly) unsigned long long argumentBuffersSupport;
@property (readonly, getter=areRasterOrderGroupsSupported) BOOL rasterOrderGroupsSupported;
@property (readonly, getter=areBarycentricCoordsSupported) BOOL barycentricCoordsSupported;
@property (readonly) unsigned long long currentAllocatedSize;
@property (readonly) unsigned long long maxThreadgroupMemoryLength;
@property (readonly) unsigned long long maxArgumentBufferSamplerCount;
@property (readonly, getter=areProgrammableSamplePositionsSupported) BOOL programmableSamplePositionsSupported;
@property (readonly) unsigned long long sparseTileSizeInBytes;
@property (readonly) unsigned long long maxBufferLength;
@property (readonly) NSArray *counterSets;
@property (readonly) BOOL supportsRaytracing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)productName;
- (id)newLibraryWithFile:(id)a0 error:(id *)a1;
- (BOOL)isMagicMipmapSupported;
- (id)indirectArgumentBufferDecodingData;
- (void)setIndirectArgumentBufferDecodingData:(id)a0;
- (id)familyName;
- (id)newCounterSampleBufferWithDescriptor:(id)a0 error:(id *)a1;
- (id)newTextureLayoutWithDescriptor:(id)a0 isHeapOrBufferBacked:(BOOL)a1;
- (id)newLibraryWithData:(id)a0 error:(id *)a1;
- (void).cxx_destruct;
- (unsigned long long)getSupportedCommandBufferErrorOptions;
- (id)newBinaryArchiveWithDescriptor:(id)a0 error:(id *)a1;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)dealloc;
- (BOOL)mapShaderSampleBufferWithBuffer:(struct { unsigned int x0; unsigned int x1; unsigned int x2; } *)a0 capacity:(unsigned long long)a1 size:(unsigned long long)a2;
- (void)unmapShaderSampleBuffer;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newBufferWithIOSurface:(struct __IOSurface { } *)a0;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })tileSizeWithSparsePageSize:(unsigned long long)a0 textureType:(unsigned long long)a1 pixelFormat:(unsigned long long)a2 sampleCount:(unsigned long long)a3;
- (BOOL)supportsPrimitiveType:(unsigned long long)a0;
- (id)newCommandQueue;
- (void)deserializeCompileTimeStats:(id)a0 addToDictionary:(id)a1;
- (id)newIndirectArgumentBufferLayoutWithStructType:(id)a0;
- (BOOL)supportsVertexAmplificationCount:(unsigned long long)a0;
- (void)_purgeDevice;
- (id)newDynamicLibraryWithURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id).cxx_construct;
- (id)newIndirectCommandBufferWithDescriptor:(id)a0 maxCommandCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)vendorName;
- (id)getRequestedCounters;
- (id)subdivideCounterList:(id)a0;
- (id)copyIOSurfaceSharedTextureProperties:(id)a0;
- (void)newComputePipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)supportsSampleCount:(unsigned long long)a0;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 error:(id *)a2;
- (void)newLibraryWithSource:(id)a0 options:(id)a1 completionHandler:(id /* block */)a2;
- (id)compiler;
- (id)newBufferWithBytes:(const void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)newTextureWithDescriptor:(id)a0;
- (id)newBufferWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (id)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newTextureWithDescriptor:(id)a0 iosurface:(struct __IOSurface { } *)a1 plane:(unsigned long long)a2;
- (id)newTextureWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 descriptor:(id)a2 deallocator:(id /* block */)a3;
- (id)newBufferWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2 deallocator:(id /* block */)a3;
- (id)newSamplerStateWithDescriptor:(id)a0;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (id)newResourceGroupFromResources:(const id *)a0 count:(unsigned long long)a1;
- (id)newDepthStencilStateWithDescriptor:(id)a0;
- (id)newDynamicLibrary:(id)a0 error:(id *)a1;
- (id)newDynamicLibraryWithURL:(id)a0 error:(id *)a1;
- (id)newRasterizationRateMapWithDescriptor:(id)a0;
- (void)compileVisibleFunction:(id)a0 withDescriptor:(id)a1 completionHandler:(id /* block */)a2;
- (BOOL)supportsCounterSampling:(unsigned long long)a0;
- (id)newDefaultLibrary;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newIndirectComputeCommandEncoderWithBuffer:(id)a0;
- (id)newIndirectRenderCommandEncoderWithBuffer:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; })heapBufferSizeAndAlignWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (void)sampleTimestamps:(unsigned long long *)a0 gpuTimestamp:(unsigned long long *)a1;
- (void)_decrementCommandQueueCount;
- (BOOL)supportsTextureWriteRoundingMode:(long long)a0;
- (void)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newComputePipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (unsigned long long)minimumTextureBufferAlignmentForPixelFormat:(unsigned long long)a0;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })sparseTileSizeWithTextureType:(unsigned long long)a0 pixelFormat:(unsigned long long)a1 sampleCount:(unsigned long long)a2;
- (void)_incrementCommandQueueCount;
- (id)newVisibleFunctionTableWithDescriptor:(id)a0;
- (id)newLibraryWithSource:(id)a0 options:(id)a1 error:(id *)a2;
- (id)newIndirectCommandBufferWithDescriptor:(id)a0 maxCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (struct { unsigned long long x0; unsigned long long x1; })heapTextureSizeAndAlignWithDescriptor:(id)a0;
- (id)newHeapWithDescriptor:(id)a0;
- (id)newCommandQueueWithDescriptor:(id)a0;
- (id)newArgumentEncoderWithLayout:(id)a0;
- (id)initWithAcceleratorPort:(unsigned int)a0 simultaneousInstances:(unsigned int)a1;
- (void)_registerForSignpostEnablement;
- (void)_deregisterForSignpostEnablement;
- (BOOL)supportsQueryTextureLOD;
- (BOOL)isASTCPixelFormatsSupported;
- (BOOL)isTileSizeIndependentVaryingsSupported;
- (Class)blitContextClass;
- (Class)renderContextClass;
- (Class)computeContextClass;
- (Class)threadedRenderPassClass;
- (BOOL)isShaderSampleBufferMapped;
- (void)_storeRenderPipelineState:(id)a0;
- (void)_storeComputePipelineState:(id)a0;
- (void)enablePerfCounterSampling:(BOOL)a0;
- (id)getDeviceCounterDictionary;
- (id)getDeviceCounterDictionaryAsync;
- (id)getDeviceCounters;
- (id)metadataCounters;
- (id)metadataCountersAsync;
- (int)requestCounters:(id)a0 statOptions:(unsigned long long)a1;
- (unsigned long long *)getPerfCounterDataWithFilter:(struct PerfCtrFilter { unsigned long long x0; unsigned long long x1; struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long> > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true> > { float x0; } x3; } x0; } x2; } *)a0 returnSize:(unsigned int *)a1;
- (unsigned long long *)getRawPerfCounterDataWithFilter:(struct PerfCtrFilter { unsigned long long x0; unsigned long long x1; struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long> > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true> > { float x0; } x3; } x0; } x2; } *)a0 returnSize:(unsigned int *)a1;
- (void)setupCompiler:(int)a0;
- (void)setConsistentGPUPerfStateTo:(unsigned int)a0;
- (id)newCounterSampleBufferWithLength:(unsigned long long)a0 label:(id)a1 error:(id *)a2;
- (id)counterSampleBufferLimits;

@end

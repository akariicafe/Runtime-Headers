@class CKMessageEntryTextView, CKMessageEntryRichTextView, UIView, NSString, CKComposition, IMPluginPayload, UIButton, NSDictionary, CKConversation, UIViewController;
@protocol CKPluginEntryViewController;

@interface CKMessageEntryContentView : UIScrollView <UITextViewDelegate, CKMessageEntryRichTextViewDelegate, UITextDragDelegate, CKMessageEntryViewStyleProtocol, UIGestureRecognizerDelegate>

@property (weak, nonatomic) CKMessageEntryTextView *activeView;
@property (nonatomic) BOOL shouldShowSubject;
@property (retain, nonatomic) UIViewController<CKPluginEntryViewController> *pluginEntryViewController;
@property (retain, nonatomic) IMPluginPayload *shelfPluginPayload;
@property (retain, nonatomic) CKMessageEntryTextView *subjectView;
@property (retain, nonatomic) CKMessageEntryRichTextView *textView;
@property (retain, nonatomic) UIView *textAndSubjectDividerLine;
@property (retain, nonatomic) UIView *pluginDividerLine;
@property (nonatomic) BOOL needsTextLayout;
@property (nonatomic) BOOL needsEnsureSelectionVisible;
@property (nonatomic) BOOL needsEnsureTextViewVisible;
@property (nonatomic) BOOL ignoreEndEditing;
@property (nonatomic) BOOL isCompositionExpirable;
@property (retain, nonatomic) UIButton *clearPluginButton;
@property (retain, nonatomic) NSString *requestedPlaceholderText;
@property (retain, nonatomic) NSString *overridePlaceholderText;
@property (nonatomic) BOOL pendingShelfPayloadWillAnimateIn;
@property (copy, nonatomic) NSDictionary *bizIntent;
@property (readonly, nonatomic) BOOL shouldShowPlugin;
@property (retain, nonatomic) CKComposition *composition;
@property (copy, nonatomic) NSString *placeholderText;
@property (readonly, nonatomic) UIView *pluginView;
@property (readonly, nonatomic, getter=isActive) BOOL active;
@property (readonly, nonatomic, getter=isSingleLine) BOOL singleLine;
@property (readonly, nonatomic, getter=isShowingDictationPlaceholder) BOOL showingDictationPlaceholder;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } contentTextAlignmentInsets;
@property (nonatomic) char balloonColor;
@property (nonatomic) double placeHolderWidth;
@property (nonatomic) double maxContentWidthWhenExpanded;
@property (nonatomic) double maxPreviewContentWidthWhenExpanded;
@property (nonatomic) double containerViewLineWidth;
@property (nonatomic) double sendButtonTextInsetWidth;
@property (weak, nonatomic) CKConversation *conversation;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long style;

+ (id)_createTextView;
+ (id)_createSubjectView;
+ (void)prewarmTextView;

- (void)willAnimateBoundsChange;
- (void)collapseTextFieldsIfInPencilMode;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void).cxx_destruct;
- (void)dealloc;
- (void)messageEntryRichTextViewDidTapHandwritingKey:(id)a0;
- (double)maxWidthForPreviewImagesInMessageEntryRichTextView:(id)a0;
- (BOOL)messageEntryRichTextView:(id)a0 shouldRecognizeGesture:(id)a1;
- (void)messageEntryRichTextViewWasTapped:(id)a0 isLongPress:(BOOL)a1;
- (void)messageEntryRichTextView:(id)a0 didTapMediaObject:(id)a1;
- (void)messageEntryRichTextViewDidTapMention:(id)a0 characterIndex:(double)a1;
- (BOOL)makeActive;
- (void)_updateUI;
- (id)textDraggableView:(id)a0 itemsForDrag:(id)a1;
- (void)layoutSubviews;
- (BOOL)textView:(id)a0 shouldInteractWithTextAttachment:(id)a1 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 interaction:(long long)a3;
- (void)didFinishAnimatedBoundsChange;
- (double)_calcuateIdealMaxPluginHeight:(BOOL)a0;
- (BOOL)shouldShowClearButton;
- (void)_layoutDividerLine:(id)a0 leftInset:(double)a1 rightInset:(double)a2 currentYOffset:(double *)a3;
- (double)_maxWidthForTextView;
- (void)_layoutTextView:(id)a0 currentYOffset:(double *)a1 originX:(double)a2 maxWidth:(double)a3;
- (void)ensureSelectionVisibleIfNeeded;
- (void)ensureTextViewVisibleIfNeeded;
- (void)clearPluginButtonTapped:(id)a0;
- (void)pluginPayloadWantsResize:(id)a0;
- (void)plugingPayloadDidLoad:(id)a0;
- (void)invalidateComposition;
- (void)configureShelfForPluginPayload:(id)a0;
- (BOOL)_shouldDeferUpdateUI;
- (BOOL)messageEntryRichTextView:(id)a0 shouldPasteMediaObjects:(id)a1;
- (void)messageEntryRichTextView:(id)a0 pastedURL:(id)a1;
- (void)prepareForShelfPayloadAnimation;
- (BOOL)shouldLayoutPluginEdgeToEdge;
- (void)textViewDidBeginEditing:(id)a0;
- (void)acceptAutocorrection;
- (BOOL)textViewShouldBeginEditing:(id)a0;
- (void)textViewDidEndEditing:(id)a0;
- (void)textViewDidChange:(id)a0;
- (void)textViewDidChangeSelection:(id)a0;
- (BOOL)textView:(id)a0 shouldChangeTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 shouldShowSubject:(BOOL)a1;

@end

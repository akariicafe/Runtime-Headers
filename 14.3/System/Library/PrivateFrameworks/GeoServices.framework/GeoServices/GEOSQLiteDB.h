@class NSMapTable, NSString, NSDictionary, NSURL, NSError, NSObject, NSMutableArray;
@protocol OS_dispatch_queue, OS_os_log, OS_dispatch_group;

@interface GEOSQLiteDB : NSObject {
    NSObject<OS_os_log> *_log;
    struct sqlite3 { } *_db;
    NSError *_lastError;
    NSURL *_databaseFileURL;
    int _sqliteFlags;
    NSDictionary *_pragmas;
    id /* block */ _setupBlock;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_externalFilesQueue;
    NSObject<OS_dispatch_group> *_externalFilesGroup;
    NSMutableArray *_externalFilesActiveChannels;
    NSMapTable *_preparedStatements;
    BOOL _isInTransaction;
    BOOL _isTemporaryInMemoryDatabase;
    BOOL _didEncounterExternalResourceErrorInTransaction;
    NSMutableArray *_filesAddedDuringTransaction;
    NSMutableArray *_filesDeletedDuringTransaction;
    NSMapTable *_virtualTables;
    union { struct atomic_flag { _Atomic BOOL _Value; } flag; int dummy; } _didTearDown;
}

@property (class, readonly, nonatomic) NSDictionary *defaultPragmas;

@property (readonly, nonatomic) struct sqlite3 { } *sqliteDB;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *isolationQueue;
@property (readonly, nonatomic) NSString *dbFilePath;
@property (readonly, nonatomic) NSError *lastError;
@property (readonly, nonatomic) BOOL isDBReady;
@property (readonly, nonatomic) NSObject<OS_os_log> *log;
@property (readonly, nonatomic) NSDictionary *pragmas;
@property (nonatomic) long long user_version;

+ (BOOL)renameAllDBFilesFrom:(id)a0 to:(id)a1;
+ (id)_findAllDBFilesForURL:(id)a0 error:(id *)a1;

- (int)_setPragmas;
- (BOOL)setup;
- (BOOL)unregisterVirtualTable:(id)a0;
- (id)getTablesLike:(id)a0;
- (id)blobForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (BOOL)bindInt64Parameter:(const char *)a0 toValue:(long long)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (id)init;
- (void)_debug_lockDB:(id)a0;
- (void).cxx_destruct;
- (BOOL)deleteAllDBFiles;
- (void)_createParentDirectory;
- (int)_openDatabaseFile;
- (void)_channelCleanupFailedWithError:(int)a0;
- (BOOL)deleteExternalResourceAtURL:(id)a0 error:(id *)a1;
- (BOOL)_bindParameter:(const char *)a0 inStatement:(struct sqlite3_stmt { } *)a1 error:(id *)a2 withBinder:(id /* block */)a3;
- (BOOL)bindBlobParameter:(const char *)a0 toValue:(id)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (BOOL)_deleteAllDatabaseFilesIfCorrupt:(int)a0;
- (int)intForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (void)dealloc;
- (void)_doneWritingToChannel:(id)a0;
- (BOOL)bindRealParameter:(const char *)a0 toValue:(double)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (void)executeAsync:(id /* block */)a0;
- (BOOL)_openAndConfigureWithRetryIfCorrupt;
- (int)_openAndConfigure;
- (void)_debug_unlockDB:(id)a0;
- (BOOL)writeExternalResourceWithData:(id)a0 toURL:(id)a1 error:(id *)a2;
- (void)_execute:(id /* block */)a0 errorHandler:(id /* block */)a1;
- (BOOL)dropTablesLike:(id)a0;
- (void)_deleteAndReopenDatabaseIfCorrupt:(int)a0;
- (id)stringForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (void)_closeDB;
- (BOOL)reportSQLiteErrorCode:(int)a0 method:(id)a1 error:(id *)a2;
- (BOOL)executeStatement:(struct sqlite3_stmt { } *)a0 error:(id *)a1;
- (void)executeAsync:(id /* block */)a0 errorHandler:(id /* block */)a1;
- (id)description;
- (BOOL)_deleteAllDBFiles;
- (long long)lastInsertRowID;
- (id)initWithQueueName:(const char *)a0 logFacility:(const char *)a1 dbFilePath:(id)a2 sqliteFlags:(int)a3 pragmas:(id)a4 setupBlock:(id /* block */)a5;
- (BOOL)bindNullParameter:(const char *)a0 inStatement:(struct sqlite3_stmt { } *)a1 error:(id *)a2;
- (BOOL)executeInTransaction:(id /* block */)a0;
- (BOOL)bindIntParameter:(const char *)a0 toValue:(int)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (id)getAllTables;
- (double)doubleForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (long long)int64ForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (BOOL)bindZeroBlobParameter:(const char *)a0 length:(unsigned long long)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (id)noCopyBlobForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (BOOL)bindParameter:(const char *)a0 toUUID:(id)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (void)_channelEncounteredError:(int)a0;
- (BOOL)vacuum;
- (BOOL)bindTextParameter:(const char *)a0 toValue:(id)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (struct sqlite3_stmt { } *)statementForKey:(id)a0;
- (void)tearDown;
- (BOOL)moveExternalResourceAtURL:(id)a0 toURL:(id)a1 error:(id *)a2;
- (void)executeSync:(id /* block */)a0;
- (BOOL)prepareStatement:(const char *)a0 forKey:(id)a1;
- (id)initWithQueueName:(const char *)a0 log:(id)a1 databaseFileURL:(id)a2 sqliteFlags:(int)a3 pragmas:(id)a4 setupBlock:(id /* block */)a5;
- (BOOL)_waitForAllTransactionExternalResources;
- (id)_blobForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1 noCopy:(BOOL)a2;
- (BOOL)registerVirtualTable:(id)a0;
- (BOOL)writeBlobData:(id)a0 toTable:(const char *)a1 column:(const char *)a2 rowID:(long long)a3 error:(id *)a4;
- (BOOL)bindBlobNoCopyParameter:(const char *)a0 toValue:(id)a1 inStatement:(struct sqlite3_stmt { } *)a2 error:(id *)a3;
- (BOOL)statementForKey:(id)a0 statementBlock:(id /* block */)a1;
- (BOOL)createTable:(const char *)a0 withDrop:(const char *)a1;
- (BOOL)executeStatement:(id)a0 statementBlock:(id /* block */)a1;
- (void)_writeTransactionExternalResourceWithData:(id)a0 toURL:(id)a1;
- (void)executeSync:(id /* block */)a0 errorHandler:(id /* block */)a1;
- (id)UUIDForColumn:(int)a0 inStatment:(struct sqlite3_stmt { } *)a1;
- (BOOL)dropAllTables;
- (void)clearStatement:(id)a0;

@end

@class NSTimer, SXAnimatedImage, UIImage, SXImageResource, UILongPressGestureRecognizer, NSString, UIView, NSMapTable, UIActivityIndicatorView;
@protocol SXImageViewDelegate, SWReachabilityProvider, SXResourceDataSource, NSItemProviderWriting;

@interface SXImageView : UIImageView <SXAXCustomRotorItemProvider, SXAnimatedImageDelegate, SWReachabilityObserver, SXDraggable>

@property (readonly, weak, nonatomic) id<SXResourceDataSource> resourceDataSource;
@property (readonly, nonatomic) id<SWReachabilityProvider> reachabilityProvider;
@property (copy, nonatomic) id /* block */ preferredQualityImageRequestCancelHandler;
@property (copy, nonatomic) id /* block */ highQualityImageRequestCancelHandler;
@property (nonatomic) struct CGSize { double width; double height; } preferredQualityLoadingImageSize;
@property (weak, nonatomic) UIImage *preferredQualityImage;
@property (weak, nonatomic) UIImage *highQualityImage;
@property (nonatomic) unsigned long long preferredQualityInterest;
@property (nonatomic) unsigned long long highQualityInterest;
@property (readonly, nonatomic) BOOL hasInterest;
@property (readonly, nonatomic) BOOL prefersHighQuality;
@property (retain, nonatomic) NSMapTable *interestTable;
@property (retain, nonatomic) UIActivityIndicatorView *activityIndicatorView;
@property (nonatomic) BOOL shouldResume;
@property (nonatomic) BOOL shouldResumeAfterLoad;
@property (nonatomic) unsigned long long playCount;
@property (retain, nonatomic) NSTimer *activeTimer;
@property (nonatomic) unsigned long long intendedFrameIndex;
@property (retain, nonatomic) UILongPressGestureRecognizer *scrubGesture;
@property (nonatomic) struct CGPoint { double x; double y; } previousPoint;
@property (nonatomic) BOOL isScrubbing;
@property (nonatomic) BOOL paused;
@property (readonly, nonatomic) SXImageResource *imageResource;
@property (nonatomic) BOOL shouldShowLoadingIndicator;
@property (nonatomic) long long loadingIndicatorStyle;
@property (nonatomic) BOOL scrubbingEnabled;
@property (nonatomic) struct CGSize { double width; double height; } preferredImageSize;
@property (weak, nonatomic) id<SXImageViewDelegate> delegate;
@property (readonly, nonatomic) BOOL containsAnimatedImage;
@property (readonly, nonatomic) BOOL hasLoadedImage;
@property (nonatomic) BOOL isDecorative;
@property (readonly, nonatomic) SXAnimatedImage *animatedImage;
@property (nonatomic) unsigned long long frameIndex;
@property (copy, nonatomic) id /* block */ frameChangeBlock;
@property (nonatomic) BOOL autoPlayEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) id<NSItemProviderWriting> dragObject;
@property (readonly, nonatomic) NSString *dragIdentifier;
@property (readonly, nonatomic) UIView *dragPreviewView;

- (void)willMoveToSuperview:(id)a0;
- (BOOL)isAccessibilityElement;
- (void)reachabilityChanged:(BOOL)a0;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)setAnimatedImage:(id)a0;
- (void)dealloc;
- (BOOL)accessibilityIgnoresInvertColors;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (BOOL)isVisible;
- (void)pause;
- (void)didReceiveMemoryWarning;
- (void)resume;
- (void)animatedImage:(id)a0 madeImageAvailableForFrameAtIndex:(unsigned long long)a1;
- (void)layoutActivityIndicator;
- (void)giveUpInterestForObject:(id)a0;
- (void)addInterestInImageQuality:(int)a0 forObject:(id)a1;
- (void)validateLoadedImage;
- (void)loadHighQualityImage;
- (void)crossfadeToImage:(id)a0;
- (void)loadPreferredQualityImage;
- (void)didLoadAnimatedImage:(id)a0;
- (void)fadeInImageWhenVisible:(id)a0;
- (void)handleScrubGesture:(id)a0;
- (void)setFrameIndex:(unsigned long long)a0 allowNearest:(BOOL)a1;
- (void)showNextFrame;
- (id)supportedCustomRotors;
- (id)itemsForCustomRotor:(id)a0;
- (void)didStartDragging;
- (void)didEndDragging;
- (id)stringForAXDragAction;
- (id)initWithImageResource:(id)a0 resourceDataSource:(id)a1 reachabilityProvider:(id)a2;
- (BOOL)objectHasQualityInterest:(id)a0 quality:(int *)a1;
- (struct CGSize { double x0; double x1; })loadedImageSize;

@end

@class NSLocale;

@interface CHRecognizerConfiguration : NSObject {
    unsigned long long _language;
    unsigned long long _script;
}

@property (readonly, nonatomic) int mode;
@property (readonly, copy, nonatomic) NSLocale *locale;
@property (readonly, nonatomic) int contentType;
@property (readonly, nonatomic) int contentTypeForNoSpaceRecognition;
@property (readonly, nonatomic) int autoCapitalizationMode;
@property (readonly, nonatomic) BOOL enableCachingIfAvailable;
@property (readonly, nonatomic) BOOL enableGen2ModelIfAvailable;
@property (readonly, nonatomic) BOOL enableGen2CharacterLMIfAvailable;

+ (BOOL)isLocaleSupported:(id)a0 withMode:(int)a1;
+ (id)defaultLocaleForRecognitionType:(int)a0 withMode:(int)a1;
+ (int)validateRecognitionMode:(int)a0;
+ (id)stringForRecognitionMode:(int)a0;
+ (struct CGSize { double x0; double x1; })defaultMinimumDrawingSize;
+ (BOOL)shouldApplyLatinSpacingForLocale:(id)a0;
+ (id)stringForRecognitionContentType:(int)a0;
+ (id)stringForAutoCapitalizationMode:(int)a0;
+ (void)_decodeLocale:(id)a0 supportedLanguage:(unsigned long long *)a1 supportedScript:(unsigned long long *)a2;
+ (id)_stringForRecognitionLanguage:(unsigned long long)a0;
+ (id)_stringForRecognitionScript:(unsigned long long)a0;
+ (unsigned long long)supportedScriptForLocale:(id)a0;
+ (unsigned long long)supportedLanguageForLocale:(id)a0;
+ (BOOL)isLanguageSupported:(unsigned long long)a0 withMode:(int)a1;
+ (id)forcedGen2ModelLocaleForLocale:(id)a0;
+ (id)spellCheckingLocaleForRecognitionLocale:(id)a0 string:(id)a1;

- (void)dealloc;
- (id)description;
- (id)configurationKey;
- (void *)newLanguageModel;
- (int)mecabraInputMethodType;
- (id)initWithMode:(int)a0 locale:(id)a1 contentType:(int)a2 autoCapitalizationMode:(int)a3 enableCachingIfAvailable:(BOOL)a4 enableGen2ModelIfAvailable:(BOOL)a5 enableGen2CharacterLMIfAvailable:(BOOL)a6;
- (unsigned int)requiredInappropriateFilteringFlags;
- (BOOL)shouldGenerateDigitLetterAlternatives;
- (BOOL)shouldEnforceGrammarOnTransliterations;
- (struct CHNeuralNetwork { void /* function */ *x0; BOOL x1; struct CHCodeMap *x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; id x7; id x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; } *)newRecognitionEngine;
- (struct CHNeuralNetwork { void /* function */ *x0; BOOL x1; struct CHCodeMap *x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; id x7; id x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; } *)newFreeFormEngine;
- (id)newSpellChecker;
- (const struct _LXLexicon { } *)newStaticLexicon:(id *)a0;
- (const struct _LXLexicon { } *)newPhraseLexicon:(id *)a0;
- (void *)newCJKStaticLexicon;
- (struct _CFBurstTrie { } *)newOVSTrie;
- (id)newPatternFST;
- (id)newPostProcessingFST;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; unsigned long long x1; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode *x0; struct NetworkNode *x1; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode *x0; } x2; } x2; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x0; } x2; } x0; } x3; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge *x0; struct NetworkEdge *x1; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge *x0; } x2; } x4; struct vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> > { struct NetworkEdge **x0; struct NetworkEdge **x1; struct __compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> > { struct NetworkEdge **x0; } x2; } x5; struct SymbolMap { void /* function */ **x0; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x1; struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x0; } x2; } x0; } x2; } x6; BOOL x7; struct map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > > { struct __tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> > { unsigned long long x0; } x2; } x0; } x8; struct set<NetworkEdgeIdentifier, std::__1::less<NetworkEdgeIdentifier>, std::__1::allocator<NetworkEdgeIdentifier> > { struct __tree<NetworkEdgeIdentifier, std::__1::less<NetworkEdgeIdentifier>, std::__1::allocator<NetworkEdgeIdentifier> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<NetworkEdgeIdentifier, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<NetworkEdgeIdentifier> > { unsigned long long x0; } x2; } x0; } x9; unsigned int *x10; unsigned long long x11; } *)newGrammarFST;
- (struct Network { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; unsigned long long x1; struct vector<NetworkNode, std::__1::allocator<NetworkNode> > { struct NetworkNode *x0; struct NetworkNode *x1; struct __compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> > { struct NetworkNode *x0; } x2; } x2; struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x0; } x2; } x0; } x3; struct vector<NetworkEdge, std::__1::allocator<NetworkEdge> > { struct NetworkEdge *x0; struct NetworkEdge *x1; struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> > { struct NetworkEdge *x0; } x2; } x4; struct vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> > { struct NetworkEdge **x0; struct NetworkEdge **x1; struct __compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> > { struct NetworkEdge **x0; } x2; } x5; struct SymbolMap { void /* function */ **x0; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x1; struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x0; } x2; } x0; } x2; } x6; BOOL x7; struct map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > > { struct __tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> > { unsigned long long x0; } x2; } x0; } x8; struct set<NetworkEdgeIdentifier, std::__1::less<NetworkEdgeIdentifier>, std::__1::allocator<NetworkEdgeIdentifier> > { struct __tree<NetworkEdgeIdentifier, std::__1::less<NetworkEdgeIdentifier>, std::__1::allocator<NetworkEdgeIdentifier> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<NetworkEdgeIdentifier, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<NetworkEdgeIdentifier> > { unsigned long long x0; } x2; } x0; } x9; unsigned int *x10; unsigned long long x11; } *)newRadicalClusterFST;
- (struct VariantMap { int *x0; int *x1; int *x2; int x3; int *x4; unsigned long long x5; } *)newTransliterationVariantMap;
- (void *)newCharacterLanguageModelAndMap:(struct map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > { struct __tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } *)a0;
- (id)newStrokeTransitionModel;
- (id)newCutpointModel;
- (id)newCTCRecognitionModel;
- (id)newPostProcessorWithStaticLexicon:(struct _LXLexicon { } *)a0 customLexicon:(struct _LXLexicon { } *)a1 phraseLexicon:(struct _LXLexicon { } *)a2 customPhraseLexicon:(struct _LXLexicon { } *)a3 recognizer:(id)a4 textReplacements:(id)a5 postProcessingFST:(id)a6 languageModel:(void *)a7;
- (id)newCTCTextDecoderWithStaticLexicon:(struct _LXLexicon { } *)a0 customLexicon:(struct _LXLexicon { } *)a1 wordLanguageModel:(void *)a2;
- (BOOL)shouldForwardMecabraOTAAssetsUpdate;
- (BOOL)shouldRefineChineseCharacterCandidates;
- (BOOL)shouldApplyLMRescoring;
- (BOOL)shouldTransliterateAndSynthetizeCandidates;
- (BOOL)shouldPromoteChineseCommonCharacters;
- (BOOL)shouldTransformCharacterProbabilitiesIntoLogScores;
- (BOOL)shouldPerformGlobalBestSearch;
- (BOOL)shouldPerformGlobalBestSearchWithSmallLattice;
- (BOOL)shouldPerformIntegratedLexiconExpansion;
- (BOOL)shouldPenalizeLetterInsertion;
- (BOOL)shouldPerformMultiWordsExpansion;
- (BOOL)shouldApplyLexicalPenalty;
- (BOOL)shouldExpandNonSpaceSeparators;
- (BOOL)shouldComputeStrokePenalties;
- (BOOL)shouldExpandCodePoints;
- (BOOL)shouldPenalizePrefixes;
- (BOOL)shouldApplyRomanPostProcessing;
- (BOOL)shouldApplyChinesePostProcessing;
- (BOOL)shouldAutoCapitalize;
- (BOOL)shouldUseTokenPrecedingSpaces;
- (BOOL)shouldTransliterateSentences;
- (BOOL)shouldApplyDiacriticSensitivity;
- (BOOL)shouldUseCaching;
- (unsigned long long)supportedSegmentationStrategy;
- (BOOL)shouldPerformRegularSpaceRecognition;
- (BOOL)shouldPerformNoSpaceRecognition;
- (BOOL)shouldFallbackOnSingleCharacterExpansion;
- (BOOL)shouldComposeLexiconWithNetwork;
- (BOOL)shouldExpandLexiconInNetwork;
- (BOOL)shouldKeepDuplicateTokenIDs;
- (BOOL)shouldKeepOutOfPatternCandidates;
- (BOOL)shouldDetectChinesePunctuation;
- (BOOL)shouldDetectRomanPunctuation;
- (long long)engineCandidateCount;
- (BOOL)shouldApplyCandidatesThresholding;
- (BOOL)shouldRelaxFinalCandidatesThresholding;
- (BOOL)shouldApplyLMSorting;
- (id /* block */)decodingCommitActionBlock;
- (BOOL)shouldRunNextGenRecognizer;
- (BOOL)shouldTreatAllSmallStrokesAsPunctuation;
- (BOOL)shouldApplyCharacterLMRescoring;
- (BOOL)shouldReplaceInvalidTokenIDs;
- (long long)precedingSpaceDefaultBehavior;
- (long long)maxRecognitionResultDefaultCount;
- (BOOL)isEqualToRecognizerConfiguration:(id)a0;
- (BOOL)hasSameResourcesAsConfiguration:(id)a0;
- (BOOL)hasSamePostProcessingAsConfiguration:(id)a0;
- (BOOL)shouldRunNextGenCharacterLM;
- (unsigned long long)effectiveEngineLanguage;
- (BOOL)shouldTransliterateHalfWidthPunctuations;
- (BOOL)shouldApplySemanticTokenization;
- (BOOL)shouldIdentifyChangeableColumns;
- (BOOL)shouldMergeNoPrecedingWhiteSpaceColumns;
- (id)linguisticResourcesFallbackLocale;
- (BOOL)shouldReorderSCTCConfusion;
- (BOOL)shouldRefineCandidates;
- (BOOL)shouldMarkMultiWordOVS;
- (id)languageResourceBundleWithStaticLexicon:(struct _LXLexicon { } *)a0 customLexicon:(struct _LXLexicon { } *)a1 wordLanguageModel:(void *)a2;
- (double)decodingLexiconWeight;
- (double)decodingCharacterLMWeight;
- (double)characterLMLowerBoundLogProbability;
- (double)decodingWordLMWeight;
- (BOOL)shouldPreserveLegacyTranscriptionPaths;

@end

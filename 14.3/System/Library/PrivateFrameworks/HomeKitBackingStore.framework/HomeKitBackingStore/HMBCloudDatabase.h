@class NAFuture, HMBCloudDatabaseStateModel, CKDatabase, CKContainerID, NSSet, NSMutableDictionary, HMBLocalDatabase, CKContainer, HMBCloudDatabaseConfiguration, NSString, HMBLocalZone, HMFUnfairLock;
@protocol HMBCloudDatabaseDelegate;

@interface HMBCloudDatabase : HMFObject <HMBCloudPushObserver, HMFLogging>

@property (readonly, nonatomic) NSSet *privateZoneIDs;
@property (readonly, nonatomic) NSSet *sharedZoneIDs;
@property (readonly, nonatomic) NSSet *publicZoneIDs;
@property (readonly, nonatomic) HMBLocalDatabase *localDatabase;
@property (readonly, nonatomic) HMBLocalZone *stateZone;
@property (readonly, nonatomic) HMFUnfairLock *propertyLock;
@property (retain, nonatomic) HMBCloudDatabaseStateModel *privateDatabaseState;
@property (retain, nonatomic) HMBCloudDatabaseStateModel *sharedDatabaseState;
@property (retain, nonatomic) HMBCloudDatabaseStateModel *publicDatabaseState;
@property (readonly, nonatomic) NSMutableDictionary *zoneStateByZoneID;
@property (readonly, nonatomic) CKContainer *container;
@property (readonly, nonatomic) CKDatabase *sharedDatabase;
@property (readonly, nonatomic) CKDatabase *privateDatabase;
@property (readonly, nonatomic) CKDatabase *publicDatabase;
@property (retain, nonatomic) NAFuture *initialCloudSyncFuture;
@property (retain, nonatomic) NAFuture *manateeAvailabilityFuture;
@property (weak, nonatomic) id<HMBCloudDatabaseDelegate> delegate;
@property (readonly, nonatomic) CKContainerID *containerID;
@property (readonly, copy, nonatomic) HMBCloudDatabaseConfiguration *configuration;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)logCategory;
+ (id)extantDatabases;
+ (id)extantDatabasesLock;

- (id)shutdown;
- (id)acceptInvitations:(id)a0;
- (void)updateServerChangeToken:(id)a0 forZoneWithID:(id)a1;
- (void)handleCreatedZoneIDs:(id)a0;
- (void)addContainerOperation:(id)a0;
- (void).cxx_destruct;
- (id)subscriptionIDForCloudID:(id)a0 recordType:(id)a1;
- (void)addDatabaseOperation:(id)a0 forScope:(long long)a1;
- (id)unregisterSharedSubscriptionForSubscriptionID:(id)a0;
- (void)handler:(id)a0 didReceiveMessageWithUserInfo:(id)a1;
- (id)_zonesWithScope:(long long)a0;
- (id)peformCodeOperationWithServiceName:(id)a0 functionName:(id)a1 request:(id)a2 responseClass:(Class)a3;
- (id)createPrivateZoneWithID:(id)a0;
- (id)performCloudPullForScope:(long long)a0;
- (id)performAdministrativeFetchForDatabaseScope:(long long)a0 withForce:(BOOL)a1;
- (void)notifyDelegateOfError:(id)a0 forOperation:(id)a1;
- (id)removePrivateZoneWithID:(id)a0;
- (void)deallocForZoneWithID:(id)a0;
- (id)attributeDescriptions;
- (id)subscriptionsForZoneWithID:(id)a0;
- (id)acceptInvitation:(id)a0;
- (id)performInitialCloudSync;
- (id)unregisterPrivateSubscriptionForSubscriptionID:(id)a0;
- (void)updateServerChangeToken:(id)a0 forDatabaseWithScope:(long long)a1;
- (id)fetchSubscriptionsOn:(id)a0;
- (BOOL)retryCloudKitOperation:(id)a0 afterError:(id)a1 retryBlock:(id /* block */)a2;
- (id)unregisterPrivateSubscriptionForExternalRecordType:(id)a0;
- (id)fetchUserRecordOn:(id)a0;
- (void)updateRebuildStatus:(id)a0 forZoneWithID:(id)a1;
- (id)serverChangeTokenForZoneWithID:(id)a0;
- (id)waitForManateeAvailability;
- (id)openExistingPrivateZoneWithID:(id)a0 configuration:(id)a1 delegate:(id)a2 error:(id *)a3;
- (id)performAdministrativeFetchForAllDatabases:(BOOL)a0;
- (id)databaseStateForDatabaseScope:(long long)a0;
- (id)declineInvitation:(id)a0;
- (id)initWithLocalDatabase:(id)a0 configuration:(id)a1;
- (id)registerSharedSubscriptionForExternalRecordType:(id)a0;
- (id)fetchShareMetadataForInvitations:(id)a0;
- (void)updateNeedsZoneDeletion:(BOOL)a0 forZoneWithID:(id)a1;
- (BOOL)_retryCloudKitOperationAfterError:(id)a0 retryBlock:(id /* block */)a1;
- (id)fetchZonesOn:(id)a0;
- (id)initWithLocalDatabase:(id)a0 stateZone:(id)a1 container:(id)a2 configuration:(id)a3 databaseStateModelsByScope:(id)a4 zoneStateModels:(id)a5;
- (id)removeZoneWithID:(id)a0;
- (id)subscriptionIDForZoneID:(id)a0 recordType:(id)a1;
- (void)handleRemovedZoneIDs:(id)a0 userInitiated:(BOOL)a1;
- (id)operationConfigurationWithProcessingOptions:(id)a0;
- (id)unregisterSharedSubscriptionForExternalRecordType:(id)a0;
- (id)openExistingSharedZoneWithID:(id)a0 configuration:(id)a1 delegate:(id)a2 error:(id *)a3;
- (void)handler:(id)a0 didReceiveCKNotification:(id)a1;
- (id)waitForManateeAvailabilityAndRecheckIfAlreadyAvailable:(BOOL)a0;
- (id)fetchZones:(BOOL)a0;
- (id)waitForManateeAvailabilityAndRecheckIfAlreadyAvailable;
- (void)removeStateForZoneID:(id)a0;
- (id)fetchParticipants:(id)a0;
- (id)registerSubscriptionForExternalRecordType:(id)a0 databaseState:(id)a1;
- (id)pushSubscriptionsForDatabase:(id)a0 subscriptionsToSave:(id)a1 subscriptionIDsToRemove:(id)a2;
- (id)logIdentifier;
- (void)handleUpdatedZonesIDs:(id)a0;
- (void)handleAccountChangedNotification:(id)a0;
- (id)registerSubscription:(id)a0 forZoneWithID:(id)a1;
- (id)openOrCreatePrivateZoneWithID:(id)a0 configuration:(id)a1 delegate:(id)a2 error:(id *)a3;
- (id)registerPrivateSubscriptionForExternalRecordType:(id)a0;
- (id)unregisterSubscription:(id)a0 forZoneWithID:(id)a1;

@end

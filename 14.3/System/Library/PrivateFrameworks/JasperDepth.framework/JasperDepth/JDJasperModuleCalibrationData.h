@interface JDJasperModuleCalibrationData : NSObject {
    struct _JasperCalib { unsigned int version; BOOL softGatingValid; BOOL nominalPdeFromNVM; unsigned char rsvd0[2]; struct { struct { struct { struct { float bins[104]; } tdcs[2]; } ref[2]; struct { struct { float bins[104]; } tdcs[4]; } img[144]; } shortRange; struct { struct { struct { float bins[104]; } tdcs[2]; } ref[2]; struct { struct { float bins[104]; } tdcs[4]; } img[144]; } normalRange; } DNL_INL; char QE[140][180]; struct { struct { struct { float bins[64]; float tailParams[5]; } banks[4]; } widePulseShortRange; struct { struct { float bins[64]; float tailParams[5]; } banks[4]; } narrowPulseShortRange; } pulseShape; struct { struct { struct { struct { unsigned char spotId; unsigned char tileId; unsigned char strayIntensity; unsigned char rsvd; float spotPower; } spots[144]; } banks[4]; } spotsData; struct JasperCalibSpotLocations { struct { struct { float x; float y; } spots[144]; } banks[4]; float calibDistance; } locations; } spots; struct JasperCalibSpotLocations { struct { struct { float x; float y; } spots[144]; } banks[4]; float calibDistance; } operationalSpotLocations; struct { float mu; float sigma; } nominalPDE; struct { struct { struct { unsigned short nominalRef[2]; short TRGOUTDLY; unsigned short TMINTOF; unsigned short SETPLSCG; unsigned short TGDDLY; unsigned short TDCTR1C; unsigned short gateDelay; unsigned short refStrayDelay; unsigned short imgStrayDelay; unsigned short rsvd; } banks[4]; } widePulseShortRangeFreeRunning; struct { struct { unsigned short nominalRef[2]; short TRGOUTDLY; unsigned short TMINTOF; unsigned short SETPLSCG; unsigned short TGDDLY; unsigned short TDCTR1C; unsigned short gateDelay; unsigned short refStrayDelay; unsigned short imgStrayDelay; unsigned short rsvd; } banks[4]; } narrowPulseShortRangeFreeRunning; struct { struct { unsigned short nominalRef[2]; short TRGOUTDLY; unsigned short TMINTOF; unsigned short SETPLSCG; unsigned short TGDDLY; unsigned short TDCTR1C; unsigned short gateDelay; unsigned short refStrayDelay; unsigned short imgStrayDelay; unsigned short rsvd; } banks[4]; } widePulseSoftGating; } nominalRef; struct { struct { char pixelScale; BOOL isCompressed; BOOL centroids; unsigned char rsvd; struct { char positions[400]; } tdcs[144]; } pixel; struct { struct { char positions[4]; } tdcs[144]; struct { char positions[4]; } refs[2]; char tdcScale; unsigned char rsvd[3]; } tdc; struct { char refScale; unsigned char rsvd[3]; struct { struct { struct { char positions[140]; } refs[2]; } banks[4]; } widePulseShortRangeFreeRunning; struct { struct { struct { char positions[140]; } refs[2]; } banks[4]; } narrowPulseShortRangeFreeRunning; struct { struct { struct { char positions[140]; } refs[2]; } banks[4]; } widePulseSoftGating; } ref; struct { struct { struct { struct { short spots[144]; } banks[4]; } stray; struct { struct { short spots[144]; } banks[4]; } ref0; struct { struct { short spots[144]; } banks[4]; } ref1; } widePulseShortRangeFreeRunning; struct { struct { struct { short spots[144]; } banks[4]; } stray; struct { struct { short spots[144]; } banks[4]; } ref0; struct { struct { short spots[144]; } banks[4]; } ref1; } narrowPulseShortRangeFreeRunning; struct { struct { struct { short spots[144]; } banks[4]; } stray; struct { struct { short spots[144]; } banks[4]; } ref0; struct { struct { short spots[144]; } banks[4]; } ref1; } widePulseSoftGating; } abs; } skews; struct { struct { float x; float y; float drQs; } spots[4][8]; } strayDirectReflection; struct { double efl; double pixelSize; double principalPoint[2]; double undistortLUT[256]; double distortLUT[256]; double distortionCenter[2]; unsigned short calibResX; unsigned short calibResY; } irIntrinsics; struct { double efl; double pixelSize; double principalPoint[2]; double undistortLUT[256]; double distortLUT[256]; double distortionCenter[2]; unsigned short calibResX; unsigned short calibResY; } superWideIntrinsics; struct { double rotMatrix[3][3]; double focalPoint[3]; } factoryWideExtrinsics; struct { double rotMatrix[3][3]; double focalPoint[3]; } factorySuperWideExtrinsics; struct { double rotMatrix[3][3]; double focalPoint[3]; } operationalSuperWideExtrinsics; struct { double rotMatrix[3][3]; double focalPoint[3]; } operationalWideExtrinsics; struct { struct { double distortVendor[11]; double tempSubstrate; double tempKirk; double tempPeriscope; } jlin; unsigned char uuidFF[16]; unsigned char uuidMPC[16]; } additionalParams; struct { struct { short freeRunningTDCTR1C; unsigned short T0Type; } banks[4]; } operationalT0; } _jasperCalib;
}

+ (BOOL)isBufferOfExpectedVersion:(id)a0;

- (struct _JasperCalib { unsigned int x0; BOOL x1; BOOL x2; unsigned char x3[2]; struct { struct { struct { struct { float x0[104]; } x0[2]; } x0[2]; struct { struct { float x0[104]; } x0[4]; } x1[144]; } x0; struct { struct { struct { float x0[104]; } x0[2]; } x0[2]; struct { struct { float x0[104]; } x0[4]; } x1[144]; } x1; } x4; char x5[140][180]; struct { struct { struct { float x0[64]; float x1[5]; } x0[4]; } x0; struct { struct { float x0[64]; float x1[5]; } x0[4]; } x1; } x6; struct { struct { struct { struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; float x4; } x0[144]; } x0[4]; } x0; struct JasperCalibSpotLocations { struct { struct { float x0; float x1; } x0[144]; } x0[4]; float x1; } x1; } x7; struct JasperCalibSpotLocations { struct { struct { float x0; float x1; } x0[144]; } x0[4]; float x1; } x8; struct { float x0; float x1; } x9; struct { struct { struct { unsigned short x0[2]; short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; } x0[4]; } x0; struct { struct { unsigned short x0[2]; short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; } x0[4]; } x1; struct { struct { unsigned short x0[2]; short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; } x0[4]; } x2; } x10; struct { struct { char x0; BOOL x1; BOOL x2; unsigned char x3; struct { char x0[400]; } x4[144]; } x0; struct { struct { char x0[4]; } x0[144]; struct { char x0[4]; } x1[2]; char x2; unsigned char x3[3]; } x1; struct { char x0; unsigned char x1[3]; struct { struct { struct { char x0[140]; } x0[2]; } x0[4]; } x2; struct { struct { struct { char x0[140]; } x0[2]; } x0[4]; } x3; struct { struct { struct { char x0[140]; } x0[2]; } x0[4]; } x4; } x2; struct { struct { struct { struct { short x0[144]; } x0[4]; } x0; struct { struct { short x0[144]; } x0[4]; } x1; struct { struct { short x0[144]; } x0[4]; } x2; } x0; struct { struct { struct { short x0[144]; } x0[4]; } x0; struct { struct { short x0[144]; } x0[4]; } x1; struct { struct { short x0[144]; } x0[4]; } x2; } x1; struct { struct { struct { short x0[144]; } x0[4]; } x0; struct { struct { short x0[144]; } x0[4]; } x1; struct { struct { short x0[144]; } x0[4]; } x2; } x2; } x3; } x11; struct { struct { float x0; float x1; float x2; } x0[4][8]; } x12; struct { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[2]; unsigned short x6; unsigned short x7; } x13; struct { double x0; double x1; double x2[2]; double x3[256]; double x4[256]; double x5[2]; unsigned short x6; unsigned short x7; } x14; struct { double x0[3][3]; double x1[3]; } x15; struct { double x0[3][3]; double x1[3]; } x16; struct { double x0[3][3]; double x1[3]; } x17; struct { double x0[3][3]; double x1[3]; } x18; struct { struct { double x0[11]; double x1; double x2; double x3; } x0; unsigned char x1[16]; unsigned char x2[16]; } x19; struct { struct { short x0; unsigned short x1; } x0[4]; } x20; } *)calib;
- (id)initWithJasperCalib:(id)a0;
- (id)initWithCalibrationDictionary:(id)a0;
- (struct { void /* unknown type, empty encoding */ x0[4]; })operationalSuperWideToJasperTransform;
- (void)setOperationalSuperWideToJasperTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (struct { void /* unknown type, empty encoding */ x0[4]; })operationalWideToJasperTransform;
- (void)setOperationalWideToJasperTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (id)binaryRepresentation;

@end

@class SBKTransaction, NSString, SSAccount, NSURL, NSOperationQueue, NSMutableArray, SBKTaskAssertion, NSObject, SBKStoreAuthenticationController, NSNumber;
@protocol OS_dispatch_queue, SBKTransactionControllerDelegate;

@interface SBKTransactionController : NSObject <ISStoreURLOperationDelegate>

@property (retain) SSAccount *account;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property (retain) NSOperationQueue *operationQueue;
@property (retain) NSMutableArray *pendingTransactions;
@property (retain, nonatomic) SBKTransaction *currentTransaction;
@property BOOL isResolvingError;
@property (retain) SBKTaskAssertion *backgroundTaskAssertion;
@property (weak) id networkTypeObserver;
@property long long conflictResolutionAttempts;
@property (weak) id<SBKTransactionControllerDelegate> delegate;
@property (readonly, copy) NSString *domain;
@property (readonly) NSURL *requestURL;
@property (readonly, getter=isEnabled) BOOL enabled;
@property (readonly, getter=isIdle) BOOL idle;
@property (retain) SBKStoreAuthenticationController *authenticationController;
@property BOOL shouldAuthenticateIfNecessary;
@property (readonly, nonatomic) NSNumber *metricsLoadURLSessionDuration;
@property (readonly, nonatomic) NSNumber *metricsLoadURLSamplingPercentage;
@property (readonly, nonatomic) NSNumber *metricsLoadURLSamplingPercentageCachedResponses;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)_endBackgroundTask;
- (void)setDomain:(id)a0;
- (void).cxx_destruct;
- (void)_beginBackgroundTask;
- (void)dealloc;
- (void)operation:(id)a0 failedWithError:(id)a1;
- (void)setRequestURL:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (void)operation:(id)a0 didReceiveResponse:(id)a1;
- (void)operation:(id)a0 finishedWithOutput:(id)a1;
- (void)_networkTypeChangedNotification:(id)a0;
- (void)_onQueue_endBackgroundTask;
- (id)_onQueue_clampsController;
- (void)_onQueue_processPendingTransactions;
- (void)_onQueue_cancelAllPendingTransactions:(id)a0;
- (BOOL)_onQueue_isIdle;
- (void)scheduleTransaction:(id)a0;
- (BOOL)_delegateShouldScheduleTransaction:(id)a0 error:(id *)a1;
- (void)_onQueue_scheduleTransaction:(id)a0 isRetry:(BOOL)a1;
- (void)_onQueue_transactionDidFail:(id)a0 withError:(id)a1;
- (void)_onQueue_cancelTransaction:(id)a0 error:(id)a1;
- (void)_storeOperationDidComplete:(id)a0;
- (void)_onQueue_resolveError:(id)a0 resolution:(int)a1;
- (void)_onQueue_beginBackgroundTask;
- (void)_onQueue_transactionDidCancel:(id)a0 withError:(id)a1;
- (void)_onQueue_processCurrentTransaction;
- (BOOL)_onQueue_authenticationCanProcessTransaction:(id)a0 error:(id *)a1;
- (void)_enqueueStoreOperation:(id)a0;
- (BOOL)_onQueue_canScheduleTransaction:(id)a0 error:(id *)a1;
- (void)_onQueue_addPendingTransaction:(id)a0;
- (BOOL)_onQueue_isEnabledForTransaction:(id)a0 error:(id *)a1;
- (void)_onQueue_assertIsTransactionValid:(id)a0 error:(id *)a1;
- (BOOL)_onQueue_clampsCanScheduleTransaction:(id)a0 error:(id *)a1;
- (void)_delegateTransactionDidFinish:(id)a0;
- (BOOL)_delegateTransactionDidFail:(id)a0 withError:(id)a1;
- (void)_resolveError:(id)a0 resolution:(int)a1;
- (void)_delegateTransactionDidCancel:(id)a0 withError:(id)a1;
- (void)_onQueue_currentTransactionDidFinish;
- (void)_processDataInResponse:(id)a0;
- (void)_onQueue_performRetryErrorHandlingForError:(id)a0;
- (void)_onQueue_performCancelErrorHandlingForError:(id)a0;
- (void)_onQueue_performDefaultErrorHandlingForError:(id)a0;
- (BOOL)_sendFinishedBlockForTransaction:(id)a0 success:(BOOL)a1 cancelled:(BOOL)a2 error:(id)a3 handledAsFinishedBlock:(BOOL *)a4;
- (void)_onQueue_processOperationOutput:(id)a0 operation:(id)a1 operationAuthenticated:(BOOL)a2;
- (id)initWithDomain:(id)a0 requestURL:(id)a1;
- (void)scheduleTransaction:(id)a0 withTransactionFinishedBlock:(id /* block */)a1;
- (void)cancelScheduledTransaction:(id)a0;
- (void)cancelAllTransactions;
- (void)cancelAllTransactionsCancelCode:(long long)a0;

@end

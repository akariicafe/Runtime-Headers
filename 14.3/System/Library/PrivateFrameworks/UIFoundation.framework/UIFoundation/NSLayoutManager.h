@class NSRunStorage, NSFont, NSArray, NSTypesetter, NSTextContainer, NSGlyphGenerator, NSTextStorage, CUIStyleEffectConfiguration, NSMutableArray, NSStorage, NSParagraphArbitrator;
@protocol NSLayoutManagerDelegate;

@interface NSLayoutManager : NSObject <NSSecureCoding> {
    NSTextStorage *_textStorage;
    NSGlyphGenerator *_glyphGenerator;
    NSTypesetter *_typesetter;
    NSMutableArray *_textContainers;
    NSStorage *_containerUsedRects;
    NSRunStorage *_containerRuns;
    NSTextContainer *_extraLineFragmentContainer;
    struct __lmFlags { unsigned char containersAreFull : 1; unsigned char glyphsMightDrawOutsideLines : 1; unsigned char backgroundLayoutEnabled : 1; unsigned char resizingInProgress : 1; unsigned char allowScreenFonts : 1; unsigned char cachedRectArrayInUse : 1; unsigned char displayInvalidationInProgress : 1; unsigned char insertionPointNeedsUpdate : 1; unsigned char layoutManagerInDirtyList : 1; unsigned char originalFontOverride : 1; unsigned char showInvisibleCharacters : 1; unsigned char showControlCharacters : 1; unsigned char delegateRespondsToDidInvalidate : 1; unsigned char delegateRespondsToDidComplete : 1; unsigned char glyphFormat : 2; unsigned char textStorageRespondsToIsEditing : 1; unsigned char notifyEditedInProgress : 1; unsigned char containersChanged : 1; unsigned char isGeneratingGlyphs : 1; unsigned char hasNonGeneratedGlyphData : 1; unsigned char syncAlignmentToDirection : 1; unsigned char defaultAttachmentScaling : 2; unsigned char usesFontLeading : 1; unsigned char seenRightToLeft : 1; unsigned char ignoresViewTransformations : 1; unsigned char needToFlushGlyph : 1; unsigned char flipsIfNeeded : 1; unsigned char allowNonContig : 1; unsigned char useNonContig : 1; unsigned char inBackgroundLayout : 1; } _lmFlags;
    id _delegate;
    unsigned short _textViewResizeDisableStack;
    unsigned short _displayInvalidationDisableStack;
    struct _NSRange { unsigned long long location; unsigned long long length; } _deferredDisplayCharRange;
    id _firstTextView;
    struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *_cachedRectArray;
    unsigned long long _cachedRectArrayCapacity;
    char *_glyphBuffer;
    unsigned long long _glyphBufferSize;
    struct _NSRange { unsigned long long location; unsigned long long length; } _cachedLocationNominalGlyphRange;
    unsigned long long _cachedLocationGlyphIndex;
    struct CGPoint { double x; double y; } _cachedLocation;
    struct _NSRange { unsigned long long location; unsigned long long length; } _cachedFontCharRange;
    NSFont *_cachedFont;
    unsigned long long _firstUnlaidGlyphIndex;
    unsigned long long _firstUnlaidCharIndex;
    struct _NSRange { unsigned long long location; unsigned long long length; } _newlyFilledGlyphRange;
    id _extraData;
    NSTextContainer *_cachedTextContainer;
    BOOL _cachedTextContainerIsVertical;
    BOOL _delegateIsWeakValue;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property BOOL allowsOriginalFontMetricsOverride;
@property (retain) NSParagraphArbitrator *paragraphArbitrator;
@property (copy) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (readonly, getter=isScrolling) BOOL scrolling;
@property (nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) NSArray *textContainers;
@property (weak, nonatomic) id<NSLayoutManagerDelegate> delegate;
@property (nonatomic) BOOL showsInvisibleCharacters;
@property (nonatomic) BOOL showsControlCharacters;
@property (nonatomic) BOOL usesFontLeading;
@property (nonatomic) BOOL allowsNonContiguousLayout;
@property (readonly, nonatomic) BOOL hasNonContiguousLayout;
@property BOOL limitsLayoutForSuspiciousContents;
@property BOOL usesDefaultHyphenation;
@property (readonly, nonatomic) unsigned long long numberOfGlyphs;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } extraLineFragmentRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } extraLineFragmentUsedRect;
@property (readonly, nonatomic) NSTextContainer *extraLineFragmentTextContainer;

+ (void)initialize;
+ (BOOL)_showsControlCharacters;
+ (BOOL)_usesScreenFonts;
+ (BOOL)_ignoresViewTransformations;
+ (id)_defaultLinkAttributes;
+ (BOOL)_inBackgroundLayout;
+ (void)_doSomeBackgroundLayout;
+ (BOOL)_showsInvisibleCharacters;

- (void)setHyphenationFactor:(double)a0;
- (long long)typesetterBehavior;
- (void)setTypesetterBehavior:(long long)a0;
- (double)hyphenationFactor;
- (BOOL)_mirrorsTextAlignment;
- (unsigned long long)getLineFragmentInsertionPointsForCharacterAtIndex:(unsigned long long)a0 alternatePositions:(BOOL)a1 inDisplayOrder:(BOOL)a2 positions:(double *)a3 characterIndexes:(unsigned long long *)a4;
- (void)enumerateEnclosingRectsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withinSelectedGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inTextContainer:(id)a2 usingBlock:(id /* block */)a3;
- (void)enumerateEnclosingRectsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withinSelectedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inTextContainer:(id)a2 usingBlock:(id /* block */)a3;
- (void)drawSpellingUnderlineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 spellingState:(long long)a1 inGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 containerOrigin:(struct CGPoint { double x0; double x1; })a5;
- (long long)getLineFragmentInsertionPointArraysForCharacterAtIndex:(unsigned long long)a0 inDisplayOrder:(BOOL)a1 positions:(double **)a2 characterIndexes:(unsigned long long **)a3 count:(unsigned long long *)a4 alternatePositions:(double **)a5 characterIndexes:(unsigned long long **)a6 count:(unsigned long long *)a7;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)_rectArrayForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withinSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 rangeIsCharRange:(BOOL)a2 singleRectOnly:(BOOL)a3 fullLineRectsOnly:(BOOL)a4 inTextContainer:(id)a5 rectCount:(unsigned long long *)a6 rangeWithinContainer:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a7 glyphsDrawOutsideLines:(BOOL *)a8;
- (void)_commonInit;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 type:(long long)a1 baselineOffset:(double)a2 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 containerOrigin:(struct CGPoint { double x0; double x1; })a5 isStrikethrough:(BOOL)a6;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)_rectArrayForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withinSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 rangeIsCharRange:(BOOL)a2 singleRectOnly:(BOOL)a3 fullLineRectsOnly:(BOOL)a4 inTextContainer:(id)a5 rectCount:(unsigned long long *)a6 rangeWithinContainer:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a7 glyphsDrawOutsideLines:(BOOL *)a8 rectArray:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a9 rectArrayCapacity:(unsigned long long)a10;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rectArrayForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withinSelectedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inTextContainer:(id)a2 rectCount:(unsigned long long *)a3;
- (void)drawUnderlineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 underlineType:(long long)a1 baselineOffset:(double)a2 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 containerOrigin:(struct CGPoint { double x0; double x1; })a5;
- (unsigned long long)characterIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inTextContainer:(id)a1 fractionOfDistanceBetweenInsertionPoints:(double *)a2;
- (void)insertGlyphs:(const unsigned int *)a0 length:(unsigned long long)a1 forStartingGlyphAtIndex:(unsigned long long)a2 characterIndex:(unsigned long long)a3;
- (void)invalidateGlyphsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 changeInLength:(long long)a1 actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })usedRectForTextContainer:(id)a0;
- (id)init;
- (BOOL)synchronizesAlignmentToDirection;
- (void)drawStrikethroughForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 strikethroughType:(long long)a1 baselineOffset:(double)a2 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 containerOrigin:(struct CGPoint { double x0; double x1; })a5;
- (id)underlineColorForSpelling;
- (void)setGlyphGenerator:(id)a0;
- (void)insertTextContainer:(id)a0 atIndex:(unsigned long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_characterRangeCurrentlyInAndAfterContainer:(id)a0;
- (void)textContainerChangedTextView:(id)a0;
- (void)ensureGlyphsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_invalidateGlyphsForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 editedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 changeInLength:(long long)a2 actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a3;
- (void)_forceDisplayToBeCorrectForViewsWithUnlaidGlyphs;
- (void)textStorage:(id)a0 edited:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 changeInLength:(long long)a3 invalidatedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4;
- (void)_primitiveDeleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned short)glyphAtIndex:(unsigned long long)a0 isValidIndex:(BOOL *)a1;
- (unsigned short)CGGlyphAtIndex:(unsigned long long)a0 isValidIndex:(BOOL *)a1;
- (BOOL)usesScreenFonts;
- (unsigned long long)firstUnlaidCharacterIndex;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 withoutAdditionalLayout:(BOOL)a2;
- (double)fractionOfDistanceThroughGlyphForPoint:(struct CGPoint { double x0; double x1; })a0 inTextContainer:(id)a1;
- (void)replaceTextStorage:(id)a0;
- (id)_glyphGenerator;
- (void)setTypesetter:(id)a0;
- (void)_setGlyphGenerator:(id)a0;
- (void)removeTextContainerAtIndex:(unsigned long long)a0;
- (void)textContainerChangedTextView:(id)a0 fromTextView:(id)a1;
- (void)_setGlyphsPerLineEstimate:(unsigned long long)a0 integerOffsetPerLineEstimate:(unsigned long long)a1;
- (BOOL)backgroundLayoutEnabled;
- (void)setUsesScreenFonts:(BOOL)a0;
- (BOOL)backgroundColorProvidesOpaqueSurface;
- (void)invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isSoft:(BOOL)a1 actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (void)processEditingForTextStorage:(id)a0 edited:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 changeInLength:(long long)a3 invalidatedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4;
- (void)ensureGlyphsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)replaceGlyphAtIndex:(unsigned long long)a0 withGlyph:(unsigned int)a1;
- (void)setCharacterIndex:(unsigned long long)a0 forGlyphAtIndex:(unsigned long long)a1;
- (BOOL)isValidGlyphIndex:(unsigned long long)a0;
- (unsigned long long)getGlyphs:(unsigned int *)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)invalidateGlyphsOnLayoutInvalidationForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setExtraLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 textContainer:(id)a2;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 glyphs:(unsigned int *)a1 characterIndexes:(unsigned long long *)a2 glyphInscriptions:(unsigned long long *)a3 elasticBits:(BOOL *)a4;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutRectForTextBlock:(id)a0 glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setLocation:(struct CGPoint { double x0; double x1; })a0 forStartOfGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 coalesceRuns:(BOOL)a2;
- (void)setLocations:(struct CGPoint { double x0; double x1; } *)a0 startingGlyphIndexes:(unsigned long long *)a1 count:(unsigned long long)a2 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)setDrawsOutsideLineFragment:(BOOL)a0 forGlyphAtIndex:(unsigned long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(unsigned long long)a0;
- (id)textContainerForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 withoutAdditionalLayout:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsRectForTextBlock:(id)a0 glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 allowLayout:(BOOL)a2;
- (BOOL)drawsOutsideLineFragmentForGlyphAtIndex:(unsigned long long)a0;
- (void)setLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forTextBlock:(id)a1 glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)setBoundsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forTextBlock:(id)a1 glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfNominallySpacedGlyphsContainingIndex:(unsigned long long)a0;
- (void)setTemporaryAttributes:(id)a0 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)_temporaryAttribute:(id)a0 atCharacterIndex:(unsigned long long)a1 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (id)_temporaryAttribute:(id)a0 atCharacterIndex:(unsigned long long)a1 longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)setSynchronizesAlignmentToDirection:(BOOL)a0;
- (id)attributedString;
- (id)_temporaryAttributesAtCharacterIndex:(unsigned long long)a0 longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)dealloc;
- (id)destinationTextContainerForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inTextContainer:(id)a1;
- (id)layoutFragmentsForReplacingCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withAttributedString:(id)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 textContainer:(id)a3;
- (void)enumerateLineFragmentsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 usingBlock:(id /* block */)a1;
- (unsigned long long)layoutOptions;
- (void)setGlyphs:(const unsigned short *)a0 properties:(const long long *)a1 characterIndexes:(const unsigned long long *)a2 font:(id)a3 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4;
- (void)setApplicationFrameworkContext:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inTextContainer:(id)a1;
- (void)ensureLayoutForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTextContainer:(id)a1;
- (void)_setDrawsDebugBaselines:(BOOL)a0;
- (BOOL)_drawsDebugBaselines;
- (unsigned long long)firstUnlaidGlyphIndex;
- (id)initWithCoder:(id)a0;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 baselineOffset:(double)a3;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 glyphs:(unsigned int *)a1 characterIndexes:(unsigned long long *)a2 glyphInscriptions:(unsigned long long *)a3 elasticBits:(BOOL *)a4 bidiLevels:(char *)a5;
- (id)substituteFontForFont:(id)a0;
- (void)setIntAttribute:(long long)a0 value:(long long)a1 forGlyphAtIndex:(unsigned long long)a2;
- (void)addTemporaryAttribute:(id)a0 value:(id)a1 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)ensureLayoutForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)invalidateLayoutForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)setUnderlineColorForSpelling:(id)a0;
- (id)description;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)underlineColorForTextAlternatives;
- (void)addTextContainer:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForBoundingRectWithoutAdditionalLayout:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTextContainer:(id)a1;
- (long long)applicationFrameworkContext;
- (struct CGPoint { double x0; double x1; })locationForGlyphAtIndex:(unsigned long long)a0;
- (void)finalize;
- (id)linkAttributesForLink:(id)a0 forCharacterAtIndex:(unsigned long long)a1;
- (unsigned long long)getGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 glyphs:(unsigned short *)a1 properties:(long long *)a2 characterIndexes:(unsigned long long *)a3 bidiLevels:(char *)a4;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForTextContainer:(id)a0;
- (void)setNotShownAttribute:(BOOL)a0 forGlyphAtIndex:(unsigned long long)a1;
- (void)deleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)addTemporaryAttributes:(id)a0 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)invalidateDisplayForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)removeTemporaryAttribute:(id)a0 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCharacterClusterAtIndex:(unsigned long long)a0 type:(long long)a1;
- (id)temporaryAttribute:(id)a0 atCharacterIndex:(unsigned long long)a1 longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (unsigned long long)glyphIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inTextContainer:(id)a1 fractionOfDistanceThroughGlyph:(double *)a2;
- (long long)propertyForGlyphAtIndex:(unsigned long long)a0;
- (unsigned long long)glyphIndexForCharacterAtIndex:(unsigned long long)a0;
- (void)setDidCompleteLayoutObserverBlock:(id /* block */)a0;
- (id)temporaryAttributesAtCharacterIndex:(unsigned long long)a0 longestEffectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (id)temporaryAttributesAtCharacterIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (double)defaultLineHeightForFont:(id)a0;
- (void)_setHyphenationFactor:(double)a0;
- (void)_setGlyphsPerLineEstimate:(unsigned long long)a0 offsetPerLineEstimate:(double)a1;
- (void)setAttachmentSize:(struct CGSize { double x0; double x1; })a0 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)insertGlyph:(unsigned int)a0 atGlyphIndex:(unsigned long long)a1 characterIndex:(unsigned long long)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentRectForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)textContainerForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (double)baselineOffsetForGlyphAtIndex:(unsigned long long)a0;
- (void)setUnderlineColorForTextAlternatives:(id)a0;
- (void)coordinateAccess:(id /* block */)a0;
- (void)textContainerChangedGeometry:(id)a0;
- (void)ensureLayoutForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentRectForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 withoutAdditionalLayout:(BOOL)a2;
- (void)ensureLayoutForTextContainer:(id)a0;
- (void)drawBackgroundForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })glyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTextContainer:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })lineFragmentUsedRectForGlyphAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)drawGlyphsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)typesetter;
- (double)_hyphenationFactor;
- (void)showCGGlyphs:(const unsigned short *)a0 positions:(const struct CGPoint { double x0; double x1; } *)a1 count:(long long)a2 font:(id)a3 textMatrix:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4 attributes:(id)a5 inContext:(struct CGContext { } *)a6;
- (unsigned short)glyphAtIndex:(unsigned long long)a0;
- (long long)intAttribute:(long long)a0 forGlyphAtIndex:(unsigned long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rectArrayForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withinSelectedGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inTextContainer:(id)a2 rectCount:(unsigned long long *)a3;
- (BOOL)_drawsUnderlinesLikeWebKit;
- (BOOL)notShownAttributeForGlyphAtIndex:(unsigned long long)a0;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inContext:(struct CGContext { } *)a1 from:(double)a2 to:(double)a3 at:(double)a4 thickness:(double)a5 lineOrigin:(struct CGPoint { double x0; double x1; })a6 breakForDescenders:(BOOL)a7 flipped:(BOOL)a8;
- (BOOL)_canDoLayout;
- (id)temporaryAttribute:(id)a0 atCharacterIndex:(unsigned long long)a1 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (double)defaultBaselineOffsetForFont:(id)a0;
- (void)_showCGGlyphs:(const unsigned short *)a0 positions:(const struct CGPoint { double x0; double x1; } *)a1 count:(long long)a2 font:(id)a3 textMatrix:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4 attributes:(id)a5 inContext:(struct CGContext { } *)a6;
- (id)renderingColorForDocumentColor:(id)a0;
- (void)_showAttachmentCell:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 characterIndex:(unsigned long long)a2;
- (void)_drawLineForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inContext:(struct CGContext { } *)a1 from:(double)a2 to:(double)a3 at:(double)a4 thickness:(double)a5 lineOrigin:(struct CGPoint { double x0; double x1; })a6 breakForDescenders:(BOOL)a7;
- (void)_mergeLayoutHoles;
- (void)_lineGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 type:(long long)a1 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 containerOrigin:(struct CGPoint { double x0; double x1; })a4 isStrikethrough:(BOOL)a5;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })characterRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 actualGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_primitiveCharacterRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)glyphGenerator;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRangeForCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_primitiveGlyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completeRows:(BOOL *)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setLocation:(struct CGPoint { double x0; double x1; })a0 forStartOfGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)a0 startOfRange:(BOOL)a1 okToFillHoles:(BOOL)a2 considerNulls:(BOOL)a3;
- (void)_setTextContainer:(id)a0 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_fillGlyphHoleForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 startGlyphIndex:(unsigned long long)a1 desiredNumberOfCharacters:(unsigned long long)a2;
- (void)_setExtraLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 textContainer:(id)a2;
- (void)setLineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 usedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_noteFirstTextViewVisibleCharacterRangeIfAfterIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutRectForTextBlock:(id)a0 atIndex:(unsigned long long)a1 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (BOOL)_doOptimizedLayoutStartingAtGlyphIndex:(unsigned long long)a0 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inTextContainer:(id)a2 lineLimit:(unsigned long long)a3 nextGlyphIndex:(unsigned long long *)a4;
- (void)_invalidateGlyphsForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 changeInLength:(long long)a1 includeBlocks:(BOOL)a2;
- (void)setTextContainer:(id)a0 forGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_doLayoutWithFullContainerStartingAtGlyphIndex:(unsigned long long)a0 nextGlyphIndex:(unsigned long long *)a1;
- (void)_invalidateUsageForTextContainersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_invalidateLayoutForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isSoft:(BOOL)a1 invalidateUsage:(BOOL)a2;
- (void)_resizeTextViewForTextContainer:(id)a0;
- (void)_invalidateInsertionPoint;
- (void)invalidateDisplayForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_invalidateDisplayIfNeeded;
- (id /* block */)didCompleteLayoutObserverBlock;
- (void)_invalidateLayoutForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isSoft:(BOOL)a1;
- (void)_fillLayoutHoleForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 desiredNumberOfLines:(unsigned long long)a1 isSoft:(BOOL)a2;
- (id)_lineFragmentDescription:(BOOL)a0;
- (unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)a0 startOfRange:(BOOL)a1 okToFillHoles:(BOOL)a2 considerNulls:(BOOL)a3;
- (void)_setRowArrayCache:(id)a0;
- (void)_fillLayoutHoleAtIndex:(unsigned long long)a0 desiredNumberOfLines:(unsigned long long)a1;
- (id)_lineFragmentDescriptionForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 includeGlyphLocations:(BOOL)a1;
- (id)_glyphDescriptionForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned long long)_indexOfFirstGlyphInTextContainer:(id)a0 okToFillHoles:(BOOL)a1;
- (id)_lineFragmentDescription;
- (void)_recalculateUsageForTextContainerAtIndex:(unsigned long long)a0;
- (void)_growCachedRectArrayToSize:(unsigned long long)a0;
- (void)_setCachedTextContainer:(id)a0 isVertical:(BOOL)a1;
- (struct CGSize { double x0; double x1; })attachmentSizeForGlyphAtIndex:(unsigned long long)a0;
- (void)_resetCachedTextContainer;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_glyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 actualCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1 okToFillHoles:(BOOL)a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_firstPassGlyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTextContainer:(id)a1 hintGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 okToFillHoles:(BOOL)a3;
- (BOOL)_hasSeenRightToLeft;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_firstPassGlyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTextContainer:(id)a1 okToFillHoles:(BOOL)a2;
- (void)_markSelfAsDirtyForBackgroundLayout:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsRectForTextBlock:(id)a0 atIndex:(unsigned long long)a1 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a2;
- (void)fillBackgroundRectArray:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 count:(unsigned long long)a1 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 color:(id)a3;
- (void)showAttachmentCell:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 characterIndex:(unsigned long long)a2;
- (void)fillMarkedBackgroundRectArray:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 count:(unsigned long long)a1 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 color:(id)a3;
- (void)showAttachment:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 textContainer:(id)a2 characterIndex:(unsigned long long)a3;
- (void)underlineGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 underlineType:(long long)a1 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 containerOrigin:(struct CGPoint { double x0; double x1; })a4;
- (id)_rowArrayCache;
- (void)showCGGlyphs:(const unsigned short *)a0 positions:(const struct CGPoint { double x0; double x1; } *)a1 count:(unsigned long long)a2 font:(id)a3 matrix:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4 attributes:(id)a5 inContext:(struct CGContext { } *)a6;
- (void)setBaselineOffset:(double)a0 forGlyphAtIndex:(unsigned long long)a1;
- (void)strikethroughGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 strikethroughType:(long long)a1 lineFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 lineFragmentGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 containerOrigin:(struct CGPoint { double x0; double x1; })a4;
- (void)_invalidateGlyphsForExtendedCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 changeInLength:(long long)a1;
- (id)_selectedRanges;
- (id)_containerDescription;
- (void)_updateUsageForTextContainer:(id)a0 addingUsedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_glyphDescription;
- (void)_primitiveInvalidateDisplayForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_mergeGlyphHoles;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completeRows:(BOOL *)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_blockRowRangeForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_extendedCharRangeForInvalidation:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 editedCharRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_adjustCharacterIndicesForRawGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 byDelta:(long long)a1;
- (void)_fillGlyphHoleAtIndex:(unsigned long long)a0 desiredNumberOfCharacters:(unsigned long long)a1;
- (unsigned long long)_glyphIndexForCharacterIndex:(unsigned long long)a0 startOfRange:(BOOL)a1 okToFillHoles:(BOOL)a2;
- (unsigned long long)_smallEncodingGlyphIndexForCharacterIndex:(unsigned long long)a0 startOfRange:(BOOL)a1 okToFillHoles:(BOOL)a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_exactGlyphRangeForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)_glyphLocationDescription;
- (id)_glyphHoleDescription;
- (id)_layoutHoleDescription;
- (id)_glyphTreeDescription;
- (id)_layoutTreeDescription;
- (id)_blockDescription;
- (struct _NSStoredContainerUsage { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; unsigned int x3 : 29; } x2; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x3; struct _NSRange { unsigned long long x0; unsigned long long x1; } x4; } *)_validatedStoredUsageForTextContainerAtIndex:(unsigned long long)a0;
- (BOOL)_needToFlushGlyph;
- (void)_fixSelectionAfterChangeInCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 changeInLength:(long long)a1;
- (void)_drawGlyphsForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)flipsIfNeeded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundingRectForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inTextContainer:(id)a1 fast:(BOOL)a2 fullLineRectsOnly:(BOOL)a3;
- (void)_firstTextViewChanged;
- (unsigned short)CGGlyphAtIndex:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_glyphRangeForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inTextContainer:(id)a1 fast:(BOOL)a2 okToFillHoles:(BOOL)a3;
- (void)_drawBackgroundForGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)selectedTextAttributesForCharacterAtIndex:(unsigned long long)a0 effectiveRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (char *)_packedGlyphs:(unsigned long long)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 length:(unsigned long long *)a2;
- (id)_attachmentSizesRun;
- (unsigned int)_glyphAtIndex:(unsigned long long)a0 characterIndex:(unsigned long long *)a1 glyphInscription:(unsigned long long *)a2 isValidIndex:(BOOL *)a3;
- (void)_setNeedToFlushGlyph:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentAttachmentRect;
- (void)_simpleInsertGlyph:(unsigned int)a0 atGlyphIndex:(unsigned long long)a1 characterIndex:(unsigned long long)a2 elastic:(BOOL)a3;
- (void)_simpleDeleteGlyphsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)_alwaysDrawsActive;
- (void)_insertGlyphs:(unsigned int *)a0 elasticAttributes:(BOOL *)a1 count:(unsigned long long)a2 atGlyphIndex:(unsigned long long)a3 characterIndex:(unsigned long long)a4;
- (void)_promoteGlyphStoreToFormat:(unsigned long long)a0;
- (unsigned long long)_currentAttachmentIndex;
- (void)_setCurrentAttachmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 index:(unsigned long long)a1;
- (void)_clearCurrentAttachmentSettings;
- (void)_clearTemporaryAttributes;
- (void)_clearTemporaryAttributesForCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 changeInLength:(long long)a1;
- (void)setFlipsIfNeeded:(BOOL)a0;
- (void)_setHasSeenRightToLeft:(BOOL)a0;
- (BOOL)ignoresViewTransformations;
- (void)setIgnoresViewTransformations:(BOOL)a0;
- (BOOL)ignoresAntialiasThreshold;
- (BOOL)_forcesTrackingFloor;
- (void)setIgnoresAntialiasThreshold:(BOOL)a0;
- (void)_setAlwaysDrawsActive:(BOOL)a0;
- (id)_insertionPointHelperForGlyphAtIndex:(unsigned long long)a0;
- (id)_selectionRangesForInsertionPointRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_setDrawsUnderlinesLikeWebKit:(BOOL)a0;
- (void)_setMirrorsTextAlignment:(BOOL)a0;
- (void)_setForcesTrackingFloor:(BOOL)a0;
- (id)viewProviderForTextAttachment:(id)a0 characterIndex:(unsigned long long)a1;
- (void)setViewProvider:(id)a0 forTextAttachment:(id)a1 characterIndex:(unsigned long long)a2;
- (void)beginScrollingForView:(id)a0 textContainer:(id)a1;
- (void)endScrollingForView:(id)a0 textContainer:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })prepareLayoutForBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 textContainer:(id)a1;
- (id)_stringForLoggingLineFragmentForGlyphAtIndex:(long long)a0;
- (void)encodeWithCoder:(id)a0;
- (void)getFirstUnlaidCharacterIndex:(unsigned long long *)a0 glyphIndex:(unsigned long long *)a1;
- (unsigned long long)glyphIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inTextContainer:(id)a1;
- (unsigned long long)characterIndexForGlyphAtIndex:(unsigned long long)a0;
- (void)setEllipsisGlyphAttribute:(BOOL)a0 forGlyphAtIndex:(unsigned long long)a1;
- (void)setBackgroundLayoutEnabled:(BOOL)a0;

@end

@class AVCaptureMovieFileOutput, NSString, NSLock, AVAssetWriter, NSMutableArray, CAAnimationGroup, CALayer, NSObject, AVTAvatar, NSMutableData, AVAssetWriterInput, AVPlayer;
@protocol AVTRecordViewDelegate, OS_dispatch_queue;

@interface AVTRecordView : AVTView <AVTFaceTrackerDelegate> {
    BOOL _exportingMovie;
    int _isFading;
    NSObject<OS_dispatch_queue> *_preloadQueue;
    BOOL _playBakedAnimation;
    BOOL _disableRendering;
    float _maxRecordingDuration;
    NSMutableData *_rawTimesData;
    NSMutableData *_rawBlendShapesData;
    NSMutableData *_rawTransformsData;
    NSMutableData *_rawParametersData;
    double _referenceAnimationBeginTime;
    double _recordingStartTime;
    int _recordedCount;
    int _recordingCapacity;
    CAAnimationGroup *_recordedAnimationGroup;
    AVTAvatar *_avatarForMovieExport;
    AVCaptureMovieFileOutput *_movieFileOutput;
    AVPlayer *_audioPlayer;
    AVAssetWriterInput *_audioWriterInput;
    AVAssetWriter *_audioWriter;
    NSLock *_audioLock;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentAudioTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _startAudioTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _stopAudioTime;
    long long _recordedSampleCount;
    BOOL _audioIsRecording;
    double _lastAudioPlayerTime;
    double _lastAudioSystemTime;
    BOOL _playing;
    BOOL _transitioningFromSnapshot;
    double _t0;
    int _benchFrameCounter;
    BOOL _doubleBuffer;
    BOOL _checkDrawableAvailable;
    NSMutableArray *_droppedDoubleBufferFrames;
    long long _preferredFramesPerSecond_user;
    long long _preferredFramesPerSecond_thermal;
    CALayer *_backingLayer;
}

@property (weak, nonatomic) id<AVTRecordViewDelegate> recordDelegate;
@property (readonly, nonatomic, getter=isRecording) BOOL recording;
@property (readonly, nonatomic, getter=isPreviewing) BOOL previewing;
@property (nonatomic) BOOL mute;
@property (nonatomic) float maxRecordingDuration;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)usesInternalTrackingPipeline;
+ (void)setUsesInternalTrackingPipeline:(BOOL)a0;

- (void)stopRecording;
- (void)startRecording;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(id)a1;
- (void)cancelRecording;
- (void)setPreferredFramesPerSecond:(long long)a0;
- (id)init;
- (void).cxx_destruct;
- (long long)preferredFramesPerSecond;
- (void)dealloc;
- (void)setFaceTrackingPaused:(BOOL)a0;
- (void)renderer:(id)a0 didApplyAnimationsAtTime:(double)a1;
- (id)initWithCoder:(id)a0;
- (void)_drawAtTime:(double)a0;
- (void)stopPlayingAudio;
- (void)setAvatar:(id)a0;
- (void)audioSessionInterruption:(id)a0;
- (double)recordingDuration;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)recording;
- (void)updateAtTime:(double)a0;
- (void)faceTracker:(id)a0 sessionWasInterrupted:(id)a1;
- (void)faceTracker:(id)a0 sessionInterruptionEnded:(id)a1;
- (void)faceTracker:(id)a0 session:(id)a1 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer { } *)a2;
- (void)faceTrackerDidUpdate:(id)a0 trackingInfo:(id)a1;
- (void)faceTracker:(id)a0 session:(id)a1 didFailWithError:(id)a2;
- (id)faceTrackingRecordingURL;
- (void)setFaceTrackingRecordingURL:(id)a0;
- (double)_renderer:(id)a0 inputTimeForCurrentFrameWithTime:(double)a1;
- (id)puppetState;
- (void)setPuppetState:(id)a0;
- (void)didLostTrackingForAWhile;
- (void)willUpdateAvatarWithNewFaceTrackingData:(double)a0;
- (BOOL)allowTrackSmoothing;
- (void)avatarDidChange;
- (void)updateForChangedFaceTrackingPaused;
- (double)currentAudioTime;
- (BOOL)isDoubleBuffered;
- (void)_renderer:(id)a0 updateAtTime:(double)a1;
- (BOOL)faceIsFullyActive;
- (void)fadePuppetToWhite:(float)a0;
- (void)_processInfoThermalStateDidChange:(id)a0;
- (void)_updateFrameRateForThermalState:(long long)a0;
- (void)_avt_commonInit;
- (void)_setEffectivePreferredFramesPerSecond;
- (void)_didUpdateAtTime:(double)a0;
- (void)convertRecordedDataToAnimationGroup;
- (void)cancelRecordingAudio;
- (void)startRecordingAudio;
- (void)stopRecordingAudio;
- (void)trimRecordedData;
- (void)finalizeAudioFile;
- (void)_smoothRecordedData;
- (void)addRecordedAnimationToAvatar:(id)a0;
- (void)_playLivePreviewAnimation;
- (void)updateAudioState;
- (void)_updateTrackingState;
- (void)startPlayingAudio;
- (void)startPreviewing;
- (void)removeRecordedAnimationFromAvatar:(id)a0;
- (id)_tmpVideoURL;
- (id)_tmpAudioURL;
- (BOOL)mergeAudio:(id)a0 andVideoTo:(id)a1 error:(id *)a2;
- (double)finalVideoDuration;
- (struct opaqueCMSampleBuffer { } *)createSilentAudioAtFrame:(long long)a0 nFrames:(int)a1 sampleRate:(double)a2 numChannels:(int)a3;
- (void)updateMuteState;
- (void)audioPlayerItemDidReachEnd:(id)a0;
- (void)drawableNotAvailableForTime:(double)a0;
- (void)playPreviewOnce;
- (void)stopPreviewing;
- (BOOL)playBakedAnimation;
- (void)setPlayBakedAnimation:(BOOL)a0;
- (BOOL)disableRendering;
- (void)setDisableRendering:(BOOL)a0;
- (id)_tmpMaskVideoURL;
- (BOOL)exportMovieToURL:(id)a0 options:(id)a1 completionHandler:(id /* block */)a2;
- (void)cancelMovieExport;

@end

@class NSString, CSAudioStream, NSMutableSet, NSObject, NSHashTable;
@protocol CSAudioAlertProvidingDelegate, CSAudioSessionProvidingDelegate, OS_xpc_object, CSAudioStreamProvidingDelegate, CSXPCClientDelegate;

@interface CSXPCClient : NSObject <CSAudioSessionProviding, CSFallbackAudioSessionReleaseProviding, CSAudioStreamProviding, CSAudioAlertProviding, CSAudioSessionInfoProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioTimeConversionProviding, CSTriggerInfoProviding>

@property (retain, nonatomic) NSObject<OS_xpc_object> *xpcConnection;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) NSMutableSet *activationAssertions;
@property (retain, nonatomic) NSHashTable *audioSessionInfoObservers;
@property (nonatomic) unsigned long long xpcClientType;
@property (weak, nonatomic) id<CSAudioSessionProvidingDelegate> audioSessionProvidingDelegate;
@property (weak, nonatomic) id<CSAudioStreamProvidingDelegate> audioStreamProvidingDelegate;
@property (weak, nonatomic) id<CSAudioAlertProvidingDelegate> audioAlertProvidingDelegate;
@property (weak, nonatomic) id<CSXPCClientDelegate> delegate;
@property (readonly, nonatomic) NSString *UUID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)createPrepareAudioStreamMessageWithRequest:(id)a0;
+ (id)createStartAudioStreamMessageWithOption:(id)a0;
+ (id)createStopAudioStreamMessage;
+ (id)createAudioStreamMessageWithRequest:(id)a0;

- (void)connect;
- (void)disconnect;
- (BOOL)isRecording;
- (BOOL)playAlertSoundForType:(long long)a0;
- (id)recordRoute;
- (void)_handleStreamProvidingDelegateChunkAvailable:(id)a0;
- (void)enableSmartRoutingConsideration:(BOOL)a0;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (void)_handleAlertProvidingDelegateDidFinishAlertPlayback:(id)a0;
- (void)registerObserver:(id)a0;
- (void)_handleSessionInfoProvidingDelegateMessageBody:(id)a0;
- (id)audioChunkToEndFrom:(unsigned long long)a0;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)a0 toURL:(id)a1;
- (void)cancelAudioStreamHold:(id)a0;
- (void)setMeteringEnabled:(BOOL)a0;
- (void)_handleListenerDisconnectedError:(id)a0;
- (void).cxx_destruct;
- (BOOL)deactivateAudioSession:(unsigned long long)a0 error:(id *)a1;
- (id)recordSettings;
- (void)_handleSessionProvidingDelegateEndInterruption:(id)a0;
- (void)_handleSessionInfoProvidingDelegateRouteChangeNotification:(id)a0;
- (void)configureAlertBehavior:(id)a0;
- (void)triggerInfoForContext:(id)a0 completion:(id /* block */)a1;
- (void)setAudioAlertDelegate:(id)a0;
- (void)dealloc;
- (BOOL)duckOthersOption;
- (void)_handleStreamProvidingDelegateHardwareConfigChange:(id)a0;
- (BOOL)setCurrentContext:(id)a0 error:(id *)a1;
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:(id)a0;
- (id)holdAudioStreamWithDescription:(id)a0 timeout:(double)a1;
- (id)_decodeError:(id)a0;
- (void)_handleStreamProvidingDelegateDidStopUnexpectly:(id)a0;
- (void)_sendMessage:(id)a0 connection:(id)a1 completion:(id /* block */)a2;
- (void)pingpong:(id /* block */)a0;
- (void)_handleSessionProvidingDelegateBeginInterruption:(id)a0;
- (void)_handleStreamProvidingDelegateChunkForTVAvailable:(id)a0;
- (void)prepareAudioStream:(id)a0 request:(id)a1 completion:(id /* block */)a2;
- (void)_handleSessionProvidingDelegateStreamHandleIdInvalidation:(id)a0;
- (id)initWithType:(unsigned long long)a0;
- (void)sendXPCClientType;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (void)startAudioStream:(id)a0 option:(id)a1 completion:(id /* block */)a2;
- (id)audioChunkFrom:(unsigned long long)a0 to:(unsigned long long)a1;
- (BOOL)prepareAudioStreamSync:(id)a0 request:(id)a1 error:(id *)a2;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (void)_handleSessionProvidingDelegateMessageBody:(id)a0;
- (void)audioStreamWithRequest:(id)a0 streamName:(id)a1 completion:(id /* block */)a2;
- (void)_handleSessionInfoProvidingDelegateInterruptionNotification:(id)a0;
- (void)setAudioSessionDelegate:(id)a0;
- (void)_handleListenerMessage:(id)a0;
- (void)unregisterObserver:(id)a0;
- (unsigned long long)alertStartTime;
- (void)saveRecordingBufferFrom:(unsigned long long)a0 to:(unsigned long long)a1 toURL:(id)a2;
- (BOOL)prewarmAudioSessionWithError:(id *)a0;
- (BOOL)_sendMessageAndReplySync:(id)a0 connection:(id)a1 error:(id *)a2;
- (void)_handleAlertProvidingDelegateMessageBody:(id)a0;
- (unsigned long long)sampleCountFromHostTime:(unsigned long long)a0;
- (void)updateMeters;
- (void)_handleStreamProvidingDelegateMessageBody:(id)a0;
- (void)_handleListenerEvent:(id)a0;
- (void)setDuckOthersOption:(BOOL)a0;
- (id)recordDeviceInfo;
- (unsigned long long)hostTimeFromSampleCount:(unsigned long long)a0;
- (BOOL)fallbackDeactivateAudioSession:(unsigned long long)a0 error:(id *)a1;
- (BOOL)setAlertSoundFromURL:(id)a0 forType:(long long)a1;
- (void)enableMiniDucking:(BOOL)a0;
- (id)audioChunkToEndFrom:(unsigned long long)a0 channelIdx:(unsigned long long)a1;
- (void)stopAudioStream:(id)a0 option:(id)a1 completion:(id /* block */)a2;
- (void)_handleSessionProvidingDelegateDidChangeContext:(id)a0;
- (id)playbackRoute;
- (void)_handleSessionProvidingDelegateWillSetAudioSession:(id)a0;
- (unsigned int)audioSessionID;
- (void)_handleListenerError:(id)a0;
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:(id)a0;
- (BOOL)prepareAudioProviderWithContext:(id)a0 clientType:(unsigned long long)a1 error:(id *)a2;
- (id)audioMetric;
- (void)_handleSessionProvidingDelegateBeginInterruptionWithContext:(id)a0;
- (void)_handleSessionProvidingDelegateDidSetAudioSession:(id)a0;
- (id)audioStreamWithRequest:(id)a0 streamName:(id)a1 error:(id *)a2;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)a0 dynamicAttribute:(unsigned long long)a1 bundleID:(id)a2 error:(id *)a3;
- (BOOL)isNarrowBand;

@end

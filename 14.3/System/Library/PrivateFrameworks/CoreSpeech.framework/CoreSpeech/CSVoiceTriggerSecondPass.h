@class NSUUID, NSMutableData, CSVTSecondPassScorer, CSAudioCircularBuffer, CSSyncKeywordAnalyzerQuasar, NSDictionary, NSObject, CSSpeechManager, CSKeywordAnalyzerNDEAPI, CSAudioStream, NSMutableArray, NSString, CSKeywordAnalyzerNDAPI, SSRSpeakerRecognitionController, SSRSpeakerRecognitionContext, CSPlainAudioFileWriter, CSAsset, CSShadowMicScoreCreator;
@protocol OS_dispatch_queue, CSVoiceTriggerDelegate;

@interface CSVoiceTriggerSecondPass : NSObject <CSKeywordAnalyzerNDEAPIScoreDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSAudioStreamProvidingDelegate, CSMediaPlayingMonitorDelegate, CSVolumeMonitorDelegate, SSRSpeakerRecognitionControllerDelegate, CSSelfTriggerDetectorDelegate>

@property (retain, nonatomic) CSSpeechManager *speechManager;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) CSAsset *currentAsset;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) NSString *audioProviderUUID;
@property (retain, nonatomic) CSKeywordAnalyzerNDAPI *syncKeywordAnalyzerNDAPI;
@property (retain, nonatomic) CSKeywordAnalyzerNDEAPI *keywordAnalyzerNDEAPI;
@property (retain, nonatomic) CSSyncKeywordAnalyzerQuasar *syncKeywordAnalyzerQuasar;
@property (retain, nonatomic) SSRSpeakerRecognitionController *speakerRecognitionController;
@property (retain, nonatomic) SSRSpeakerRecognitionContext *ssrContext;
@property (copy, nonatomic) id /* block */ resultCompletion;
@property (nonatomic) BOOL hasReceivedNDEAPIResult;
@property (nonatomic) unsigned long long secondPassTimeout;
@property (nonatomic) unsigned long long numProcessedSamples;
@property (nonatomic) unsigned long long numAnalyzedSamples;
@property (nonatomic) float referenceKeywordThreshold;
@property (nonatomic) float keywordThreshold;
@property (nonatomic) float keywordThresholdSecondChance;
@property (nonatomic) float effectiveKeywordThreshold;
@property (nonatomic) float keywordLoggingThreshold;
@property (nonatomic) float lastScore;
@property (nonatomic) BOOL isSecondChanceHot;
@property (nonatomic) float keywordRejectLoggingThreshold;
@property (nonatomic) float phsRejectLoggingThreshold;
@property (nonatomic) float phsThreshold;
@property (nonatomic) unsigned long long extraSamplesAtStart;
@property (nonatomic) unsigned long long analyzerPrependingSamples;
@property (nonatomic) unsigned long long analyzerTrailingSamples;
@property (nonatomic) BOOL shouldUsePHS;
@property (nonatomic) unsigned long long nearMissDelayTimeout;
@property (nonatomic) unsigned long long nearMissCandidateDetectedSamples;
@property (nonatomic) BOOL hasPendingNearMiss;
@property (nonatomic) float recognizerScore;
@property (nonatomic) float recognizerScoreScaleFactor;
@property (nonatomic) float recognizerThresholdOffset;
@property (nonatomic) unsigned long long earlyDetectFiredMachTime;
@property (nonatomic) unsigned long long activeChannel;
@property (nonatomic) unsigned long long selectedChannelFromFirstPass;
@property (nonatomic) unsigned long long processedSampleCountsInPending;
@property (nonatomic) unsigned long long firstPassTriggerStartSampleCount;
@property (nonatomic) unsigned long long firstPassTriggerFireSampleCount;
@property (retain, nonatomic) NSDictionary *firstPassChannelSelectionScores;
@property (nonatomic) float firstPassChannelSelectionDelaySeconds;
@property (nonatomic) float firstPassMasterChannelScoreBoost;
@property (nonatomic) float firstPassOnsetScore;
@property (nonatomic) unsigned long long firstPassOnsetChannel;
@property (nonatomic) BOOL didWakeAP;
@property (nonatomic) BOOL hasTriggerCandidate;
@property (nonatomic) BOOL isStartSampleCountMarked;
@property (nonatomic) unsigned long long secondPassAnalyzerStartSampleCount;
@property (nonatomic) unsigned long long secondPassTriggerMachAbsTime;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *stateSerialQueue;
@property (nonatomic) double lastAggTime;
@property (nonatomic) double cumulativeUptime;
@property (nonatomic) double cumulativeDowntime;
@property (weak, nonatomic) CSAudioCircularBuffer *audioBuffer;
@property (nonatomic) unsigned long long firstPassSource;
@property (retain, nonatomic) NSString *firstPassDeviceID;
@property (nonatomic) float twoShotFeedbackDelay;
@property (retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter;
@property (nonatomic) BOOL secondPassHasMadeDecision;
@property (nonatomic) long long mediaPlayingState;
@property (nonatomic) float mediaVolume;
@property (retain, nonatomic) CSShadowMicScoreCreator *shadowMicScoreCreator;
@property (retain, nonatomic) NSMutableData *dataBufferNDEAPI;
@property (nonatomic) unsigned long long dataBufferPositionNDEAPI;
@property (nonatomic) unsigned char hasReceivedEarlyDetectNDEAPIResult;
@property (nonatomic) float shadowMicScoreThresholdForVAD;
@property (retain, nonatomic) CSVTSecondPassScorer *secondPassScorer;
@property (retain, nonatomic) NSUUID *secondPassCompleteWatchDogToken;
@property (nonatomic) BOOL firstTimeAssetConfigured;
@property (retain, nonatomic) NSMutableArray *assetConfigWaitingBuffer;
@property (readonly, nonatomic) NSString *UUID;
@property (weak, nonatomic) id<CSVoiceTriggerDelegate> delegate;
@property (nonatomic) unsigned long long secondChanceHotTillMachTime;
@property (nonatomic) float secondPassCompleteWatchDogTimeoutSec;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)timeStampString;
+ (id)secondPassAudioLoggingFilePath;
+ (id)secondPassAudioLogDirectory;
+ (id)stringForSecondPassResult:(unsigned long long)a0;

- (void)selfTriggerDetector:(id)a0 didDetectSelfTrigger:(id)a1;
- (void)_reset;
- (void)setAsset:(id)a0;
- (void).cxx_destruct;
- (void)reset;
- (void)audioStreamProvider:(id)a0 audioChunkForTVAvailable:(id)a1;
- (void)dealloc;
- (void)_setAsset:(id)a0;
- (void)audioStreamProvider:(id)a0 audioBufferAvailable:(id)a1;
- (void)audioStreamProvider:(id)a0 didStopStreamUnexpectly:(long long)a1;
- (void)_handleAudioChunk:(id)a0;
- (void)cancelCurrentRequest;
- (void)CSVoiceTriggerEnabledMonitor:(id)a0 didReceiveEnabled:(BOOL)a1;
- (void)start;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)a0;
- (void)_setStartAnalyzeTime:(unsigned long long)a0;
- (void)_resetStartAnalyzeTime;
- (void)CSMediaPlayingMonitor:(id)a0 didReceiveMediaPlayingChanged:(long long)a1;
- (void)CSVolumeMonitor:(id)a0 didReceiveMusicVolumeChanged:(float)a1;
- (id)initWithPHSEnabled:(BOOL)a0;
- (void)handleVoiceTriggerSecondPassFrom:(unsigned long long)a0 deviceId:(id)a1 audioProviderUUID:(id)a2 firstPassInfo:(id)a3 completion:(id /* block */)a4;
- (void)_clearTriggerCandidate;
- (void)_didStopAudioStream;
- (void)keywordAnalyzerNDEAPI:(id)a0 hasResultAvailable:(id)a1 forChannel:(unsigned long long)a2;
- (void)_initializeMediaPlayingState;
- (id)initWithPHSEnabled:(BOOL)a0 speechManager:(id)a1;
- (void)_prepareStartAudioStream;
- (void)_didStartAudioStream:(BOOL)a0;
- (BOOL)_shouldRequestSingleChannelFromAudioProvider;
- (void)_requestStartAudioStreamWitContext:(id)a0 audioProviderUUID:(id)a1 startStreamOption:(id)a2 completion:(id /* block */)a3;
- (void)_voiceTriggerFirstPassDidDetectKeywordFrom:(unsigned long long)a0 deviceId:(id)a1 audioProviderUUID:(id)a2 firstPassInfo:(id)a3 completion:(id /* block */)a4;
- (void)_handleResultCompletion:(unsigned long long)a0 voiceTriggerInfo:(id)a1 error:(id)a2;
- (void)_clearSecondPassCompletionWatchDog;
- (void)_scheduleSecondPassCompletionWatchDog;
- (void)_getDidWakeAP:(id)a0;
- (void)_handleVoiceTriggerFirstPassFromAP:(id)a0 audioProviderUUID:(id)a1 completion:(id /* block */)a2;
- (void)_handleVoiceTriggerFirstPassFromHearst:(unsigned long long)a0 deviceId:(id)a1 audioProviderUUID:(id)a2 firstPassInfo:(id)a3 completion:(id /* block */)a4;
- (void)_handleVoiceTriggerFirstPassFromHearstAP:(unsigned long long)a0 deviceId:(id)a1 audioProviderUUID:(id)a2 firstPassInfo:(id)a3 completion:(id /* block */)a4;
- (void)_handleVoiceTriggerFirstPassFromRemora:(unsigned long long)a0 deviceId:(id)a1 audioProviderUUID:(id)a2 firstPassInfo:(id)a3 completion:(id /* block */)a4;
- (void)_handleVoiceTriggerFirstPassFromJarvis:(unsigned long long)a0 deviceId:(id)a1 audioProviderUUID:(id)a2 firstPassInfo:(id)a3 completion:(id /* block */)a4;
- (void)_handleVoiceTriggerFirstPassFromAOP:(id)a0 audioProviderUUID:(id)a1 completion:(id /* block */)a2;
- (void)_addDeviceStatusInfoToDict:(id)a0;
- (void)_runRecognizersWithChunk:(id)a0;
- (void)_mpAnalyzeForTriggerDetection:(id)a0 forceMaximized:(BOOL)a1;
- (void)_analyzeForKeywordDetection:(id)a0 forChannel:(unsigned long long)a1 forceMaximized:(BOOL)a2;
- (id)_getVoiceTriggerInfoWithLastResult:(id)a0 withNumAnalyzedSamples:(unsigned long long)a1 withKeywordScore:(float)a2;
- (void)_logUptimeWithVTSwitchChanged:(BOOL)a0 VTEnabled:(BOOL)a1;
- (BOOL)_shouldLogMediaplayState:(unsigned long long)a0;
- (id)_mpvtGetVoiceTriggerInfoWithLastResult:(id)a0;
- (void)_handleSecondPassSuccess:(id)a0;
- (void)_handlePHSResults:(id)a0 voiceTriggerEventInfo:(id)a1;
- (void)_notifySecondPassReject:(id)a0 result:(unsigned long long)a1;
- (void)_computeEffectiveThreshold;
- (void)_markSecondPassTriggerMachAbsoluteTime:(unsigned long long)a0;
- (BOOL)_supportTwoShotFeedbackDelay;
- (void)_resetUpTime;
- (void)_addPHSInfoToVTEI:(id)a0 fromSpeakerInfo:(id)a1;
- (void)_addRejectStatsToDict:(id)a0;
- (void)_logSecondPassResult:(unsigned long long)a0 withVTEI:(id)a1;
- (void)_scheduleDidStartSecondPassCompletionWatchDogWithToken:(id)a0;

@end

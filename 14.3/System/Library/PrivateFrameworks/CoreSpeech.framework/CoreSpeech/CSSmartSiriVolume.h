@class CSSmartSiriVolumeEnablePolicy, NSString, CSAsset, CSAudioStream, NSObject, NSUserDefaults;
@protocol OS_dispatch_source, OS_dispatch_queue;

@interface CSSmartSiriVolume : NSObject <CSMediaPlayingMonitorDelegate, CSAudioStreamProvidingDelegate, CSSiriEnabledMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSSiriClientBehaviorMonitorDelegate, CSSmartSiriVolumeProcessor> {
    NSObject<OS_dispatch_queue> *_queue;
    struct unique_ptr<SmartSiriVolume, std::__1::default_delete<SmartSiriVolume> > { struct __compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume> > { struct SmartSiriVolume *__value_; } __ptr_; } _smartSiriVolumeNoiseLevel;
    struct unique_ptr<SmartSiriVolume, std::__1::default_delete<SmartSiriVolume> > { struct __compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume> > { struct SmartSiriVolume *__value_; } __ptr_; } _smartSiriVolumeLKFS;
    struct vector<float, std::__1::allocator<float> > { float *__begin_; float *__end_; struct __compressed_pair<float *, std::__1::allocator<float> > { float *__value_; } __end_cap_; } _floatBuffer;
    NSUserDefaults *_defaults;
    CSSmartSiriVolumeEnablePolicy *_ssvEnablePolicy;
    unsigned long long _startAnalyzeSampleCount;
    unsigned long long _samplesFed;
    unsigned long long _processedSampleCount;
    BOOL _isStartSampleCountMarked;
    BOOL _isListenPollingStarting;
    BOOL _shouldPauseSSVProcess;
    BOOL _shouldPauseLKFSProcess;
    BOOL _alarmSoundIsFiring;
    BOOL _timerSoundIsFiring;
    BOOL _mediaIsPlaying;
    CSAsset *_currentAsset;
    float _musicVolumeDB;
    float _alarmVolume;
    unsigned long long _noiseLevelChannelBitset;
    unsigned long long _LKFSChannelBitset;
    unsigned int _energyBufferSize;
    unsigned int _noiseLowerPercentile;
    unsigned int _noiseUpperPercentile;
    unsigned int _LKFSLowerPercentile;
    unsigned int _LKFSUpperPercentile;
    float _noiseTimeConstant;
    float _noiseMicSensitivityOffset;
    float _noiseMicSensitivityOffsetDeviceSimple;
    float _LKFSTimeConstant;
    float _LKFSMicSensitivityOffset;
    float _noiseTTSMappingInputRangeLow;
    float _noiseTTSMappingInputRangeHigh;
    float _noiseTTSMappingOutputRangeLow;
    float _noiseTTSMappingOutputRangeHigh;
    float _LKFSTTSMappingInputRangeLow;
    float _LKFSTTSMappingInputRangeHigh;
    float _LKFSTTSMappingOutputRangeLow;
    float _LKFSTTSMappingOutputRangeHigh;
    float _userOffsetInputRangeLow;
    float _userOffsetInputRangeHigh;
    float _userOffsetOutputRangeLow;
    float _userOffsetOutputRangeHigh;
    float _TTSVolumeLowerLimitDB;
    float _TTSVolumeUpperLimitDB;
    float _noiseWeight;
}

@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *listenPollingTimer;
@property (nonatomic) long long listenPollingTimerCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)_reset;
- (void)setAsset:(id)a0;
- (void).cxx_destruct;
- (void)reset;
- (void)audioStreamProvider:(id)a0 audioChunkForTVAvailable:(id)a1;
- (void)siriClientBehaviorMonitor:(id)a0 willStopStream:(id)a1;
- (void)_setAsset:(id)a0;
- (void)audioStreamProvider:(id)a0 audioBufferAvailable:(id)a1;
- (void)audioStreamProvider:(id)a0 didStopStreamUnexpectly:(long long)a1;
- (void)_startListenPollingWithInterval:(double)a0 completion:(id /* block */)a1;
- (void)siriClientBehaviorMonitor:(id)a0 willStartStreamWithContext:(id)a1 option:(id)a2;
- (id).cxx_construct;
- (void)_stopListening;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)a0;
- (void)_setStartAnalyzeTime:(unsigned long long)a0;
- (void)siriClientBehaviorMonitor:(id)a0 didStartStreamWithContext:(id)a1 successfully:(BOOL)a2 option:(id)a3 withEventUUID:(id)a4;
- (void)siriClientBehaviorMonitor:(id)a0 didStopStream:(id)a1 withEventUUID:(id)a2;
- (void)_startListenWithCompletion:(id /* block */)a0;
- (void)_resetStartAnalyzeTime;
- (void)CSMediaPlayingMonitor:(id)a0 didReceiveMediaPlayingChanged:(long long)a1;
- (void)initializeMediaPlayingState;
- (void)initializeTimerState;
- (void)initializeAlarmState;
- (void)startSmartSiriVolume;
- (id)initWithSamplingRate:(float)a0 asset:(id)a1;
- (id)getVolumeForTTSType:(unsigned long long)a0 withOverrideMediaVolume:(id)a1 WithRequestTime:(unsigned long long)a2;
- (void)didReceiveAlarmChanged:(long long)a0;
- (void)didReceiveTimerChanged:(long long)a0;
- (void)didReceiveMusicVolumeChanged:(float)a0;
- (void)didReceiveAlarmVolumeChanged:(float)a0;
- (void)didDetectKeywordWithResult:(id)a0;
- (void)_startListenPolling;
- (void)CSSiriEnabledMonitor:(id)a0 didReceiveEnabled:(BOOL)a1;
- (void)_setDefaultParameters;
- (float)_convertDB2Mag:(float)a0;
- (void)fetchInitSystemVolumes;
- (void)_resumeSSVProcessing;
- (void)_pauseSSVProcessing;
- (float)_getDevicedBFSForInputLinearVolume:(float)a0;
- (float *)_getFloatBufferData:(id)a0;
- (void)_prepareSoundLevelBufferFromSamples:(unsigned int)a0 soundType:(long long)a1;
- (void)_processAudioChunk:(id)a0 soundType:(long long)a1;
- (float)_estimatedTTSVolume:(float)a0 lowerLimit:(float)a1 upperLimit:(float)a2 TTSmappingInputRangeLow:(float)a3 TTSmappingInputRangeHigh:(float)a4 TTSmappingOutputRangeLow:(float)a5 TTSmappingOutputRangeHigh:(float)a6;
- (float)_getUserOffsetFromMusicVolumeDB:(float)a0;
- (float)_combineResultsWithOptimalFromNoise:(float)a0 andOptimalFromLkfs:(float)a1 withUserOffset:(float)a2;
- (float)_getDeviceSimpleOutputLinearVolumeFordBFSValue:(float)a0;
- (float)_scaleInputWithInRangeOutRange:(float)a0 minIn:(float)a1 maxIn:(float)a2 minOut:(float)a3 maxOut:(float)a4;
- (float)_getMusicVolumeDBCSSSVDeviceSimple:(float)a0;
- (float)_getMusicVolumeDBCSSSVDeviceDefault:(float)a0;
- (float)_deviceSpecificLinearVolumeToDBMappingCSSSVDeviceSimple:(float)a0;
- (float)_deviceSpecificDBToLinearVolumeMappingCSSSVDeviceSimple:(float)a0;
- (float)_getDeviceSimpledBFSForOutputLinearVolume:(float)a0;
- (float)estimateSoundLevelbySoundType:(long long)a0;
- (float)estimatedTTSVolumeForNoiseLevelAndLKFS:(float)a0 LKFS:(float)a1;
- (void)prepareSoundLevelBufferFromSamples:(id)a0 soundType:(long long)a1 firedVoiceTriggerEvent:(BOOL)a2 triggerStartTimeSampleOffset:(unsigned long long)a3 triggerEndTimeSampleOffset:(unsigned long long)a4;

@end

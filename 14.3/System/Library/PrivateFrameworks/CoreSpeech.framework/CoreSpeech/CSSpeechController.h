@class NSDictionary, CSAudioStream, CSMediaPlayingMonitor, SSRVoiceProfileManager, CSSpeechEndHostTimeEstimator, CSAudioSampleRateConverter, CSAudioConverter, NSString, CSAudioPowerMeter, SSRSpeakerRecognitionController, CSPlainAudioFileWriter, CSAudioZeroCounter, CSSelectiveChannelAudioFileWriter, NSMutableDictionary, CSEndpointerProxy, CSAsset, NSArray, NSObject, CSContinuousVoiceTrigger, CSAudioRecordContext, CSLanguageDetector, CSXPCClient, CSVolumeMonitor, CSStopRecordingOptions, NSUUID, CSSmartSiriVolumeController;
@protocol CSAudioAlertProviding, CSAudioMeterProviding, CSSpeechControllerDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioStreamProviding, CSEndpointAnalyzer, OS_dispatch_queue, OS_dispatch_group, CSLanguageDetectorDelegate;

@interface CSSpeechController : NSObject <CSAudioConverterDelegate, CSSmartSiriVolumeControllerDelegate, CSAudioSessionProvidingDelegate, CSAudioStreamProvidingDelegate, CSAudioAlertProvidingDelegate, CSAudioSessionControllerDelegate, CSXPCClientDelegate, CSAudioDecoderDelegate, SSRSpeakerRecognitionControllerDelegate, CSSpeakerRecognitionAssetDownloadMonitorDelegate, CSVoiceTriggerAssetHandlerDelegate, CSSpeechManagerDelegate, CSContinuousVoiceTriggerDelegate> {
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_contextResetQueue;
    CSAudioConverter *_opusAudioConverter;
    CSAudioConverter *_narrowBandOpusConverter;
    CSAudioConverter *_audioConverter;
    CSAudioSampleRateConverter *_downsampler;
    NSDictionary *_requestedRecordSettings;
    NSDictionary *_lastVoiceTriggerInfo;
    NSDictionary *_lastRTSTriggerInfo;
    CSAudioZeroCounter *_continuousZeroCounter;
    NSObject<OS_dispatch_queue> *_audibleFeedbackQueue;
    NSObject<OS_dispatch_group> *_twoShotAudibleFeedbackDecisionGroup;
}

@property (retain, nonatomic) CSEndpointerProxy *endpointerProxy;
@property (retain, nonatomic) CSAudioRecordContext *audioRecordContext;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) id<CSAudioStreamProviding> streamProvider;
@property (retain, nonatomic) id<CSAudioSessionProviding> sessionProvider;
@property (retain, nonatomic) id<CSAudioAlertProviding> alertProvider;
@property (retain, nonatomic) id<CSAudioMeterProviding> audioMeterProvider;
@property (retain, nonatomic) id<CSAudioMetricProviding> audioMetricProvider;
@property (nonatomic) BOOL isOpus;
@property (nonatomic) BOOL isSiriClientListening;
@property (nonatomic) BOOL isNarrowBand;
@property (retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter;
@property (retain, nonatomic) CSSelectiveChannelAudioFileWriter *serverLoggingWriter;
@property (retain, nonatomic) CSSmartSiriVolumeController *volumeController;
@property (retain, nonatomic) NSString *recordEventUUID;
@property (nonatomic) BOOL isAudioSessionActivated;
@property (nonatomic) BOOL deviceRoleIsStereo;
@property (retain, nonatomic) NSDictionary *speakerRecognitionScores;
@property (nonatomic) unsigned long long activeChannel;
@property (nonatomic) BOOL twoShotNotificationEnabled;
@property (nonatomic) BOOL isMediaPlaying;
@property (nonatomic) BOOL isAlarmPlaying;
@property (nonatomic) BOOL isTimerPlaying;
@property (nonatomic) BOOL isSoundPlaying;
@property (nonatomic) BOOL isRemoteVADAvailableStream;
@property (nonatomic) BOOL myriadPreventingTwoShotFeedback;
@property (nonatomic) BOOL needsPostGain;
@property (retain, nonatomic) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator;
@property (retain, nonatomic) NSString *bundleIdFromDictation;
@property (retain, nonatomic) CSContinuousVoiceTrigger *continuousVoiceTrigger;
@property (retain, nonatomic) CSLanguageDetector *languageDetector;
@property (nonatomic) BOOL shouldUseLanguageDetectorForCurrentRequest;
@property (retain, nonatomic) NSUUID *pendingAudioSessionActivationToken;
@property (copy, nonatomic) id /* block */ pendingAudioSessionActivationCompletion;
@property (nonatomic) unsigned long long pendingAudioSessionActivationReason;
@property (nonatomic) double audioSessionActivationDelay;
@property (retain, nonatomic) CSXPCClient *xpcClient;
@property (nonatomic) float cachedAvgPower;
@property (nonatomic) float cachedPeakPower;
@property (retain, nonatomic) CSAudioPowerMeter *powerMeter;
@property (nonatomic) BOOL didDeliverLastBuffer;
@property (nonatomic) BOOL didDeliverFirstSpeechPacket;
@property (nonatomic) BOOL canPerformDelayedStop;
@property (retain, nonatomic) CSStopRecordingOptions *requestedStopRecordingOptions;
@property (nonatomic) unsigned long long numTrailingSamplesAfterSchedulingStop;
@property (nonatomic) unsigned long long maxAllowedTrailingSamplesAfterSchedulingStop;
@property (retain, nonatomic) NSMutableDictionary *decodersForTV;
@property (nonatomic) unsigned long long decoderProcessedSampleCountForTV;
@property (retain, nonatomic) NSString *logEventUUID;
@property (retain, nonatomic) SSRSpeakerRecognitionController *speakerRecognitionController;
@property (retain, nonatomic) SSRVoiceProfileManager *voiceProfileManager;
@property (retain, nonatomic) CSAsset *asset;
@property (retain, nonatomic) NSArray *ssrAssets;
@property (retain, nonatomic) NSString *ssvLogFilePath;
@property (retain, nonatomic) CSMediaPlayingMonitor *mediaPlayingMonitor;
@property (retain, nonatomic) CSVolumeMonitor *volumeMonitor;
@property (weak, nonatomic) id<CSSpeechControllerDelegate> delegate;
@property (weak, nonatomic) id<CSLanguageDetectorDelegate> languageDetectorDelegate;
@property (weak, nonatomic) id<CSSpeakerIdentificationDelegate> speakerIdDelegate;
@property (nonatomic) BOOL duckOthersOption;
@property (readonly, nonatomic) id<CSEndpointAnalyzer> endpointAnalyzer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedController;
+ (BOOL)isSmartSiriVolumeAvailable;

- (BOOL)isRecording;
- (void)stopRecording;
- (void)preheat;
- (BOOL)playAlertSoundForType:(long long)a0;
- (id)recordRoute;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (void)voiceTriggerAssetHandler:(id)a0 didChangeCachedAsset:(id)a1;
- (id)init;
- (void)setMeteringEnabled:(BOOL)a0;
- (void).cxx_destruct;
- (double)lastEndOfVoiceActivityTime;
- (id)recordSettings;
- (void)reset;
- (void)audioStreamProvider:(id)a0 audioChunkForTVAvailable:(id)a1;
- (void)keywordDetectorDidDetectKeyword;
- (void)resetEndpointer;
- (BOOL)startRecordingWithSettings:(id)a0 error:(id *)a1;
- (void)CSSpeakerRecognitionAssetDownloadMonitor:(id)a0 didInstallNewAsset:(BOOL)a1 assetProviderType:(unsigned long long)a2;
- (double)getRecordBufferDuration;
- (BOOL)setCurrentContext:(id)a0 error:(id *)a1;
- (BOOL)setRecordBufferDuration:(double)a0;
- (BOOL)prepareRecordWithSettings:(id)a0 error:(id *)a1;
- (void)releaseAudioSession:(unsigned long long)a0;
- (id)metrics;
- (void)releaseAudioSession;
- (id)voiceTriggerInfo;
- (void)setSynchronousCallbackEnabled:(BOOL)a0;
- (void)audioStreamProvider:(id)a0 audioBufferAvailable:(id)a1;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (void)audioStreamProvider:(id)a0 didStopStreamUnexpectly:(long long)a1;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (unsigned long long)alertStartTime;
- (void)updateMeters;
- (BOOL)startRecording:(id *)a0;
- (BOOL)prewarmAudioSession;
- (void)CSXPCClient:(id)a0 didDisconnect:(BOOL)a1;
- (id)recordDeviceInfo;
- (BOOL)setAlertSoundFromURL:(id)a0 forType:(long long)a1;
- (id)playbackRoute;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)a1;
- (void)CSMediaPlayingMonitor:(id)a0 didReceiveMediaPlayingChanged:(long long)a1;
- (void)CSTimerMonitor:(id)a0 didReceiveTimerChanged:(long long)a1;
- (void)CSAlarmMonitor:(id)a0 didReceiveAlarmChanged:(long long)a1;
- (BOOL)isRTSTriggered;
- (BOOL)isHearstVoiceTriggered;
- (BOOL)isBuiltInVoiceTriggered;
- (void)continuousVoiceTrigger:(id)a0 detectedSilenceAfterVoiceTriggerAt:(double)a1;
- (void)continuousVoiceTrigger:(id)a0 detectedVoiceTriggerResult:(id)a1;
- (void)audioStreamProvider:(id)a0 didHardwareConfigurationChange:(long long)a1;
- (void)stopEndpointer;
- (void)processServerEndpointFeatures:(id)a0;
- (void)updateEndpointerThreshold:(float)a0;
- (void)updateEndpointerDelayedTrigger:(BOOL)a0;
- (void)shouldAcceptEagerResultForDuration:(double)a0 resultsCompletionHandler:(id /* block */)a1;
- (id)endpointerModelVersion;
- (BOOL)isJarvisVoiceTriggered;
- (void)startController;
- (long long)_currentAudioRecorderSampleRate;
- (void)_initializeMediaPlayingState;
- (void)_initializeAlarmState;
- (void)_initializeTimerState;
- (void)_setSoundPlayingState;
- (id)_contextToString:(id)a0;
- (void)_refreshSpeakerRecognitionAssets;
- (BOOL)_shouldResetContextAtPrepare;
- (BOOL)_fetchAudioProviderWithContext:(id)a0;
- (BOOL)_shouldFetchVoiceTriggerInfo;
- (BOOL)_shouldFetchRaiseToSpeakInfo;
- (BOOL)_fetchLastTriggerInfo;
- (BOOL)_activateAudioSessionWithReason:(unsigned long long)a0 delay:(double)a1 delayRequested:(BOOL)a2 error:(id *)a3;
- (BOOL)_activateAudioSessionWithReason:(unsigned long long)a0 error:(id *)a1;
- (void)_setupDownsamplerIfNeeded;
- (BOOL)_setupAudioConverter:(BOOL)a0 isNarrowBand:(BOOL)a1;
- (void)_createAudioPowerMeterIfNeeded;
- (BOOL)_isDelayedDuckingSupportedContext;
- (void)_scheduleActivateAudioSessionWithDelay:(double)a0 sessionActivateReason:(unsigned long long)a1 scheduleReason:(id)a2 validator:(id /* block */)a3 completion:(id /* block */)a4;
- (void)_cancelPendingAudioSessionActivateForReason:(id)a0;
- (BOOL)_lazyActivateAudioSessionWithReason:(unsigned long long)a0 error:(id *)a1;
- (BOOL)_doActivateAudioSessionWithReason:(unsigned long long)a0 error:(id *)a1;
- (void)_teardownAudioProviderIfNeeded;
- (id)_fetchFallbackAudioSessionReleaseProviding;
- (BOOL)_isRecordRouteBuiltinMic;
- (BOOL)_shouldSetStartSampleCount;
- (BOOL)_shouldSetStartSampleCountForRTS;
- (void)_setupSpeakerRecognitionController;
- (void)_startPhaticDecision;
- (BOOL)_shouldUseLanguageDetector:(id)a0;
- (void)_createLanguageDetectorIfNeeded;
- (id)_languageDetectorOptionFromSettings:(id)a0;
- (BOOL)_shouldTrackLaunchLatency;
- (BOOL)_canPlayPhaticDuringMediaPlayback;
- (BOOL)_shouldSchedulePhaticAtStartRecording;
- (float)_scheduledPhaticDelay;
- (unsigned long long)_phaticPlaybackReason;
- (void)_didStopForReason:(long long)a0;
- (void)_deviceAudioLoggingWithFileWriter:(id)a0;
- (void)_logRecordingStopErrorIfNeeded:(long long)a0;
- (void)_audioStreamProvdider:(id)a0 audioBufferAvailable:(id)a1;
- (id)_fetchAudioDecoderForTV:(unsigned int)a0;
- (void)_performPendingAudioSessionActivateForReason:(id)a0;
- (BOOL)_createAudioProviderFromXPCWithContext:(id)a0;
- (id)_getSpeechIdentifier;
- (id)_processSpeakerRecognitionResult:(id)a0;
- (id)_mapScoresToSharedSiriId:(id)a0;
- (BOOL)isSmartSiriVolumeAvailable;
- (void)audioConverterDidConvertPackets:(id)a0 packets:(id)a1 durationInSec:(float)a2 timestamp:(unsigned long long)a3;
- (void)didTTSVolumeChange:(id)a0 forReason:(unsigned long long)a1;
- (void)audioSessionProviderBeginInterruption:(id)a0;
- (void)audioSessionProviderBeginInterruption:(id)a0 withContext:(id)a1;
- (void)audioSessionProviderEndInterruption:(id)a0;
- (void)audioSessionProvider:(id)a0 willSetAudioSessionActive:(BOOL)a1;
- (void)audioSessionProvider:(id)a0 didSetAudioSessionActive:(BOOL)a1;
- (void)audioSessionProvider:(id)a0 providerInvalidated:(BOOL)a1;
- (void)audioSessionProvider:(id)a0 didChangeContext:(BOOL)a1;
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)a0 ofType:(long long)a1 error:(id)a2;
- (void)audioDecoderDidDecodePackets:(id)a0 audioStreamHandleId:(unsigned long long)a1 buffer:(id)a2 remoteVAD:(id)a3 timestamp:(unsigned long long)a4 receivedNumChannels:(unsigned int)a5;
- (void)speakerRecognitionController:(id)a0 hasSpeakerInfo:(id)a1;
- (void)speakerRecognitionFinishedProcessing:(id)a0 withFinalSpeakerInfo:(id)a1;
- (BOOL)initializeRecordSessionWithContext:(id)a0;
- (void)resetAudioSession;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })getLPCMAudioStreamBasicDescription;
- (void)stopRecordingWithOptions:(id)a0;
- (float)peakPowerForOutputReference;
- (float)averagePowerForOutputReference;
- (unsigned long long)outputReferenceChannel;
- (void)setEndpointAnalyzerDelegate:(id)a0;
- (float)getSmartSiriVolume;
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)a0;
- (void)cancelCurrentLanguageDetectorRequest;
- (void)setLanguageDetectorInteractionID:(id)a0;
- (void)beginWaitingForMyriad;
- (void)endWaitingForMyriadWithDecision:(unsigned long long)a0;

@end

@class NSMutableDictionary, NSMutableData, SFAppleIDContactInfo, SFDevice, NSDictionary, NSObject, CUAppleIDClient, SDStatusMonitor, NSString, TRSession, SFTRSession, NSXPCListenerEndpoint, CUMessageSession, CUMessageSessionServer, NSXPCConnection, NSUUID;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_os_transaction;

@interface SFSession : NSObject <NSSecureCoding, SFXPCInterface> {
    struct CryptoAEADPrivate { } *_encryptionReadAEAD;
    unsigned char _encryptionReadNonce[12];
    struct CryptoAEADPrivate { } *_encryptionWriteAEAD;
    unsigned char _encryptionWriteNonce[12];
    NSMutableData *_fragmentData;
    unsigned short _fragmentLastIndex;
    NSObject<OS_dispatch_source> *_heartbeatTimer;
    NSMutableDictionary *_requestMap;
    NSObject<OS_os_transaction> *_transaction;
    struct LogCategory { int x0; int x1; char *x2; unsigned int x3; char *x4; char *x5; int x6; struct LogCategory *x7; struct LogOutput *x8; struct LogOutput *x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char *x14; struct LogCategoryPrivate *x15; } *_ucatCore;
    struct LogCategory { int x0; int x1; char *x2; unsigned int x3; char *x4; char *x5; int x6; struct LogCategory *x7; struct LogOutput *x8; struct LogOutput *x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char *x14; struct LogCategoryPrivate *x15; } *_ucatCrypto;
    BOOL _activateCalled;
    BOOL _activateInProgress;
    BOOL _activateCompleted;
    id /* block */ _activateCompletion;
    SFAppleIDContactInfo *_appleIDContactInfo;
    BOOL _appleIDContactCompleted;
    BOOL _invalidateCalled;
    BOOL _invalidateDone;
    unsigned int _heartbeatID;
    BOOL _heartbeatV2;
    BOOL _heartbeatWaiting;
    CUMessageSessionServer *_messageSessionServer;
    id /* block */ _pairSetupCompletion;
    BOOL _pairSetupEnded;
    unsigned int _pairSetupFlags;
    struct PairingSessionPrivate { } *_pairSetupSession;
    unsigned int _pairSetupXID;
    id /* block */ _pairVerifyCompletion;
    BOOL _pairVerifyEnded;
    unsigned int _pairVerifyFlags;
    struct PairingSessionPrivate { } *_pairVerifySession;
    NSMutableDictionary *_requestQueue;
    BOOL _timeoutFired;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    NSXPCConnection *_xpcCnx;
    SFTRSession *_sfTRSession;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (copy, nonatomic) NSUUID *identifier;
@property (nonatomic) unsigned long long heartbeatLastTicks;
@property (copy, nonatomic) NSUUID *peer;
@property (copy, nonatomic) id /* block */ receivedFrameHandler;
@property (readonly, copy, nonatomic) NSMutableDictionary *requestHandlers;
@property (copy, nonatomic) id /* block */ responseMessageInternalHandler;
@property (copy, nonatomic) id /* block */ sendFrameHandler;
@property (nonatomic) unsigned char serviceType;
@property (copy, nonatomic) NSUUID *serviceUUID;
@property (nonatomic) unsigned int sessionID;
@property (nonatomic) unsigned int sharingSourceVersion;
@property (retain, nonatomic) NSXPCListenerEndpoint *testListenerEndpoint;
@property (nonatomic) BOOL touchRemoteEnabled;
@property (retain, nonatomic) TRSession *trSession;
@property (nonatomic) long long bluetoothState;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) id /* block */ errorHandler;
@property (copy, nonatomic) NSString *fixedPIN;
@property (retain, nonatomic) NSString *label;
@property (readonly, nonatomic) CUMessageSession *messageSessionTemplate;
@property (retain, nonatomic) SFDevice *peerDevice;
@property (copy, nonatomic) NSString *serviceIdentifier;
@property (nonatomic) unsigned int sessionFlags;
@property (nonatomic) double timeout;
@property (copy, nonatomic) NSString *myAppleID;
@property (retain, nonatomic) CUAppleIDClient *myAppleIDInfoClient;
@property (copy, nonatomic) NSString *peerAppleID;
@property (copy, nonatomic) NSString *peerContactIdentifier;
@property (retain, nonatomic) SDStatusMonitor *statusMonitor;
@property (copy, nonatomic) id /* block */ bluetoothStateChangedHandler;
@property (copy, nonatomic) id /* block */ interruptionHandler;
@property (copy, nonatomic) id /* block */ invalidationHandler;
@property (copy, nonatomic) NSDictionary *pairSetupACL;
@property (copy, nonatomic) NSDictionary *pairVerifyACL;
@property (copy, nonatomic) id /* block */ promptForPINHandler;
@property (copy, nonatomic) id /* block */ receivedObjectHandler;
@property (copy, nonatomic) id /* block */ receivedRequestHandler;
@property (copy, nonatomic) id /* block */ sessionStartedHandler;
@property (copy, nonatomic) id /* block */ timeoutHandler;
@property (copy, nonatomic) id /* block */ eventMessageHandler;
@property (copy, nonatomic) id /* block */ requestMessageHandler;

- (void)_startTimeoutIfNeeded;
- (void)sendResponse:(id)a0;
- (void)_ensureXPCStarted;
- (id)init;
- (void)sendRequest:(id)a0;
- (void).cxx_destruct;
- (void)activateWithCompletion:(id /* block */)a0;
- (void)_cleanup;
- (void)dealloc;
- (void)sendEvent:(id)a0;
- (void)registerRequestID:(id)a0 options:(id)a1 handler:(id /* block */)a2;
- (void)deregisterRequestID:(id)a0;
- (id)pairingDeriveKeyForIdentifier:(id)a0 keyLength:(unsigned long long)a1;
- (void)_activateWithCompletion:(id /* block */)a0;
- (void)sendRequestWithFlags:(unsigned int)a0 object:(id)a1 responseHandler:(id /* block */)a2;
- (void)sendWithFlags:(unsigned int)a0 object:(id)a1;
- (void)sessionReceivedRequest:(id)a0;
- (void)sessionError:(id)a0;
- (void)sessionBluetoothStateChanged:(long long)a0;
- (void)sessionReceivedEvent:(id)a0;
- (void)sessionReceivedFrameType:(unsigned char)a0 data:(id)a1;
- (void)sessionReceivedResponse:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)_invalidated;
- (id)description;
- (void)_activated;
- (void)_registerRequestID:(id)a0 options:(id)a1 handler:(id /* block */)a2;
- (void)sendRequestID:(id)a0 options:(id)a1 request:(id)a2 responseHandler:(id /* block */)a3;
- (void)_sendRequestID:(id)a0 options:(id)a1 request:(id)a2 responseHandler:(id /* block */)a3;
- (void)_timeoutTimerFired;
- (void)pairSetupTryPIN:(id)a0;
- (void)pairSetupWithFlags:(unsigned int)a0 completion:(id /* block */)a1;
- (void)_pairSetupWithFlags:(unsigned int)a0 completion:(id /* block */)a1;
- (void)_pairSetupTryPIN:(id)a0;
- (void)pairVerifyWithFlags:(unsigned int)a0 completion:(id /* block */)a1;
- (void)_pairVerifyWithFlags:(unsigned int)a0 completion:(id /* block */)a1;
- (void)_hearbeatTimer;
- (int)setEncryptionReadKey:(const char *)a0 readKeyLen:(unsigned long long)a1 writeKey:(const char *)a2 writeKeyLen:(unsigned long long)a3;
- (void)_setupMessageSession;
- (void)_setupTouchRemote;
- (void)_tearDownMessageSession;
- (void)_tearDownTouchRemote;
- (BOOL)_sessionReceivedRegisteredRequestID:(id)a0 flags:(unsigned int)a1 xidKey:(id)a2 xidValue:(id)a3;
- (BOOL)_sessionReceivedEvent:(id)a0 flags:(unsigned int)a1;
- (BOOL)_sessionReceivedRequest:(id)a0 flags:(unsigned int)a1 responseHandler:(id /* block */)a2;
- (void)_sendRequestWithFlags:(unsigned int)a0 object:(id)a1 responseHandler:(id /* block */)a2;
- (void)sessionReceivedFragmentData:(id)a0 last:(BOOL)a1;
- (void)_pairSetupCompleted:(int)a0;
- (void)_pairVerifyCompleted:(int)a0;
- (void)sendFrameType:(unsigned char)a0 data:(id)a1;
- (BOOL)pairingContainsACL:(id)a0;
- (void)_fetchInfo;
- (void)_activatedIfReady:(id)a0;
- (void)_deregisterRequestID:(id)a0;
- (void)_pairSetup:(id)a0 start:(BOOL)a1;
- (void)sendFrameType:(unsigned char)a0 object:(id)a1;
- (void)_pairVerify:(id)a0 start:(BOOL)a1;
- (BOOL)_appleIDAddProof:(id)a0 error:(id *)a1;
- (id)_appleIDVerifyProof:(id)a0 error:(id *)a1;
- (void)_sendFrameType:(unsigned char)a0 object:(id)a1;
- (void)_sendEncryptedObject:(id)a0;
- (void)_interrupted;
- (void)_sessionReceivedEncryptedData:(id)a0 type:(unsigned char)a1;
- (void)_sessionReceivedUnencryptedData:(id)a0 type:(unsigned char)a1;
- (void)_sessionReceivedStartAck:(id)a0;
- (void)_sessionReceivedObject:(id)a0 flags:(unsigned int)a1;
- (void)_sessionReceivedResponseID:(id)a0 object:(id)a1 flags:(unsigned int)a2;
- (void)_sessionReceivedRequestID:(id)a0 object:(id)a1 flags:(unsigned int)a2;
- (void)appleIDAddProof:(id)a0 dispatchQueue:(id)a1 completion:(id /* block */)a2;
- (void)appleIDVerifyProof:(id)a0 dispatchQueue:(id)a1 completion:(id /* block */)a2;
- (void)invalidate;
- (void)encodeWithCoder:(id)a0;

@end

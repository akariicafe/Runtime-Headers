@class NSString, NSArray;

@interface USOSerializedGraph : NSObject <NSSecureCoding>

@property (class, readonly) BOOL supportsSecureCoding;

@property (retain, nonatomic) NSString *printedForm;
@property (retain, nonatomic) NSArray *nodes;
@property (retain, nonatomic) NSArray *edges;

- (void).cxx_destruct;
- (id)initWithCoder:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (struct unique_ptr<siri::ontology::UsoGraph, std::__1::default_delete<siri::ontology::UsoGraph> > { struct __compressed_pair<siri::ontology::UsoGraph *, std::__1::default_delete<siri::ontology::UsoGraph> > { struct UsoGraph *x0; } x0; })toCppUsoGraph:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager *x0; struct __shared_weak_count *x1; })a0 withError:(id *)a1;
- (id)initWithUsoGraph:(struct UsoGraph { struct adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS> { struct list<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, std::__1::allocator<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge> > > { struct __list_node_base<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> { struct __list_node_base<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> *x0; struct __list_node_base<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<boost::list_edge<unsigned long, siri::ontology::UsoGraphEdge>, void *> > > { unsigned long long x0; } x1; } x0; struct vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex, std::__1::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex> > { struct stored_vertex *x0; struct stored_vertex *x1; struct __compressed_pair<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex *, std::__1::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>, boost::vecS, boost::vecS, boost::bidirectionalS, siri::ontology::UsoGraphNode *, siri::ontology::UsoGraphEdge, boost::no_property, boost::listS>::config::stored_vertex> > { struct stored_vertex *x0; } x2; } x1; struct scoped_ptr<boost::no_property> { struct no_property *x0; } x2; } x0; struct OntologyVersion { unsigned int x0; unsigned int x1; unsigned int x2; } x1; struct vector<std::__1::unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> >, std::__1::allocator<std::__1::unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> > > > { struct unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> > *x0; struct unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> > *x1; struct __compressed_pair<std::__1::unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> > *, std::__1::allocator<std::__1::unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> > > > { struct unique_ptr<siri::ontology::UsoGraphNode, std::__1::default_delete<siri::ontology::UsoGraphNode> > *x0; } x2; } x2; struct unordered_set<const siri::ontology::UsoGraphNode *, std::__1::hash<const siri::ontology::UsoGraphNode *>, std::__1::equal_to<const siri::ontology::UsoGraphNode *>, std::__1::allocator<const siri::ontology::UsoGraphNode *> > { struct __hash_table<const siri::ontology::UsoGraphNode *, std::__1::hash<const siri::ontology::UsoGraphNode *>, std::__1::equal_to<const siri::ontology::UsoGraphNode *>, std::__1::allocator<const siri::ontology::UsoGraphNode *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *>, std::__1::allocator<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> > > { struct __hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> { struct __hash_node_base<std::__1::__hash_node<const siri::ontology::UsoGraphNode *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<const siri::ontology::UsoGraphNode *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<const siri::ontology::UsoGraphNode *> > { float x0; } x3; } x0; } x3; struct UsoRootNode *x4; } *)a0 withError:(id *)a1;
- (id)createSerializedNode:(const struct UsoGraphNode { void /* function */ **x0; struct UsoGraph *x1; unsigned long long x2; } *)a0 withError:(id *)a1;
- (const struct OntologyNodeName { void /* function */ **x0; int x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x2; int x3; struct unordered_map<int, int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, int> > > { struct __hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true> > { float x0; } x3; } x0; } x4; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node_base<std::__1::__hash_node<int, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<int> > { float x0; } x3; } x0; } x5; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node_base<std::__1::__hash_node<int, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<int> > { float x0; } x3; } x0; } x6; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node_base<std::__1::__hash_node<int, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<int> > { float x0; } x3; } x0; } x7; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node_base<std::__1::__hash_node<int, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<int> > { float x0; } x3; } x0; } x8; } *)getOrCreateNodeName:(id)a0 withVocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager *x0; struct __shared_weak_count *x1; })a1 withError:(id *)a2;
- (const struct OntologyVerbName { void /* function */ **x0; int x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x2; int x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct unordered_map<int, int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, int> > > { struct __hash_table<std::__1::__hash_value_type<int, int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, int> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, int>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, int>, std::__1::hash<int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, int>, std::__1::equal_to<int>, true> > { float x0; } x3; } x0; } x5; } *)getOrCreateVerbName:(id)a0 withVocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager *x0; struct __shared_weak_count *x1; })a1 withError:(id *)a2;
- (const struct OntologyEdgeName { void /* function */ **x0; int x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x2; int x3; } *)getOrCreateEdgeName:(id)a0 withVocabManager:(struct shared_ptr<siri::ontology::UsoVocabManager> { struct UsoVocabManager *x0; struct __shared_weak_count *x1; })a1 withError:(id *)a2;
- (id)initWithNodes:(id)a0 edges:(id)a1;
- (id)getDebugGraphString;
- (id)getDebugGraphStringSiriNl;

@end

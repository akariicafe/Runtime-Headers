@class UIColor, NSNumber, NSAttributedString, NSCharacterSet;

@interface CKTextComponent : CKComponent {
    struct CKTextKitAttributes { NSAttributedString *attributedString; NSAttributedString *truncationAttributedString; NSCharacterSet *avoidTailTruncationSet; long long lineBreakMode; unsigned long long maximumNumberOfLines; struct CGSize { double width; double height; } shadowOffset; UIColor *shadowColor; double shadowOpacity; double shadowRadius; void /* function */ *layoutManagerFactory; } _attributes;
    struct CKTextComponentAccessibilityContext { NSNumber *isAccessibilityElement; NSNumber *providesAccessibleElements; struct CKComponentAccessibilityTextAttribute { id /* block */ accessibilityLazyTextBlock; } accessibilityLabel; } _accessibilityContext;
}

+ (id)newWithTextAttributes:(const struct CKTextKitAttributes { id x0; id x1; id x2; long long x3; unsigned long long x4; struct CGSize { double x0; double x1; } x5; id x6; double x7; double x8; void /* function */ *x9; } *)a0 viewAttributes:(const struct unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > { struct __hash_table<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::__unordered_map_hasher<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::hash<CKComponentViewAttribute>, true>, std::__1::__unordered_map_equal<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::equal_to<CKComponentViewAttribute>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::hash<CKComponentViewAttribute>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::equal_to<CKComponentViewAttribute>, true> > { float x0; } x3; } x0; } *)a1 options:(const struct CKTextComponentOptions { unsigned long long x0; struct CKTextComponentAccessibilityContext { id x0; id x1; struct CKComponentAccessibilityTextAttribute { id /* block */ x0; } x2; } x1; } *)a2 size:(const struct CKComponentSize { struct CKRelativeDimension { int x0; double x1; } x0; struct CKRelativeDimension { int x0; double x1; } x1; struct CKRelativeDimension { int x0; double x1; } x2; struct CKRelativeDimension { int x0; double x1; } x3; struct CKRelativeDimension { int x0; double x1; } x4; struct CKRelativeDimension { int x0; double x1; } x5; } *)a3;

- (void).cxx_destruct;
- (id).cxx_construct;
- (struct CKComponentLayout { id x0; struct CGSize { double x0; double x1; } x1; struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > { struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > *x0; struct __shared_weak_count *x1; } x2; id x3; })computeLayoutThatFits:(struct CKSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)wf_applyVisualStying:(id)a0;
- (struct MountResult { BOOL x0; struct MountContext { struct shared_ptr<CK::Component::ViewManager> { struct ViewManager *x0; struct __shared_weak_count *x1; } x0; struct CGPoint { double x0; double x1; } x1; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x2; BOOL x3; } x1; })mountInContext:(const struct MountContext { struct shared_ptr<CK::Component::ViewManager> { struct ViewManager *x0; struct __shared_weak_count *x1; } x0; struct CGPoint { double x0; double x1; } x1; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x2; BOOL x3; } *)a0 size:(struct CGSize { double x0; double x1; })a1 children:(struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > { struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > *x0; struct __shared_weak_count *x1; })a2 supercomponent:(id)a3;

@end

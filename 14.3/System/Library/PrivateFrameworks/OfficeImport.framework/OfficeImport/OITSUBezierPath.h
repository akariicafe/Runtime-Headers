@interface OITSUBezierPath : NSObject <NSCopying, NSCoding> {
    long long sfr_elementCount;
    long long sfr_elementMax;
    struct PATHSEGMENT { unsigned char x0 : 4; unsigned long x1 : 60; struct CGPoint { double x0; double x1; } x2; } *sfr_head;
    double *sfr_elementLength;
    double sfr_totalLength;
    long long sfr_lastSubpathIndex;
    void *sfr_extraSegments;
    double sfr_lineWidth;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } sfr_controlPointBounds;
    double sfr_miterLimit;
    double sfr_flatness;
    double *sfr_dashedLinePattern;
    unsigned long long sfr_dashedLineCount;
    double sfr_dashedLinePhase;
    void *sfr_path;
    long long sfr_extraSegmentCount;
    long long sfr_extraSegmentMax;
    struct { unsigned char sfr_flags : 8; unsigned char sfr_pathState : 2; unsigned char sfr_calculatedLengths : 1; unsigned int sfr_unused : 21; } sfr_bpFlags;
}

+ (void)strokeRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (void)initialize;
+ (void)fillRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (double)lineWidth;
+ (void)setLineWidth:(double)a0;
+ (double)flatness;
+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cornerRadius:(double)a1;
+ (double)miterLimit;
+ (id)bezierPath;
+ (void)setLineJoinStyle:(unsigned long long)a0;
+ (void)setMiterLimit:(double)a0;
+ (void)setLineCapStyle:(unsigned long long)a0;
+ (id)bezierPathWithCGPath:(struct CGPath { } *)a0;
+ (id)bezierPathWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (unsigned long long)lineCapStyle;
+ (void)setFlatness:(double)a0;
+ (id)bezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (unsigned long long)lineJoinStyle;
+ (unsigned long long)windingRule;
+ (void)setWindingRule:(unsigned long long)a0;
+ (id)bezierPathWithStart:(struct CGPoint { double x0; double x1; })a0 end:(struct CGPoint { double x0; double x1; })a1;
+ (void)clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
+ (void)strokeLineFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
+ (void)setDefaultMiterLimit:(double)a0;
+ (double)defaultMiterLimit;
+ (void)setDefaultFlatness:(double)a0;
+ (double)defaultFlatness;
+ (void)setDefaultWindingRule:(unsigned long long)a0;
+ (unsigned long long)defaultWindingRule;
+ (void)setDefaultLineCapStyle:(unsigned long long)a0;
+ (unsigned long long)defaultLineCapStyle;
+ (void)setDefaultLineJoinStyle:(unsigned long long)a0;
+ (unsigned long long)defaultLineJoinStyle;
+ (void)setDefaultLineWidth:(double)a0;
+ (double)defaultLineWidth;

- (void)fill;
- (struct CGPath { } *)CGPath;
- (double)lineWidth;
- (void)setLineWidth:(double)a0;
- (void)stroke;
- (double)length;
- (const char *)cString;
- (BOOL)isFlat;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x0; double x1; })a0 radius:(double)a1 startAngle:(double)a2 endAngle:(double)a3 clockwise:(BOOL)a4;
- (void)addClip;
- (BOOL)isEmpty;
- (id)init;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (long long)elementAtIndex:(long long)a0;
- (BOOL)isCircular;
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (double)flatness;
- (void)closePath;
- (void)setLineDash:(const double *)a0 count:(long long)a1 phase:(double)a2;
- (unsigned long long)hash;
- (long long)elementCount;
- (id)initWithCoder:(id)a0;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)description;
- (double)miterLimit;
- (void)removeAllPoints;
- (void)setLineJoinStyle:(unsigned long long)a0;
- (id)bezierPathByReversingPath;
- (void)getLineDash:(double *)a0 count:(long long *)a1 phase:(double *)a2;
- (void)appendBezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setMiterLimit:(double)a0;
- (void)setLineCapStyle:(unsigned long long)a0;
- (BOOL)isEqual:(id)a0;
- (void)lineToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)moveToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)appendBezierPathWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)appendBezierPath:(id)a0;
- (struct CGPoint { double x0; double x1; })currentPoint;
- (id)initWithCString:(const char *)a0;
- (void)_doPath;
- (unsigned long long)lineCapStyle;
- (void)setFlatness:(double)a0;
- (unsigned long long)lineJoinStyle;
- (void)encodeWithCoder:(id)a0;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (BOOL)isRectangular;
- (void)curveToPoint:(struct CGPoint { double x0; double x1; })a0 controlPoint1:(struct CGPoint { double x0; double x1; })a1 controlPoint2:(struct CGPoint { double x0; double x1; })a2;
- (long long)elementAtIndex:(long long)a0 associatedPoints:(struct CGPoint { double x0; double x1; } *)a1;
- (unsigned long long)windingRule;
- (void)setWindingRule:(unsigned long long)a0;
- (void)_deviceMoveToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_deviceLineToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_deviceCurveToPoint:(struct CGPoint { double x0; double x1; })a0 controlPoint1:(struct CGPoint { double x0; double x1; })a1 controlPoint2:(struct CGPoint { double x0; double x1; })a2;
- (void)_deviceClosePath;
- (void)subdivideBezierWithFlatness:(double)a0 startPoint:(struct CGPoint { double x0; double x1; })a1 controlPoint1:(struct CGPoint { double x0; double x1; })a2 controlPoint2:(struct CGPoint { double x0; double x1; })a3 endPoint:(struct CGPoint { double x0; double x1; })a4;
- (void)flattenIntoPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })controlPointBounds;
- (long long)elementAtIndex:(long long)a0 allPoints:(struct CGPoint { double x0; double x1; } *)a1;
- (double)calculateLengthOfElement:(long long)a0;
- (void)calculateLengths;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x0; double x1; })a0 radius:(double)a1 startAngle:(double)a2 endAngle:(double)a3;
- (void)_appendArcSegmentWithCenter:(struct CGPoint { double x0; double x1; })a0 radius:(double)a1 angle1:(double)a2 angle2:(double)a3;
- (void)relativeMoveToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)relativeLineToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)relativeCurveToPoint:(struct CGPoint { double x0; double x1; })a0 controlPoint1:(struct CGPoint { double x0; double x1; })a1 controlPoint2:(struct CGPoint { double x0; double x1; })a2;
- (id)bezierPathByFlatteningPath;
- (id)_copyFlattenedPath;
- (BOOL)isClockwise;
- (double)lengthOfElement:(long long)a0;
- (double)lengthToElement:(long long)a0;
- (void)setAssociatedPoints:(struct CGPoint { double x0; double x1; } *)a0 atIndex:(long long)a1;
- (void)appendBezierPathWithPoints:(struct CGPoint { double x0; double x1; } *)a0 count:(long long)a1;
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 radius:(double)a2;
- (void)_addPathSegment:(long long)a0 point:(struct CGPoint { double x0; double x1; })a1;
- (void)copyPathAttributesTo:(id)a0;
- (BOOL)_isValid:(double)a0;
- (struct CGPoint { double x0; double x1; })_checkPointForValidity:(struct CGPoint { double x0; double x1; })a0;
- (void)flattenIntoPath:(id)a0 flatness:(double)a1;
- (id)bezierPathByFlatteningPathWithFlatness:(double)a0;
- (id)p_bezierPathByRemovingRedundantElementAndSubregionsSmallerThanThreshold:(double)a0;
- (id)bezierPathByRemovingRedundantElements;
- (void)_appendToPath:(id)a0 skippingInitialMoveIfPossible:(BOOL)a1;
- (void)appendBezierPath:(id)a0 skippingInitialMoveIfPossible:(BOOL)a1;
- (id)bezierPathByRemovingSmallSubpathsForInteriorWrapsForInset:(double)a0;
- (BOOL)isTriangular;
- (BOOL)isDiamond;
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 startAngle:(double)a1 swingAngle:(double)a2 angleType:(int)a3 startNewPath:(BOOL)a4;
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 startRadialVector:(struct CGPoint { double x0; double x1; })a1 endRadialVector:(struct CGPoint { double x0; double x1; })a2 angleSign:(int)a3 startNewPath:(BOOL)a4;
- (void)attachBezierPath:(id)a0;

@end

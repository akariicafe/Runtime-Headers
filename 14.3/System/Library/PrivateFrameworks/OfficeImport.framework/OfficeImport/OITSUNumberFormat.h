@class NSString, NSArray, NSIndexSet, NSUUID;

@interface OITSUNumberFormat : NSObject <TSUNumberFormatting, NSCopying, NSMutableCopying> {
    int mValueType;
    NSString *mFormatString;
    unsigned short mDecimalPlaces;
    NSString *mCurrencyCode;
    BOOL mUseAccountingStyle;
    int mNegativeStyle;
    BOOL mShowThousandsSeparator;
    int mFractionAccuracy;
    BOOL mFormatStringRequiresSuppressionOfMinusSign;
    BOOL mUseScientificFormattingAutomatically;
    BOOL mIgnoreDecimalPlacesForZeroValue;
    NSString *mPrefixString;
    NSString *mSuffixString;
    unsigned char mBase;
    unsigned short mBasePlaces;
    BOOL mBaseUseMinusSign;
    BOOL mIsCustom;
    double mScaleFactor;
    BOOL mFormatStringContainsTabCharacter;
    BOOL mFormatContainsSpecialTokens;
    BOOL mFormatContainsIntegerToken;
    unsigned char mNumberOfHashDecimalPlaceholders;
    unsigned char mTotalNumberOfDecimalPlaceholdersInFormat;
    BOOL mRequiresFractionReplacement;
    NSArray *mInterstitialStrings;
    NSIndexSet *mInterstitialStringInsertionIndexes;
    unsigned short mIndexFromRightOfLastDigitPlaceholder;
    BOOL mIsTextFormat;
    unsigned char mMinimumIntegerWidth;
    unsigned char mDecimalWidth;
    unsigned char mNumberOfNonSpaceIntegerPlaceholderDigits;
    unsigned char mNumberOfNonSpaceDecimalPlaceholderDigits;
    NSString *mFormatName;
    NSUUID *mCustomFormatKey;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)numberFormatWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7 prefixString:(id)a8 suffixString:(id)a9 scaleFactor:(double)a10 base:(unsigned char)a11 basePlaces:(unsigned short)a12 baseUseMinusSign:(BOOL)a13 isCustom:(BOOL)a14 formatName:(id)a15;
+ (id)numberFormatWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7;

- (double)scaleFactor;
- (id)currencyCode;
- (int)valueType;
- (unsigned short)base;
- (id)init;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (BOOL)isEquivalent:(id)a0;
- (void)dealloc;
- (id)formatString;
- (BOOL)isCustom;
- (id)stringFromString:(id)a0;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (BOOL)isEqual:(id)a0;
- (id)prefixString;
- (id)formatName;
- (void)setFormatName:(id)a0;
- (id)initWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7;
- (id)initWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7 prefixString:(id)a8 suffixString:(id)a9 scaleFactor:(double)a10 base:(unsigned char)a11 basePlaces:(unsigned short)a12 baseUseMinusSign:(BOOL)a13 isCustom:(BOOL)a14 interstitialStrings:(id)a15 interstitialStringInsertionIndexes:(id)a16 indexFromRightOfLastDigitPlaceholder:(unsigned short)a17 minimumIntegerWidth:(unsigned char)a18 decimalWidth:(unsigned char)a19 numberOfNonSpaceIntegerPlaceholderDigits:(unsigned char)a20 numberOfNonSpaceDecimalPlaceholderDigits:(unsigned char)a21 isTextFormat:(BOOL)a22 formatName:(id)a23 customFormatKey:(id)a24;
- (id)initWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7 base:(unsigned char)a8 basePlaces:(unsigned short)a9 baseUseMinusSign:(BOOL)a10;
- (id)initWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7 prefixString:(id)a8 suffixString:(id)a9 isCustom:(BOOL)a10;
- (unsigned short)decimalPlaces;
- (BOOL)usesAccountingStyle;
- (BOOL)showThousandsSeparator;
- (int)fractionAccuracy;
- (int)negativeStyle;
- (id)stringFromDouble:(double)a0 locale:(id)a1 decimalPlaces:(unsigned short)a2 minimumDecimalPlaces:(unsigned short)a3 forceSuppressMinusSign:(BOOL)a4;
- (BOOL)hasValidDecimalPlaces;
- (id)customNumberFormatTokens;
- (id)suffixString;
- (BOOL)isTextFormat;
- (BOOL)canFormatText;
- (BOOL)usesTextFormatForValue:(double)a0;
- (BOOL)customFormatShouldAutoInsertPercentSymbol;
- (unsigned short)basePlaces;
- (BOOL)baseUseMinusSign;
- (BOOL)usesTabs;
- (id)stringFromDouble:(double)a0 locale:(id)a1;
- (id)initCustomFormatWithFormatString:(id)a0 currencyCode:(id)a1 showThousandsSeparator:(BOOL)a2 fractionAccuracy:(int)a3 scaleFactor:(double)a4 interstitialStrings:(id)a5 interstitialStringInsertionIndexes:(id)a6 indexFromRightOfLastDigitPlaceholder:(unsigned short)a7 minimumIntegerWidth:(unsigned char)a8 decimalWidth:(unsigned char)a9 numberOfNonSpaceIntegerPlaceholderDigits:(unsigned char)a10 numberOfNonSpaceDecimalPlaceholderDigits:(unsigned char)a11 isTextFormat:(BOOL)a12 formatName:(id)a13;
- (id)initWithValueType:(int)a0 formatString:(id)a1 decimalPlaces:(unsigned short)a2 currencyCode:(id)a3 useAccountingStyle:(BOOL)a4 negativeStyle:(int)a5 showThousandsSeparator:(BOOL)a6 fractionAccuracy:(int)a7 suffixString:(id)a8;
- (id)numberFormatBySettingNegativeStyle:(int)a0;
- (id)numberFormatBySettingUseAccountingStyle:(BOOL)a0;
- (id)customFormatKey;
- (BOOL)useScientificFormattingAutomatically;
- (void)setUseScientificFormattingAutomatically:(BOOL)a0;
- (BOOL)ignoreDecimalPlacesForZeroValue;
- (void)setIgnoreDecimalPlacesForZeroValue:(BOOL)a0;
- (BOOL)requiresParensToBeReplacedWithSpacesForDouble:(double)a0;
- (id)stringFromDouble:(double)a0 locale:(id)a1 forceSuppressMinusSign:(BOOL)a2;
- (id)stringFromDouble:(double)a0 locale:(id)a1 minimumDecimalPlaces:(unsigned short)a2 forceSuppressMinusSign:(BOOL)a3;
- (id)stringFromDouble:(double)a0 locale:(id)a1 minimumDecimalPlaces:(unsigned short)a2;
- (id)stringFromDouble:(double)a0 locale:(id)a1 decimalPlaces:(unsigned short)a2 minimumDecimalPlaces:(unsigned short)a3;
- (id)baseStringFromDouble:(double)a0;

@end

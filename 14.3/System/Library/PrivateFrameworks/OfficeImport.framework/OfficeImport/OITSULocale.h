@class OITSUDateParserLibrary, NSString, NSArray, NSLock, NSMutableDictionary, NSLocale, NSMutableArray, NSTimeZone, NSCache;

@interface OITSULocale : NSObject {
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _formattersMutex;
    NSMutableArray *_numberFormatters;
    NSMutableArray *_scientificNumberFormatters;
    NSLock *_numberFormatterStringFromDoubleWithFormatLock;
    struct __CFNumberFormatter { } *_plainFormatter;
    struct __CFNumberFormatter { } *_noMinusSignPlainFormatter;
    struct __CFNumberFormatter { } *_currencyFormatter;
    struct __CFNumberFormatter { } *_noMinusSignCurrencyFormatter;
    NSString *_activeCurrencyCode;
    NSString *_activeNoMinusSignCurrencyCode;
    NSLock *_localeSpecificStorageLock;
    NSMutableDictionary *_localeSpecificStorage;
    NSCache *_cachedLocalizedStrings;
}

@property (readonly) NSLocale *locale;
@property (readonly) struct __CFLocale { } *cfLocale;
@property (readonly) NSLocale *gregorianCalendarLocale;
@property (readonly) struct __CFLocale { } *cfGregorianCalendarLocale;
@property (readonly) NSString *languageCode;
@property (readonly) NSString *localeIdentifier;
@property (readonly) NSString *documentLanguageIdentifier;
@property (readonly) BOOL isAutoUpdating;
@property (readonly) NSString *decimalSeparator;
@property (readonly) NSString *currencyDecimalSeparator;
@property (readonly) NSString *groupingSeparator;
@property (readonly) NSString *currencyGroupingSeparator;
@property (readonly) NSString *listSeparator;
@property (readonly) NSString *arrayRowSeparator;
@property (readonly) NSString *percentSymbol;
@property (readonly) unsigned long long groupingSize;
@property (readonly) NSString *currencyCode;
@property (readonly) long long dateComponentOrdering;
@property (readonly) NSArray *monthSymbols;
@property (readonly) NSArray *standaloneMonthSymbols;
@property (readonly) NSArray *weekdaySymbols;
@property (readonly) NSArray *standaloneWeekdaySymbols;
@property (readonly) NSArray *shortMonthSymbols;
@property (readonly) NSArray *shortStandaloneMonthSymbols;
@property (readonly) NSArray *shortWeekdaySymbols;
@property (readonly) NSArray *shortStandaloneWeekdaySymbols;
@property (readonly) NSString *amString;
@property (readonly) NSString *pmString;
@property (readonly) NSString *trueString;
@property (readonly) NSString *falseString;
@property (readonly) OITSUDateParserLibrary *dateParserLibrary;
@property (readonly) NSTimeZone *timeZone;

+ (void)initialize;
+ (id)currentLocale;
+ (id)preferredLanguages;
+ (id)preferredLocale;
+ (id)canonicalizeLocaleIdentifierWithLanguageScriptAndRegionOnly:(id)a0;
+ (id)canonicalizeLocaleIdentifierWithLanguageOnly:(id)a0;
+ (id)deducedScriptForLocale:(id)a0;
+ (BOOL)localeIsAutoUpdating:(id)a0;
+ (id)localeIDWithDefaultRegionCode:(id)a0;
+ (id)localeIDWithoutDefaultRegionCode:(id)a0 avoidAmbiguousCases:(BOOL)a1;
+ (id)displayNameForCode:(id)a0 ofType:(id)a1 displayStandalone:(BOOL)a2;
+ (id)applicationLocale;
+ (id)allSupportedTier3Languages;
+ (id)canonicalizeLocaleIdentifier:(id)a0;
+ (id)localeForLocaleIdentifier:(id)a0 documentLanguageIdentifier:(id)a1;
+ (void)saveLocaleForReuse:(id)a0;
+ (id)canonicalizeLocaleIdentifierWithLanguageAndRegionOnly:(id)a0;
+ (id)simplifiedDisplayNameForLocaleID:(id)a0 displayStandalone:(BOOL)a1;
+ (void)setLocalizedStringBundle:(struct __CFBundle { } *)a0;
+ (unsigned long long)autoupdatingCurrentLocaleChangeCount;
+ (id)canonicalizeLocaleIdentifierWithLanguageAndScriptOnly:(id)a0;
+ (id)allSupportedTier1Languages;
+ (id)allSupportedTemplatePickerLanguages;
+ (id)cacheKeyForLocale:(id)a0;

- (id)URLForResource:(id)a0 withExtension:(id)a1 subdirectory:(id)a2 inBundleWithURL:(id)a3;
- (id)URLForResource:(id)a0 withExtension:(id)a1 subdirectory:(id)a2;
- (void)dealloc;
- (unsigned long long)hash;
- (id)description;
- (id)localizedStringWithFormat:(id)a0;
- (BOOL)isEqual:(id)a0;
- (id)localizedStringForKey:(id)a0 value:(id)a1 table:(id)a2;
- (id)localeSpecificStorageForKey:(id)a0;
- (void)setLocaleSpecificStorage:(id)a0 forKey:(id)a1;
- (id)numberFormatterStringFromDouble:(double)a0 withFormat:(id)a1 useDecimalPlaces:(BOOL)a2 minDecimalPlaces:(unsigned short)a3 decimalPlaces:(unsigned short)a4 showThousandsSeparator:(BOOL)a5 currencyCode:(id)a6 suppressMinusSign:(BOOL)a7;
- (id)initWithLocale:(id)a0 documentLanguageIdentifier:(id)a1 useAutoupdating:(BOOL)a2;
- (void)_initializeNumberFormatterStringFromDoubleCache;
- (long long)localizedCaseInsensitiveCompare:(id)a0 toString:(id)a1;
- (id)URLForResource:(id)a0 withExtension:(id)a1 subdirectory:(id)a2 inBundle:(struct __CFBundle { } *)a3;
- (id)localeIdentifierWithLanguageAndRegionOnly;
- (id)initWithLocale:(id)a0 documentLanguageIdentifier:(id)a1;
- (id)localeIdentifierWithLanguageScriptAndRegionOnly;
- (id)copyWithDocumentLanguageIdentifier:(id)a0;
- (id)simplifiedDisplayNameWithStandalone:(BOOL)a0;
- (id)displayLanguageNameWithStandalone:(BOOL)a0;
- (struct __CFNumberFormatter { } *)checkoutNumberFormatter;
- (void)returnNumberFormatter:(struct __CFNumberFormatter { } *)a0;
- (struct __CFNumberFormatter { } *)checkoutScientificNumberFormatter;
- (void)returnScientificNumberFormatter:(struct __CFNumberFormatter { } *)a0;
- (long long)localizedCompare:(id)a0 toString:(id)a1;
- (BOOL)localizedCaseInsensitiveIsEqual:(id)a0 toString:(id)a1;

@end

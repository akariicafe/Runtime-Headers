@class NSMutableArray, NSMutableDictionary;

@interface VKLabelNavRoadGraph : NSObject {
    struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **__value_; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { unsigned long long __value_; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *__next_; } __value_; struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > { float __value_; } __p3_; } __table_; } _tiles;
    struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **__value_; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { unsigned long long __value_; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *__next_; } __value_; struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > { float __value_; } __p3_; } __table_; } _duplicateTiles;
    NSMutableDictionary *_tileDatasByIndex;
    NSMutableArray *_intersections;
    BOOL _oppositeCarriagewayJunctionsValid;
    NSMutableArray *_oppositeCarriagewayJunctions;
    struct Matrix<float, 2, 1> { float _e[2]; } _unitHeading;
    BOOL _offRouteJunctionsValid;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _offRouteJunctionSelectRect;
    NSMutableArray *_offRouteJunctions;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeUserOffset;
    BOOL _routeFeatureMapValid;
    struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **__value_; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > { unsigned long long __value_; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *__next_; } __value_; struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> > { float __value_; } __p3_; } __table_; } _routeFeatureMap;
    BOOL _simplifiedRouteValid;
    struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *__begin_; struct Matrix<double, 2, 1> *__end_; struct __compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *__value_; struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _simplifiedRoutePoints;
    unsigned long long _currentRoadStartSimplifiedPointIndex;
    BOOL _screenRouteValid;
    struct vector<RouteSegment, geo::StdAllocator<RouteSegment, mdm::Allocator> > { struct RouteSegment *__begin_; struct RouteSegment *__end_; struct __compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, mdm::Allocator> > { struct RouteSegment *__value_; struct StdAllocator<RouteSegment, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _screenRouteSegments;
    unsigned long long _firstPOIAligningRouteSegment;
}

@property (retain, nonatomic) NSMutableArray *junctions;

- (void)routeJunctionsHaveChanged;
- (BOOL)_checkIfDualCarriageWayConnectorRoad:(id)a0 fromJunction:(id)a1 toJunction:(id)a2 checkShields:(BOOL)a3;
- (id)_nextIntersectionForRoad:(id)a0;
- (struct Matrix<float, 2, 1> { float x0[2]; })unitHeading;
- (unsigned char)computeRoutePositionForPOIAtPixel:(const struct Matrix<float, 2, 1> { float x0[2]; } *)a0 currentPosition:(unsigned char)a1 context:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (void).cxx_destruct;
- (id)overpassJunctionForJunction:(id)a0;
- (void)_updateSimplifiedRoute;
- (void)reset;
- (void)startingLabelLayoutWithContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 routeUserOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a1;
- (void)dealloc;
- (unsigned long long)countReadyJunctionLists;
- (void)_transformRouteToScreenWithContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0;
- (void)_findOffRouteJunctions;
- (id)offRouteJunctionList;
- (id)_findInterTileJunctionForJunction:(id)a0;
- (id)junctionListForDepth:(unsigned long long)a0;
- (id)oppositeCarriagewayJunctions;
- (void)addRouteRoadEdge:(const struct VKLabelNavRouteRoadEdge { struct PolylineCoordinate { unsigned int x0; float x1; } x0; struct PolylineCoordinate { unsigned int x0; float x1; } x1; struct *x2; } *)a0 atA:(BOOL)a1 isRouteRefineJunction:(BOOL)a2 tile:(const struct shared_ptr<md::LabelTile> { struct LabelTile *x0; struct __shared_weak_count *x1; } *)a3 junctionList:(id)a4;
- (void)setTiles:(const struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **x0; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { unsigned long long x0; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *x0; } x0; struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > { float x0; } x3; } x0; } *)a0;
- (id)junctionForRoad:(id)a0 nearJunction:(BOOL)a1 crossTileEdge:(BOOL)a2;
- (id)_junctionForRoadEdge:(const struct { struct *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct *x5; struct *x6; } *)a0 atA:(BOOL)a1 routeOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a2 tile:(const struct shared_ptr<md::LabelTile> { struct LabelTile *x0; struct __shared_weak_count *x1; } *)a3;
- (id)initWithJunctions:(id)a0;
- (id)offRouteGraphJunctionsWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 maxJunctions:(unsigned long long)a1 isOnRoute:(BOOL)a2;
- (id).cxx_construct;
- (BOOL)collideRouteWithLabel:(id)a0 routeCrossProduct:(float *)a1 context:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (BOOL)prepareOppositeCarriagewayJunctions;
- (void)evaluateDualCarriagewayForJunction:(id)a0 outputJunctionList:(id)a1;
- (id)nextRoadSegmentForRoad:(id)a0;
- (BOOL)isPriorRouteCollinearWithRoad:(id)a0 distance:(float)a1;
- (void)_updateIntersectionsForDepth:(unsigned long long)a0;

@end

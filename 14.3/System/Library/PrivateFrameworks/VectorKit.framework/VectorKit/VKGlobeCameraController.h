@class NSString;

@interface VKGlobeCameraController : VKScreenCameraController <VKGesturingCameraController> {
    struct CameraManager { void /* function */ **_vptr$CameraManager; BOOL _panBegin; BOOL _panInProgress; BOOL _panEnd; struct Matrix<int, 2, 1> { int _e[2]; } _panCurrentCursor; struct Matrix<int, 2, 1> { int _e[2]; } _panPreviousCursor; struct Matrix<int, 2, 1> { int _e[2]; } _panStartCursor; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _panStartPosition; double _panDistance; BOOL _panAtStartPosition; BOOL _rotateBegin; BOOL _rotateInProgress; BOOL _rotateEnd; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _rotateStartPosition; struct Matrix<int, 2, 1> { int _e[2]; } _rotateCurrentCursor; double _rotateAngle; BOOL _tiltBegin; BOOL _tiltInProgress; BOOL _tiltEnd; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _tiltStartPosition; struct Matrix<int, 2, 1> { int _e[2]; } _tiltCurrentCursor; struct Matrix<int, 2, 1> { int _e[2]; } _tiltPreviousCursor; double _tiltAngle; BOOL _zoomBegin; BOOL _zoomInProgress; BOOL _zoomEnd; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _zoomStartPosition; struct Matrix<int, 2, 1> { int _e[2]; } _zoomCurrentCursor; double _zoomFactor; double _zoomStartDistance; BOOL _zoomRotateToNorth; BOOL _useTiltLimit; int _tiltLimitMode; BOOL _tiltLimitPushDownEnabled; BOOL _tiltLimitTransferInProgress; BOOL _tiltLimitPushDown; double _startPushDownTilt; double _tiltLimitTransferFraction; double _startTiltLimitTilt; struct Geocentric<double> { double _e[3]; } _startTiltLimitPosition; struct Matrix<double, 3, 1> { double _e[3]; } _startTiltLimitDirection; double _fullZoomTiltLimitFactor; struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _singleRestriction; struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _westOfDatelineRestriction; struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _eastOfDatelineRestriction; } _cameraManager;
    double _currentDoublePanPitch;
    BOOL _isPitching;
    BOOL _isRotating;
    BOOL _wasPitched;
    BOOL _couldEnter3DMode;
    double _currentZoomLevel;
    double _maxZoomLevel;
    double _minZoomLevel;
    double _lastRotation;
    struct CGPoint { double x; double y; } _panStartScreenPoint;
    struct CGPoint { double x; double y; } _panLastScreenPoint;
    double _beganDoublePanPitch;
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
}

@property (nonatomic) struct GlobeView { void /* function */ **x0; struct GeoServicesLoader *x1; struct ManifestManager *x2; struct TriggerManager *x3; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager *x0; struct __shared_weak_count *x1; } x4; struct DtmCacheNode *x5; struct DtmRequestManager *x6; struct FreezeViewNode *x7; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x8; BOOL x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x11; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; struct SimpleTileKey *x1; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; } x2; } x12; BOOL x13; unsigned int x14; unsigned int x15; id x16; BOOL x17; BOOL x18; struct AnimationManager { struct AnimationReferenceTimer { double x0; double x1; double x2; } x0; struct unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> > { struct __compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> > { struct AnimationTimer *x0; } x0; } x1; double x2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; struct AnimationObjectHolder *x1; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; } x2; } x3; } x19; struct Stopwatch { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; } x20; double x21; BOOL x22; struct Unit<RadianUnitDescription, double> { double x0; } x23; double x24; struct Unit<RadianUnitDescription, double> { double x0; } x25; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } x26; struct C3mmRequestManager *x27; struct RenderableGroup *x28; unsigned int x29; double x30; struct { double x0; double x1; } x31; BOOL x32; BOOL x33; struct LabelDataManagerPrivate *x34; BOOL x35; BOOL x36; BOOL x37; BOOL x38; struct RouteLineManager *x39; struct GlobeCleanupLoader *x40; struct CompleteGlobeTileSetCullingGraph *x41; struct CompleteGlobeTileSetLoader *x42; struct TileSetNode *x43; struct GlobeTileRenderManager *x44; struct CullingNode *x45; struct EarthAdjustedViewNode *x46; struct UserViewNode *x47; struct View *x48; struct BasicViewNode *x49; struct GlobeMainViewNode *x50; struct C3bRequestManager *x51; BOOL x52; struct shared_ptr<bool> { BOOL *x0; struct __shared_weak_count *x1; } x53; struct HeightRequestManager *x54; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x0; } x2; } x0; } x55; struct Mutex { void *x0; } x56; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x57; struct FlyoverTour *x58; BOOL x59; struct Viewport { int x0; int x1; int x2; int x3; } x60; BOOL x61; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x0; } x2; } x0; } x62; struct unique_ptr<ReachabilityChangedObserver, std::__1::default_delete<ReachabilityChangedObserver> > { struct __compressed_pair<ReachabilityChangedObserver *, std::__1::default_delete<ReachabilityChangedObserver> > { struct ReachabilityChangedObserver *x0; } x0; } x63; struct TileManager *x64; struct ObjectTreeLoader *x65; struct QuickSurfaceManager *x66; struct IntersectorHeight *x67; struct shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> > { struct SharedItemManager<altitude::Map, altitude::MapRequestId> *x0; struct __shared_weak_count *x1; } x68; struct BundleLoader *x69; struct ProtocolLoader *x70; struct GeoResourceManager *x71; struct GeoResourceLoader *x72; struct ViewNode *x73; struct ViewportNode *x74; struct View *x75; struct Viewport *x76; struct shared_ptr<ggl::RenderState> { struct RenderState *x0; struct __shared_weak_count *x1; } x77; unsigned int x78; struct Statistics *x79; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x80; struct TexturePager *x81; struct IOSurfacePool *x82; struct RealisticRenderer *x83; struct DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<ggl::Texture2D *> { struct __cxx_atomic_impl<ggl::Texture2D *, std::__1::__cxx_atomic_base_impl<ggl::Texture2D *> > { _Atomic struct Texture2D *x0; } x0; } x1; struct function<ggl::Texture2D *()> { struct __value_func<ggl::Texture2D *()> { struct type { unsigned char x0[24]; } x0; struct __base<ggl::Texture2D *()> *x1; } x0; } x2; } x84; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x85; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x86; } *globeView;
@property (nonatomic) BOOL tourShouldResumeWhenDoneGesturing;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)restoreViewportFromInfo:(id)a0;
- (double)pitch;
- (long long)tileSize;
- (void)setGesturing:(BOOL)a0;
- (struct Geocentric<double> { double x0[3]; })cameraPosition;
- (id)viewportInfo;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2 duration:(double)a3 timingCurve:(id /* block */)a4 completion:(id /* block */)a5;
- (struct { double x0; double x1; })centerCoordinate;
- (void)updateState;
- (void)setRegionRestriction:(id)a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void).cxx_destruct;
- (double)heading;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (double)minPitch;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; })a0 mapDataAccess:(struct MapDataAccess { struct World *x0; unsigned char x1; unsigned char x2; id x3; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x4; } *)a1 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a2 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; long long x2; } *)a3 cameraDelegate:(id)a4;
- (double)_fovAdjustment;
- (void)setCurrentZoomLevel:(double)a0;
- (BOOL)isFullyPitched;
- (double)altitude;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)dealloc;
- (void)enter3DMode;
- (double)presentationYaw;
- (void)_updateIsPitched;
- (void)_updateCanEnter3DMode;
- (void)moveTo:(struct { double x0; double x1; })a0 zoom:(double)a1 rotation:(double)a2 tilt:(double)a3 duration:(double)a4 timingCurve:(id /* block */)a5 completion:(id /* block */)a6;
- (void)moveToZoomOutZoomInTransition:(struct { double x0; double x1; })a0 height:(double)a1 useHeight:(BOOL)a2 zoom:(double)a3 rotation:(double)a4 tilt:(double)a5 duration:(double)a6 timingCurve:(id /* block */)a7 completion:(id /* block */)a8;
- (void)rotate:(double)a0 atScreenPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)mapRegion;
- (void)moveTo:(struct { double x0; double x1; })a0 height:(double)a1 useHeight:(BOOL)a2 zoom:(double)a3 rotation:(double)a4 tilt:(double)a5 duration:(double)a6 timingCurve:(id /* block */)a7 completion:(id /* block */)a8;
- (void)tiltTo:(double)a0 animated:(BOOL)a1 exaggerate:(BOOL)a2;
- (void)pitch:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)zoomToDistance:(struct CGPoint { double x0; double x1; })a0 distance:(double)a1 time:(double)a2 completionHandler:(id /* block */)a3;
- (void)stopGlobeAnimations;
- (BOOL)isFlyoverTourStarted;
- (void)interruptFlyoverTourAnimation;
- (void)rotateTo:(double)a0 animated:(BOOL)a1;
- (struct { double x0; double x1; })_centerCoordinateForMapRegion:(id)a0;
- (double)earthRadiusAt:(double)a0;
- (double)geocAngleBetween:(struct { double x0; double x1; })a0 andCoordinate:(struct { double x0; double x1; })a1;
- (double)widestLatitudeForMapRegion:(id)a0;
- (double)greatCircleMidPointLatitude:(double)a0 fromLongitude:(double)a1 toLongitude:(double)a2;
- (double)zoomForMapRegion:(id)a0;
- (void)animateRegionWithDuration:(double)a0 timingFunction:(id /* block */)a1 cursor:(struct Matrix<int, 2, 1> { int x0[2]; })a2 stepHandler:(id /* block */)a3 completionHandler:(id /* block */)a4;
- (void)animateToRestriction:(id)a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void)zoomToDistance:(struct CGPoint { double x0; double x1; })a0 distance:(double)a1 time:(double)a2;
- (float)slowDownFactorFromLoadProgress;
- (void)adjustLoadingForAnimation:(float)a0 progressFactor:(float)a1;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })a0 relativeToScreenPoint:(struct CGPoint { double x0; double x1; })a1 animated:(BOOL)a2 duration:(double)a3 completionHandler:(id /* block */)a4;
- (BOOL)canEnter3DMode;
- (void)tapZoom:(struct CGPoint { double x0; double x1; })a0 levels:(double)a1 completionHandler:(id /* block */)a2;
- (void)setYaw:(double)a0 animated:(BOOL)a1;
- (BOOL)isPitched;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)maxPitch;
- (id).cxx_construct;
- (void)startTrackingAnnotation:(id)a0 trackHeading:(BOOL)a1 animated:(BOOL)a2 duration:(double)a3 timingFunction:(id /* block */)a4;
- (void)setCenterCoordinate3D:(struct { double x0; double x1; double x2; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 animationStyle:(long long)a5 timingCurve:(id /* block */)a6 completion:(id /* block */)a7;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; })a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void)setCenterCoordinate:(struct { double x0; double x1; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 animationStyle:(long long)a5 timingCurve:(id /* block */)a6 completion:(id /* block */)a7;
- (void)pauseFlyoverTourAnimation;
- (void)exit3DMode;
- (double)distanceFromCenterCoordinate;
- (double)durationToAnimateToMapRegion:(id)a0;
- (double)maximumZoomLevel;
- (void)setMinZoomLevel:(double)a0;
- (void)setMaxZoomLevel:(double)a0;
- (void)resumeFlyoverTourAnimation;
- (double)topDownMinimumZoomLevel;
- (void)_updateGlobeFromCamera;
- (id /* block */)createMoveToZoomOutZoomInFrameFunction:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })a0 toLatLon:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })a1;
- (void)stopFlyoverTourAnimation;
- (void)updateCameraManager;
- (void)flyoverTourAnimation:(id)a0 animateToStart:(BOOL)a1 labelChanged:(id /* block */)a2 stateChange:(id /* block */)a3;
- (double)minimumZoomLevel;
- (double)currentZoomLevel;
- (BOOL)snapMapIfNecessary:(BOOL)a0;

@end

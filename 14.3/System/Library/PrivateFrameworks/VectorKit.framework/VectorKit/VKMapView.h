@class VKMapCameraController, VKMapCanvas, GEOMapRegion, VKStateCaptureHandler, VKCamera, VKNotificationObserver, GEOPOICategoryFilter, NSString, NSArray, VKPolylineOverlay, VKRouteContext, VKMuninCameraController, VKPuckAnimator, VKNavContext, VKSceneConfiguration, VKLabelMarker, VKTimedAnimation, CADisplay, VKNavCameraController, MDARController, VKClassicGlobeCanvas;
@protocol VKMapViewCameraDelegate, VKMapViewDelegate;

@interface VKMapView : CALayer {
    struct optional<VKMapType> { BOOL _hasValue; union ValueUnion { unsigned char data[4]; int type; } _value; } _mapType;
    VKMapCanvas *_canvas;
    VKClassicGlobeCanvas *_globe;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _mapDelegateMutex;
    BOOL _loaderOpen;
    NSString *_tileLoaderClientID;
    unsigned char _emphasis;
    VKTimedAnimation *_edgeInsetAnimation;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _animatingToEdgeInsets;
    BOOL _isChangingMapType;
    double _verticalYaw;
    VKNotificationObserver *_notificationObserver;
    long long _navigationDisplayRate;
    BOOL _isInBackground;
    VKMapCameraController *_mapCameraController;
    VKNavCameraController *_navigationCameraController;
    struct _retain_ptr<VKMuninCameraController *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKMuninCameraController *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _muninCameraController;
    VKNavContext *_navContext;
    struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _lastAnimatedUserCoordinate;
    struct Unit<RadianUnitDescription, double> { double _value; } _lastAnimatedCourse;
    struct unique_ptr<md::MapEngine, std::__1::default_delete<md::MapEngine> > { struct __compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine> > { struct MapEngine *__value_; } __ptr_; } _mapEngine;
    BOOL _didFinishSnapshotting;
    int _flyoverMode;
    MDARController *_arController;
    struct _retain_ptr<VKStateCaptureHandler *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKStateCaptureHandler *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _stateCaptureHandler;
    struct _retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKCamera *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _camera;
    VKRouteContext *_routeContext;
}

@property (readonly, nonatomic) VKMapCanvas *mapCanvas;
@property (readonly, nonatomic) const struct MapEngine { void /* function */ **x0; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x1; struct Device *x2; struct RealisticCommandBufferSelector *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink *x0; } x0; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop *x0; } x0; } x6; struct RunLoop *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager *x0; } x0; } x8; struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> > { struct __compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> > { struct AnimationRunner *x0; } x0; } x9; struct shared_ptr<md::RunLoopController> { struct RunLoopController *x0; struct __shared_weak_count *x1; } x10; id x11; id x12; id x13; id x14; struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> > { struct __compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> > { struct CartographicRenderer *x0; } x0; } x15; struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct __compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct RealisticRenderer *x0; } x0; } x16; struct Renderer *x17; struct unique_ptr<md::World, std::__1::default_delete<md::World> > { struct __compressed_pair<md::World *, std::__1::default_delete<md::World> > { struct World *x0; } x0; } x18; struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess> > { struct __compressed_pair<md::MapDataAccess *, std::__1::default_delete<md::MapDataAccess> > { struct MapDataAccess *x0; } x0; } x19; struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> > { struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> > { struct LayoutContext *x0; } x0; } x20; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x21; struct _retain_ptr<VKCameraDelegateMediator *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x22; struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> > { struct __compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> > { struct LogicManager *x0; } x0; } x23; struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings> > { struct __compressed_pair<md::MapEngineSettings *, std::__1::default_delete<md::MapEngineSettings> > { struct MapEngineSettings *x0; } x0; } x24; struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct __compressed_pair<gdc::LoadingStatusTracker *, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct LoadingStatusTracker *x0; } x0; } x25; struct shared_ptr<gdc::Statistics> { struct Statistics *x0; struct __shared_weak_count *x1; } x26; BOOL x27; BOOL x28; BOOL x29; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x30; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x31; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x32; BOOL x33; struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration> > { struct __compressed_pair<md::MapEngineConfiguration *, std::__1::default_delete<md::MapEngineConfiguration> > { struct MapEngineConfiguration *x0; } x0; } x34; struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode> > { struct __compressed_pair<md::MapEngineMode *, std::__1::default_delete<md::MapEngineMode> > { struct MapEngineMode *x0; } x0; } x35; struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x36; unsigned long long x37; unsigned long long x38; struct shared_ptr<std::__1::atomic<unsigned long> > { struct atomic<unsigned long> *x0; struct __shared_weak_count *x1; } x39; } *mapEngine;
@property (readonly, nonatomic) double heading;
@property (nonatomic) BOOL virtualParallaxEnabled;
@property (nonatomic) BOOL shouldLoadFallbackTiles;
@property (nonatomic) BOOL shouldLoadMapMargin;
@property (nonatomic) id<VKMapViewDelegate> mapDelegate;
@property (nonatomic) id<VKMapViewCameraDelegate> cameraDelegate;
@property (nonatomic) BOOL staysCenteredDuringPinch;
@property (nonatomic) BOOL staysCenteredDuringRotation;
@property (retain, nonatomic) CADisplay *hostDisplay;
@property (nonatomic) BOOL isPitchable;
@property (readonly, nonatomic, getter=isPitched) BOOL pitched;
@property (readonly, nonatomic, getter=isFullyPitched) BOOL fullyPitched;
@property (readonly, nonatomic, getter=minPitch) double minPitch;
@property (readonly, nonatomic, getter=maxPitch) double maxPitch;
@property (readonly, nonatomic) BOOL canEnter3DMode;
@property (readonly, nonatomic) BOOL supportsGPUFrameCaptureToDestination;
@property (readonly, nonatomic, getter=isShowingFlyover) BOOL showingFlyover;
@property (readonly, nonatomic) BOOL canShowFlyover;
@property (nonatomic) BOOL trafficEnabled;
@property (nonatomic) BOOL trafficIncidentsEnabled;
@property (nonatomic) long long displayRate;
@property (nonatomic) long long navigationDisplayRate;
@property (nonatomic) BOOL localizeLabels;
@property (nonatomic) long long labelScaleFactor;
@property (readonly, nonatomic) int flyoverMode;
@property (nonatomic) int mapType;
@property (nonatomic) struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; } mapDisplayStyle;
@property (nonatomic) float styleZOffsetScale;
@property (nonatomic) long long targetDisplay;
@property (nonatomic) struct { BOOL x0; } vehicleState;
@property (nonatomic) unsigned char emphasis;
@property (nonatomic) long long applicationUILayout;
@property (nonatomic, getter=isLabelMarkerSelectionEnabled) BOOL labelMarkerSelectionEnabled;
@property (nonatomic) long long shieldSize;
@property (nonatomic) long long navigationShieldSize;
@property (nonatomic) long long shieldIdiom;
@property (nonatomic) BOOL showsRoadLabels;
@property (nonatomic) BOOL showsPointLabels;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsVenues;
@property (nonatomic) BOOL loadMuninAvailability;
@property (retain, nonatomic) GEOPOICategoryFilter *pointsOfInterestFilter;
@property (readonly, nonatomic) VKPuckAnimator *userLocationAnimator;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } edgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } fullyOccludedEdgeInsets;
@property (nonatomic) struct VKEdgeInsets { float x0; float x1; float x2; float x3; } labelEdgeInsets;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) double yaw;
@property (readonly, nonatomic) double presentationYaw;
@property (readonly, nonatomic) double pitch;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) struct { double x0; double x1; double x2; } centerCoordinate;
@property (nonatomic, getter=isGesturing) BOOL gesturing;
@property (nonatomic) BOOL iconsShouldAlignToPixels;
@property (readonly, nonatomic, getter=isFullyDrawn) BOOL fullyDrawn;
@property (readonly, nonatomic, getter=getSceneState) unsigned long long sceneState;
@property (nonatomic) BOOL trackingCameraShouldHandleGestures;
@property (nonatomic) double trackingZoomScale;
@property (nonatomic) struct { BOOL x0; double x1; BOOL x2; BOOL x3; } annotationTrackingBehavior;
@property (nonatomic) long long annotationTrackingHeadingAnimationDisplayRate;
@property (readonly, nonatomic, getter=isAnimatingToTrackAnnotation) BOOL animatingToTrackAnnotation;
@property (readonly, nonatomic) BOOL canShowFlyoverAnimation;
@property (readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
@property (readonly, nonatomic) NSArray *labelMarkers;
@property (retain, nonatomic) VKPolylineOverlay *focusedLabelsPolyline;
@property (nonatomic) BOOL rendersInBackground;
@property (nonatomic) BOOL debugLayoutContinuously;
@property (readonly, nonatomic) BOOL enableDebugLabelHighlighting;
@property (readonly, nonatomic) NSArray *visibleTileSets;
@property (nonatomic) unsigned char applicationState;
@property (nonatomic) unsigned char displayedSearchResultsType;
@property (readonly, nonatomic) VKSceneConfiguration *sceneConfiguration;

- (BOOL)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })a0;
- (void)setNeedsLayout;
- (BOOL)restoreViewportFromInfo:(id)a0;
- (void)addOverlay:(id)a0;
- (void)puckAnimator:(id)a0 updatedPosition:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a1 course:(const struct Unit<RadianUnitDescription, double> { double x0; } *)a2;
- (void)didEnterBackground;
- (id)consoleString:(BOOL)a0;
- (id)detailedDescription;
- (void)didPresent;
- (BOOL)wantsTimerTick;
- (void)removeOverlay:(id)a0;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)setMapType:(int)a0 animated:(BOOL)a1;
- (id)viewportInfo;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2 duration:(double)a3 timingCurve:(id /* block */)a4 completion:(id /* block */)a5;
- (BOOL)supportsMapType:(int)a0;
- (void)setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })a0 animated:(BOOL)a1;
- (void)runAnimation:(id)a0;
- (void)stopTrackingAnnotation;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setRegionRestriction:(id)a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void).cxx_destruct;
- (void)setContentsScale:(double)a0;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0 selectableLabelsOnly:(BOOL)a1;
- (BOOL)stylesheetIsDevResource;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)stopFlyoverAnimation;
- (void)setRouteLineSplitAnnotation:(id)a0;
- (void)setCanonicalSkyHeight:(double)a0;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_forceLayoutForSuspensionSnapShot;
- (void)arController:(id)a0 didChangeTrackingState:(unsigned long long)a1 reason:(unsigned long long)a2;
- (void)arController:(id)a0 didEncounterError:(id)a1;
- (void)arController:(id)a0 arSessionWasInterrupted:(unsigned long long)a1;
- (void)arControllerSessionInterruptionEnded:(id)a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (id)iconForStyleAttributes:(id)a0 contentScale:(double)a1 size:(long long)a2 transparent:(BOOL)a3;
- (void)dealloc;
- (void)enter3DMode;
- (BOOL)cancelPendingMove;
- (void)puckAnimator:(id)a0 updatedTargetPosition:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a1;
- (short)displayedFloorOrdinalForVenueBuilding:(id)a0;
- (void)setDisableLabels:(BOOL)a0;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)exitARMode;
- (double)maximumZoomLevelForTileSize:(long long)a0;
- (void)setMapRegion:(id)a0 pitch:(double)a1 yaw:(double)a2 duration:(double)a3 completion:(id /* block */)a4;
- (BOOL)canZoomOutForTileSize:(long long)a0;
- (void)panWithOffset:(struct CGPoint { double x0; double x1; })a0 relativeToScreenPoint:(struct CGPoint { double x0; double x1; })a1 animated:(BOOL)a2 duration:(double)a3 completionHandler:(id /* block */)a4;
- (void)navigationCameraReturnToPuck;
- (void)enterARModeAtCoordinate:(struct { double x0; double x1; })a0;
- (BOOL)canEnter3DModeFlyoverForTileSize:(long long)a0;
- (BOOL)supportsNightMode;
- (void)addRouteOverlay:(id)a0;
- (void)setDisableRoads:(BOOL)a0;
- (void)removeRouteOverlay:(id)a0;
- (void)addPersistentRouteOverlay:(id)a0;
- (void)removePersistentRouteOverlay:(id)a0;
- (void)setHidden:(BOOL)a0;
- (void)stopSnappingAnimations;
- (void)prepareFlyoverAnimation:(id)a0 completion:(id /* block */)a1;
- (double)currentZoomLevelForTileSize:(long long)a0;
- (id)roadLabelTilesInScene;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })mapRegionBounds;
- (id)venueWithID:(unsigned long long)a0;
- (void)_updateBackgroundColor;
- (void)selectLabelMarker:(id)a0 completion:(id /* block */)a1;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0 duration:(double)a1 timingFunction:(id)a2 completionHandler:(id /* block */)a3;
- (id)detailedDescriptionDictionaryRepresentation;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (id)venueWithFocus;
- (id)venueBuildingWithFocus;
- (BOOL)isDimmingBaseMap;
- (void)setDimmingBaseMap:(BOOL)a0;
- (float)zoomToRevealVenueFloorplan:(id)a0;
- (float)zoomToRevealVenueBuildingFloorplan:(id)a0;
- (void)setDisplayedFloorOrdinal:(short)a0 forVenueBuilding:(id)a1;
- (id)clearVenueBuildingFloorSelections;
- (BOOL)displayedFloorIsDefaultForVenueBuilding:(id)a0;
- (short)defaultFloorOrdinalForVenueBuilding:(id)a0;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)a0;
- (void)deselectVenuePoiFeatureId;
- (void)startFlyoverAnimation:(id)a0 animateToStart:(BOOL)a1 completion:(id /* block */)a2;
- (void)moveToFlyoverTourStartPosition:(id)a0 duration:(double)a1 completion:(id /* block */)a2;
- (void)startFlyoverTourAnimation:(unsigned long long)a0 animateToStart:(BOOL)a1 completion:(id /* block */)a2;
- (void)setFlyoverMode:(int)a0;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)addExternalAnchor:(id)a0;
- (void)removeExternalAnchor:(id)a0;
- (void)setARInterfaceOrientation:(long long)a0;
- (void)willEnterForeground;
- (void)forceLayout;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)zoomToLevel:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)onscreenImageResources;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)transitLineMarkersInCurrentViewport;
- (void)selectTransitLineMarker:(id)a0;
- (void)deselectTransitLineMarker;
- (id)selectedTransitLineIDs;
- (id /* block */)annotationRectTest;
- (void)populateDebugNode:(struct DebugTreeNode { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; struct vector<gdc::DebugTreeNode, std::__1::allocator<gdc::DebugTreeNode> > { struct DebugTreeNode *x0; struct DebugTreeNode *x1; struct __compressed_pair<gdc::DebugTreeNode *, std::__1::allocator<gdc::DebugTreeNode> > { struct DebugTreeNode *x0; } x2; } x2; struct vector<gdc::DebugTreeProperty, std::__1::allocator<gdc::DebugTreeProperty> > { struct DebugTreeProperty *x0; struct DebugTreeProperty *x1; struct __compressed_pair<gdc::DebugTreeProperty *, std::__1::allocator<gdc::DebugTreeProperty> > { struct DebugTreeProperty *x0; } x2; } x3; } *)a0 withOptions:(const struct bitset<4> { unsigned long long x0; } *)a1;
- (void)insertOverlay:(id)a0 aboveOverlay:(id)a1;
- (void)setYaw:(double)a0 animated:(BOOL)a1;
- (void)setCameraHorizontalOffset:(double)a0 duration:(double)a1 timingFunction:(id)a2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)didReceiveMemoryWarning;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id).cxx_construct;
- (void)setDisableTransitLines:(BOOL)a0;
- (void)startTrackingAnnotation:(id)a0 trackHeading:(BOOL)a1 animated:(BOOL)a2 duration:(double)a3 timingFunction:(id /* block */)a4;
- (id)muninMarkerAtCoordinate:(struct { double x0; double x1; })a0;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)goToTileX:(int)a0 Y:(int)a1 Z:(int)a2 tileSize:(int)a3;
- (void)renderInContext:(struct CGContext { } *)a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)forceFrame;
- (id /* block */)annotationCoordinateTest;
- (void)setCenterCoordinateDistanceRange:(struct { double x0; double x1; })a0 duration:(double)a1 timingFunction:(id /* block */)a2;
- (void)pauseFlyoverTourAnimation;
- (void)exit3DMode;
- (id)initShouldRasterize:(BOOL)a0 inBackground:(BOOL)a1 contentScale:(double)a2 auditToken:(id)a3;
- (void)forceCameraUpdateForFrameResize;
- (double)topDownMinimumZoomLevelForTileSize:(long long)a0;
- (void)enableViewDataLoading:(BOOL)a0;
- (id)currentMarker;
- (void)setCenterCoordinate:(struct { double x0; double x1; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 timingCurve:(id /* block */)a5 completion:(id /* block */)a6;
- (double)minimumZoomLevelForTileSize:(long long)a0;
- (void)openLoaderConnection;
- (void)closeLoaderConnection;
- (void)flushTileLoads;
- (void)didFinishSnapshotting;
- (double)durationToAnimateToMapRegion:(id)a0;
- (void)enterMuninForStorefrontView:(id)a0 secondaryStorefrontView:(id)a1;
- (void)enterMuninForMarker:(id)a0 withHeading:(double)a1;
- (BOOL)moveToMarker:(id)a0 withHeading:(double)a1 animated:(BOOL)a2 completionHandler:(id /* block */)a3;
- (BOOL)moveToStorefrontView:(id)a0 animated:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)setRouteContext:(id)a0;
- (BOOL)canZoomInForTileSize:(long long)a0;
- (struct CGPoint { double x0; double x1; })convertMapPoint:(struct { double x0; double x1; })a0 toPointToLayer:(id)a1;
- (struct { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toMapPointFromLayer:(id)a1;
- (void)resumeFlyoverTourAnimation;
- (void)deselectLabelMarker;
- (struct { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toCoordinateFromLayer:(id)a1;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct { double x0; double x1; })a0 toPointToLayer:(id)a1;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct { double x0; double x1; })a0 toCameraModelPointToLayer:(id)a1;
- (void)clearScene;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 fromLayer:(id)a2 withPrecision:(long long)a3;
- (id)labelMarkerForCustomFeatureAnnotation:(id)a0;
- (void)addCustomFeatureDataSource:(id)a0;
- (void)removeCustomFeatureDataSource:(id)a0;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)map:(id)a0 didEnterARMode:(BOOL)a1;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (id)muninMarkerAtCoordinate:(struct { double x0; double x1; })a0 completeMarkerHandler:(id /* block */)a1;
- (id)attributionsForCurrentRegion;
- (void)insertOverlay:(id)a0 belowOverlay:(id)a1;
- (void)willStopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 withVelocity:(struct CGPoint { double x0; double x1; })a1;
- (double)zoomLevelAdjustmentForTileSize:(long long)a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)reloadStylesheet;
- (void)selectLabelMarker:(id)a0;
- (BOOL)canRotate;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a0;
- (void)setSelectedFeatureId:(unsigned long long)a0;
- (void)deselectFeatureId;
- (id)currentCanvas;
- (id)buildingMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)featureMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long> > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true> > { float x0; } x3; } x0; })clientStyleAttributes;
- (void)_updateMapDisplayStyle;
- (void)setApplicationState:(unsigned char)a0 displayedSearchResultsType:(unsigned char)a1;
- (struct LabelSettings { struct LabelSettings_Presentation { struct LabelSettings *x0; } x0; struct LabelSettings_Navigation { struct LabelSettings *x0; } x1; struct LabelSettings_Markers { struct LabelSettings *x0; } x2; struct shared_ptr<md::LabelManager> { struct LabelManager *x0; struct __shared_weak_count *x1; } x3; struct unique_ptr<md::LabelSettingsData, std::__1::default_delete<md::LabelSettingsData> > { struct __compressed_pair<md::LabelSettingsData *, std::__1::default_delete<md::LabelSettingsData> > { struct LabelSettingsData *x0; } x0; } x4; } *)_labelSettings;
- (void)_closeLoaderConnection:(BOOL)a0;
- (BOOL)_createDisplayLayer;
- (BOOL)isEffectivelyHidden;
- (void)setDimmingBaseMap:(BOOL)a0 animated:(BOOL)a1 duration:(double)a2;
- (id)venueAtLocation:(struct { double x0; double x1; })a0 withMarginForError:(BOOL)a1 includeNonRevealedVenues:(BOOL)a2;
- (void)setLoadMuninMetadata:(BOOL)a0;
- (void)_postDelegateCallbackBlock:(id /* block */)a0;
- (void)_createGlobe;
- (void)performStylesheetDidChange;
- (void)map:(id)a0 didUpdateVerticalYawTo:(double)a1;
- (id)navigationPuck;
- (void)setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })a0 animated:(BOOL)a1 duration:(double)a2;
- (void)activateInternalSettings;
- (void)_notifyDelegateFlyoverTourLabelChanged:(id)a0;
- (void)_runFlyoverTourStateChange:(int)a0 completion:(id /* block */)a1;
- (void)setNavContext:(id)a0;
- (id)labelMarkerForCustomFeatureAnnotation:(id)a0 dataSource:(id)a1;
- (id)_mapDelegateQueue;
- (void)puckAnimatorDidStop:(id)a0;
- (id)secondaryCanvas;
- (void)didReceiveFlushTileCaches;
- (void)didReceiveLocalChanged;
- (id)debugLabelString:(BOOL)a0;
- (BOOL)isLoadingMuninMetadata;
- (float)worldSpaceWidthOfView;
- (id)venueAtLocation:(struct { double x0; double x1; })a0;
- (void)_setFloorSwitcherZoomPadding:(float)a0;
- (id)venueAtLocation:(struct { double x0; double x1; })a0 withMarginForError:(BOOL)a1;
- (void)nearestVenueDidChange:(const struct Venue { unsigned long long x0; unsigned long long x1; struct vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding> > { struct VenueBuilding *x0; struct VenueBuilding *x1; struct __compressed_pair<md::VenueBuilding *, std::__1::allocator<md::VenueBuilding> > { struct VenueBuilding *x0; } x2; } x2; struct Polygon2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x3; struct ConvexHull2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x4; struct Mercator2<double> { double x0[2]; } x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x7; struct optional<std::__1::basic_string<char> > { BOOL x0; union ValueUnion { unsigned char x0[24]; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; } x1; } x8; struct optional<std::__1::basic_string<char> > { BOOL x0; union ValueUnion { unsigned char x0[24]; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; } x1; } x9; } *)a0 building:(const struct VenueBuilding { struct vector<md::VenueLevel, std::__1::allocator<md::VenueLevel> > { struct VenueLevel *x0; struct VenueLevel *x1; struct __compressed_pair<md::VenueLevel *, std::__1::allocator<md::VenueLevel> > { struct VenueLevel *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; short x5; struct Matrix<double, 2, 1> { double x0[2]; } x6; struct ConvexHull2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x7; } *)a1;
- (void)venueCreated:(const struct Venue { unsigned long long x0; unsigned long long x1; struct vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding> > { struct VenueBuilding *x0; struct VenueBuilding *x1; struct __compressed_pair<md::VenueBuilding *, std::__1::allocator<md::VenueBuilding> > { struct VenueBuilding *x0; } x2; } x2; struct Polygon2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x3; struct ConvexHull2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x4; struct Mercator2<double> { double x0[2]; } x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x7; struct optional<std::__1::basic_string<char> > { BOOL x0; union ValueUnion { unsigned char x0[24]; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; } x1; } x8; struct optional<std::__1::basic_string<char> > { BOOL x0; union ValueUnion { unsigned char x0[24]; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; } x1; } x9; } *)a0 building:(const struct VenueBuilding { struct vector<md::VenueLevel, std::__1::allocator<md::VenueLevel> > { struct VenueLevel *x0; struct VenueLevel *x1; struct __compressed_pair<md::VenueLevel *, std::__1::allocator<md::VenueLevel> > { struct VenueLevel *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; short x5; struct Matrix<double, 2, 1> { double x0[2]; } x6; struct ConvexHull2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x7; } *)a1;
- (void)setClientLocalizedStrings:(id)a0;
- (void)setDesiredMapMode:(long long)a0;
- (void)setCameraFramingInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (id)testStatistics;
- (void)enableTestStatistics;
- (void)disableTestStatistics;
- (void)resetTestStatistics;
- (id)tileStatistics;
- (void)stopTracking;
- (void)pauseTracking;
- (void)setLabelExclusionRegions:(id)a0;
- (void)transitionToTracking:(BOOL)a0 mapMode:(long long)a1 startLocation:(struct { double x0; double x1; })a2 startCourse:(double)a3 pounceCompletionHandler:(id /* block */)a4;
- (void)setExternalTrafficFeatures:(id)a0 areRouteTrafficFeaturesActive:(BOOL)a1;
- (BOOL)transitLinesDisabled;
- (void)didStartLoadingData;
- (void)muninJunctionDidChange:(const struct MuninJunction { void /* function */ **x0; struct *x1; struct Mercator2<double> { double x0[2]; } x2; struct Matrix<float, 2, 1> { float x0[2]; } x3; struct vector<const md::MuninRoadEdge *, std::__1::allocator<const md::MuninRoadEdge *> > { struct MuninRoadEdge **x0; struct MuninRoadEdge **x1; struct __compressed_pair<const md::MuninRoadEdge **, std::__1::allocator<const md::MuninRoadEdge *> > { struct MuninRoadEdge **x0; } x2; } x4; int x5; unsigned char x6; unsigned char x7; } *)a0 currentRoad:(const struct MuninRoadEdge { struct *x0; float x1; struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >::__rep, geo::StdAllocator<char, mdm::Allocator> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; struct StdAllocator<char, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x2; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x3; unsigned long long x4; unsigned long long x5; struct MuninJunction *x6; struct MuninJunction *x7; BOOL x8; } *)a1 localize:(BOOL)a2;
- (void)didFinishLoadingData;
- (void)didFinishLoadingDataWithError:(id)a0;
- (void)mapDidReloadStylesheet:(id)a0;
- (void)willBecomeFullyDrawn;
- (void)didUpdateSceneStatus:(unsigned char)a0;
- (void)labelManagerDidLayout;
- (void)selectedLabelMarkerWillDisappear:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker *x0; struct __shared_weak_count *x1; } *)a0;
- (void)labelMarkerDidChangeState:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker *x0; struct __shared_weak_count *x1; } *)a0;
- (void)map:(id)a0 canShowFlyoverDidChange:(BOOL)a1;
- (void)mapDidFinishChangingMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })a0;
- (void)mapLabelsDidLayout:(id)a0;
- (void)map:(id)a0 selectedLabelMarkerWillDisappear:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker *x0; struct __shared_weak_count *x1; } *)a1;
- (void)map:(id)a0 labelMarkerDidChangeState:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker *x0; struct __shared_weak_count *x1; } *)a1;
- (void)mapController:(id)a0 requestsDisplayRate:(long long)a1;
- (void)willLayoutWithTimestamp:(double)a0 withContext:(struct LayoutContext { id x0; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x1; unsigned char x2; struct VKEdgeInsets { float x0; float x1; float x2; float x3; } x3; struct VKEdgeInsets { float x0; float x1; float x2; float x3; } x4; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh *x0; struct __shared_weak_count *x1; } x5; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh *x0; struct __shared_weak_count *x1; } x6; struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> { struct Pos2UVMesh *x0; struct __shared_weak_count *x1; } x7; struct StencilManager { unsigned char x0; unsigned char x1; unsigned char x2; struct ClearItem { unsigned char x0; struct Matrix<float, 4, 1> { float x0[4]; } x1; BOOL x2; float x3; unsigned char x4; unsigned int x5; } x3; } x8; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x9; struct Loader { struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > { struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > { struct LoaderImpl *x0; } x0; } x0; } x10; struct Loader *x11; double x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x17; float x18; struct View *x19; struct View *x20; struct Viewport *x21; struct ARContext *x22; unsigned long long x23; unsigned long long x24; struct unordered_map<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > > > > { struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::hash<unsigned long long>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::equal_to<unsigned long long>, true> > { float x0; } x3; } x0; } x25; } *)a1;
- (void)setDisablePolygons:(BOOL)a0;
- (void)setDisableGrid:(BOOL)a0;
- (void)setCurrentLocationText:(id)a0;
- (void)setDisableBuildingFootprints:(BOOL)a0;
- (void)setDisableRasters:(BOOL)a0;
- (BOOL)roadsDisabled;
- (BOOL)labelsDisabled;
- (BOOL)polygonsDisabled;
- (BOOL)buildingFootprintsDisabled;
- (BOOL)rastersDisabled;
- (BOOL)gridDisabled;
- (void)puckAnimator:(id)a0 runAnimation:(id)a1;
- (id)pptTileStatisticsForMapType:(int)a0 latitude:(double)a1 longitude:(double)a2 zoom:(float)a3 width:(double)a4 height:(double)a5 rect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a6;
- (float)currentZoomLevel;
- (void)debugHighlightFeatureMarker:(const struct shared_ptr<md::FeatureMarker> { } *)a0;
- (long long)currentMapMode;

@end

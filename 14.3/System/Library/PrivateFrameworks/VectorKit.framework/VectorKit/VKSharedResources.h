@class VKInternalIconManager, VKResourceManager, NSString;

@interface VKSharedResources : NSObject <GEOResourceManifestTileGroupObserver> {
    struct _retain_ptr<VKInternalIconManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKInternalIconManager *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _iconManager;
    struct shared_ptr<md::TextureManager> { struct TextureManager *__ptr_; struct __shared_weak_count *__cntrl_; } _textureManager;
    struct _retain_ptr<VKResourceManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKResourceManager *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _resourceManager;
    struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager *__ptr_; struct __shared_weak_count *__cntrl_; } _dataOverrideManager;
    struct shared_ptr<md::StandardCommandBufferSelector> { struct StandardCommandBufferSelector *__ptr_; struct __shared_weak_count *__cntrl_; } _standardCommandBufferSelector;
    struct shared_ptr<md::RealisticCommandBufferSelector> { struct RealisticCommandBufferSelector *__ptr_; struct __shared_weak_count *__cntrl_; } _realisticCommandBufferSelector;
    struct unique_ptr<md::Device, std::__1::default_delete<md::Device> > { struct __compressed_pair<md::Device *, std::__1::default_delete<md::Device> > { struct Device *__value_; } __ptr_; } _device;
    struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> > { struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> > { struct AlphaAtlas *__value_; } __ptr_; } _alphaAtlas;
    struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> > { struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > { struct IsoAlphaAtlas *__value_; } __ptr_; } _highInflationAlphaAtlas;
    struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> > { struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > { struct IsoAlphaAtlas *__value_; } __ptr_; } _isoAlphaAtlas;
    struct unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas> > { struct __compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas> > { struct DistanceAtlas *__value_; } __ptr_; } _distanceAtlas;
    struct shared_ptr<ggl::StandardLibrary> { struct StandardLibrary *__ptr_; struct __shared_weak_count *__cntrl_; } _shaderLibrary;
    struct FigPhotoDecompressionSession { } *_defaultDecompressionSession;
    struct read_write_lock { struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } _lock; } _figCreationLock;
    struct shared_ptr<md::GeoResourceProvider> { struct GeoResourceProvider *__ptr_; struct __shared_weak_count *__cntrl_; } _resourceProvider;
    struct shared_ptr<grl::IconManager> { struct IconManager *__ptr_; struct __shared_weak_count *__cntrl_; } _grlIconManager;
    struct shared_ptr<grl::FontManager> { struct FontManager *__ptr_; struct __shared_weak_count *__cntrl_; } _grlFontManager;
    unsigned int _referenceCount;
}

@property (readonly, nonatomic) VKInternalIconManager *iconManager;
@property (readonly, nonatomic) struct shared_ptr<md::TextureManager> { struct TextureManager *x0; struct __shared_weak_count *x1; } textureManager;
@property (readonly, nonatomic) VKResourceManager *resourceManager;
@property (readonly, nonatomic) struct shared_ptr<md::StylesheetVendor> { struct StylesheetVendor *__ptr_; struct __shared_weak_count *__cntrl_; } stylesheetVendor;
@property (readonly, nonatomic) struct Device { int x0; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x1; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources *x0; } x0; } x2; } *device;
@property (readonly, nonatomic) struct Device { void /* function */ **x0; struct DeviceVersion { unsigned int x0; unsigned int x1; } x1; struct DeviceCapabilities { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; unsigned int x5; unsigned int x6; unsigned int x7; struct DeviceSize { unsigned int x0; unsigned int x1; unsigned int x2; } x8; } x2; struct DeviceAPIProperties { int x0; int x1; double x2; BOOL x3; } x3; int x4; int x5; } *gglDevice;
@property (readonly, nonatomic) struct shared_ptr<md::StandardCommandBufferSelector> { struct StandardCommandBufferSelector *x0; struct __shared_weak_count *x1; } standardCommandBufferSelector;
@property (readonly, nonatomic) struct shared_ptr<md::RealisticCommandBufferSelector> { struct RealisticCommandBufferSelector *x0; struct __shared_weak_count *x1; } realisticCommandBufferSelector;
@property (readonly, nonatomic) struct AlphaAtlas { BOOL x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D *x0; } x0; } x5; } *alphaAtlas;
@property (readonly, nonatomic) struct IsoAlphaAtlas { unsigned int x0; unsigned int x1; float x2; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D *x0; } x0; } x3; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x4; } *highInflationAlphaAtlas;
@property (readonly, nonatomic) struct IsoAlphaAtlas { unsigned int x0; unsigned int x1; float x2; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D *x0; } x0; } x3; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x4; } *isoAlphaAtlas;
@property (readonly, nonatomic) struct DistanceAtlas { unsigned int x0; unsigned int x1; unsigned int x2; struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { struct Texture2D *x0; } x0; } x3; } *distanceAtlas;
@property (readonly, nonatomic) const struct StandardLibrary { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; struct ShaderLibraryDescriptor *x3; struct vector<ggl::ShaderLibrary::FunctionEntry, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> > { struct FunctionEntry *x0; struct FunctionEntry *x1; struct __compressed_pair<ggl::ShaderLibrary::FunctionEntry *, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> > { struct FunctionEntry *x0; struct StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::ShaderLibrary::ShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> > { struct ShaderEntry *x0; struct ShaderEntry *x1; struct __compressed_pair<ggl::ShaderLibrary::ShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> > { struct ShaderEntry *x0; struct StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::ShaderLibrary::ComputeShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> > { struct ComputeShaderEntry *x0; struct ComputeShaderEntry *x1; struct __compressed_pair<ggl::ShaderLibrary::ComputeShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> > { struct ComputeShaderEntry *x0; struct StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; struct vector<std::__1::shared_ptr<ggl::Shader>, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> > { struct shared_ptr<ggl::Shader> *x0; struct shared_ptr<ggl::Shader> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::Shader> *, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> > { struct shared_ptr<ggl::Shader> *x0; struct StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x7; struct shared_ptr<ggl::ShaderLibraryData> { struct ShaderLibraryData *x0; struct __shared_weak_count *x1; } x8; } *shaderLibrary;
@property (readonly, nonatomic) struct IconManager { void /* function */ **x0; struct shared_ptr<grl::ResourceProvider> { struct ResourceProvider *x0; struct __shared_weak_count *x1; } x1; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x2; BOOL x3; struct PackInfo *x4; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x5; struct map<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float> >, geo::StdAllocator<std::__1::pair<const std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator> > { struct __tree<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float> >, true>, geo::StdAllocator<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, grl::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, void *>, grl::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::__value_type<std::__1::pair<std::__1::basic_string<char>, float>, geo::read_write_lock>, std::__1::less<std::__1::pair<std::__1::basic_string<char>, float> >, true> > { unsigned long long x0; } x2; } x0; } x6; struct shared_ptr<grl::FontManager> { struct FontManager *x0; struct __shared_weak_count *x1; } x7; } *grlIconManager;
@property (readonly, nonatomic) struct shared_ptr<grl::FontManager> { struct FontManager *x0; struct __shared_weak_count *x1; } grlFontManager;
@property (readonly, nonatomic) struct FigPhotoDecompressionSession { } *defaultDecompressionSession;
@property (nonatomic) BOOL snapshotterIsInService;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)a0;
- (void)purge;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (void)_removeResourceUser;
- (void)purgeDecompressSessionCachedBuffers;
- (const struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager *x0; struct __shared_weak_count *x1; } *)dataOverrideManager;
- (BOOL)_hasResourceUsers;
- (id).cxx_construct;
- (void)startDecompressionSession;
- (void)_addResourceUser;
- (id)_initWithDevice:(struct Device { int x0; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x1; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources *x0; } x0; } x2; } *)a0 standardLibrary:(const struct shared_ptr<ggl::StandardLibrary> { struct StandardLibrary *x0; struct __shared_weak_count *x1; } *)a1;

@end

@class NSOrderedSet, NSMutableOrderedSet;

@interface VKPolygonalItemGroup : NSObject {
    struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_; struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::PolygonBase::CompressedVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _fillMeshInfo;
    struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_; struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_; } __end_cap_; } _fillMeshes;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _fillCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _strokeCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _venueCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _venueEndCapCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _venueWallHorizontalStrokeCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _venueWallVerticalStrokeCullingGroups;
    struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > { float __value_; } __p3_; } __table_; } _polygonEdges;
    struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float __value_; } __p3_; } __table_; } _featureIds;
    struct Box<float, 3> { struct Matrix<float, 3, 1> { float _e[3]; } _minimum; struct Matrix<float, 3, 1> { float _e[3]; } _maximum; } _boundingBox;
    float _tileZoom;
    float _contentScale;
    struct vector<ggl::Batcher, std::__1::allocator<ggl::Batcher> > { struct Batcher *__begin_; struct Batcher *__end_; struct __compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher> > { struct Batcher *__value_; } __end_cap_; } _fillRenderItemBatchers;
    struct vector<ggl::Batcher, std::__1::allocator<ggl::Batcher> > { struct Batcher *__begin_; struct Batcher *__end_; struct __compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher> > { struct Batcher *__value_; } __end_cap_; } _strokeRenderItemBatchers;
    NSMutableOrderedSet *_attributeSets;
    struct unordered_map<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >, (anonymous namespace)::StyleQueryOverrideHash, std::__1::equal_to<StyleQueryOverride>, std::__1::allocator<std::__1::pair<const StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > > > > { struct __hash_table<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, std::__1::__unordered_map_hasher<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, (anonymous namespace)::StyleQueryOverrideHash, true>, std::__1::__unordered_map_equal<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, std::__1::equal_to<StyleQueryOverride>, true>, std::__1::allocator<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, (anonymous namespace)::StyleQueryOverrideHash, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<StyleQueryOverride, std::__1::__hash_value_type<StyleQueryOverride, std::__1::vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > >, std::__1::equal_to<StyleQueryOverride>, true> > { float __value_; } __p3_; } __table_; } _styleQueries;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *__ptr_; struct __shared_weak_count *__cntrl_; } _styleManager;
    struct PolygonRouteAttributes { unsigned int routeSignificance; unsigned char routeProximity; BOOL hasRouteSignificance; } _routeAttributes;
    BOOL _stylesUpToDate;
    BOOL _hasRouteAttributes;
}

@property (readonly, nonatomic) BOOL isFixedSize;
@property (readonly, nonatomic) struct Matrix<float, 2, 1> { float _e[2]; } centroid;
@property (readonly, nonatomic) float tileZoom;
@property (readonly, nonatomic) const struct Matrix<float, 3, 1> { float x0[3]; } *origin;
@property (readonly, nonatomic) const struct Matrix<float, 3, 1> { float x0[3]; } *maxPoint;
@property (readonly, nonatomic) struct Matrix<float, 3, 1> { float x0[3]; } size;
@property (readonly, nonatomic) unsigned int cullingMask;
@property (readonly, nonatomic) struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *x0; struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *x0; } x2; } *fillMeshes;
@property (readonly, nonatomic) NSOrderedSet *attributeSets;
@property (readonly, nonatomic) const struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } *featureIds;

- (unsigned char)indexForGeoFeatureAttributes:(id)a0;
- (struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *x0; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *x1; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *x0; } x2; } *)styleQueries:(const struct StyleQueryOverride { unsigned char x0; unsigned char x1; } *)a0;
- (id)initWithStyleQuery:(struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } *)a0 tileZoom:(float)a1 fixedAroundCentroid:(const struct Matrix<float, 2, 1> { float x0[2]; } *)a2 contentScale:(float)a3;
- (BOOL)hasFeatureId:(unsigned long long)a0;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToVenueWallEndCapRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (void)setRouteAttributes:(const struct PolygonRouteAttributes { unsigned int x0; unsigned char x1; BOOL x2; } *)a0;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToVenueWallRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToStrokeRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;
- (unsigned char)maxAttributeSetsPerGroup;
- (void).cxx_destruct;
- (BOOL)canAcceptPolygon:(struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } *)a0;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToFillRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;
- (void)clearRouteAttributes;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToVerticalVenueWallStrokeRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToHorizontalVenueWallStrokeRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { void /* function */ **x0; } *)a0;
- (void)dealloc;
- (void)updateCachedStyles;
- (void)didFinishAddingData;
- (id).cxx_construct;

@end

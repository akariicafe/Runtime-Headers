@interface VKGlobeGestureCameraController : VKGestureCameraBehavior {
    struct GlobeView { void /* function */ **x0; struct GeoServicesLoader *x1; struct ManifestManager *x2; struct TriggerManager *x3; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager *x0; struct __shared_weak_count *x1; } x4; struct DtmCacheNode *x5; struct DtmRequestManager *x6; struct FreezeViewNode *x7; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x8; BOOL x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x11; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; struct SimpleTileKey *x1; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; } x2; } x12; BOOL x13; unsigned int x14; unsigned int x15; id x16; BOOL x17; BOOL x18; struct AnimationManager { struct AnimationReferenceTimer { double x0; double x1; double x2; } x0; struct unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> > { struct __compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> > { struct AnimationTimer *x0; } x0; } x1; double x2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; struct AnimationObjectHolder *x1; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; } x2; } x3; } x19; struct Stopwatch { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; } x20; double x21; BOOL x22; struct Unit<RadianUnitDescription, double> { double x0; } x23; double x24; struct Unit<RadianUnitDescription, double> { double x0; } x25; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } x26; struct C3mmRequestManager *x27; struct RenderableGroup *x28; unsigned int x29; double x30; struct { double x0; double x1; } x31; BOOL x32; BOOL x33; struct LabelDataManagerPrivate *x34; BOOL x35; BOOL x36; BOOL x37; BOOL x38; struct RouteLineManager *x39; struct GlobeCleanupLoader *x40; struct CompleteGlobeTileSetCullingGraph *x41; struct CompleteGlobeTileSetLoader *x42; struct TileSetNode *x43; struct GlobeTileRenderManager *x44; struct CullingNode *x45; struct EarthAdjustedViewNode *x46; struct UserViewNode *x47; struct View *x48; struct BasicViewNode *x49; struct GlobeMainViewNode *x50; struct C3bRequestManager *x51; BOOL x52; struct shared_ptr<bool> { BOOL *x0; struct __shared_weak_count *x1; } x53; struct HeightRequestManager *x54; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x0; } x2; } x0; } x55; struct Mutex { void *x0; } x56; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x57; struct FlyoverTour *x58; BOOL x59; struct Viewport { int x0; int x1; int x2; int x3; } x60; BOOL x61; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x0; } x2; } x0; } x62; struct unique_ptr<ReachabilityChangedObserver, std::__1::default_delete<ReachabilityChangedObserver> > { struct __compressed_pair<ReachabilityChangedObserver *, std::__1::default_delete<ReachabilityChangedObserver> > { struct ReachabilityChangedObserver *x0; } x0; } x63; struct TileManager *x64; struct ObjectTreeLoader *x65; struct QuickSurfaceManager *x66; struct IntersectorHeight *x67; struct shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> > { struct SharedItemManager<altitude::Map, altitude::MapRequestId> *x0; struct __shared_weak_count *x1; } x68; struct BundleLoader *x69; struct ProtocolLoader *x70; struct GeoResourceManager *x71; struct GeoResourceLoader *x72; struct ViewNode *x73; struct ViewportNode *x74; struct View *x75; struct Viewport *x76; struct shared_ptr<ggl::RenderState> { struct RenderState *x0; struct __shared_weak_count *x1; } x77; unsigned int x78; struct Statistics *x79; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x80; struct TexturePager *x81; struct IOSurfacePool *x82; struct RealisticRenderer *x83; struct DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<ggl::Texture2D *> { struct __cxx_atomic_impl<ggl::Texture2D *, std::__1::__cxx_atomic_base_impl<ggl::Texture2D *> > { _Atomic struct Texture2D *x0; } x0; } x1; struct function<ggl::Texture2D *()> { struct __value_func<ggl::Texture2D *()> { struct type { unsigned char x0[24]; } x0; struct __base<ggl::Texture2D *()> *x1; } x0; } x2; } x84; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x85; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x86; } *_globeView;
    struct CameraManager { void /* function */ **x0; BOOL x1; BOOL x2; BOOL x3; struct Matrix<int, 2, 1> { int x0[2]; } x4; struct Matrix<int, 2, 1> { int x0[2]; } x5; struct Matrix<int, 2, 1> { int x0[2]; } x6; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x7; double x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x13; struct Matrix<int, 2, 1> { int x0[2]; } x14; double x15; BOOL x16; BOOL x17; BOOL x18; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x19; struct Matrix<int, 2, 1> { int x0[2]; } x20; struct Matrix<int, 2, 1> { int x0[2]; } x21; double x22; BOOL x23; BOOL x24; BOOL x25; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x26; struct Matrix<int, 2, 1> { int x0[2]; } x27; double x28; double x29; BOOL x30; BOOL x31; int x32; BOOL x33; BOOL x34; BOOL x35; double x36; double x37; double x38; struct Geocentric<double> { double x0[3]; } x39; struct Matrix<double, 3, 1> { double x0[3]; } x40; double x41; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x42; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x43; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x44; } *_cameraManager;
    double _beganDoublePanPitch;
    double _currentDoublePanPitch;
    BOOL _isPitchIncreasing;
}

- (void)setCameraManager:(struct CameraManager { void /* function */ **x0; BOOL x1; BOOL x2; BOOL x3; struct Matrix<int, 2, 1> { int x0[2]; } x4; struct Matrix<int, 2, 1> { int x0[2]; } x5; struct Matrix<int, 2, 1> { int x0[2]; } x6; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x7; double x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x13; struct Matrix<int, 2, 1> { int x0[2]; } x14; double x15; BOOL x16; BOOL x17; BOOL x18; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x19; struct Matrix<int, 2, 1> { int x0[2]; } x20; struct Matrix<int, 2, 1> { int x0[2]; } x21; double x22; BOOL x23; BOOL x24; BOOL x25; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x26; struct Matrix<int, 2, 1> { int x0[2]; } x27; double x28; double x29; BOOL x30; BOOL x31; int x32; BOOL x33; BOOL x34; BOOL x35; double x36; double x37; double x38; struct Geocentric<double> { double x0[3]; } x39; struct Matrix<double, 3, 1> { double x0[3]; } x40; double x41; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x42; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x43; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x44; } *)a0;
- (void)endPan:(struct CGPoint { double x0; double x1; })a0;
- (void)setGlobeView:(struct GlobeView { void /* function */ **x0; struct GeoServicesLoader *x1; struct ManifestManager *x2; struct TriggerManager *x3; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager *x0; struct __shared_weak_count *x1; } x4; struct DtmCacheNode *x5; struct DtmRequestManager *x6; struct FreezeViewNode *x7; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x8; BOOL x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x11; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; struct SimpleTileKey *x1; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; } x2; } x12; BOOL x13; unsigned int x14; unsigned int x15; id x16; BOOL x17; BOOL x18; struct AnimationManager { struct AnimationReferenceTimer { double x0; double x1; double x2; } x0; struct unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> > { struct __compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> > { struct AnimationTimer *x0; } x0; } x1; double x2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; struct AnimationObjectHolder *x1; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; } x2; } x3; } x19; struct Stopwatch { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; } x20; double x21; BOOL x22; struct Unit<RadianUnitDescription, double> { double x0; } x23; double x24; struct Unit<RadianUnitDescription, double> { double x0; } x25; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } x26; struct C3mmRequestManager *x27; struct RenderableGroup *x28; unsigned int x29; double x30; struct { double x0; double x1; } x31; BOOL x32; BOOL x33; struct LabelDataManagerPrivate *x34; BOOL x35; BOOL x36; BOOL x37; BOOL x38; struct RouteLineManager *x39; struct GlobeCleanupLoader *x40; struct CompleteGlobeTileSetCullingGraph *x41; struct CompleteGlobeTileSetLoader *x42; struct TileSetNode *x43; struct GlobeTileRenderManager *x44; struct CullingNode *x45; struct EarthAdjustedViewNode *x46; struct UserViewNode *x47; struct View *x48; struct BasicViewNode *x49; struct GlobeMainViewNode *x50; struct C3bRequestManager *x51; BOOL x52; struct shared_ptr<bool> { BOOL *x0; struct __shared_weak_count *x1; } x53; struct HeightRequestManager *x54; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x0; } x2; } x0; } x55; struct Mutex { void *x0; } x56; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x57; struct FlyoverTour *x58; BOOL x59; struct Viewport { int x0; int x1; int x2; int x3; } x60; BOOL x61; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x0; } x2; } x0; } x62; struct unique_ptr<ReachabilityChangedObserver, std::__1::default_delete<ReachabilityChangedObserver> > { struct __compressed_pair<ReachabilityChangedObserver *, std::__1::default_delete<ReachabilityChangedObserver> > { struct ReachabilityChangedObserver *x0; } x0; } x63; struct TileManager *x64; struct ObjectTreeLoader *x65; struct QuickSurfaceManager *x66; struct IntersectorHeight *x67; struct shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> > { struct SharedItemManager<altitude::Map, altitude::MapRequestId> *x0; struct __shared_weak_count *x1; } x68; struct BundleLoader *x69; struct ProtocolLoader *x70; struct GeoResourceManager *x71; struct GeoResourceLoader *x72; struct ViewNode *x73; struct ViewportNode *x74; struct View *x75; struct Viewport *x76; struct shared_ptr<ggl::RenderState> { struct RenderState *x0; struct __shared_weak_count *x1; } x77; unsigned int x78; struct Statistics *x79; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x80; struct TexturePager *x81; struct IOSurfacePool *x82; struct RealisticRenderer *x83; struct DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<ggl::Texture2D *> { struct __cxx_atomic_impl<ggl::Texture2D *, std::__1::__cxx_atomic_base_impl<ggl::Texture2D *> > { _Atomic struct Texture2D *x0; } x0; } x1; struct function<ggl::Texture2D *()> { struct __value_func<ggl::Texture2D *()> { struct type { unsigned char x0[24]; } x0; struct __base<ggl::Texture2D *()> *x1; } x0; } x2; } x84; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x85; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x86; } *)a0;
- (void)updatePitch:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (BOOL)isPitchIncreasing;
- (void)beginZoom:(struct CGPoint { double x0; double x1; })a0;
- (void)beginRotate:(struct CGPoint { double x0; double x1; })a0;
- (void)endRotate:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePitch:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)updatePan:(struct CGPoint { double x0; double x1; })a0 lastScreenPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)beginPitch:(struct CGPoint { double x0; double x1; })a0;
- (void)endZoom:(struct CGPoint { double x0; double x1; })a0;
- (void)updateZoom:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)updateRotate:(double)a0 atScreenPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)beginPan:(struct CGPoint { double x0; double x1; })a0;
- (void)endPitch:(struct CGPoint { double x0; double x1; })a0;

@end

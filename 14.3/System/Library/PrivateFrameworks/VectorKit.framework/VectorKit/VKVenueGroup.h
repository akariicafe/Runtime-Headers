@interface VKVenueGroup : VKPolygonGroup {
    struct optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > { struct shared_ptr<ggl::VenueWall::MeshMesh> *__begin_; struct shared_ptr<ggl::VenueWall::MeshMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > { struct shared_ptr<ggl::VenueWall::MeshMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::VenueWall::DefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _venueWallMeshInfo;
    struct optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > { struct shared_ptr<ggl::VenueWall::EndCapMesh> *__begin_; struct shared_ptr<ggl::VenueWall::EndCapMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > { struct shared_ptr<ggl::VenueWall::EndCapMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::VenueWall::EndCapVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _venueWallEndCapMeshInfo;
    struct optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__begin_; struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _venueWallHorizontalStrokeMeshInfo;
    struct optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__begin_; struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _venueWallVerticalStrokeMeshInfo;
    struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > { struct shared_ptr<ggl::VenueWall::MeshMesh> *__begin_; struct shared_ptr<ggl::VenueWall::MeshMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > { struct shared_ptr<ggl::VenueWall::MeshMesh> *__value_; } __end_cap_; } _venueWallMeshes;
    struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > { struct shared_ptr<ggl::VenueWall::EndCapMesh> *__begin_; struct shared_ptr<ggl::VenueWall::EndCapMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > { struct shared_ptr<ggl::VenueWall::EndCapMesh> *__value_; } __end_cap_; } _venueWallEndMeshes;
    struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__begin_; struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__value_; } __end_cap_; } _venueWallHorizontalStrokeMeshes;
    struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__begin_; struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__value_; } __end_cap_; } _venueWallVerticalStrokeMeshes;
    struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > { float __value_; } __p3_; } __table_; } _venueWalls;
    unsigned long long _buildingId;
    float _maximumSectionLength;
    struct shared_ptr<ggl::Texture2D> { struct Texture2D *__ptr_; struct __shared_weak_count *__cntrl_; } _wallTexture;
}

@property (readonly, nonatomic) int layer;
@property (readonly, nonatomic) unsigned long long buildingId;
@property (readonly, nonatomic) float maximumSectionLength;
@property (readonly, nonatomic) struct Texture2D { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; int x5; int x6; int x7; int x8; unsigned int x9; int x10; unsigned int x11; unsigned int x12; struct shared_ptr<const ggl::Texture2DAbstract> { struct Texture2DAbstract *x0; struct __shared_weak_count *x1; } x13; unsigned int x14; struct shared_ptr<const ggl::TextureDataAbstract> { struct TextureDataAbstract *x0; struct __shared_weak_count *x1; } x15; BOOL x16; BOOL x17; BOOL x18; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x19; } *wallTexture;
@property (readonly, nonatomic) const struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > { struct shared_ptr<ggl::VenueWall::MeshMesh> *x0; struct shared_ptr<ggl::VenueWall::MeshMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > { struct shared_ptr<ggl::VenueWall::MeshMesh> *x0; } x2; } *venueWallMeshes;
@property (readonly, nonatomic) const struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > { struct shared_ptr<ggl::VenueWall::EndCapMesh> *x0; struct shared_ptr<ggl::VenueWall::EndCapMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > { struct shared_ptr<ggl::VenueWall::EndCapMesh> *x0; } x2; } *venueWallEndMeshes;
@property (readonly, nonatomic) const struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *x0; struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *x0; } x2; } *venueWallHorizontalStrokeMeshes;
@property (readonly, nonatomic) const struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *x0; struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > { struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *x0; } x2; } *venueWallVerticalStrokeMeshes;

- (const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)generateEdgeListForPolygonSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 key:(const struct pair<void *, unsigned long> { void *x0; unsigned long long x1; } *)a1;
- (void).cxx_destruct;
- (unsigned long long)verticalStrokeCountForSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 styles:(const struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a1 edges:(const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)a2;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { void /* function */ **x0; } *)a0;
- (void)didFinishAddingData;
- (void)updateTextures:(unsigned char)a0 textureManager:(struct shared_ptr<md::TextureManager> { } *)a1;
- (void)addStrokeForSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 paddedCount:(unsigned int)a1 key:(struct pair<void *, unsigned long> { void *x0; unsigned long long x1; })a2 attributes:(id)a3 styles:(struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a4 cullingMask:(unsigned int)a5 accessor:(struct ResourceAccessor { void /* function */ **x0; } *)a6;
- (struct StrokeBufferSizing { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })bufferSizingForStrokesOnSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 styles:(const struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a1 edges:(const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)a2;
- (id).cxx_construct;
- (void)addWallStrokesForSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 edges:(const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)a1 attributes:(id)a2 styles:(struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a3 cullingMask:(unsigned int)a4 accessor:(struct ResourceAccessor { void /* function */ **x0; } *)a5;
- (void)prepareToStrokeSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 key:(const struct pair<void *, unsigned long> { void *x0; unsigned long long x1; } *)a1 styles:(struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a2 paddedCount:(unsigned int)a3;
- (id)initWithStyleQuery:(struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } *)a0 tileZoom:(float)a1 layer:(int)a2 buildingId:(unsigned long long)a3 contentScale:(float)a4;
- (void)addWallsForSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 edges:(const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)a1 attributes:(id)a2 styles:(struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a3 cullingMask:(unsigned int)a4 accessor:(struct ResourceAccessor { void /* function */ **x0; } *)a5;
- (void)prepareToGenerateWallStrokesForSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 styles:(const struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a1 edges:(const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)a2;
- (void)prepareToGenerateWallsForSection:(const struct PolygonSection { struct Matrix<float, 2, 1> *x0; struct Matrix<float, 2, 1> *x1; struct Matrix<float, 2, 1> *x2; BOOL *x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x0; } x2; } x7; float x8; } *)a0 styles:(struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; struct pair<bool, GEOFeatureStylePair> *x1; struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > > { struct pair<bool, GEOFeatureStylePair> *x0; } x2; } *)a1 edges:(const struct vector<Edge, std::__1::allocator<Edge> > { struct Edge *x0; struct Edge *x1; struct __compressed_pair<Edge *, std::__1::allocator<Edge> > { struct Edge *x0; } x2; } *)a2;

@end

@class NSString, NSArray, VKARCameraController, VKGlobeCameraController;
@protocol VKInteractiveMapDelegate;

@interface VKClassicGlobeCanvas : VKScreenCanvas <GEOResourceManifestTileGroupObserver, VKInteractiveMap> {
    double _contentScale;
    struct AltitudeDebugSettings { BOOL altitudePauseLoading; BOOL altitudeFreezeViewNode; BOOL altitudeTexturePaging; BOOL altitudeShowTileBounds; BOOL altitudeThreadDrawing; BOOL altitudeMipmapSatellite; BOOL altitudeMipmapFlyover; BOOL altitudeMipmapObjectTree; BOOL altitudeShowNightLight; float lodScale; float tileQualityThreshold; float hideMeshTime; float fadeSpeed; BOOL tourSpeedup; float tourSpeedupFactor; } _debugSettings;
    struct GlobeAdapter { struct shared_ptr<md::GlobeAdapterData> { struct GlobeAdapterData *x0; struct __shared_weak_count *x1; } x0; struct GlobeView *x1; struct unordered_set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, mdm::Allocator> > { struct __hash_table<std::__1::shared_ptr<md::LabelMapTile>, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> **x0; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *, mdm::Allocator> > { unsigned long long x0; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *> *> *x0; } x0; struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelMapTile>, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelMapTile> > > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelMapTile> > > { float x0; } x3; } x0; } x2; struct shared_ptr<md::LabelManager> { struct LabelManager *x0; struct __shared_weak_count *x1; } x3; } *_globeAdapter;
    struct RealisticRenderer { void /* function */ **x0; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x1; struct unique_ptr<md::PassList, std::__1::default_delete<md::PassList> > { struct __compressed_pair<md::PassList *, std::__1::default_delete<md::PassList> > { struct PassList *x0; } x0; } x2; struct unique_ptr<md::FrameGraphResourceRegistry, std::__1::default_delete<md::FrameGraphResourceRegistry> > { struct __compressed_pair<md::FrameGraphResourceRegistry *, std::__1::default_delete<md::FrameGraphResourceRegistry> > { struct FrameGraphResourceRegistry *x0; } x0; } x3; struct vector<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> >, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> > > > { struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> > *x0; struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> > *x1; struct __compressed_pair<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> > *, std::__1::allocator<std::__1::unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> > > > { struct unique_ptr<md::RenderLayer, std::__1::default_delete<md::RenderLayer> > *x0; } x2; } x4; struct linear_map<md::CommandBufferLocation, md::RenderLayer *, std::__1::equal_to<md::CommandBufferLocation>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *> >, std::__1::vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *> > > > { struct vector<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *>, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *> > > { struct pair<md::CommandBufferLocation, md::RenderLayer *> *x0; struct pair<md::CommandBufferLocation, md::RenderLayer *> *x1; struct __compressed_pair<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *> *, std::__1::allocator<std::__1::pair<md::CommandBufferLocation, md::RenderLayer *> > > { struct pair<md::CommandBufferLocation, md::RenderLayer *> *x0; } x2; } x0; } x5; struct RunLoopController *x6; struct MapEngine *x7; id x8; struct Device *x9; struct RealisticCommandBufferSelector *x10; struct GlobeView *x11; struct Context *x12; struct StencilManager *x13; struct GlobeDispatch *x14; struct CullingNode *x15; struct GlobeTileRenderManager *x16; struct TexturePager *x17; struct shared_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer *x0; struct __shared_weak_count *x1; } x18; struct shared_ptr<ggl::FlyoverLibrary> { struct FlyoverLibrary *x0; struct __shared_weak_count *x1; } x19; id x20; } *_renderer;
    struct shared_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer *__ptr_; struct __shared_weak_count *__cntrl_; } _overlayContainer;
    struct shared_ptr<ggl::FlyoverLibrary> { struct FlyoverLibrary *__ptr_; struct __shared_weak_count *__cntrl_; } _flyoverLibrary;
    BOOL _initialized;
    struct shared_ptr<bool> { BOOL *__ptr_; struct __shared_weak_count *__cntrl_; } _isDead;
    BOOL _isLoading;
    BOOL _isDownloading;
    BOOL _coarseLoading;
    BOOL _tourIsDownloading;
    struct LoadingStatusTracker { void /* function */ **x0; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x1; int x2; id x3; struct optional<gdc::SceneStatus> { BOOL x0; union ValueUnion { unsigned char x0[1]; unsigned char x1; } x1; } x4; BOOL x5; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24]; } x0; struct __base<void ()> *x1; } x0; } x6; struct function<void (NSError *)> { struct __value_func<void (NSError *)> { struct type { unsigned char x0[24]; } x0; struct __base<void (NSError *)> *x1; } x0; } x7; struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24]; } x0; struct __base<void ()> *x1; } x0; } x8; struct function<void (gdc::SceneStatus)> { struct __value_func<void (gdc::SceneStatus)> { struct type { unsigned char x0[24]; } x0; struct __base<void (gdc::SceneStatus)> *x1; } x0; } x9; } *_loadingStatusTracker;
    double _currentZoomLevel;
    BOOL _arRoadDisabledState;
    struct CGSize { double width; double height; } _lastCanvasSize;
}

@property (copy, nonatomic) id /* block */ sceneDidLoadCallback;
@property (nonatomic) id<VKInteractiveMapDelegate> delegate;
@property (nonatomic) int mapType;
@property (nonatomic) BOOL trafficEnabled;
@property (readonly, nonatomic) int flyoverMode;
@property (readonly, nonatomic) VKGlobeCameraController *globeCameraController;
@property (readonly, nonatomic) VKARCameraController *arCameraController;
@property (readonly, nonatomic) BOOL flyoverAvailable;
@property (nonatomic) BOOL disableRoads;
@property (nonatomic) BOOL disableLabels;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *overlays;
@property (readonly, nonatomic) NSArray *visibleTileSets;

+ (BOOL)supportsMapType:(int)a0 scale:(int)a1;

- (BOOL)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })a0;
- (void)addOverlay:(id)a0;
- (struct _retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; })camera;
- (const struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } *)_styleManager;
- (void)puckAnimator:(id)a0 updatedPosition:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a1 course:(const struct Unit<RadianUnitDescription, double> { double x0; } *)a2;
- (id)consoleString:(BOOL)a0;
- (void)disableFlyoverStatistics;
- (void)setCamera:(struct _retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; })a0;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)a0;
- (void)enterARSessionAtCoordinate:(struct { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertCoordinateToPoint:(struct { double x0; double x1; })a0;
- (id)detailedDescription;
- (struct { double x0; double x1; })convertPointToCoordinate:(struct CGPoint { double x0; double x1; })a0;
- (id)initWithMapEngine:(struct MapEngine { void /* function */ **x0; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x1; struct Device *x2; struct RealisticCommandBufferSelector *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink *x0; } x0; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop *x0; } x0; } x6; struct RunLoop *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager *x0; } x0; } x8; struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> > { struct __compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> > { struct AnimationRunner *x0; } x0; } x9; struct shared_ptr<md::RunLoopController> { struct RunLoopController *x0; struct __shared_weak_count *x1; } x10; id x11; id x12; id x13; id x14; struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> > { struct __compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> > { struct CartographicRenderer *x0; } x0; } x15; struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct __compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct RealisticRenderer *x0; } x0; } x16; struct Renderer *x17; struct unique_ptr<md::World, std::__1::default_delete<md::World> > { struct __compressed_pair<md::World *, std::__1::default_delete<md::World> > { struct World *x0; } x0; } x18; struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess> > { struct __compressed_pair<md::MapDataAccess *, std::__1::default_delete<md::MapDataAccess> > { struct MapDataAccess *x0; } x0; } x19; struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> > { struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> > { struct LayoutContext *x0; } x0; } x20; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x21; struct _retain_ptr<VKCameraDelegateMediator *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x22; struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> > { struct __compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> > { struct LogicManager *x0; } x0; } x23; struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings> > { struct __compressed_pair<md::MapEngineSettings *, std::__1::default_delete<md::MapEngineSettings> > { struct MapEngineSettings *x0; } x0; } x24; struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct __compressed_pair<gdc::LoadingStatusTracker *, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct LoadingStatusTracker *x0; } x0; } x25; struct shared_ptr<gdc::Statistics> { struct Statistics *x0; struct __shared_weak_count *x1; } x26; BOOL x27; BOOL x28; BOOL x29; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x30; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x31; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x32; BOOL x33; struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration> > { struct __compressed_pair<md::MapEngineConfiguration *, std::__1::default_delete<md::MapEngineConfiguration> > { struct MapEngineConfiguration *x0; } x0; } x34; struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode> > { struct __compressed_pair<md::MapEngineMode *, std::__1::default_delete<md::MapEngineMode> > { struct MapEngineMode *x0; } x0; } x35; struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x36; unsigned long long x37; unsigned long long x38; struct shared_ptr<std::__1::atomic<unsigned long> > { struct atomic<unsigned long> *x0; struct __shared_weak_count *x1; } x39; } *)a0 inBackground:(BOOL)a1;
- (void)stopAnimations;
- (void)didPresent;
- (void)removeOverlay:(id)a0;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)a0;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)updateCameraForFrameResize;
- (void)setMapType:(int)a0 animated:(BOOL)a1;
- (id)viewportInfo;
- (void)enableTileAnalytics;
- (void).cxx_destruct;
- (void)setContentsScale:(double)a0;
- (void)resetFlyoverStatistics;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x0; double x1; })a0 highlightTarget:(unsigned char)a1;
- (void)stopFlyoverAnimation;
- (struct { double x0; double x1; })convertPointToMapPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)dealloc;
- (void)transitionToTracking:(BOOL)a0 mapMode:(long long)a1 startLocation:(struct { double x0; double x1; })a2 startCourse:(double)a3 cameraController:(id)a4 pounceCompletionHandler:(id /* block */)a5;
- (void)startFlyoverAnimation:(id)a0 animateToStart:(BOOL)a1 labelChanged:(id /* block */)a2 stateChange:(id /* block */)a3;
- (void)puckAnimator:(id)a0 updatedTargetPosition:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a1;
- (struct { double x0; double x1; })convertPointToCoordinateOnSphere:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)useNewRenderPath;
- (void)stopSnappingAnimations;
- (void)prepareFlyoverAnimation:(id)a0 completion:(id /* block */)a1;
- (void)setupMapScene;
- (void)stopLoading;
- (void)disableTileAnalytics;
- (void)updateCameraFromGlobe;
- (id)flyoverStatistics;
- (id /* block */)annotationRectTest;
- (void)_update;
- (void)enableFlyoverStatistics;
- (void)insertOverlay:(id)a0 aboveOverlay:(id)a1;
- (struct CGPoint { double x0; double x1; })convertCoordinateToCameraModelPoint:(struct { double x0; double x1; })a0;
- (void)waitForLoading;
- (id).cxx_construct;
- (struct CGPoint { double x0; double x1; })_centerScreenPoint;
- (struct CGPoint { double x0; double x1; })convertMapPointToPoint:(struct { double x0; double x1; })a0;
- (id /* block */)annotationCoordinateTest;
- (void)pauseFlyoverTourAnimation;
- (id)createFlyoverPreTourAnimation:(id)a0 duration:(double)a1;
- (void)resumeFlyoverTourAnimation;
- (id)attributionsForCurrentRegion;
- (void)insertOverlay:(id)a0 belowOverlay:(id)a1;
- (void)_setDefaultFov:(float)a0;
- (void)updateWithTimestamp:(double)a0 withContext:(struct LayoutContext { id x0; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x1; unsigned char x2; struct VKEdgeInsets { float x0; float x1; float x2; float x3; } x3; struct VKEdgeInsets { float x0; float x1; float x2; float x3; } x4; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh *x0; struct __shared_weak_count *x1; } x5; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh *x0; struct __shared_weak_count *x1; } x6; struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> { struct Pos2UVMesh *x0; struct __shared_weak_count *x1; } x7; struct StencilManager { unsigned char x0; unsigned char x1; unsigned char x2; struct ClearItem { unsigned char x0; struct Matrix<float, 4, 1> { float x0[4]; } x1; BOOL x2; float x3; unsigned char x4; unsigned int x5; } x3; } x8; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x9; struct Loader { struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > { struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > { struct LoaderImpl *x0; } x0; } x0; } x10; struct Loader *x11; double x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x17; float x18; struct View *x19; struct View *x20; struct Viewport *x21; struct ARContext *x22; unsigned long long x23; unsigned long long x24; struct unordered_map<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > > > > { struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::hash<unsigned long long>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::equal_to<unsigned long long>, true> > { float x0; } x3; } x0; } x25; } *)a1;
- (void)transferStateFromCanvas:(id)a0;
- (void)_updateDebugSettings;
- (void)exitARSession;
- (void)startFlyoverTourAnimation:(unsigned long long)a0 animateToStart:(BOOL)a1 labelChanged:(id /* block */)a2 stateChange:(id /* block */)a3;
- (void)didReceiveMemoryWarning:(BOOL)a0 beAggressive:(BOOL)a1;
- (void)_reloadStylesheet;
- (struct GlobeOverlayContainer { struct GlobeView *x0; id x1; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x2; double x3; } *)overlayContainer;

@end

@interface RegionalResourceObserver : NSObject {
    struct GeoResourceProvider { void /* function */ **x0; struct unordered_set<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *> > { struct __hash_table<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *>, std::__1::allocator<std::__1::__hash_node<grl::ResourceObserver *, void *> > > { struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> { struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<grl::ResourceObserver *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<grl::ResourceObserver *> > { float x0; } x3; } x0; } x1; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x2; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x4; struct map<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > >, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, std::__1::allocator<std::__1::pair<const grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct __tree<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::__map_value_compare<grl::ResourceProvider::ResourceCacheKey, std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, true>, std::__1::allocator<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<grl::ResourceProvider::ResourceCacheKey, std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, true> > { unsigned long long x0; } x2; } x0; } x5; struct _retain_ptr<GRLResourceGroupObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x6; struct _retain_ptr<RegionalResourceObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x7; struct linear_map<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > >, std::__1::equal_to<std::__1::bitset<2> >, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > >, std::__1::vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > > { struct vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *x0; struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *x1; struct __compressed_pair<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *x0; } x2; } x0; } x8; } *_resourceProvider;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _resourceProviderLock;
    id _observer;
}

- (void).cxx_destruct;
- (void)clearProvider;
- (id).cxx_construct;
- (id)initWithResourceProvider:(struct GeoResourceProvider { void /* function */ **x0; struct unordered_set<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *> > { struct __hash_table<grl::ResourceObserver *, std::__1::hash<grl::ResourceObserver *>, std::__1::equal_to<grl::ResourceObserver *>, std::__1::allocator<grl::ResourceObserver *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *>, std::__1::allocator<std::__1::__hash_node<grl::ResourceObserver *, void *> > > { struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> { struct __hash_node_base<std::__1::__hash_node<grl::ResourceObserver *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<grl::ResourceObserver *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<grl::ResourceObserver *> > { float x0; } x3; } x0; } x1; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x2; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x3; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x4; struct map<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > >, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, std::__1::allocator<std::__1::pair<const grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct __tree<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::__map_value_compare<grl::ResourceProvider::ResourceCacheKey, std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, true>, std::__1::allocator<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<grl::ResourceProvider::ResourceCacheKey, std::__1::__value_type<grl::ResourceProvider::ResourceCacheKey, std::__1::shared_ptr<const std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::less<grl::ResourceProvider::ResourceCacheKey>, true> > { unsigned long long x0; } x2; } x0; } x5; struct _retain_ptr<GRLResourceGroupObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x6; struct _retain_ptr<RegionalResourceObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x7; struct linear_map<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > >, std::__1::equal_to<std::__1::bitset<2> >, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > >, std::__1::vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > > { struct vector<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > >, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *x0; struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *x1; struct __compressed_pair<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *, std::__1::allocator<std::__1::pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > > > { struct pair<std::__1::bitset<2>, std::__1::shared_ptr<std::__1::vector<std::__1::basic_string<char>, geo::StdAllocator<std::__1::basic_string<char>, grl::Allocator> > > > *x0; } x2; } x0; } x8; } *)a0;

@end

@class VKPolylineOverlay;
@protocol VKGlobeLineContainerDelegate, VKRouteMatchedAnnotationPresentation;

@interface VKGlobeLineContainer : NSObject {
    id<VKRouteMatchedAnnotationPresentation> _routeLineSplitAnnotation;
    struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > { unsigned long long __value_; } __pair3_; } __tree_; } _overlays;
    struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > { unsigned long long __value_; } __pair3_; } __tree_; } _persistentOverlays;
    struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > { unsigned long long __value_; } __pair3_; } __tree_; } _nonPersistentOverlays;
    struct RouteRenderLayer { void /* function */ **x0; struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; struct CommandBufferLocation *x1; struct __compressed_pair<md::CommandBufferLocation *, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; } x2; } x1; struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; struct CommandBufferLocation *x1; struct __compressed_pair<md::CommandBufferLocation *, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; } x2; } x2; BOOL x3; unsigned char x4; struct RealisticRenderer *x5; BOOL x6; BOOL x7; BOOL x8; struct RouteModelPipelineStates { struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x0; struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x1; struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x2; struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x3; } x9; struct RouteModelRenderStates { struct RenderState *x0; struct RenderState *x1; struct RenderState *x2; struct RenderState *x3; struct RenderState *x4; } x10; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x11; struct unique_ptr<ggl::Drawable, std::__1::default_delete<ggl::Drawable> > { struct __compressed_pair<ggl::Drawable *, std::__1::default_delete<ggl::Drawable> > { struct Drawable *x0; } x0; } x12; struct shared_ptr<ggl::ConstantData> { struct ConstantData *x0; struct __shared_weak_count *x1; } x13; struct shared_ptr<ggl::ConstantData> { struct ConstantData *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x15; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x16; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x17; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x18; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x19; struct vector<md::realistic::RouteRenderLayer::RouteDataMapping, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping> > { struct RouteDataMapping *x0; struct RouteDataMapping *x1; struct __compressed_pair<md::realistic::RouteRenderLayer::RouteDataMapping *, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping> > { struct RouteDataMapping *x0; } x2; } x20; struct unique_ptr<md::FlyoverRouteOverlayCache, std::__1::default_delete<md::FlyoverRouteOverlayCache> > { struct __compressed_pair<md::FlyoverRouteOverlayCache *, std::__1::default_delete<md::FlyoverRouteOverlayCache> > { struct FlyoverRouteOverlayCache *x0; } x0; } x21; struct CommandBufferLocation { unsigned char x0; unsigned char x1; } x22; BOOL x23; } *_routeRenderLayer;
    struct map<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData> > > > { struct __tree<std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _polylinesToRoutes;
    struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKPolylineOverlay *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _selectedPolyline;
    struct VKGlobeRouteSplit { void /* function */ **x0; id x1; } *_routeSplit;
}

@property (retain, nonatomic) id<VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
@property (nonatomic) id<VKGlobeLineContainerDelegate> delegate;

- (const struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > { unsigned long long x0; } x2; } x0; } *)overlays;
- (void).cxx_destruct;
- (void)dealloc;
- (void)update;
- (void)addLine:(struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; })a0;
- (id).cxx_construct;
- (id)initWithRouteRenderLayer:(struct RouteRenderLayer { void /* function */ **x0; struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; struct CommandBufferLocation *x1; struct __compressed_pair<md::CommandBufferLocation *, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; } x2; } x1; struct vector<md::CommandBufferLocation, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; struct CommandBufferLocation *x1; struct __compressed_pair<md::CommandBufferLocation *, std::__1::allocator<md::CommandBufferLocation> > { struct CommandBufferLocation *x0; } x2; } x2; BOOL x3; unsigned char x4; struct RealisticRenderer *x5; BOOL x6; BOOL x7; BOOL x8; struct RouteModelPipelineStates { struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x0; struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x1; struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x2; struct shared_ptr<ggl::PipelineState> { struct PipelineState *x0; struct __shared_weak_count *x1; } x3; } x9; struct RouteModelRenderStates { struct RenderState *x0; struct RenderState *x1; struct RenderState *x2; struct RenderState *x3; struct RenderState *x4; } x10; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x11; struct unique_ptr<ggl::Drawable, std::__1::default_delete<ggl::Drawable> > { struct __compressed_pair<ggl::Drawable *, std::__1::default_delete<ggl::Drawable> > { struct Drawable *x0; } x0; } x12; struct shared_ptr<ggl::ConstantData> { struct ConstantData *x0; struct __shared_weak_count *x1; } x13; struct shared_ptr<ggl::ConstantData> { struct ConstantData *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x15; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x16; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x17; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x18; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x19; struct vector<md::realistic::RouteRenderLayer::RouteDataMapping, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping> > { struct RouteDataMapping *x0; struct RouteDataMapping *x1; struct __compressed_pair<md::realistic::RouteRenderLayer::RouteDataMapping *, std::__1::allocator<md::realistic::RouteRenderLayer::RouteDataMapping> > { struct RouteDataMapping *x0; } x2; } x20; struct unique_ptr<md::FlyoverRouteOverlayCache, std::__1::default_delete<md::FlyoverRouteOverlayCache> > { struct __compressed_pair<md::FlyoverRouteOverlayCache *, std::__1::default_delete<md::FlyoverRouteOverlayCache> > { struct FlyoverRouteOverlayCache *x0; } x0; } x21; struct CommandBufferLocation { unsigned char x0; unsigned char x1; } x22; BOOL x23; } *)a0;
- (void)addPersistentOverlay:(id)a0;
- (void)addNonPersistentOverlay:(id)a0;
- (void)removePersistentOverlay:(id)a0;
- (void)removeNonPersistentOverlay:(id)a0;
- (float)halfWidthForLine:(id)a0 styleZ:(float)a1;
- (const struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > { unsigned long long x0; } x2; } x0; } *)persistentOverlays;
- (BOOL)hasPersistentOverlay:(id *)a0;
- (BOOL)hasNonPersistentOverlay:(id *)a0;
- (const struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > { unsigned long long x0; } x2; } x0; } *)nonPersistentOverlays;
- (void)clearLineSelection;
- (void)setSelected:(struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; })a0 selected:(BOOL)a1;
- (void)removeLine:(struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; })a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_addOverlay:(id)a0;
- (void)_removeOverlay:(id)a0;
- (void)_recreateLinesIfNeeded;
- (void)_updateRouteSplit;
- (void)_destroyLinesIfNeeded;

@end

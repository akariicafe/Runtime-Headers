@class NSString;

@interface _MapEngineRenderQueueSource : NSObject <GGLRenderQueueSource> {
    struct MapEngine { void /* function */ **x0; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x1; struct Device *x2; struct RealisticCommandBufferSelector *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink *x0; } x0; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop *x0; } x0; } x6; struct RunLoop *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager *x0; } x0; } x8; struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> > { struct __compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> > { struct AnimationRunner *x0; } x0; } x9; struct shared_ptr<md::RunLoopController> { struct RunLoopController *x0; struct __shared_weak_count *x1; } x10; id x11; id x12; id x13; id x14; struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> > { struct __compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> > { struct CartographicRenderer *x0; } x0; } x15; struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct __compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct RealisticRenderer *x0; } x0; } x16; struct Renderer *x17; struct unique_ptr<md::World, std::__1::default_delete<md::World> > { struct __compressed_pair<md::World *, std::__1::default_delete<md::World> > { struct World *x0; } x0; } x18; struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess> > { struct __compressed_pair<md::MapDataAccess *, std::__1::default_delete<md::MapDataAccess> > { struct MapDataAccess *x0; } x0; } x19; struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> > { struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> > { struct LayoutContext *x0; } x0; } x20; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x21; struct _retain_ptr<VKCameraDelegateMediator *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x22; struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> > { struct __compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> > { struct LogicManager *x0; } x0; } x23; struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings> > { struct __compressed_pair<md::MapEngineSettings *, std::__1::default_delete<md::MapEngineSettings> > { struct MapEngineSettings *x0; } x0; } x24; struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct __compressed_pair<gdc::LoadingStatusTracker *, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct LoadingStatusTracker *x0; } x0; } x25; struct shared_ptr<gdc::Statistics> { struct Statistics *x0; struct __shared_weak_count *x1; } x26; BOOL x27; BOOL x28; BOOL x29; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x30; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x31; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x32; BOOL x33; struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration> > { struct __compressed_pair<md::MapEngineConfiguration *, std::__1::default_delete<md::MapEngineConfiguration> > { struct MapEngineConfiguration *x0; } x0; } x34; struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode> > { struct __compressed_pair<md::MapEngineMode *, std::__1::default_delete<md::MapEngineMode> > { struct MapEngineMode *x0; } x0; } x35; struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x36; unsigned long long x37; unsigned long long x38; struct shared_ptr<std::__1::atomic<unsigned long> > { struct atomic<unsigned long> *x0; struct __shared_weak_count *x1; } x39; } *_mapEngine;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)isDelayedRenderQueueConsumptionSupported;
- (id)initWithEngine:(struct MapEngine { void /* function */ **x0; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x1; struct Device *x2; struct RealisticCommandBufferSelector *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink *x0; } x0; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop *x0; } x0; } x6; struct RunLoop *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager *x0; } x0; } x8; struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> > { struct __compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> > { struct AnimationRunner *x0; } x0; } x9; struct shared_ptr<md::RunLoopController> { struct RunLoopController *x0; struct __shared_weak_count *x1; } x10; id x11; id x12; id x13; id x14; struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> > { struct __compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> > { struct CartographicRenderer *x0; } x0; } x15; struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct __compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct RealisticRenderer *x0; } x0; } x16; struct Renderer *x17; struct unique_ptr<md::World, std::__1::default_delete<md::World> > { struct __compressed_pair<md::World *, std::__1::default_delete<md::World> > { struct World *x0; } x0; } x18; struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess> > { struct __compressed_pair<md::MapDataAccess *, std::__1::default_delete<md::MapDataAccess> > { struct MapDataAccess *x0; } x0; } x19; struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> > { struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> > { struct LayoutContext *x0; } x0; } x20; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x21; struct _retain_ptr<VKCameraDelegateMediator *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x22; struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> > { struct __compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> > { struct LogicManager *x0; } x0; } x23; struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings> > { struct __compressed_pair<md::MapEngineSettings *, std::__1::default_delete<md::MapEngineSettings> > { struct MapEngineSettings *x0; } x0; } x24; struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct __compressed_pair<gdc::LoadingStatusTracker *, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct LoadingStatusTracker *x0; } x0; } x25; struct shared_ptr<gdc::Statistics> { struct Statistics *x0; struct __shared_weak_count *x1; } x26; BOOL x27; BOOL x28; BOOL x29; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x30; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x31; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x32; BOOL x33; struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration> > { struct __compressed_pair<md::MapEngineConfiguration *, std::__1::default_delete<md::MapEngineConfiguration> > { struct MapEngineConfiguration *x0; } x0; } x34; struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode> > { struct __compressed_pair<md::MapEngineMode *, std::__1::default_delete<md::MapEngineMode> > { struct MapEngineMode *x0; } x0; } x35; struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x36; unsigned long long x37; unsigned long long x38; struct shared_ptr<std::__1::atomic<unsigned long> > { struct atomic<unsigned long> *x0; struct __shared_weak_count *x1; } x39; } *)a0;
- (struct RenderQueue { struct PassDescriptor { struct AttachmentActions { int x0; int x1; } x0[4]; struct AttachmentActions { int x0; int x1; } x1; struct AttachmentActions { int x0; int x1; } x2; } x0; struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct Pass *x1; struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct CommandBuffer **x1; struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction *x0; struct __shared_weak_count *x1; } x3; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; BOOL x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; } *)renderQueueForTimestamp:(double)a0;

@end

@class NSString, VKTimedAnimation;

@interface VKARCameraController : VKScreenCameraController <VKGesturingCameraController> {
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    double _currentZoomLevel;
    double _maxZoomLevel;
    double _height;
    double _altitudeOffset;
    struct Unit<RadianUnitDescription, double> { double _value; } _fovy;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<RadianUnitDescription, double> { double _value; } _pitch; struct Unit<RadianUnitDescription, double> { double _value; } _heading; struct Unit<RadianUnitDescription, double> { double _value; } _roll; } _cameraFrame;
    struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _rotation; } _baseTransform;
    struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _rotation; } _arTransform;
    struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _rotation; } _currentARTransform;
    struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _rotation; } _lastARTransform;
    struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _arOrientation;
    VKTimedAnimation *_transitionAnimation;
    long long _interfaceOrientation;
    struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _interfaceOrientationRotation;
    struct Coordinate2D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; } _currentCoordinate;
}

@property (nonatomic) struct MapEngine { void /* function */ **x0; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x1; struct Device *x2; struct RealisticCommandBufferSelector *x3; struct _retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> > { struct __compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> > { struct DisplayLink *x0; } x0; } x5; struct unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct __compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> > { struct SnapshotRunLoop *x0; } x0; } x6; struct RunLoop *x7; struct unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> > { struct __compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> > { struct AnimationManager *x0; } x0; } x8; struct unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> > { struct __compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> > { struct AnimationRunner *x0; } x0; } x9; struct shared_ptr<md::RunLoopController> { struct RunLoopController *x0; struct __shared_weak_count *x1; } x10; id x11; id x12; id x13; id x14; struct unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> > { struct __compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> > { struct CartographicRenderer *x0; } x0; } x15; struct unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct __compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> > { struct RealisticRenderer *x0; } x0; } x16; struct Renderer *x17; struct unique_ptr<md::World, std::__1::default_delete<md::World> > { struct __compressed_pair<md::World *, std::__1::default_delete<md::World> > { struct World *x0; } x0; } x18; struct unique_ptr<md::MapDataAccess, std::__1::default_delete<md::MapDataAccess> > { struct __compressed_pair<md::MapDataAccess *, std::__1::default_delete<md::MapDataAccess> > { struct MapDataAccess *x0; } x0; } x19; struct unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> > { struct __compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> > { struct LayoutContext *x0; } x0; } x20; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x21; struct _retain_ptr<VKCameraDelegateMediator *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x22; struct unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> > { struct __compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> > { struct LogicManager *x0; } x0; } x23; struct unique_ptr<md::MapEngineSettings, std::__1::default_delete<md::MapEngineSettings> > { struct __compressed_pair<md::MapEngineSettings *, std::__1::default_delete<md::MapEngineSettings> > { struct MapEngineSettings *x0; } x0; } x24; struct unique_ptr<gdc::LoadingStatusTracker, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct __compressed_pair<gdc::LoadingStatusTracker *, std::__1::default_delete<gdc::LoadingStatusTracker> > { struct LoadingStatusTracker *x0; } x0; } x25; struct shared_ptr<gdc::Statistics> { struct Statistics *x0; struct __shared_weak_count *x1; } x26; BOOL x27; BOOL x28; BOOL x29; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x30; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x31; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x32; BOOL x33; struct unique_ptr<md::MapEngineConfiguration, std::__1::default_delete<md::MapEngineConfiguration> > { struct __compressed_pair<md::MapEngineConfiguration *, std::__1::default_delete<md::MapEngineConfiguration> > { struct MapEngineConfiguration *x0; } x0; } x34; struct unique_ptr<md::MapEngineMode, std::__1::default_delete<md::MapEngineMode> > { struct __compressed_pair<md::MapEngineMode *, std::__1::default_delete<md::MapEngineMode> > { struct MapEngineMode *x0; } x0; } x35; struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x36; unsigned long long x37; unsigned long long x38; struct shared_ptr<std::__1::atomic<unsigned long> > { struct atomic<unsigned long> *x0; struct __shared_weak_count *x1; } x39; } *mapEngine;
@property (nonatomic) struct GlobeView { void /* function */ **x0; struct GeoServicesLoader *x1; struct ManifestManager *x2; struct TriggerManager *x3; struct shared_ptr<altitude::AnchorManager> { struct AnchorManager *x0; struct __shared_weak_count *x1; } x4; struct DtmCacheNode *x5; struct DtmRequestManager *x6; struct FreezeViewNode *x7; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x8; BOOL x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x11; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; struct SimpleTileKey *x1; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey *x0; } x2; } x12; BOOL x13; unsigned int x14; unsigned int x15; id x16; BOOL x17; BOOL x18; struct AnimationManager { struct AnimationReferenceTimer { double x0; double x1; double x2; } x0; struct unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> > { struct __compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> > { struct AnimationTimer *x0; } x0; } x1; double x2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; struct AnimationObjectHolder *x1; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder *x0; } x2; } x3; } x19; struct Stopwatch { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; } x20; double x21; BOOL x22; struct Unit<RadianUnitDescription, double> { double x0; } x23; double x24; struct Unit<RadianUnitDescription, double> { double x0; } x25; struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } x26; struct C3mmRequestManager *x27; struct RenderableGroup *x28; unsigned int x29; double x30; struct { double x0; double x1; } x31; BOOL x32; BOOL x33; struct LabelDataManagerPrivate *x34; BOOL x35; BOOL x36; BOOL x37; BOOL x38; struct RouteLineManager *x39; struct GlobeCleanupLoader *x40; struct CompleteGlobeTileSetCullingGraph *x41; struct CompleteGlobeTileSetLoader *x42; struct TileSetNode *x43; struct GlobeTileRenderManager *x44; struct CullingNode *x45; struct EarthAdjustedViewNode *x46; struct UserViewNode *x47; struct View *x48; struct BasicViewNode *x49; struct GlobeMainViewNode *x50; struct C3bRequestManager *x51; BOOL x52; struct shared_ptr<bool> { BOOL *x0; struct __shared_weak_count *x1; } x53; struct HeightRequestManager *x54; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x0; } x2; } x0; } x55; struct Mutex { void *x0; } x56; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x57; struct FlyoverTour *x58; BOOL x59; struct Viewport { int x0; int x1; int x2; int x3; } x60; BOOL x61; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x0; } x2; } x0; } x62; struct unique_ptr<ReachabilityChangedObserver, std::__1::default_delete<ReachabilityChangedObserver> > { struct __compressed_pair<ReachabilityChangedObserver *, std::__1::default_delete<ReachabilityChangedObserver> > { struct ReachabilityChangedObserver *x0; } x0; } x63; struct TileManager *x64; struct ObjectTreeLoader *x65; struct QuickSurfaceManager *x66; struct IntersectorHeight *x67; struct shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> > { struct SharedItemManager<altitude::Map, altitude::MapRequestId> *x0; struct __shared_weak_count *x1; } x68; struct BundleLoader *x69; struct ProtocolLoader *x70; struct GeoResourceManager *x71; struct GeoResourceLoader *x72; struct ViewNode *x73; struct ViewportNode *x74; struct View *x75; struct Viewport *x76; struct shared_ptr<ggl::RenderState> { struct RenderState *x0; struct __shared_weak_count *x1; } x77; unsigned int x78; struct Statistics *x79; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x80; struct TexturePager *x81; struct IOSurfacePool *x82; struct RealisticRenderer *x83; struct DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<ggl::Texture2D *> { struct __cxx_atomic_impl<ggl::Texture2D *, std::__1::__cxx_atomic_base_impl<ggl::Texture2D *> > { _Atomic struct Texture2D *x0; } x0; } x1; struct function<ggl::Texture2D *()> { struct __value_func<ggl::Texture2D *()> { struct type { unsigned char x0[24]; } x0; struct __base<ggl::Texture2D *()> *x1; } x0; } x2; } x84; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x85; struct DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> > { struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x0; struct atomic<altitude::TextureMap *> { struct __cxx_atomic_impl<altitude::TextureMap *, std::__1::__cxx_atomic_base_impl<altitude::TextureMap *> > { _Atomic struct TextureMap *x0; } x0; } x1; struct function<altitude::TextureMap *()> { struct __value_func<altitude::TextureMap *()> { struct type { unsigned char x0[24]; } x0; struct __base<altitude::TextureMap *()> *x1; } x0; } x2; } x86; } *globeView;
@property (nonatomic) struct Unit<DegreeUnitDescription, double> { double _value; } fieldOfView;
@property (nonatomic) BOOL overrideARFieldOfView;
@property (readonly, nonatomic) float heightScale;
@property (nonatomic) struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<double> { struct Matrix<double, 3, 1> { double _e[3]; } _imaginary; double _scalar; } _rotation; } offsetTransform;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)restoreViewportFromInfo:(id)a0;
- (double)pitch;
- (long long)tileSize;
- (void)setCamera:(id)a0;
- (struct Geocentric<double> { double x0[3]; })cameraPosition;
- (id)viewportInfo;
- (struct { double x0; double x1; })centerCoordinate;
- (void).cxx_destruct;
- (void)updateGlobeFromCamera;
- (void)_updateBaseTransform;
- (double)heading;
- (struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; })_transformFromARCamera:(id)a0;
- (void)_updateARContext;
- (void)updateWithARSession:(id)a0;
- (struct Matrix<double, 3, 1> { double x0[3]; })_intersectAndResolveWorldCollision:(const struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } *)a0;
- (double)minPitch;
- (void)_setupPounceAnimation:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a0 duration:(double)a1 completion:(id /* block */)a2;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; })a0 mapDataAccess:(struct MapDataAccess { } *)a1 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a2 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; long long x2; } *)a3 cameraDelegate:(id)a4;
- (double)_fovAdjustment;
- (void)setCurrentZoomLevel:(double)a0;
- (void)trasitionToARModeAtCoordinate:(struct { double x0; double x1; })a0 withDuration:(double)a1 completion:(id /* block */)a2;
- (struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; })arCameraTransform;
- (void)arSessionWasInterrupted:(unsigned long long)a0;
- (BOOL)isFullyPitched;
- (double)altitude;
- (void)dealloc;
- (double)presentationYaw;
- (id)mapRegion;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })cameraFrame;
- (void)setYaw:(double)a0 animated:(BOOL)a1;
- (BOOL)isPitched;
- (double)maxPitch;
- (id).cxx_construct;
- (double)distanceFromCenterCoordinate;
- (double)maximumZoomLevel;
- (void)setMaxZoomLevel:(double)a0;
- (double)topDownMinimumZoomLevel;
- (void)updateWithTimestamp:(double)a0;
- (double)minimumZoomLevel;
- (void)trasitionToARModeFromCameraFrame:(const struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } *)a0 withDuration:(double)a1 completion:(id /* block */)a2;
- (void)updateCameraFrameFromARTransform;
- (double)currentZoomLevel;

@end

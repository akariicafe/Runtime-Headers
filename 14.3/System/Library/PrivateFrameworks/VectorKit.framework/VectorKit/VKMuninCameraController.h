@class NSString, VKTimedAnimation;

@interface VKMuninCameraController : VKCameraController <VKGesturingCameraController> {
    struct MuninSceneLogic { void /* function */ **x0; unsigned long long x1; unsigned long long x2; BOOL x3; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x4; struct AnimationRunner *x5; struct World *x6; struct LoadingStatusTracker *x7; struct RunLoopController *x8; struct unique_ptr<md::mun::MuninMetadataContainer, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct __compressed_pair<md::mun::MuninMetadataContainer *, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct MuninMetadataContainer *x0; } x0; } x9; struct vector<md::mun::ViewId, std::__1::allocator<md::mun::ViewId> > { struct ViewId *x0; struct ViewId *x1; struct __compressed_pair<md::mun::ViewId *, std::__1::allocator<md::mun::ViewId> > { struct ViewId *x0; } x2; } x10; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } x11; struct linear_map<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> >, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > >, std::__1::vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > >, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > > > > { struct vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > >, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > > > { struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *x0; struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *x1; struct __compressed_pair<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > > > { struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *x0; } x2; } x0; } x12; BOOL x13; struct MuninDebugViewContext { struct vector<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> > > { struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *x0; struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *x1; struct __compressed_pair<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> > > { struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *x0; } x2; } x0; BOOL x1; struct Stopwatch { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; } x2; } x14; struct unique_ptr<md::mun::MuninDisplayAnalytic, std::__1::default_delete<md::mun::MuninDisplayAnalytic> > { struct __compressed_pair<md::mun::MuninDisplayAnalytic *, std::__1::default_delete<md::mun::MuninDisplayAnalytic> > { struct MuninDisplayAnalytic *x0; } x0; } x15; struct unique_ptr<md::mun::MuninNavigation, std::__1::default_delete<md::mun::MuninNavigation> > { struct __compressed_pair<md::mun::MuninNavigation *, std::__1::default_delete<md::mun::MuninNavigation> > { struct MuninNavigation *x0; } x0; } x16; struct unique_ptr<md::mun::MuninIntersector, std::__1::default_delete<md::mun::MuninIntersector> > { struct __compressed_pair<md::mun::MuninIntersector *, std::__1::default_delete<md::mun::MuninIntersector> > { struct MuninIntersector *x0; } x0; } x17; struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock> > { struct __compressed_pair<md::FadeEffectBlock *, std::__1::default_delete<md::FadeEffectBlock> > { struct FadeEffectBlock *x0; } x0; } x18; struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock> > { struct __compressed_pair<md::FadeEffectBlock *, std::__1::default_delete<md::FadeEffectBlock> > { struct FadeEffectBlock *x0; } x0; } x19; struct vector<md::MuninSceneEvent, std::__1::allocator<md::MuninSceneEvent> > { struct MuninSceneEvent *x0; struct MuninSceneEvent *x1; struct __compressed_pair<md::MuninSceneEvent *, std::__1::allocator<md::MuninSceneEvent> > { struct MuninSceneEvent *x0; } x2; } x20; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x21; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x22; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x23; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x24; struct MuninSettings { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; unsigned char x11; unsigned short x12; int x13; unsigned char x14; unsigned char x15; struct Unit<RadianUnitDescription, double> { double x0; } x16; struct Unit<RadianUnitDescription, double> { double x0; } x17; struct Unit<RadianUnitDescription, double> { double x0; } x18; struct Unit<RadianUnitDescription, double> { double x0; } x19; struct Unit<RadianUnitDescription, double> { double x0; } x20; struct Unit<RadianUnitDescription, double> { double x0; } x21; struct Unit<RadianUnitDescription, double> { double x0; } x22; double x23; double x24; double x25; double x26; } x25; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *x0; unsigned short *x1; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *x0; } x2; } x26; BOOL x27; BOOL x28; unsigned long long x29; struct shared_ptr<md::MuninSceneLogic::ValidState> { struct ValidState *x0; struct __shared_weak_count *x1; } x30; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x31; struct once_flag { unsigned long long x0; } x32; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x33; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x34; } *_muninSceneLogic;
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    struct optional<(anonymous namespace)::PointSegment> { BOOL _hasValue; union ValueUnion { unsigned char data[3984]; struct PointSegment { struct PointView { struct CollectionPoint { unsigned long long pointId; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<float> { struct Matrix<float, 3, 1> { float _e[3]; } _imaginary; float _scalar; } _rotation; } frame; struct Unit<RadianUnitDescription, float> { float _value; } heading; struct Mercator3<double> { double _e[3]; } mercatorPosition; unsigned long long time; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *_begin; struct PhotoInfo *_end; struct PhotoInfo *_fixedStorage; unsigned long long _capacity; struct type { unsigned char __lx[288]; } storage[6]; } photos; float heightAboveGroundMeters; unsigned int buildId; unsigned short bucketId; unsigned char type; unsigned char dataType; unsigned char texturedLodMask; } _point; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__begin_; struct pair<md::mun::ViewId, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__value_; } __end_cap_; } _requiredViews; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__begin_; struct pair<md::mun::ViewId, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__value_; } __end_cap_; } _optionalViews; struct small_vector<md::mun::PointView::CameraLod, 6> { struct CameraLod *_begin; struct CameraLod *_end; struct CameraLod *_fixedStorage; unsigned long long _capacity; struct type { unsigned char __lx[8]; } storage[6]; } _cameras; } _startPoint; struct PointView { struct CollectionPoint { unsigned long long pointId; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double _e[3]; } _translation; struct Quaternion<float> { struct Matrix<float, 3, 1> { float _e[3]; } _imaginary; float _scalar; } _rotation; } frame; struct Unit<RadianUnitDescription, float> { float _value; } heading; struct Mercator3<double> { double _e[3]; } mercatorPosition; unsigned long long time; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *_begin; struct PhotoInfo *_end; struct PhotoInfo *_fixedStorage; unsigned long long _capacity; struct type { unsigned char __lx[288]; } storage[6]; } photos; float heightAboveGroundMeters; unsigned int buildId; unsigned short bucketId; unsigned char type; unsigned char dataType; unsigned char texturedLodMask; } _point; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__begin_; struct pair<md::mun::ViewId, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__value_; } __end_cap_; } _requiredViews; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__begin_; struct pair<md::mun::ViewId, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *__value_; } __end_cap_; } _optionalViews; struct small_vector<md::mun::PointView::CameraLod, 6> { struct CameraLod *_begin; struct CameraLod *_end; struct CameraLod *_fixedStorage; unsigned long long _capacity; struct type { unsigned char __lx[8]; } storage[6]; } _cameras; } _endPoint; } type; } _value; } _currentPointSegment;
    struct shared_ptr<(anonymous namespace)::PathAnimator> { struct PathAnimator *__ptr_; struct __shared_weak_count *__cntrl_; } _pathAnimator;
    struct unique_ptr<(anonymous namespace)::BumpAnimator, std::__1::default_delete<(anonymous namespace)::BumpAnimator> > { struct __compressed_pair<(anonymous namespace)::BumpAnimator *, std::__1::default_delete<(anonymous namespace)::BumpAnimator> > { struct BumpAnimator *__value_; } __ptr_; } _bumpAnimator;
    BOOL _panning;
    BOOL _panStopping;
    struct Matrix<float, 2, 1> { float _e[2]; } _panLocation;
    struct Matrix<float, 2, 1> { float _e[2]; } _panTranslation;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKTimedAnimation *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _panAnimation;
    BOOL _pinching;
    struct Matrix<float, 2, 1> { float _e[2]; } _pinchZoomOffset;
    struct Unit<RadianUnitDescription, double> { double _value; } _pinchStartFieldOfView;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKTimedAnimation *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _pinchResetAnimation;
    float _cameraOffsetFactor;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKTimedAnimation *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _offsetAnimation;
    double _lastUpdateTime;
    struct Spring<double, 1, gdc::SpringType::Angular> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _panSpring;
    struct Unit<RadianUnitDescription, double> { double _value; } _heading;
    struct Unit<RadianUnitDescription, double> { double _value; } _pitch;
    BOOL _restrictWidestFieldOfView;
    struct Unit<RadianUnitDescription, double> { double _value; } _widestFieldOfView;
    struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _rigPosition;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<RadianUnitDescription, double> { double _value; } _pitch; struct Unit<RadianUnitDescription, double> { double _value; } _heading; struct Unit<RadianUnitDescription, double> { double _value; } _roll; } _previousCameraFrame;
    unsigned long long _tapIndex;
    struct shared_ptr<geo::Task> { struct Task *__ptr_; struct __shared_weak_count *__cntrl_; } _preparePath;
    struct unique_ptr<(anonymous namespace)::PathAnimationDescription, std::__1::default_delete<(anonymous namespace)::PathAnimationDescription> > { struct __compressed_pair<(anonymous namespace)::PathAnimationDescription *, std::__1::default_delete<(anonymous namespace)::PathAnimationDescription> > { struct PathAnimationDescription *__value_; } __ptr_; } _currentPathAnimation;
    struct unique_ptr<(anonymous namespace)::PendingPathAnimation, std::__1::default_delete<(anonymous namespace)::PendingPathAnimation> > { struct __compressed_pair<(anonymous namespace)::PendingPathAnimation *, std::__1::default_delete<(anonymous namespace)::PendingPathAnimation> > { struct PendingPathAnimation *__value_; } __ptr_; } _pendingPathAnimation;
}

@property (nonatomic) BOOL virtualParallaxEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)restoreViewportFromInfo:(id)a0;
- (double)pitch;
- (void)setCamera:(id)a0;
- (void)stopAnimations;
- (void)pathAnimationPrepared:(struct PathAnimationDescription { struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; struct CollectionPoint *x1; struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; } x2; } x0; struct Geocentric<double> { double x0[3]; } x1; struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x2; BOOL x3; int x4; struct shared_ptr<(anonymous namespace)::PathAnimator> { struct PathAnimator *x0; struct __shared_weak_count *x1; } x5; unsigned long long x6; })a0 tap:(struct TapDescription { struct Intersection { struct Geocentric<double> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; struct Ray<double, 3> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x1; struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } x2; struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x3; unsigned long long x4; })a1 preloadedViews:(struct unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > > { struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, gdc::LayerDataRequestKeyHash, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true> > { float x0; } x3; } x0; })a2;
- (BOOL)isAnimationsRunning;
- (id)viewportInfo;
- (struct { double x0; double x1; })centerCoordinate;
- (void)setCameraFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })a0;
- (void)zoomAnimatedWithDuration:(struct Unit<RadianUnitDescription, double> { double x0; })a0 duration:(float)a1 completion:(id /* block */)a2;
- (void).cxx_destruct;
- (double)heading;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)setCurrentPoint:(const struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } *)a0 secondaryPoint:(struct optional<md::mun::CollectionPoint> { BOOL x0; union ValueUnion { unsigned char x0[1864]; struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } x1; } x1; })a1;
- (struct Unit<RadianUnitDescription, double> { double x0; })_horizontalFieldOfView:(struct Unit<RadianUnitDescription, double> { double x0; })a0;
- (double)_zoomRubberBandFov:(double)a0;
- (void)animatePath:(struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; struct CollectionPoint *x1; struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; } x2; } *)a0 animator:(const struct shared_ptr<(anonymous namespace)::PathAnimator> { struct PathAnimator *x0; struct __shared_weak_count *x1; } *)a1 preloadedRequiredViews:(struct unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > > { struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, gdc::LayerDataRequestKeyHash, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true> > { float x0; } x3; } x0; } *)a2 prePruneData:(BOOL)a3 completionHandler:(id /* block */)a4;
- (double)altitude;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)isPathAnimationRunning;
- (BOOL)isBumpAnimationRunning;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (BOOL)cancelPendingMove;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)maximumZoomLevelForTileSize:(long long)a0;
- (BOOL)canZoomOutForTileSize:(long long)a0;
- (double)currentZoomLevelForTileSize:(long long)a0;
- (void)zoomAnimated:(struct Unit<RadianUnitDescription, double> { double x0; })a0 completion:(id /* block */)a1;
- (void)selectLabelMarker:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker *x0; struct __shared_weak_count *x1; } *)a0 completion:(id /* block */)a1;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)transferGestureState:(id)a0;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)pathAnimationComplete:(unsigned long long)a0;
- (BOOL)isAnimationsRunningExceptBump;
- (struct Unit<RadianUnitDescription, double> { double x0; })_pitchForScreenPoint:(struct Matrix<float, 2, 1> { float x0[2]; })a0;
- (void)updateCurrentPointView:(BOOL)a0;
- (void)runBumpAnimation:(const struct Geocentric<double> { double x0[3]; } *)a0 targetPoint:(const struct Geocentric<double> { double x0[3]; } *)a1 completionHandler:(id /* block */)a2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id).cxx_construct;
- (BOOL)cancelPendingMoveExceptBump;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setCenterCoordinate:(struct { double x0; double x1; })a0 altitude:(double)a1 yaw:(double)a2 pitch:(double)a3 duration:(double)a4 animationStyle:(long long)a5 timingCurve:(id /* block */)a6 completion:(id /* block */)a7;
- (void)moveAlongPath:(struct PathAnimationDescription { struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; struct CollectionPoint *x1; struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; } x2; } x0; struct Geocentric<double> { double x0[3]; } x1; struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x2; BOOL x3; int x4; struct shared_ptr<(anonymous namespace)::PathAnimator> { struct PathAnimator *x0; struct __shared_weak_count *x1; } x5; unsigned long long x6; })a0 tap:(struct TapDescription { struct Intersection { struct Geocentric<double> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x0; struct Ray<double, 3> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Matrix<double, 3, 1> { double x0[3]; } x1; } x1; struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } x2; struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x3; unsigned long long x4; })a1 preloadedViews:(struct unordered_map<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > > { struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, gdc::LayerDataRequestKeyHash, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, std::__1::shared_ptr<gdc::LayerData> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true> > { float x0; } x3; } x0; })a2 continued:(BOOL)a3;
- (double)topDownMinimumZoomLevelForTileSize:(long long)a0;
- (double)minimumZoomLevelForTileSize:(long long)a0;
- (void)_setHeading:(struct Unit<RadianUnitDescription, double> { double x0; })a0;
- (struct Matrix<float, 2, 1> { float x0[2]; })screenPointWithOffset:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)canZoomInForTileSize:(long long)a0;
- (void)setWidestFieldOfView:(struct Unit<RadianUnitDescription, double> { double x0; })a0;
- (const struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } *)currentPoint;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)setCurrentSegment:(struct PointSegment { struct PointView { struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } x0; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; struct pair<md::mun::ViewId, unsigned int> *x1; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; } x2; } x1; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; struct pair<md::mun::ViewId, unsigned int> *x1; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; } x2; } x2; struct small_vector<md::mun::PointView::CameraLod, 6> { struct CameraLod *x0; struct CameraLod *x1; struct CameraLod *x2; unsigned long long x3; struct type { unsigned char x0[8]; } x4[6]; } x3; } x0; struct PointView { struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } x0; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; struct pair<md::mun::ViewId, unsigned int> *x1; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; } x2; } x1; struct vector<std::__1::pair<md::mun::ViewId, unsigned int>, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; struct pair<md::mun::ViewId, unsigned int> *x1; struct __compressed_pair<std::__1::pair<md::mun::ViewId, unsigned int> *, std::__1::allocator<std::__1::pair<md::mun::ViewId, unsigned int> > > { struct pair<md::mun::ViewId, unsigned int> *x0; } x2; } x2; struct small_vector<md::mun::PointView::CameraLod, 6> { struct CameraLod *x0; struct CameraLod *x1; struct CameraLod *x2; unsigned long long x3; struct type { unsigned char x0[8]; } x4[6]; } x3; } x1; } *)a0;
- (void)willStopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 withVelocity:(struct CGPoint { double x0; double x1; })a1;
- (void)stopAnimationsExceptBump;
- (void)animatePath:(struct vector<md::mun::CollectionPoint, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; struct CollectionPoint *x1; struct __compressed_pair<md::mun::CollectionPoint *, std::__1::allocator<md::mun::CollectionPoint> > { struct CollectionPoint *x0; } x2; } *)a0 withTarget:(const struct Geocentric<double> { double x0[3]; } *)a1 lookAtTarget:(BOOL)a2 constantLod:(BOOL)a3 prePruneData:(BOOL)a4 completionHandler:(id /* block */)a5;
- (double)zoomLevelAdjustmentForTileSize:(long long)a0;
- (void)setCurrentPoint:(const struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } *)a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; })a0 mapDataAccess:(struct MapDataAccess { struct World *x0; unsigned char x1; unsigned char x2; id x3; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x4; } *)a1 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a2 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; long long x2; } *)a3 cameraDelegate:(id)a4 muninSceneLogic:(struct MuninSceneLogic { void /* function */ **x0; unsigned long long x1; unsigned long long x2; BOOL x3; struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } x4; struct AnimationRunner *x5; struct World *x6; struct LoadingStatusTracker *x7; struct RunLoopController *x8; struct unique_ptr<md::mun::MuninMetadataContainer, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct __compressed_pair<md::mun::MuninMetadataContainer *, std::__1::default_delete<md::mun::MuninMetadataContainer> > { struct MuninMetadataContainer *x0; } x0; } x9; struct vector<md::mun::ViewId, std::__1::allocator<md::mun::ViewId> > { struct ViewId *x0; struct ViewId *x1; struct __compressed_pair<md::mun::ViewId *, std::__1::allocator<md::mun::ViewId> > { struct ViewId *x0; } x2; } x10; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } x11; struct linear_map<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> >, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > >, std::__1::vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > >, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > > > > { struct vector<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > >, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > > > { struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *x0; struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *x1; struct __compressed_pair<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *, std::__1::allocator<std::__1::pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > > > { struct pair<unsigned short, std::__1::unordered_set<gdc::LayerDataRequestKey, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<gdc::LayerDataRequestKey> > > *x0; } x2; } x0; } x12; BOOL x13; struct MuninDebugViewContext { struct vector<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState>, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> > > { struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *x0; struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *x1; struct __compressed_pair<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *, std::__1::allocator<std::__1::pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> > > { struct pair<std::__1::pair<md::mun::ViewId, unsigned int>, md::MuninDebugViewContext::ViewState> *x0; } x2; } x0; BOOL x1; struct Stopwatch { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; } x2; } x14; struct unique_ptr<md::mun::MuninDisplayAnalytic, std::__1::default_delete<md::mun::MuninDisplayAnalytic> > { struct __compressed_pair<md::mun::MuninDisplayAnalytic *, std::__1::default_delete<md::mun::MuninDisplayAnalytic> > { struct MuninDisplayAnalytic *x0; } x0; } x15; struct unique_ptr<md::mun::MuninNavigation, std::__1::default_delete<md::mun::MuninNavigation> > { struct __compressed_pair<md::mun::MuninNavigation *, std::__1::default_delete<md::mun::MuninNavigation> > { struct MuninNavigation *x0; } x0; } x16; struct unique_ptr<md::mun::MuninIntersector, std::__1::default_delete<md::mun::MuninIntersector> > { struct __compressed_pair<md::mun::MuninIntersector *, std::__1::default_delete<md::mun::MuninIntersector> > { struct MuninIntersector *x0; } x0; } x17; struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock> > { struct __compressed_pair<md::FadeEffectBlock *, std::__1::default_delete<md::FadeEffectBlock> > { struct FadeEffectBlock *x0; } x0; } x18; struct unique_ptr<md::FadeEffectBlock, std::__1::default_delete<md::FadeEffectBlock> > { struct __compressed_pair<md::FadeEffectBlock *, std::__1::default_delete<md::FadeEffectBlock> > { struct FadeEffectBlock *x0; } x0; } x19; struct vector<md::MuninSceneEvent, std::__1::allocator<md::MuninSceneEvent> > { struct MuninSceneEvent *x0; struct MuninSceneEvent *x1; struct __compressed_pair<md::MuninSceneEvent *, std::__1::allocator<md::MuninSceneEvent> > { struct MuninSceneEvent *x0; } x2; } x20; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x21; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x22; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x23; struct optional<float> { BOOL x0; union ValueUnion { unsigned char x0[4]; float x1; } x1; } x24; struct MuninSettings { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; unsigned char x11; unsigned short x12; int x13; unsigned char x14; unsigned char x15; struct Unit<RadianUnitDescription, double> { double x0; } x16; struct Unit<RadianUnitDescription, double> { double x0; } x17; struct Unit<RadianUnitDescription, double> { double x0; } x18; struct Unit<RadianUnitDescription, double> { double x0; } x19; struct Unit<RadianUnitDescription, double> { double x0; } x20; struct Unit<RadianUnitDescription, double> { double x0; } x21; struct Unit<RadianUnitDescription, double> { double x0; } x22; double x23; double x24; double x25; double x26; } x25; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *x0; unsigned short *x1; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *x0; } x2; } x26; BOOL x27; BOOL x28; unsigned long long x29; struct shared_ptr<md::MuninSceneLogic::ValidState> { struct ValidState *x0; struct __shared_weak_count *x1; } x30; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x31; struct once_flag { unsigned long long x0; } x32; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x33; struct shared_ptr<ggl::Texture2D> { struct Texture2D *x0; struct __shared_weak_count *x1; } x34; } *)a5;
- (BOOL)moveToPoint:(const struct CollectionPoint { unsigned long long x0; struct RigidTransform<double, float> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<float> { struct Matrix<float, 3, 1> { float x0[3]; } x0; float x1; } x1; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; struct Mercator3<double> { double x0[3]; } x3; unsigned long long x4; struct small_vector<md::mun::PhotoInfo, 6> { struct PhotoInfo *x0; struct PhotoInfo *x1; struct PhotoInfo *x2; unsigned long long x3; struct type { unsigned char x0[288]; } x4[6]; } x5; float x6; unsigned int x7; unsigned short x8; unsigned char x9; unsigned char x10; unsigned char x11; } *)a0 withHeading:(struct Unit<RadianUnitDescription, double> { double x0; })a1 withPitch:(struct Unit<RadianUnitDescription, double> { double x0; })a2 animated:(BOOL)a3 completionHandler:(id /* block */)a4;
- (void)updateWithTimestamp:(double)a0;
- (struct Unit<RadianUnitDescription, double> { double x0; })_verticalFieldOfView:(struct Unit<RadianUnitDescription, double> { double x0; })a0;

@end

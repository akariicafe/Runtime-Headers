@class NSString;
@protocol MDRenderTarget;

@interface VKAnchorWrapper : NSObject <VKAnchorDelegate> {
    struct shared_ptr<md::Anchor> { struct Anchor *__ptr_; struct __shared_weak_count *__cntrl_; } _anchor;
    struct CGPoint { double x; double y; } _screenPointInCanvas;
    struct CGSize { double width; double height; } _canvasSize;
    const struct CameraContext { struct SingleCameraContext { struct CameraView { struct Camera { struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } x0; struct ViewSize { unsigned short x0; unsigned short x1; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<MeterUnitDescription, double> { double x0; } x3; struct Unit<MeterUnitDescription, double> { double x0; } x4; double x5; struct Matrix<float, 2, 1> { float x0[2]; } x6; } x0; struct PerspectiveView<double> { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x0; struct Matrix<double, 4, 4> { double x0[16]; } x1; struct Matrix<double, 4, 4> { double x0[16]; } x2; struct Matrix<double, 4, 4> { double x0[16]; } x3; double x4; double x5; struct ViewSize { unsigned short x0; unsigned short x1; } x6; int x7; struct Unit<RadianUnitDescription, double> { double x0; } x8; double x9; double x10; } x1; struct Frustum<double> { struct array<gm::Plane3<double>, 6> { struct Plane3<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x0[6]; } x0; struct array<gm::Matrix<double, 3, 1>, 8> { struct Matrix<double, 3, 1> { double x0[3]; } x0[8]; } x1; } x2; } x0; struct CGSize { double x0; double x1; } x1; double x2; struct MercatorCameraContext { struct SingleCameraContext *x0; struct CGSize { double x0; double x1; } x1; double x2; struct Matrix<double, 4, 4> { double x0[16]; } x3; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; } x4; struct ConvexHull2<double> { struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > { struct Matrix<double, 2, 1> *x0; } x2; } x0; } x5; BOOL x6; double x7; double x8; double x9; struct Matrix<double, 3, 1> { double x0[3]; } x10; struct Matrix<double, 3, 1> { double x0[3]; } x11; double x12; double x13; BOOL x14; } x3; struct Matrix<double, 3, 1> { double x0[3]; } x4; struct Matrix<double, 3, 1> { double x0[3]; } x5; struct Matrix<double, 3, 1> { double x0[3]; } x6; struct Matrix<double, 4, 4> { double x0[16]; } x7; struct View<double> { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x0; struct Matrix<double, 4, 4> { double x0[16]; } x1; struct Matrix<double, 4, 4> { double x0[16]; } x2; struct Matrix<double, 4, 4> { double x0[16]; } x3; double x4; double x5; struct ViewSize { unsigned short x0; unsigned short x1; } x6; int x7; } x8; double x9; double x10; } x0; struct ViewTransform { unsigned char x0; struct CameraView { struct Camera { struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } x0; struct ViewSize { unsigned short x0; unsigned short x1; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<MeterUnitDescription, double> { double x0; } x3; struct Unit<MeterUnitDescription, double> { double x0; } x4; double x5; struct Matrix<float, 2, 1> { float x0[2]; } x6; } x0; struct PerspectiveView<double> { struct RigidTransform<double, double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; struct Quaternion<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x1; } x0; struct Matrix<double, 4, 4> { double x0[16]; } x1; struct Matrix<double, 4, 4> { double x0[16]; } x2; struct Matrix<double, 4, 4> { double x0[16]; } x3; double x4; double x5; struct ViewSize { unsigned short x0; unsigned short x1; } x6; int x7; struct Unit<RadianUnitDescription, double> { double x0; } x8; double x9; double x10; } x1; struct Frustum<double> { struct array<gm::Plane3<double>, 6> { struct Plane3<double> { struct Matrix<double, 3, 1> { double x0[3]; } x0; double x1; } x0[6]; } x0; struct array<gm::Matrix<double, 3, 1>, 8> { struct Matrix<double, 3, 1> { double x0[3]; } x0[8]; } x1; } x2; } x1; struct Matrix<double, 3, 1> { double x0[3]; } x2; struct Matrix<double, 3, 1> { double x0[3]; } x3; struct Matrix<double, 3, 1> { double x0[3]; } x4; float x5; double x6; struct Matrix<double, 4, 4> { double x0[16]; } x7; struct Matrix<double, 4, 4> { double x0[16]; } x8; BOOL x9; struct Geocentric<double> { double x0[3]; } x10; struct Mercator3<double> { double x0[3]; } x11; double x12; double x13; double x14; } x1; struct unique_ptr<md::SingleCameraContext, std::__1::default_delete<md::SingleCameraContext> > { struct __compressed_pair<md::SingleCameraContext *, std::__1::default_delete<md::SingleCameraContext> > { struct SingleCameraContext *x0; } x0; } x2; } *_cameraContext;
    struct AnchorManager { void /* function */ **x0; BOOL x1; struct GlobeView *x2; struct MercatorTerrainHeightCache *x3; struct unordered_set<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *> > { struct __hash_table<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *>, std::__1::allocator<std::__1::__hash_node<md::Anchor *, void *> > > { struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> { struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<md::Anchor *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<md::Anchor *> > { float x0; } x3; } x0; } x4; } *_anchorManager;
    struct Coordinate2D<Degrees, double> { struct Unit<DegreeUnitDescription, double> { double _value; } latitude; struct Unit<DegreeUnitDescription, double> { double _value; } longitude; } _lastCoordinate;
    BOOL _isUpdating;
    double _pointsPerMeter;
}

@property (nonatomic) id<MDRenderTarget> displayLayer;
@property (readonly, nonatomic) struct { double x0; double x1; } coordinate;
@property (nonatomic) BOOL followsTerrain;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void).cxx_destruct;
- (struct CGPoint { double x0; double x1; })pointInLayer:(id)a0 bound:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)dealloc;
- (void)destroyAnchor;
- (struct shared_ptr<md::Anchor> { struct Anchor *x0; struct __shared_weak_count *x1; })_anchorWithContext:(struct AnchorManager { void /* function */ **x0; BOOL x1; struct GlobeView *x2; struct MercatorTerrainHeightCache *x3; struct unordered_set<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *> > { struct __hash_table<md::Anchor *, std::__1::hash<md::Anchor *>, std::__1::equal_to<md::Anchor *>, std::__1::allocator<md::Anchor *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *>, std::__1::allocator<std::__1::__hash_node<md::Anchor *, void *> > > { struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> { struct __hash_node_base<std::__1::__hash_node<md::Anchor *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<md::Anchor *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<md::Anchor *> > { float x0; } x3; } x0; } x4; } *)a0;
- (void)_updateCachedPoint;
- (void)anchorWorldPointDidChange:(void *)a0;
- (void)updateIfNeeded;
- (void)layoutWithContext:(const struct LayoutContext { id x0; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x1; unsigned char x2; struct VKEdgeInsets { float x0; float x1; float x2; float x3; } x3; struct VKEdgeInsets { float x0; float x1; float x2; float x3; } x4; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh *x0; struct __shared_weak_count *x1; } x5; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh *x0; struct __shared_weak_count *x1; } x6; struct shared_ptr<ggl::CommonMesh::Pos2UVMesh> { struct Pos2UVMesh *x0; struct __shared_weak_count *x1; } x7; struct StencilManager { unsigned char x0; unsigned char x1; unsigned char x2; struct ClearItem { unsigned char x0; struct Matrix<float, 4, 1> { float x0[4]; } x1; BOOL x2; float x3; unsigned char x4; unsigned int x5; } x3; } x8; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x9; struct Loader { struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > { struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > { struct LoaderImpl *x0; } x0; } x0; } x10; struct Loader *x11; double x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x17; float x18; struct View *x19; struct View *x20; struct Viewport *x21; struct ARContext *x22; unsigned long long x23; unsigned long long x24; struct unordered_map<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > > > > { struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::hash<unsigned long long>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<md::BaseObjectHolder, std::__1::default_delete<md::BaseObjectHolder> > >, std::__1::equal_to<unsigned long long>, true> > { float x0; } x3; } x0; } x25; } *)a0;
- (double)pointOffsetForDistanceOffset:(double)a0;
- (id).cxx_construct;

@end

@class NSString, VKRouteContext;

@interface VKRouteContextObserverThunk : NSObject <VKRouteContextObserver> {
    struct LabelTransitSupport { void /* function */ **x0; void /* function */ **x1; struct LabelManager *x2; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager *x0; struct __shared_weak_count *x1; } x3; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x5; struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; double x11; struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalPointFeature> *x0; struct shared_ptr<md::LabelExternalPointFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalPointFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x12; struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct shared_ptr<md::LabelFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x13; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > { unsigned long long x0; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, geo::StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; struct StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } x14; struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalRoadFeature> *x0; struct shared_ptr<md::LabelExternalRoadFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalRoadFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x15; struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct shared_ptr<md::LabelFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x16; struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>, md::LabelExternalRoadFeatureLess, geo::StdAllocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, mdm::Allocator> > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, md::LabelExternalRoadFeatureLess, true>, geo::StdAllocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, mdm::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, void *>, mdm::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x0; } x2; } x0; } x17; struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x18; struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute *x0; struct __shared_weak_count *x1; } x19; struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine *x0; struct __shared_weak_count *x1; } x20; unsigned int x21; struct unordered_map<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, geo::StdAllocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, mdm::Allocator> > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> **x0; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > { unsigned long long x0; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *x0; } x0; struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x0; } x3; } x0; } x22; } *_transitSupport;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKRouteContext *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _routeContext;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)routeContextStateDidChange:(id)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (id)initWithRouteContext:(id)a0 transitSupport:(struct LabelTransitSupport { void /* function */ **x0; void /* function */ **x1; struct LabelManager *x2; struct shared_ptr<md::DataOverrideManager> { struct DataOverrideManager *x0; struct __shared_weak_count *x1; } x3; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x4; struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x5; struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; double x11; struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalPointFeature> *x0; struct shared_ptr<md::LabelExternalPointFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalPointFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x12; struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct shared_ptr<md::LabelFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x13; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<unsigned long long, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> > { unsigned long long x0; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, geo::StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; struct StdAllocator<std::__1::__hash_node<unsigned long long, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } x14; struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalRoadFeature> *x0; struct shared_ptr<md::LabelExternalRoadFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelExternalRoadFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x15; struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct shared_ptr<md::LabelFeature> *x1; struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> > { struct shared_ptr<md::LabelFeature> *x0; struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } x16; struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature>, md::LabelExternalRoadFeatureLess, geo::StdAllocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, mdm::Allocator> > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, md::LabelExternalRoadFeatureLess, true>, geo::StdAllocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, mdm::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, void *>, mdm::Allocator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::LabelFeature> >, md::LabelExternalRoadFeatureLess, true> > { unsigned long long x0; } x2; } x0; } x17; struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **x0; id x1; struct _retain_objc { } x2; struct _release_objc { } x3; } x18; struct shared_ptr<md::LabelTransitRoute> { struct LabelTransitRoute *x0; struct __shared_weak_count *x1; } x19; struct shared_ptr<md::LabelTransitRouteLine> { struct LabelTransitRouteLine *x0; struct __shared_weak_count *x1; } x20; unsigned int x21; struct unordered_map<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, geo::StdAllocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, mdm::Allocator> > { struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> **x0; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> > { unsigned long long x0; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *> *> *x0; } x0; struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, void *>, mdm::Allocator> { struct Allocator *x0; } x1; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, geo::Color<unsigned char, 4, geo::ColorSpace::Linear> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> > { float x0; } x3; } x0; } x22; } *)a1;

@end

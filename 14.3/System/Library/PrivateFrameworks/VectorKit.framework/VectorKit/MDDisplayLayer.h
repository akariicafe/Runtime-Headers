@class CALayer, NSString, VKSharedResources;
@protocol GGLRenderQueueSource, GGLLayer;

@interface MDDisplayLayer : NSObject <GGLLayerDelegate, MDRenderTarget> {
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    struct RenderQueue { struct PassDescriptor { struct AttachmentActions { int x0; int x1; } x0[4]; struct AttachmentActions { int x0; int x1; } x1; struct AttachmentActions { int x0; int x1; } x2; } x0; struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct Pass *x1; struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct CommandBuffer **x1; struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction *x0; struct __shared_weak_count *x1; } x3; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; BOOL x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; } *_activeRenderQueue;
    struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKSharedResources *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _sharedResources;
    struct deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()> > > { struct __split_buffer<std::__1::function<void ()> *, std::__1::allocator<std::__1::function<void ()> *> > { struct function<void ()> **__first_; struct function<void ()> **__begin_; struct function<void ()> **__end_; struct __compressed_pair<std::__1::function<void ()> **, std::__1::allocator<std::__1::function<void ()> *> > { struct function<void ()> **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()> > > { unsigned long long __value_; } __size_; } _completionHandlers;
    struct RenderTargetFormat { int colorFormats[4]; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _sRGBFormat;
    struct Device { int x0; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x1; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources *x0; } x0; } x2; } *_device;
    struct Renderer { void /* function */ **x0; struct Device *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; BOOL x5; float x6; unsigned long long x7; struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> > { struct shared_ptr<ggl::DebugRenderer> *x0; struct shared_ptr<ggl::DebugRenderer> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> > { struct shared_ptr<ggl::DebugRenderer> *x0; struct StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x8; struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> > { struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> > { struct RenderQueue *x0; } x0; } x9; struct shared_ptr<ggl::CommonLibrary> { struct CommonLibrary *x0; struct __shared_weak_count *x1; } x10; struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences> > { struct __compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences> > { struct RenderResourceFences *x0; } x0; } x11; struct Texture2D *x12; struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > { struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> > { struct CommandBuffer *x0; } x0; } x13; } *_renderer;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _debugConsoleManagerCreationLock;
    struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> > { struct __compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> > { struct DebugConsoleManager *__value_; } __ptr_; } _debugConsoleManager;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > { struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > { struct RenderTarget *__value_; } __ptr_; } _sRGBRenderTarget;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> > { struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > { struct RenderBuffer *__value_; } __ptr_; } _depthStencil;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBMsaaTexture;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBColorTextures[3];
    struct RenderTargetFormat { int colorFormats[4]; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _linearFormat;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > { struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > { struct RenderTarget *__value_; } __ptr_; } _linearRenderTarget;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearMsaaTexture;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearTexture;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearColorTextures[3];
    BOOL _requiresMultisampling;
    struct CGContext { } *_snapshotContext;
    BOOL _readPixels;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _bounds;
    double _contentsScale;
    unsigned long long _signpostId;
}

@property (readonly, nonatomic) CALayer<GGLLayer> *layer;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) double contentScale;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (nonatomic) id<GGLRenderQueueSource> renderSource;
@property (readonly, nonatomic) BOOL multiSample;
@property (readonly, nonatomic) BOOL supportsFramebufferFetch;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } *format;
@property (readonly, nonatomic) struct Renderer { void /* function */ **x0; struct Device *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; BOOL x5; float x6; unsigned long long x7; struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> > { struct shared_ptr<ggl::DebugRenderer> *x0; struct shared_ptr<ggl::DebugRenderer> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> > { struct shared_ptr<ggl::DebugRenderer> *x0; struct StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x8; struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> > { struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> > { struct RenderQueue *x0; } x0; } x9; struct shared_ptr<ggl::CommonLibrary> { struct CommonLibrary *x0; struct __shared_weak_count *x1; } x10; struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences> > { struct __compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences> > { struct RenderResourceFences *x0; } x0; } x11; struct Texture2D *x12; struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > { struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> > { struct CommandBuffer *x0; } x0; } x13; } *renderer;
@property (readonly, nonatomic) BOOL shouldRasterize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPixels;
@property (readonly, nonatomic) struct RenderTarget { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } x5; struct Texture *x6[4]; struct Texture *x7[4]; struct Texture *x8; BOOL x9; } *finalRenderTarget;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } *linearFormat;
@property (readonly, nonatomic) struct RenderTarget { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } x5; struct Texture *x6[4]; struct Texture *x7[4]; struct Texture *x8; BOOL x9; } *linearRenderTarget;
@property (readonly, nonatomic) float averageFPS;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setNeedsDisplayOnBoundsChange:(BOOL)a0;
- (void)didEnterBackground;
- (BOOL)isDelayedRenderQueueConsumptionSupported;
- (void)didPresent;
- (struct shared_ptr<ggl::BitmapDataBase> { struct BitmapDataBase *x0; struct __shared_weak_count *x1; })bitmapData;
- (BOOL)hasRenderTarget;
- (void)didUpdateFrameTexture;
- (void).cxx_destruct;
- (void)dealloc;
- (void)destroyRenderTarget;
- (void)drawToTexture:(struct Texture { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; int x5; int x6; int x7; int x8; unsigned int x9; int x10; unsigned int x11; unsigned int x12; } *)a0 withRenderQueue:(struct RenderQueue { struct PassDescriptor { struct AttachmentActions { int x0; int x1; } x0[4]; struct AttachmentActions { int x0; int x1; } x1; struct AttachmentActions { int x0; int x1; } x2; } x0; struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct Pass *x1; struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct CommandBuffer **x1; struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction *x0; struct __shared_weak_count *x1; } x3; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; BOOL x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; } *)a1 completionHandler:(id /* block */)a2;
- (void)drawToTexture:(struct Texture { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; int x5; int x6; int x7; int x8; unsigned int x9; int x10; unsigned int x11; unsigned int x12; } *)a0 withRenderQueue:(struct RenderQueue { struct PassDescriptor { struct AttachmentActions { int x0; int x1; } x0[4]; struct AttachmentActions { int x0; int x1; } x1; struct AttachmentActions { int x0; int x1; } x2; } x0; struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct Pass *x1; struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct CommandBuffer **x1; struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction *x0; struct __shared_weak_count *x1; } x3; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; BOOL x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; } *)a1;
- (void)willPresent;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toLayer:(id)a1;
- (void)createRenderTarget;
- (void)expandedPerformanceHUD:(id)a0;
- (void)setBackgroundColor:(struct CGColor { } *)a0;
- (void)setContentsGravity:(id)a0;
- (struct RenderQueue { struct PassDescriptor { struct AttachmentActions { int x0; int x1; } x0[4]; struct AttachmentActions { int x0; int x1; } x1; struct AttachmentActions { int x0; int x1; } x2; } x0; struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct Pass *x1; struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct CommandBuffer **x1; struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction *x0; struct __shared_weak_count *x1; } x3; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; BOOL x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; } *)_renderQueueForTimestamp:(double)a0 prepareHandler:(id /* block */)a1;
- (void)_didReadPixels:(struct shared_ptr<ggl::BitmapDataBase> { struct BitmapDataBase *x0; struct __shared_weak_count *x1; } *)a0;
- (void)setOpaque:(BOOL)a0;
- (void)didReceiveMemoryWarning;
- (struct RenderQueue { struct PassDescriptor { struct AttachmentActions { int x0; int x1; } x0[4]; struct AttachmentActions { int x0; int x1; } x1; struct AttachmentActions { int x0; int x1; } x2; } x0; struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct Pass *x1; struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> > { struct Pass *x0; struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct CommandBuffer **x1; struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator> > { struct CommandBuffer **x0; struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x2; struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction *x0; struct __shared_weak_count *x1; } x3; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x4; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x5; struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct Texture **x1; struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator> > { struct Texture **x0; struct StdAllocator<ggl::Texture *, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x6; BOOL x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x8; } *)renderQueueForTimestamp:(double)a0;
- (id).cxx_construct;
- (void)enablePerformanceHUD:(id)a0;
- (void)prepareTexture:(const struct shared_ptr<ggl::Texture2DAbstract> { struct Texture2DAbstract *x0; struct __shared_weak_count *x1; } *)a0;
- (void)willUpdateFrameTexture;
- (id)initWithContentScale:(double)a0 shouldRasterize:(BOOL)a1 taskContext:(const struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; } *)a2 device:(struct Device { int x0; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x1; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources *x0; } x0; } x2; } *)a3 sharedResources:(id)a4 signpostId:(unsigned long long)a5;
- (void)drawInContext:(struct CGContext { } *)a0;
- (void)disablePerformanceHUD:(id)a0;
- (void)renderWithTimestamp:(double)a0 completion:(struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24]; } x0; struct __base<void ()> *x1; } x0; })a1;
- (struct DebugConsole { void /* function */ **x0; struct Matrix<float, 2, 1> { float x0[2]; } x1; struct Matrix<float, 2, 1> { float x0[2]; } x2; struct Matrix<float, 2, 1> { float x0[2]; } x3; struct Matrix<float, 2, 1> { float x0[2]; } x4; int x5; int x6; unsigned long long x7; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x8; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x9; struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct DataWrite<ggl::ColoredText::My> *x0; } x0; } x10; unsigned long long x11; struct Matrix<float, 2, 1> *x12; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x13; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x14; float x15; BOOL x16; struct CommonLibrary *x17; struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } x18; } *)debugConsoleForId:(int)a0;

@end

@interface VKBuildingGroup : VKPolygonalItemGroup {
    struct optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > { struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__begin_; struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > { struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _strokeMeshInfo;
    struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> > { BOOL _hasValue; union ValueUnion { unsigned char data[152]; struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> { struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__begin_; struct pair<unsigned short, unsigned int> *__end_; struct __compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > { struct pair<unsigned short, unsigned int> *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_; struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::PolygonBase::CompressedVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; } type; } _value; } _fillMeshInfoForPointyRoofs;
    struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > { struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__begin_; struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > { struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__value_; } __end_cap_; } _strokeMeshes;
    struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_; struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_; struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_; } __end_cap_; } _fillMeshesForPointyRoofs;
    struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > > { struct __compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > > { struct MeshVendor<ggl::BuildingFacade::BuildingMesh> *__value_; } __ptr_; } _extrusionFillMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > { struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > { struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *__value_; } __ptr_; } _extrusionStrokeMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > { struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > { struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *__value_; } __ptr_; } _pointyRoofFillMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > { struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > { struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *__value_; } __ptr_; } _pointyRoofStrokeMeshVendor;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _extrusionFillCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _extrusionStrokeCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _fillCullingGroupsForPointyRoofs;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _pointyRoofFillCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__begin_; struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__end_; struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > { struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *__value_; } __end_cap_; } _pointyRoofStrokeCullingGroups;
    struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__begin_; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__end_; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__value_; } __end_cap_; } _styleQueries;
    struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__begin_; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__end_; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__value_; } __end_cap_; } _flatRoofStyleQueries;
    struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__begin_; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__end_; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__value_; } __end_cap_; } _selectedStyleQueries;
    struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__begin_; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__end_; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *__value_; } __end_cap_; } _selectedFlatRoofStyleQueries;
}

- (id)initWithStyleQuery:(struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } *)a0 tileZoom:(float)a1 fixedAroundCentroid:(const struct Matrix<float, 2, 1> { float x0[2]; } *)a2 contentScale:(float)a3;
- (void)prepareForBuilding:(struct { struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } x0; unsigned long long x1; unsigned long long x2; BOOL x3; BOOL x4; } *)a0 forRoofStyle:(unsigned char)a1 scaleThreshold:(float)a2;
- (unsigned char)maxAttributeSetsPerGroup;
- (void)updateWithStyleManager:(const struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; } *)a0;
- (void).cxx_destruct;
- (struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *x0; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *x1; struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > { struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *x0; } x2; } *)styleQueriesForPointyRoofs:(BOOL)a0 selected:(BOOL)a1;
- (const struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> { struct vector<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> >, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> > *x0; struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> > *x1; struct __compressed_pair<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> > *, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> > *x0; struct StdAllocator<std::__1::unique_ptr<ggl::BuildingPointyRoof::BuildingMesh, std::__1::default_delete<ggl::BuildingPointyRoof::BuildingMesh> >, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x0; } *)pointyRoofFillMeshVendor;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToPointyRoofFillRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;
- (void)willAddDataWithAccessor:(struct ResourceAccessor { void /* function */ **x0; } *)a0;
- (void)didFinishAddingData;
- (BOOL)addPointyRoofForBuilding:(struct { struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } x0; unsigned long long x1; unsigned long long x2; BOOL x3; BOOL x4; } *)a0 buildingModel:(unsigned char)a1 scaleThreshold:(float)a2 styleIndex:(float)a3;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToExtrusionStrokeRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;
- (BOOL)canConstructPointyRoofForPolygon:(struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } *)a0 building:(struct { struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } x0; unsigned long long x1; unsigned long long x2; BOOL x3; BOOL x4; } *)a1 buildingModel:(unsigned char)a2 scaleThreshold:(float)a3;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToPointyRoofTopRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToExtrusionFillRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;
- (id).cxx_construct;
- (const struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> { struct vector<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *x0; struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *x1; struct __compressed_pair<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *x0; struct StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x0; } *)extrusionStrokeMeshVendor;
- (const struct MeshVendor<ggl::BuildingFacade::BuildingMesh> { struct vector<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> >, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> > *x0; struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> > *x1; struct __compressed_pair<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> > *, geo::StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> > *x0; struct StdAllocator<std::__1::unique_ptr<ggl::BuildingFacade::BuildingMesh, std::__1::default_delete<ggl::BuildingFacade::BuildingMesh> >, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x0; } *)extrusionFillMeshVendor;
- (struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > { struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *x0; struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > { struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *x0; } x2; } *)strokeMeshes;
- (void)addExtrusionForBuilding:(struct { struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } x0; unsigned long long x1; unsigned long long x2; BOOL x3; BOOL x4; } *)a0 index:(unsigned long long)a1 ofTotal:(unsigned long long)a2;
- (struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *x0; struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *x1; struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > { struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *x0; } x2; } *)fillMeshesForPointyRoofs;
- (void)addBuilding:(struct { struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } x0; unsigned long long x1; unsigned long long x2; BOOL x3; BOOL x4; } *)a0 index:(unsigned long long)a1 ofTotal:(unsigned long long)a2 accessor:(struct ResourceAccessor { void /* function */ **x0; } *)a3 triangulator:(struct Triangulator<float> { struct Triangulator<float, unsigned short> { struct NodePool { struct stack<geo::Triangulator<float, unsigned short>::Node *, std::__1::vector<geo::Triangulator<float, unsigned short>::Node *, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *> > > { struct vector<geo::Triangulator<float, unsigned short>::Node *, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *> > { struct Node **x0; struct Node **x1; struct __compressed_pair<geo::Triangulator<float, unsigned short>::Node **, std::__1::allocator<geo::Triangulator<float, unsigned short>::Node *> > { struct Node **x0; } x2; } x0; } x0; } x0; struct GeometricHasher { struct AABB { float x0[2]; float x1[2]; } x0; float x1; } x1; unsigned long long x2; int x3; } x0; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *x0; unsigned short *x1; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *x0; } x2; } x1; } *)a4 prepareExtrusion:(BOOL)a5 forRoofStyle:(unsigned char)a6 scaleThreshold:(float)a7;
- (const struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> { struct vector<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *x0; struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *x1; struct __compressed_pair<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *, geo::StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, ggl::Allocator> > { struct unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> > *x0; struct StdAllocator<std::__1::unique_ptr<ggl::PrefilteredLine::PrefilteredLineMesh, std::__1::default_delete<ggl::PrefilteredLine::PrefilteredLineMesh> >, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x0; } *)pointyRoofStrokeMeshVendor;
- (const struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } *)commitRangesToPointyRoofStrokeRenderItemBatcher:(struct Batcher { struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x0; struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct MultiRange<unsigned long> *x1; struct __compressed_pair<gm::MultiRange<unsigned long> *, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> > { struct MultiRange<unsigned long> *x0; struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> { struct Allocator *x0; } x1; } x2; } x1; struct MultiRange<unsigned long> { struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; struct Range<unsigned long> *x1; struct __compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > > { struct Range<unsigned long> *x0; } x2; } x0; } x2; } *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; struct __base<bool (unsigned long long)> *x1; } x0; })a3;

@end

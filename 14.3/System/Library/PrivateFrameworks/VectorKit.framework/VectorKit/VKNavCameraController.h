@class NSString, VKDetachedNavGestureCameraBehavior, VKGestureCameraBehavior, VKSceneConfiguration, VKTimedAnimation, VKScreenCanvas, VKAttachedNavGestureCameraBehavior, GEOMapRegion, VKNavContext;
@protocol VKNavGestureCameraBehavior, VKInteractiveMap;

@interface VKNavCameraController : VKCameraController <VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver> {
    unsigned char _cameraType;
    unsigned char _headingType;
    struct Unit<RadianUnitDescription, double> { double _value; } _puckCourse;
    struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _puckCoordinate;
    struct Unit<RadianUnitDescription, double> { double _value; } _headingDelta;
    struct Unit<RadianUnitDescription, double> { double _value; } _headingMinDelta;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<RadianUnitDescription, double> { double _value; } _pitch; struct Unit<RadianUnitDescription, double> { double _value; } _heading; struct Unit<RadianUnitDescription, double> { double _value; } _roll; } _lastCalculatedCameraFrame;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<RadianUnitDescription, double> { double _value; } _pitch; struct Unit<RadianUnitDescription, double> { double _value; } _heading; struct Unit<RadianUnitDescription, double> { double _value; } _roll; } _cameraFrame;
    BOOL _needsUpdate;
    struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _pitchSpring;
    struct Spring<double, 1, gdc::SpringType::Angular> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _headingSpring;
    struct Spring<double, 1, gdc::SpringType::Linear> { double _position; double _velocity; double _restingPosition; double _kSpring; double _kDamper; } _distanceFromTargetSpring;
    struct Spring<double, 2, gdc::SpringType::Linear> { struct Matrix<double, 2, 1> { double _e[2]; } _position; struct Matrix<double, 2, 1> { double _e[2]; } _velocity; struct Matrix<double, 2, 1> { double _e[2]; } _restingPosition; double _kSpring; double _kDamper; } _screenPositionSpring;
    struct Unit<MeterUnitDescription, double> { double _value; } _cameraDistanceFromTarget;
    struct Unit<RadianUnitDescription, double> { double _value; } _cameraPitch;
    double _previousUpdateTime;
    double _maxZoomScale;
    double _minZoomScale;
    VKGestureCameraBehavior<VKNavGestureCameraBehavior> *_gestureBehavior;
    VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;
    VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;
    BOOL _isDetached;
    BOOL _panning;
    BOOL _rotating;
    BOOL _pitching;
    BOOL _zooming;
    VKTimedAnimation *_transitionAnimation;
    VKTimedAnimation *_snapPitchAnimation;
    VKTimedAnimation *_snapHeadingAnimation;
    struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _target; struct Unit<MeterUnitDescription, double> { double _value; } _distanceFromTarget; struct Unit<RadianUnitDescription, double> { double _value; } _pitch; struct Unit<RadianUnitDescription, double> { double _value; } _heading; struct Unit<RadianUnitDescription, double> { double _value; } _roll; } _transitionFrame;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } _currentStyleName;
    struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > > { struct Coordinate3D<Radians, double> *__begin_; struct Coordinate3D<Radians, double> *__end_; struct __compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > > { struct Coordinate3D<Radians, double> *__value_; } __end_cap_; } _coordinatesToFrame;
    unsigned char _styleManeuversToFrame;
    unsigned char _maneuversToFrame;
    unsigned char _styleLegsToFrame;
    double _minCameraHeight;
    double _maxCameraHeight;
    struct Unit<RadianUnitDescription, double> { double _value; } _minCameraPitch;
    struct Unit<RadianUnitDescription, double> { double _value; } _maxCameraPitch;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _previousMapEdgeInsets;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInset;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _framingEdgeInsetProportional;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckMovementBoundsMin;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckMovementBoundsMax;
    struct Matrix<float, 2, 1> { float _e[2]; } _puckScreenPosition;
    double _minHeightDeltaChangeHorizontal;
    double _maxHeightDeltaChangeHorizontal;
    double _minHeightDeltaChangeVertical;
    double _maxHeightDeltaChangeVertical;
    double _halfPuckSize;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _viewableScreenRect;
    struct Box<double, 2> { struct Matrix<double, 2, 1> { double _e[2]; } _minimum; struct Matrix<double, 2, 1> { double _e[2]; } _maximum; } _framingScreenRect;
    BOOL _enablePan;
    BOOL _enableZoom;
    BOOL _enablePitch;
    BOOL _enableRotate;
    float _panReturnDelayTime;
    unsigned char _alternateFramingSource;
    double _maxFramingDistance;
    double _framingDistanceAfterManeuver;
    VKNavContext *_navContext;
    struct { double latitude; double longitude; } _locationCoordinate;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeCoordinate;
    BOOL _frameAllGroupedManeuvers;
    unsigned char _maxManeuversToFrame;
    BOOL _ignorePointsBehind;
    struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _routeFocusCoordinate;
    unsigned long long _lastTargetStyleIdentifier;
    double _desiredZoomScale;
    float _animationTime;
    BOOL _isTracking;
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    double _depthNear;
    BOOL _leftHanded;
    BOOL _sentZoomNotification;
    BOOL _enableDynamicFrameRate;
    struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double _value; } latitude; struct Unit<RadianUnitDescription, double> { double _value; } longitude; struct Unit<MeterUnitDescription, double> { double _value; } altitude; } _cornerCoordinates[4];
    struct WindowedSampler<60> { double _min; double _max; double _avg; double _sum; struct optional<unsigned long> { BOOL _hasValue; union ValueUnion { unsigned char data[8]; unsigned long long type; } _value; } _idx; struct array<double, 60> { double __elems_[60]; } _samples; } _pixelSamples;
}

@property (nonatomic) VKScreenCanvas<VKInteractiveMap> *screenCanvas;
@property (nonatomic) VKSceneConfiguration *sceneConfiguration;
@property (nonatomic) double zoomScale;
@property (nonatomic) long long baseDisplayRate;
@property (nonatomic) struct VKEdgeInsets { float top; float left; float bottom; float right; } clientFramingInsets;
@property (nonatomic) struct { double x0; double x1; } centerCoordinate;
@property (nonatomic) double distanceFromCenterCoordinate;
@property (nonatomic) double heading;
@property (nonatomic) double pitch;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) BOOL isPitched;
@property (readonly, nonatomic) BOOL isRotated;
@property (readonly, nonatomic) BOOL isFullyPitched;
@property (readonly, nonatomic) struct MapDataAccess { struct World *x0; unsigned char x1; unsigned char x2; id x3; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x4; } *mapDataAccess;
@property (readonly, nonatomic) struct AnimationRunner { struct MapEngine *x0; } *animationRunner;
@property (readonly, nonatomic) struct RunLoopController { struct MapEngine *x0; long long x1; long long x2; } *runLoopController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)puckAnimator:(id)a0 updatedPosition:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a1 course:(const struct Unit<RadianUnitDescription, double> { double x0; } *)a2;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (void)setCamera:(id)a0;
- (BOOL)isGesturing;
- (id)detailedDescription;
- (void)stopAnimations;
- (BOOL)wantsTimerTick;
- (void)startWithPounce:(BOOL)a0 startLocation:(struct { double x0; double x1; })a1 startCourse:(double)a2 pounceCompletionHandler:(id /* block */)a3;
- (id)init;
- (void)setCameraFrame:(struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })a0;
- (void).cxx_destruct;
- (void)stylesheetDidChange;
- (void)_setNeedsUpdate;
- (void)zoom:(double)a0 withFocusPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 oldFactor:(double)a1 newFactor:(double)a2;
- (void)dealloc;
- (void)stop;
- (void)puckAnimator:(id)a0 updatedTargetPosition:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })cameraFrame;
- (BOOL)canZoomOutForTileSize:(long long)a0;
- (void)stopSnappingAnimations;
- (void)navContextStateDidChange:(id)a0;
- (void)navContextCameraHeadingOverrideDidChange:(id)a0;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 translation:(double)a1;
- (void)transferGestureState:(id)a0;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 newValue:(double)a1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_canZoomIn;
- (BOOL)canEnter3DMode;
- (void)_updateZoomScaleLimts;
- (void)_setNavCameraIsDetached:(BOOL)a0;
- (void)_updateSceneStyles:(BOOL)a0;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })calculateViewableScreenRect;
- (struct Matrix<double, 2, 1> { double x0[2]; })puckScreenPoint;
- (void)updateCameraState;
- (void)animateCameraWithDuration:(float)a0 fromFrame:(const struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; } *)a1 completionHandler:(id /* block */)a2;
- (void)resetSpringsToResting;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })currentCameraFrame;
- (void)returnToTrackingWithDelay:(double)a0 resetZoom:(BOOL)a1;
- (void)_snapPitch;
- (void)_snapHeading;
- (void)_setDetached:(BOOL)a0;
- (void)_updateObserverCouldZoomIn:(BOOL)a0 couldZoomOut:(BOOL)a1;
- (void)updateSpringsForTrackingCamera;
- (void)updateSpringsForFramingCamera;
- (void)_updateStyles;
- (BOOL)_updateSprings:(double)a0;
- (BOOL)_hasRunningAnimation;
- (void)_updateDebugOverlay;
- (void)_updateDebugText;
- (double)_calculateMaxPixelChangeAndUpdateCorners;
- (id)_debugText:(BOOL)a0 showNavCameraDebugConsoleAttributes:(BOOL)a1;
- (unsigned char)cameraHeadingType;
- (struct CameraFrame<geo::Radians, double> { struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } x0; struct Unit<MeterUnitDescription, double> { double x0; } x1; struct Unit<RadianUnitDescription, double> { double x0; } x2; struct Unit<RadianUnitDescription, double> { double x0; } x3; struct Unit<RadianUnitDescription, double> { double x0; } x4; })restingCameraFrame;
- (float)_currentRoadSignOffset;
- (double)minZoomHeight;
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)a0;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x0[2]; } x0; struct Matrix<double, 2, 1> { double x0[2]; } x1; })calculateViewableScreenRectForEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (struct Unit<RadianUnitDescription, double> { double x0; })calculateHeading;
- (void)_updateForAnimatedEdgeInsets;
- (double)distanceToManeuver:(unsigned long long)a0;
- (struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; })routeCoordinateAtDistance:(double)a0;
- (struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; })routeLocationAtDistance:(double)a0 fromManeuver:(unsigned long long)a1;
- (void)_addAdditionalRoutePointsToFrameToList:(struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > > { struct Coordinate3D<Radians, double> *x0; struct Coordinate3D<Radians, double> *x1; struct __compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > > { struct Coordinate3D<Radians, double> *x0; } x2; } *)a0;
- (void)updateManeuversToFrame;
- (void)updatePointsToFrame;
- (double)maxZoomHeight;
- (double)minZoomScale;
- (double)maxZoomScale;
- (struct Unit<RadianUnitDescription, double> { double x0; })minCameraPitch;
- (struct Unit<RadianUnitDescription, double> { double x0; })maxCameraPitch;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0 panAtStartPoint:(BOOL)a1;
- (void)stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id).cxx_construct;
- (BOOL)_canZoomOut;
- (BOOL)tapAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (double)maximumZoomLevel;
- (BOOL)canZoomInForTileSize:(long long)a0;
- (double)topDownMinimumZoomLevel;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x0; double x1; })a0 degrees:(double)a1;
- (void)updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)canvasDidLayout;
- (void)updateWithTimestamp:(double)a0;
- (double)minimumZoomLevel;
- (void)setEdgeInsetsAnimating:(BOOL)a0;
- (void)returnToPuck;
- (void)setNavContext:(id)a0;
- (void)updateLocation:(const struct Coordinate3D<Radians, double> { struct Unit<RadianUnitDescription, double> { double x0; } x0; struct Unit<RadianUnitDescription, double> { double x0; } x1; struct Unit<MeterUnitDescription, double> { double x0; } x2; } *)a0 andCourse:(const struct Unit<RadianUnitDescription, double> { double x0; } *)a1;
- (BOOL)isPitchEnabled;
- (BOOL)isRotateEnabled;
- (id)initWithTaskContext:(struct shared_ptr<md::TaskContext> { struct TaskContext *x0; struct __shared_weak_count *x1; })a0 device:(struct Device { int x0; struct shared_ptr<ggl::Device> { struct Device *x0; struct __shared_weak_count *x1; } x1; struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> > { struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> > { struct SharedDeviceResources *x0; } x0; } x2; } *)a1 mapDataAccess:(struct MapDataAccess { struct World *x0; unsigned char x1; unsigned char x2; id x3; struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; } x4; } *)a2 animationRunner:(struct AnimationRunner { struct MapEngine *x0; } *)a3 runLoopController:(struct RunLoopController { struct MapEngine *x0; long long x1; long long x2; } *)a4 cameraDelegate:(id)a5;
- (void)puckAnimatorDidStop:(id)a0;
- (void)puckAnimator:(id)a0 runAnimation:(id)a1;
- (double)currentZoomLevel;
- (void)stylesheetDidReload;

@end

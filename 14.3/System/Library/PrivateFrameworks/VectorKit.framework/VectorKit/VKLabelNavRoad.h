@class NSString, VKLabelNavJunction, VKLabelNavRoadLabel;

@interface VKLabelNavRoad : NSObject <VKLabelNavFeature> {
    struct { struct { id x0; char *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned long long x7; BOOL x8; unsigned long long x9; float x10; unsigned long long x11; id x12; int x13; } x0; unsigned long long x1; unsigned long long x2; int x3; int x4; int x5; unsigned long long x6; unsigned long long x7; unsigned int x8; unsigned int x9; union { struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; } x0; struct { float x0; float x1; float x2; float x3; } x1; } x10; struct *x11; struct { unsigned short x0[2]; unsigned short x1[2]; } x12; unsigned char x13; BOOL x14; unsigned char x15; BOOL x16; BOOL x17; unsigned char x18; BOOL x19; unsigned short x20; struct _NSRange { unsigned long long x0; unsigned long long x1; } x21; BOOL x22; unsigned int x23; } *_data;
    struct optional<gss::LineType> { BOOL _hasValue; union ValueUnion { unsigned char data[1]; unsigned char type; } _value; } _lineType;
    unsigned long long _vertexIndexA;
    unsigned long long _vertexIndexB;
    struct { unsigned int x0; unsigned int x1; struct *x2; } *_junctionA;
    struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *__begin_; struct Matrix<double, 2, 1> *__end_; struct __compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *__value_; struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _simplifiedPoints;
    double _length;
    NSString *_shieldDisplayGroup;
    NSString *_shieldGroup;
    VKLabelNavRoadLabel *_roadSign;
    VKLabelNavRoadLabel *_roadShield;
    BOOL _isVisibilityCached[8];
    BOOL _cachedSignVisibility[8];
    BOOL _cachedShieldVisibility[8];
    BOOL _hasVisibleSigns;
    BOOL _hasVisibleShields;
}

@property (readonly, nonatomic) struct shared_ptr<md::LabelTile> { struct LabelTile *__ptr_; struct __shared_weak_count *__cntrl_; } tile;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) const char *cstrName;
@property (readonly, nonatomic) NSString *shieldDisplayGroup;
@property (readonly, nonatomic) NSString *shieldGroup;
@property (readonly, nonatomic) struct { unsigned int x0; unsigned int x1; struct *x2; } *junctionB;
@property (readonly, nonatomic) VKLabelNavJunction *navJunctionA;
@property (nonatomic) struct Matrix<float, 2, 1> { float _e[2]; } direction;
@property (nonatomic) BOOL isOnRoute;
@property (nonatomic) BOOL isStartOfRoadName;
@property (nonatomic) BOOL isInGuidance;
@property (nonatomic) BOOL isGuidanceStepStart;
@property (nonatomic) BOOL areLabelsDisabled;
@property (nonatomic) struct PolylineCoordinate { unsigned int index; float offset; } routeOffset;
@property (nonatomic) float routeCrossProduct;
@property (nonatomic) long long intraRoadPriority;
@property (nonatomic) BOOL isRoadLabelUnique;
@property (readonly, nonatomic) BOOL isAwayFromRoute;
@property (readonly, nonatomic) BOOL suppressRoadSignIfShieldPresent;
@property (readonly, nonatomic) BOOL isRamp;
@property (readonly, nonatomic) BOOL isOnewayToJunction;
@property (readonly, nonatomic) int roadClass;
@property (readonly, nonatomic) unsigned char roadSignAlignment;
@property (readonly, nonatomic) BOOL isEtaFeature;
@property (readonly, nonatomic) BOOL isTrafficCameraFeature;
@property (nonatomic) BOOL isPicked;

- (double)length;
- (BOOL)hasVisibleSigns;
- (BOOL)hasVisibleShields;
- (void)_updateWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 threshold:(double)a1;
- (void)_updateWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0;
- (void)_worldRoadPoints:(struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *x0; struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } *)a0;
- (BOOL)_worldPointForRoadOffset:(float)a0 worldPoint:(struct Mercator3<double> { double x0[3]; } *)a1;
- (id)labelWithType:(BOOL)a0;
- (float)_findRoadOffsetForDistanceToRay:(float)a0 rayStart:(struct Matrix<double, 3, 1> { double x0[3]; })a1 rayVector:(struct Matrix<float, 2, 1> { float x0[2]; })a2 roadGraph:(id)a3;
- (BOOL)_findLabelAnchorPoint:(struct Mercator3<double> { double x0[3]; } *)a0 isShieldLabel:(BOOL)a1 desiredOffsetDistance:(float)a2 maxOffsetDistance:(float)a3 minJunctionDistance:(float)a4 roadGraph:(id)a5;
- (id)_newLabelWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 isShieldLabel:(BOOL)a1 worldPoint:(struct Matrix<double, 3, 1> { double x0[3]; })a2 alignment:(unsigned char)a3 artworkCache:(struct VKLabelNavArtworkCache { struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x0; struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x1; struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct __compressed_pair<md::RoadSignArtworkGenerator *, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct RoadSignArtworkGenerator *x0; } x0; } x2; BOOL x3; struct LabelImageLoader *x4; } *)a4;
- (void)clearRoadSign;
- (void)clearRoadShield;
- (id)initWithRoadEdge:(const struct { struct *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct *x5; struct *x6; } *)a0 navJunctionA:(id)a1 routeOffset:(struct PolylineCoordinate { unsigned int x0; float x1; })a2 tile:(const struct shared_ptr<md::LabelTile> { struct LabelTile *x0; struct __shared_weak_count *x1; } *)a3;
- (void)getRoadEdge:(struct { struct *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct *x5; struct *x6; } *)a0;
- (void)prepareStyleVarsWithContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0;
- (BOOL)matchesRoadEdge:(const struct { struct *x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; struct *x5; struct *x6; } *)a0;
- (BOOL)matchesRoad:(id)a0;
- (void)recreateRoadSignWithAlignment:(unsigned char)a0 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1 artworkCache:(struct VKLabelNavArtworkCache { struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x0; struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x1; struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct __compressed_pair<md::RoadSignArtworkGenerator *, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct RoadSignArtworkGenerator *x0; } x0; } x2; BOOL x3; struct LabelImageLoader *x4; } *)a2;
- (void)recreateRoadShieldWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 artworkCache:(struct VKLabelNavArtworkCache { struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x0; struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x1; struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct __compressed_pair<md::RoadSignArtworkGenerator *, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct RoadSignArtworkGenerator *x0; } x0; } x2; BOOL x3; struct LabelImageLoader *x4; } *)a1;
- (void)createLabelWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 isShieldLabel:(BOOL)a1 desiredOffsetDistance:(float)a2 maxOffsetDistance:(float)a3 minJunctionDistance:(float)a4 minRouteDistance:(float)a5 roadGraph:(id)a6 artworkCache:(struct VKLabelNavArtworkCache { struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x0; struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x1; struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct __compressed_pair<md::RoadSignArtworkGenerator *, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct RoadSignArtworkGenerator *x0; } x0; } x2; BOOL x3; struct LabelImageLoader *x4; } *)a7;
- (void)appendSimplifiedWorldRoadPoints:(struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *x0; struct Matrix<double, 2, 1> *x1; struct __compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > { struct Matrix<double, 2, 1> *x0; struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } *)a0;
- (void).cxx_destruct;
- (void)layoutWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0;
- (void)dealloc;
- (id)description;
- (id).cxx_construct;
- (BOOL)hasShield;

@end

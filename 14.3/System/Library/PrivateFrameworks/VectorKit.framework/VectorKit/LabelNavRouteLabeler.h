@class NSString, NSMutableDictionary, VKLabelNavRoadGraph, NSMutableSet, NSMutableArray, VKPolylineOverlay;

@interface LabelNavRouteLabeler : NSObject {
    BOOL _isOnRoute;
    unsigned long long _stepIndex;
    BOOL _checkOnRouteLabelsAlignment;
    BOOL _disableTileParseForOneLayout;
    struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **__value_; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { unsigned long long __value_; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *__next_; } __value_; struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > { float __value_; } __p3_; } __table_; } _tiles;
    struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct __hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **__value_; struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > { unsigned long long __value_; struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *__next_; } __value_; struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > { float __value_; } __p3_; } __table_; } _pendingTiles;
    NSMutableArray *_junctions;
    VKLabelNavRoadGraph *_roadGraph;
    NSMutableArray *_fadingLabels;
    NSMutableDictionary *_visibleLabelsByName;
    NSMutableArray *_visibleLabels;
    NSMutableSet *_visibleShieldGroups;
    unsigned long long _countVisibleOnRouteRoadSigns;
    unsigned long long _countVisibleOffRouteRoadSigns;
    unsigned long long _countVisibleRoadSigns;
    unsigned long long _maxVisibleOnRouteRoadSigns;
    unsigned long long _maxVisibleOffRouteRoadSigns;
    unsigned long long _maxVisibleRoadSigns;
    unsigned long long _maxOnRoadGraphRoadSigns;
    unsigned long long _minVisibleOffRoadGraphRoadSigns;
    unsigned long long _minVisibleProceedToRouteRoadSigns;
    BOOL _preferRightSideLabelPlacement;
    float _minSignOffsetDistance;
    NSMutableSet *_roadNamesInGuidance;
    NSMutableArray *_guidanceStepInfos;
    NSMutableArray *_routeRoadInfos;
    long long _currentRoadNameIndex;
    BOOL _checkIfRouteSubrangeChanged;
    BOOL _useRouteSubrange;
    BOOL _regenerateRoadSigns;
    BOOL _isStylesheetAnimating;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeSubrangeStart;
    struct PolylineCoordinate { unsigned int index; float offset; } _routeSubrangeEnd;
    struct shared_ptr<md::NavCurrentRoadSign> { struct NavCurrentRoadSign *__ptr_; struct __shared_weak_count *__cntrl_; } _currentRoadSign;
    unsigned long long _debugCachedMaxVisibleOffRouteRoadSigns;
    unsigned long long _debugCachedMaxVisibleOnRouteRoadSigns;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *__ptr_; struct __shared_weak_count *__cntrl_; } _styleManager;
    BOOL _shouldLabelOppositeCarriageways;
    struct vector<md::AvoidanceRectWithPriority, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> > { struct AvoidanceRectWithPriority *__begin_; struct AvoidanceRectWithPriority *__end_; struct __compressed_pair<md::AvoidanceRectWithPriority *, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> > { struct AvoidanceRectWithPriority *__value_; struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _avoidanceRects;
    BOOL _hasPendingTilesInSnappingRegion;
    BOOL _needsDebugConsoleClear;
    struct range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > { struct map<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > >::RangeCompare, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > { struct __tree<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, std::__1::__map_value_compare<gm::Range<geo::Unit<RadianUnitDescription, float> >, std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > >::RangeCompare, true>, std::__1::allocator<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Range<geo::Unit<RadianUnitDescription, float> >, std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > >::RangeCompare, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _storage; } _onRouteOrientations;
    struct range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > { struct map<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > >::RangeCompare, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > { struct __tree<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, std::__1::__map_value_compare<gm::Range<geo::Unit<RadianUnitDescription, float> >, std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > >::RangeCompare, true>, std::__1::allocator<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Range<geo::Unit<RadianUnitDescription, float> >, std::__1::__value_type<gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction>, geo::range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > >::RangeCompare, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _storage; } _relatedRouteOrientations;
}

@property (nonatomic) BOOL drawRoadSigns;
@property (retain, nonatomic) VKPolylineOverlay *route;
@property (retain, nonatomic) NSString *currentLocationText;
@property (retain, nonatomic) NSString *currentRoadName;
@property (retain, nonatomic) NSString *currentShieldGroup;
@property (nonatomic) struct PolylineCoordinate { unsigned int index; float offset; } routeUserOffset;
@property (readonly, nonatomic) struct vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> > { struct shared_ptr<md::NavLabel> *__begin_; struct shared_ptr<md::NavLabel> *__end_; struct __compressed_pair<std::__1::shared_ptr<md::NavLabel> *, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> > { struct shared_ptr<md::NavLabel> *__value_; struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } activeSigns;
@property (readonly, nonatomic) BOOL needsLayout;
@property (readonly, nonatomic) struct NavCurrentRoadSign { void /* function */ **x0; struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >::__rep, geo::StdAllocator<char, mdm::Allocator> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; struct StdAllocator<char, mdm::Allocator> { struct Allocator *x0; } x1; } x0; } x1; struct shared_ptr<md::LabelStyle> { struct LabelStyle *x0; struct __shared_weak_count *x1; } x2; struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> *x0; struct __shared_weak_count *x1; } x3; struct { float x0; float x1; } x4; struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart> > { struct __compressed_pair<md::NavLabelPart *, std::__1::default_delete<md::NavLabelPart> > { struct NavLabelPart *x0; } x0; } x5; struct Mercator2<double> { double x0[2]; } x6; struct shared_ptr<md::Anchor> { struct Anchor *x0; struct __shared_weak_count *x1; } x7; struct Matrix<float, 2, 1> { float x0[2]; } x8; struct Matrix<float, 2, 1> { float x0[2]; } x9; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x0[2]; } x0; struct Matrix<float, 2, 1> { float x0[2]; } x1; } x10; BOOL x11; BOOL x12; BOOL x13; float x14; BOOL x15; BOOL x16; BOOL x17; float x18; float x19; } *currentRoadSign;
@property (readonly, nonatomic) float currentRoadSignPixelHeight;
@property (nonatomic) BOOL debugDisableRoadSignLimit;
@property (nonatomic) BOOL debugEnableShieldsOnRouteLine;
@property (nonatomic) struct VKLabelNavArtworkCache { struct unique_ptr<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, geo::_retain_ptr<VKRoadSignArtwork *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x0; struct unique_ptr<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct __compressed_pair<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> > > { struct Cache<unsigned long, std::__1::shared_ptr<grl::IconImage>, std::__1::hash<unsigned long>, LRUPolicy> *x0; } x0; } x1; struct unique_ptr<md::RoadSignArtworkGenerator, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct __compressed_pair<md::RoadSignArtworkGenerator *, std::__1::default_delete<md::RoadSignArtworkGenerator> > { struct RoadSignArtworkGenerator *x0; } x0; } x2; BOOL x3; struct LabelImageLoader *x4; } *artworkCache;

- (void)debugDraw:(id)a0 overlayConsole:(struct DebugConsole { void /* function */ **x0; struct Matrix<float, 2, 1> { float x0[2]; } x1; struct Matrix<float, 2, 1> { float x0[2]; } x2; struct Matrix<float, 2, 1> { float x0[2]; } x3; struct Matrix<float, 2, 1> { float x0[2]; } x4; int x5; int x6; unsigned long long x7; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x8; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x9; struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct DataWrite<ggl::ColoredText::My> *x0; } x0; } x10; unsigned long long x11; struct Matrix<float, 2, 1> *x12; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x13; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x14; float x15; BOOL x16; struct CommonLibrary *x17; struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } x18; } *)a1 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (void)_tryAddRoadSignForJunction:(id)a0 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1 labelCollisionEnabled:(BOOL)a2;
- (void)_updateUniqueOffRouteRoads;
- (BOOL)_updateActiveRouteRange;
- (id)init;
- (BOOL)_findRouteOverlappingJunctionFrom:(long long)a0 routeJunctions:(struct vector<RouteJunctionInfo, geo::StdAllocator<RouteJunctionInfo, mdm::Allocator> > { struct RouteJunctionInfo *x0; struct RouteJunctionInfo *x1; struct __compressed_pair<RouteJunctionInfo *, geo::StdAllocator<RouteJunctionInfo, mdm::Allocator> > { struct RouteJunctionInfo *x0; struct StdAllocator<RouteJunctionInfo, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } *)a1 lookBackward:(BOOL)a2 firstOverlap:(long long *)a3 secondOverlap:(long long *)a4;
- (unsigned char)computeRoutePositionForPOIAtPixel:(const struct Matrix<float, 2, 1> { float x0[2]; } *)a0 currentPosition:(unsigned char)a1 context:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (void).cxx_destruct;
- (void)setMaxVisibleRoadsigns:(unsigned int)a0;
- (void)_tryAddLabel:(id)a0 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1 labelCollisionEnabled:(BOOL)a2;
- (void)_generateCurrentRoadSignWithContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0;
- (void)dealloc;
- (void)_updateRoadsInGuidance;
- (void)_updatePreferredLabelPlacements;
- (void)_createOrUpdateLabelForRoad:(id)a0 isShield:(BOOL)a1 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (void)styleManagerDidFinishAnimating;
- (void)_refreshGuidanceRoadNames;
- (void)layoutWithNavContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 avoidanceRects:(const struct vector<md::AvoidanceRectWithPriority, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> > { struct AvoidanceRectWithPriority *x0; struct AvoidanceRectWithPriority *x1; struct __compressed_pair<md::AvoidanceRectWithPriority *, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> > { struct AvoidanceRectWithPriority *x0; struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> { struct Allocator *x0; } x1; } x2; } *)a1;
- (unsigned char)resolveOrientation:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a0 road:(id)a1 currentOrientation:(unsigned char)a2;
- (BOOL)_collideLabel:(id)a0 activeLabel:(id)a1 labelsToRemove:(id)a2;
- (void)grabTilesFromScene:(const struct SceneContext { void /* function */ **x0; struct unordered_map<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8>, gdc::LayerDataRequestKeyHash, std::__1::equal_to<gdc::LayerDataRequestKey>, std::__1::allocator<std::__1::pair<const gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> > > > { struct __hash_table<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, gdc::LayerDataRequestKeyHash, true>, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true>, std::__1::allocator<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, gdc::LayerDataRequestKeyHash, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<gdc::LayerDataRequestKey, std::__1::__hash_value_type<gdc::LayerDataRequestKey, geo::small_vector<geo::MercatorTile, 8> >, std::__1::equal_to<gdc::LayerDataRequestKey>, true> > { float x0; } x3; } x0; } x1; struct linear_map<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> >, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > >, std::__1::vector<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > >, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > > > > { struct vector<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > >, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > > > { struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > *x0; struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > *x1; struct __compressed_pair<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > *, std::__1::allocator<std::__1::pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > > > { struct pair<unsigned short, std::__1::set<gdc::LayerDataWithWorld, std::__1::less<gdc::LayerDataWithWorld>, std::__1::allocator<gdc::LayerDataWithWorld> > > *x0; } x2; } x0; } x2; struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> >, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > > { struct vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > { struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x0; struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x1; struct __compressed_pair<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> *, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > { struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x0; } x2; } x0; } x3; struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> >, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > > { struct vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > { struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x0; struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x1; struct __compressed_pair<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> *, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > { struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x0; } x2; } x0; } x4; struct linear_map<md::TileSelectionTileSetType, md::SceneTileSet, std::__1::equal_to<md::TileSelectionTileSetType>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> >, std::__1::vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > > { struct vector<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet>, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > { struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x0; struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x1; struct __compressed_pair<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> *, std::__1::allocator<std::__1::pair<md::TileSelectionTileSetType, md::SceneTileSet> > > { struct pair<md::TileSelectionTileSetType, md::SceneTileSet> *x0; } x2; } x0; } x5; struct linear_set<md::TileSelectionTileSetType, std::__1::less<md::TileSelectionTileSetType>, std::__1::allocator<md::TileSelectionTileSetType>, std::__1::vector<md::TileSelectionTileSetType, std::__1::allocator<md::TileSelectionTileSetType> > > { struct vector<md::TileSelectionTileSetType, std::__1::allocator<md::TileSelectionTileSetType> > { unsigned short *x0; unsigned short *x1; struct __compressed_pair<md::TileSelectionTileSetType *, std::__1::allocator<md::TileSelectionTileSetType> > { unsigned short *x0; } x2; } x0; } x6; struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea> > { struct TileExclusionArea *x0; struct TileExclusionArea *x1; struct __compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea> > { struct TileExclusionArea *x0; } x2; } x7; BOOL x8; } *)a0;
- (void)_reloadRouteJunctions;
- (unsigned char)orientationForRoadSign:(id)a0 roadLabel:(id)a1 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2;
- (BOOL)isNavMode;
- (id).cxx_construct;
- (void)styleManagerDidStartAnimating;
- (void)_addLabelsAtJunctions:(id)a0 withContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1 maxLabelsToAdd:(unsigned long long)a2;
- (BOOL)_addJunctionsForTile:(const struct shared_ptr<md::LabelTile> { struct LabelTile *x0; struct __shared_weak_count *x1; } *)a0;
- (void)_addLabelsForJunctions:(id)a0 withContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1 maxLabelsToAdd:(unsigned long long)a2 useAllJunctions:(BOOL)a3 placeShieldsFrontToBack:(BOOL)a4;
- (void)_tryAddRoadSignForRoad:(id)a0 isShield:(BOOL)a1 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a2 labelCollisionEnabled:(BOOL)a3;
- (struct optional<md::RoadSignOrientationResolver> { BOOL x0; union ValueUnion { unsigned char x0[24]; struct RoadSignOrientationResolver { struct range_map<geo::Unit<RadianUnitDescription, float>, md::OrientationAction, std::__1::less<geo::Unit<RadianUnitDescription, float> >, std::__1::allocator<std::__1::pair<const gm::Range<geo::Unit<RadianUnitDescription, float> >, md::OrientationAction> > > *x0; struct Unit<RadianUnitDescription, float> { float x0; } x1; struct Unit<RadianUnitDescription, float> { float x0; } x2; unsigned char x3; } x1; } x1; })createRoadSignOrientationResolver:(id)a0 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1;
- (void)clearSceneIsMemoryWarning:(BOOL)a0;
- (void)setStyleManager:(struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> *x0; struct __shared_weak_count *x1; })a0;
- (void)drawRoadSignOrientationDebugView:(struct DebugConsole { void /* function */ **x0; struct Matrix<float, 2, 1> { float x0[2]; } x1; struct Matrix<float, 2, 1> { float x0[2]; } x2; struct Matrix<float, 2, 1> { float x0[2]; } x3; struct Matrix<float, 2, 1> { float x0[2]; } x4; int x5; int x6; unsigned long long x7; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x8; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x9; struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct DataWrite<ggl::ColoredText::My> *x0; } x0; } x10; unsigned long long x11; struct Matrix<float, 2, 1> *x12; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x13; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x14; float x15; BOOL x16; struct CommonLibrary *x17; struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } x18; } *)a0 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1;
- (void)styleManagerDidChange:(BOOL)a0;
- (void)drawNavOverlayDebugView:(struct DebugConsole { void /* function */ **x0; struct Matrix<float, 2, 1> { float x0[2]; } x1; struct Matrix<float, 2, 1> { float x0[2]; } x2; struct Matrix<float, 2, 1> { float x0[2]; } x3; struct Matrix<float, 2, 1> { float x0[2]; } x4; int x5; int x6; unsigned long long x7; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x8; struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > { struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > { struct RenderItem *x0; } x0; } x9; struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > > { struct DataWrite<ggl::ColoredText::My> *x0; } x0; } x10; unsigned long long x11; struct Matrix<float, 2, 1> *x12; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x13; struct Color<unsigned char, 4, geo::ColorSpace::Linear> { struct Matrix<unsigned char, 4, 1> { unsigned char x0[4]; } x0; } x14; float x15; BOOL x16; struct CommonLibrary *x17; struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } x18; } *)a0 navContext:(struct NavContext { void /* function */ **x0; struct LabelManager *x1; struct MapNavLabeler *x2; struct LabelLayoutContext *x3; struct LabelNavLayoutContext *x4; } *)a1;
- (BOOL)needsDebugDraw;
- (void)_updateRoadStarts;
- (void)_updateCurrentRoadInfo;
- (void)_initalizeCurrentRoadInfo;

@end

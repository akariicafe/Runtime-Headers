@class NSData, NSString, VKResourceManager;

@interface VKImage : NSObject {
    struct CGImage { } *_imageRef;
    NSData *_data;
    NSString *_name;
    struct Texture2D { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; int x5; int x6; int x7; int x8; unsigned int x9; int x10; unsigned int x11; unsigned int x12; struct shared_ptr<const ggl::Texture2DAbstract> { struct Texture2DAbstract *x0; struct __shared_weak_count *x1; } x13; unsigned int x14; struct shared_ptr<const ggl::TextureDataAbstract> { struct TextureDataAbstract *x0; struct __shared_weak_count *x1; } x15; BOOL x16; BOOL x17; BOOL x18; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x19; } *_gglTexture;
    struct shared_ptr<md::TextureAtlasRegion> { struct TextureAtlasRegion *__ptr_; struct __shared_weak_count *__cntrl_; } _textureAtlasRegion;
    struct Box<float, 2> { struct Matrix<float, 2, 1> { float _e[2]; } _minimum; struct Matrix<float, 2, 1> { float _e[2]; } _maximum; } _textureCoordinates;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _collisionRect;
    struct CGPoint { double x; double y; } _anchorPoint;
    struct CGPoint { double x; double y; } _labelingPoint;
    struct CGSize { double width; double height; } _size;
    double _scale;
    BOOL _hasCollisionRect;
    BOOL _hasAnchorPoint;
    BOOL _hasLabelingPoint;
    BOOL _usedAsTextureAndImage;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL __a_value; } __a_; } _isTextureReady;
    struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL __a_value; } __a_; } _isImageReady;
    VKResourceManager *_resourceManager;
    unsigned char _imageHash[16];
}

- (id)initWithCGImage:(struct CGImage { } *)a0 scale:(double)a1;
- (double)scale;
- (void)_prepareImage;
- (id)initWithData:(id)a0 scale:(double)a1;
- (struct CGPoint { double x0; double x1; })anchorPoint;
- (int)compareTo:(id)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (void)prepareTextureWithAtlas:(struct TextureAtlas { struct vector<md::TextureAtlas::RelocateItem, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem *x0; struct RelocateItem *x1; struct __compressed_pair<md::TextureAtlas::RelocateItem *, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem *x0; } x2; } x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; int x2; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x3; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x4; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x5; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x6; unsigned char x7; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x8; BOOL x9; BOOL x10; unsigned int x11; unsigned int x12; struct unique_ptr<unsigned char [], std::__1::default_delete<unsigned char []> > { struct __compressed_pair<unsigned char *, std::__1::default_delete<unsigned char []> > { char *x0; } x0; } x13; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x14; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x15; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x16; struct optional<unsigned long> { BOOL x0; union ValueUnion { unsigned char x0[8]; unsigned long long x1; } x1; } x17; struct shared_ptr<std::__1::atomic<bool> > { struct atomic<bool> *x0; struct __shared_weak_count *x1; } x18; struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; struct shared_ptr<md::TextureAtlasPage> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; } x2; } x19; struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; struct shared_ptr<md::TextureAtlasPage> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; } x2; } x20; struct vector<ggl::Texture2D *, std::__1::allocator<ggl::Texture2D *> > { struct Texture2D **x0; struct Texture2D **x1; struct __compressed_pair<ggl::Texture2D **, std::__1::allocator<ggl::Texture2D *> > { struct Texture2D **x0; } x2; } x21; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x22; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x23; struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; struct shared_ptr<md::TextureAtlasRegion> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasRegion> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; } x2; } x24; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem *x0; struct Texture2DLoadItem *x1; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem *x0; } x2; } x25; struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; struct shared_ptr<md::TextureAtlasRegion> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasRegion> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; } x2; } x26; struct vector<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > >, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > > > { struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *x0; struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *x1; struct __compressed_pair<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > > > { struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *x0; } x2; } x27; } *)a0;
- (id)initWithData:(id)a0 scale:(double)a1 usedAsTextureAndImage:(BOOL)a2;
- (struct CGSize { double x0; double x1; })size;
- (struct Texture2D { void /* function */ **x0; struct ResourceManager *x1; struct RenderResource *x2; void /* function */ **x3; char *x4; int x5; int x6; int x7; int x8; unsigned int x9; int x10; unsigned int x11; unsigned int x12; struct shared_ptr<const ggl::Texture2DAbstract> { struct Texture2DAbstract *x0; struct __shared_weak_count *x1; } x13; unsigned int x14; struct shared_ptr<const ggl::TextureDataAbstract> { struct TextureDataAbstract *x0; struct __shared_weak_count *x1; } x15; BOOL x16; BOOL x17; BOOL x18; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x19; } *)gglTexture;
- (const struct Box<float, 2> { struct Matrix<float, 2, 1> { float x0[2]; } x0; struct Matrix<float, 2, 1> { float x0[2]; } x1; } *)textureCoordinates;
- (void)setCollisionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id).cxx_construct;
- (id)initWithCGImage:(struct CGImage { } *)a0 scale:(double)a1 usedAsTextureAndImage:(BOOL)a2;
- (void)setAnchorPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })labelingPoint;
- (void)setLabelingPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_prepareTextureWithAtlas:(struct TextureAtlas { struct vector<md::TextureAtlas::RelocateItem, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem *x0; struct RelocateItem *x1; struct __compressed_pair<md::TextureAtlas::RelocateItem *, std::__1::allocator<md::TextureAtlas::RelocateItem> > { struct RelocateItem *x0; } x2; } x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; int x2; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x3; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x4; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x5; struct Matrix<unsigned int, 2, 1> { unsigned int x0[2]; } x6; unsigned char x7; struct shared_ptr<ggl::SamplerState> { struct SamplerState *x0; struct __shared_weak_count *x1; } x8; BOOL x9; BOOL x10; unsigned int x11; unsigned int x12; struct unique_ptr<unsigned char [], std::__1::default_delete<unsigned char []> > { struct __compressed_pair<unsigned char *, std::__1::default_delete<unsigned char []> > { char *x0; } x0; } x13; struct read_write_lock { struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x0; } x14; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x15; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x16; struct optional<unsigned long> { BOOL x0; union ValueUnion { unsigned char x0[8]; unsigned long long x1; } x1; } x17; struct shared_ptr<std::__1::atomic<bool> > { struct atomic<bool> *x0; struct __shared_weak_count *x1; } x18; struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; struct shared_ptr<md::TextureAtlasPage> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; } x2; } x19; struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; struct shared_ptr<md::TextureAtlasPage> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > { struct shared_ptr<md::TextureAtlasPage> *x0; } x2; } x20; struct vector<ggl::Texture2D *, std::__1::allocator<ggl::Texture2D *> > { struct Texture2D **x0; struct Texture2D **x1; struct __compressed_pair<ggl::Texture2D **, std::__1::allocator<ggl::Texture2D *> > { struct Texture2D **x0; } x2; } x21; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x22; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x23; struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; struct shared_ptr<md::TextureAtlasRegion> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasRegion> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; } x2; } x24; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem *x0; struct Texture2DLoadItem *x1; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem *x0; } x2; } x25; struct vector<std::__1::shared_ptr<md::TextureAtlasRegion>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; struct shared_ptr<md::TextureAtlasRegion> *x1; struct __compressed_pair<std::__1::shared_ptr<md::TextureAtlasRegion> *, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasRegion> > > { struct shared_ptr<md::TextureAtlasRegion> *x0; } x2; } x26; struct vector<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > >, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > > > { struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *x0; struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *x1; struct __compressed_pair<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *, std::__1::allocator<std::__1::vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > > > { struct vector<std::__1::shared_ptr<md::TextureAtlasPage>, std::__1::allocator<std::__1::shared_ptr<md::TextureAtlasPage> > > *x0; } x2; } x27; } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })collisionRect;
- (struct CGImage { } *)image;
- (id)initWithName:(id)a0 scale:(double)a1 resourceManager:(id)a2;

@end

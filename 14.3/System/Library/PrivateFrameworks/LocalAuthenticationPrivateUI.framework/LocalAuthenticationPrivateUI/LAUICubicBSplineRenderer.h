@class LAUIMetalRenderLoop, MTLRenderPassDescriptor;
@protocol MTLCommandQueue, MTLDepthStencilState, MTLDevice, MTLBuffer, MTLTexture, MTLComputePipelineState, MTLRenderPipelineState;

@interface LAUICubicBSplineRenderer : NSObject {
    LAUIMetalRenderLoop *_render_loop;
    unsigned long long _frame_index;
    struct renderer_shared_state { id<MTLDevice> device; id<MTLDepthStencilState> depth_stencil_state; id<MTLComputePipelineState> tesselation_factor_pipeline; id<MTLRenderPipelineState> tube_pipeline; struct array<id<MTLRenderPipelineState>, 3> { id<MTLRenderPipelineState> __elems_[3]; } begin_cap_pipelines; struct array<id<MTLRenderPipelineState>, 3> { id<MTLRenderPipelineState> __elems_[3]; } end_cap_pipelines; id<MTLComputePipelineState> horizontal_blur_pipeline; id<MTLComputePipelineState> vertical_blur_pipeline; id<MTLComputePipelineState> accumulator_pipeline; } _shared_render_state;
    id<MTLCommandQueue> _command_queue;
    MTLRenderPassDescriptor *_render_pass_descriptor;
    MTLRenderPassDescriptor *_clear_pass_descriptor;
    struct vector<(anonymous namespace)::buffer_group, std::__1::allocator<(anonymous namespace)::buffer_group> > { struct buffer_group *__begin_; struct buffer_group *__end_; struct __compressed_pair<(anonymous namespace)::buffer_group *, std::__1::allocator<(anonymous namespace)::buffer_group> > { struct buffer_group *__value_; } __end_cap_; } _ring_buffer;
    struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__1::__cxx_atomic_base_impl<unsigned char> > { _Atomic unsigned char __a_value; } __a_; } _ring_start;
    struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__1::__cxx_atomic_base_impl<unsigned char> > { _Atomic unsigned char __a_value; } __a_; } _ring_end;
    id<MTLBuffer> _tesselation_factors;
    unsigned long long _drawable_width;
    unsigned long long _drawable_height;
    id<MTLTexture> _multisample_texture;
    id<MTLTexture> _depth_stencil_texture;
    BOOL _textures_dirty;
    struct array<id<MTLTexture>, 2> { id<MTLTexture> __elems_[2]; } _textures;
    unsigned long long _texture_index;
    struct vector<LAUI_uniform_cubic_b_spline_renderer_private::control_point, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer_private::control_point> > { struct control_point *__begin_; struct control_point *__end_; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer_private::control_point *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer_private::control_point> > { struct control_point *__value_; } __end_cap_; } _control_points;
    struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *__value_; } __end_cap_; } _control_point_indices;
    struct vector<LAUI_uniform_cubic_b_spline_renderer_private::control_point, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer_private::control_point> > { struct control_point *__begin_; struct control_point *__end_; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer_private::control_point *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer_private::control_point> > { struct control_point *__value_; } __end_cap_; } _cap_control_points;
    struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *__value_; } __end_cap_; } _cap_control_point_indices;
    struct vector<LAUI_uniform_cubic_b_spline_renderer_private::instance_uniform, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer_private::instance_uniform> > { struct instance_uniform *__begin_; struct instance_uniform *__end_; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer_private::instance_uniform *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer_private::instance_uniform> > { struct instance_uniform *__value_; } __end_cap_; } _spline_instance_uniforms;
    BOOL _caps_dirty;
    double _last_render_time;
    struct global_state_animator { struct animator<float, 0> { float _target; float _intermediate; float _actual; float _k; float _elapsed_n; float _target_n; float _visual_target_n; unsigned char _interpolation; } accumulator_growth; struct animator<float, 0> { float _target; float _intermediate; float _actual; float _k; float _elapsed_n; float _target_n; float _visual_target_n; unsigned char _interpolation; } accumulator_persistence; struct animator<float, 0> { float _target; float _intermediate; float _actual; float _k; float _elapsed_n; float _target_n; float _visual_target_n; unsigned char _interpolation; } accumulator_luminance_alpha_factor; struct animator<float, 0> { float _target; float _intermediate; float _actual; float _k; float _elapsed_n; float _target_n; float _visual_target_n; unsigned char _interpolation; } blur_scale; struct animator<nullptr_t, 0> { char *_target; char *_intermediate; char *_actual; float _k; float _elapsed_n; float _target_n; float _visual_target_n; unsigned char _interpolation; } hidden_animator; } _global_state_animator;
    struct vector<LAUI_uniform_cubic_b_spline_renderer::global_state, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::global_state> > { struct global_state *__begin_; struct global_state *__end_; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::global_state *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::global_state> > { struct global_state *__value_; } __end_cap_; } _animation_targets;
    unsigned long long _current_animation_target_index;
    BOOL _reversed;
    BOOL _needs_update;
    struct animation_completion_handler_container { id /* block */ _completion; } _completion_container;
    struct vector<LAUI_uniform_cubic_b_spline_renderer::spline, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline> > { struct spline *__begin_; struct spline *__end_; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::spline *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline> > { struct spline *__value_; } __end_cap_; } _spline_state;
    struct vector<std::__1::vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> >, std::__1::allocator<std::__1::vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> > > > { struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> > *__begin_; struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> > *__end_; struct __compressed_pair<std::__1::vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> > *, std::__1::allocator<std::__1::vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> > > > { struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance> > *__value_; } __end_cap_; } _instance_state;
    unsigned long long _instance_count;
}

@property (nonatomic, getter=isWireframeEnabled, setter=setWireframeEnabled:) BOOL wireframe_enabled;
@property (nonatomic, getter=modelTransform, setter=setModelTransform:) struct double4x4 { void /* unknown type, empty encoding */ columns[4]; } model_transform;
@property (nonatomic, getter=viewTransform, setter=setViewTransform:) struct double4x4 { void /* unknown type, empty encoding */ columns[4]; } view_transform;
@property (nonatomic, getter=projectionTransform, setter=setProjectionTransform:) struct double4x4 { void /* unknown type, empty encoding */ columns[4]; } projection_transform;

+ (struct renderer_shared_state { id x0; id x1; id x2; id x3; struct array<id<MTLRenderPipelineState>, 3> { id x0[3]; } x4; struct array<id<MTLRenderPipelineState>, 3> { id x0[3]; } x5; id x6; id x7; id x8; })sharedStateForDevice:(id)a0;

- (id)init;
- (void).cxx_destruct;
- (void)_updateState:(double)a0;
- (void)dealloc;
- (id).cxx_construct;
- (void)releaseBuffers;
- (unsigned long long)addInstance:(const struct spline_instance { unsigned long long x0; struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state> > { struct spline_instance_state *x0; struct spline_instance_state *x1; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state> > { struct spline_instance_state *x0; } x2; } x1; unsigned long long x2; BOOL x3; struct animator<float __attribute__((ext_vector_type(3))), 0> { float x0; float x1; float x2; float x3; unsigned char x4; } x4; struct animator<simd::quatf, 0> { struct quatf { } x0; struct quatf { } x1; struct quatf { } x2; float x3; float x4; float x5; float x6; unsigned char x7; } x5; struct animator<float __attribute__((ext_vector_type(3))), 0> { float x0; float x1; float x2; float x3; unsigned char x4; } x6; struct animator<simd::quatf, 0> { struct quatf { } x0; struct quatf { } x1; struct quatf { } x2; float x3; float x4; float x5; float x6; unsigned char x7; } x7; struct animator<float __attribute__((ext_vector_type(3))), 0> { float x0; float x1; float x2; float x3; unsigned char x4; } x8; struct animator<float __attribute__((ext_vector_type(4))), 0> { float x0; float x1; float x2; float x3; unsigned char x4; } x9; struct animator<float, 0> { float x0; float x1; float x2; float x3; float x4; float x5; float x6; unsigned char x7; } x10; struct animator<float, 0> { float x0; float x1; float x2; float x3; float x4; float x5; float x6; unsigned char x7; } x11; struct animator<float, 0> { float x0; float x1; float x2; float x3; float x4; float x5; float x6; unsigned char x7; } x12; struct animator<nullptr_t, 0> { char *x0; char *x1; char *x2; float x3; float x4; float x5; float x6; unsigned char x7; } x13; void /* function */ *x14; BOOL x15; float x16; float x17; struct animator<float, 0> { float x0; float x1; float x2; float x3; float x4; float x5; float x6; unsigned char x7; } x18; float x19; struct animation_completion_handler_container { id /* block */ x0; } x20; BOOL x21; } *)a0;
- (BOOL)renderAtTime:(double)a0;
- (void)_updateCapForSpline:(unsigned long long)a0 instance:(unsigned long long)a1;
- (void)_updateTarget:(const struct global_state { float x0; float x1; float x2; float x3; float x4; float x5; } *)a0;
- (void)updateRenderPassDescriptorWithDrawable:(id)a0;
- (void)setSplineInstanceUniform:(struct instance_uniform { struct float4x4 { void /* unknown type, empty encoding */ x0[4]; } x0; float x1; float x2; float x3; float x4; })a0 forSpline:(unsigned long long)a1 instance:(unsigned long long)a2 forceCapRegeneration:(BOOL)a3;
- (id)initWithRenderLoop:(id)a0 sharedState:(const struct renderer_shared_state { id x0; id x1; id x2; id x3; struct array<id<MTLRenderPipelineState>, 3> { id x0[3]; } x4; struct array<id<MTLRenderPipelineState>, 3> { id x0[3]; } x5; id x6; id x7; id x8; } *)a1;
- (unsigned long long)addSpline:(const struct spline { struct vector<std::__1::vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> >, std::__1::allocator<std::__1::vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > > > { struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > *x0; struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > *x1; struct __compressed_pair<std::__1::vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > *, std::__1::allocator<std::__1::vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > > > { struct vector<float __attribute__((ext_vector_type(3))), std::__1::allocator<float __attribute__((ext_vector_type(3)))> > *x0; } x2; } x0; unsigned long long x1; struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_state, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_state> > { struct spline_state *x0; struct spline_state *x1; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::spline_state *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_state> > { struct spline_state *x0; } x2; } x2; unsigned long long x3; BOOL x4; struct vector<LAUI_uniform_cubic_b_spline_renderer::animator<float __attribute__((ext_vector_type(3))), 0>, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::animator<float __attribute__((ext_vector_type(3))), 0> > > { struct animator<float __attribute__((ext_vector_type(3))), 0> *x0; struct animator<float __attribute__((ext_vector_type(3))), 0> *x1; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::animator<float __attribute__((ext_vector_type(3))), 0> *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::animator<float __attribute__((ext_vector_type(3))), 0> > > { struct animator<float __attribute__((ext_vector_type(3))), 0> *x0; } x2; } x5; struct animator<nullptr_t, 0> { char *x0; char *x1; char *x2; float x3; float x4; float x5; float x6; unsigned char x7; } x6; struct animation_completion_handler_container { id /* block */ x0; } x7; BOOL x8; } *)a0;
- (void)setAnimationTargets:(const struct vector<LAUI_uniform_cubic_b_spline_renderer::global_state, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::global_state> > { struct global_state *x0; struct global_state *x1; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::global_state *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::global_state> > { struct global_state *x0; } x2; } *)a0 withCompletion:(id /* block */)a1;
- (void)setAnimationTargets:(const struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_state, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_state> > { struct spline_state *x0; struct spline_state *x1; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::spline_state *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_state> > { struct spline_state *x0; } x2; } *)a0 forSpline:(unsigned long long)a1 withCompletion:(id /* block */)a2;
- (void)setAnimationTargets:(const struct vector<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state> > { struct spline_instance_state *x0; struct spline_instance_state *x1; struct __compressed_pair<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state *, std::__1::allocator<LAUI_uniform_cubic_b_spline_renderer::spline_instance_state> > { struct spline_instance_state *x0; } x2; } *)a0 forSpline:(unsigned long long)a1 instance:(unsigned long long)a2 withCompletion:(id /* block */)a3;
- (struct spline_instance_state { struct quatf { } x0; struct quatf { } x1; float x2; float x3; float x4; float x5; float x6; BOOL x7; float x8; void /* function */ *x9; })animationTargetForSpline:(unsigned long long)a0 instance:(unsigned long long)a1;
- (void)updateLastRenderTime;

@end

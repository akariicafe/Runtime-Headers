@interface CSUtils : NSObject

+ (double)systemUpTime;
+ (id)convertToShortLPCMBufFromFloatLPCMBuf:(id)a0;
+ (id)deviceProductType;
+ (id)deviceBuildVersion;
+ (unsigned long long)deviceCategoryForDeviceProductType:(id)a0;
+ (id)deviceProductVersion;
+ (BOOL)supportPremiumAssets;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })opusASBD;
+ (id)deviceCategoryStringRepresentationForCategoryType:(unsigned long long)a0;
+ (BOOL)supportTTS;
+ (float)hostTimeToSeconds:(unsigned long long)a0;
+ (id)getSiriLanguageWithFallback:(id)a0;
+ (void)applyNegative12dBGain:(id)a0;
+ (unsigned long long)secondsToHostTime:(float)a0;
+ (BOOL)shouldDeinterleaveAudioOnCS;
+ (id)deviceHwRevision;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmNonInterleavedASBDWithSampleRate:(float)a0 numberOfChannels:(unsigned int)a1;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmInterleavedASBDWithSampleRate:(float)a0 numberOfChannels:(unsigned int)a1;
+ (void)removeLogFilesInDirectory:(id)a0 matchingPattern:(id)a1 beforeDays:(float)a2;
+ (void)clearLogFilesInDirectory:(id)a0 matchingPattern:(id)a1 exceedNumber:(unsigned long long)a2;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })utteranceFileASBD;
+ (id)_sharedDisposeLoggingQueue;
+ (void)URLsInDirectory:(id)a0 matchingPattern:(id)a1 completion:(id /* block */)a2;
+ (void)_sortedURLsInDirectory:(id)a0 matchingPattern:(id)a1 completion:(id /* block */)a2;
+ (id)_contentsOfDirectoryAtURL:(id)a0 matchingPattern:(id)a1 includingPropertiesForKeys:(id)a2 error:(id *)a3;
+ (BOOL)supportZeroFilter;
+ (BOOL)supportBeepCanceller;
+ (id)assetHashInResourcePath:(id)a0;
+ (BOOL)supportCSTwoShotDecision;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmNarrowBandASBD;
+ (BOOL)supportLanguageDetector;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmNonInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmInterleavedWithRemoteVADASBD;
+ (id)getFixedHighPrioritySerialQueueWithLabel:(id)a0;
+ (BOOL)isRecordContextVoiceTrigger:(id)a0;
+ (void)applyGain:(float)a0 toBuffer:(id)a1;
+ (id)convertToFloatLPCMBufFromShortLPCMBuf:(id)a0;
+ (void)apply12dBGain:(id)a0;
+ (BOOL)shouldRunVTOnCS;
+ (BOOL)isIOSDeviceSupportingBargeIn;
+ (BOOL)supportHearstVoiceTrigger;
+ (BOOL)supportRemoraVoiceTrigger;
+ (BOOL)supportJarvisVoiceTrigger;
+ (BOOL)supportBluetoothDeviceVoiceTrigger;
+ (BOOL)supportSmartVolume;
+ (BOOL)supportsVoiceTriggerFides;
+ (BOOL)supportSelfTriggerSuppression;
+ (BOOL)supportHybridEndpointer;
+ (BOOL)supportAdBlocker;
+ (BOOL)supportsSpeakerRecognitionAssets;
+ (BOOL)supportPhatic;
+ (BOOL)supportContinuousVoiceTrigger;
+ (BOOL)supportLazySessionActivation;
+ (BOOL)supportSessionActivateDelay;
+ (double)hostTimeToTimeInterval:(unsigned long long)a0;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmInt16NarrowBandASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmInt16ASBD;
+ (BOOL)supportOpportunisticZLL;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmMonoNonInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmMonoInterleavedWithRemoteVADASBD;
+ (BOOL)shouldDelayPhaticForMyriadDecision;
+ (unsigned long long)hostTimeFromSampleCount:(unsigned long long)a0 anchorHostTime:(unsigned long long)a1 anchorSampleCount:(unsigned long long)a2;
+ (unsigned long long)sampleCountFromHostTime:(unsigned long long)a0 anchorHostTime:(unsigned long long)a1 anchorSampleCount:(unsigned long long)a2;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmNonInterleavedASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmInterleavedASBD;
+ (BOOL)supportCompactPlus;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })speexASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })lpcmFloatASBD;
+ (BOOL)hasRemoteBuiltInMic;
+ (BOOL)supportHandsFree;
+ (double)getHostClockFrequency;
+ (BOOL)supportRaiseToSpeak;
+ (BOOL)supportPremiumWatchAssets;
+ (id)rootQueueWithFixedPriority:(int)a0;
+ (BOOL)supportKeywordDetector;
+ (BOOL)supportSAT;
+ (BOOL)supportContinuousAudioFingerprint;
+ (BOOL)supportPremiumModel;
+ (BOOL)shouldDownloadVTAssetsOnDaemon;
+ (BOOL)hasRemoteCoreSpeech;
+ (BOOL)supportCircularBuffer;
+ (id)getFixedPrioritySerialQueueWithLabel:(id)a0 fixedPriority:(int)a1;
+ (id)deviceUserAssignedName;
+ (id)timeStampWithSaltGrain;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })opusNarrowBandASBD;
+ (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })aiffFileASBD;
+ (BOOL)isRecordContextHearstVoiceTrigger:(id)a0;
+ (BOOL)isRecordContextJarvisVoiceTrigger:(id)a0;
+ (BOOL)isRecordContextJarvisButtonPress:(id)a0;
+ (unsigned long long)macHostTimeFromBridgeHostTime:(unsigned long long)a0;
+ (BOOL)isRecordContextRaiseToSpeak:(id)a0;
+ (BOOL)isRecordContextHearstDoubleTap:(id)a0;
+ (BOOL)isRecordContextAutoPrompt:(id)a0;
+ (BOOL)isRecordContextHomeButtonPress:(id)a0;
+ (BOOL)isRecordContextSpeakerIdTrainingTrigger:(id)a0;
+ (id)recordContextString:(id)a0;
+ (id)stringForSpeakerRecognizerType:(unsigned long long)a0;
+ (id)stringForInvocationStyle:(unsigned long long)a0;
+ (id)ssrAudioLogsDir;
+ (void)createDirectoryIfDoesNotExist:(id)a0;
+ (BOOL)ssrAudioLogsCountWithinPrivacyLimit;
+ (id)combineScoreFromPSR:(id)a0 fromSAT:(id)a1 withCombinedWt:(float)a2;
+ (void)logSpeakerRecognitionGradingMetadataAtFilepath:(id)a0 withScoreInfo:(id)a1;
+ (id)removeItemAtPath:(id)a0;
+ (id)stringForCSSpIdType:(unsigned long long)a0;
+ (void)streamAudioFromFileUrl:(id)a0 audioStreamBasicDescriptor:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })a1 samplesPerStreamChunk:(unsigned long long)a2 audioDataAvailableHandler:(id /* block */)a3;
+ (id)satConfigFileNameForCSSpIdType:(unsigned long long)a0 forModelType:(unsigned long long)a1 forAssetType:(unsigned long long)a2;
+ (id)readJsonFileAtPath:(id)a0;
+ (unsigned long long)getVoiceProfileProductCategoryFromVersionFilePath:(id)a0;
+ (id)getExplicitEnrollmentUtterancesFromDirectory:(id)a0;
+ (id)getImplicitEnrollmentUtterancesFromDirectory:(id)a0;
+ (id)_getUtterancesFromDirectory:(id)a0;
+ (unsigned long long)explicitSpIdTypeForSpId:(unsigned long long)a0;
+ (unsigned long long)spIdTypeForString:(id)a0;
+ (id)stringForVoiceProfileRetrainerType:(unsigned long long)a0;
+ (id)satConfigFileNameForCSSpIdType:(unsigned long long)a0;
+ (id)psrConfigFileNameForCSSpIdType:(unsigned long long)a0;
+ (id)spIdVoiceProfileImportRootDir;
+ (void)cleanupOrphanedVoiceIdGradingFiles;
+ (id)spidAudioTrainUtterancesDir;
+ (BOOL)isSpeakerRecognitionSupportedInLocale:(id)a0;
+ (id)getVoiceProfileIdentityFromVersionFilePath:(id)a0;
+ (BOOL)isCurrentDeviceCompatibleWithNewerVoiceProfileAt:(id)a0;
+ (BOOL)isCurrentDeviceCompatibleWithVoiceProfileAt:(id)a0;
+ (id)getImplicitUtteranceCacheDirectory;
+ (long long)getNumberOfAudioFilesInDirectory:(id)a0;
+ (void)dumpFilesInDirectory:(id)a0;
+ (id)getContentsOfDirectory:(id)a0;
+ (void)getHomeUserIdForVoiceProfile:(id)a0 withCompletion:(id /* block */)a1;
+ (id)getVoiceProfilesForSiriProfileId:(id)a0;
+ (id)getVoiceProfileForSiriProfileId:(id)a0 forLanguageCode:(id)a1;
+ (void)segmentVoiceTriggerFromAudioFile:(id)a0 withVTEventInfo:(id)a1 withStorePayloadPortion:(BOOL)a2 withCompletion:(id /* block */)a3;
+ (id)getEnrollmentUtterancesFromDirectory:(id)a0;
+ (id)getExplicitMarkedEnrollmentUtterancesFromDirectory:(id)a0;
+ (void)getEnrollmentUtterancesCountFromDirectory:(id)a0 withCountBlock:(id /* block */)a1;
+ (id)moveContentsOfSrcDirectory:(id)a0 toDestDirectory:(id)a1;
+ (BOOL)encryptFileAt:(id)a0 andSaveTo:(id)a1 error:(id *)a2;

@end

@class NSString;

@interface _OTSVGParserDelegate : NSObject <NSXMLParserDelegate>

@property BOOL errorOccurred;
@property unsigned int skipDepth;
@property unsigned int unitsPerEm;
@property unsigned int elementCount;
@property struct unique_ptr<SVG::SVGElement, std::__1::default_delete<SVG::SVGElement> > { struct __compressed_pair<SVG::SVGElement *, std::__1::default_delete<SVG::SVGElement> > { struct SVGElement *x0; } x0; } *root;
@property struct vector<std::__1::reference_wrapper<SVG::Element>, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { struct reference_wrapper<SVG::Element> *__begin_; struct reference_wrapper<SVG::Element> *__end_; struct __compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { struct reference_wrapper<SVG::Element> *__value_; } __end_cap_; } stack;
@property struct unordered_map<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float __value_; } __p3_; } __table_; } namespaces;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)parser:(id)a0 didEndElement:(id)a1 namespaceURI:(id)a2 qualifiedName:(id)a3;
- (void).cxx_destruct;
- (void)parser:(id)a0 didStartMappingPrefix:(id)a1 toURI:(id)a2;
- (void)parser:(id)a0 didEndMappingPrefix:(id)a1;
- (void)parser:(id)a0 validationErrorOccurred:(id)a1;
- (id).cxx_construct;
- (void)parserDidStartDocument:(id)a0;
- (void)parser:(id)a0 parseErrorOccurred:(id)a1;
- (void)parserDidEndDocument:(id)a0;
- (void)parser:(id)a0 didStartElement:(id)a1 namespaceURI:(id)a2 qualifiedName:(id)a3 attributes:(id)a4;
- (id)initWithUnitsPerEm:(unsigned int)a0;

@end

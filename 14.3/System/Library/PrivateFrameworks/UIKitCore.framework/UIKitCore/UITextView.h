@class NSDictionary, UITextPosition, UITextInputTraits, _UICharacterStreamingManager, _UITextViewVisualStyle, UITextRange, NSString, UILabel, UIImage, _UITextViewRestorableScrollPosition, NSTextContainer, NSAttributedString, _UITextLayoutView, UITextInputPasswordRules, UIInputContextHistory, UIDragInteraction, UITextInteractionAssistant, CUICatalog, _UITextItemDiscoverer, UIView, UIPasteConfiguration, UIAutoscroll, _UITextSizeCache, UILayoutManagerBasedDraggableGeometry, NSTextStorage, UIFont, UITextInputController, UIDropInteraction, UIColor, _UITextContainerView, NSLayoutManager, NSIndexSet, _UITextViewContentPadding;
@protocol UICoordinateSpace, UITextDragDropSupport, UITextInputTokenizer, UITextViewDelegate, UITextDropDelegate, UITextPasteDelegate, UITextDragDelegate, UITextInputDelegate;

@interface UITextView : UIScrollView <_UIViewBaselineSpacing, _UITextContainerViewDelegate, _UITextViewContentPaddingDelegate, UITextInputControllerDelegate, UITextAutoscrolling, UIKeyboardInput, UITextInputTraits_Private, _UIMultilineTextContentSizing, _UILayoutBaselineUpdating, UIViewGhostedRangeSupporting, _UITextItemInteracting, UITextPasteConfigurationSupporting_Internal, UITextDragSupporting, UITextDropSupporting, _UITextContent, _UITextItemDiscoverable, UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting, UITextInput, UIContentSizeCategoryAdjusting> {
    _UITextContainerView *_containerView;
    _UITextLayoutView *_layoutView;
    id _inputDelegate;
    id<UITextInputTokenizer> _tokenizer;
    UITextInputController *_inputController;
    UITextInteractionAssistant *_interactionAssistant;
    UITextInputTraits *_textInputTraits;
    UIAutoscroll *_autoscroll;
    struct { unsigned char needsScrollToSelectionAfterLayout : 1; unsigned char editable : 1; unsigned char reentrancyGuard : 1; unsigned char usesExplicitPreferredMaxLayoutWidth : 1; unsigned char interactiveSelectionDisabled : 1; unsigned char selectable : 1; unsigned char shouldPresentSheetsInAWindowLayeredAboveTheKeyboard : 1; unsigned char shouldAutoscrollAboveBottom : 1; unsigned char containerViewSizeInvalid : 1; unsigned char isAnimatingPaste : 1; unsigned char textSizeCacheEnabled : 1; unsigned char showsEditMenu : 1; } _tvFlags;
    long long _contentSizeUpdateSeqNo;
    _UITextViewRestorableScrollPosition *_scrollTarget;
    unsigned long long _scrollPositionDontRecordCount;
    _UITextViewRestorableScrollPosition *_scrollPosition;
    double _offsetFromScrollPosition;
    unsigned long long _dataDetectorTypes;
    double _preferredMaxLayoutWidth;
    UILabel *_placeholderLabel;
    NSAttributedString *_overriddenPlaceholder;
    long long _overriddenPlaceholderAlignment;
    UIView *_inputAccessoryView;
    NSDictionary *_linkTextAttributes;
    _UICharacterStreamingManager *_characterStreamingManager;
    NSDictionary *_siriParameters;
    double _firstBaselineOffsetFromTop;
    double _lastBaselineOffsetFromBottom;
    _UITextSizeCache *_intrinsicSizeCache;
    CUICatalog *_cuiCatalog;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _beforeFreezingTextContainerInset;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _duringFreezingTextContainerInset;
    struct CGSize { double width; double height; } _beforeFreezingFrameSize;
    BOOL _unfreezingTextContainerSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frameOfTrailingWhitespace;
    id<UITextDragDropSupport> _textDragDropSupport;
    UILayoutManagerBasedDraggableGeometry *_geometry;
    long long _defaultTextPreviewOptions;
    _UITextItemDiscoverer *_textItemDiscoverer;
    _UITextViewContentPadding *_topContentPadding;
    _UITextViewContentPadding *_bottomContentPadding;
    struct CGPoint { double x; double y; } _scrollEndDraggingVelocity;
    double _multilineContextWidth;
}

@property (retain, nonatomic) UIView *uiss_snapshotView;
@property (nonatomic, setter=_setDrawsDebugBaselines:) BOOL _drawsDebugBaselines;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) _UITextViewVisualStyle *visualStyle;
@property (weak, nonatomic) id<UITextViewDelegate> delegate;
@property (copy, nonatomic) NSString *text;
@property (retain, nonatomic) UIFont *font;
@property (retain, nonatomic) UIColor *textColor;
@property (nonatomic) long long textAlignment;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } selectedRange;
@property (nonatomic, getter=isEditable) BOOL editable;
@property (nonatomic, getter=isSelectable) BOOL selectable;
@property (nonatomic) unsigned long long dataDetectorTypes;
@property (nonatomic) BOOL allowsEditingTextAttributes;
@property (copy) NSAttributedString *attributedText;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (retain) UIView *inputView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic) BOOL clearsOnInsertion;
@property (readonly, nonatomic) NSTextContainer *textContainer;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } textContainerInset;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (copy, nonatomic) NSDictionary *linkTextAttributes;
@property (nonatomic) BOOL usesStandardTextScaling;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL isSingleLineDocument;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet { } *textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic, getter=isDevicePasscodeEntry) BOOL devicePasscodeEntry;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) id<UITextInputDelegate> inputDelegate;
@property (readonly, nonatomic) id<UITextInputTokenizer> tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (weak, nonatomic) id<UITextPasteDelegate> pasteDelegate;
@property (copy, nonatomic) UIPasteConfiguration *pasteConfiguration;
@property (weak, nonatomic) id<UITextDragDelegate> textDragDelegate;
@property (readonly, nonatomic) UIDragInteraction *textDragInteraction;
@property (readonly, nonatomic, getter=isTextDragActive) BOOL textDragActive;
@property (nonatomic) long long textDragOptions;
@property (nonatomic) struct CGPoint { double x0; double x1; } contentOffsetForSameViewDrops;
@property (weak, nonatomic) id<UITextDropDelegate> textDropDelegate;
@property (readonly, nonatomic) UIDropInteraction *textDropInteraction;
@property (readonly, nonatomic, getter=isTextDropActive) BOOL textDropActive;
@property (readonly, nonatomic) id<UICoordinateSpace> textItemCoordinateSpace;
@property (nonatomic) BOOL adjustsFontForContentSizeCategory;

+ (BOOL)_isCompatibilityTextView;
+ (id)_defaultTextColor;

- (void)replace:(id)a0;
- (void)alignLeft:(id)a0;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (void)alignRight:(id)a0;
- (id)interactionAssistant;
- (void)insertText:(id)a0;
- (void)_transliterateChinese:(id)a0;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (void)setNeedsLayout;
- (id)positionWithinRange:(id)a0 farthestInDirection:(long long)a1;
- (void)toggleItalics:(id)a0;
- (void)unmarkText;
- (void)select:(id)a0;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setContinuousSpellCheckingEnabled:(BOOL)a0;
- (BOOL)canBecomeFocused;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })a0;
- (void)encodeRestorableStateWithCoder:(id)a0;
- (id)textInRange:(id)a0;
- (BOOL)allowsDraggingAttachments;
- (void)endSelectionChange;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (BOOL)keyboardInput:(id)a0 shouldInsertText:(id)a1 isMarkedText:(BOOL)a2;
- (id)textRangeFromPosition:(id)a0 toPosition:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)a0;
- (id)undoManager;
- (id)automaticallySelectedOverlay;
- (id)selectionRectsForRange:(id)a0;
- (void)_define:(id)a0;
- (id)textStylingAtPosition:(id)a0 inDirection:(long long)a1;
- (void)_promptForReplace:(id)a0;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0 withinRange:(id)a1;
- (id)positionFromPosition:(id)a0 offset:(long long)a1;
- (void)cut:(id)a0;
- (void)setAttributedMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)replaceRange:(id)a0 withText:(id)a1;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (void)deleteBackward;
- (void)_share:(id)a0;
- (void)takeTraitsFrom:(id)a0;
- (void)selectAll:(id)a0;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)increaseSize:(id)a0;
- (id)webView;
- (BOOL)becomeFirstResponder;
- (void)insertAttributedText:(id)a0;
- (void)toggleBoldface:(id)a0;
- (void)_showTextStyleOptions:(id)a0;
- (void)_addShortcut:(id)a0;
- (id)characterRangeByExtendingPosition:(id)a0 inDirection:(long long)a1;
- (void)scrollSelectionToVisible:(BOOL)a0;
- (void)paste:(id)a0;
- (BOOL)keyboardInputShouldDelete:(id)a0;
- (id)positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2;
- (void)setBaseWritingDirection:(long long)a0 forRange:(id)a1;
- (void)beginSelectionChange;
- (id)attributedTextInRange:(id)a0;
- (id)metadataDictionariesForDictationResults;
- (BOOL)canResignFirstResponder;
- (void)_didMoveFromWindow:(id)a0 toWindow:(id)a1;
- (void)cancelAutoscroll;
- (BOOL)resignFirstResponder;
- (void)decodeRestorableStateWithCoder:(id)a0;
- (void)_insertAttributedTextWithoutClosingTyping:(id)a0;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })a0;
- (void)setSecureTextEntry:(BOOL)a0;
- (BOOL)isEditing;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)endFloatingCursor;
- (void)_setSiriAnimationDictationStyleWithCharacterInsertionRate:(double)a0 minimumDurationBetweenHypotheses:(double)a1;
- (void)updateTextAttributesWithConversionHandler:(id /* block */)a0;
- (void)copy:(id)a0;
- (void)textInputWillAnimatePaste:(id)a0;
- (void)_commonInitWithTextContainer:(id)a0 isDecoding:(BOOL)a1 isEditable:(BOOL)a2 isSelectable:(BOOL)a3 isDraggable:(BOOL)a4;
- (double)_autolayoutSpacingAtEdge:(int)a0 forAttribute:(long long)a1 nextToNeighbor:(id)a2 edge:(int)a3 attribute:(long long)a4 multiplier:(double)a5;
- (void)_setTextColor:(id)a0;
- (void)_setFreezeTextContainerSize:(BOOL)a0;
- (void)tintColorDidChange;
- (id)_getDelegateZoomView;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (void)_scrollViewWillEndDraggingWithVelocity:(struct CGPoint { double x0; double x1; })a0 targetContentOffset:(struct CGPoint { double x0; double x1; } *)a1;
- (id)methodSignatureForSelector:(SEL)a0;
- (void)addGhostedRange:(id)a0;
- (id)selectionView;
- (id)forwardingTargetForSelector:(SEL)a0;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_pasteAttributedString:(id)a0 pasteAsRichText:(BOOL)a1;
- (void)invalidateIntrinsicContentSize;
- (void).cxx_destruct;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)insertDictationResult:(id)a0 withCorrectionIdentifier:(id)a1;
- (id)_attributedStringForInsertionOfAttributedString:(id)a0;
- (id)rangeWithTextAlternatives:(id *)a0 atPosition:(id)a1;
- (BOOL)_freezeTextContainerSize;
- (void)pasteAndMatchStyle:(id)a0;
- (void)_populateArchivedSubviews:(id)a0;
- (BOOL)isAccessibilityElementByDefault;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)a0;
- (void)_applyOptionsToGeometry;
- (id)largeContentTitle;
- (void)dealloc;
- (BOOL)textInputShouldExtendCaretHeight:(id)a0;
- (void)setContentMode:(long long)a0;
- (id)_effectivePasteConfiguration;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })accessibilityFrame;
- (void)_setOverridePlaceholder:(id)a0 alignment:(long long)a1;
- (BOOL)_shouldSuppressSelectionCommands;
- (void)removeAllGhostedRanges;
- (BOOL)_hasBaseline;
- (void)pasteItemProviders:(id)a0;
- (BOOL)respondsToSelector:(SEL)a0;
- (void)_registerUndoOperationForReplacementWithActionName:(id)a0 replacementText:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectToScrollToVisibleInCellInWindow:(id)a0;
- (BOOL)_allowInteraction:(long long)a0 forTextInteractableItem:(id)a1;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })a0;
- (void)keyboardInputChangedSelection:(id)a0;
- (void)_setWhitelistedTypingAttributes:(id)a0;
- (void)_updateContentSize;
- (id)_whitelistedTypingAttributes;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 textContainer:(id)a1;
- (BOOL)_allowHighlightForTextInteractableItem:(id)a0;
- (void)scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (long long)baseWritingDirectionForPosition:(id)a0 inDirection:(long long)a1;
- (void)removeDictationResultPlaceholder:(id)a0 willInsertResult:(BOOL)a1;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 animated:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRect;
- (double)lineHeight;
- (void)setNeedsDisplay;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInTextContainerForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setMarginTop:(unsigned long long)a0;
- (BOOL)_delegatesAllowingTextItemInteractions;
- (double)beginSnapshotSeparationOfHeight:(double)a0 atYOffset:(double)a1;
- (void)endSnapshotSeparation;
- (void)addSnapshotSeparation:(double)a0 withAffinity:(long long)a1;
- (void)addInvisibleRange:(id)a0;
- (void)removeInvisibleRange:(id)a0;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_implicitPasteConfigurationClasses;
- (void)_unconstrainTiledRendering;
- (id)initWithCoder:(id)a0;
- (void)_textStorageDidProcessEditing:(id)a0;
- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass;
- (void)removeTextPlaceholder:(id)a0;
- (void)_updateBaselineInformationDependentOnBounds;
- (unsigned long long)marginTop;
- (void)textInputDidChangeSelection:(id)a0;
- (void)alignJustified:(id)a0;
- (id)_cuiStyleEffectConfiguration;
- (BOOL)_needsDoubleUpdateConstraintsPass;
- (void)validateCommand:(id)a0;
- (void)_diagnoseFocusabilityForReport:(id)a0;
- (void)_setCuiCatalog:(id)a0;
- (BOOL)_isSystemAttachment:(id)a0;
- (void)_setCuiStyleEffectConfiguration:(id)a0;
- (void)_setupDefaultStyleEffectConfiguration;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)_setInteractiveTextSelectionDisabled:(BOOL)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_visibleRangeWithLayout:(BOOL)a0;
- (id)_canvasView;
- (BOOL)canBecomeFirstResponder;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_textGeometry;
- (void)_constrainTiledRenderingToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)draggingStarted;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)draggingFinished:(id)a0;
- (void)_updateSelectionGestures;
- (BOOL)canBecomeDropResponder;
- (void)becomeDropResponder;
- (void)resignDropResponderWithDropPerformed:(BOOL)a0;
- (void)droppingStarted;
- (void)droppingFinished;
- (void)_notifyDidBeginEditing;
- (void)_notifyDidEndEditing;
- (void)_adjustFontForAccessibilityTraits:(BOOL)a0;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleTextRect;
- (void)startInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)updateInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)usesTiledViews;
- (void)validateInteractionWithLinkAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)layoutSubviews;
- (BOOL)willInteractWithLinkAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_isDisplayingShareViewController;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (id)visibleTextRange;
- (void)makeTextWritingDirectionNatural:(id)a0;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_keyboardDidShow:(id)a0;
- (double)maxTileHeight;
- (BOOL)_restoreFirstResponder;
- (void)_selectionMayChange:(id)a0;
- (id)_textItemDiscoverer;
- (BOOL)_ownsInputAccessoryView;
- (id)_inputController;
- (id)textItemsOfType:(long long)a0 inTextRange:(id)a1;
- (BOOL)hasTextItemsOfType:(long long)a0 inTextRange:(id)a1;
- (BOOL)_isInteractiveTextSelectionDisabled;
- (BOOL)_shouldShowEditMenu;
- (void)_layoutText;
- (BOOL)keyboardInputChanged:(id)a0;
- (void)setScrollEnabled:(BOOL)a0;
- (id)_textInputViewForAddingGestureRecognizers;
- (id)initReadonlyAndUnselectableWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 textContainer:(id)a1;
- (void)_setPreferredMaxLayoutWidth:(double)a0;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (BOOL)_shouldObscureInput;
- (id)_textInputTraits;
- (void)insertText:(id)a0 alternatives:(id)a1 style:(long long)a2;
- (BOOL)textInput:(id)a0 shouldChangeCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)a0;
- (id)selectedText;
- (void)_scrollViewAnimationEnded:(id)a0 finished:(BOOL)a1;
- (double)_baselineOffsetFromBottom;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_deleteBackwardAndNotify:(BOOL)a0;
- (void)addTextAlternativesDisplayStyle:(long long)a0 toRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setContentToHTMLString:(id)a0;
- (void)textInputDidChange:(id)a0;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)a0 replacementText:(id)a1;
- (BOOL)_showsEditMenu;
- (void)_ensureCleanedUp;
- (id)_systemDefaultFocusGroupDescriptor;
- (void)_setShowsEditMenu:(BOOL)a0;
- (void)_observedTextViewDidChange:(id)a0;
- (void)_setTypingAttributesTextColor:(id)a0;
- (void)_updateContainerTileAndSizingFlags;
- (void)_textContainerSizeDidChange:(id)a0;
- (void)_startDataDetectors;
- (void)_syncTypingAttributesToTextContainerAttributesForExtraLineFragment;
- (BOOL)_shouldStartDataDetectors;
- (void)_updatePlaceholderVisibility;
- (void)_invalidateContainerViewSize;
- (unsigned long long)_totalNumberOfTextViewsInLayoutManager;
- (id)_restorableScrollPosition;
- (struct CGPoint { double x0; double x1; })_contentOffsetForScrollToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_layoutPlaceholder;
- (struct CGSize { double x0; double x1; })_containerSizeForBoundsSize:(struct CGSize { double x0; double x1; })a0 allowingOverflow:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRectIgnoringKeyboard;
- (void)_setMultilineContextWidth:(double)a0;
- (void)_resyncContainerFrameForNonAutolayoutDeferringSizeToFit:(BOOL)a0;
- (id)topContentPadding;
- (void)_updateTextContainerSizeAndSizeToFit;
- (void)adjustedContentInsetDidChange;
- (void)_setNeedsTextLayout;
- (void)_resyncContainerFrameForNonAutolayout;
- (void)_scrollToSelectionIfNeeded;
- (BOOL)_shouldScrollEnclosingScrollView;
- (void)setLineHeight:(double)a0;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toVisibleInContainingScrollView:(BOOL)a1;
- (BOOL)shouldAutoscrollAboveBottom;
- (void)_scrollSelectionToVisibleInContainingScrollView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectForScrollToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)insertText:(id)a0 style:(long long)a1 alternatives:(id)a2;
- (void)_performLayoutCalculation:(id /* block */)a0 inSize:(struct CGSize { double x0; double x1; })a1;
- (void)_setContentOffsetWithoutRecordingScrollPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)_setFrameOrBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromOldRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 settingAction:(id /* block */)a2;
- (void)updateAutoscrollAboveBottom;
- (struct CGPoint { double x0; double x1; })_firstGlyphBaselineLeftPointWithLayoutManager:(id)a0;
- (struct CGPoint { double x0; double x1; })_lastGlyphBaselineRightPointWithLayoutManager:(id)a0;
- (void)_resetDataDetectorsResults;
- (double)_currentPreferredMaxLayoutWidth;
- (void)_startDataDetectorsIfNeeded;
- (void)_scrollSelectionToVisibleInContainingScrollView:(BOOL)a0;
- (id)extractWordArrayFromTokensArray:(id)a0;
- (void)_didRecognizeSpeechStrings:(id)a0;
- (void)_restoreScrollPosition:(id)a0 animated:(BOOL)a1;
- (struct CGPoint { double x0; double x1; })_contentOffsetForScrollingToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0 velocity:(struct CGPoint { double x0; double x1; })a1;
- (void)updateSelection;
- (BOOL)becomesEditableWithGestures;
- (void)setBecomesEditableWithGestures:(BOOL)a0;
- (void)_updateSelectableInteractions;
- (void)_scrollToCaretIfNeeded;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1;
- (id)_currentDefaultAttributes;
- (id)bottomContentPadding;
- (id)_linkTextAttributesForLink:(id)a0 forCharacterAtIndex:(unsigned long long)a1;
- (unsigned long long)_effectiveDataDetectorTypes;
- (long long)comparePosition:(id)a0 toPosition:(id)a1;
- (BOOL)_isTextSizeCacheEnabled;
- (BOOL)_interactionPossibleWithAttachment:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectedRangeForTextContainerView:(id)a0;
- (id)_fontInfoForBaselineSpacing;
- (id)linkTextAttributesForTextContainerView:(id)a0;
- (BOOL)isEditableForTextContainerView:(id)a0;
- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long *)a0;
- (id)textContainerView:(id)a0 linkTextAttributesForLink:(id)a1 forCharacterAtIndex:(unsigned long long)a2;
- (BOOL)_hasFontInfoForVerticalBaselineSpacing;
- (void)updateSelectionForTextContainerView:(id)a0;
- (void)_textViewContentPaddingDidChange:(id)a0;
- (void)decreaseSize:(id)a0;
- (double)_autolayoutSpacingAtEdge:(int)a0 forAttribute:(long long)a1 inContainer:(id)a2 isGuide:(BOOL)a3;
- (id)textContainerView:(id)a0 cuiCatalogForTextEffectName:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameOfTrailingWhitespace;
- (double)_firstBaselineOffsetFromTop;
- (BOOL)_shouldInvalidateBaselineConstraintsForSize:(struct CGSize { double x0; double x1; })a0 oldSize:(struct CGSize { double x0; double x1; })a1;
- (void)_disableTiledViews;
- (id)_containerView;
- (BOOL)tiledViewsDrawAsynchronously;
- (void)setTiledViewsDrawAsynchronously:(BOOL)a0;
- (BOOL)shouldPresentSheetsInAWindowLayeredAboveTheKeyboard;
- (void)_cancelDataDetectors;
- (double)_multilineContextWidth;
- (void)setShouldPresentSheetsInAWindowLayeredAboveTheKeyboard:(BOOL)a0;
- (void)_setTextSizeCacheEnabled:(BOOL)a0;
- (void)updateSelectionImmediately;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 font:(id)a1;
- (void)_enableSiriAnimationDictationStyle;
- (void)_didRecognizeSpeechTokens:(id)a0;
- (void)_didFinishSpeechRecognition;
- (struct CGPoint { double x0; double x1; })_lastGlyphBaselineLeftPointWithLayoutManager:(id)a0;
- (double)_preferredMaxLayoutWidth;
- (struct CGPoint { double x0; double x1; })_firstGlyphBaselineRightPointWithLayoutManager:(id)a0;
- (long long)_defaultTextPreviewOptions;
- (id)_restorableScrollPositionForStateRestoration;
- (BOOL)_isDisplayingLookupViewController;
- (void)setShouldAutoscrollAboveBottom:(BOOL)a0;
- (BOOL)shouldPreserveVisualFontSizeFidelity;
- (void)setShouldPreserveVisualFontSizeFidelity:(BOOL)a0;
- (void)_setDefaultTextPreviewOptions:(long long)a0;
- (void)_setDictationResult:(id)a0 withCorrectionIdentifier:(id)a1;
- (Class)_printFormatterClass;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forViewPrintFormatter:(id)a1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)keyboardInput:(id)a0 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (id)_cuiCatalog;
- (BOOL)allowsAttachments;
- (void)traitCollectionDidChange:(id)a0;
- (void)setAttributedPlaceholder:(id)a0;
- (BOOL)_mightHaveInteractableItems;
- (id)_anyTextItemConstrainedToLineAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)attributedPlaceholder;
- (id)_textInteractableItemAtPoint:(struct CGPoint { double x0; double x1; })a0 precision:(unsigned long long)a1;
- (id)_targetedPreviewForTextInteractableItem:(id)a0 dismissing:(BOOL)a1;
- (void)textInputDidAnimatePaste:(id)a0;
- (void)setUsesTiledViews:(BOOL)a0;
- (BOOL)_mightHaveSelection;
- (void)alignCenter:(id)a0;
- (void)invalidateDropCaret;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (void)toggleUnderline:(id)a0;
- (void)disableClearsOnInsertion;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)_isDisplayingShortcutViewController;
- (id)_layoutDebuggingTitle;
- (BOOL)_allowAnimatedUpdateSelectionRectViews;
- (void)encodeWithCoder:(id)a0;
- (void)setMaxTileHeight:(double)a0;

@end

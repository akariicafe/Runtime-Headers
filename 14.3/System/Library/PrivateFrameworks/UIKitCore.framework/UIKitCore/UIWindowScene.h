@class _UICanvasDefinition, _UIContextBinder, FBSDisplayConfigurationRequest, UIScreen, _UIBannerManager, UISceneSizeRestrictions, UIScreenshotService, UIStatusBarManager, NSString, _UISystemAppearanceManager, NSPointerArray, UITraitCollection, UIAlertControllerStackManager, NSArray, UIInputResponderController, FBSScene, UIWindow;
@protocol _UISceneMetricsCalculating, _UIDisplayInfoProviding, UICoordinateSpace;

@interface UIWindowScene : UIScene <_UIFallbackEnvironment, _UISceneUIWindowHosting, _UIContextBinderContextCreationPolicyHolding> {
    UIScreen *_screen;
    UITraitCollection *_traitCollection;
    _UIContextBinder *_contextBinder;
    NSPointerArray *_keyWindowHistory;
    id<_UIDisplayInfoProviding> _displayEdgeInfoProvider;
    id<UICoordinateSpace> _coordinateSpace;
    BOOL _shouldDisableTouchCancellationOnRotation;
    BOOL _windowWasInitializedWithDefaultStoryboard;
    BOOL _didMakeKeyAndVisible;
    id<_UISceneMetricsCalculating> _metricsCalculator;
}

@property (class, readonly, nonatomic) UIWindowScene *_keyWindowScene;
@property (class, nonatomic, setter=_setShouldRestoreKeyWindowSceneOnActivation:) BOOL _shouldRestoreKeyWindowSceneOnActivation;
@property (class, readonly, nonatomic) BOOL _hostsWindows;

@property (readonly, nonatomic) UIAlertControllerStackManager *_alertControllerStackManager;
@property (readonly, nonatomic) long long state;
@property (readonly, nonatomic, getter=isKeyCanvas) BOOL keyCanvas;
@property (readonly, nonatomic) _UICanvasDefinition *_definition;
@property (readonly, nonatomic, getter=_scene) FBSScene *scene;
@property (readonly, nonatomic) UIStatusBarManager *statusBarManager;
@property (readonly, nonatomic) _UISystemAppearanceManager *_systemAppearanceManager;
@property (readonly, nonatomic) UIInputResponderController *inputResponderController;
@property (readonly, nonatomic) UIScreenshotService *screenshotService;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic, getter=_bannerManager) _UIBannerManager *_bannerManager;
@property (readonly, nonatomic) _UIContextBinder *_contextBinder;
@property (readonly, nonatomic) UIWindow *_keyWindow;
@property (readonly, nonatomic) BOOL _canReceiveDeviceOrientationEvents;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _peripheryInsets;
@property (readonly, nonatomic) id<_UIDisplayInfoProviding> _displayInfoProvider;
@property (retain, nonatomic, getter=_displayConfigurationRequest, setter=_setDisplayConfigurationRequest:) FBSDisplayConfigurationRequest *_displayConfigurationRequest;
@property (nonatomic, getter=_screenRequestedDisplayNativePixelSize, setter=_setScreenRequestedDisplayNativePixelSize:) struct CGSize { double x0; double x1; } _screenRequestedDisplayNativePixelSize;
@property (nonatomic, getter=_screenRequestedOverscanCompensation, setter=_setScreenRequestedOverscanCompensation:) long long _screenRequestedOverscanCompensation;
@property (nonatomic, getter=_avkitRequestedOverscanCompensation, setter=_setAVKitRequestedOverscanCompensation:) long long _avkitRequestedOverscanCompensation;
@property (nonatomic) BOOL _isKeyWindowScene;
@property (nonatomic, getter=isExcludedFromWindowsMenu) BOOL excludedFromWindowsMenu;
@property (nonatomic, setter=_setBackgroundStyle:) long long _backgroundStyle;
@property (nonatomic, getter=_keepContextAssociationInBackground, setter=_setKeepContextAssociationInBackground:) BOOL keepContextAssociationInBackground;
@property (readonly, nonatomic) BOOL _isPerformingSystemSnapshot;
@property (readonly, nonatomic) UIScreen *screen;
@property (readonly, nonatomic) long long interfaceOrientation;
@property (readonly, nonatomic) id<UICoordinateSpace> coordinateSpace;
@property (readonly, nonatomic) UITraitCollection *traitCollection;
@property (readonly, nonatomic) UISceneSizeRestrictions *sizeRestrictions;
@property (readonly, nonatomic) NSArray *windows;
@property (readonly, nonatomic) UIScreen *_screen;
@property (readonly, nonatomic) long long _interfaceOrientation;
@property (readonly, nonatomic) id<UICoordinateSpace> _coordinateSpace;
@property (readonly, nonatomic) UITraitCollection *_traitCollection;
@property (readonly, nonatomic) UIStatusBarManager *_statusBarManager;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (void)_registerComponentClass:(Class)a0 withKey:(id)a1 predicate:(id)a2;
+ (id)_placeholderWindowSceneForScreen:(id)a0 create:(BOOL)a1;
+ (void)_updateVisibleSceneAndWindowOrderWithTest:(id /* block */)a0;
+ (id)_unassociatedWindowSceneForScreen:(id)a0 create:(BOOL)a1;
+ (id)_canvasForScene:(id)a0;
+ (id)_findNewKeyWindowSceneOnScreen:(id)a0;
+ (id)_keyboardWindowSceneForScreen:(id)a0 create:(BOOL)a1;

- (void)_enumerateWindowsIncludingInternalWindows:(BOOL)a0 onlyVisibleWindows:(BOOL)a1 asCopy:(BOOL)a2 stopped:(BOOL *)a3 withBlock:(id /* block */)a4;
- (id)_allWindowsIncludingInternalWindows:(BOOL)a0 onlyVisibleWindows:(BOOL)a1;
- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_referenceBoundsForOrientation:(long long)a0;
- (void)_noteDisplayIdentityDidChangeWithConfiguration:(id)a0;
- (BOOL)_windowsIgnoreSceneClientOrientation;
- (void)_updateTraitCollection;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_safeAreaInsetsForInterfaceOrientation:(long long)a0;
- (BOOL)_permitContextCreationForBindingDescription:(struct { id x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_referenceBounds;
- (void)_computeMetricsForWindows:(id)a0 animated:(BOOL)a1;
- (void)_detachWindow:(id)a0;
- (id)_allWindows;
- (unsigned long long)_currentlySupportedInterfaceOrientations;
- (id)_windowSceneDelegate;
- (void)_setSystemVolumeHUDEnabled:(BOOL)a0 forAudioCategory:(id)a1;
- (void)_loadWindowWithStoryboardIfNeeded:(id)a0;
- (id)_inheritingWindowsIncludingInvisible:(BOOL)a0;
- (long long)_resolvedOverscanCompensation;
- (void)_setSystemVolumeHUDEnabled:(BOOL)a0;
- (void)_setShouldDisableTouchCancellationOnRotation:(BOOL)a0;
- (id)_disableTouchCancellationOnRotation;
- (void)_setAVKitRequestedRefreshRate:(double)a0 HDRMode:(long long)a1 overscanCompensation:(long long)a2;
- (void)_attachWindow:(id)a0;
- (void)_showProgressWhenFetchingUserActivityForTypes:(id)a0;
- (id)initWithSession:(id)a0 connectionOptions:(id)a1;
- (void)_recycleAttachmentForWindow:(id)a0;
- (void)_updateClientSettingsToInterfaceOrientation:(long long)a0 withAnimationDuration:(double)a1;
- (id)_componentForKey:(id)a0;
- (void)_registerSettingsDiffActions:(id)a0 forKey:(id)a1;
- (void)_unregisterSettingsDiffActionsForKey:(id)a0;
- (void)_registerSceneActionsHandler:(id)a0 forKey:(id)a1;
- (void)_unregisterSceneActionsHandler:(id)a0;
- (void)_registerComponent:(id)a0 forKey:(id)a1;
- (void)_unregisterComponentForKey:(id)a0;
- (BOOL)_shouldLoadStoryboard;
- (void)_invalidate;
- (id)_topVisibleWindowPassingTest:(id /* block */)a0;
- (BOOL)_windowIsFront:(id)a0;
- (id)_visibleWindows;
- (id)_fallbackTraitCollection;
- (void)_readySceneForConnection;
- (id)_fbsSceneLayerForWindow:(id)a0;
- (id)canvasToolbar;
- (id)_screenshotServiceIfPresent;
- (void)_computeMetrics:(BOOL)a0;
- (double)_systemMinimumMargin;
- (void)_screenDidChangeFromScreen:(id)a0 toScreen:(id)a1;
- (void)_updateVisibleWindowOrderWithTest:(id /* block */)a0;
- (void)_windowUpdatedVisibility:(id)a0;
- (void)_windowUpdatedProperties:(id)a0;
- (BOOL)_needsMakeKeyAndVisible;
- (void)_prepareForResume;
- (void)_makeKeyAndVisibleIfNeeded;
- (void)_applySnapshotSettings:(id)a0 forActions:(id /* block */)a1;
- (void)_prepareForSuspend;
- (void)_windowDidBecomeKey:(id)a0;

@end

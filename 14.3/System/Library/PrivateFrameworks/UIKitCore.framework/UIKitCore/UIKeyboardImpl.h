@class UITextInputArrowKeyHistory, UIKeyboardScheduledTask, _UIKeyboardTextSelectionController, UIKeyboardCandidateController, NSDictionary, UIKBEditingGesturesIntroduction, NSMutableArray, TIKeyboardCandidateResultSet, UIKeyboardPopoverController, RTIDocumentTraits, UIKeyboardTaskQueue, TIKeyboardTouchEvent, UIResponder, TIKeyboardLayout, UIKeyboardLayout, _UIKeyboardImplProxy, UITextInteractionSelectableInputDelegate, UITextInteractionAssistant, TIKeyboardInputManagerStub, TUIKeyboardBackendController, _UIKeyboardFeedbackGenerator, UIKBAutofillController, UIContinuousPathIntroductionView, TIKeyboardInputManagerState, TIKeyboardCandidate, UIView, UITextSelectionView, NSArray, RTIInputSystemClient, UIKeyboardAutocorrectionController, UIAutocorrectInlinePrompt, TICandidateRequestToken, NSString, NSMutableDictionary, UIDelayedAction, UILexicon, _UIActionWhenIdle, RTIDocumentState, TIKeyboardState, UITextInputTraits, UIPhysicalKeyboardEvent, TISmartPunctuationController;
@protocol UIKeyboardImplGeometryDelegate, UITextInputPrivate, UIKeyInputPrivate, UITextInput, UIKeyboardCandidateList, UIWKInteractionViewProtocol, UIKeyboardInput, UIKeyInput, UITextCursorAssertion;

@interface UIKeyboardImpl : UIView <_UIIVCResponseDelegateImpl, _UIKeyboardTextSelectionGestureControllerDelegate, UITextInputSuggestionDelegate, UIKeyboardCandidateControllerDelegate, TIKeyboardInputManagerToImplProtocol, RTIInputSystemClientDelegate, RTIInputSystemSessionDelegate, UIPopoverPresentationControllerDelegate, UIKeyboardCandidateListDelegate> {
    id<UIKeyInput> m_delegate;
    UITextInteractionSelectableInputDelegate *m_selectableDelegate;
    UIKeyboardTaskQueue *m_taskQueue;
    TIKeyboardState *m_keyboardState;
    BOOL m_keyboardDelegateStateNeedsRefresh;
    long long m_textInputSource;
    UIView *m_languageIndicator;
    NSString *m_previousInputString;
    UIAutocorrectInlinePrompt *m_autocorrectPrompt;
    TIKeyboardCandidateResultSet *m_candidateResultSet;
    id<UIKeyboardCandidateList> m_candidateList;
    UIView *m_markedTextOverlay;
    UIKeyboardLayout *m_layout;
    NSMutableDictionary *m_keyedLayouts;
    UIKeyboardScheduledTask *m_autoDeleteTask;
    unsigned int m_autoDeleteCount;
    double m_autoDeleteLastDelete;
    double m_autoDeleteInterval;
    unsigned int m_autoDeleteShiftCharacter;
    double m_autoDeleteCurrentForceMultipler;
    double m_autoDeleteCurrentForce;
    BOOL m_autoDeleteUseForce;
    UIDelayedAction *m_longPressAction;
    long long m_originalOrientation;
    struct CGPoint { double x; double y; } m_inputPoint;
    int m_changeCount;
    double m_changeTime;
    struct __CFRunLoopObserver { } *m_observer;
    unsigned long long m_textInputChangingCount;
    BOOL m_textInputChangingText;
    BOOL m_textInputChangingDirection;
    BOOL m_textInputChangesIgnored;
    BOOL m_textInputUpdatingSelection;
    BOOL m_insideKeyInputDelegateCall;
    BOOL m_disableSyncTextChanged;
    BOOL m_disableClearingTextSuggestions;
    UITextInputTraits *m_defaultTraits;
    UITextInputTraits *m_traits;
    UITextInputTraits *m_overrideTraits;
    int m_returnKeyState;
    BOOL m_returnKeyEnabledInLayout;
    long long m_currentDirection;
    UILexicon *m_recentInputs;
    BOOL m_autoDeleteOK;
    BOOL m_autocapitalizationPreference;
    BOOL m_autocorrectionPreference;
    BOOL m_autoshift;
    BOOL m_caretShowingNow;
    BOOL m_changeNotificationDisabled;
    BOOL m_correctionLearningAllowed;
    BOOL m_delegateIsSMSTextView;
    BOOL m_doubleSpacePeriodWasAppliedInCurrentContext;
    BOOL m_doubleSpacePeriodPreference;
    BOOL m_hardwareKeyboardAttached;
    BOOL m_inDealloc;
    BOOL m_initializationDone;
    BOOL m_selecting;
    BOOL m_shift;
    BOOL m_shiftLocked;
    BOOL m_shiftLockedEnabled;
    BOOL m_settingShift;
    BOOL m_suggestionsShownForCurrentDeletion;
    BOOL m_originalShouldSkipCandidateSelection;
    BOOL m_suppressGeometryChangeNotifications;
    BOOL m_acceptingCandidate;
    BOOL m_didAutomaticallyInsertSpace;
    BOOL m_didSyncDocumentStateToInputDelegate;
    BOOL m_userChangedSelection;
    BOOL m_shouldChargeKeys;
    BOOL m_longPress;
    BOOL m_replacingWord;
    BOOL m_shiftNeedsUpdate;
    BOOL m_shiftPreventAutoshift;
    BOOL m_shiftHeldDownNeedsUpdated;
    BOOL m_delegateAdoptsTextInput;
    BOOL m_delegateAdoptsTextInputPrivate;
    BOOL m_delegateAdoptsWebTextInputPrivate;
    BOOL m_delegateAdoptsKeyboardInput;
    BOOL m_delegateAdoptsWKInteraction;
    BOOL m_delegateAdoptsKeyInputPrivate;
    BOOL m_firstResponderAdoptsTextInput;
    BOOL m_clientVariantSupportEnabled;
    BOOL m_clientVariantSupportEnabledEver;
    NSMutableArray *m_keyplaneNamesPreviousDelegate;
    NSMutableArray *m_keyplaneNamesCurrentDelegate;
    BOOL m_isRotating;
    BOOL m_preRotateShift;
    BOOL m_preRotateShiftLocked;
    BOOL m_suppressUpdateCandidateView;
    BOOL m_shouldUpdateCacheOnInputModesChange;
    BOOL m_rivenCenterFilled;
    double m_splitProgress;
    BOOL m_needsCandidates;
    BOOL m_shouldSkipCandidateGeneration;
    BOOL m_updateLayoutOnShowKeyboard;
    int _currentAlertReason;
    BOOL m_layoutAllowsCP;
    BOOL m_needsPasteSupportUpdate;
    BOOL m_delegateSupportsImagePaste;
    BOOL m_didUpdateCapsLockLanguageSwitchSetting;
    BOOL m_shouldEnableCapsLockLanguageSwitchByDefault;
    BOOL m_scrolling;
    BOOL m_hasInputOnAcceptCandidate;
    BOOL m_maximizing;
    BOOL m_usesAutoShiftFor3PK;
    unsigned long long m_previousSpaceKeyBehavior;
    unsigned long long m_previousReturnKeyBehavior;
    BOOL m_usesCandidateSelection;
    BOOL m_UsedCandidateSelection;
    BOOL m_hasEditedMarkedTextInExtendedView;
    BOOL m_updatingLayout;
    BOOL m_needsToRecomputeDesirableModes;
    BOOL m_isCapsLocked;
    UITextInputTraits *m_traitsForPreviousDelegate;
    UIDelayedAction *m_detachHardwareKeyboardAction;
    UIDelayedAction *m_updateLastUsedInputModeAction;
    UIView *m_capsLockSign;
    BOOL m_didAutomaticallyInsertSpaceBeforeChangingInputMode;
    BOOL m_isPerformingRemoteOperations;
    BOOL m_didExtendLongPressDelayForContinuousPath;
    BOOL m_inHandleKeyAppCommandForCurrentEvent;
    BOOL m_webEventWasHandledAsKeyCommand;
    BOOL m_webEventWasHandledByInputManager;
    BOOL m_webEventIsKeyDown;
    BOOL m_disableAutocapitalization;
    int m_predictionType;
    BOOL m_repeatDeleteFromHardwareKeyboard;
    long long m_cachedAutofillMode;
    BOOL m_isAutofilling;
    long long m_pendingAutofillIndex;
    BOOL m_ignoreSelectionChange;
    BOOL m_repeatDeleteWord;
    struct _NSRange { unsigned long long location; unsigned long long length; } m_textAlternativesRange;
    NSDictionary *m_autofillCustomInfo;
    unsigned long long m_numCPwords;
    _UIKeyboardImplProxy *m_implProxy;
    UIKeyboardScheduledTask *m_delayDeleteTask;
    id /* block */ _deferredUpdateTask;
    UIContinuousPathIntroductionView *_continuousPathIntroductionView;
    UIKBEditingGesturesIntroduction *_editingGestureIntroductionView;
    BOOL m_editingTraitsMarkedDirty;
    BOOL m_selectionIsEmpty;
    NSMutableDictionary *m_hardwareKeyDownCodeToEventMap;
    UIKeyboardPopoverController *_keyboardPopoverController;
    NSString *_inputModeForKeyboardPopoverToRestoreAfterRotation;
    BOOL _isSettingDelegate;
    BOOL _forwardingInputDelegateConformsToWKInteraction;
    BOOL _shouldRespectForwardingInputDelegate;
    double m_bottomPadding;
}

@property (class, nonatomic) struct CGPoint { double x0; double x1; } floatingPersistentOffset;
@property (class, readonly, nonatomic) struct CGPoint { double x0; double x1; } floatingNormalizedPersistentOffset;

@property (readonly, nonatomic) TIKeyboardInputManagerStub *inputManager;
@property (retain, nonatomic) id changedDelegate;
@property (readonly, nonatomic) UIKeyboardAutocorrectionController *autocorrectionController;
@property (readonly, nonatomic) UIKeyboardCandidateController *candidateController;
@property (retain, nonatomic) TIKeyboardInputManagerState *inputManagerState;
@property (readonly, nonatomic) UITextSelectionView *selectionView;
@property (readonly, nonatomic) UITextInteractionAssistant *textInteractionAssistant;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL prewarmsPredictiveCandidates;
@property (retain, nonatomic) UITextInputArrowKeyHistory *arrowKeyHistory;
@property (readonly, nonatomic) TIKeyboardInputManagerStub *inputManager;
@property (retain, nonatomic) TIKeyboardInputManagerState *inputManagerState;
@property (readonly, nonatomic) TUIKeyboardBackendController *backendController;
@property (copy, nonatomic) id /* block */ externalTask;
@property (retain, nonatomic) UIPhysicalKeyboardEvent *eventForCurrentWebEvent;
@property (readonly, nonatomic) UIKeyboardAutocorrectionController *autocorrectionController;
@property (readonly, nonatomic) UIKeyboardCandidateController *candidateController;
@property (readonly, nonatomic) TISmartPunctuationController *smartPunctuationController;
@property (retain, nonatomic) TIKeyboardTouchEvent *touchEventWaitingForKeyInputEvent;
@property (retain, nonatomic) _UIActionWhenIdle *delayedCandidateRequest;
@property (retain, nonatomic) UIKeyboardScheduledTask *autocorrectPromptTask;
@property (retain, nonatomic) _UIKeyboardTextSelectionController *textSelectionController;
@property (retain, nonatomic) id<UITextCursorAssertion> cursorAssertion;
@property (retain, nonatomic) _UIActionWhenIdle *deferredDidSetDelegateAction;
@property (retain, nonatomic) id changedDelegate;
@property (retain, nonatomic) UIView *internationalKeyIntroductionView;
@property (nonatomic) BOOL committingCandidate;
@property (nonatomic) BOOL hardwareKeyboardIsSeen;
@property (nonatomic) BOOL softwareKeyboardShownByTouch;
@property (nonatomic) BOOL handlingKeyCommandFromHardwareKeyboard;
@property (nonatomic) BOOL disableSmartInsertDelete;
@property (retain, nonatomic) UIKBAutofillController *autofillController;
@property (retain, nonatomic) RTIInputSystemClient *rtiClient;
@property (retain, nonatomic) RTIDocumentTraits *rtiDocumentTraits;
@property (retain, nonatomic) RTIDocumentState *rtiDocumentState;
@property (nonatomic) BOOL suppressRTIClient;
@property (nonatomic) BOOL applicationStateIsActiveForRTI;
@property (nonatomic) BOOL viewServiceStateIsActiveForRTI;
@property (readonly, nonatomic) BOOL canShowPredictionBar;
@property (retain, nonatomic) TICandidateRequestToken *currentCandidateRequest;
@property (retain, nonatomic) TIKeyboardCandidate *autocorrectionToAcceptBeforeProgressiveCandidates;
@property (retain, nonatomic) UIDelayedAction *updateCapsLockDelayOverrideForNonTyping;
@property (retain, nonatomic) NSArray *alternativePredictions;
@property (nonatomic) long long candidateViewOffset;
@property (retain, nonatomic) NSString *deletedString;
@property (nonatomic) BOOL floatingForced;
@property (copy, nonatomic) NSArray *characterRectsForCharacterRange;
@property (readonly, nonatomic) UIKeyboardLayout *activeLayout;
@property (nonatomic) BOOL _mimicShiftBeingHeld;
@property (weak, nonatomic) UIResponder<UIKeyInput> *forwardingInputDelegate;
@property (nonatomic) BOOL forCustomInputView;
@property (nonatomic) BOOL showInputModeIndicator;
@property (nonatomic) BOOL showsCandidateBar;
@property (readonly, nonatomic) BOOL shouldShowCandidateBar;
@property (nonatomic) BOOL receivedCandidatesInCurrentInputMode;
@property (nonatomic) BOOL showsCandidateInline;
@property (nonatomic) BOOL geometryIsChanging;
@property (readonly, nonatomic) BOOL continuousPathUnderway;
@property (readonly, nonatomic) BOOL isRotating;
@property (readonly, nonatomic) BOOL updatingPreferences;
@property (nonatomic) double deleteWordLastDelete;
@property (nonatomic) BOOL shouldSkipCandidateSelection;
@property (readonly, nonatomic) BOOL isDefaultPrediction;
@property (readonly, nonatomic) BOOL isAutofillPrediction;
@property (readonly, nonatomic) UIKeyboardTaskQueue *taskQueue;
@property (nonatomic) BOOL suppressUpdateLayout;
@property (nonatomic) BOOL suppressUpdateShiftState;
@property (nonatomic) BOOL animateUpdateBars;
@property (readonly, nonatomic) BOOL delegateRequiresKeyEvents;
@property (readonly) BOOL centerFilled;
@property BOOL rivenSplitLock;
@property (readonly) unsigned long long minimumTouchesForTranslation;
@property (readonly, nonatomic) BOOL splitTransitionInProgress;
@property (getter=isFloatingLocked) BOOL lockFloating;
@property (nonatomic, getter=isInHardwareKeyboardMode) BOOL inHardwareKeyboardMode;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property (retain, nonatomic) UIResponder<UIKeyInput> *delegate;
@property (nonatomic) id<UIKeyboardImplGeometryDelegate> geometryDelegate;
@property (readonly, nonatomic) UIResponder<UITextInput> *inputDelegate;
@property (readonly, nonatomic) UIResponder<UITextInput> *selectableInputDelegate;
@property (readonly, nonatomic) UIResponder<UITextInputPrivate> *privateInputDelegate;
@property (readonly, nonatomic) id<UIKeyboardInput> legacyInputDelegate;
@property (readonly, nonatomic) UIResponder<UIWKInteractionViewProtocol> *asynchronousInputDelegate;
@property (readonly, nonatomic) UIResponder<UIKeyInputPrivate> *privateKeyInputDelegate;
@property (readonly, nonatomic) UIResponder *delegateAsResponder;
@property (retain, nonatomic) _UIKeyboardFeedbackGenerator *feedbackGenerator;
@property (retain, nonatomic) TIKeyboardLayout *layoutForKeyHitTest;
@property (readonly, nonatomic) double timestampOfLastTouchesEnded;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)setFloating:(BOOL)a0;
+ (BOOL)isSplit;
+ (id)sharedInstance;
+ (void)applicationDidBecomeActive:(id)a0;
+ (void)applicationWillResignActive:(id)a0;
+ (void)applicationDidEnterBackground:(id)a0;
+ (void)applicationWillEnterForeground:(id)a0;
+ (BOOL)isFloating;
+ (Class)layoutClassForCurrentInputMode;
+ (BOOL)rivenTranslationPreference;
+ (double)keyboardWidthForScreen:(id)a0 withOrientation:(long long)a1;
+ (struct CGPoint { double x0; double x1; })_screenPointFromNormalizedPoint:(struct CGPoint { double x0; double x1; })a0;
+ (double)persistentSplitProgress;
+ (id)sharedInstanceForCustomInputView:(BOOL)a0;
+ (id)keyboardWindow;
+ (void)screenModeDidChange:(id)a0;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)a0;
+ (BOOL)isActivatingForeground;
+ (void)refreshRivenStateWithTraits:(id)a0 isKeyboard:(BOOL)a1;
+ (BOOL)isFloatingForced;
+ (BOOL)rivenInstalled;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })requestedFloatingInsets;
+ (id)activeInstance;
+ (void)setPersistentSplitProgress:(double)a0;
+ (void)_clearHardwareKeyboardMinimizationPreference;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })deviceSpecificStaticHitBufferForInterfaceOrientation:(long long)a0 inputMode:(id)a1;
+ (BOOL)keyboardOrientation:(long long)a0 isEquivalentToOrientation:(long long)a1;
+ (void)applicationWillSuspend:(id)a0;
+ (void)viewServiceHostWillResignActive:(id)a0;
+ (struct CGPoint { double x0; double x1; })_normalizedScreenPoint:(struct CGPoint { double x0; double x1; })a0;
+ (void)setFloating:(BOOL)a0 positionedAtOffset:(struct CGPoint { double x0; double x1; })a1 animated:(BOOL)a2;
+ (void)purgeImageCache;
+ (BOOL)rivenPreference;
+ (BOOL)isHardwareCommandKeyBeingHeld;
+ (void)releaseSharedInstance;
+ (long long)floatingIdiom;
+ (BOOL)isHardwareShiftKeyBeingHeld;
+ (BOOL)shouldMergeAssistantBarWithKeyboardLayout;
+ (struct CGPoint { double x0; double x1; })normalizedPersistentOffset;
+ (BOOL)showsGlobeAndDictationKeysExternally;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)a0;
+ (void)viewServiceHostDidBecomeActive:(id)a0;
+ (void)suppressSetPersistentOffset:(BOOL)a0;
+ (double)additionalInstanceHeightForInterfaceOrientation:(long long)a0 hasInputView:(BOOL)a1;
+ (double)floatingWidth;
+ (struct CGPoint { double x0; double x1; })persistentOffset;
+ (double)topMarginForInterfaceOrientation:(long long)a0;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })deviceSpecificPaddingForInterfaceOrientation:(long long)a0 inputMode:(id)a1;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)a0 ignoreInputView:(BOOL)a1;
+ (void)setParentTestForProfiling:(id)a0;
+ (void)sendPerformanceNotification:(id)a0 userInfo:(id)a1;
+ (BOOL)supportsFloating;
+ (void)applicationDidRemoveDeactivationReason:(id)a0;
+ (double)floatingHeight;
+ (void)setPersistentOffset:(struct CGPoint { double x0; double x1; })a0;
+ (struct CGPoint { double x0; double x1; })defaultUndockedOffsetForFloating:(BOOL)a0;
+ (struct CGSize { double x0; double x1; })defaultSizeForInterfaceOrientation:(long long)a0;
+ (BOOL)rivenShouldUndock;
+ (Class)layoutClassForInputMode:(id)a0 keyboardType:(long long)a1 screenTraits:(id)a2;
+ (void)applicationDidReceiveMemoryWarning:(id)a0;
+ (BOOL)supportsSplit;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInterfaceOrientation:(long long)a0;
+ (struct CGPoint { double x0; double x1; })normalizedPersistentOffsetIgnoringState;
+ (double)floatingScreenWidthToEmulate;
+ (BOOL)overrideNativeScreen;
+ (double)splitProgress;
+ (void)setFloating:(BOOL)a0 positionedAtDefaultOffsetAnimated:(BOOL)a1;
+ (double)additionalInstanceHeight;
+ (BOOL)smartInsertDeleteIsEnabled;
+ (id)normalizedInputModesFromPreference;
+ (void)hardwareKeyboardAvailabilityChanged;
+ (id)uniqueNumberPadInputModesFromInputModes:(id)a0 forKeyboardType:(long long)a1;
+ (void)switchControlStatusDidChange:(id)a0;
+ (void)sendPerformanceNotification:(id)a0;
+ (void)applicationWillAddDeactivationReason:(id)a0;
+ (id)keyboardScreen;

- (void)enable;
- (id)responderForSendCurrentLocation;
- (void)performDelete;
- (id)updateSecureCandidateRenderTraits;
- (void)setEditingTraitsMarkedDirty:(BOOL)a0;
- (void)setUserSelectedCurrentCandidate:(BOOL)a0;
- (void)didClearText;
- (BOOL)needAutofillLogin;
- (void)ejectKeyDown;
- (void)clearAutocorrectPromptTimer;
- (BOOL)_needsCandidates;
- (void)performSendCurrentLocation;
- (void)updateReturnKey;
- (id)_autofillContext;
- (BOOL)canPasteImage;
- (void)setDelegate:(id)a0 force:(BOOL)a1;
- (void)generateCandidates;
- (void)setCapsLockSign;
- (id)searchStringForMarkedText;
- (void)deactivateLayout;
- (void)updateAssistantView;
- (void)insertText:(id)a0;
- (void)updateLayout;
- (BOOL)usesContinuousPath;
- (id)inputForMarkedText;
- (void)updateShiftState;
- (void)finishSplitTransitionWithProgress:(double)a0;
- (BOOL)suppliesCompletions;
- (void)insertTextSuggestion:(id)a0;
- (void)notifyShiftState;
- (void)_nop;
- (void)stopAutoDelete;
- (BOOL)_isKeyCommand:(id)a0;
- (id)_passwordRules;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })getCorrectionRectIsVertical:(BOOL *)a0;
- (void)setShiftLockedForced:(BOOL)a0;
- (BOOL)textInputTraitsNeedAutofill;
- (void)replaceText:(id)a0;
- (BOOL)callShouldInsertText:(id)a0 onDelegate:(id)a1;
- (BOOL)canHandleDelete;
- (BOOL)userSelectedCurrentCandidate;
- (void)clearRecentInput;
- (void)showTextAlternativesInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)addInputString:(id)a0 withFlags:(unsigned long long)a1;
- (void)clearInput;
- (void)_setAutocorrects:(BOOL)a0;
- (void)clearLayouts;
- (void)showSelectionCommands;
- (void)unmarkText;
- (void)updateLayoutIfNeeded;
- (BOOL)hideAccessoryViewsDuringSplit;
- (void)handleClear;
- (void)setChanged;
- (void)processPayloadInfo:(id)a0;
- (void)setCaretBlinks:(BOOL)a0;
- (BOOL)deleteForwardAndNotify:(BOOL)a0;
- (void)showNextCandidates;
- (void)saveInputModesPreference:(id)a0;
- (BOOL)shouldShowLongPredictionList;
- (void)textAccepted:(id)a0;
- (void)setPreviousInputString:(id)a0;
- (void)inputManagerDidGenerateAutocorrections:(id)a0 executionContext:(id)a1;
- (void)removeAutocorrection;
- (void)setCandidateList:(id)a0;
- (id)implProxy;
- (id)emojiCandidate:(id)a0;
- (BOOL)usesCandidateSelection;
- (void)showNextPage;
- (BOOL)needOneTimeCodeAutofill;
- (BOOL)isAutoFillMode;
- (void)clearLongPressTimer;
- (void)deleteHandwritingStrokesAtIndexes:(id)a0;
- (void)setCandidates:(id)a0;
- (BOOL)acceptInputString:(id)a0;
- (BOOL)insertTextIfShould:(id)a0;
- (BOOL)keyboardsExpandedPreference;
- (BOOL)noContent;
- (double)shouldExtendLongPressAction:(id)a0;
- (BOOL)shouldRapidDelete;
- (BOOL)nextInputWouldStartSentence;
- (double)lastTouchDownTimestamp;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })correctionRect;
- (void)updateReturnKey:(BOOL)a0;
- (void)handleKeyEvent:(id)a0;
- (void)collapseSelection;
- (void)_wheelChangedWithEvent:(id)a0;
- (void)setHardwareKeyboardsSeenPreference:(id)a0;
- (id)physicalKeyboardEventWithInput:(id)a0 inputFlags:(int)a1;
- (void)inputSession:(id)a0 documentStateDidChange:(id)a1;
- (BOOL)layoutIsResizing;
- (void)_firstResponderDidChange:(id)a0;
- (void)completeDeleteFromInput;
- (BOOL)shouldShowKeyboardMenu;
- (void)detach;
- (void)clearAutofillGroup;
- (void)callLayoutUpdateReturnKey;
- (void)updateChangeTimeAndIncrementCount;
- (BOOL)shouldAcceptCandidate:(id)a0 beforeInputString:(id)a1;
- (BOOL)maximizing;
- (BOOL)isAutoShifted;
- (BOOL)predictionFromPreference;
- (void)setSuggestions:(id)a0;
- (BOOL)usesContinuousPathProgressiveCandidates;
- (BOOL)shouldAcceptContinuousPathConversion:(id)a0;
- (void)cancelAllKeyEvents;
- (void)setLayoutAllowsContinuousPath:(BOOL)a0;
- (BOOL)preferFallbackAutofillGroup;
- (BOOL)keyboardDrawsOpaque;
- (id)markedText;
- (BOOL)supportsNumberKeySelection;
- (BOOL)returnKeyEnabled;
- (unsigned long long)phraseBoundary;
- (id)_layout;
- (void)keyDeactivated;
- (void)inputSession:(id)a0 documentTraitsDidChange:(id)a1;
- (BOOL)usesAutoDeleteWord;
- (void)deleteBackward;
- (BOOL)shouldDeleteAutospaceBeforeTerminator:(id)a0;
- (void)setAutocorrectSpellingEnabled:(BOOL)a0;
- (void)setUsesCandidateSelection:(BOOL)a0;
- (BOOL)isTrackpadMode;
- (id)textInputTraits;
- (void)clearSelection;
- (void)queueDelayedTask:(id /* block */)a0;
- (BOOL)hasMarkedText;
- (void)textFrameChanged:(id)a0;
- (long long)needAutofill;
- (void)insertAttributedText:(id)a0;
- (BOOL)insertsSpaceAfterPredictiveInput;
- (BOOL)canHandleKeyHitTest;
- (void)prepareForFloatingTransition:(BOOL)a0;
- (void)flushDelayedTasks;
- (void)remoteControlReceivedWithEvent:(id)a0;
- (void)animateAutocorrectionToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_ensureRTIConnection;
- (BOOL)shouldShowDictationKey;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })globalFrameForCurrentKey;
- (id)currentKey;
- (void)restoreFocusFromEntryPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setSplitProgress:(double)a0;
- (BOOL)shouldUsePinyinStyleRowNavigation;
- (void)presentEditingIntroductionView;
- (BOOL)_shouldSuppressSoftwareKeyboardForResponder:(id)a0 ignoringPolicyDelegate:(BOOL)a1;
- (void)performOperations:(id /* block */)a0 withTextInputSource:(long long)a1;
- (void)setSplit:(BOOL)a0 animated:(BOOL)a1;
- (void)finishSetKeyboardInputMode:(id)a0 previousInputMode:(id)a1 didChangeDirection:(BOOL)a2;
- (void)applyRemoteDocumentTraitsIfNecessary:(id)a0 force:(BOOL)a1;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 forEvent:(struct __GSEvent { } *)a1;
- (void)setInputMode:(id)a0;
- (void)logHandwritingData;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inputString:(id)a2 searchString:(id)a3 candidateOffset:(long long)a4 liveConversionSegments:(id)a5 highlighSegmentIndex:(unsigned long long)a6;
- (void)callChangedSelection;
- (void)setCaretVisible:(BOOL)a0;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)a0 granularity:(int)a1 executionContext:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dragGestureRectInView:(id)a0;
- (id)attributedText;
- (id)inputStringFromPhraseBoundary;
- (void)textChanged:(id)a0;
- (long long)currentHandBias;
- (BOOL)editingTraitsMarkedDirty;
- (BOOL)candidateSelectionPredictionForTraits;
- (void)removeCapsLockDelayOverride;
- (void)endAllowingRemoteTextInput:(id)a0;
- (void)_setInputManager:(id)a0;
- (void)showKeyboardWithoutSuppressionPolicy;
- (id)_getCurrentKeyplaneName;
- (void)didSetDelegate;
- (void)forceShiftUpdate;
- (void)deleteFromInputWithFlags:(unsigned long long)a0;
- (void)dismissEditingIntroductionView;
- (void)moveCursorByAmount:(long long)a0;
- (void)textWillChange:(id)a0;
- (BOOL)caretVisible;
- (BOOL)applyAutocorrection:(id)a0;
- (void)refreshKeyboardState;
- (void)clearCapsLockDelayOverrideTimer;
- (void)handleKeyboardInput:(id)a0 executionContext:(id)a1;
- (id)replacementsFromSelectedText;
- (id)acceptInlineCandidate;
- (id)autocorrectionRecordForWord:(id)a0;
- (void)updateNoContentViews;
- (id)attributedMarkedText;
- (void)insertText:(id)a0 withAlternativePredictions:(id)a1;
- (void)completeAcceptCandidateBeforeAddingInputObject:(id)a0 executionContext:(id)a1;
- (void)_setNeedsCandidates:(BOOL)a0;
- (double)scaleCurrentForceFrom:(double)a0 to:(double)a1;
- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id /* block */)a0;
- (BOOL)handleKeyCommand:(id)a0 repeatOkay:(BOOL *)a1 beforePublicKeyCommands:(BOOL)a2;
- (BOOL)handleReturnKey:(BOOL)a0;
- (id)inputModeLastUsedPreference;
- (void)detachHardwareKeyboard;
- (void)clearDelayDeleteTimer;
- (BOOL)usesAutocorrectionLists;
- (BOOL)keyboardIsKeyPad;
- (void)updateKeyboardEventsLagging:(id)a0;
- (void)acceptHandwritingCandidate;
- (void)handleDelete;
- (void)handleEmojiInput:(id)a0 keyboardState:(id)a1;
- (BOOL)changeNotificationDisabled;
- (void)handleClearWithExecutionContext:(id)a0;
- (void)_createRTIClientIfNecessary;
- (int)returnKeyType;
- (void)showPreviousCandidate;
- (void)_touchIDDismissed;
- (void)applicationResumed:(id)a0;
- (BOOL)checkSpellingPreference;
- (void)layoutHasChanged;
- (void)completeDelete;
- (void)testAutocorrectionPromptWithCorrection:(id)a0;
- (void)setChangeNotificationDisabled:(BOOL)a0;
- (void)willMoveToWindow:(id)a0;
- (void)setAutocorrectionList:(id)a0;
- (void)_performTextOperationActionSelector:(SEL)a0;
- (BOOL)_shouldEmitString:(id)a0 forKeyEvent:(id)a1;
- (void)replaceAllTextInResponder:(id)a0 withText:(id)a1;
- (void)setTextInputChangesIgnored:(BOOL)a0;
- (BOOL)_shouldSuppressSoftwareKeyboardIgnoringPolicyDelegate:(BOOL)a0;
- (void)setInputPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)nextCharacterIsWordCharacter;
- (void)callLayoutSetShift:(BOOL)a0;
- (id)acceptInlineCandidateForInput:(id)a0;
- (void)adjustSegmentSize:(long long)a0;
- (id)UILanguagePreference;
- (void)setShouldSkipCandidateSelection:(BOOL)a0 userInitiated:(BOOL)a1;
- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)a0;
- (void)generateAutocorrectionWithExecutionContext:(id)a0;
- (BOOL)_canDeleteForward;
- (BOOL)callLayoutUsesAutoShift;
- (id)_remoteUnlocalizedAppName;
- (void)acceptPredictiveInput:(id)a0 executionContext:(id)a1;
- (BOOL)handleMoveCursorToStartOfLine:(BOOL)a0 beforePublicKeyCommands:(BOOL)a1 testOnly:(BOOL)a2 savedHistory:(id)a3 force:(BOOL)a4 canHandleSelectableInputDelegateCommand:(id /* block */)a5;
- (void)callChanged;
- (void)collapseSelectionAndAdjustByOffset:(long long)a0;
- (BOOL)handleInputManagerBasedKeybind:(id)a0 testOnly:(BOOL)a1;
- (void)_didChangeKeyplaneWithContext:(id)a0;
- (void)handleUpdateLastUsedInputModeAction:(id)a0;
- (void)generateCandidatesAsynchronously;
- (void)_setAutofillGroup:(id)a0;
- (BOOL)doubleSpacePeriodPreference;
- (void)applicationSuspendedEventsOnly:(id)a0;
- (void)_setKeyboardInputMode:(id)a0 userInitiated:(BOOL)a1 force:(BOOL)a2;
- (void)updateForChangedSelection;
- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)a0;
- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)a0;
- (void)setInitialDirection;
- (void)smartSelectionForTextInDocument:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 options:(unsigned long long)a2 completion:(id /* block */)a3;
- (void)addInputObject:(id)a0;
- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a0;
- (void)_setCandidateController:(id)a0;
- (id)generateAutocorrectionReplacements:(id)a0;
- (void)clearShiftState;
- (void)generateAutocorrectionsWithCompletionHandler:(id /* block */)a0;
- (BOOL)willDoubleSpacePeriodForInputString:(id)a0 afterSpace:(BOOL)a1 elapsedTime:(double)a2;
- (BOOL)shouldAllowRepeatEvent:(id)a0;
- (id)layoutState;
- (id)acceptAutocorrectionForWordTerminator:(id)a0;
- (BOOL)textInputTraitsNeedContactAutoFill;
- (void)acceptAutocorrectionForWordTerminator:(id)a0 executionContextPassingTIKeyboardCandidate:(id)a1;
- (void)callLayoutUpdateLocalizedKeys;
- (void)updateCandidateDisplay;
- (BOOL)autocorrectionPreferenceForTraits;
- (void)_updateRTIObjectsIfNecessary;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })subtractKeyboardFrameFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)finishLayoutToCurrentInterfaceOrientation;
- (void)storeDelegateConformance;
- (id)_contentsOfUsernameField;
- (BOOL)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(BOOL)a0;
- (BOOL)handleTabWithShift:(BOOL)a0;
- (void)dealloc;
- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)a0;
- (void)setOverrideTextInputTraits:(id)a0;
- (BOOL)delegateSuggestionsForCurrentInput;
- (void)reinitializeAfterInputModeSwitch:(BOOL)a0;
- (void)skipHitTestForTouchEvent:(id)a0 delayed:(BOOL)a1;
- (void)adjustAutoDeleteTimerForForce:(double)a0;
- (BOOL)textInputTraitsNeedOneTimeCode;
- (void)acceptAutocorrectionAndEndComposition;
- (void)touchAutoDeleteTimerWithThreshold:(double)a0 adjustForPartialCompletion:(BOOL)a1;
- (void)emojiSearchWillInsertEmoji:(id)a0 forSearchQuery:(id)a1;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (void)selectionWillChange:(id)a0;
- (void)_presentKeyboardPopoverWithInputMode:(id)a0 window:(id)a1 textInputView:(id)a2 caretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 isVerticalText:(BOOL)a4 completion:(id /* block */)a5;
- (void)removeFromSuperview;
- (void)setKeyboardInputMode:(id)a0 userInitiated:(BOOL)a1 updateIndicator:(BOOL)a2 executionContext:(id)a3;
- (void)finishSetInputMode:(id)a0 didChangeDirection:(BOOL)a1;
- (BOOL)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)a0;
- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)a0 selectionChanged:(BOOL)a1;
- (void)reloadCurrentInputMode;
- (void)finishTextChanged;
- (void)acceptCandidate:(id)a0;
- (id)_autofillGroup;
- (void)handleModifiersChangeForKeyEvent:(id)a0 executionContext:(id)a1;
- (void)updateFromTextInputTraits;
- (void)_processInputViewControllerKeyboardOutput:(id)a0 executionContext:(id)a1;
- (id)_remoteAssociatedDomains;
- (void)cancelCandidateRequests;
- (void)completeAcceptCandidate:(id)a0;
- (BOOL)callLayoutIsGeometricShiftOrMoreKeyForTouch:(id)a0;
- (BOOL)shouldSwitchInputMode:(id)a0;
- (BOOL)delegateIsSMSTextView;
- (void)releaseSuppressUpdateCandidateView;
- (void)refreshAutofillModeIfNecessary;
- (double)convertForceToGrams:(double)a0;
- (void)_performKeyboardOutput:(id /* block */)a0 respectingForwardingDelegate:(BOOL)a1;
- (BOOL)hasEditableMarkedText;
- (BOOL)accessibilityUsesExtendedKeyboardPredictionsEnabled;
- (BOOL)shouldLoadAutofillSignUpInputViewController;
- (BOOL)_shouldLoadPredictionsBasedOnCurrentTraits;
- (void)pasteOperation;
- (void)setInputMode:(id)a0 userInitiated:(BOOL)a1;
- (void)jumpToCompositions;
- (void)textAccepted:(id)a0 executionContext:(id)a1;
- (void)callLayoutUpdateAllLocalizedKeys;
- (void)pushAutocorrections:(id)a0 requestToken:(id)a1;
- (void)handleAutofillCredentialSaveIfNeeded:(id)a0;
- (void)_suppressSoftwareKeyboardStateChangedIgnoringPolicyDelegate:(BOOL)a0;
- (void)handleStringInput:(id)a0 withFlags:(unsigned long long)a1 withInputManagerHint:(id)a2 executionContext:(id)a3;
- (void)responseContextDidChange;
- (void)_dynamicUserInterfaceTraitDidChange;
- (void)setInputModeToNextASCIICapableInPreferredList;
- (BOOL)delegateSupportsImagePaste;
- (BOOL)capsLockKeyHasLanguageSwitchLabel;
- (void)restartCurrentRemoteTextInputSession;
- (void)syncDocumentStateToInputDelegate;
- (void)completeHandleKeyEvent:(id)a0;
- (void)unmarkText:(id)a0;
- (BOOL)canHandleEvent:(id)a0;
- (BOOL)isAutoDeleteActive;
- (void)performKeyboardOutput:(id)a0;
- (void)updateStylingTraitsIfNeeded;
- (void)handleDelayedActionLongPress:(id)a0;
- (void)acceptAutocorrection:(id)a0 executionContextPassingTIKeyboardCandidate:(id)a1;
- (void)generateCandidatesFromReplacements;
- (void)copyOperation;
- (void)updateAutocorrectPrompt:(id)a0;
- (void)updateInputManagerAutocapitalizationType;
- (void)generateCandidatesAsynchronouslyWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectedCandidate:(id)a1;
- (void)_touchIDPresented;
- (void)callLayoutLongPressAction;
- (void)handleAcceptedCandidate:(id)a0 executionContext:(id)a1;
- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)a0;
- (void)prepareForGeometryChange;
- (BOOL)handleMoveCursorToEndOfLine:(BOOL)a0 beforePublicKeyCommands:(BOOL)a1 testOnly:(BOOL)a2 savedHistory:(id)a3 force:(BOOL)a4 canHandleSelectableInputDelegateCommand:(id /* block */)a5;
- (id)updatedKeyBehaviors;
- (BOOL)delayedCandidateList;
- (void)candidateBarDidExtendWithGesture;
- (BOOL)inputModeHasHardwareLayout:(id)a0;
- (void)fadeAutocorrectPrompt;
- (void)_handleWebKeyEvent:(id)a0 withInputString:(id)a1 executionContext:(id)a2;
- (void)updateForHandBiasChange;
- (id)autocorrectPromptRectsFromFirstDelegateRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 lastDelegateRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)isCapsLockSwitchEnabled;
- (void)clearAnimations;
- (void)hideInternationalKeyIntroductionIfNeeded;
- (void)textChanged:(id)a0 executionContext:(id)a1;
- (BOOL)handleKeyAppCommandForCurrentEvent;
- (void)autocorrectionAnimationDidStopWithAutocorrectionView:(id)a0;
- (void)_updateSelectableInputDelegateIfNecessary;
- (void)addInputString:(id)a0 withFlags:(unsigned long long)a1 executionContext:(id)a2;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (BOOL)shouldGenerateCandidatesAfterSelectionChange;
- (void)performKeyBehaviorCommitInline;
- (void)movePhraseBoundaryToDirection:(long long)a0 granularity:(long long)a1;
- (void)clearDetachHardwareKeyboardAction;
- (void)clearForwardingInputDelegateAndResign:(BOOL)a0;
- (BOOL)isMemberOfPossibleAutofillGroup:(id)a0;
- (void)clearLanguageIndicator;
- (void)insertTextSuggestionCandidate:(id)a0;
- (void)keyActivated;
- (void)setKeyboardInputMode:(id)a0 userInitiated:(BOOL)a1;
- (void)clearUpdateLastUsedInputModeAction;
- (BOOL)canUseCandidateBarAsSupplementToInlineView;
- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)a0 withPreviousInputMode:(id)a1;
- (int)textInputChangingCount;
- (void)setShiftLocked:(BOOL)a0;
- (void)dismissKeyboard;
- (void)startDelayDeleteTimer;
- (void)dismissKeyboardPopoverIfNecessaryWithCompletion:(id /* block */)a0;
- (BOOL)isMemberOfAutofillGroup:(id)a0;
- (void)removeAllDynamicDictionaries;
- (void)prepareForSelectionChange;
- (BOOL)callLayoutIsShiftKeyBeingHeld;
- (BOOL)_hasCandidates;
- (void)setAttributedMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inputString:(id)a2 searchString:(id)a3;
- (void)_setKeyboardInputMode:(id)a0 userInitiated:(BOOL)a1 updateIndicator:(BOOL)a2 force:(BOOL)a3 executionContext:(id)a4;
- (int)changeCount;
- (void)touchUpdateLastUsedInputModeAction;
- (void)didDismissMemojiCard;
- (BOOL)shouldUseCarPlayModes;
- (void)updateLayoutAndSetShift;
- (void)_updateKeyboardConfigurations;
- (void)trackResponderForAutofillIfNeeded:(id)a0;
- (void)longPressAction:(id)a0;
- (void)moveCursorLeftShifted:(BOOL)a0;
- (void)generateAutofillCandidate;
- (BOOL)shouldEnableShiftForDeletedCharacter:(unsigned int)a0;
- (void)_updateRTIAllowedAndNotify:(BOOL)a0 withReason:(id)a1;
- (void)_remapKeyEvent:(id)a0 withKeyEventMap:(id)a1;
- (void)attemptAuthenticationWithEvent:(id)a0;
- (unsigned long long)_clipCornersOfView:(id)a0;
- (void)setTextSelectionControllerFromDelegate;
- (BOOL)_canHandleResponderCommand:(SEL)a0;
- (void)_updateRTITraitsIfNecessary;
- (BOOL)hardwareKeyboardAttached;
- (void)setSelectionWithPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setCorrectionLearningAllowed:(BOOL)a0;
- (id)_remoteAppId;
- (id)_remoteLocalizedAppName;
- (void)_deactiveActiveKeys;
- (void)lookUpResponderChainForCustomInputView;
- (BOOL)callShouldDeleteForward;
- (id)keyplaneView;
- (void)addInputEvent:(id)a0 executionContext:(id)a1;
- (id)generateAutocorrectionListForSelectedText;
- (void)addInputString:(id)a0 withFlags:(unsigned long long)a1 withInputManagerHint:(id)a2;
- (void)_handleKeyBehavior:(unsigned long long)a0 forKeyType:(id)a1;
- (void)cleanUpBeforeInputModeSwitch;
- (void)acceptRecentInput:(id)a0;
- (void)skipHitTestForTouchEvent:(id)a0;
- (void)didMoveToSuperview;
- (BOOL)shouldAllowSelectionGestures:(BOOL)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 toBegin:(BOOL)a2;
- (void)applyRemoteDocumentStateIfNecessary:(id)a0 force:(BOOL)a1;
- (void)_updateSoundPreheatingForWindow:(id)a0;
- (BOOL)acceptWord:(id)a0 firstDelete:(unsigned long long)a1;
- (BOOL)transitionInProgress;
- (id)handleDeleteAutospaceForInputString:(id)a0 afterSpace:(BOOL)a1;
- (void)refreshRivenPreferences;
- (void)didMoveToWindow;
- (BOOL)callLayoutIsShiftKeyPlaneChooser;
- (void)updateDoubleSpacePeriodStateForString:(id)a0;
- (void)setShiftOffIfNeeded;
- (BOOL)_delegateRequiresKeyEvents;
- (id)_getAutocorrection;
- (void)performTextOperations:(id)a0;
- (void)clearAutoDeleteTimer;
- (void)inputManagerDidGenerateCandidatesForRequest:(id)a0 resultSet:(id)a1;
- (void)completeAddInputString:(id)a0;
- (void)callLayoutSetAutoshift:(BOOL)a0;
- (void)revealHiddenCandidates;
- (BOOL)isKeyboardPopoverPresented;
- (void)candidateListAcceptCandidate:(id)a0;
- (BOOL)canShowAppConnections;
- (void)performReturn;
- (void)acceptCandidate:(id)a0 forInput:(id)a1;
- (void)_handleWebKeyEvent:(id)a0 withIndex:(unsigned long long)a1 inInputString:(id)a2 executionContext:(id)a3;
- (void)setAutocorrection:(id)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)performKeyBehaviorConfirmFirstCandidate;
- (void)updateDefaultsWithResults:(id /* block */)a0;
- (void)setInSplitKeyboardMode:(BOOL)a0;
- (id)authenticationMessagesForEvent:(id)a0;
- (void)handleClearWithInsertBeforeAdvance:(id)a0;
- (id)autocorrectPromptRectsForInput:(id)a0;
- (void)postInputViewControllerShouldUpdateNotification:(id)a0;
- (id)inputModePreference;
- (void)completeUpdateForChangedSelection:(BOOL)a0;
- (BOOL)cursorIsAtEndOfMarkedText;
- (void)cutOperation;
- (void)setReturnKeyEnabled:(BOOL)a0;
- (void)touchAutocorrectPromptTimer;
- (void)clearInputForMarkedText;
- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)a0 containingProactiveTriggers:(BOOL)a1;
- (void)layoutSubviews;
- (BOOL)displaysCandidates;
- (BOOL)isLongPress;
- (BOOL)suppressOptOutASPCandidateUpdateForDelegate:(id)a0;
- (BOOL)shouldShowInternationalKeyIntroduction;
- (id)_fallbackAutofillGroup;
- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)a0 user:(id)a1 password:(id)a2 passwordIsAutoGenerated:(BOOL)a3;
- (void)hideKeyboardIgnoringHardwareLayouts:(BOOL)a0;
- (void)handleAutoDeleteWithExecutionContext:(id)a0;
- (void)removeASPVisualEffectsIfNecessary:(id)a0;
- (id)textSelectionControllerForInputDelegate:(id)a0;
- (void)deleteFromInput;
- (void)updateForChangedSelectionWithExecutionContext:(id)a0;
- (void)_handleWebKeyEvent:(id)a0 withEventType:(int)a1 withInputString:(id)a2 withInputStringIgnoringModifiers:(id)a3 executionContext:(id)a4;
- (void)updateKeyboardOutput:(id)a0 withInputForSmartPunctuation:(id)a1 keyboardConfiguration:(id)a2;
- (void)updateKeyboardStateForInsertion:(id)a0;
- (void)generateCandidatesWithOptions:(int)a0;
- (void)_updateExternalDeviceInputSettingForWindow:(id)a0;
- (void)didChangePhraseBoundary;
- (BOOL)disableInputBars;
- (void)_updateKeyboardSuppression:(id)a0;
- (void)presentationControllerDidDismiss:(id)a0;
- (void)startAutoDeleteTimer;
- (void)removeAutocorrectPromptAndCandidateList;
- (BOOL)globeKeyDisplaysAsEmojiKey;
- (void)refreshSecureCandidatesIfNecessary;
- (void)setShift:(BOOL)a0 autoshift:(BOOL)a1;
- (BOOL)autocorrectSpellingEnabled;
- (BOOL)shiftLockPreference;
- (void)handleKeyEvent:(id)a0 executionContext:(id)a1;
- (void)addInputString:(id)a0 fromVariantKey:(BOOL)a1;
- (void)touchDelayDeleteTimerWithThreshold:(double)a0;
- (void)keyboardDidHide:(id)a0;
- (void)showKeyboard;
- (void)updateAutocorrectPrompt:(id)a0 correctionRects:(id)a1;
- (void)updateShowCandidateBar;
- (void)acceptCurrentCandidateIfSelected;
- (BOOL)canPresentEmojiPopover;
- (void)_performInputViewControllerOutput:(id)a0;
- (void)handleDeleteWordWithExecutionContext:(id)a0;
- (BOOL)_containsUsernamePasswordPairsInAutofillGroup:(id)a0;
- (id)responderStylingTraitsForceEditingMask:(BOOL)a0;
- (void)handleDeleteAsRepeat:(BOOL)a0 executionContext:(id)a1;
- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)a0 characterCountForRapidDelete:(int)a1;
- (void)didApplyAutocorrection:(id)a0 autocorrectPromptFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)moveSelectionToEndOfWord;
- (void)setShift:(BOOL)a0;
- (unsigned long long)handleKeyCommand:(id)a0 repeatOkay:(BOOL *)a1 beforePublicKeyCommands:(BOOL)a2 testOnly:(BOOL)a3;
- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)a0;
- (BOOL)autocorrectionPreference;
- (void)createTypoTrackerReport;
- (BOOL)_canHandleResponderCommandConservatively:(SEL)a0;
- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)a0;
- (long long)preferredCandidateViewTypeForCandidateResultSet:(id)a0;
- (void)trackUsageForCandidateAcceptedAction:(id)a0;
- (void)adjustCapsLockDelayOverride;
- (BOOL)selectionIsEndOfWord;
- (void)scheduleReplacementsAfterDeletionToEndOfWord;
- (BOOL)autocapitalizationPreference;
- (BOOL)shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode:(BOOL)a0 ignoreHidePredictionTrait:(BOOL)a1;
- (void)moveCursorRightShifted:(BOOL)a0;
- (BOOL)handleCandidateListNavigation:(unsigned int)a0 hasCandidatesForTypedInput:(BOOL)a1 shiftDown:(BOOL)a2 keyCommandTypeHandled:(unsigned long long *)a3 allowRepeat:(BOOL *)a4;
- (BOOL)_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:(BOOL)a0;
- (void)handleDeleteWithExecutionContext:(id)a0;
- (void)acceptFirstCandidate;
- (void)syncInputManagerToAcceptedAutocorrection:(id)a0 forInput:(id)a1;
- (void)performHitTestForTouchEvent:(id)a0 executionContextPassingNSNumber:(id)a1;
- (void)setDocumentStateForAutocorrection:(id)a0;
- (BOOL)shouldRapidDeleteWithDelegate;
- (void)_requestInputManagerSync;
- (void)setInputMode:(id)a0 userInitiated:(BOOL)a1 updateIndicator:(BOOL)a2 executionContext:(id)a3;
- (void)presentEmojiPopoverViaTrigger:(id)a0 completion:(id /* block */)a1;
- (BOOL)_shouldMinimizeForHardwareKeyboard;
- (void)clearDelegate;
- (void)clearTransientState;
- (BOOL)acceptWord:(id)a0 firstDelete:(unsigned long long)a1 forInput:(id)a2;
- (void)syncInputManagerToKeyboardState;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a0;
- (void)_updateInputViewControllerOutput:(id)a0 forKeyboardOutput:(id)a1;
- (BOOL)handleTabWithShift:(BOOL)a0 beforePublicKeyCommands:(BOOL)a1;
- (void)addInputObject:(id)a0 executionContext:(id)a1;
- (void)addWordTerminator:(id)a0 afterSpace:(BOOL)a1 afterAcceptingCandidate:(id)a2 elapsedTime:(double)a3 executionContext:(id)a4;
- (void)setLayoutRenderConfig:(id)a0;
- (double)biasedKeyboardWidthRatio;
- (void)_setAttributedMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inputString:(id)a2 searchString:(id)a3 compareAttributes:(BOOL)a4;
- (void)_showKeyboardIgnoringPolicyDelegate:(BOOL)a0;
- (id)dynamicCaretList;
- (id)acceptCurrentCandidateForInput:(id)a0;
- (BOOL)caretBlinks;
- (void)candidateListSelectionDidChange:(id)a0;
- (void)clearTextAlternativesRange;
- (void)_moveWithEvent:(id)a0;
- (BOOL)isSelectionAtSentenceAutoshiftBoundary;
- (id)_keyboardBehaviorState;
- (void)dismissContinuousPathIntroductionView;
- (void)postInputResponderCapabilitiesChangedNotification;
- (BOOL)shiftLockedEnabled;
- (BOOL)shouldSwitchFromInputManagerMode:(id)a0 toInputMode:(id)a1;
- (BOOL)callShouldInsertText:(id)a0;
- (void)releaseInputManagerIfInactive;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)clearTimers;
- (void)updateHardwareKeyboardLayout;
- (void)insertText:(id)a0 updateInputSource:(BOOL)a1;
- (BOOL)_isKeyboardPopoverVisibleOrDismissing;
- (BOOL)shouldShowInternationalKey;
- (void)removeCandidateList;
- (BOOL)handleTabWithShift:(BOOL)a0 beforePublicKeyCommands:(BOOL)a1 isMoveAction:(BOOL)a2 testOnly:(BOOL)a3;
- (void)beginAllowingRemoteTextInput:(id)a0;
- (double)timeoutForCurrentForce;
- (void)handleObserverCallback;
- (BOOL)_handleKeyCommand:(id)a0;
- (void)_tagTouchForTypingMenu:(unsigned int)a0;
- (void)touchLongPressTimer;
- (void)updateLayoutToCurrentInterfaceOrientation;
- (void)selectionScrolling:(id)a0;
- (id)acceptCurrentCandidate;
- (void)updateKeyboardConfigurations;
- (void)prepareKeyboardInputModeFromPreferences:(id)a0;
- (BOOL)handleMoveResponderWithShift:(BOOL)a0;
- (void)_keyboardOutputToRTISourceSession:(id /* block */)a0;
- (void)delayedInit;
- (void)updateTextCandidateView;
- (void)defaultsDidChange;
- (void)setInputManagerFromCurrentInputMode;
- (void)recomputeActiveInputModesWithExtensions:(BOOL)a0;
- (void)applicationResumedEventsOnly:(id)a0;
- (BOOL)isShifted;
- (void)didAcceptAutocorrection:(id)a0 wordTerminator:(id)a1;
- (struct CGSize { double x0; double x1; })stretchFactor;
- (void)hideKeyboard;
- (id)desirableInputModesWithExtensions:(BOOL)a0;
- (void)cancelSplitTransition;
- (void)setPendingAutofillIndex:(long long)a0;
- (void)acceptAutocorrection;
- (void)rejectAutocorrection:(id)a0;
- (void)sendCallbacksForPostCorrectionsRemoval;
- (void)clearExcessKeyboardMemory;
- (long long)_needAutofillCandidate:(id)a0;
- (void)proceedShouldReturnIfNeededForASP;
- (BOOL)_cancelOperation:(BOOL)a0 testOnly:(BOOL)a1;
- (void)dismissKeyboardPopoverBeforeCleanup:(BOOL)a0 completion:(id /* block */)a1;
- (id)returnKeyDisplayName;
- (void)_scheduleInputAdditionOrDeletion:(id /* block */)a0;
- (void)beginFloatingTransitionFromPanGestureRecognizer:(id)a0;
- (void)setDefaultTextInputTraits:(id)a0;
- (void)setCapsLockIfNeeded;
- (BOOL)shouldShowContinuousPathIntroductionView;
- (void)_handleKeyEvent:(id)a0 executionContext:(id)a1;
- (void)updateDelegatePasteSupport;
- (void)textDidChange:(id)a0;
- (void)cleanupKeyboardPopover;
- (void)setAutomaticMinimizationEnabled:(BOOL)a0;
- (void)longPressAction;
- (void)_performKeyboardOutputOperations:(id)a0;
- (void)presentKeyboardPopoverWithInputMode:(id)a0 completion:(id /* block */)a1;
- (BOOL)_emojiPopoverShortcut:(BOOL)a0 testOnly:(BOOL)a1;
- (id)candidateList;
- (long long)_textInputSourceForDelegate:(id)a0;
- (void)didPresentMemojiCard;
- (BOOL)needsToDeferUpdateTextCandidateView;
- (void)acceptCandidate:(id)a0 forInput:(id)a1 executionContext:(id)a2;
- (BOOL)delegateAlreadyInAutofillGroup;
- (BOOL)liveConversionEnabled;
- (id)_delegateRespectingForwardingDelegate:(BOOL)a0;
- (void)trackUsageForPromptedCorrection:(id)a0 inputString:(id)a1 previousPrompt:(id)a2;
- (BOOL)keyboardIsInPencilTextInputMode;
- (BOOL)handleHorizontalArrow:(BOOL)a0 shiftDown:(BOOL)a1 beforePublicKeyCommands:(BOOL)a2 testOnly:(BOOL)a3 isVerticalCandidate:(BOOL)a4 hasCandidatesForTypedInput:(BOOL)a5 shouldNavigateCandidateList:(BOOL)a6 canHandleInputDelegateCommand:(id /* block */)a7 savedHistory:(id)a8 keyCommandTypeHandled:(unsigned long long *)a9;
- (void)traitCollectionDidChange;
- (void)forceShiftUpdateIfKeyboardStateChanged;
- (id)documentIdentifierForInputDelegate:(id)a0;
- (BOOL)allowsReachableKeyboard;
- (void)_updateRTIStateIfNecessary;
- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a0 preserveIfPossible:(BOOL)a1;
- (void)handleDeletionForCandidate:(id)a0;
- (BOOL)shouldAllowTwoFingerSelectionGestureOnView:(id)a0;
- (void)removeAutocorrectPrompt;
- (id)inputEventForInputString:(id)a0;
- (void)selectionDidChange:(id)a0;
- (BOOL)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (unsigned long long)_handleKeyCommandCommon:(id)a0 testOnly:(BOOL)a1;
- (BOOL)presentationControllerShouldDismiss:(id)a0;
- (void)updateLayoutIfNecessary;
- (void)_setShiftLockedEnabled:(BOOL)a0;
- (void)addInputString:(id)a0;
- (void)_showAutofillExtras;
- (void)_setTransientSelectionModeEnabled:(BOOL)a0 forInputDelegate:(id)a1;
- (BOOL)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact;
- (void)setLabel:(id)a0 forKey:(id)a1;
- (void)deleteBackwardAndNotify:(BOOL)a0;
- (void)recomputeActiveInputModesWithExtensions:(BOOL)a0 allowNonLinguisticInputModes:(BOOL)a1;
- (BOOL)shouldForwardInsertSpaceAfterAcceptingPredictiveInput:(id)a0;
- (id)_getCurrentKeyboardName;
- (void)performKeyBehaviorConfirm;
- (void)setShiftNeedsUpdate;
- (BOOL)isShiftLocked;
- (BOOL)isUsingDictationLayout;
- (void)layoutDidResize;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forCustomInputView:(BOOL)a1;
- (BOOL)hasDelegate;
- (void)geometryChangeDone:(BOOL)a0;
- (void)touchLongPressTimerWithDelay:(double)a0;
- (void)deleteFromInputWithFlags:(unsigned long long)a0 executionContext:(id)a1;
- (void)scheduleReplacementsWithOptions:(unsigned long long)a0;
- (BOOL)_shouldSuppressSoftwareKeyboard;
- (BOOL)_isShowingCandidateUIWithAvailableCandidates;
- (void)finishLayoutChangeWithArguments:(id)a0;
- (void)setKeyboardInputModeFromPreferences:(id)a0;
- (void)syncKeyboardToConfiguration:(id)a0;
- (void)insertEmojiFromPopover:(id)a0;
- (BOOL)callLayoutIgnoresShiftState;
- (void)removeRecentInput:(id)a0 completionHandler:(id /* block */)a1;
- (void)sendCallbacksForPreCorrectionsDisplay;
- (long long)_positionInCandidateList:(id)a0;
- (void)startAutoDeleteTimerForForce:(double)a0;
- (void)candidateListInvalidateSelection:(id)a0;
- (BOOL)shouldApplyAcceptedAutocorrection:(id)a0;
- (BOOL)isRTIClient;
- (id)inputOverlayContainer;
- (BOOL)callShouldReplaceExtendedRange:(long long)a0 withText:(id)a1 includeMarkedText:(BOOL)a2;
- (void)_postInputResponderChangedNotification;
- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_getAutocorrectionList;
- (void)touchLongPressTimerWithDelay:(double)a0 userInfo:(id)a1;
- (BOOL)checkSpellingPreferenceForTraits;
- (id)hardwareKeyboardsSeenPreference;
- (void)completeHandleAutoDelete;
- (void)_performKeyboardOutput:(id)a0 shouldCheckDelegate:(BOOL)a1;
- (void)completeAddInputString:(id)a0 generateCandidates:(BOOL)a1;
- (BOOL)isMinimized;
- (BOOL)automaticMinimizationEnabled;
- (void)clearChangeTimeAndCount;
- (void)toggleSoftwareKeyboard;
- (void)_clearAutofillGroup;
- (id)_getLocalizedInputMode;
- (void)setShiftPreventAutoshift:(BOOL)a0;
- (long long)needAutofillCandidate:(id)a0;
- (void)hideKeyboardWithoutPreflightChecks;
- (BOOL)handleKeyTextCommandForCurrentEvent;
- (void)generateReplacementsForString:(id)a0 candidatesHandler:(id /* block */)a1 executionContext:(id)a2;
- (id)updateKeyBehaviors:(id)a0 withBehaviors:(id)a1 forState:(id)a2;
- (void)updateInputModeLastChosenPreference;
- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)a0;
- (BOOL)dontPushOneTimeCode;
- (void)finishSetExtensionInputMode:(id)a0 didChangeDirection:(BOOL)a1;
- (void)insertTextAfterSelection:(id)a0;
- (void)skipHitTestForTouchEvents:(id)a0;
- (void)takeTextInputTraitsFromDelegate;
- (BOOL)_isValidKeyInput:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectToAutocorrectRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 delegateView:(id)a1 container:(id)a2;
- (void)toggleShift;
- (void)_updateTextInputKeyboardSourceForDelegate:(id)a0;
- (unsigned long long)maxNumberOfProactiveCells;
- (void)performKeyboardOutputInfo:(id)a0;
- (void)_completePerformInputViewControllerOutput:(id)a0 executionContext:(id)a1;
- (void)clearInputWithCandidatesCleared:(BOOL)a0;
- (void)performHitTestForTouchEvents:(id)a0 executionContextPassingNSNumber:(id)a1;
- (id)handleReplacement:(id)a0 forSpaceAndInput:(id)a1;
- (void)showKeyboardIfNeeded;
- (void)acceptPredictiveInput:(id)a0;
- (void)showFirstTextAlternativeWithRangeAdjustment:(long long)a0;
- (BOOL)handleVerticalArrow:(BOOL)a0 shiftDown:(BOOL)a1 beforePublicKeyCommands:(BOOL)a2 testOnly:(BOOL)a3 isVerticalCandidate:(BOOL)a4 hasCandidatesForTypedInput:(BOOL)a5 inputDelegateCommandEnabled:(BOOL)a6 canHandleInputDelegateCommand:(id /* block */)a7 savedHistory:(id)a8 keyCommandTypeHandled:(unsigned long long *)a9;
- (void)_windowDidBecomeKey:(id)a0;
- (void)animateAutocorrectionToText:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)playDeleteKeyFeedback:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)a0;
- (void)prepareLayoutForInterfaceOrientation:(long long)a0;
- (void)willReplaceTextInRangedSelectionWithKeyboardInput;
- (id)autocorrectPrompt;
- (id)inputOverlayContainerForCandidateView:(BOOL)a0;
- (void)removeSpaceAfterEmojiForInputString:(id)a0;
- (void)showInternationalKeyIntroductionIfNeededWithPreviousInputMode:(id)a0;
- (id)_rangeForAutocorrectionText:(id)a0;
- (BOOL)smartInsertDeleteIsEnabled;
- (void)releaseInputManager;
- (void)callLayoutUpdateRecentInputs;
- (BOOL)handleKeyInputMethodCommandForCurrentEvent;
- (void)_queued_performTextOperations:(id)a0;
- (void)setInputModeFromPreferences;
- (void)updateKeyboardStateForDeletion;
- (void)generateAutofillCandidateByAddingTask:(BOOL)a0;
- (void)handleKeyWithString:(id)a0 forKeyEvent:(id)a1 executionContext:(id)a2;
- (BOOL)isCapsLockASCIIToggle;
- (void)hardwareKeyboardAvailabilityChanged;
- (id)inputWordForTerminatorAtSelection;
- (void)presentContinuousPathIntroductionView;
- (void)trackUsageForAcceptedAutocorrection:(id)a0 promptWasShowing:(BOOL)a1;
- (void)updateAutocorrectPrompt:(id)a0 executionContext:(id)a1;
- (BOOL)isCallingInputDelegate;
- (id)_activeAssertionController;
- (BOOL)delegateSupportsCorrectionUI;
- (void)flushTouchEventWaitingForKeyInputEventIfNecessary;
- (id)markedTextOverlay;
- (BOOL)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)a0;
- (void)updateObserverState;
- (BOOL)isPredictionViewControllerVisible;
- (void)addInputString:(id)a0 withFlags:(unsigned long long)a1 withInputManagerHint:(id)a2 executionContext:(id)a3;
- (void)setTwoFingerTapTimestamp:(double)a0;
- (void)enableTransientInputDelegateSelectionMode;
- (BOOL)shouldShowEditingIntroductionView;
- (void)deleteOnceFromInputWithExecutionContext:(id)a0;
- (void)updateInputManagerMode;
- (BOOL)isShiftKeyBeingHeld;

@end

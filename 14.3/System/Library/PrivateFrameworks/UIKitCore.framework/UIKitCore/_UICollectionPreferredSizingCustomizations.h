@interface _UICollectionPreferredSizingCustomizations : NSObject {
    struct unordered_map<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, _UICollectionAuxillaryCustomization> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, _UICollectionAuxillaryCustomization>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float __value_; } __p3_; } __table_; } _kindToCustomizationMap;
}

@property (nonatomic) unsigned long long selectionGrouping;

- (void).cxx_destruct;
- (unsigned long long)hash;
- (id)description;
- (id).cxx_construct;
- (BOOL)isEqual:(id)a0;
- (BOOL)elementKindIsHidden:(id)a0 customized:(out BOOL *)a1;
- (void)setInsets:(struct NSDirectionalEdgeInsets { double x0; double x1; double x2; double x3; })a0 forElementKind:(id)a1;
- (void)setHidden:(BOOL)a0 forElementKind:(id)a1;
- (struct NSDirectionalEdgeInsets { double x0; double x1; double x2; double x3; })insetsForElementKind:(id)a0 customized:(out BOOL *)a1;

@end

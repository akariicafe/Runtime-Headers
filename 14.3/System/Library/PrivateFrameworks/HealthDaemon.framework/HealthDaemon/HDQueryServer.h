@class HKSampleType, HDProfile, _HKFilter, NSDictionary, NSObject, HKQueryServerConfiguration, HKQuantityType, HDDaemonTransaction, HDQueryServerClientState, HKObjectType, HDHealthStoreClient, NSString, NSSet, HDDataCollectionAssertion, HDDatabaseTransactionContextStatistics, NSArray, NSUUID;
@protocol HDQueryServerDelegate, NSXPCProxyCreating, OS_dispatch_queue, HKQueryClientInterface;

@interface HDQueryServer : NSObject <HDDatabaseProtectedDataObserver, HKQueryServerInterface, HDDataObserver, HDTaskServer> {
    NSDictionary *_baseDataEntityEncodingOptions;
    id /* block */ _queryDidFinishHandler;
    NSArray *_dataObservationAssertions;
    HDDataCollectionAssertion *_dataCollectionAssertion;
    HDDaemonTransaction *_activationTransaction;
    _Atomic int _queryState;
    BOOL _shouldTakeObservationAssertions;
    BOOL _observingData;
    BOOL _isCollectingData;
    _Atomic BOOL _shouldFinish;
    _Atomic BOOL _shouldPause;
    NSObject<OS_dispatch_queue> *_unitTestQueryQueue;
    HDDatabaseTransactionContextStatistics *_transactionStatistics;
}

@property (readonly) BOOL clientHasActiveWorkout;
@property (copy, nonatomic) HDQueryServerClientState *clientState;
@property (nonatomic) long long dataCount;
@property (readonly, nonatomic) double activationTime;
@property (readonly, nonatomic) _HKFilter *filter;
@property (copy, nonatomic) id /* block */ unitTest_queryServerSetShouldPauseHandler;
@property (copy, nonatomic) id /* block */ unitTest_queryServerWillChangeStateHandler;
@property (weak, nonatomic) id<HDQueryServerDelegate> delegate;
@property (readonly, copy, nonatomic) NSUUID *queryUUID;
@property (readonly, copy, nonatomic) HKQueryServerConfiguration *configuration;
@property (readonly, nonatomic) HDHealthStoreClient *client;
@property (readonly, weak, nonatomic) HDProfile *profile;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queryQueue;
@property (readonly) long long queryState;
@property (nonatomic) double collectionInterval;
@property (readonly, nonatomic) id<HKQueryClientInterface, NSXPCProxyCreating> clientProxy;
@property (readonly, copy, nonatomic) HKObjectType *objectType;
@property (readonly, copy, nonatomic) NSSet *objectTypes;
@property (readonly, nonatomic) HKSampleType *sampleType;
@property (readonly, nonatomic) HKQuantityType *quantityType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)requiredEntitlements;
+ (id)taskIdentifier;
+ (Class)queryClass;
+ (BOOL)validateConfiguration:(id)a0 client:(id)a1 error:(id *)a2;
+ (Class)configurationClass;
+ (BOOL)supportsAnchorBasedAuthorization;
+ (id)builtInQueryServerClasses;

- (void)connectionInvalidated;
- (void)_queue_didDeactivate;
- (id)taskUUID;
- (id)readAuthorizationStatusForType:(id)a0 error:(id *)a1;
- (void).cxx_destruct;
- (id)remoteInterface;
- (id)_predicateString;
- (void)dealloc;
- (BOOL)_shouldListenForUpdates;
- (void)_queue_start;
- (void)samplesAdded:(id)a0 anchor:(id)a1;
- (void)samplesOfTypesWereRemoved:(id)a0 anchor:(id)a1;
- (BOOL)_shouldExecuteWhenProtectedDataIsUnavailable;
- (id)diagnosticDescription;
- (void)database:(id)a0 protectedDataDidBecomeAvailable:(BOOL)a1;
- (id)exportedInterface;
- (BOOL)_shouldObserveOnPause;
- (double)_queue_queryLogThreshold;
- (id)initWithUUID:(id)a0 configuration:(id)a1 client:(id)a2 delegate:(id)a3;
- (void)_queue_stop;
- (BOOL)validateConfiguration:(id *)a0;
- (void)setShouldPause:(BOOL)a0;
- (void)remote_startQueryWithCompletion:(id /* block */)a0;
- (void)remote_deactivateServer;
- (void)onQueue:(id /* block */)a0;
- (void)_queue_didChangeStateFromPreviousState:(long long)a0 state:(long long)a1;
- (id)newDataEntityEnumerator;
- (id /* block */)sampleAuthorizationFilter;
- (BOOL)_shouldStopProcessingQuery;
- (BOOL)_shouldSuspendQuery;
- (void)scheduleDatabaseAccessOnQueueWithBlock:(id /* block */)a0;
- (void)setQueryDidFinishHandler:(id /* block */)a0;
- (BOOL)prepareToActivateServerWithError:(id *)a0;
- (void)activateServerWithClientState:(id)a0 error:(id)a1;
- (id)createDatabaseTransactionContext;
- (void)clientStateWillChange:(id)a0;
- (void)clientStateDidChange:(id)a0;
- (double)_queue_logThresholdHardwareFactor;
- (BOOL)_shouldObserveDatabaseProtectedDataAvailability;
- (id)filteredSamplesForClientWithSamples:(id)a0;
- (id)sanitizedSampleForQueryClient:(id)a0;
- (void)schedulePause;
- (void)_queue_startDataCollection;
- (void)_queue_stopDataCollection;
- (void)deactivateServerWithCompletion:(id /* block */)a0;
- (BOOL)isQueryingForHealthRecordsTypes;
- (void)_queue_activateServerWithClientState:(id)a0 error:(id)a1;
- (void)_queue_setQueryState:(long long)a0;
- (void)_queue_transitionToPaused;
- (void)_queue_startDataCollectionIfNecessary;
- (void)_queue_notifyIfQueryingForHealthRecords;
- (void)_scheduleStartQuery;
- (void)_queue_transitionToFinished;
- (void)_queue_closeActivationTransactionIfNecessary;
- (void)_queue_startQueryIfNecessary;
- (void)_queue_transitionToRunning;
- (id)_queue_collectionObserverState;
- (void)_queue_updateSampleTypeObservationAssertions;
- (BOOL)_shouldRegisterAsProtectedDataObserver;
- (void)_queue_logQueryWithDuration:(double)a0 statistics:(id)a1;
- (void)_queue_transitionToSuspendedState:(long long)a0;
- (void)_queue_endObservingDataTypes;
- (BOOL)_shouldObserveAllSampleTypes;
- (id)_queue_sampleTypesForObservation;
- (void)_queue_setSampleTypeObservationAssertions:(id)a0;
- (void)_queue_beginObservingDataTypes;
- (id)_queryStateString;
- (id)_sampleTypeToObserveForUpdates;

@end

@class NSNumber, NSString, HKQuantity;
@protocol HDActivityCacheStatisticsBuilderSourceOrderDelegate;

@interface HDActivityCacheStatisticsBuilder : NSObject {
    struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > { struct HDActivityCacheStatisticsBuilderWorkoutSample *__begin_; struct HDActivityCacheStatisticsBuilderWorkoutSample *__end_; struct __compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > { struct HDActivityCacheStatisticsBuilderWorkoutSample *__value_; } __end_cap_; } _workouts;
    struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > { struct HDActivityCacheStatisticsBuilderStandHourSample *__begin_; struct HDActivityCacheStatisticsBuilderStandHourSample *__end_; struct __compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > { struct HDActivityCacheStatisticsBuilderStandHourSample *__value_; } __end_cap_; } _standHourSamples;
    struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *__begin_; struct HDActivityCacheActiveSource *__end_; struct __compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *__value_; } __end_cap_; } _activationLogSamples;
    HKQuantity *_lastActiveEnergyValue;
    NSNumber *_lastMoveMinuteValue;
    HKQuantity *_lastDistanceWalkingValue;
    NSNumber *_lastFlightsClimbedValue;
    NSNumber *_lastStepCountValue;
    NSNumber *_lastPushCountValue;
    NSNumber *_lastStandHourValue;
    NSNumber *_lastExerciseMinuteValue;
    double _deepBreathingDurationValue;
    struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *__begin_; struct HDActivityCacheActiveSource *__end_; struct __compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *__value_; } __end_cap_; } _activeSourcesList;
    struct map<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > { struct __tree<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true>, std::__1::allocator<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<_HKDataTypeCode, std::__1::__value_type<_HKDataTypeCode, std::__1::map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > >, std::__1::less<_HKDataTypeCode>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _sourceTotalsByIntervalIndexByTypeCode;
    double _builderStartTime;
    double _builderEndTime;
    NSString *_loggingName;
}

@property (nonatomic) double intervalDuration;
@property (weak, nonatomic) id<HDActivityCacheStatisticsBuilderSourceOrderDelegate> sourceOrderDelegate;

- (id)init;
- (void).cxx_destruct;
- (id)_loggingPrefix;
- (id).cxx_construct;
- (void)addWorkouts:(const struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > { struct HDActivityCacheStatisticsBuilderWorkoutSample *x0; struct HDActivityCacheStatisticsBuilderWorkoutSample *x1; struct __compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderWorkoutSample> > { struct HDActivityCacheStatisticsBuilderWorkoutSample *x0; } x2; } *)a0;
- (id)createMoveStatisticsWithIntervalComponents:(id)a0 calendar:(id)a1;
- (id)createMoveMinuteStatisticsWithIntervalComponents:(id)a0 calendar:(id)a1;
- (id)createExerciseStatisticsWithIntervalComponents:(id)a0 calendar:(id)a1;
- (id)createStandStatisticsWithCalendar:(id)a0;
- (id)workoutSamplesWithSourceManager:(id)a0;
- (id)activeEnergyValue;
- (long long)moveMinuteValue;
- (id)distanceWalkingValue;
- (long long)standHourValue;
- (long long)exerciseMinuteValue;
- (long long)pushCountValue;
- (long long)stepCountValue;
- (double)deepBreathingDurationValue;
- (long long)flightsClimbedValue;
- (id)initWithDateInterval:(id)a0 loggingName:(id)a1;
- (void)addActivationLogSamples:(const struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; struct HDActivityCacheStatisticsBuilderSample *x1; struct __compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; } x2; } *)a0;
- (void)addDeepBreathingSessionDuration:(double)a0;
- (void)addStandHourSamples:(const struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > { struct HDActivityCacheStatisticsBuilderStandHourSample *x0; struct HDActivityCacheStatisticsBuilderStandHourSample *x1; struct __compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> > { struct HDActivityCacheStatisticsBuilderStandHourSample *x0; } x2; } *)a0;
- (void)addDeviceSamples:(const struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; struct HDActivityCacheStatisticsBuilderSample *x1; struct __compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; } x2; } *)a0 typeCode:(long long)a1;
- (void)addDeviceSample:(struct HDActivityCacheStatisticsBuilderSample { double x0; double x1; double x2; long long x3; })a0 typeCode:(long long)a1;
- (void)addWorkoutSample:(struct HDActivityCacheStatisticsBuilderSample { double x0; double x1; double x2; long long x3; })a0 typeCode:(long long)a1;
- (struct vector<long long, std::__1::allocator<long long> > { long long *x0; long long *x1; struct __compressed_pair<long long *, std::__1::allocator<long long> > { long long *x0; } x2; })_sourceOrderForTypeCode:(long long)a0;
- (double)_sumSourceTotals:(struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a0 orderedSources:(struct vector<long long, std::__1::allocator<long long> > { long long *x0; long long *x1; struct __compressed_pair<long long *, std::__1::allocator<long long> > { long long *x0; } x2; })a1;
- (id)_workoutIdentifiersStringForActiveSource:(struct HDActivityCacheActiveSource { double x0; long long x1; struct vector<long long, std::__1::allocator<long long> > { long long *x0; long long *x1; struct __compressed_pair<long long *, std::__1::allocator<long long> > { long long *x0; } x2; } x2; } *)a0;
- (void)_logActiveSourcesList:(struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *x0; struct HDActivityCacheActiveSource *x1; struct __compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *x0; } x2; } *)a0;
- (void)_resetAllCachedValues;
- (void)_clearActiveSources;
- (void)_clearCachedValueForTypeCode:(long long)a0;
- (struct vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *x0; struct HDActivityCacheActiveSource *x1; struct __compressed_pair<HDActivityCacheActiveSource *, std::__1::allocator<HDActivityCacheActiveSource> > { struct HDActivityCacheActiveSource *x0; } x2; })_activeSourceVectorFromActivationLogSamples:(const struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; struct HDActivityCacheStatisticsBuilderSample *x1; struct __compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; } x2; } *)a0;
- (void)_addSample:(struct HDActivityCacheStatisticsBuilderSample { double x0; double x1; double x2; long long x3; })a0 toSourceTotals:(struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a1 fromWorkout:(BOOL)a2;
- (void)_addSamples:(const struct vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; struct HDActivityCacheStatisticsBuilderSample *x1; struct __compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> > { struct HDActivityCacheStatisticsBuilderSample *x0; } x2; } *)a0 toSourceTotals:(struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a1 fromWorkout:(BOOL)a2;
- (BOOL)_sourceMapIsEmpty:(const struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a0;
- (double)_minTimestampInSourceTotals:(const struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a0;
- (double)_maxTimestampInSourceTotals:(const struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a0;
- (double)_sumSourceTotals:(struct map<long long, _HDActivityCacheSourceTotal, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, _HDActivityCacheSourceTotal> > > { struct __tree<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, _HDActivityCacheSourceTotal> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, _HDActivityCacheSourceTotal>, std::__1::less<long long>, true> > { unsigned long long x0; } x2; } x0; } *)a0 orderedSources:(struct vector<long long, std::__1::allocator<long long> > { long long *x0; long long *x1; struct __compressed_pair<long long *, std::__1::allocator<long long> > { long long *x0; } x2; })a1 strictStartTime:(double)a2 strictEndTime:(double)a3;
- (id)_createStatisticsForType:(id)a0 withIntervalComponents:(id)a1 calendar:(id)a2;
- (void)_loadActiveSourceList;
- (id)createStatisticsCollectionWithType:(id)a0 intervalComponents:(id)a1 calendar:(id)a2;

@end

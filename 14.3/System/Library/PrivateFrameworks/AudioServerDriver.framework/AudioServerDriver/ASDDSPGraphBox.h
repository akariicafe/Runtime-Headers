@class NSString;

@interface ASDDSPGraphBox : NSObject {
    struct shared_ptr<DSPGraph::Graph> { struct Graph *__ptr_; struct __shared_weak_count *__cntrl_; } _graph;
}

@property (readonly, nonatomic) struct Box { void /* function */ **x0; struct Graph *x1; struct IsoGroup *x2; struct Subset *x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; long long x5; struct vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort *x0; struct InputPort *x1; struct __compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort *x0; } x2; } x6; struct vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort *x0; struct OutputPort *x1; struct __compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort *x0; } x2; } x7; struct unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> > { struct __hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > > { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> > { float x0; } x3; } x0; } x8; struct vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> > { struct ParameterTap *x0; struct ParameterTap *x1; struct __compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> > { struct ParameterTap *x0; } x2; } x9; struct vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> > { struct PropertyTap *x0; struct PropertyTap *x1; struct __compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> > { struct PropertyTap *x0; } x2; } x10; struct vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > > { struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x0; struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > > { struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x0; } x2; } x11; struct vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > > { struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x0; struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > > { struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x0; } x2; } x12; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x13; struct vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > > { struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x0; struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > > { struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x0; } x2; } x14; struct Set<DSPGraph::Analyzer *> { struct Member *x0; unsigned long long x1; } x15; struct map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> > { unsigned long long x0; } x2; } x0; } x16; struct function<void (double)> { struct __value_func<void (double)> { struct type { unsigned char x0[24]; } x0; struct __base<void (double)> *x1; } x0; } x17; struct function<void (DSPGraph::Box *, int)> { struct __value_func<void (DSPGraph::Box *, int)> { struct type { unsigned char x0[24]; } x0; struct __base<void (DSPGraph::Box *, int)> *x1; } x0; } x18; struct function<void (DSPGraph::Box *, int)> { struct __value_func<void (DSPGraph::Box *, int)> { struct type { unsigned char x0[24]; } x0; struct __base<void (DSPGraph::Box *, int)> *x1; } x0; } x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; long long x24; } *box;
@property (readonly, nonatomic) long long numInputs;
@property (readonly, nonatomic) long long numOutputs;
@property (readonly, nonatomic) NSString *name;

- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)initWithBox:(struct Box { void /* function */ **x0; struct Graph *x1; struct IsoGroup *x2; struct Subset *x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; long long x5; struct vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort *x0; struct InputPort *x1; struct __compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort *x0; } x2; } x6; struct vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort *x0; struct OutputPort *x1; struct __compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort *x0; } x2; } x7; struct unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> > { struct __hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > > { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> > { float x0; } x3; } x0; } x8; struct vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> > { struct ParameterTap *x0; struct ParameterTap *x1; struct __compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> > { struct ParameterTap *x0; } x2; } x9; struct vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> > { struct PropertyTap *x0; struct PropertyTap *x1; struct __compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> > { struct PropertyTap *x0; } x2; } x10; struct vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > > { struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x0; struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > > { struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x0; } x2; } x11; struct vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > > { struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x0; struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > > { struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x0; } x2; } x12; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x13; struct vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > > { struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x0; struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > > { struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x0; } x2; } x14; struct Set<DSPGraph::Analyzer *> { struct Member *x0; unsigned long long x1; } x15; struct map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> > { unsigned long long x0; } x2; } x0; } x16; struct function<void (double)> { struct __value_func<void (double)> { struct type { unsigned char x0[24]; } x0; struct __base<void (double)> *x1; } x0; } x17; struct function<void (DSPGraph::Box *, int)> { struct __value_func<void (DSPGraph::Box *, int)> { struct type { unsigned char x0[24]; } x0; struct __base<void (DSPGraph::Box *, int)> *x1; } x0; } x18; struct function<void (DSPGraph::Box *, int)> { struct __value_func<void (DSPGraph::Box *, int)> { struct type { unsigned char x0[24]; } x0; struct __base<void (DSPGraph::Box *, int)> *x1; } x0; } x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; long long x24; } *)a0 fromGraph:(struct shared_ptr<DSPGraph::Graph> { struct Graph *x0; struct __shared_weak_count *x1; })a1;
- (BOOL)startRecordingPort:(long long)a0 toFile:(id)a1;
- (BOOL)stopRecordingPort:(long long)a0;
- (BOOL)startInjectingPort:(long long)a0 toFile:(id)a1 shouldLoop:(BOOL)a2;
- (BOOL)stopInjectingPort:(long long)a0;
- (BOOL)getParameterList:(unsigned int *)a0 numParameterIDs:(long long *)a1 inScope:(unsigned int)a2;
- (BOOL)getParameterInfo:(struct AudioUnitParameterInfo { char x0[52]; struct __CFString *x1; unsigned int x2; struct __CFString *x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; } *)a0 forID:(unsigned int)a1 inScope:(unsigned int)a2;
- (BOOL)getParameter:(float *)a0 forID:(unsigned int)a1 scope:(unsigned int)a2 element:(unsigned int)a3;
- (BOOL)hasParameter:(unsigned int)a0 scope:(unsigned int)a1 element:(unsigned int)a2;
- (BOOL)setParameter:(float)a0 forID:(unsigned int)a1 scope:(unsigned int)a2 element:(unsigned int)a3 bufferOffset:(long long)a4;

@end

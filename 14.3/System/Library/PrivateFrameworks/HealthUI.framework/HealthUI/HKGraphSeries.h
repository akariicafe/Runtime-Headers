@class HKGraphSeriesDataSource, NSUUID, NSArray, HKAxis, UIView, NSString, NSMutableDictionary, HKValueRange, HKPropertyAnimationApplier, UIColor;
@protocol HKAxisAccessoryViewDelegate, HKSeriesDelegate, HKGraphSeriesAxisAnnotation, HKGraphSeriesAxisScalingRule;

@interface HKGraphSeries : NSObject <HKGraphSeriesDataSourceDelegate, HKChartCachePriorityDelegate> {
    BOOL _dirty;
    struct { struct { struct { long long index; long long zoom; } blockPath; long long index; } min; struct { struct { long long index; long long zoom; } blockPath; long long index; } max; } _selectedPathRange;
    NSMutableDictionary *_cachedCoordinateListsByBlockPath;
    NSMutableDictionary *_cachedDataBlocksByBlockPath;
    HKValueRange *_closestXCoordinateRange;
    HKPropertyAnimationApplier *_animationApplier;
    HKValueRange *_visibleValueRange;
}

@property (retain, nonatomic) UIView *cachedYAxisAccessoryView;
@property (retain, nonatomic) HKGraphSeriesDataSource *dataSource;
@property (retain, nonatomic) NSArray *titleLegendEntries;
@property (retain, nonatomic) NSArray *detailLegendEntries;
@property (weak, nonatomic) id<HKSeriesDelegate> delegate;
@property (weak, nonatomic) id<HKGraphSeriesAxisAnnotation> axisAnnotationDelegate;
@property (weak, nonatomic) id<HKAxisAccessoryViewDelegate> yAxisAccessoryViewDelegate;
@property (nonatomic) double alpha;
@property (nonatomic) double offscreenIndicatorAlpha;
@property (readonly, nonatomic) NSUUID *UUID;
@property (nonatomic) BOOL allowsSelection;
@property (nonatomic) BOOL adjustYAxisForLabels;
@property (retain, nonatomic) id context;
@property (readonly, nonatomic) BOOL animatingDuringAutoscale;
@property (nonatomic) BOOL primarySeriesForAutoscale;
@property (nonatomic) BOOL wantsRoundingDuringYRangeExpansion;
@property (copy, nonatomic) HKAxis *yAxis;
@property (retain, nonatomic) id<HKGraphSeriesAxisScalingRule> axisScalingRule;
@property (retain, nonatomic) UIColor *offScreenIndicatorColor;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)drawFilledMarkerInContext:(struct CGContext { } *)a0 color:(struct CGColor { } *)a1 x:(double)a2 y:(double)a3 radius:(double)a4;
+ (void)drawInnerDotMarkerInContext:(struct CGContext { } *)a0 outColor:(struct CGColor { } *)a1 inColor:(struct CGColor { } *)a2 x:(double)a3 y:(double)a4 radius:(double)a5;

- (void)clearCaches;
- (id)init;
- (void).cxx_destruct;
- (BOOL)isHighlighted;
- (long long)overlayType;
- (void)dealloc;
- (struct { struct { struct { long long x0; long long x1; } x0; long long x1; } x0; struct { struct { long long x0; long long x1; } x0; long long x1; } x1; })selectedPathRange;
- (id)coordinatesForBlock:(id)a0 blockPath:(struct { long long x0; long long x1; })a1 xAxis:(id)a2 yAxis:(id)a3;
- (void)drawSeriesWithBlockCoordinates:(id)a0 axisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 zoomLevelConfiguration:(id)a2 pointTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a3 renderContext:(struct CGContext { } *)a4 secondaryRenderContext:(id)a5;
- (BOOL)supportsMultiTouchSelection;
- (BOOL)blockCoordinateIsVisibleInsideOfChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 blockCoordinate:(id)a1;
- (double)distanceFromPoint:(struct CGPoint { double x0; double x1; })a0 blockCoordinate:(id)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (double)xAxisDistanceFromPoint:(struct CGPoint { double x0; double x1; })a0 blockCoordinate:(id)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (double)yAxisDifferenceToPoint:(struct CGPoint { double x0; double x1; })a0 blockCoordinate:(id)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)dataSourceDidUpdateCache:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })virtualMarginInsets;
- (id)marginsForYAxis:(id)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)cancelInFlightAutoscale;
- (id)visibleValueRange;
- (struct CGSize { double x0; double x1; })yAxisAccessoryViewSize;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })yAxisAccessoryViewEdgeInsets;
- (void)updateLegendsForTimeScope:(long long)a0 range:(id)a1;
- (BOOL)configureYAxisAccessoryViewForDateRange:(id)a0 timeScope:(long long)a1;
- (id)valueRangeForYAxisWithXAxisRange:(id)a0 dateZoom:(long long)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)autoscaleYAxisIfNecessaryWithValueRange:(id)a0 yAxisRange:(id)a1 xAxis:(id)a2 dateZoom:(long long)a3 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4;
- (void)autoscaleYAxisWithValueRange:(id)a0 yAxisRange:(id)a1 xAxis:(id)a2 dateZoom:(long long)a3 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 animated:(BOOL)a5 completion:(id /* block */)a6;
- (void)autoscaleYAxisWithYAxisRange:(id)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 animated:(BOOL)a2 completion:(id /* block */)a3;
- (id)seriesCoordinatesWithXAxis:(id)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 zoomScale:(double)a2 contentOffset:(struct CGPoint { double x0; double x1; })a3;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })coordinateTransformFromXAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)drawWithChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 seriesCoordinates:(id)a1 zoomLevelConfiguration:(id)a2 coordinateTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a3 inContext:(struct CGContext { } *)a4 secondaryRenderContext:(id)a5;
- (double)distanceFromTouchPoint:(struct CGPoint { double x0; double x1; })a0 inChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 xAxis:(id)a2 zoomScale:(double)a3 contentOffset:(struct CGPoint { double x0; double x1; })a4 xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a5;
- (BOOL)containsCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 xAxis:(id)a1 zoomScale:(double)a2 contentOffset:(struct CGPoint { double x0; double x1; })a3 xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4;
- (void)enumerateCoordinatesInChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 xAxis:(id)a1 zoomScale:(double)a2 contentOffset:(struct CGPoint { double x0; double x1; })a3 xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4 roundToViewScale:(BOOL)a5 exclusionOptions:(long long)a6 block:(id /* block */)a7;
- (double)xAxisSelectedCoordinate:(double)a0 blockCoordinate:(id)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)selectPathsinPathRange:(struct { struct { struct { long long x0; long long x1; } x0; long long x1; } x0; struct { struct { long long x0; long long x1; } x0; long long x1; } x1; })a0 coordinateRange:(id)a1;
- (void)deselectPath;
- (id)findVisibleBlockCoordinatesForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 xAxis:(id)a1 zoomScale:(double)a2 contentOffset:(struct CGPoint { double x0; double x1; })a3 xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4;
- (id)overlayIdentifier;
- (void)drawOverlayInContext:(struct CGContext { } *)a0 seriesOverlayData:(id)a1;
- (id)overlayInteractiveViewsWithDelegate:(id)a0;
- (void)layoutOverlayInteractiveViews:(id)a0 seriesOverlayData:(id)a1 overlayRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (BOOL)blockCoordinate:(id)a0 lessThan:(id)a1;
- (BOOL)blockCoordinate:(id)a0 greaterThan:(id)a1;
- (id)closestXCoordinateRange;
- (BOOL)isRangeHighPriority:(id)a0;
- (BOOL)untransformedChartPointsForTimeScope:(long long)a0 range:(id)a1 completion:(id /* block */)a2;
- (BOOL)shouldInvertAxis;
- (void)_setDirtyWithNewData:(BOOL)a0;
- (id)_dataBlockForBlockPath:(struct { long long x0; long long x1; })a0;
- (void)_enumeratePathIndexesInValueRange:(id)a0 zoomLevel:(long long)a1 block:(id /* block */)a2;
- (id)_expandYRange:(id)a0 withXRange:(id)a1 dateZoom:(long long)a2 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (id)_clipYAxisValueRangeIfNecessary:(id)a0;
- (id)_coordinateListsForGeneratorWithXAxis:(id)a0 zoomScale:(double)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 contentOffset:(struct CGPoint { double x0; double x1; })a3;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })coordinateTransformForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 xAxisTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (id)_visibleXValueRangeWithAxis:(id)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 contentOffset:(struct CGPoint { double x0; double x1; })a2 zoomScale:(double)a3;
- (id)_coordinateListsWithXValueRange:(id)a0 xAxis:(id)a1 zoomLevel:(long long)a2;
- (id)_cachedCoordinatesForBlockPath:(struct { long long x0; long long x1; })a0;
- (id)_coordinatesForBlockPath:(struct { long long x0; long long x1; })a0 xAxis:(id)a1;
- (void)_cacheCoordinates:(id)a0 forBlockPath:(struct { long long x0; long long x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forFont:(id)a1;
- (void)drawRoundedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 color:(id)a1 context:(struct CGContext { } *)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })backgroundRectFromStringRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forFont:(id)a1;

@end

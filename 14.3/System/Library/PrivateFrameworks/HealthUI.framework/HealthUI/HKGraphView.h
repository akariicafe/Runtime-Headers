@class NSMutableDictionary, NSMapTable, UIImage, HKMultiTouchPressGestureRecognizer, NSMutableArray, UIView, HKAxis, NSSet, HKValueRange, HKGraphViewSelectionStyle, NSTimer, NSString, UIColor, NSArray, HKPropertyAnimationApplier, UIScrollView, HKBorderLineView, _HKGraphViewOverlayView;
@protocol HKGraphRenderer, HKGraphViewDelegate;

@interface HKGraphView : UIView <UIScrollViewDelegate, HKSeriesDelegate, HKGraphRenderDelegate, HKMultiTouchPressGestureRecognizerDelegate, HKGraphTileDrawingDelegate, HKGraphSeriesOverlayDelegate, HKScrollPerformanceTestable, HKInteractiveChartRangeProvider> {
    NSMutableArray *_seriesGroupRows;
    BOOL _needsUpdateGraphViewConfiguration;
    HKPropertyAnimationApplier *_animationApplier;
    BOOL _shouldInformDelegateOfUpdates;
    BOOL _shouldListenToScrollViewDelegate;
    HKValueRange *_chartableValueRange;
    UIImage *_topFeatheringImage;
    UIImage *_rightFeatheringImage;
    UIImage *_bottomFeatheringImage;
    UIImage *_leftFeatheringImage;
    UIView<HKGraphRenderer> *_renderView;
    UIScrollView *_scrollView;
    HKBorderLineView *_leftMarginView;
    UIView<HKGraphRenderer> *_yAxisLabelContent;
    double _yAxisLabelMinimumWidth;
    BOOL _subviewsHaveBeenLaidOut;
}

@property (nonatomic) double zoomScale;
@property (nonatomic) struct CGPoint { double x; double y; } contentOffset;
@property (nonatomic) BOOL contentOffsetIsSet;
@property (retain, nonatomic) UIView *detailView;
@property (retain, nonatomic) HKValueRange *destinationEffectiveVisibleRangeActive;
@property (retain, nonatomic) NSSet *yAxisAccessoryViews;
@property (nonatomic) long long tileColumns;
@property (nonatomic) double tileWidthInPoints;
@property (nonatomic) long long tileFirstColumn;
@property (nonatomic) long long tileLastColumn;
@property (nonatomic) long long tileColumnHysteresis;
@property (nonatomic) BOOL tilesHidden;
@property (retain, nonatomic) NSMutableDictionary *tilesByColumnNumber;
@property (nonatomic) BOOL tileScrollingOverride;
@property (nonatomic) struct CGPoint { double x; double y; } tileContentOffsetOverride;
@property (nonatomic) double tileZoomScaleOverride;
@property (copy, nonatomic) id /* block */ tileMarkDirtyCompletion;
@property (nonatomic) BOOL tilesTransientDisabled;
@property (nonatomic) BOOL tilesWaitingForInitialRender;
@property (nonatomic) long long tileInitialRedrawCount;
@property (nonatomic) double lastSingleSelectionXValue;
@property (retain, nonatomic) _HKGraphViewOverlayView *overlayView;
@property (nonatomic) long long previousOverlayType;
@property (retain, nonatomic) NSMapTable *overlayInteractiveViews;
@property (nonatomic) BOOL measuringStartupTime;
@property (nonatomic) double startTime;
@property (nonatomic) double lastEndTime;
@property (retain, nonatomic) NSTimer *startupTimer;
@property (nonatomic) double firstNonemptyDrawTime;
@property (nonatomic) BOOL measurementStartupAutoscale;
@property (retain, nonatomic) id externalSelectionModelCoordinate;
@property (nonatomic) BOOL externalSelectionScheduled;
@property (nonatomic) double externalSelectionLastLocation;
@property (readonly, nonatomic) NSArray *allSeries;
@property (weak, nonatomic) id<HKGraphViewDelegate> delegate;
@property (copy, nonatomic) HKAxis *xAxis;
@property (nonatomic) double xAxisSpace;
@property (nonatomic) BOOL disableXAxis;
@property (nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } axisInset;
@property (copy, nonatomic) UIColor *outlineColor;
@property (copy, nonatomic) UIColor *topMarginColor;
@property (nonatomic) unsigned long long outlineOptions;
@property (nonatomic) unsigned long long featheringOptions;
@property (nonatomic) BOOL disableScrolling;
@property (nonatomic) BOOL disableSelection;
@property (nonatomic) BOOL multiSeriesSelection;
@property (nonatomic) BOOL moveSelectedSeriesToFront;
@property (retain, nonatomic) HKGraphViewSelectionStyle *selectionStyle;
@property (readonly, nonatomic) long long xAxisDateZoom;
@property (readonly, nonatomic) HKValueRange *effectiveAxisRange;
@property (readonly, nonatomic) HKValueRange *actualAxisRange;
@property (retain, nonatomic) HKValueRange *chartableValueRange;
@property (nonatomic) double hardLeftMarginWidth;
@property (nonatomic) double virtualLeftMarginWidth;
@property (nonatomic) double virtualRightMarginWidth;
@property (nonatomic) long long virtualLeftMarginStyle;
@property (nonatomic) long long virtualRightMarginStyle;
@property (readonly, nonatomic) HKValueRange *actualVisibleRange;
@property (readonly, nonatomic) HKValueRange *effectiveVisibleRangeCadence;
@property (readonly, nonatomic) HKValueRange *effectiveVisibleRangeActive;
@property (nonatomic) long long minimumDateZoom;
@property (nonatomic) long long maximumDateZoom;
@property (nonatomic) long long scrollingOptions;
@property (nonatomic) BOOL contentWidthFromTimeScope;
@property (nonatomic) BOOL enableStickySelection;
@property (readonly, nonatomic) HKMultiTouchPressGestureRecognizer *multiTouchGestureRecognizer;
@property (readonly, nonatomic) double yAxisWidth;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } leftMarginViewRect;
@property (nonatomic) BOOL enableZoomInGesture;
@property (readonly, nonatomic) BOOL isScrollViewDecelerating;
@property (nonatomic) BOOL enableInteractiveSelectionLine;
@property (nonatomic) BOOL tilingDisabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_rangeFromModelCoordinateMin:(double)a0 max:(double)a1 axis:(id)a2;
+ (double)_modelCoordinateSpanForRange:(id)a0 axis:(id)a1;
+ (BOOL)visibleIntersectionForRange:(id)a0 visibleRange:(id)a1;

- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void).cxx_destruct;
- (void)willMoveToWindow:(id)a0;
- (void)scrollViewDidScroll:(id)a0;
- (void)setZoomScale:(double)a0 animated:(BOOL)a1;
- (void)setContentOffset:(struct CGPoint { double x0; double x1; })a0 animated:(BOOL)a1;
- (void)setBackgroundColor:(id)a0;
- (void)scrollViewDidEndDecelerating:(id)a0;
- (void)didMoveToWindow;
- (void)setRenderView:(id)a0;
- (void)layoutSubviews;
- (void)_updateScene;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_maximumZoomScale;
- (void)scrollViewWillEndDragging:(id)a0 withVelocity:(struct CGPoint { double x0; double x1; })a1 targetContentOffset:(inout struct CGPoint { double x0; double x1; } *)a2;
- (id)primarySeries;
- (void)_notifyDelegateOfSizeChange;
- (void)_layoutOverlayView;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)scrollViewDidEndDragging:(id)a0 willDecelerate:(BOOL)a1;
- (void)traitCollectionDidChange:(id)a0;
- (void)scrollViewDidEndScrollingAnimation:(id)a0;
- (double)_contentWidth;
- (void)scrollViewWillBeginDragging:(id)a0;
- (void)setEffectiveAxisRange:(id)a0 effectiveVisibleRangeCadence:(id)a1 effectiveVisibleRangeActive:(id)a2;
- (void)forceYAxisAutoScaleAnimated:(BOOL)a0;
- (void)drawToContext:(struct CGContext { } *)a0 tileRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 column:(long long)a2;
- (void)resetAndRedraw;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })virtualMarginInsets;
- (void)_addTapGestureRecognizerForTapOnView:(id)a0;
- (void)_loadScrollView;
- (void)_loadFeatheringImages;
- (id)_defaultXAxisValueRange;
- (BOOL)_measureStartupFlagFromEnvironment;
- (void)_reconfigureScrollingTiles;
- (void)setNeedsReloadSeries;
- (void)_walkAllSeries:(id /* block */)a0;
- (BOOL)_anySeriesAnimatingDuringAutoscale;
- (void)_setNeedsUpdateGraphViewConfiguration;
- (void)_notifyDelegateOfYAxisWidth:(double)a0 toWidth:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustLeftMarginRectForBaselines:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_dataAreaRect;
- (double)_bottomBaselineYValueForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_topBaselineYValueForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)_detailViewWidth;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scrollingAreaRect;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_dataAreaInsets;
- (void)_notifyDelegateOfVisibleValueRange:(id)a0 changeContext:(long long)a1;
- (void)_removeSelectionRecognizerFromView:(id)a0;
- (void)_addSelectionRecognizerToView:(id)a0;
- (void)_addTapGestureRecognizerForTogglingStickyToView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_verticalAxisRect;
- (void)_updateScrollViewPropertiesIgnoringScrollViewCallbacks:(id /* block */)a0;
- (void)_layoutYAxisAccessoryViewsForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_layoutLegendsForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_hideTilesWithForce;
- (void)_startupTimerCallback:(id)a0;
- (BOOL)_seriesGroupHasLegendEntries:(id)a0;
- (void)_createLegendForSeriesGroup:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_currentLegendInsets;
- (void)_updateLegendForSeriesGroup:(id)a0;
- (double)_inactiveRightAreaForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct _HKLocationSpan { double x0; double x1; })_locationSpanForSeriesGroupRow:(long long)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_setYAxisAccessoryViews:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_yAxisRectForSeriesGroupRow:(long long)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)removeSeries;
- (id)_graphSeriesForZoom:(long long)a0 seriesGroupRow:(long long)a1;
- (void)_reloadViewScope;
- (void)_markTilesDirtyWithCompletion:(id /* block */)a0;
- (void)_finishSelection;
- (void)_clearRenderViewIfNecessary;
- (void)_updateAxisZoomScaleValueRange;
- (id)_actualVisibleRangeFromEffectiveVisibleRange:(id)a0 dataAreaRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_setVisibleRangesForEffectiveRangeCadence:(id)a0;
- (id)_findActualAxisRangeFromVisibleRanges;
- (void)_updateRangesForEffectiveAxisRange:(id)a0 effectiveVisibleRangeCadence:(id)a1 effectiveVisibleRangeActive:(id)a2;
- (void)_updateZoomForParameters;
- (void)_autoScaleXAxis;
- (void)_scrollToCurrentVisibleRangeAnimated:(BOOL)a0;
- (void)_updateEffectiveAxisRange:(id)a0 effectiveVisibleRangeCadence:(id)a1 effectiveVisibleRangeActive:(id)a2 virtualLeftMarginWidth:(double)a3 virtualRightMarginWidth:(double)a4;
- (id)_rangeFromRange:(id)a0 withStartOfRange:(id)a1;
- (BOOL)_compareRange:(id)a0 toRange:(id)a1;
- (BOOL)_setRangesForActiveVisibleRange:(id)a0;
- (BOOL)_compareChartDate:(id)a0 toDate:(id)a1;
- (void)_updateGraphViewConfiguration;
- (BOOL)_axisRangeIsDateRange;
- (BOOL)_tilesAreEnabled;
- (void)_notifyDelegateSeriesUpdate:(id)a0 newDataArrived:(BOOL)a1;
- (long long)_groupRowForSeries:(id)a0;
- (id)_yAxisRangeForSynchronizedAxesForDateZoom:(long long)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 seriesGroup:(id)a2;
- (void)_autoScaleYAxisIfNecessaryForGroupRow:(long long)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_forceYAxisAutoScaleForSeriesGroupRow:(long long)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 animated:(BOOL)a2;
- (void)_renderSelectionLineWithContext:(struct CGContext { } *)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_xAxisCoordinateTransform;
- (BOOL)_needsYAxisUpdateDuringRender;
- (BOOL)_configureYAxisViewIfNeeded;
- (void)_drawOverlaysIfNeeded:(id)a0;
- (void)_renderYAxisGridlinesInContext:(struct CGContext { } *)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withBlendMode:(int)a2;
- (void)_renderXAxisGridlinesInContext:(struct CGContext { } *)a0 withBlendMode:(int)a1;
- (void)_renderVirtualMarginGridLines:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 context:(struct CGContext { } *)a1;
- (void)_renderVirtualMarginInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 context:(struct CGContext { } *)a1 marginStyle:(long long)a2;
- (id)_visibleSeriesForSeriesGroup:(id)a0;
- (BOOL)_simultaneousAxesAreEqualForSeriesGroup:(id)a0;
- (id)_seriesForCommonAxesForSeriesGroup:(id)a0;
- (BOOL)_renderXAxisLabelAndGridsNeedsNewRendererInContext:(struct CGContext { } *)a0;
- (void)_autoScaleYAxisIfNecessaryForAllGroupsForChartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_renderSeriesWithContext:(struct CGContext { } *)a0 secondaryRenderContext:(id)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_renderVirtualMarginsWithContext:(struct CGContext { } *)a0;
- (void)_renderBaselineWithContext:(struct CGContext { } *)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_renderDataAreaDividersWithContext:(struct CGContext { } *)a0;
- (void)_renderYAxisLabelsInContext:(struct CGContext { } *)a0 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_handleTilesInitialRender;
- (void)_scheduleExternalSelectionIfNeeded;
- (void)_recordLastRenderTime;
- (void)_cancelExternalSelection;
- (id)_effectiveVisibleRangeFromActualVisibleRange:(id)a0;
- (void)_updateDateZoomIfNecessary;
- (void)_showTiles;
- (void)_touchTilesForContentOffset:(struct CGPoint { double x0; double x1; })a0 applyHysteresis:(BOOL)a1;
- (void)_updateLegendsForAllSeriesGroups;
- (void)_hideTiles;
- (void)_notifyDelegateOfFinishUserScrolling;
- (void)_installAccessoryViews;
- (void)_restoreDestinationActiveRange;
- (void)_snapXAxisRangeToPreservedRange;
- (void)_preserveDestinationActiveRange:(id)a0;
- (void)_loadSeriesForZoom:(long long)a0;
- (void)_createLegendsIfNecessary;
- (void)_notifyDateZoomDidChangeFromValue:(long long)a0 toValue:(long long)a1;
- (double)_maxTimeThreshold;
- (void)_updateGraphViewConfigurationIfNecessary;
- (double)_renderXAxisLabelsInContext:(struct CGContext { } *)a0;
- (void)_tapOnViewAction:(id)a0;
- (void)_notifyDelegateOfTapOnYAxis;
- (void)_layoutDetailView;
- (void)_toggleStickySelectionAction:(id)a0;
- (void)_touchAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_selectionRecognizerDidBeginWithTouchPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_activateStickySelection;
- (void)_selectionRecognizerDidMoveWithTouchPoints:(id)a0;
- (long long)_currentSelectionStateForSeriesGroup:(id)a0;
- (void)_enumerateSeriesSelectionRegionsForSeriesGroup:(id)a0 withBlock:(id /* block */)a1;
- (void)_selectionRecognizerDidUpdate:(id)a0;
- (void)_selectionRecognizerDidBegin:(id)a0;
- (BOOL)_touchesActuallyMoved:(id)a0;
- (void)_selectionRecognizerDidMove:(id)a0;
- (void)_selectionRecognizerDidFinish:(id)a0;
- (struct CGPoint { double x0; double x1; })_touchPointForSeriesGroupIndex:(long long)a0 originalTouchPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)_handleStartTouchPoint:(struct CGPoint { double x0; double x1; })a0 seriesGroupRow:(long long)a1;
- (void)_notifyDidBeginSelection;
- (id)_closestSeriesToPoint:(struct CGPoint { double x0; double x1; })a0 allSeries:(id)a1;
- (id)_closestGraphSeriesForTouchPoint:(struct CGPoint { double x0; double x1; })a0 seriesGroup:(id)a1;
- (BOOL)_stickySelectionActive;
- (void)_resetSingleSelectionXValue;
- (id)_newPointSelectionContextsWithTouchPoints:(id)a0 updateViewStates:(BOOL)a1;
- (BOOL)_selectionContextsNotPreviouslySelected:(id)a0;
- (void)_notifyDidUpdateSelectionWithPointContext:(id)a0;
- (void)_updateSelectionContextStateWithTouchPoint:(struct CGPoint { double x0; double x1; })a0 seriesGroup:(id)a1;
- (struct { struct { long long x0; long long x1; } x0; long long x1; })_closestDataPointPathToPoint:(struct CGPoint { double x0; double x1; })a0 seriesGroupRow:(long long)a1 seriesInGroup:(id)a2 minimumXDistance:(double)a3 xDistanceOut:(double *)a4;
- (id)_pointSelectionContextWithPathRange:(struct { struct { struct { long long x0; long long x1; } x0; long long x1; } x0; struct { struct { long long x0; long long x1; } x0; long long x1; } x1; })a0 touchPoints:(id)a1 seriesGroupRow:(long long)a2 seriesInGroup:(id)a3;
- (void)_deselectAllSeriesWithAlpha:(double)a0 offScreenIndicatorAlpha:(double)a1 seriesGroup:(id)a2;
- (void)_moveSeriesToFront:(id)a0;
- (id)_multiSeriesSelectionContextsWithTouchPoints:(id)a0 updateViewStates:(BOOL)a1;
- (id)_oneSeriesSelectionContextsWithTouchPoints:(id)a0 updateViewStates:(BOOL)a1;
- (id)_valueForXAxisLocation:(double)a0;
- (void)_notifyDidEndSelection;
- (void)_deactivateStickySelection;
- (void)_scheduleExternalSelectionIfNeededClearingLastLocation;
- (void)_installExternalSelectionEndTimer;
- (void)_scheduleRequiredExternalSelection;
- (void)_endExternalSelectionViaTimer;
- (void)_notifyDidEndExternalSelection;
- (void)_processExternalSelection;
- (void)enumerateVisibleCoordinatesForSeries:(id)a0 block:(id /* block */)a1;
- (BOOL)_graphViewIsConfigured;
- (BOOL)_tilesConfigurableAfterInitialRender;
- (BOOL)_tilesReconfigurableAfterInitialRender;
- (struct CGPoint { double x0; double x1; })_contentOffsetForActualViewRange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_tileScreenRectForColumn:(long long)a0;
- (void)_handleMarkDirtyCompletion;
- (void)graphRenderer:(id)a0 shouldRenderSceneWithContext:(struct CGContext { } *)a1 chartRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_tileHiddenFlag:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_overlayAreaRect;
- (long long)_ordinalForOverlayType:(long long)a0;
- (BOOL)seriesDrawingDuringAutoscale;
- (BOOL)seriesDrawingDuringScrolling;
- (long long)_overlayTypeForOverlaySeriesData:(id)a0;
- (long long)_overlayEnvironmentType;
- (id)_nonOverlappingOverlaySeriesData:(id)a0;
- (id)_overlappingOverlaySeriesData:(id)a0;
- (void)_overlayViewsForOverlayData:(id)a0 overlayView:(id)a1;
- (void)seriesDidInvalidatePaths:(id)a0 newDataArrived:(BOOL)a1;
- (BOOL)seriesDrawingDuringTiling;
- (struct CGPoint { double x0; double x1; })seriesContentOffset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })screenRectForSeries:(id)a0;
- (void)autoscaleStateChangedForSeries:(id)a0;
- (BOOL)rangeIsVisible:(id)a0;
- (void)nonemptyDrawComplete;
- (BOOL)stillAnimating:(id)a0;
- (void)gestureWillBeginWithRecognizer:(id)a0;
- (void)overlayNeedsRedisplay;
- (void)testScrollPerformanceWithTestName:(id)a0 iterations:(int)a1 delta:(int)a2 options:(id)a3;
- (long long)_countOfAllSeries;
- (id)_firstSelectionContext;
- (void)_cancelAllInFlightAutoscales;
- (void)invalidateDataSourceCaches;
- (void)_pauseChartInteraction;
- (void)_resumeChartInteraction;
- (void)setVirtualLeftMargin:(double)a0;
- (void)setVirtualRightMargin:(double)a0;
- (void)setEffectiveVisibleRangeActive:(id)a0 animated:(BOOL)a1;
- (void)forceYAxisScaleToRange:(id)a0 animated:(BOOL)a1;
- (struct { struct { long long x0; long long x1; } x0; long long x1; })_closestDataPointPathToPoint:(struct CGPoint { double x0; double x1; })a0 seriesGroupRow:(long long)a1 minimumXDistance:(double)a2 xDistanceOut:(double *)a3;
- (void)touchSelectionAtModelX:(id)a0;
- (void)testScrollPerformanceWithTestName:(id)a0 iterations:(int)a1 delta:(int)a2 length:(int)a3;
- (id)findVisibleBlockCoordinatesForPrimarySeries;
- (void)setPreviousDateZoom:(long long)a0;
- (void)setAxesToShowSimultaneously:(id)a0 stackOffset:(long long)a1;

@end

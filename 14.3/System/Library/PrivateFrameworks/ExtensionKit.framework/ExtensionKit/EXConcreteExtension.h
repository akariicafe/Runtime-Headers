@class NSString, NSBundle, NSUUID, NSMutableDictionary, NSDictionary, NSSet;
@protocol PKPlugIn;

@interface EXConcreteExtension : NSExtension {
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _unfairLock;
    NSString *_identifier;
    NSString *_version;
    NSDictionary *_attributes;
    NSDictionary *_infoDictionary;
    NSString *_extensionPointIdentifier;
    id /* block */ _requestCompletionBlock;
    id /* block */ _requestCancellationBlock;
    id /* block */ _requestInterruptionBlock;
}

@property (readonly, copy) NSString *_localizedName;
@property (readonly, copy) NSString *_localizedShortName;
@property (retain, setter=_setPlugIn:) id<PKPlugIn> _plugIn;
@property (readonly, retain, nonatomic) NSBundle *_extensionBundle;
@property (copy) id /* block */ _requestPostCompletionBlock;
@property (copy) id /* block */ _requestPostCompletionBlockWithItems;
@property (readonly) double requestTeardownDelay;
@property (copy, nonatomic) NSUUID *connectionUUID;
@property (nonatomic) long long wantsDedicatedQueue;
@property (retain, nonatomic, setter=_setExtensionExpirationsIdentifiers:) NSMutableDictionary *_extensionExpirationIdentifiers;
@property (retain, nonatomic, setter=_setExtensionServiceConnections:) NSMutableDictionary *_extensionServiceConnections;
@property (retain, nonatomic, setter=_setExtensionContexts:) NSMutableDictionary *_extensionContexts;
@property (copy, nonatomic, getter=_extensionState, setter=_setExtensionState:) NSDictionary *_extensionState;
@property (copy, nonatomic, setter=_setAllowedErrorClasses:) NSSet *_allowedErrorClasses;
@property (nonatomic, getter=_isObservingHostAppStateChanges, setter=_setObservingHostAppStateChanges:) BOOL observingHostAppStateChanges;
@property (retain) id _stashedPlugInConnection;

+ (void)initialize;
+ (id)_inputItemsByApplyingActiveWebPageAlternative:(id)a0 ifNeededByActivationRule:(id)a1;
+ (void)extensionWithUUID:(id)a0 completion:(id /* block */)a1;
+ (id)predicateForActivationRule:(id)a0;
+ (void)endMatchingExtensions:(id)a0;
+ (BOOL)_evaluateActivationRuleWithoutWorkarounds:(id)a0 withExtensionItemsRepresentation:(id)a1;
+ (BOOL)_matchingDictionaryMatchesActiveWebPageAlternative:(id)a0;
+ (BOOL)_evaluateActivationRule:(id)a0 withDictionaryIfItMatchesActiveWebPageAlternative:(id)a1 matchResult:(out long long *)a2;
+ (BOOL)_genericValuesMatchActiveWebPageAlternativeWithExtensionItems:(id)a0 attachmentsLens:(id /* block */)a1 registeredTypeIdentifiersLens:(id /* block */)a2 isActiveWebPageAttachmentCheck:(id /* block */)a3;
+ (void)initializeFiltering;
+ (id)extensionWithIdentifier:(id)a0 error:(id *)a1;
+ (BOOL)evaluateActivationRule:(id)a0 withExtensionItemsRepresentation:(id)a1;
+ (id)extensionWithIdentifier:(id)a0 excludingDisabledExtensions:(BOOL)a1 error:(id *)a2;
+ (id)_dictionaryIncludingOnlyItemsWithRegisteredTypeIdentifier:(id)a0 fromMatchingDictionary:(id)a1;
+ (void)extensionsWithMatchingAttributes:(id)a0 completion:(id /* block */)a1;
+ (id)beginMatchingExtensionsWithAttributes:(id)a0 completion:(id /* block */)a1;
+ (BOOL)_evaluateActivationRule:(id)a0 withInputItemsIfTheyMatchActiveWebPageAlternative:(id)a1 matchResult:(out long long *)a2;
+ (id)globalStateQueueForExtension:(id)a0;
+ (BOOL)_inputItemsMatchActiveWebPageAlternative:(id)a0;
+ (void)extensionWithURL:(id)a0 completion:(id /* block */)a1;
+ (void)extensionsWithMatchingAttributes:(id)a0 synchronously:(BOOL)a1 completion:(id /* block */)a2;
+ (BOOL)_shouldLogExtensionDiscovery;
+ (id)extensionsWithMatchingAttributes:(id)a0 error:(id *)a1;

- (void)setRequestCompletionBlock:(id /* block */)a0;
- (BOOL)optedIn;
- (void)setRequestCancellationBlock:(id /* block */)a0;
- (void)beginExtensionRequestWithInputItems:(id)a0 listenerEndpoint:(id)a1 completion:(id /* block */)a2;
- (void)_dropAssertion;
- (id)extensionPointIdentifier;
- (void)_loadItemForPayload:(id)a0 contextIdentifier:(id)a1 completionHandler:(id /* block */)a2;
- (void)_didShowExtensionManagementInterface;
- (void)_completeRequestReturningItems:(id)a0 forExtensionContextWithUUID:(id)a1 completion:(id /* block */)a2;
- (id)infoDictionary;
- (void)beginExtensionRequestWithOptions:(unsigned long long)a0 inputItems:(id)a1 listenerEndpoint:(id)a2 completion:(id /* block */)a3;
- (void)_reallyBeginExtensionRequestWithContext:(id)a0 extensionServiceConnection:(id)a1 listenerEndpoint:(id)a2 synchronously:(BOOL)a3 completion:(id /* block */)a4;
- (id)init;
- (void)_safelyEndUsingRequestWithPKUUID:(id)a0 processAssertion:(id)a1 continuation:(id /* block */)a2;
- (int)pidForRequestIdentifier:(id)a0;
- (id)_initWithPKPlugin:(id)a0;
- (void)_openURL:(id)a0 completion:(id /* block */)a1;
- (BOOL)_isMarkedNew;
- (id)objectForInfoDictionaryKey:(id)a0;
- (id /* block */)requestCompletionBlock;
- (void)dealloc;
- (id)attributes;
- (id)beginExtensionRequestWithInputItems:(id)a0 error:(id *)a1;
- (id)beginExtensionRequestWithOptions:(unsigned long long)a0 inputItems:(id)a1 listenerEndpoint:(id)a2 error:(id *)a3;
- (void)_didShowNewExtensionIndicator;
- (BOOL)_wantsProcessPerRequest;
- (void)_safelyBeginUsingWithOptions:(unsigned long long)a0 pkUUID:(id)a1 withAssertion_onSafeQueue:(id /* block */)a2;
- (BOOL)attemptOptOut:(id *)a0;
- (BOOL)attemptOptIn:(id *)a0;
- (id)_inputItemsByApplyingActiveWebPageAlternativeIfNeeded:(id)a0;
- (id)extensionContexts;
- (unsigned long long)hash;
- (void)_loadPreviewImageForPayload:(id)a0 contextIdentifier:(id)a1 completionHandler:(id /* block */)a2;
- (void)beginExtensionRequestWithOptions:(unsigned long long)a0 inputItems:(id)a1 completion:(id /* block */)a2;
- (id)_bareExtensionServiceConnection;
- (id)description;
- (void)setRequestInterruptionBlock:(id /* block */)a0;
- (void)_safelyBeginUsing:(id /* block */)a0;
- (void)_reallyBeginExtensionRequestWithInputItems:(id)a0 pkUUID:(id)a1 processAssertion:(id)a2 listenerEndpoint:(id)a3 completion:(id /* block */)a4;
- (void)_hostWillResignActiveNote:(id)a0;
- (id)version;
- (BOOL)isEqual:(id)a0;
- (id)beginExtensionRequestWithInputItems:(id)a0 listenerEndpoint:(id)a1 error:(id *)a2;
- (void)_resetExtensionState;
- (void)beginExtensionRequestWithInputItems:(id)a0 completion:(id /* block */)a1;
- (BOOL)_isPhotoServiceAccessGranted;
- (id)_extensionContextForUUID:(id)a0;
- (void)_cancelRequestWithError:(id)a0 forExtensionContextWithUUID:(id)a1 completion:(id /* block */)a2;
- (void)_safelyBeginUsingSynchronously:(BOOL)a0 options:(unsigned long long)a1 pkUUID:(id)a2 withAssertion_onSafeQueue:(id /* block */)a3;
- (void)cancelExtensionRequestWithIdentifier:(id)a0;
- (id)_itemProviderForPayload:(id)a0 extensionContext:(id)a1;
- (void)_hostWillEnterForegroundNote:(id)a0;
- (id /* block */)requestCancellationBlock;
- (BOOL)_beginUsingAndCreateExtensionAssertion:(id *)a0 options:(unsigned long long)a1 pkUUID:(id)a2 error:(id *)a3;
- (void)_hostDidBecomeActiveNote:(id)a0;
- (int)_plugInProcessIdentifier;
- (BOOL)_isSystemExtension;
- (id)icons;
- (id)beginExtensionRequestWithOptions:(unsigned long long)a0 inputItems:(id)a1 error:(id *)a2;
- (void)_kill:(int)a0;
- (void)_safelyEndUsing:(id /* block */)a0;
- (void)_hostDidEnterBackgroundNote:(id)a0;
- (id)identifier;
- (id)_newExtensionContextAndGetConnection:(id *)a0 assertion:(id)a1 pkUUID:(id)a2 inputItems:(id)a3;
- (void)_didCreateExtensionContext:(id)a0;
- (id /* block */)requestInterruptionBlock;

@end

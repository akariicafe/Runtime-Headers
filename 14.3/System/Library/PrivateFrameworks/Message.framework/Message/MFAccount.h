@class NSString, ECAuthenticationScheme, NSArray, NSMutableDictionary, NSDictionary, EFLocked, ACAccount, ECAccount;

@interface MFAccount : NSObject <EDAccount, ECAuthenticatableAccount, EFPubliclyDescribable> {
    ACAccount *_persistentAccount;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _persistentAccountLock;
    NSMutableDictionary *_unsavedAccountProperties;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _descriptionLock;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _privacyDescriptionLock;
    NSString *_cachedPrivacySafeDescription;
    NSString *_cachedDescription;
}

@property (readonly, nonatomic) EFLocked *currentConnections;
@property (readonly) ACAccount *accountForRenewingCredentials;
@property (readonly) ACAccount *persistentAccount;
@property (readonly) ACAccount *parentAccount;
@property (readonly) NSString *parentAccountIdentifier;
@property (readonly, nonatomic) ECAccount *baseAccount;
@property (readonly, nonatomic, getter=isManaged) BOOL managed;
@property (readonly) NSDictionary *properties;
@property (readonly) NSString *uniqueID;
@property (readonly, copy) NSString *identifier;
@property (readonly) NSString *syncStoreIdentifier;
@property (readonly) NSString *type;
@property (readonly) NSString *personaIdentifier;
@property (readonly) NSString *managedTag;
@property (retain) NSString *username;
@property (copy, nonatomic) NSString *hostname;
@property (retain, nonatomic) NSString *displayName;
@property (readonly, nonatomic) BOOL connectionsAreConstrained;
@property (readonly, retain, nonatomic) NSString *oauth2Token;
@property (copy, nonatomic) NSString *sourceApplicationBundleIdentifier;
@property (retain, nonatomic) NSString *domain;
@property (retain, nonatomic) ECAuthenticationScheme *preferredAuthScheme;
@property (readonly, nonatomic) ACAccount *systemAccount;
@property (readonly, copy, nonatomic) NSString *statisticsKind;
@property (readonly, nonatomic) BOOL primaryiCloudAccount;
@property (readonly, copy, nonatomic) NSArray *emailAddressStrings;
@property (copy, nonatomic) NSString *password;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSString *ef_publicDescription;

+ (id)hostname;
+ (BOOL)shouldHealAccounts;
+ (id)accountWithProperties:(id)a0;
+ (id)_accountClass;
+ (id)_newPersistentAccount;
+ (id)releaseAllConnectionsScheduler;
+ (id)_basicPropertyForKey:(id)a0 persistentAccount:(id)a1;
+ (BOOL)_setBasicProperty:(id)a0 forKey:(id)a1 persistentAccount:(id)a2;
+ (id)displayedAccountTypeString;
+ (id)excludedAccountPropertyKeys;
+ (id)predefinedValueForKey:(id)a0;
+ (void)setShouldHealAccounts:(BOOL)a0;
+ (BOOL)isCommonPortNumber:(unsigned int)a0;
+ (id)newAccountWithDictionary:(id)a0;
+ (id)authSchemesForAccountClass;
+ (id)accountWithPersistentAccount:(id)a0;
+ (id)existingAccountForUniqueID:(id)a0;
+ (BOOL)isPredefinedAccountType;
+ (id)propertiesWhichRequireValidation;
+ (id)displayedShortAccountTypeString;
+ (void *)legacyKeychainProtocol;
+ (id)accountPropertiesValueForKey:(id)a0 value:(id)a1;
+ (BOOL)isSSLEditable;
+ (id)saslProfileName;
+ (id)accountTypeString;
+ (BOOL)usesSSL;
+ (id)supportedDataclasses;
+ (unsigned int)defaultPortNumber;
+ (id)accountTypeIdentifier;
+ (unsigned int)defaultSecurePortNumber;

- (id)accountClass;
- (id)initWithProperties:(id)a0;
- (id)init;
- (id)initWithPersistentAccount:(id)a0;
- (void)_setAccountProperties:(id)a0;
- (void)setPersistentAccount:(id)a0;
- (void)releaseAllConnections;
- (void)persistentAccountDidChange:(id)a0 previousAccount:(id)a1;
- (id)_objectForAccountInfoKey:(id)a0;
- (id)_privacySafeDescription;
- (void)accountInfoDidChange;
- (void)setOAuth2Token:(id)a0 refreshToken:(id)a1;
- (void)_queueAccountInfoDidChange;
- (void)removeAccountPropertyForKey:(id)a0;
- (BOOL)_boolForAccountInfoKey:(id)a0 defaultValue:(BOOL)a1;
- (id)_credentialCreateIfNecessary:(BOOL)a0 error:(id *)a1;
- (id)_passwordWithError:(id *)a0;
- (BOOL)_renewCredentialsWithOptions:(id)a0 completion:(id /* block */)a1;
- (void)setActive:(BOOL)a0;
- (void).cxx_destruct;
- (id)authenticatedConnection;
- (unsigned int)portNumber;
- (BOOL)_shouldTryDirectSSLConnectionOnPort:(unsigned int)a0;
- (void)setUsesSSL:(BOOL)a0;
- (Class)connectionClass;
- (BOOL)_connectAndAuthenticate:(id)a0;
- (void)setPortNumber:(unsigned int)a0;
- (id)certUIService;
- (id)clientCertificates;
- (void)setClientCertificates:(id)a0;
- (void)setTryDirectSSL:(BOOL)a0;
- (id)secureServiceName;
- (struct __CFString { } *)connectionServiceType;
- (BOOL)allowsTrustPrompt;
- (id)networkAccountIdentifier;
- (id)defaultConnectionSettings;
- (unsigned long long)credentialAccessibility;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)customDescriptionForError:(id)a0 authScheme:(id)a1 defaultDescription:(id)a2;
- (void)reportAuthenticationError:(id)a0 authScheme:(id)a1;
- (id)missingPasswordErrorWithTitle:(id)a0;
- (BOOL)canAuthenticateWithCurrentCredentials;
- (BOOL)hasPasswordCredential;
- (void)savePersistentAccount;
- (void)setMissingPasswordError;
- (BOOL)shouldFetchACEDBInfoForError:(id)a0;
- (void)removePersistentAccount;
- (void)setValueInAccountProperties:(id)a0 forKey:(id)a1;
- (void)removeValueInAccountPropertiesForKey:(id)a0;
- (id)valueInAccountPropertiesForKey:(id)a0;
- (BOOL)canGoOffline;
- (BOOL)supportsMailDrop;
- (BOOL)fetchTokensIfNecessary:(id *)a0;
- (id)_credentialCreateIfNecessary:(BOOL)a0;
- (BOOL)renewCredentialsWithOptions:(id)a0 completion:(id /* block */)a1;
- (BOOL)promptUserForWebLoginWithURL:(id)a0 shouldConfirm:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)releaseAllForcedConnections;
- (BOOL)enableAccount;
- (void)applySettingsAsDefault:(id)a0;
- (id)alternateConnectionSettings;
- (id)insecureConnectionSettings;
- (id)secureConnectionSettings;
- (id)nameForMailboxUid:(id)a0;
- (BOOL)shouldEnableAfterError:(id)a0;
- (BOOL)shouldDisplayHostnameInErrorMessages;
- (id)inaccessiblePasswordErrorWithTitle:(id)a0;
- (id)loginDisabledErrorWithTitle:(id)a0;
- (BOOL)isSyncingNotes;
- (id)_credential;
- (id)copyDiagnosticInformation;
- (id)_password;
- (void)setAccountProperty:(id)a0 forKey:(id)a1;
- (BOOL)isEnabledForDataclass:(id)a0;
- (id)enabledDataclasses;
- (BOOL)usesSSL;
- (id)serviceName;
- (BOOL)isActive;
- (BOOL)isEqual:(id)a0;
- (unsigned int)defaultPortNumber;
- (BOOL)requiresAuthentication;
- (unsigned int)defaultSecurePortNumber;
- (id)_newConnection;
- (id)accountPropertyForKey:(id)a0;

@end

@class NSString, NSArray, BWPixelBufferPool, HDRProcessor, NSObject, BWLimitedGMErrorLogger;
@protocol OS_dispatch_semaphore;

@interface BWPixelTransferNode : BWNode <BWNodeBackPressureSource> {
    int _cropMode;
    int _liveCropMode;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputCropRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _liveInputCropRect;
    BOOL _haveLiveInputCropRect;
    BOOL _passesBuffersThroughWhenPossible;
    BOOL _livePassesBuffersThroughWhenPossible;
    BOOL _appliesUprightExifOrientationTransformToInput;
    BOOL _liveAppliesUprightExifOrientationTransformToInput;
    int _rotationDegrees;
    int _liveRotationDegrees;
    BOOL _flipHorizontal;
    BOOL _liveFlipHorizontal;
    BOOL _flipVertical;
    BOOL _liveFlipVertical;
    BOOL _liveZeroFillBuffers;
    BOOL _lowSpeed;
    BOOL _liveLowSpeed;
    BOOL _updatesSampleBufferMetadataForIrisVIS;
    BOOL _liveUpdatesSampleBufferMetadataForIrisVIS;
    unsigned long long _outputWidth;
    unsigned long long _outputHeight;
    unsigned int _outputPixelFormat;
    NSArray *_preferredOutputPixelFormats;
    int _outputColorSpaceProperties;
    struct { int width; int height; } _validOutputDimensions;
    struct { int width; int height; } _liveValidOutputDimensions;
    struct OpaqueVTImageRotationSession { } *_rotationSession;
    int _rotationSessionRotationDegrees;
    BOOL _rotationSessionFlipHorizontal;
    BOOL _rotationSessionFlipVertical;
    BOOL _rotationSessionZeroFillBuffers;
    BOOL _rotationSessionLowSpeed;
    BOOL _rotationSessionEnablesHistogram;
    int _rotationSessionColorSpaceProperties;
    int _lastInputUprightExifOrientation;
    struct OpaqueVTPixelTransferSession { } *_transferSession;
    BWPixelBufferPool *_intermediateBufferPool;
    struct { int width; int height; } _intermediatePoolDimensions;
    struct opaqueCMFormatDescription { } *_outputFormatDescription;
    BOOL _makeCurrentConfigurationLiveOnNextRenderCallback;
    NSObject<OS_dispatch_semaphore> *_emitSampleBufferSemaphore;
    BOOL _expectsMarkerBuffers;
    BOOL _liveExpectsMarkerBuffers;
    BOOL _appliesPrimaryCaptureRect;
    BOOL _generatesHistogram;
    int _conversionMethodForStillImagesDuringHDRVideo;
    struct __CVBuffer { } *_intermediatePixelBufferForStillHDRToSDRConversion;
    HDRProcessor *_HDRProcessingProcessor;
    struct __IOSurfaceAccelerator { } *_msrScalerForHDRProcessing;
    BWLimitedGMErrorLogger *_limitedGMErrorLogger;
}

@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *emitSampleBufferSemaphore;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;

- (unsigned long long)outputWidth;
- (void)handleDroppedSample:(id)a0 forInput:(id)a1;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)_updateMetadataForOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (int)_ensureIntermediatePoolWithDimensions:(struct { int x0; int x1; })a0;
- (BOOL)_zeroFillBuffers;
- (void)didSelectFormat:(id)a0 forInput:(id)a1;
- (void)configurationWithID:(long long)a0 updatedFormat:(id)a1 didBecomeLiveForInput:(id)a2;
- (void)setValidOutputDimensions:(struct { int x0; int x1; })a0;
- (id)nodeType;
- (void)_updateCameraIntrinsicsMatrixOnSampleBufferIfNeeded:(struct opaqueCMSampleBuffer { } *)a0 inputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)init;
- (id)nodeSubType;
- (void)didReachEndOfDataForInput:(id)a0;
- (void)makeCurrentConfigurationLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 forInput:(id)a1;
- (void)setExpectsMarkerBuffers:(BOOL)a0;
- (int)conversionMethodForStillImagesDuringHDRVideos;
- (BOOL)flipVertical;
- (id)preferredOutputPixelFormats;
- (void)dealloc;
- (BOOL)hasNonLiveConfigurationChanges;
- (BOOL)expectsMarkerBuffers;
- (void)_makeCurrentConfigurationLive;
- (void)_updateLiveRotationAndFlipsToApplyUprightExifOrientation:(int)a0;
- (void)setInputCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })inputCropRect;
- (struct { int x0; int x1; })_intermediateBufferDimensionsForInputDimensions:(struct { int x0; int x1; })a0 outputDimensions:(struct { int x0; int x1; })a1;
- (void)setGeneratesHistogram:(BOOL)a0;
- (void)_updateInputRequirements;
- (void)setPreferredOutputPixelFormats:(id)a0;
- (void)_updateUprightExifOrientationOnSampleBufferIfNeeded:(struct opaqueCMSampleBuffer { } *)a0;
- (void)_updatePrimaryCaptureRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)a1;
- (void)setOutputWidth:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_getUpdatedPrimaryCaptureRectForOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 inputDimensions:(struct { int x0; int x1; })a1;
- (void)setOutputPixelFormat:(unsigned int)a0;
- (void)setCropMode:(int)a0;
- (void)_updateOutputRequirements;
- (void)_updatePassthroughModes;
- (id)_supportedInputPixelFormats;
- (int)cropMode;
- (BOOL)passesBuffersThroughWhenPossible;
- (void)setLowSpeed:(BOOL)a0;
- (void)setOutputHeight:(unsigned long long)a0;
- (int)outputColorSpaceProperties;
- (BOOL)_emitIfMarkerBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (BOOL)appliesUprightExifOrientationTransformToInput;
- (BOOL)updatesSampleBufferMetadataForIrisVIS;
- (void)setAppliesUprightExifOrientationTransformToInput:(BOOL)a0;
- (void)setConversionMethodForStillImagesDuringHDRVideos:(int)a0;
- (void)_ensureTransferSession;
- (int)_convertUsingHDRProcessing:(struct __CVBuffer { } *)a0 toSDR:(struct __CVBuffer { } *)a1;
- (void)setAppliesPrimaryCaptureRect:(BOOL)a0;
- (id)_supportedOutputPixelFormats;
- (void)setFlipHorizontal:(BOOL)a0;
- (struct { int x0; int x1; })validOutputDimensions;
- (unsigned int)outputPixelFormat;
- (void)setPassesBuffersThroughWhenPossible:(BOOL)a0;
- (BOOL)flipHorizontal;
- (void)setFlipVertical:(BOOL)a0;
- (BOOL)generatesHistogram;
- (BOOL)appliesPrimaryCaptureRect;
- (BOOL)lowSpeed;
- (void)_ensureIntermediatePixelBufferForStillHDRToSDRConversionIfNeeded;
- (void)setRotationDegrees:(int)a0;
- (void)setOutputColorSpaceProperties:(int)a0;
- (int)rotationDegrees;
- (void)setUpdatesSampleBufferMetadataForIrisVIS:(BOOL)a0;
- (unsigned long long)outputHeight;
- (void)_ensureRotationSession;

@end

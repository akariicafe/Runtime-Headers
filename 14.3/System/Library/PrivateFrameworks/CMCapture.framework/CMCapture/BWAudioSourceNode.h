@class NSArray, NSString, NSDictionary, BWNodeOutput, NSObject;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface BWAudioSourceNode : BWSourceNode <BWAudioSourceRecordingReadinessDelegate, BWZoomCompletionDelegate> {
    BWNodeOutput *_outputsByMicSourcePosition[3];
    NSDictionary *_sourceRequirements;
    struct opaqueCMSession { } *_CMSession;
    struct __CFString { } *_CMSessionAudioMode;
    BOOL _useDecoupledIO;
    BOOL _prefersNoInterruptionsByRingtonesAndAlerts;
    NSObject<OS_dispatch_queue> *_cmSessionSetRecordingRelatedPropertyQueue;
    BOOL _doEndInterruption;
    BOOL _isAppAudioSession;
    BOOL _configuresSession;
    struct { unsigned int val[8]; } _clientAuditToken;
    int _clientPID;
    struct OpaqueCMClock { } *_clock;
    struct opaqueCMFormatDescription { } *_auOutputFormatDescription;
    unsigned int _pullDuration;
    struct OpaqueAudioComponentInstance { } *_audioUnit;
    unsigned int _auSubType;
    struct opaqueCMSimpleQueue { } *_renderProcErrorQueue;
    struct opaqueCMSimpleQueue { } *_inactiveBuffersQueue;
    struct opaqueCMSimpleQueue { } *_activeBuffersQueue;
    unsigned long long _nextExpectedHostTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _nextExpectedSampleTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _ioprocTimeStampDeltaLimit;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _prevPTS;
    unsigned int _prevNumFrames;
    NSObject<OS_dispatch_queue> *_generateSamplesDispatchQueue;
    BOOL _streamStarted;
    BOOL _levelMeteringEnabled;
    int _audioLevelUnits;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _latencyOffset;
    NSObject<OS_dispatch_source> *_silenceTimer;
    long long _auRenderCount;
    long long _silenceFramesGeneratedSinceLastAURenderProc;
    struct TimestampedAudioBufferList { struct __CFAllocator *allocator; long long auRenderCount; unsigned int dataBytesCapacity; unsigned int numFrames; struct { long long value; int timescale; unsigned int flags; long long epoch; } pts; struct AudioBufferList *abl; unsigned int numPrependedSilenceFrames; } _currentSilenceBuffer;
    NSObject<OS_dispatch_queue> *_preparedToRecordHandlerCallbackQueue;
    BOOL _livePhotoCaptureEnabled;
    BOOL _stereoAudioCaptureEnabled;
    BOOL _videoRecordingEnabled;
    BOOL _isMultiCamSession;
    BOOL _flipStereoAudioCaptureChannels;
    float _stereoAudioCapturePairedCameraBaseFieldOfView;
    float _stereoAudioCapturePairedCameraZoomFactor;
    NSObject<OS_dispatch_queue> *_zoomHandlerQueue;
    long long _maxZoomFrequencyNanos;
    long long _nextZoomTime;
    NSObject<OS_dispatch_source> *_zoomTimer;
    float _nextZoomFactor;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _zoomLock;
}

@property (readonly, nonatomic) NSArray *audioLevels;
@property (readonly, nonatomic) BOOL didBeginInterruption;
@property (nonatomic) BOOL interrupted;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)audioSourceNodeWithAttributes:(id)a0 sessionPreset:(id)a1 clock:(struct OpaqueCMClock { } *)a2 doConfigureAudio:(BOOL)a3 CMSession:(struct opaqueCMSession { } *)a4 doEndInterruption:(BOOL)a5 clientAuditToken:(struct { unsigned int x0[8]; })a6 clientVersionOfLinkedSDK:(unsigned int)a7 audioCaptureConnectionConfigurations:(id)a8 isMultiCamSession:(BOOL)a9;

- (void)setLivePhotoCaptureEnabled:(BOOL)a0;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (BOOL)flipStereoAudioCaptureChannels;
- (struct OpaqueCMClock { } *)clock;
- (void)unprepareForRecording;
- (void)setStereoAudioCapturePairedCameraZoomFactor:(float)a0;
- (BOOL)start:(id *)a0;
- (void)setStereoAudioCapturePairedCameraBaseFieldOfView:(float)a0;
- (void)prepareToStartRecordingWithOrientation:(int)a0 recordingSettingsID:(long long)a1 prefersNoInterruptionsByRingtonesAndAlerts:(BOOL)a2 completionHandler:(id /* block */)a3;
- (int)_setupAudioUnit;
- (BOOL)stop:(id *)a0;
- (int)_selectMicForAudioRoute:(id)a0;
- (id)nodeSubType;
- (void)makeCurrentConfigurationLive;
- (struct opaqueCMSampleBuffer { } *)_createSampleBufferForTimestampedAudioBufferList:(struct TimestampedAudioBufferList { struct __CFAllocator *x0; long long x1; unsigned int x2; unsigned int x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; struct AudioBufferList *x5; unsigned int x6; } *)a0 audioBufferIndex:(int)a1;
- (BOOL)livePhotoCaptureEnabled;
- (int)_updatePullFormatDescription;
- (void)dealloc;
- (BOOL)hasNonLiveConfigurationChanges;
- (int)_deactivateCMSessionIfNecessary:(BOOL *)a0;
- (void)setFlipStereoAudioCaptureChannels:(BOOL)a0;
- (double)_desiredSampleRate:(BOOL *)a0;
- (void)setStereoAudioCaptureEnabled:(BOOL)a0;
- (void)_setVADCameraParametersWithDirection:(int)a0 zoomFactor:(float)a1 forTime:(long long)a2;
- (BOOL)_cmSessionBooleanPropertyIsTrue:(struct __CFString { } *)a0;
- (BOOL)levelMeteringEnabled;
- (void)_updateStereoAudioCapturePairedCameraZoomFactorAndStartTimer:(BOOL)a0;
- (int)_generatePullBuffers;
- (int)_virtualAudioDeviceCameraMics;
- (int)_configureCMSessionWithDefaultHardwareSampleRate:(double)a0 didCallDoNotNotifyOtherSessionsOnNextInactive:(BOOL *)a1;
- (int)_getAudioDevicePullFrames:(unsigned int *)a0;
- (void)_updateAudioClockDeviceUID:(struct __CFString { } *)a0;
- (id)outputForMicSourcePosition:(int)a0;
- (unsigned int)_audioCombinedLatency;
- (BOOL)stereoAudioCaptureEnabled;
- (void)setVideoRecordingEnabled:(BOOL)a0;
- (int)_setCMSessionPropertyWithKey:(struct __CFString { } *)a0 value:(void *)a1;
- (id)_initWithAttributes:(id)a0 sessionPreset:(id)a1 clock:(struct OpaqueCMClock { } *)a2 doConfigureAudio:(BOOL)a3 CMSession:(struct opaqueCMSession { } *)a4 doEndInterruption:(BOOL)a5 clientAuditToken:(struct { unsigned int x0[8]; })a6 clientVersionOfLinkedSDK:(unsigned int)a7 audioCaptureConnectionConfigurations:(id)a8 isMultiCamSession:(BOOL)a9;
- (void)zoomCommandHandler:(id)a0 didApplyZoomFactor:(float)a1 zoomFactorWithoutFudge:(float)a2 rampComplete:(BOOL)a3 rampCommandID:(int)a4;
- (void)_generateSilenceIfNeeded;
- (BOOL)videoRecordingEnabled;
- (void)setLevelMeteringEnabled:(BOOL)a0;
- (void)_generateSamples;
- (void)makeOutputsLiveIfNeeded;
- (void)_updateCMSessionAudioMode;
- (float)stereoAudioCapturePairedCameraBaseFieldOfView;
- (float)stereoAudioCapturePairedCameraZoomFactor;
- (void)_setupPrepareToRecordStateWithFlags:(unsigned int)a0;
- (int)_setCMSessionAudioModeAndSelectMic:(BOOL *)a0;

@end

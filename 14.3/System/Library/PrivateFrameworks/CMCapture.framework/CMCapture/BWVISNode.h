@class NSString, BWVideoFormatRequirements, NSArray, BWIrisStillImageMovieMetadataCache, NSMutableDictionary, NSDictionary, BWStats, BWFigCaptureISPProcessingSession, NSObject, NSMutableArray, NSNumber, BWLimitedGMErrorLogger;
@protocol OS_dispatch_semaphore;

@interface BWVISNode : BWNode <BWNodeBackPressureSource> {
    int _stabilizationMethod;
    int _stabilizationType;
    struct OpaqueFigSampleBufferProcessor { } *_sampleBufferProcessor;
    NSMutableDictionary *_optionsDict;
    BOOL _flushingSBP;
    BWFigCaptureISPProcessingSession *_ispProcessingSession;
    struct opaqueCMFormatDescription { } *_outputFormatDescription;
    NSArray *_supportedInputPixelFormats;
    NSArray *_supportedOutputPixelFormats;
    BOOL _logStripProcessingTiming;
    struct { int width; int height; } _outputDimensions;
    BOOL _sphereVideoEnabled;
    BOOL _onlyGeneratingTransforms;
    BOOL _stabilizeMetadata;
    BOOL _flipHorizontalExcludingIris;
    BOOL _liveFlipHorizontal;
    int _pipelineTraceID;
    BOOL _fillExtendedRowsOfOutputBuffer;
    BOOL _usingExtendedCVISLivePhotoStabilization;
    BOOL _stabilizeForLongPressVideo;
    int _visExecutionMode;
    NSDictionary *_offlineCameraInfoByPortType;
    float _videoStabilizationOverscanOverride;
    BOOL _generatesDroppedSampleMarkerBuffers;
    BWVideoFormatRequirements *_visOutputFormatRequirements;
    NSObject<OS_dispatch_semaphore> *_emitSampleBufferSemaphore;
    int _numberOfTimesWaited;
    int _numberOfBuffersEmitted;
    BWIrisStillImageMovieMetadataCache *_irisStillImageMovieMetadataCache;
    NSNumber *_cachedLivePhotoKeyFrame;
    NSString *_cachedStillImageKeyFrameSettingsID;
    BWLimitedGMErrorLogger *_limitedGMErrorLogger;
    struct BWVISCenterTransformAndPTS { float inverseTranform[9]; struct { long long value; int timescale; unsigned int flags; long long epoch; } framePTS; BOOL isValid; } _transformsRingBuffer[10];
    unsigned int _transformsRingBufferWriteIndex;
    int _outputColorSpaceProperties;
    NSMutableArray *_sbufsBeingProcessed;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _sbufsBeingProcessedLock;
    BWStats *_ioSurfaceCompressionRatioStats;
    int _pixelBufferCompressionType;
    unsigned long long _totalCompressedDataSize;
    unsigned long long _totalUncompressedDataSize;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastEmittedPTS;
    BOOL _frameRateConversionEnabled;
}

@property (readonly) int cinematicLookAheadFrameCount;
@property (retain, nonatomic) NSObject<OS_dispatch_semaphore> *emitSampleBufferSemaphore;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;

- (void)handleDroppedSample:(id)a0 forInput:(id)a1;
- (BOOL)sphereVideoEnabled;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)didSelectFormat:(id)a0 forInput:(id)a1;
- (void)configurationWithID:(long long)a0 updatedFormat:(id)a1 didBecomeLiveForInput:(id)a2;
- (id)nodeType;
- (int)_asynchronouslyStripProcessSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 withStabilizationParameters:(id)a1;
- (void)_didStripProcessSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (id)nodeSubType;
- (void)didReachEndOfDataForInput:(id)a0;
- (void)setSphereVideoEnabled:(BOOL)a0;
- (void)setFrameRateConversionEnabled:(BOOL)a0;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 forInput:(id)a1;
- (void)dealloc;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })_droppedSamplePTSFromSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)_addVISDigitalZoomToMetadata:(struct __CFDictionary { } *)a0 sampleBuffer:(struct opaqueCMSampleBuffer { } *)a1;
- (void)_updateSupportedPixelFormats;
- (BOOL)frameRateConversionEnabled;
- (void)setIrisStillImageMovieMetadataCache:(id)a0;
- (void)_willStripProcessSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)_tallyCompressedIOSurfaceStatsForSBuf:(struct opaqueCMSampleBuffer { } *)a0;
- (struct { int x0; int x1; })outputDimensions;
- (void)_tallyAndEmitSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)_prepareISPProcessingSession;
- (unsigned int)_findBestTransformForPTS:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (BOOL)generatesDroppedSampleMarkerBuffers;
- (void)setPipelineTraceID:(int)a0;
- (void)_updateOutputRequirements;
- (id)irisStillImageMovieMetadataCache;
- (void)setOutputDimensions:(struct { int x0; int x1; })a0;
- (int)_stabilizeMetadataForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (void)_logAndEmitDropsForSampleBuffersStuckInISPProcessingSession;
- (int)outputColorSpaceProperties;
- (void)_reportIOSurfaceCompressionCoreAnalyticsData;
- (int)_tranformRectanglesInMetadata:(id)a0 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)_tallyAndEmitDroppedSample:(id)a0;
- (void)_handleIrisKeyFrameCachingForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (int)pipelineTraceID;
- (BOOL)flipHorizontalExcludingIris;
- (id)initWithSensorIDDict:(id)a0 stabilizationMethod:(int)a1 stabilizationType:(int)a2 ispProcessingSession:(id)a3 maxSupportedFrameRate:(float)a4 activeMaxFrameRate:(float)a5 motionAttachmentsSource:(int)a6 fillExtendedRowsOfOutputBuffer:(BOOL)a7 overCaptureEnabled:(BOOL)a8 videoStabilizationOverscanOverride:(float)a9 motionMetadataPreloadingEnabled:(BOOL)a10 visExecutionMode:(int)a11 livePhotoCleanOutputRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a12 cameraInfoByPortType:(id)a13 cvisExtendedLookAheadDuration:(float)a14;
- (void)_ensureSemaphoreIsBalanced;
- (void)setOutputColorSpaceProperties:(int)a0;
- (void)_flushBuffers;
- (void)setFlipHorizontalExcludingIris:(BOOL)a0;
- (struct __CVBuffer { } *)_newOutputPixelBuffer;
- (void)_addTransformToRingBuffer:(float *)a0 pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)setGeneratesDroppedSampleMarkerBuffers:(BOOL)a0;
- (int)_setupSampleBufferProcessor;

@end

@class CARSessionStatus, NSMutableDictionary, MNVoiceEvent, NSObject, VSSpeechSynthesizer, VSSpeechRequest, NSMutableArray, MNVoiceEventQueue, NSLocale, NSBundle, NSString, NSHashTable, MNNavigationAudioSession, NSTimer, AVAudioPlayer, NSCache;
@protocol OS_dispatch_queue, VSSpeechSynthesizerDelegate;

@interface MNVoiceController : NSObject <CARSessionObserving, VSSpeechSynthesizerDelegate, AVAudioPlayerDelegate, MNVoiceEventQueueDelegate> {
    NSMutableArray *_postAudioSessionActivationBlocks;
    float _currentVolume;
    long long _previousGender;
    AVAudioPlayer *_leftTurnAudioPlayer;
    AVAudioPlayer *_rightTurnAudioPlayer;
    BOOL _shouldBePlayingPrompt;
    NSObject<OS_dispatch_queue> *_audioQueue;
    BOOL _muteOverride;
    NSTimer *_eventProcessingTimer;
    NSTimer *_activationDebugTimer;
    long long _currentLanguageSource;
    NSString *_currentLanguage;
    NSLocale *_currentLocale;
    NSBundle *_spokenBundle;
    BOOL _isPersistentConnectionOpen;
    long long _audioSessionState;
    NSHashTable *_observers;
    double _lastSpeechStartTime;
    NSString *_lastSpeech;
    unsigned long long _charactersSpokenCount;
    double _charactersSpokenDuration;
}

@property (readonly, nonatomic) CARSessionStatus *carSessionStatus;
@property (weak, nonatomic) id<VSSpeechSynthesizerDelegate> delegate;
@property (readonly, nonatomic) VSSpeechSynthesizer *synthesizer;
@property (retain, nonatomic) VSSpeechRequest *speechRequest;
@property (retain, nonatomic) MNVoiceEvent *currentVoiceEvent;
@property (readonly, nonatomic) AVAudioPlayer *leftTurnAudioPlayer;
@property (readonly, nonatomic) AVAudioPlayer *rightTurnAudioPlayer;
@property (readonly, nonatomic) MNVoiceEventQueue *eventQueue;
@property (readonly) NSMutableDictionary *durationRequests;
@property (readonly) NSCache *speechDuration;
@property (readonly, nonatomic) NSString *currentVoiceLanguage;
@property (readonly, nonatomic) NSLocale *currentVoiceLocale;
@property (readonly, nonatomic) BOOL speechMuted;
@property (readonly, nonatomic) BOOL deviceMuted;
@property (retain) MNNavigationAudioSession *activeNavigationSession;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)localizedStringForKey:(id)a0;
+ (id)sharedInstance;
+ (id)defaultVoiceLanguageWithSource:(long long *)a0;

- (void)clearAllEvents;
- (void)setVolume:(double)a0;
- (id)init;
- (void)_activateAudioSession:(id /* block */)a0;
- (void).cxx_destruct;
- (void)removeObserver:(id)a0;
- (BOOL)_playBeepEvent:(id)a0;
- (void)_performWithActiveAudioSession:(id /* block */)a0;
- (void)dealloc;
- (void)speechSynthesizer:(id)a0 didFinishSynthesisRequest:(id)a1 withInstrumentMetrics:(id)a2 error:(id)a3;
- (void)stop;
- (void)_processNextEvent;
- (void)addObserver:(id)a0;
- (void)_eventProcessingTimerFired:(id)a0;
- (void)audioPlayerDidFinishPlaying:(id)a0 successfully:(BOOL)a1;
- (double)durationToSpeak:(id)a0;
- (void)_setAudioSessionActive:(BOOL)a0;
- (void)setAudioSessionProperties;
- (void)_updateCurrentVoiceLanguage;
- (BOOL)_stopCurrentEvent;
- (void)_deactivateAudioSession;
- (void)speechSynthesizer:(id)a0 didFinishSpeaking:(BOOL)a1 withError:(id)a2;
- (void)voiceEventQueue:(id)a0 wantsToImmediatelyPlayEvent:(id)a1;
- (id)requestForSpeech:(id)a0;
- (void)_mediaServicesWereReset:(id)a0;
- (void)_resetAudioPlayers;
- (void)_playEvent:(id)a0;
- (BOOL)_playTextEvent:(id)a0;
- (void)beepIfNecessaryForShortPromptType:(unsigned long long)a0 textToSpeak:(id)a1;
- (BOOL)isPlayingAudio;
- (void)_defaultsDidChange;
- (void)_handleFinishedSpeakingWithStatusCode:(int)a0;
- (double)_estimateDurationToSpeak:(id)a0;
- (id)_localizedStringForKey:(id)a0;
- (void)_audioInterruption:(id)a0;
- (void)speak:(id)a0 fallbackPrompt:(unsigned long long)a1 completionBlock:(id /* block */)a2;
- (void)_activationDebugTimerFired:(id)a0;
- (BOOL)isSpeaking;
- (void)_setMaintainInactivePersistentConnection:(BOOL)a0;
- (void)_setVolumeControlEnabled:(BOOL)a0;
- (void)submitVoiceAssetWithLanguage:(id)a0 andGender:(long long)a1;
- (void)endAnnounce;
- (void)cacheAnnouncement:(id)a0;
- (void)_failCurrentEventAndProcessNext;
- (void)prepareToAnnounce;
- (void)_handleFinishedPlayingBeepWithStatusCode:(int)a0;
- (void)_setGender;
- (void)warmUpTTS;

@end

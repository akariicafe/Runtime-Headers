@class CKSyncEngine, WFDatabase, NSMutableDictionary, NSString, CKRecordZoneID, VCCKApplicationStateObserver;

@interface VCCKShortcutSyncService : NSObject <CKSyncEngineDataSource, WFDatabaseObjectObserver>

@property (readonly, nonatomic) WFDatabase *database;
@property (readonly, nonatomic) CKSyncEngine *syncEngine;
@property (readonly, nonatomic) CKRecordZoneID *shortcutsZoneID;
@property (readonly, nonatomic) VCCKApplicationStateObserver *applicationObserver;
@property (readonly, nonatomic) NSMutableDictionary *workflowFilesForIdentifiers;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)syncEngine:(id)a0 didUpdateMetadata:(id)a1;
- (void)syncEngine:(id)a0 didSaveRecord:(id)a1;
- (void)syncEngine:(id)a0 didSaveRecordZone:(id)a1;
- (void)syncEngine:(id)a0 failedToSaveRecord:(id)a1 error:(id)a2;
- (void)syncEngine:(id)a0 didDeleteRecordWithID:(id)a1;
- (void)syncEngine:(id)a0 failedToDeleteRecordWithID:(id)a1 error:(id)a2;
- (void)syncEngine:(id)a0 didDeleteRecordZoneWithID:(id)a1;
- (void)syncEngine:(id)a0 failedToSaveRecordZone:(id)a1 error:(id)a2;
- (void)syncEngine:(id)a0 failedToDeleteRecordZoneWithID:(id)a1 error:(id)a2;
- (id)syncEngine:(id)a0 recordToSaveForRecordID:(id)a1;
- (void)syncEngine:(id)a0 didFetchRecord:(id)a1;
- (void)syncEngine:(id)a0 zoneWithIDChanged:(id)a1;
- (void)syncEngine:(id)a0 recordWithIDWasDeleted:(id)a1 recordType:(id)a2;
- (void)syncEngine:(id)a0 zoneWithIDWasDeleted:(id)a1;
- (void)syncEngine:(id)a0 zoneWithIDWasPurged:(id)a1;
- (void).cxx_destruct;
- (void)dealloc;
- (void)addRecordIDsToSave:(id)a0 recordIDsToDelete:(id)a1;
- (void)databaseDidChange:(id)a0 modified:(id)a1 inserted:(id)a2 removed:(id)a3;
- (void)stopObservingUserDefaults;
- (void)start;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)startObservingUserDefaults;
- (id)initWithContainer:(id)a0 database:(id)a1 applicationObserver:(id)a2;
- (void)fetchAndModifyChangesInShortcutsZone;
- (void)fetchChangesInShortcutsZone;
- (void)fetchChangesInShortcutsZoneWithCompletion:(id /* block */)a0;
- (void)modifyPendingChangesInShortcutsZoneWithCompletion:(id /* block */)a0;
- (void)fetchAndModifyChangesInShortcutsZoneWithCompletion:(id /* block */)a0;
- (void)createShortcutsZone;
- (id)workflowRecordForReference:(id)a0 properties:(id)a1;
- (void)sendChangedWorkflows;
- (void)sendChangedFolders;
- (void)sendWorkflowOrderingsIfNeeded;
- (void)sendSyncFlagsIfNeeded;
- (id)rootCollectionRecord;
- (id)workflowOrderingRecordForRecordID:(id)a0;
- (id)syncFlagsRecord;
- (id)workflowRecordForRecordID:(id)a0;
- (id)folderRecordForRecordID:(id)a0;
- (void)handleSavedWorkflowOrderingRecord:(id)a0;
- (void)handleSavedWorkflowRecord:(id)a0;
- (void)handleSavedFolderRecord:(id)a0;
- (void)handleSavedSyncFlagsRecord:(id)a0;
- (void)handleDeletedRecordWithID:(id)a0;
- (BOOL)mergeLocalOrderingChangesWithRemoteOrderingChangesFromOrderingRecord:(id)a0;
- (void)applyLegacyOrderedWorkflowIDsToRootCollection:(id)a0;
- (id)mergedOrderingFromLocalOrdering:(id)a0 previousOrdering:(id)a1 remoteOrdering:(id)a2;
- (id)calculateSubsetForRemoteOrdering:(id)a0 withLocalOrdering:(id)a1;
- (void)handleFetchedCollectionOrderingRecord:(id)a0;
- (void)handleFetchedLegacyOrderingRecord:(id)a0;
- (void)handleNameConflictsForFetchedWorkflowRecord:(id)a0 identifier:(id)a1 shouldMarkFetchedRecordAsTombstone:(BOOL *)a2;
- (void)handleFetchedWorkflowRecord:(id)a0;
- (void)handleFetchedFolderRecord:(id)a0;
- (void)handleFetchedSyncFlagsRecord:(id)a0;
- (void)handleFetchedDeletionOfRecordWithID:(id)a0;
- (void)updateSyncTokenInDatabaseWithBlock:(id /* block */)a0;
- (void)handleSendWorkflowOrderingConflictWithClientRecord:(id)a0 serverRecord:(id)a1 ancestorRecord:(id)a2;
- (void)handleSendSyncFlagsConflictWithClientRecord:(id)a0 serverRecord:(id)a1 ancestorRecord:(id)a2;
- (void)handleSendWorkflowConflictWithClientRecord:(id)a0 serverRecord:(id)a1 ancestorRecord:(id)a2;
- (void)handleSendFolderConflictWithClientRecord:(id)a0 serverRecord:(id)a1 ancestorRecord:(id)a2;
- (void)handleServerRecordChangedError:(id)a0;
- (void)handleUnknownItemErrorForRecord:(id)a0;
- (void)syncEngine:(id)a0 didReceiveDatabaseNotification:(id)a1;

@end

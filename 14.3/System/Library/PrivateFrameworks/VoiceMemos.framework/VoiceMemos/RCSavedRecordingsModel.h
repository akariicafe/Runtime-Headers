@class RCPersistentContainer, NSEntityDescription, NSCloudKitMirroringRequestOptions, NSPersistentContainer, RCFoldersFetchedResultsController, NSManagedObjectContext, RCDatabaseMetadata, NSSet, NSString, NSArray, NSData, RCSavedRecordingsController, NSPersistentStore;
@protocol RCFolder;

@interface RCSavedRecordingsModel : NSObject <NSFetchedResultsControllerDelegate> {
    RCPersistentContainer *_container;
    RCDatabaseMetadata *_metadata;
    NSPersistentStore *_cloudStore;
    NSManagedObjectContext *_context;
    NSEntityDescription *_cloudRecordingEntity;
    NSEntityDescription *_folderEntity;
    NSCloudKitMirroringRequestOptions *_mirroringRequestOptions;
    RCFoldersFetchedResultsController *_foldersController;
}

@property (class, readonly) RCSavedRecordingsModel *sharedModelForMainQueue;

@property BOOL valid;
@property (nonatomic) long long isSavingDisabledCount;
@property (nonatomic) BOOL disableSaveNotifications;
@property (readonly, nonatomic) NSArray *allRecordings;
@property (readonly, nonatomic) NSSet *audioProperties;
@property (readonly, nonatomic) RCSavedRecordingsController *recordingsController;
@property (readonly, nonatomic) RCSavedRecordingsController *availableRecordingsController;
@property (readonly, nonatomic) RCSavedRecordingsController *favoriteRecordingsController;
@property (readonly, nonatomic) RCSavedRecordingsController *watchOSRecordingsController;
@property (readonly, nonatomic) RCSavedRecordingsController *musicMemosRecordingsController;
@property (readonly, nonatomic) RCFoldersFetchedResultsController *foldersController;
@property (readonly, nonatomic) NSData *currentChangeToken;
@property (readonly, nonatomic) NSPersistentContainer *container;
@property (readonly, nonatomic) id<RCFolder> voiceMemosRecordingsFolder;
@property (readonly, nonatomic) id<RCFolder> capturedOnWatchRecordingsFolder;
@property (readonly, nonatomic) id<RCFolder> favoriteRecordingsFolder;
@property (readonly, nonatomic) id<RCFolder> recentlyDeletedRecordingsFolder;
@property (readonly, nonatomic) NSArray *deletedRecordings;
@property (readonly, nonatomic) RCSavedRecordingsController *deletedRecordingsController;
@property (readonly, nonatomic) unsigned long long count;
@property (readonly, nonatomic) NSArray *recordings;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_copyFileIntoRecordingsDirectory:(id)a0;
+ (id)currentLocationBasedName;
+ (void)importRecordingWithSourceAudioURL:(id)a0 name:(id)a1 date:(id)a2 completionHandler:(id /* block */)a3;
+ (void)_determineImportabilityOfRecordingWithAudioFile:(id)a0 preferredFormat:(unsigned int)a1 completionHandler:(id /* block */)a2;
+ (void)_importRecordingWithSourceAudioURL:(id)a0 name:(id)a1 date:(id)a2 uniqueID:(id)a3 preferredFormat:(unsigned int)a4 completionHandler:(id /* block */)a5;
+ (void)importRecordingWithSourceAudioURL:(id)a0 name:(id)a1 date:(id)a2 userInfo:(id)a3 completionHandler:(id /* block */)a4;
+ (void)_importImportableRecordingWithAudioAsset:(id)a0 name:(id)a1 date:(id)a2 uniqueID:(id)a3 presetName:(id)a4 outputFileType:(id)a5 completionHandler:(id /* block */)a6;
+ (void)_insertRecordingWithImportableAudioURL:(id)a0 name:(id)a1 date:(id)a2 uniqueID:(id)a3 completionHandler:(id /* block */)a4;
+ (id)sharedModelForQueue:(id)a0;
+ (id)newSyncModel;
+ (id)standardURLForRecordingWithCreationDate:(id)a0;
+ (id)startStoreServers:(id /* block */)a0;
+ (BOOL)migrateDatabaseIfNecessary;
+ (id)cloudMirroringModel;
+ (id)newPrivateModel;
+ (id)standardPathForRecording:(id)a0;
+ (id)creationDateFromStandardRecordingURL:(id)a0;
+ (void)determineImportabilityOfRecordingWithAudioURL:(id)a0 completionHandler:(id /* block */)a1;
+ (void)importRecordingWithSourceAudioURL:(id)a0 name:(id)a1 date:(id)a2 xpcConnection:(id)a3 userInfo:(id)a4 completionHandler:(id /* block */)a5;
+ (id)_moveFileIntoRecordingsDirectory:(id)a0;
+ (id)standardPathForRecordingWithCreationDate:(id)a0 uniqueID:(id)a1;
+ (id)_dateFormatterComponentFormatting;
+ (id)standardNameForRecordingWithCreationDate:(id)a0 uniqueID:(id)a1;
+ (id)savedRecordingsDirectory;

- (id)cloudStore;
- (id)context;
- (id)init;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)dealloc;
- (id)enumerateChangeHistorySinceToken:(id)a0 usingBlock:(id /* block */)a1;
- (void)_enumerateFetchedRecordingTitles:(id /* block */)a0;
- (id)_transactionHistorySinceToken:(id)a0;
- (id)currentPersistentHistoryToken;
- (id)insertRecordingWithAudioFile:(id)a0 duration:(double)a1 date:(id)a2 customTitleBase:(id)a3 uniqueID:(id)a4;
- (void)saveIfNecessary;
- (id)nextRecordingDefaultLabelWithCustomTitleBase:(id)a0;
- (id)valueForDatabaseProperty:(id)a0;
- (id)_folderWithType:(long long)a0;
- (id)_foldersWithNameFetchRequest:(id)a0;
- (BOOL)resetCloud:(id /* block */)a0;
- (id)_foldersWithUUIDFetchRequest:(id)a0;
- (id)_userDefinedFolder:(id)a0;
- (id)_folderWithUUID:(id)a0;
- (BOOL)saveIfNecessary:(id *)a0;
- (void)addRecordings:(id)a0 toFolder:(id)a1;
- (void)deleteRecordings:(id)a0;
- (void)eraseRecordings:(id)a0;
- (void)restoreDeletedRecordings:(id)a0;
- (void)performWithSavingDisabled:(id /* block */)a0;
- (void)eraseRecording:(id)a0;
- (id)_labelPresetsForQuery:(id)a0;
- (BOOL)__saveManagedObjectContext:(id *)a0;
- (void)_synchronizeRecordingsMetadata;
- (void)_deliverSaveNotifications;
- (BOOL)setValue:(id)a0 forDatabaseProperty:(id)a1 save:(BOOL)a2;
- (void)enumerateExistingRecordingsWithBlock:(id /* block */)a0;
- (id)recordingWithUniqueID:(id)a0;
- (void)deleteRecording:(id)a0;
- (id)mirroringOptions;
- (void)_deleteRecordingsWithDurationLessThan:(double)a0 passingTest:(id /* block */)a1;
- (id)insertRecordingWithAudioFile:(id)a0 duration:(double)a1 date:(id)a2 customLabelBase:(id)a3;
- (id)cloudRecordingEntity;
- (id)mirroringRequestOptions;
- (id)recordingAtIndex:(unsigned long long)a0;
- (id)indexPathForRecording:(id)a0;
- (id)recordingWithURIRepresentation:(id)a0;
- (id)recordingWithITunesPersistentID:(long long)a0;
- (id)recordingWithPath:(id)a0;
- (id)mostRecentRecording;
- (id)recordingsWithUniqueID:(id)a0;
- (id)recordingsWithUniqueIDs:(id)a0;
- (id)recordingsWithPredicate:(id)a0;
- (id)transactionForToken:(id)a0;
- (id)recordingsControllerWithFolderName:(id)a0;
- (void)enumerateExistingRecordingsWithProperties:(id)a0 sortDescriptors:(id)a1 block:(id /* block */)a2;
- (id)enumerateExistingRecordingsSinceChangeToken:(id)a0 withBlock:(id /* block */)a1;
- (void)setTitle:(id)a0 ofRecording:(id)a1;
- (void)setFavorite:(BOOL)a0 ofRecording:(id)a1;
- (void)setEnhanced:(BOOL)a0 ofRecording:(id)a1;
- (id)existingFolderWithName:(id)a0;
- (id)existingFolderWithUUID:(id)a0;
- (void)moveFolder:(id)a0 toIndexPath:(id)a1;
- (void)deleteFolder:(id)a0;
- (void)renameFolder:(id)a0 toName:(id)a1;
- (void)addRecording:(id)a0 toFolder:(id)a1;
- (void)removeRecording:(id)a0 fromFolder:(id)a1;
- (void)deletePlayableRecordingsInFolder:(id)a0;
- (void)erasePlayableRecordingsInFolder:(id)a0;
- (void)restoreDeletedRecording:(id)a0;
- (void)eraseRecordingsDeletedBeforeDate:(id)a0;
- (void)eraseAllDeleted;
- (id)duplicateRecording:(id)a0 error:(id *)a1;
- (void)mergeRecordings:(id)a0 allTransactions:(id)a1;
- (void)reconcileChangedFolder:(id)a0;
- (BOOL)hasExistingRecordingForAudioFile:(id)a0;
- (BOOL)exportToCloud:(id /* block */)a0;
- (id)recordingsForSpotlightSearch:(id)a0;
- (void)finishSaveByUpdatingSearchableIndexWithChangeContext:(id)a0;
- (void)performBlockAndWaitInTemporaryContext:(id /* block */)a0;
- (BOOL)importFromCloud:(id /* block */)a0;
- (BOOL)fetchObjectsFromCloud:(id)a0 entityToAttributesToFetch:(id)a1 completionHandler:(id /* block */)a2;
- (BOOL)fetchExportProgress:(id)a0 completionHandler:(id /* block */)a1;
- (id)nextRecordingDefaultLabelWithCustomLabelBase:(id)a0;
- (id)insertRecordingWithAudioFile:(id)a0 duration:(double)a1 date:(id)a2;
- (void)performBlockAndWait:(id /* block */)a0;
- (id)metadataValueForKey:(id)a0;
- (id)_initWithContainer:(id)a0 concurrencyType:(unsigned long long)a1;
- (void)_scheduleAutomaticRecordingDeletions;
- (id)recordingWithID:(id)a0;
- (BOOL)setValue:(id)a0 forDatabaseProperty:(id)a1;
- (void)controllerDidChangeContent:(id)a0;
- (BOOL)deleteDatabaseProperty:(id)a0;
- (id)_recordingsWithUniqueID:(id)a0 templateName:(id)a1;
- (id)_recordingsWithUniqueIDs:(id)a0 templateName:(id)a1;
- (id)_recordingsControllerWithPredicate:(id)a0;
- (id)folderWithName:(id)a0;
- (id)recordingsControllerWithFolder:(id)a0;
- (void)_enumerateRecordingsWithEntityDescription:(id)a0 propertiesToFetch:(id)a1 sortDescriptors:(id)a2 withBlock:(id /* block */)a3;
- (id)_allTitles;
- (id)folderEntity;
- (void)setMetadataValue:(id)a0 forKey:(id)a1;

@end

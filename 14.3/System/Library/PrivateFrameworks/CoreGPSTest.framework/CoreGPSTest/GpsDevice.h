@interface GpsDevice : NSObject

@property struct GpsFactoryTest { struct Options { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; unsigned int x2; unsigned int x3; unsigned long long x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; int x15; int x16; int x17; int x18; unsigned char x19; union Subband { int x0; int x1; } x20; int x21; int x22; int x23; int x24; int x25; int x26; int x27; BOOL x28; int x29; } x0; struct BasicTimer { struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x0; } x0; } x0; struct condition_variable { struct _opaque_pthread_cond_t { long long x0; char x1[40]; } x0; } x1; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x2; BOOL x3; } x1; struct GpsdPlatformInfo *x2; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x3; struct atomic<GpsFactoryTest::GnssDeviceState> { struct __cxx_atomic_impl<GpsFactoryTest::GnssDeviceState, std::__1::__cxx_atomic_base_impl<GpsFactoryTest::GnssDeviceState> > { _Atomic int x0; } x0; } x4; struct atomic<gnss::Result> { struct __cxx_atomic_impl<gnss::Result, std::__1::__cxx_atomic_base_impl<gnss::Result> > { _Atomic int x0; } x0; } x5; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool> > { _Atomic BOOL x0; } x0; } x6; struct condition_variable { struct _opaque_pthread_cond_t { long long x0; char x1[40]; } x0; } x7; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x8; void *x9; struct unique_ptr<gnssTest::Device, std::__1::default_delete<gnssTest::Device> > { struct __compressed_pair<gnssTest::Device *, std::__1::default_delete<gnssTest::Device> > { struct Device *x0; } x0; } x10; struct unique_ptr<VendorLogger, std::__1::default_delete<VendorLogger> > { struct __compressed_pair<VendorLogger *, std::__1::default_delete<VendorLogger> > { struct VendorLogger *x0; } x0; } x11; struct array<char, 256> { char x0[256]; } x12; } *fTestDevice;
@property struct Options { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } uartPortName; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } gnssDeviceLibraryName; unsigned int logLevel; unsigned int secondaryLogLevel; unsigned long long logMask; BOOL clearNvStore; BOOL printNmeaMessage; BOOL enableB13LteFilter; BOOL hostPassThroughMode; BOOL doCw; BOOL doModulated; BOOL doPowerMode; BOOL doHostWakeGpio; BOOL doTimeMarkGpio; BOOL doCommPing; int periodicDurationSec; int cwDurationSec; int cwBandwidthHz; int integrationTimeMilliseconds; unsigned char band; union Subband { int prn; int fcn; } subband; int modulatedDurationSec; int powerMode; int hostWakeGpioTimeoutMs; int timeMarkGpioTimeoutMs; int commPingTimeoutMs; int commLoopbackNumBytes; int uartBaudRate; BOOL dataSnifferEnabled; int forceHardwareType; } fTestOptions;

- (id)init:(id *)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (void)flushLogs;
- (BOOL)getGpsConfiguration:(struct { unsigned int x0; unsigned int x1; int x2; } *)a0 error:(id *)a1;
- (BOOL)testTimeMarkGpio:(id *)a0;
- (BOOL)testApSignalGpio:(id *)a0;
- (BOOL)testCommPing:(id)a0 error:(id *)a1;
- (BOOL)testGpsCw:(id)a0 error:(id *)a1;
- (BOOL)testGpsModulated:(id)a0 gpsPrn:(int)a1 error:(id *)a2;
- (BOOL)testPeriodic:(id)a0 error:(id *)a1;
- (BOOL)testPowerMode:(unsigned char)a0 error:(id *)a1;
- (BOOL)testExternalFreqAssistance:(id *)a0;

@end

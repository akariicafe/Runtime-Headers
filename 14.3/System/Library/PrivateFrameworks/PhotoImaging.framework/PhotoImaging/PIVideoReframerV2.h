@interface PIVideoReframerV2 : PIVideoReframer {
    struct Session { void /* function */ **x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; id /* block */ x3; struct unordered_map<long, std::__1::shared_ptr<VRFTrack>, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::shared_ptr<VRFTrack> > > > { struct __hash_table<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, std::__1::hash<long>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::shared_ptr<VRFTrack> >, std::__1::equal_to<long>, true> > { float x0; } x3; } x0; } x4; struct CatmullRom<double __attribute__((ext_vector_type(2)))> { struct map<double, double __attribute__((ext_vector_type(2))), std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, double __attribute__((ext_vector_type(2)))> > > { struct __tree<std::__1::__value_type<double, double __attribute__((ext_vector_type(2)))>, std::__1::__map_value_compare<double, std::__1::__value_type<double, double __attribute__((ext_vector_type(2)))>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, double __attribute__((ext_vector_type(2)))> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<double, double __attribute__((ext_vector_type(2)))>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<double, std::__1::__value_type<double, double __attribute__((ext_vector_type(2)))>, std::__1::less<double>, true> > { unsigned long long x0; } x2; } x0; } x0; } x5; } *v2Session;
}

- (long long)revision;
- (id)initWithEncodedPixelSize:(struct { long long x0; long long x1; })a0 orientation:(long long)a1 clapRect:(struct { struct { long long x0; long long x1; } x0; struct { long long x0; long long x1; } x1; })a2 viewRect:(struct { struct { long long x0; long long x1; } x0; struct { long long x0; long long x1; } x1; })a3 config:(const union { struct { double x0; double x1; } x0; struct { struct { int x0; int x1; } x0; struct { int x0; int x1; } x1; } x1; } *)a4;
- (id)debugSubjectsAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (struct CGVector { double x0; double x1; })debugCameraMotionAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })debugRawReframedViewRectAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (struct CGPoint { double x0; double x1; })debugCenterOfInterestAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;

@end

@class NSMutableArray, NSMutableDictionary;
@protocol PKPhysicsContactDelegate;

@interface PKPhysicsWorld : NSObject <NSSecureCoding> {
    struct b2World { struct b2StackAllocator { char x0[102400]; int x1; int x2; int x3; struct b2StackEntry { char *x0; int x1; BOOL x2; } x4[32]; int x5; } x0; int x1; struct b2ContactManager { struct b2ContactListener *x0; int x1; struct b2DynamicTree { int x0; struct b2TreeNode *x1; int x2; int x3; int x4; unsigned int x5; int x6; } x2; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node_base<std::__1::__hash_node<int, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<int> > { float x0; } x3; } x0; } x3; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } x4; struct unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct __hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > > { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<b2Contact *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<b2Contact *> > { float x0; } x3; } x0; } x5; int x6; } x2; struct b2Body *x3; struct b2Joint *x4; int x5; int x6; struct PKCAether *x7; BOOL x8; struct b2DestructionListener *x9; struct b2Draw *x10; float x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; double x16; float x17; struct PKCMechanics { struct b2World *x0; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree **x0; struct QuadTree **x1; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree **x0; } x2; } x1; } x18; } *_world;
    struct b2Vec2 { float x; float y; } _gravity;
    BOOL _doSleep;
    double _accumulatedDt;
    struct PKContactListener { void /* function */ **_vptr$b2ContactListener; NSMutableDictionary *_contacts; id<PKPhysicsContactDelegate> _contactDelegate; } _contactListener;
    float _speed;
    NSMutableArray *_bodies;
    NSMutableArray *_joints;
    NSMutableArray *_postStepBlocks;
    struct PKDebugDrawPacket { struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct *__begin_; struct *__end_; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct *__value_; } __end_cap_; } _linePoints; struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { struct *__begin_; struct *__end_; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { struct *__value_; } __end_cap_; } _colors; } drawPacket;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (nonatomic) BOOL _doSleep;
@property (retain, nonatomic) NSMutableArray *_bodies;
@property (readonly, nonatomic) struct PKCAether { struct vector<std::__1::weak_ptr<PKCField>, std::__1::allocator<std::__1::weak_ptr<PKCField> > > { struct weak_ptr<PKCField> *x0; struct weak_ptr<PKCField> *x1; struct __compressed_pair<std::__1::weak_ptr<PKCField> *, std::__1::allocator<std::__1::weak_ptr<PKCField> > > { struct weak_ptr<PKCField> *x0; } x2; } x0; } *aether;
@property (readonly, nonatomic) struct b2World { struct b2StackAllocator { char x0[102400]; int x1; int x2; int x3; struct b2StackEntry { char *x0; int x1; BOOL x2; } x4[32]; int x5; } x0; int x1; struct b2ContactManager { struct b2ContactListener *x0; int x1; struct b2DynamicTree { int x0; struct b2TreeNode *x1; int x2; int x3; int x4; unsigned int x5; int x6; } x2; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node_base<std::__1::__hash_node<int, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<int> > { float x0; } x3; } x0; } x3; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x0; } x3; } x0; } x4; struct unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct __hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > > { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<b2Contact *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<b2Contact *> > { float x0; } x3; } x0; } x5; int x6; } x2; struct b2Body *x3; struct b2Joint *x4; int x5; int x6; struct PKCAether *x7; BOOL x8; struct b2DestructionListener *x9; struct b2Draw *x10; float x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; double x16; float x17; struct PKCMechanics { struct b2World *x0; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree **x0; struct QuadTree **x1; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree **x0; } x2; } x1; } x18; } *_world;
@property (nonatomic) struct b2Vec2 { float x0; float x1; } _gravity;
@property (nonatomic) struct CGVector { double x0; double x1; } gravity;
@property (nonatomic) double speed;
@property (nonatomic) double velocityThreshold;
@property (nonatomic) id<PKPhysicsContactDelegate> contactDelegate;

+ (id)world;

- (void)debugDraw:(float)a0 matrix:(union _GLSKMatrix4 { struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } x0; float x1[16]; })a1 showsPhysics:(BOOL)a2 showsOutlineInterior:(BOOL)a3 showsFields:(BOOL)a4;
- (id)init;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)removeJoint:(id)a0;
- (void)addBody:(id)a0;
- (void)dealloc;
- (id)collisionDelegate;
- (void)setCollisionDelegate:(id)a0;
- (void)enumerateBodiesInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 usingBlock:(id /* block */)a1;
- (id)joints;
- (void)addField:(id)a0;
- (BOOL)stepWithTime:(double)a0 velocityIterations:(unsigned long long)a1 positionIterations:(unsigned long long)a2;
- (id)copy;
- (void)addJoint:(id)a0;
- (id)initWithCoder:(id)a0;
- (const struct PKDebugDrawPacket { struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct *x0; struct *x1; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct *x0; } x2; } x0; struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { struct *x0; struct *x1; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { struct *x0; } x2; } x1; } *)debugDrawPacket;
- (id)bodies;
- (void)_runBlockOutsideOfTimeStep:(id /* block */)a0;
- (id).cxx_construct;
- (void)removeBody:(id)a0;
- (void)removeField:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (void)removeAllJoints;
- (void)removeAllBodies;
- (BOOL)hasBodies;
- (BOOL)hasFields;
- (void)enumerateBodiesAtPoint:(struct CGPoint { double x0; double x1; })a0 usingBlock:(id /* block */)a1;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint { double x0; double x1; })a0 end:(struct CGPoint { double x0; double x1; })a1 usingBlock:(id /* block */)a2;
- (id)bodyAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)bodyInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)bodyAlongRayStart:(struct CGPoint { double x0; double x1; })a0 end:(struct CGPoint { double x0; double x1; })a1;
- (struct CGVector { double x0; double x1; })sampleFields:(struct CGPoint { double x0; double x1; })a0;
- (void /* unknown type, empty encoding */)sampleFieldsAt:(SEL)a0;
- (void)__init__;
- (void)removeAllFields;
- (id)sampleFields:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 categories:(unsigned int)a1 dataSize:(struct CGSize { double x0; double x1; })a2;
- (struct CGVector { double x0; double x1; })evalForce:(unsigned int)a0 point:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)isEqualToWorld:(id)a0;

@end

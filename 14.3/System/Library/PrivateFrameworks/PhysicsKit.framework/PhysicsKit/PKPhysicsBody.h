@class NSArray, PKPhysicsWorld, NSMutableArray;
@protocol NSObject;

@interface PKPhysicsBody : NSObject <NSCopying, NSSecureCoding> {
    id<NSObject> _representedObject;
    struct b2BodyDef { BOOL _sk_affectedByGravity; unsigned int _sk_fieldCategoryBitMask; unsigned int _sk_categoryBitMask; unsigned int _sk_collisionBitMask; unsigned int _sk_intersectionCallbackBitMask; int type; struct b2Vec2 { float x; float y; } position; float angle; struct b2Vec2 { float x; float y; } linearVelocity; float angularVelocity; float charge; float linearDamping; float angularDamping; BOOL allowSleep; BOOL awake; BOOL fixedRotation; BOOL bullet; BOOL active; void *userData; } _bodyDef;
    struct b2Body { BOOL x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; int x5; unsigned short x6; int x7; struct b2Transform { struct b2Vec2 { float x0; float x1; } x0; struct b2Rot { float x0; float x1; } x1; } x8; struct b2Transform { struct b2Vec2 { float x0; float x1; } x0; struct b2Rot { float x0; float x1; } x1; } x9; struct b2Sweep { struct b2Vec2 { float x0; float x1; } x0; union b2Position { struct { struct b2Vec2 { float x0; float x1; } x0; float x1; float x2; } x0; } x1; union b2Position { struct { struct b2Vec2 { float x0; float x1; } x0; float x1; float x2; } x0; } x2; float x3; } x10; struct b2Vec2 { float x0; float x1; } x11; float x12; struct b2Vec2 { float x0; float x1; } x13; float x14; struct b2World *x15; struct b2Body *x16; struct b2Body *x17; struct b2Fixture *x18; int x19; struct b2JointEdge *x20; struct b2ContactEdge *x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; void *x30; } *_body;
    struct PKCField { } *_field;
    int _dynamicType;
    struct vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *> > { struct PKPhysicsShape **__begin_; struct PKPhysicsShape **__end_; struct __compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *> > { struct PKPhysicsShape **__value_; } __end_cap_; } _shapes;
    PKPhysicsWorld *_world;
    NSMutableArray *_joints;
    BOOL _inUse;
    int _shapeType;
    struct shared_ptr<PKPath> { struct PKPath *__ptr_; struct __shared_weak_count *__cntrl_; } _pathPtr;
    struct shared_ptr<QuadTree> { struct QuadTree *__ptr_; struct __shared_weak_count *__cntrl_; } _quadTree;
    struct CGPoint { double x; double y; } _p0;
    struct CGPoint { double x; double y; } _p1;
    struct CGSize { double width; double height; } _size;
    double _radius;
    double _edgeRadius;
    struct CGImage { } *_mask;
    struct shared_ptr<PKPath> { struct PKPath *__ptr_; struct __shared_weak_count *__cntrl_; } _outline;
    BOOL _isPinned;
    BOOL _allowsRotation;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, nonatomic) struct vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *> > { struct PKPhysicsShape **x0; struct PKPhysicsShape **x1; struct __compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *> > { struct PKPhysicsShape **x0; } x2; } *_shapes;
@property (nonatomic) struct b2BodyDef { BOOL x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; int x5; struct b2Vec2 { float x0; float x1; } x6; float x7; struct b2Vec2 { float x0; float x1; } x8; float x9; float x10; float x11; float x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; void *x18; } _bodyDef;
@property (nonatomic) struct b2Body { BOOL x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; int x5; unsigned short x6; int x7; struct b2Transform { struct b2Vec2 { float x0; float x1; } x0; struct b2Rot { float x0; float x1; } x1; } x8; struct b2Transform { struct b2Vec2 { float x0; float x1; } x0; struct b2Rot { float x0; float x1; } x1; } x9; struct b2Sweep { struct b2Vec2 { float x0; float x1; } x0; union b2Position { struct { struct b2Vec2 { float x0; float x1; } x0; float x1; float x2; } x0; } x1; union b2Position { struct { struct b2Vec2 { float x0; float x1; } x0; float x1; float x2; } x0; } x2; float x3; } x10; struct b2Vec2 { float x0; float x1; } x11; float x12; struct b2Vec2 { float x0; float x1; } x13; float x14; struct b2World *x15; struct b2Body *x16; struct b2Body *x17; struct b2Fixture *x18; int x19; struct b2JointEdge *x20; struct b2ContactEdge *x21; float x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; void *x30; } *_body;
@property (nonatomic) struct CGPoint { double x0; double x1; } position;
@property (nonatomic) double rotation;
@property (nonatomic, getter=isDynamic) BOOL dynamic;
@property (nonatomic) BOOL usesPreciseCollisionDetection;
@property (nonatomic) BOOL allowsRotation;
@property (nonatomic) BOOL pinned;
@property (nonatomic) struct shared_ptr<PKPath> { struct PKPath *x0; struct __shared_weak_count *x1; } outline;
@property (readonly, nonatomic) struct PKPath { float x0; struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct *x0; struct *x1; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct *x0; } x2; } x1; struct CGPath *x2; } *volume;
@property (nonatomic, getter=isResting) BOOL resting;
@property (nonatomic) double friction;
@property (nonatomic) double charge;
@property (nonatomic) double restitution;
@property (nonatomic) double linearDamping;
@property (nonatomic) double angularDamping;
@property (nonatomic) double density;
@property (nonatomic) double mass;
@property (readonly, nonatomic) double area;
@property (nonatomic) double radius;
@property (nonatomic) BOOL affectedByGravity;
@property (nonatomic) unsigned int fieldBitMask;
@property (nonatomic) unsigned int categoryBitMask;
@property (nonatomic) unsigned int collisionBitMask;
@property (nonatomic) unsigned int contactTestBitMask;
@property (readonly, nonatomic) NSArray *joints;
@property (weak, nonatomic) id<NSObject> representedObject;
@property (copy, nonatomic) id /* block */ postStepBlock;
@property (nonatomic) struct CGVector { double x0; double x1; } velocity;
@property (nonatomic) double angularVelocity;

+ (id)bodyWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0 center:(struct CGPoint { double x0; double x1; })a1;
+ (id)bodyWithEdgeFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
+ (id)bodyWithPolygonFromPath:(struct CGPath { } *)a0;
+ (id)bodyWithEdgeChainFromPath:(struct CGPath { } *)a0;
+ (id)bodyWithEdgeLoopFromPath:(struct CGPath { } *)a0;
+ (id)bodyWithBodies:(id)a0;
+ (id)bodyWithCircleOfRadius:(double)a0;
+ (id)bodyWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0;
+ (id)bodyWithCircleOfRadius:(double)a0 center:(struct CGPoint { double x0; double x1; })a1;
+ (id)bodyWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0 edgeRadius:(double)a1;
+ (id)bodyWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0 center:(struct CGPoint { double x0; double x1; })a1 edgeRadius:(double)a2;
+ (id)bodyWithOutline:(struct shared_ptr<PKPath> { struct PKPath *x0; struct __shared_weak_count *x1; })a0 offset:(struct CGPoint { double x0; double x1; })a1;
+ (id)initWithQuadTree:(id)a0;
+ (id)initWithMarchingCubes:(struct PKCGrid { int x0; int x1; int x2; struct Range { float x0; float x1; float x2; float x3; float x4; float x5; } x3; struct vector<unsigned char, std::__1::allocator<unsigned char> > { char *x0; char *x1; struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { char *x0; } x2; } x4; struct vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> > { struct __compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> > { void *x0; } **x0; } x5; struct vector<int, std::__1::allocator<int> > { int *x0; int *x1; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x0; } x2; } x6; struct vector<signed char, std::__1::allocator<signed char> > { char *x0; char *x1; struct __compressed_pair<signed char *, std::__1::allocator<signed char> > { char *x0; } x2; } x7; } *)a0 pixelFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;

- (BOOL)active;
- (id)_world;
- (id)_joints;
- (id)init;
- (void)setActive:(BOOL)a0;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (BOOL)_inUse;
- (void)dealloc;
- (void)applyImpulse:(struct CGVector { double x0; double x1; })a0;
- (id)copy;
- (id)initWithCoder:(id)a0;
- (void)applyUnscaledImpulse:(struct CGVector { double x0; double x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)applyUnscaledForce:(struct CGVector { double x0; double x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)applyUnscaledImpulse:(struct CGVector { double x0; double x1; })a0;
- (id)description;
- (void)applyUnscaledForce:(struct CGVector { double x0; double x1; })a0;
- (id).cxx_construct;
- (id)initWithBodies:(id)a0;
- (void)set_allowSleep:(BOOL)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithPolygonFromPath:(struct CGPath { } *)a0;
- (id)initWithCircleOfRadius:(double)a0;
- (id)initWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0;
- (id)initWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0 center:(struct CGPoint { double x0; double x1; })a1;
- (id)initWithEdgeFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)initWithEdgeChainFromPath:(struct CGPath { } *)a0;
- (id)initWithEdgeLoopFromPath:(struct CGPath { } *)a0;
- (void)applyForce:(struct CGPoint { double x0; double x1; })a0;
- (id)_descriptionClassName;
- (void)reapplyScale:(double)a0 yScale:(double)a1;
- (void)applyForce:(struct CGPoint { double x0; double x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)applyTorque:(double)a0;
- (void)applyImpulse:(struct CGVector { double x0; double x1; })a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)applyAngularImpulse:(double)a0;
- (id)allContactedBodies;
- (id)initWithCircleOfRadius:(double)a0 center:(struct CGPoint { double x0; double x1; })a1;
- (id)initWithRectangleOfSize:(struct CGSize { double x0; double x1; })a0 center:(struct CGPoint { double x0; double x1; })a1 edgeRadius:(float)a2;
- (id)_descriptionFormat;
- (void)clearBox2DData;
- (BOOL)isEqualToBody:(id)a0;
- (BOOL)_allowSleep;
- (struct shared_ptr<QuadTree> { struct QuadTree *x0; struct __shared_weak_count *x1; })_quadTree;
- (void)set_world:(id)a0;
- (void)set_joints:(id)a0;
- (void)set_inUse:(BOOL)a0;

@end

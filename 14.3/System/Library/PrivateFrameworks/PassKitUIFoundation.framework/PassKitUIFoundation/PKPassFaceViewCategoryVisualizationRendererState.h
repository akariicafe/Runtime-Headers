@interface PKPassFaceViewCategoryVisualizationRendererState : PKPassFaceViewRendererState

@property (readonly, nonatomic) struct { double startTime; unsigned long long bucketCount; double *magnitudeForBucket; void *colorForBucket; struct { struct { void /* unknown type, empty encoding */ columns[4]; } projectionMatrix; struct { void /* unknown type, empty encoding */ columns[4]; } motionMatrix; void /* unknown type, empty encoding */ data; } uniforms; struct { void /* unknown type, empty encoding */ position; void /* unknown type, empty encoding */ velocity; float radius; float scale; float scaleTarget; float created; void /* unknown type, empty encoding */ color; struct { void /* unknown type, empty encoding */ columns[4]; } matrix; } singleCircle; unsigned long long circleCount; struct { void /* unknown type, empty encoding */ position; void /* unknown type, empty encoding */ velocity; float radius; float scale; float scaleTarget; float created; void /* unknown type, empty encoding */ color; struct { void /* unknown type, empty encoding */ columns[4]; } matrix; } circles[88]; unsigned long long categoryCount; void /* unknown type, empty encoding */ gravity; unsigned int framesToRender; BOOL isAnimating; } state;

- (void)dealloc;
- (id)initWithCurrentRendererState:(struct { double x0; unsigned long long x1; double *x2; struct { struct { void /* unknown type, empty encoding */ x0[4]; } x0; struct { void /* unknown type, empty encoding */ x0[4]; } x1; } *x3; struct { float x0; float x1; float x2; float x3; struct { void /* unknown type, empty encoding */ x0[4]; } x4; } x4; unsigned long long x5; struct { float x0; float x1; float x2; float x3; struct { void /* unknown type, empty encoding */ x0[4]; } x4; } x6[88]; unsigned long long x7; unsigned int x8; BOOL x9; })a0;

@end

@class MTLFunctionConstantValues;
@protocol MTLLibrary, MTLFunction, MTLDepthStencilState;

@interface MTLDebugDevice : MTLToolsDevice {
    struct MTLSamplerDescriptorHashMap { struct unordered_map<std::__1::array<unsigned long long, 3>, unsigned int, MTLSamplerDescriptorHashMap::hash_t, MTLSamplerDescriptorHashMap::equal_t, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned long long, 3>, unsigned int> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, std::__1::__unordered_map_hasher<std::__1::array<unsigned long long, 3>, std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::hash_t, true>, std::__1::__unordered_map_equal<std::__1::array<unsigned long long, 3>, std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::equal_t, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::array<unsigned long long, 3>, std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::hash_t, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::array<unsigned long long, 3>, std::__1::__hash_value_type<std::__1::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::equal_t, true> > { float __value_; } __p3_; } __table_; } _map; unsigned int _limit; } _argumentBufferSamplers;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _referenceTrackingCommandBufferLock;
    struct unordered_set<MTLDebugCommandBuffer *, std::__1::hash<MTLDebugCommandBuffer *>, std::__1::equal_to<MTLDebugCommandBuffer *>, std::__1::allocator<MTLDebugCommandBuffer *> > { struct __hash_table<MTLDebugCommandBuffer *, std::__1::hash<MTLDebugCommandBuffer *>, std::__1::equal_to<MTLDebugCommandBuffer *>, std::__1::allocator<MTLDebugCommandBuffer *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *>, std::__1::allocator<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> > > { struct __hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> { struct __hash_node_base<std::__1::__hash_node<MTLDebugCommandBuffer *, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::hash<MTLDebugCommandBuffer *> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::equal_to<MTLDebugCommandBuffer *> > { float __value_; } __p3_; } __table_; } _referenceTrackingCommandBuffers;
    struct CheckerboardRenderTargetPipelineCache { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cacheLock; id<MTLLibrary> _library; id<MTLFunction> _vertexFunction; id<MTLDepthStencilState> _depthStencilState[2]; MTLFunctionConstantValues *_fConstants; struct unordered_map<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>, MTLDebugCheckerboardFillHashKey::Hash, std::__1::equal_to<MTLDebugCheckerboardFillHashKey>, std::__1::allocator<std::__1::pair<const MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> > > > { struct __hash_table<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, std::__1::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey, std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, MTLDebugCheckerboardFillHashKey::Hash, true>, std::__1::__unordered_map_equal<MTLDebugCheckerboardFillHashKey, std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, std::__1::equal_to<MTLDebugCheckerboardFillHashKey>, true>, std::__1::allocator<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey, std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, MTLDebugCheckerboardFillHashKey::Hash, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<MTLDebugCheckerboardFillHashKey, std::__1::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState> >, std::__1::equal_to<MTLDebugCheckerboardFillHashKey>, true> > { float __value_; } __p3_; } __table_; } _cache; } _checkerboardRTPipelineCache;
}

@property (readonly) BOOL loadValidationEnabled;
@property (readonly) BOOL storeValidationEnabled;

+ (BOOL)complainAboutSloppyTextureUsage;

- (id)newIntersectionFunctionTableWithDescriptor:(id)a0;
- (id)newLibraryWithImageFilterFunctionsSPI:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (id)newPipelineLibraryWithFilePath:(id)a0 error:(id *)a1;
- (id)newAccelerationStructureWithDescriptor:(id)a0;
- (id)newLibraryWithFile:(id)a0 error:(id *)a1;
- (id)newDefaultLibraryWithBundle:(id)a0 error:(id *)a1;
- (id)newCounterSampleBufferWithDescriptor:(id)a0 error:(id *)a1;
- (id)newTextureLayoutWithDescriptor:(id)a0 isHeapOrBufferBacked:(BOOL)a1;
- (id)newLibraryWithData:(id)a0 error:(id *)a1;
- (BOOL)validateDynamicLibrary:(id)a0 state:(BOOL)a1 error:(id *)a2;
- (void).cxx_destruct;
- (id)newArgumentEncoderWithArguments:(id)a0;
- (id)newBinaryArchiveWithDescriptor:(id)a0 error:(id *)a1;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (const struct MTLTargetDeviceArch { unsigned long long x0; unsigned int x1; char *x2; } *)targetDeviceInfo;
- (id)newRenderPipelineStateWithTileDescriptor:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)initWithBaseObject:(id)a0 parent:(id)a1;
- (id)loadDynamicLibrariesForComputeDescriptor:(id)a0 error:(id *)a1;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (id)newEvent;
- (id)newBufferWithIOSurface:(struct __IOSurface { } *)a0;
- (id)newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newCommandQueue;
- (id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)a0 imageFilterFunctionInfo:(const struct { BOOL x0; unsigned long long x1; struct *x2; } *)a1 error:(id *)a2;
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)a0;
- (unsigned long long)minimumLinearTextureAlignmentForPixelFormat:(unsigned long long)a0;
- (id)newAccelerationStructureWithSize:(unsigned long long)a0;
- (void)newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newDynamicLibraryWithURL:(id)a0 options:(unsigned long long)a1 error:(id *)a2;
- (id)newBinaryLibraryWithOptions:(unsigned long long)a0 url:(id)a1 error:(id *)a2;
- (id).cxx_construct;
- (id)newIndirectCommandBufferWithDescriptor:(id)a0 maxCommandCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (void)newComputePipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (id)newSharedTextureWithHandle:(id)a0;
- (id)newSharedEventWithMachPort:(unsigned int)a0;
- (id)newDynamicLibrary:(id)a0 computeDescriptor:(id)a1 error:(id *)a2;
- (void)newLibraryWithSource:(id)a0 options:(id)a1 completionHandler:(id /* block */)a2;
- (id)newBufferWithBytes:(const void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2;
- (id)newTextureWithDescriptor:(id)a0;
- (id)newBufferWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (id)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (id)newTextureWithDescriptor:(id)a0 iosurface:(struct __IOSurface { } *)a1 plane:(unsigned long long)a2;
- (id)newTextureWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 descriptor:(id)a2 deallocator:(id /* block */)a3;
- (id)newBufferWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 options:(unsigned long long)a2 deallocator:(id /* block */)a3;
- (id)newLibraryWithDAG:(id)a0 functions:(id)a1 error:(id *)a2;
- (id)newSamplerStateWithDescriptor:(id)a0;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (id)newDepthStencilStateWithDescriptor:(id)a0;
- (id)newFence;
- (id)newSharedTextureWithDescriptor:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })accelerationStructureSizesWithDescriptor:(id)a0;
- (id)newDynamicLibrary:(id)a0 error:(id *)a1;
- (BOOL)validateDynamicLibraryURL:(id)a0 error:(id *)a1;
- (void)newComputePipelineStateWithFunction:(id)a0 completionHandler:(id /* block */)a1;
- (id)newDynamicLibraryWithURL:(id)a0 error:(id *)a1;
- (id)newRasterizationRateMapWithDescriptor:(id)a0;
- (id)newDefaultLibrary;
- (id)newSharedEvent;
- (id)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 completionHandler:(id /* block */)a1;
- (void)newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (struct { unsigned long long x0; unsigned long long x1; })heapBufferSizeAndAlignWithLength:(unsigned long long)a0 options:(unsigned long long)a1;
- (id)newComputePipelineStateWithFunction:(id)a0 error:(id *)a1;
- (id)newDynamicLibraryFromURL:(id)a0 error:(id *)a1;
- (void)newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newComputePipelineStateWithDescriptor:(id)a0 error:(id *)a1;
- (id)newLibraryWithURL:(id)a0 error:(id *)a1;
- (void)newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)newVisibleFunctionTableWithDescriptor:(id)a0;
- (id)newLibraryWithSource:(id)a0 options:(id)a1 error:(id *)a2;
- (id)newSharedEventWithHandle:(id)a0;
- (struct { unsigned long long x0; unsigned long long x1; })heapTextureSizeAndAlignWithDescriptor:(id)a0;
- (id)newHeapWithDescriptor:(id)a0;
- (id)newCommandQueueWithDescriptor:(id)a0;
- (id)newArgumentEncoderWithLayout:(id)a0;
- (void)notifyExternalReferencesNonZeroOnDealloc:(id)a0;
- (void)validateTraceBuffer:(unsigned long long)a0 maxBufferCount:(unsigned long long)a1 options:(unsigned long long)a2;
- (void)addReferenceTrackingCommandBuffer:(id)a0;
- (void)removeReferenceTrackingCommandBuffer:(id)a0;
- (id)_newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)_newRenderPipelineStateWithTileDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)_newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)_newRenderPipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)_newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)_newComputePipelineStateWithDescriptor:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (id)_newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 reflection:(id *)a2 error:(id *)a3;
- (void)_newComputePipelineStateWithFunction:(id)a0 options:(unsigned long long)a1 completionHandler:(id /* block */)a2;
- (void)validateResourceOptions:(unsigned long long)a0 isTexture:(BOOL)a1 isIOSurface:(BOOL)a2 context:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a3;
- (void)validateNewBufferArgs:(unsigned long long)a0 options:(unsigned long long)a1 context:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a2;
- (void)validateMemorylessResource:(id)a0 context:(struct _MTLMessageContext { long long x0; char *x1; unsigned int x2; id x3; long long x4; id x5; char *x6; } *)a1;
- (void)validateLinkedFunctions:(id)a0;
- (void)notifySamplerStateDeallocated:(id)a0;
- (void)clearRenderEncoder:(id)a0 writeMask:(unsigned long long)a1 withCheckerboard:(float *)a2;

@end

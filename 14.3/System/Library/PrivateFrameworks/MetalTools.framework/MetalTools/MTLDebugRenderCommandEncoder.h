@class __end_, __begin_, MTLDepthStencilDescriptor, baseLevel, __end_cap_, NSMutableSet, MTLRenderPassDescriptor, MTLDebugCommandBuffer;
@protocol MTLDepthStencilState, MTLRenderPipelineState;

@interface MTLDebugRenderCommandEncoder : MTLToolsRenderCommandEncoder {
    unsigned int _dirtyBits;
    BOOL _openGLModeEnabled;
    struct { unsigned long long x0; unsigned long long x1; } *_vertexBuiltinArguments;
    struct { unsigned long long pixelFormat; unsigned long long sampleCount; } _attachmentInfo[10];
    id<MTLRenderPipelineState> _previousRenderPipelineStateWithWritesToImageBlock;
    unsigned long long _resolvedRasterSampleCount;
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _vertexBuffers[36];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _vertexTextures[128];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _vertexSamplers[16];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _fragmentBuffers[31];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _fragmentTextures[128];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _fragmentSamplers[16];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _tileBuffers[31];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _tileTextures[128];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _tileSamplers[16];
    struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } _threadgroupMemoryArguments[31];
    unsigned int _encoderState;
    unsigned int _unknownStoreActions;
    struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > { struct __tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned int, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::less<unsigned int> > { unsigned long long x0; } x2; } x0; } *_visibilityOffsets;
    struct vector<MTLViewport, std::__1::allocator<MTLViewport> > { struct *__begin_; struct *__end_; struct __compressed_pair<MTLViewport *, std::__1::allocator<MTLViewport> > { struct *__value_; } __end_cap_; } _viewports;
    struct vector<MTLScissorRect, std::__1::allocator<MTLScissorRect> > { struct *__begin_; struct *__end_; struct __compressed_pair<MTLScissorRect *, std::__1::allocator<MTLScissorRect> > { struct *__value_; } __end_cap_; } _scissorRects;
    unsigned long long _amplificationMode;
    unsigned long long _amplificationValue;
    unsigned long long _vertexAmplificationCount;
    struct deque<id, std::__1::allocator<id> > { struct __split_buffer<id *, std::__1::allocator<id *> > { __begin_ ***__first_; __end_ ***x0; __end_cap_ ***x1; struct __compressed_pair<id **, std::__1::allocator<id *> > { id **__value_; } x2; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::__1::allocator<id> > { unsigned long long __value_; } __size_; } _updatedFences;
    NSMutableSet *_storingRenderTargets;
    MTLDebugCommandBuffer *_commandBuffer;
    unsigned long long _maxVertexBuffers;
}

@property (readonly, nonatomic) unsigned long long attachmentWriteMask;
@property (readonly, copy, nonatomic) MTLRenderPassDescriptor *descriptor;
@property (readonly, nonatomic) struct vector<MTLViewport, std::__1::allocator<MTLViewport> > { struct *x0; struct *x1; struct __compressed_pair<MTLViewport *, std::__1::allocator<MTLViewport> > { struct *x0; } x2; } *viewports;
@property (readonly, nonatomic) struct vector<MTLScissorRect, std::__1::allocator<MTLScissorRect> > { struct *x0; struct *x1; struct __compressed_pair<MTLScissorRect *, std::__1::allocator<MTLScissorRect> > { struct *x0; } x2; } *scissorRects;
@property (readonly, nonatomic) struct { double x0; double x1; double x2; double x3; double x4; double x5; } viewport;
@property (readonly, nonatomic) struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } scissorRect;
@property (readonly, nonatomic) unsigned long long frontFacingWinding;
@property (readonly, nonatomic) unsigned long long cullMode;
@property (readonly, nonatomic) unsigned long long depthClipMode;
@property (readonly, nonatomic) float lineWidth;
@property (readonly, nonatomic) float depthBias;
@property (readonly, nonatomic) float depthBiasSlopeScale;
@property (readonly, nonatomic) float depthBiasClamp;
@property (readonly, nonatomic) unsigned long long triangleFillMode;
@property (readonly, nonatomic) id<MTLRenderPipelineState> renderPipelineState;
@property (readonly, nonatomic) unsigned long long peakPerSampleStorage;
@property (readonly, nonatomic) unsigned long long resolvedSampleCount;
@property (readonly, nonatomic) id<MTLDepthStencilState> depthStencilState;
@property (readonly, nonatomic) MTLDepthStencilDescriptor *defaultDepthStencilDescriptor;
@property (readonly, nonatomic) unsigned int frontStencilRef;
@property (readonly, nonatomic) unsigned int backStencilRef;
@property (readonly, nonatomic) unsigned long long visibilityResultMode;
@property (readonly, nonatomic) unsigned long long visibilityResultOffset;
@property (readonly, nonatomic) float blendColorRed;
@property (readonly, nonatomic) float blendColorGreen;
@property (readonly, nonatomic) float blendColorBlue;
@property (readonly, nonatomic) float blendColorAlpha;
@property (readonly) unsigned long long width;
@property (readonly) unsigned long long height;
@property (readonly, nonatomic) struct { BOOL isValid; BOOL hasBeenUsed; unsigned long long type; baseLevel *object; unsigned long long x0; unsigned long long bufferLength; unsigned long long bufferOffset; unsigned long long threadgroupMemoryLength; unsigned long long threadgroupMemoryOffset; BOOL hasLodClamp; float lodMinClamp; float lodMaxClamp; } tessellationFactorBufferArgument;
@property (readonly, nonatomic) unsigned long long tessellationFactorBufferInstanceStride;
@property (readonly, nonatomic) float tessellationFactorScale;

- (void)setLineWidth:(float)a0;
- (id)formattedDescription:(unsigned long long)a0;
- (void)setViewport:(struct { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)useHeaps:(const id *)a0 count:(unsigned long long)a1;
- (void).cxx_destruct;
- (void)useResource:(id)a0 usage:(unsigned long long)a1 stages:(unsigned long long)a2;
- (void)setTileTexture:(id)a0 atIndex:(unsigned long long)a1;
- (void)setTileSamplerState:(id)a0 atIndex:(unsigned long long)a1;
- (void)setTileBuffer:(id)a0 offset:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)dispatchThreadsPerTile:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; })a0;
- (void)dealloc;
- (void)drawIndexedPatches:(unsigned long long)a0 patchIndexBuffer:(id)a1 patchIndexBufferOffset:(unsigned long long)a2 controlPointIndexBuffer:(id)a3 controlPointIndexBufferOffset:(unsigned long long)a4 indirectBuffer:(id)a5 indirectBufferOffset:(unsigned long long)a6;
- (void)setTileBuffers:(const id *)a0 offsets:(const unsigned long long *)a1 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)setTileSamplerStates:(const id *)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)useHeap:(id)a0 stages:(unsigned long long)a1;
- (void)setStencilStoreActionOptions:(unsigned long long)a0;
- (void)useHeap:(id)a0;
- (void)executeCommandsInBuffer:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setTileSamplerState:(id)a0 lodMinClamp:(float)a1 lodMaxClamp:(float)a2 atIndex:(unsigned long long)a3;
- (void)setTileSamplerStates:(const id *)a0 lodMinClamps:(const float *)a1 lodMaxClamps:(const float *)a2 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)setThreadgroupMemoryLength:(unsigned long long)a0 offset:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)filterCounterRangeWithFirstBatch:(unsigned int)a0 lastBatch:(unsigned int)a1 filterIndex:(unsigned int)a2;
- (void)setDepthStoreActionOptions:(unsigned long long)a0;
- (id)description;
- (void)setColorStoreAction:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)setVertexTextures:(const id *)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setVertexSamplerStates:(const id *)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setVertexSamplerState:(id)a0 lodMinClamp:(float)a1 lodMaxClamp:(float)a2 atIndex:(unsigned long long)a3;
- (void)setVertexSamplerStates:(const id *)a0 lodMinClamps:(const float *)a1 lodMaxClamps:(const float *)a2 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)setViewports:(const struct { double x0; double x1; double x2; double x3; double x4; double x5; } *)a0 count:(unsigned long long)a1;
- (void)setScissorRects:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } *)a0 count:(unsigned long long)a1;
- (void)setFragmentTextures:(const id *)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id).cxx_construct;
- (void)setFragmentBytes:(const void *)a0 length:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)setVertexBytes:(const void *)a0 length:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)useHeaps:(const id *)a0 count:(unsigned long long)a1 stages:(unsigned long long)a2;
- (void)setStencilReferenceValue:(unsigned int)a0;
- (void)setDepthClipMode:(unsigned long long)a0;
- (void)setVertexTexture:(id)a0 atIndex:(unsigned long long)a1;
- (void)setVertexSamplerState:(id)a0 atIndex:(unsigned long long)a1;
- (void)setFragmentBuffers:(const id *)a0 offsets:(const unsigned long long *)a1 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)setFragmentSamplerStates:(const id *)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setFragmentSamplerState:(id)a0 lodMinClamp:(float)a1 lodMaxClamp:(float)a2 atIndex:(unsigned long long)a3;
- (void)setFragmentSamplerStates:(const id *)a0 lodMinClamps:(const float *)a1 lodMaxClamps:(const float *)a2 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)setStencilFrontReferenceValue:(unsigned int)a0 backReferenceValue:(unsigned int)a1;
- (void)setTessellationFactorScale:(float)a0;
- (void)textureBarrier;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(id)a3 indexBufferOffset:(unsigned long long)a4 instanceCount:(unsigned long long)a5;
- (void)drawPrimitives:(unsigned long long)a0 indirectBuffer:(id)a1 indirectBufferOffset:(unsigned long long)a2;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexType:(unsigned long long)a1 indexBuffer:(id)a2 indexBufferOffset:(unsigned long long)a3 indirectBuffer:(id)a4 indirectBufferOffset:(unsigned long long)a5;
- (void)executeCommandsInBuffer:(id)a0 indirectBuffer:(id)a1 indirectBufferOffset:(unsigned long long)a2;
- (void)setVertexBuffers:(const id *)a0 offsets:(const unsigned long long *)a1 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (void)drawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2 instanceCount:(unsigned long long)a3 baseInstance:(unsigned long long)a4;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(id)a3 indexBufferOffset:(unsigned long long)a4 instanceCount:(unsigned long long)a5 baseVertex:(long long)a6 baseInstance:(unsigned long long)a7;
- (void)setVisibilityResultMode:(unsigned long long)a0 offset:(unsigned long long)a1;
- (void)setDepthStencilState:(id)a0;
- (void)setBlendColorRed:(float)a0 green:(float)a1 blue:(float)a2 alpha:(float)a3;
- (void)setTriangleFillMode:(unsigned long long)a0;
- (void)setDepthBias:(float)a0 slopeScale:(float)a1 clamp:(float)a2;
- (void)setCullMode:(unsigned long long)a0;
- (void)setFrontFacingWinding:(unsigned long long)a0;
- (void)drawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(id)a3 indexBufferOffset:(unsigned long long)a4;
- (void)setFragmentBufferOffset:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)setVertexBufferOffset:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)setFragmentBuffer:(id)a0 offset:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)setVertexBuffer:(id)a0 offset:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)useResources:(const id *)a0 count:(unsigned long long)a1 usage:(unsigned long long)a2 stages:(unsigned long long)a3;
- (void)setScissorRect:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })a0;
- (void)drawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2;
- (void)setFragmentSamplerState:(id)a0 atIndex:(unsigned long long)a1;
- (void)drawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2 instanceCount:(unsigned long long)a3;
- (void)setRenderPipelineState:(id)a0;
- (void)setFragmentTexture:(id)a0 atTextureIndex:(unsigned long long)a1 samplerState:(id)a2 atSamplerIndex:(unsigned long long)a3;
- (void)setTessellationFactorBuffer:(id)a0 offset:(unsigned long long)a1 instanceStride:(unsigned long long)a2;
- (void)drawPatches:(unsigned long long)a0 patchStart:(unsigned long long)a1 patchCount:(unsigned long long)a2 patchIndexBuffer:(id)a3 patchIndexBufferOffset:(unsigned long long)a4 instanceCount:(unsigned long long)a5 baseInstance:(unsigned long long)a6;
- (void)drawPatches:(unsigned long long)a0 patchIndexBuffer:(id)a1 patchIndexBufferOffset:(unsigned long long)a2 indirectBuffer:(id)a3 indirectBufferOffset:(unsigned long long)a4;
- (void)setFragmentTexture:(id)a0 atIndex:(unsigned long long)a1;
- (void)useResource:(id)a0 usage:(unsigned long long)a1;
- (void)useResources:(const id *)a0 count:(unsigned long long)a1 usage:(unsigned long long)a2;
- (void)setVertexAmplificationCount:(unsigned long long)a0 viewMappings:(const struct { unsigned int x0; unsigned int x1; } *)a1;
- (void)drawIndexedPatches:(unsigned long long)a0 patchStart:(unsigned long long)a1 patchCount:(unsigned long long)a2 patchIndexBuffer:(id)a3 patchIndexBufferOffset:(unsigned long long)a4 controlPointIndexBuffer:(id)a5 controlPointIndexBufferOffset:(unsigned long long)a6 instanceCount:(unsigned long long)a7 baseInstance:(unsigned long long)a8;
- (void)setTileBytes:(const void *)a0 length:(unsigned long long)a1 atIndex:(unsigned long long)a2;
- (void)setTileBufferOffset:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)setTileTextures:(const id *)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)memoryBarrierWithResources:(const id *)a0 count:(unsigned long long)a1 afterStages:(unsigned long long)a2 beforeStages:(unsigned long long)a3;
- (void)updateFence:(id)a0 afterStages:(unsigned long long)a1;
- (void)setDepthStoreAction:(unsigned long long)a0;
- (void)memoryBarrierWithScope:(unsigned long long)a0 afterStages:(unsigned long long)a1 beforeStages:(unsigned long long)a2;
- (void)setColorStoreActionOptions:(unsigned long long)a0 atIndex:(unsigned long long)a1;
- (void)sampleCountersInBuffer:(id)a0 atSampleIndex:(unsigned long long)a1 withBarrier:(BOOL)a2;
- (void)endEncoding;
- (void)setStencilStoreAction:(unsigned long long)a0;
- (void)waitForFence:(id)a0 beforeStages:(unsigned long long)a1;
- (void)_setDefaults;
- (id)initWithRenderCommandEncoder:(id)a0 parent:(id)a1 descriptor:(id)a2;
- (void)setVertexAmplificationMode:(unsigned long long)a0 value:(unsigned long long)a1;
- (void)setColorResolveTexture:(id)a0 slice:(unsigned long long)a1 depthPlane:(unsigned long long)a2 level:(unsigned long long)a3 atIndex:(unsigned long long)a4;
- (void)setColorResolveTexture:(id)a0 slice:(unsigned long long)a1 depthPlane:(unsigned long long)a2 level:(unsigned long long)a3 yInvert:(BOOL)a4 atIndex:(unsigned long long)a5;
- (void)setDepthResolveTexture:(id)a0 slice:(unsigned long long)a1 depthPlane:(unsigned long long)a2 level:(unsigned long long)a3;
- (void)setDepthResolveTexture:(id)a0 slice:(unsigned long long)a1 depthPlane:(unsigned long long)a2 level:(unsigned long long)a3 yInvert:(BOOL)a4;
- (void)setStencilResolveTexture:(id)a0 slice:(unsigned long long)a1 depthPlane:(unsigned long long)a2 level:(unsigned long long)a3;
- (void)setStencilResolveTexture:(id)a0 slice:(unsigned long long)a1 depthPlane:(unsigned long long)a2 level:(unsigned long long)a3 yInvert:(BOOL)a4;
- (void)setVertexSamplerState:(id)a0 lodMinClamp:(float)a1 lodMaxClamp:(float)a2 lodBias:(float)a3 atIndex:(unsigned long long)a4;
- (void)setFragmentSamplerState:(id)a0 lodMinClamp:(float)a1 lodMaxClamp:(float)a2 lodBias:(float)a3 atIndex:(unsigned long long)a4;
- (void)setTriangleFrontFillMode:(unsigned long long)a0 backFillMode:(unsigned long long)a1;
- (void)setTransformFeedbackState:(unsigned long long)a0;
- (void)_validateAllFunctionArguments;
- (void)validateFramebufferWithRenderPipelineState:(id)a0;
- (void)updatePipelineData;
- (void)validateCommonDrawErrors:(unsigned long long)a0 instanceCount:(unsigned long long)a1 baseInstance:(unsigned long long)a2 maxVertexID:(unsigned long long)a3;
- (void)validateDrawPrimitives:(unsigned long long)a0 vertexStart:(unsigned long long)a1 vertexCount:(unsigned long long)a2 instanceCount:(unsigned long long)a3 function:(const char *)a4;
- (void)validateDrawIndexedPrimitives:(unsigned long long)a0 indexCount:(unsigned long long)a1 indexType:(unsigned long long)a2 indexBuffer:(id)a3 indexBufferOffset:(unsigned long long)a4 instanceCount:(unsigned long long)a5 function:(const char *)a6;
- (void)enumerateVertexBuffersUsingBlock:(id /* block */)a0;
- (void)enumerateVertexTexturesUsingBlock:(id /* block */)a0;
- (void)enumerateVertexSamplersUsingBlock:(id /* block */)a0;
- (void)enumerateFragmentBuffersUsingBlock:(id /* block */)a0;
- (void)enumerateFragmentTexturesUsingBlock:(id /* block */)a0;
- (void)enumerateFragmentSamplersUsingBlock:(id /* block */)a0;
- (void)enumerateTileBuffersUsingBlock:(id /* block */)a0;
- (void)enumerateTileTexturesUsingBlock:(id /* block */)a0;
- (void)enumerateTileSamplersUsingBlock:(id /* block */)a0;
- (void)enumerateThreadgroupMemoryUsingBlock:(id /* block */)a0;

@end

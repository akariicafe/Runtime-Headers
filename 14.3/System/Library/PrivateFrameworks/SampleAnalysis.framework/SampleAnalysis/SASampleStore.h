@class SATask, NSString, SAMountStatusTracker, SAFrame, SATimestamp, NSMutableDictionary, SATimeRange, SASharedCache, NSMutableArray, NSMutableSet, SAWSUpdateDataStore, SABinaryLocator;

@interface SASampleStore : NSObject <NSSecureCoding> {
    unsigned long long _numSamples;
    SATimestamp *_startTime;
    SATimestamp *_endTime;
    NSMutableArray *_fanSpeeds;
    SAWSUpdateDataStore *_wsDataStore;
    SABinaryLocator *_binaryLocator;
    NSMutableSet *_pidsToTrack;
    int _targetProcessId;
    unsigned long long _targetThreadId;
    struct mach_timebase_info { unsigned int numer; unsigned int denom; } _machTimebase;
    struct _CSArchitecture { int cpu_type; int cpu_subtype; } _arch;
    unsigned int _threadPolicyVersion;
    unsigned long long _previousSampleTimestamp;
    unsigned int _previousStackshotBufferSize;
    BOOL _sampleOnlyMainThreads;
    BOOL _nextSampleIsFirstSamplingAllThreads;
    BOOL _stackshotsOnlyIncludeSpecificProcesses;
    BOOL _nextSampleIsFirstSamplingAllProcesses;
    BOOL _haveKPerfSched;
    double _sampleIntervalLimit;
    NSMutableArray *_namesToUseDsymForUUID;
    NSMutableArray *_idsToUseDsymForUUID;
    BOOL _bulkSymbolicationFailed;
    unsigned long long _numMicrostackshotsSkippedDueToMissingLoadInfos;
    unsigned long long _targetHIDEventMachAbs;
    NSMutableDictionary *_processAddressTranslations;
    BOOL _attemptedResampling;
    unsigned long long _dataSource;
    unsigned long long _dataStyle;
    SASharedCache *_mostRecentNativeSharedCache;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property BOOL keepStateBetweenSampleIndexes;
@property double kPerfPETSampleIntervalLimit;
@property BOOL haveKPerfSched;
@property (readonly) unsigned long long dataSource;
@property (readonly) unsigned long long dataStyle;
@property double attemptedSamplingInterval;
@property (readonly) NSMutableDictionary *tasksByUniquePid;
@property (readonly) NSMutableDictionary *tasksByPid;
@property (readonly) NSMutableArray *sampleTimestamps;
@property (readonly) unsigned long long numSamples;
@property (readonly) SATimestamp *startTime;
@property (readonly) SATimestamp *endTime;
@property (readonly) struct mach_timebase_info { unsigned int x0; unsigned int x1; } machTimebase;
@property (copy) NSString *reason;
@property (readonly) double lastWakeTime;
@property (readonly) NSMutableArray *kernelCaches;
@property (readonly) NSMutableArray *sharedCaches;
@property (readonly) SAMountStatusTracker *mountStatusTracker;
@property (readonly) NSMutableArray *hidEvents;
@property BOOL keepMicrostackshotsWithoutLoadInfo;
@property (readonly) SAFrame *cpuSignalHandlerStackLeafKernelFrame;
@property unsigned long long dataGatheringOptions;
@property BOOL sampleOnlyMainThreads;
@property (readonly) SATimestamp *timeWhenTransitionedToSamplingAllThreads;
@property BOOL stackshotsOnlyIncludeSpecificProcesses;
@property (readonly) SATimestamp *timeWhenTransitionedToSamplingAllProcesses;
@property BOOL sanitizePaths;
@property BOOL omitSensitiveStrings;
@property BOOL shouldGatherKextStat;
@property (readonly, copy) NSString *kextStat;
@property (readonly) NSString *kernelVersion;
@property (copy) NSString *osProductName;
@property (copy) NSString *osProductVersion;
@property (copy) NSString *osBuildVersion;
@property (copy) NSString *machineArchitecture;
@property (readonly) unsigned int workQueueSoftThreadLimit;
@property (readonly) unsigned int workQueueHardThreadLimit;
@property (copy) NSString *hardwareModel;
@property unsigned int numActiveCPUs;
@property (copy) NSString *bootArgs;
@property int targetProcessId;
@property unsigned long long targetThreadId;
@property unsigned long long targetHIDEventMachAbs;
@property unsigned long long targetHIDEventEndMachAbs;
@property (readonly) SATask *targetProcess;
@property (copy) NSString *customOutput;
@property double cpuUsed;
@property double cpuDuration;
@property double cpuLimit;
@property double cpuLimitDuration;
@property unsigned long long numWakeups;
@property double wakeupsDuration;
@property unsigned long long numWakeupsLimit;
@property double wakeupsLimitDuration;
@property unsigned long long bytesWritten;
@property double writeDuration;
@property unsigned long long bytesWrittenLimit;
@property double writeLimitDuration;
@property (copy) NSString *event;
@property (copy) NSString *eventNote;
@property (copy) SATimeRange *eventTimeRange;
@property (copy) NSString *signature;
@property (copy) NSString *actionTaken;
@property double extraDuration;
@property (copy) NSString *durationNote;
@property (copy) NSString *stepsNote;
@property double reportTimeThreshold;
@property (readonly) NSString *targetProcessName;
@property (readonly) NSString *targetProcessAbsolutePath;
@property (readonly) NSString *targetProcessBundleName;
@property (readonly) NSString *targetProcessBundleVersion;
@property (readonly) NSString *targetProcessBundleShortVersion;
@property (readonly) NSString *targetProcessBundleBuildVersion;
@property (readonly) NSString *targetProcessBundleProjectName;
@property (readonly) NSString *targetProcessBundleSourceVersion;
@property (readonly) NSString *targetProcessBundleProductBuildVersion;
@property (readonly) NSString *targetProcessBundleId;
@property (readonly) NSString *targetProcessCommerceAppID;
@property (readonly) NSString *targetProcessCommerceExternalID;
@property (readonly) NSString *targetProcessVendorID;

+ (BOOL)canOpenFileAsKTraceFile:(const char *)a0 errorOut:(id *)a1;
+ (id)sampleStoreForSpindumpFile:(const char *)a0;

- (BOOL)isEmpty;
- (id)init;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithCoder:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (void)gatherMachineArchitecture;
- (void)enumerateTasks:(id /* block */)a0;
- (unsigned long long)addKCDataStackshot:(id)a0 returningTimestamp:(id *)a1;
- (BOOL)haveKPerfSched;
- (void)setHaveKPerfSched:(BOOL)a0;
- (double)kPerfPETSampleIntervalLimit;
- (void)setKPerfPETSampleIntervalLimit:(double)a0;
- (void)useDsymForUUIDFor:(id)a0;
- (id)fanSpeedClosestToTimestamp:(id)a0;
- (BOOL)setTargetProcessWithHint:(id)a0;
- (BOOL)cacheLoadInfoForProcess:(int)a0;
- (void)addAuxiliaryData:(id)a0;
- (void)startingSamplingLiveSystem;
- (void)finishedSamplingLiveSystem;
- (void)postprocess;
- (id)initForLiveSampling;
- (id)initForFileParsing;
- (unsigned long long)indexOfFirstSampleOnOrAfterTimestamp:(id)a0;
- (unsigned long long)indexOfLastSampleOnOrBeforeTimestamp:(id)a0;
- (void)addProcessInfoFromTailspin:(id)a0;
- (unsigned long long)addKCDataStackshots:(id)a0 createSeparateSamplePerStackshot:(BOOL)a1;
- (unsigned long long)addKCDataStackshot:(id)a0;
- (int)addMicrostackshotsFromFile:(id)a0 ofTypes:(unsigned int)a1 inTimeRangeStart:(double)a2 end:(double)a3 onlyPid:(int)a4 onlyTid:(unsigned long long)a5;
- (long long)addMicrostackshotsFromData:(id)a0 ofTypes:(unsigned int)a1 inTimeRangeStart:(double)a2 end:(double)a3 onlyPid:(int)a4 onlyTid:(unsigned long long)a5;
- (BOOL)findCpuSignalHandlerStackLeafKernelFrame;
- (void)symbolicate;
- (id)callTreeForTask:(id)a0 options:(id)a1;
- (id)callTreeForThreadsInTask:(id)a0 options:(id)a1;
- (id)callTreeForDispatchQueue:(id)a0 andThread:(id)a1 inTask:(id)a2 options:(id)a3;
- (id)callTreeForThread:(id)a0 inTask:(id)a1 options:(id)a2;
- (id)callTreeForExecutable:(id)a0 options:(id)a1;
- (id)tidToPidDict;
- (id)tidsForPid:(int)a0;
- (id)idleThreadSet;
- (BOOL)parseStackshotsFromKTraceFile:(const char *)a0 warningsOut:(id)a1 errorOut:(id *)a2;
- (BOOL)parseKTraceFile:(const char *)a0 warningsOut:(id)a1 errorOut:(id *)a2;
- (id)binaryFormat;
- (BOOL)saveBinaryFormatToStream:(struct __sFILE { char *x0; int x1; int x2; short x3; short x4; struct __sbuf { char *x0; int x1; } x5; int x6; void *x7; void /* function */ *x8; void /* function */ *x9; void /* function */ *x10; void /* function */ *x11; struct __sbuf { char *x0; int x1; } x12; struct __sFILEX *x13; int x14; unsigned char x15[3]; unsigned char x16[1]; struct __sbuf { char *x0; int x1; } x17; int x18; long long x19; } *)a0;

@end

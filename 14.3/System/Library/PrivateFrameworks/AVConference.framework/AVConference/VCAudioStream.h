@class NSString, VCAudioTransmitter, VCAudioPowerSpectrumSource, VCAudioIO, WRMClient, DTMFEventHandler, NSMutableArray, NSObject, VCAudioPayload, NSNumber, AVTelephonyInterface;
@protocol VCMomentsCollectorDelegate, OS_dispatch_source, VCMediaStreamSyncSourceDelegate, VCMediaStreamDelegate;

@interface VCAudioStream : VCMediaStream <VCMediaStreamSyncSource, VCAudioIOSink, VCAudioIODelegate> {
    int _clientPid;
    int numBufferBytesAvailable;
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
    double dAudioHostTime;
    BOOL lastVoiceActive;
    double _remoteMediaStallTimeout;
    unsigned int lastInputAudioTimeStamp;
    unsigned int lastSentAudioSampleTime;
    long long sampleRate;
    long long samplesPerFrame;
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } stateLock;
    NSMutableArray *audioPayloads;
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } vpioFormat;
    int preferredAudioCodec;
    DTMFEventHandler *dtmfEventHandler;
    WRMClient *wrmClient;
    VCAudioPayload *currentAudioPayload;
    VCAudioPayload *currentDTXPayload;
    int _reportingModuleID;
    AVTelephonyInterface *_telephonyInterface;
    unsigned int *_reportingSSRCList;
    unsigned int _reportingSSRCCount;
    BOOL _sendActiveVoiceOnly;
    BOOL _rtpEnabledBeforeInterrupt;
    BOOL _rtcpEnabledBeforeInterrupt;
    unsigned int _pullAudioSamplesCount;
    struct _VCAudioStreamSinkContext { struct _METER_INFO { BOOL frequencyMeteringEnabled; struct opaqueVCFFTMeter *fftMeter; } soundMeter; } _sinkContext;
    struct _VCAudioStreamSourceContext { BOOL isRemoteMuted; struct _METER_INFO { BOOL frequencyMeteringEnabled; struct opaqueVCFFTMeter *fftMeter; } soundMeter; struct tagVCAudioReceiver *audioReceiver; unsigned int framesProcessed; float volume; BOOL shouldPostProcessSamples; BOOL isSendOnly; BOOL isRemoteMediaStalled; double lastReceivedAudioTimestamp; int packetsSinceStallCount; double remoteMediaStallTimeout; unsigned int awdTime; struct _VCSingleLinkedList { struct _VCSingleLinkedListEntry *head; BOOL initialized; void /* function */ *compare; unsigned long long countEntries; } transports; id<VCMediaStreamDelegate> delegate; VCAudioStream *self; id<VCMediaStreamSyncSourceDelegate> syncSourceDelegate; id<VCMomentsCollectorDelegate> momentsCollectorDelegate; } _sourceContext;
    long long _inputAudioPowerSpectrumToken;
    long long _outputAudioPowerSpectrumToken;
    VCAudioPowerSpectrumSource *_inputAudioPowerSpectrumSource;
    VCAudioPowerSpectrumSource *_outputAudioPowerSpectrumSource;
}

@property (retain) VCAudioTransmitter *audioTransmitter;
@property (retain) VCAudioIO *audioIO;
@property (nonatomic) id syncSourceDelegate;
@property (readonly) unsigned int conferenceID;
@property (nonatomic) BOOL isValid;
@property (nonatomic) int deviceRole;
@property (nonatomic, getter=isMuted) BOOL muted;
@property (nonatomic, getter=isRemoteMuted) BOOL remoteMuted;
@property (nonatomic) BOOL sendActiveVoiceOnly;
@property (nonatomic, getter=isCurrentDTXEnabled) BOOL currentDTXEnable;
@property (retain, nonatomic) NSNumber *targetStreamID;
@property (nonatomic) float volume;
@property (readonly, nonatomic) void *realtimeSourceContext;
@property (readonly, nonatomic) unsigned int actualAudioSendingBitrate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)capabilities;
+ (id)supportedAudioPayloads;
+ (unsigned char)audioIODirectionWithMediaStreamDirection:(long long)a0;

- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)a0;
- (void)dealloc;
- (void)setState:(int)a0;
- (void)setVCStatistics:(struct { int x0; double x1; BOOL x2; BOOL x3; BOOL x4; union { struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; double x5; double x6; double x7; double x8; double x9; char x10[64]; int x11; } x0; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; double x11; double x12; unsigned int x13; unsigned int x14; double x15; unsigned int x16; BOOL x17; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x18; } x1; struct { double x0; double x1; double x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; unsigned int x9; } x2; struct { unsigned int x0; BOOL x1; BOOL x2; BOOL x3; unsigned int x4; unsigned int x5; double x6; unsigned int x7; BOOL x8; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x9; } x3; struct { unsigned char x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; double x10; double x11; double x12; unsigned int x13; unsigned int x14; unsigned int x15; } x4; struct { unsigned int x0; unsigned int x1; unsigned int x2; double x3; } x5; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x6; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } x7; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; } x8; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; BOOL x4; unsigned int x5; unsigned int x6; unsigned int x7; } x9; struct { unsigned char x0; unsigned char x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; int x9; unsigned int x10; } x10; } x5; })a0;
- (id)initWithClientPid:(int)a0;
- (void)stateExit;
- (void)stateEnter;
- (id)supportedPayloads;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (double)lastReceivedRTPPacketTime;
- (double)lastReceivedRTCPPacketTime;
- (void)onCallIDChanged;
- (BOOL)onConfigureStreamWithConfiguration:(id)a0 error:(id *)a1;
- (void)onStartWithCompletionHandler:(id /* block */)a0;
- (void)onStopWithCompletionHandler:(id /* block */)a0;
- (void)onPauseWithCompletionHandler:(id /* block */)a0;
- (void)onResumeWithCompletionHandler:(id /* block */)a0;
- (void)onSendRTCPPacket;
- (void)onRTPTimeout;
- (void)onRTCPTimeout;
- (double)rtcpHeartbeatLeeway;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)handleActiveConnectionChange:(id)a0;
- (unsigned int)internalSampleRateForCodecType:(long long)a0;
- (unsigned int)computePacketTimestampWithInputTimestamp:(unsigned int)a0 numSamples:(int)a1 hostTime:(double)a2;
- (void)setInputTimestamp:(unsigned int)a0 packetTimestamp:(int)a1 hostTime:(double)a2;
- (unsigned int)codecTypeFromAudioPayload:(int)a0;
- (id)getSupportedPayloads;
- (id)addAudioPayload:(int)a0;
- (unsigned int)preferredAudioBitrateForPayload:(int)a0;
- (void)getCodecConfigForPayload:(int)a0 block:(id /* block */)a1;
- (id)configForPayloadType:(int)a0;
- (int)bundlingSchemeForOperatingMode:(int)a0 payloadType:(int)a1;
- (BOOL)setupAudioStreamWithClientPid:(int)a0;
- (id)setLocalParticipantInfo:(id)a0 networkSockets:(id)a1 withError:(id *)a2;
- (void)setupAudioPowerSpectrum;
- (void)setFrequencyMeteringEnabled:(BOOL)a0 meterType:(int)a1;
- (BOOL)setReceiverPayloads;
- (void)registerCodecRateModeChangeNotifications;
- (void)registerActiveAudioStreamChangeNotifications;
- (int)getPacketsPerBundleForStreamConfig:(id)a0;
- (struct _METER_INFO { BOOL x0; struct opaqueVCFFTMeter *x1; } *)meterWithType:(int)a0;
- (BOOL)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned char x8; } *)a0 reportCount:(char *)a1;
- (void)setStreamDirection:(long long)a0;
- (BOOL)setupSourceTransport:(id)a0;
- (void)createReportSSRCListWithStreamConfigs:(id)a0;
- (BOOL)validateAudioStreamConfigurations:(id)a0;
- (void)cleanupBeforeReconfigure:(id)a0;
- (int)operatingModeForAudioStreamMode:(long long)a0;
- (void)setupReportingAgent:(id)a0;
- (id)getReportingServiceID;
- (struct __CFDictionary { } *)getClientSpecificUserInfo:(id)a0;
- (void)_computeInternalFormatForAudioConfig:(id)a0;
- (id)createTransportWithStreamConfig:(id)a0;
- (BOOL)setupPayloads;
- (void)setDTXPayload:(id)a0;
- (BOOL)createAudioReceiver;
- (id)streamIDsFromTransport;
- (BOOL)createAudioTransmitter:(long long)a0 streamIDs:(id)a1;
- (void)prepareAudio;
- (void)cleanupAudio;
- (void)startAudioWithCompletionHandler:(id /* block */)a0;
- (void)reportingAudioStreamEvent:(unsigned short)a0;
- (void)stopAudioWithCompletionHandler:(id /* block */)a0;
- (int)getReportingClientType;
- (struct __CFString { } *)getReportingClientName;
- (void)updateSoundMeter:(struct _METER_INFO { BOOL x0; struct opaqueVCFFTMeter *x1; } *)a0 isInputMeter:(BOOL)a1 sampleBuffer:(struct opaqueVCAudioBufferList { } *)a2;
- (void)pushSamplesOutputPowerSpectrum:(struct opaqueVCAudioBufferList { } *)a0;
- (int)captureMeshMode:(struct opaqueVCAudioBufferList { } *)a0;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1; double x2; double x3; } *)a0;
- (long long)getSyncSourceSampleRate;
- (void)didSuspendAudioIO:(id)a0;
- (void)didResumeAudioIO:(id)a0;
- (id)initWithClientPid:(int)a0 ssrc:(unsigned int)a1;
- (id)initWithClientPid:(int)a0 ssrc:(unsigned int)a1 transportSessionID:(unsigned int)a2;
- (void)sendDTMFEvent:(id)a0;
- (void)stopSendDTMFEvent;
- (BOOL)isFrequencyMeteringEnabled:(int)a0;
- (void)setTargetBitrate:(unsigned int)a0 rateChangeCounter:(unsigned int)a1;
- (void)setStreamIDs:(id)a0 repairStreamIDs:(id)a1;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (BOOL)canProcessAudio;
- (void)setCanProcessAudio:(BOOL)a0;
- (void)vcMediaStreamTransport:(id)a0 updateSourceNTPTime:(double)a1 rtpTimeStamp:(unsigned int)a2;
- (void)unregisterCodecRateModeChangeNotifications;
- (void)handleCodecRateModeChange:(int)a0 payload:(int)a1;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1; double x2; double x3; } *)a0 interval:(float)a1;
- (void)collectTxChannelMetrics:(struct { unsigned int x0; unsigned int x1; double x2; double x3; } *)a0;

@end

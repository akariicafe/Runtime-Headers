@class VCAudioTier, NSDictionary, VCRedundancyControllerAudio, VCAudioRedBuilder, VCTransportSession, VCPacketBundler, NSMutableArray, NSString, VCAudioTierPicker, AVCStatisticsCollector, NSArray, VCAudioPayload, VCAudioPayloadConfig;
@protocol VCAudioTransmitterDelegate;

@interface VCAudioTransmitter : NSObject <VCAudioIOSink, VCConnectionChangedHandler> {
    VCAudioRedBuilder *_redBuilder;
    VCRedundancyControllerAudio *_redundancyController;
    struct opaqueVCAudioBufferList { } *_encodeBuffer;
    BOOL _lastIsTalking;
    double _lastTierSwitch;
    double _audioInterval;
    int _audioTierChangeRequestCount;
    unsigned int _sampleRate;
    unsigned int _samplesPerFrame;
    long long _blockSize;
    float _blockSeconds;
    double _lastUpdateQualityIndicator;
    VCAudioTierPicker *_audioTierPicker;
    VCAudioTier *_requestedAudioTier;
    char *_lastInputSampleBuffer;
    unsigned int _lastInputSampleBufferSize;
    int _audioHeaderSize;
    BOOL _audioTierHysteresis;
    BOOL _lastAudioStalled;
    void *_packetThread;
    unsigned int _currentTargetBitrate;
    unsigned int _currentDuplication;
    unsigned int _redundancyPercentage;
    double _redundancyInterval;
    unsigned int _redundancyControllerNumPayloads;
    unsigned int _redundancyControllerMaxDelay20ms;
    AVCStatisticsCollector *_statisticsCollector;
    unsigned int _sentAudioBytes;
    unsigned int _encodedBytes;
    unsigned int _totalTxAudioBytes;
    unsigned int _estimateTxAudioBytes;
    unsigned int _audioFrameCounter;
    unsigned int _silenceFrameCounter;
    unsigned int _vadSegmentCounter;
    struct tagHANDLE { int x0; } *_rtpHandle;
    struct tagHANDLE { int x0; } *_afrc;
    struct tagHANDLE { int x0; } *_mediaQueue;
    struct tagHANDLE { int x0; } *_rtpVideo;
    void *_controlInfoGenerator;
    BOOL _useRateControl;
    BOOL _isUseCaseWatchContinuity;
    BOOL _allowAudioSwitching;
    BOOL _supportsAdaptation;
    BOOL _needsPacketThread;
    BOOL _isLocalCellular_LowestConnectionQuality;
    BOOL _isRemoteCellular_LowestConnectionQuality;
    BOOL _isConnectedOnIPv6_LowestConnectionQuality;
    BOOL _includeRedSequenceOffset;
    unsigned int _redNumPayloads;
    unsigned int _redMaxDelay20ms;
    BOOL _transmitROC;
    NSMutableArray *_audioPayloads;
    VCAudioPayload *_currentDTXPayload;
    VCAudioPayload *_currentAudioPayload;
    int _currentRedPayloadType;
    unsigned int _currentAudioCap;
    struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _inputFormat;
    struct opaqueRTCReporting { } *_reportingAgent;
    int _reportingModuleID;
    VCTransportSession *_transportSession;
    id _delegate;
    unsigned int _tierNetworkBitrate;
    unsigned int _qualityIndex;
    double _lastReportingCallbackTime;
    struct { unsigned short streamIDs[12]; unsigned char numOfStreamIDs; BOOL probingGroupIDIsSet; unsigned short probingGroupID; unsigned char priority; BOOL pktCountingFlag; BOOL participantIDIsSet; unsigned long long participantID; BOOL participantGenerationCounterIsSet; BOOL ignorePriority; BOOL statsIDIsSet; unsigned short statsID; struct { unsigned short serverTimestamp; unsigned short serverPacketInterval; unsigned short totalServerPacketReceived; unsigned short totalServerPacketSent; unsigned short uplinkBandwidthEstimate; } statsPayload; BOOL isTransitionPacket; } _idsChannelDataFormat;
    BOOL _alwaysOnAudioRedundancyEnabled;
    BOOL _cellularAllowRedLowBitratesEnabled;
    BOOL _wifiAllowRedLowBitratesEnabled;
    struct tagVCMemoryPool { struct { void *x0; long long x1; } x0; unsigned long long x1; } *_audioBundlePool;
    unsigned long long _remoteIDSParticipantID;
    BOOL _useChannelDataFormat;
    unsigned int _rtpTimestampBase;
    BOOL _shouldApplyRedAsBoolean;
}

@property (readonly, nonatomic) VCAudioPayloadConfig *currentAudioPayloadConfig;
@property (readonly, nonatomic) VCPacketBundler *audioBundler;
@property (readonly, nonatomic) VCAudioTier *currentAudioTier;
@property (readonly, nonatomic) int audioTxBitrate;
@property (readonly, nonatomic) int actualAudioSendingBitrate;
@property (readonly, nonatomic) unsigned int lastSentAudioSampleTime;
@property (readonly, nonatomic) unsigned int sentAudioBytes;
@property (readonly, nonatomic) unsigned int encodedBytes;
@property (readonly, nonatomic) unsigned int redNumPayloads;
@property (readonly, nonatomic) unsigned int redMaxDelay20ms;
@property (readonly, nonatomic) NSDictionary *dtxMetrics;
@property (nonatomic) int operatingMode;
@property unsigned char inputMeter;
@property id<VCAudioTransmitterDelegate> delegate;
@property (readonly, nonatomic) BOOL isRedEnabled;
@property (readonly, nonatomic) BOOL ignoreSilence;
@property (nonatomic) unsigned int targetBitrate;
@property (nonatomic) unsigned int rateChangeCounter;
@property (nonatomic) struct { unsigned int averageNetworkBitrate; unsigned int averageMediaBitrate; double averageFramerate; double lastDecodedFrameTime; } currentChannelMetrics;
@property (nonatomic) BOOL isAudioStalled;
@property (nonatomic) int qualityIndicator;
@property (nonatomic) unsigned int maxIDSStreamIdCount;
@property (retain, nonatomic) NSArray *supportedNumRedundantPayload;
@property (nonatomic) BOOL sendActiveVoiceOnly;
@property (nonatomic, getter=isCurrentDTXEnabled) BOOL currentDTXEnable;
@property (nonatomic) unsigned char mediaControlInfoVersion;
@property (nonatomic) BOOL useWiFiTiers;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)initWithConfig:(id)a0;
- (void)dealloc;
- (void)stop;
- (void)start;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)gatherRealtimeStats:(struct __CFDictionary { } *)a0;
- (void)handleActiveConnectionChange:(id)a0;
- (BOOL)setupAudio:(id *)a0;
- (void)setStreamIDs:(id)a0;
- (BOOL)handleCodecRateModeChange:(unsigned char)a0 withBitrate:(unsigned int)a1;
- (void)redundancyController:(id)a0 redundancyIntervalDidChange:(double)a1;
- (void)setCellTech:(int)a0 remoteCellular:(int)a1 isIPV6:(int)a2 audioCap:(unsigned int)a3;
- (void)registerReportingTask;
- (void)initAudioValues;
- (unsigned int)redundancyControllerModeForOperatingMode:(int)a0 isRedEnabled:(BOOL)a1;
- (void)setupAudioHeaderSize;
- (BOOL)setupAudioTierPicker;
- (void)logTierInfo:(int)a0;
- (BOOL)setupAudioEncoders;
- (unsigned int)maximumSamplesPerFrame;
- (BOOL)allocateLastInputSampleBuffer:(unsigned int)a0;
- (id)usedAudioPayloadForType:(int)a0;
- (void)removeUnusedAudioPayloads;
- (int)encodeAudio:(struct opaqueVCAudioBufferList { } *)a0 numInputSamples:(int)a1 outputBytes:(void *)a2 numOutputBytes:(int)a3 withPayload:(int *)a4 isTalking:(BOOL)a5;
- (int)bundleAndSendSamples:(char *)a0 numEncodedBytes:(int)a1 withPayload:(int)a2 timeStamp:(unsigned int)a3 bufferedSamples:(int)a4 hasNewSamples:(BOOL)a5 voiceActivity:(BOOL)a6 priority:(unsigned char)a7;
- (void)encodeBundleAndSendAudio:(struct opaqueVCAudioBufferList { } *)a0 sampleCount:(unsigned int)a1;
- (BOOL)shouldUseDtx;
- (void)useAudioPayload:(id)a0 withBitrate:(unsigned int)a1;
- (void)updateAudioTxBitrate;
- (void)useAudioTier:(id)a0;
- (void)setRedNumPayloads:(int)a0 withMaxDelay:(int)a1;
- (void)reportRedundancyConfigChange;
- (int)sendAudioPacket:(char *)a0 payloadLength:(int)a1 payloadType:(int)a2 timestamp:(unsigned int)a3 priority:(unsigned char)a4 marker:(int)a5 nextInterval:(float)a6 padding:(char *)a7 paddingLength:(unsigned char)a8 sendReport:(int)a9;
- (BOOL)chooseAudioNetworkBitrate;
- (float)nextAudioInterval:(int)a0;
- (int)sendAudioBundle:(BOOL)a0 atTimeStamp:(unsigned int)a1 nextInterval:(float)a2;
- (BOOL)sendAudioPacketImpl:(struct tagAudioPacketData { struct tagAudioHeaderData { int x0; unsigned int x1; unsigned char x2[16]; unsigned char x3; float x4; int x5; int x6; int x7; unsigned char x8; } x0; char *x1; int x2; } *)a0 bytesSent:(int *)a1;
- (void *)generateControlInfo;
- (int)sendAudioPacket:(struct tagAudioPacketData { struct tagAudioHeaderData { int x0; unsigned int x1; unsigned char x2[16]; unsigned char x3; float x4; int x5; int x6; int x7; unsigned char x8; } x0; char *x1; int x2; })a0;

@end

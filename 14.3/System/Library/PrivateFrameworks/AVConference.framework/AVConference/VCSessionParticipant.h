@class NSMutableDictionary, VCAudioIO, NSDictionary, VCCallInfoBlob, AVCBasebandCongestionDetector, NSObject, NSMutableArray, VCRedundancyControllerAudio, NSString, VCAudioRuleCollection, AVCStatisticsCollector, NSMutableSet, VCRedundancyControllerVideo, NSArray, NSData, VCMediaNegotiator, VCSessionParticipantOneToOneConfig;
@protocol OS_dispatch_queue, VCSessionParticipantDelegate, VCSessionParticipantStreamDelegate;

@interface VCSessionParticipant : VCObject <VCMediaStreamDelegate, VCSecurityEventHandler, VCAudioIOSink, VCAudioIODelegate, VCConnectionChangedHandler, VCRedundancyControllerDelegate, VCAudioPowerSpectrumSourceDelegate> {
    unsigned int _state;
    NSObject<OS_dispatch_queue> *_participantQueue;
    int _processId;
    id _delegate;
    id _streamDelegate;
    NSString *_sessionUUID;
    NSString *_idsDestination;
    VCCallInfoBlob *_callInfoBlob;
    NSData *_mediaBlobCompressed;
    NSDictionary *_participantInfo;
    unsigned int _transportSessionID;
    int _deviceRole;
    long long _direction;
    NSMutableSet *_startingAudioStreams;
    NSMutableSet *_stoppingAudioStreams;
    NSMutableSet *_runningAudioStreams;
    NSMutableSet *_pausingAudioStreams;
    NSMutableSet *_resumingAudioStreams;
    NSMutableSet *_pausedAudioStreams;
    NSMutableSet *_startingVideoStreams;
    NSMutableSet *_stoppingVideoStreams;
    NSMutableSet *_runningVideoStreams;
    NSMutableSet *_pausingVideoStreams;
    NSMutableSet *_resumingVideoStreams;
    NSMutableSet *_pausedVideoStreams;
    NSMutableArray *_audioStreams;
    NSMutableArray *_videoStreams;
    NSMutableDictionary *_streamMap;
    double _lastParticipantMKMRecoveryTime;
    double _participantMKMRecoveryTimeout;
    BOOL _audioPausedToStart;
    BOOL _videoPausedToStart;
    BOOL _audioStateChangeInProgress;
    BOOL _videoStateChangeInProgress;
    BOOL _audioIOStateChangeInProgress;
    VCAudioIO *_audioIO;
    VCRedundancyControllerAudio *_audioRedundancyController;
    VCRedundancyControllerVideo *_videoRedundancyController;
    id _reportingAgentWeak;
    BOOL _isGKVoiceChat;
}

@property (readonly, nonatomic) NSString *uuid;
@property (readonly, nonatomic) unsigned long long idsParticipantID;
@property (readonly, nonatomic) NSData *opaqueData;
@property (readonly, nonatomic) id<VCSessionParticipantDelegate> delegate;
@property (nonatomic) id<VCSessionParticipantStreamDelegate> streamDelegate;
@property (nonatomic, getter=isMuted) BOOL muted;
@property (nonatomic, getter=isAudioEnabled) BOOL audioEnabled;
@property (nonatomic, getter=isVideoEnabled) BOOL videoEnabled;
@property (nonatomic, getter=isAudioPaused) BOOL audioPaused;
@property (nonatomic, getter=isVideoPaused) BOOL videoPaused;
@property (readonly, nonatomic) float audioPosition;
@property (readonly, nonatomic) float volume;
@property (readonly, nonatomic) NSArray *audioStreams;
@property (readonly, nonatomic) NSArray *allParticipantStreamInfo;
@property (readonly, nonatomic) union tagNTP { unsigned long long wide; struct { unsigned int frac; unsigned int sec; } time; } creationTime;
@property (readonly, nonatomic) long long participantVideoToken;
@property (readonly, nonatomic) unsigned long long spatialAudioSourceID;
@property (retain, nonatomic) AVCStatisticsCollector *statisticsCollector;
@property (retain, nonatomic) AVCBasebandCongestionDetector *basebandCongestionDetector;
@property (nonatomic) unsigned int cellularUniqueTag;
@property (readonly, nonatomic) VCAudioRuleCollection *supportedAudioRules;
@property (readonly, nonatomic) VCMediaNegotiator *mediaNegotiator;
@property (nonatomic, getter=isLocalOnWiFi) BOOL localOnWiFi;
@property (nonatomic) struct opaqueRTCReporting { } *reportingAgent;
@property (readonly, nonatomic) BOOL supportsOneToOneMode;
@property (retain, nonatomic) VCSessionParticipantOneToOneConfig *oneToOneConfig;
@property (nonatomic) struct tagVCMediaQueue { } *mediaQueue;
@property (readonly, nonatomic) BOOL hasVideoStreams;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)setVolume:(float)a0;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo { unsigned int x0; double x1; } *)a0;
- (void)dealloc;
- (void)stop;
- (void)vcMediaStreamDidStop:(id)a0;
- (void)start;
- (void)tearDown;
- (BOOL)setState:(unsigned int)a0;
- (void)vcMediaStream:(id)a0 didPauseStream:(BOOL)a1 error:(id)a2;
- (void)vcMediaStream:(id)a0 didStartStream:(BOOL)a1 error:(id)a2;
- (void)vcMediaStream:(id)a0 didResumeStream:(BOOL)a1 error:(id)a2;
- (void)audioPowerSpectrumSinkDidUnregister;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (void)audioPowerSpectrumSinkDidRegister;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)handleActiveConnectionChange:(id)a0;
- (void)didSuspendAudioIO:(id)a0;
- (void)didResumeAudioIO:(id)a0;
- (void)spatialAudioSourceIDChanged:(unsigned long long)a0;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (void)vcMediaStream:(id)a0 requestKeyFrameGenerationWithStreamID:(unsigned short)a1;
- (BOOL)setAudioPosition:(float)a0;
- (id)initWithIDSDestination:(id)a0 delegate:(id)a1 processId:(int)a2 sessionUUID:(id)a3;
- (void)updateAudioSpectrumState;
- (void)callDelegateWithBlock:(id /* block */)a0;
- (BOOL)setupAudioStreamConfiguration:(id)a0 audioRules:(id)a1;
- (void)completeStreamSetup:(id)a0;
- (id)newOneToOneAudioStreamConfigWithAudioSettings:(id)a0 streamDirection:(long long)a1 streamSsrc:(unsigned int)a2;
- (BOOL)configureWithDeviceRole:(int)a0 negotiatedVideoEnabled:(BOOL)a1;
- (id)newOneToOneVideoStreamConfigWithStreamDirection:(long long)a0 streamSsrc:(unsigned int)a1 encodingType:(unsigned char)a2;
- (void)stopAudioIOCompletion;
- (void)onStartAudioIO;
- (void)onDidResumeAudioStream:(id)a0;
- (void)onPauseAudioStreams;
- (BOOL)configureAudioIOWithDeviceRole:(int)a0;
- (id)getAudioDumpName;
- (void)redundancyController:(id)a0 redundancyIntervalDidChange:(double)a1;
- (void)collectVideoChannelMetrics:(struct { unsigned int x0; unsigned int x1; double x2; double x3; } *)a0;
- (void)collectAudioChannelMetrics:(struct { unsigned int x0; unsigned int x1; double x2; double x3; } *)a0;
- (void)dispatchedStart;
- (BOOL)handleEncryptionInfoChange:(id)a0;
- (void)resetDecryptionTimeout;
- (BOOL)updateConfigurationWithDeviceRole:(int)a0;
- (void)applyVideoEnabledSetting:(BOOL)a0;
- (void)updateVideoPaused:(BOOL)a0;
- (void)callStreamDelegateWithBlock:(id /* block */)a0;
- (int)startAudioStreams;
- (int)startVideoStreams;
- (id)streamsToString;
- (void)processStartedStream:(id)a0 didStart:(BOOL)a1;
- (BOOL)allStartingStreamsStarted;
- (void)processStoppedStream:(id)a0;
- (BOOL)allStoppingStreamsStopped;
- (BOOL)allResumingStreamsResumed;
- (BOOL)allPausingStreamsPaused;
- (BOOL)isAnyStreamRunningOrPaused;
- (void)stopAudioDump;
- (void)processResumedStream:(id)a0 didResume:(BOOL)a1;
- (void)processPausedStream:(id)a0 didPause:(BOOL)a1;
- (int)stopAudioStreams;
- (char *)participantStateToString:(unsigned int)a0;
- (int)stopVideoStreams;
- (int)pauseAudioStreams;
- (int)resumeAudioStreams;
- (int)pauseVideoStreams;
- (int)resumeVideoStreams;
- (void)startAudioDump;
- (void)stopAudioStreamsCompletion;
- (BOOL)isAudioStream:(id)a0;
- (BOOL)shouldStartAudioIO;
- (void)startAudioIO;
- (BOOL)isVideoStream:(id)a0;
- (id)newOneToOneVideoStreamMultiwayConfiguration:(unsigned char)a0;
- (void)applyVideoNegotiatedSettingsToStreamConfiguration:(id)a0;
- (id)generateEncryptionKey;
- (void)setupNetworkAddressesForMediaConfig:(id)a0;
- (BOOL)configureAudioWithDeviceRole:(int)a0;
- (BOOL)configureVideoWithDeviceRole:(int)a0;
- (void)dispatchedStop;
- (void)dispatchedSetAudioEnabled:(BOOL)a0;
- (void)dispatchedSetVideoEnabled:(BOOL)a0;
- (void)dispatchedSetAudioPaused:(BOOL)a0;
- (void)dispatchedSetVideoPaused:(BOOL)a0;
- (void)createRedundancyControllers;
- (void)dispatchedStream:(id)a0 didStart:(BOOL)a1 error:(id)a2;
- (void)dispatchedStreamDidStop:(id)a0;
- (void)dispatchedStream:(id)a0 didPause:(BOOL)a1 error:(id)a2;
- (void)dispatchedStream:(id)a0 didResume:(BOOL)a1 error:(id)a2;
- (void)sendAudioPowerSpectrumSourceRegistration:(BOOL)a0;

@end

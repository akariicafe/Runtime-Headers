@class NSDate, NSString, NSArray, MDLAsset, MDLMesh, MDLSubmesh, NSDictionary, NSData, CUIShapeEffectPreset, NSMutableArray, NSSet, CUIPSDGradient;

@interface CSIGenerator : NSObject {
    NSMutableArray *_slices;
    NSMutableArray *_bitmaps;
    NSMutableArray *_metrics;
    long long _targetPlatform;
    short _layout;
    NSData *_rawData;
    unsigned long long _rowbytes;
    NSString *_assetPackIdentifier;
    NSSet *_externalTags;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _externalReferenceFrame;
    unsigned short _linkLayout;
    NSArray *_containedNamedElements;
    double _compressionQuality;
    long long _compressionType;
    NSString *_systemColorName;
}

@property (nonatomic) double compressionQuality;
@property long long targetPlatform;
@property long long compressionType;
@property (nonatomic) struct CGSize { double width; double height; } size;
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSString *utiType;
@property (nonatomic) struct CGSize { double width; double height; } physicalSizeInMeters;
@property (nonatomic) BOOL isVectorBased;
@property (nonatomic) long long templateRenderingMode;
@property (nonatomic, getter=isExcludedFromContrastFilter) BOOL excludedFromContrastFilter;
@property (nonatomic) BOOL optOutOfThinning;
@property (nonatomic) BOOL preservedVectorRepresentation;
@property (nonatomic) BOOL isFlippable;
@property (nonatomic) BOOL isTintable;
@property (nonatomic) short colorSpaceID;
@property (nonatomic) unsigned int scaleFactor;
@property (nonatomic) unsigned int pixelFormat;
@property (nonatomic) BOOL allowsMultiPassEncoding;
@property (nonatomic) BOOL allowsOptimalRowbytesPacking;
@property (nonatomic) BOOL allowsPaletteImageCompression;
@property (nonatomic) BOOL allowsHevcCompression;
@property (nonatomic) BOOL allowsDeepmapImageCompression;
@property (nonatomic) BOOL allowsDeepmap2ImageCompression;
@property (nonatomic) int exifOrientation;
@property (nonatomic) struct CGSize { double width; double height; } originalUncroppedSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } alphaCroppedFrame;
@property (nonatomic) BOOL clampMetrics;
@property (nonatomic) long long textureFormat;
@property (nonatomic) long long textureInterpretation;
@property (nonatomic) BOOL textureOpaque;
@property (nonatomic) BOOL cubemap;
@property (readonly, nonatomic) NSMutableArray *mipReferences;
@property (readonly, nonatomic) NSMutableArray *layerReferences;
@property (retain, nonatomic) CUIPSDGradient *gradient;
@property (retain, nonatomic) CUIShapeEffectPreset *effectPreset;
@property (nonatomic) int blendMode;
@property (nonatomic) double opacity;
@property (copy, nonatomic) NSDate *modtime;
@property (copy, nonatomic) NSArray *colorComponents;
@property (copy, nonatomic) NSDictionary *sizesByIndex;
@property (copy, nonatomic) NSString *fontName;
@property (nonatomic) double fontSize;
@property (nonatomic) double maxPointSize;
@property (nonatomic) double minPointSize;
@property (nonatomic) short scalingStyle;
@property (nonatomic) short alignment;
@property (copy, nonatomic) NSDictionary *renditionProperties;
@property (nonatomic) int objectVersion;
@property (nonatomic) struct { void /* unknown type, empty encoding */ columns[4]; } transformation;
@property (copy, nonatomic) MDLAsset *modelAsset;
@property (readonly, nonatomic) NSMutableArray *meshReferences;
@property (copy, nonatomic) MDLMesh *modelMesh;
@property (readonly, nonatomic) NSMutableArray *submeshReferences;
@property (copy, nonatomic) MDLSubmesh *modelSubmesh;
@property (copy, nonatomic) NSArray *vectorSizes;
@property (nonatomic) unsigned int standardVectorSize;
@property (nonatomic) float baseline;
@property (nonatomic) float capHeight;
@property (nonatomic) struct { double top; double left; double bottom; double right; } alignmentRectInsets;
@property (nonatomic) float templateVersion;

+ (void)initialize;
+ (void)setFileEncoding:(int)a0;
+ (int)fileEncoding;

- (id)rawData;
- (id)initWithCanvasSize:(struct CGSize { double x0; double x1; })a0 sliceCount:(unsigned int)a1 layout:(short)a2;
- (id)initWithShapeEffectPreset:(id)a0 forScaleFactor:(unsigned int)a1;
- (void)addBitmap:(id)a0;
- (id)initWithNameList:(id)a0;
- (id)initWithRawData:(id)a0 pixelFormat:(unsigned int)a1 layout:(short)a2;
- (id)initWithExternalReference:(id)a0 tags:(id)a1;
- (id)initWithLayerStackData:(id)a0 withCanvasSize:(struct CGSize { double x0; double x1; })a1;
- (id)initWithTextureForPixelFormat:(long long)a0;
- (void)dealloc;
- (id)initWithTextureImageWithSize:(struct CGSize { double x0; double x1; })a0 forPixelFormat:(long long)a1 cubeMap:(BOOL)a2;
- (id)initWithInternalReferenceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 layout:(short)a1;
- (id)initWithColorNamed:(id)a0 colorSpaceID:(unsigned long long)a1 components:(id)a2;
- (id)initWithModelMesh:(id)a0;
- (id)initWithColorNamed:(id)a0 colorSpaceID:(unsigned long long)a1 components:(id)a2 linkedToSystemColorWithName:(id)a3;
- (id)initWithModelSubmesh:(id)a0;
- (void)addSliceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)addMetrics:(struct { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; })a0;
- (void)addLayerReference:(id)a0;
- (void)addMipReference:(id)a0;
- (id)initWithTextStyleNamed:(id)a0 fontName:(id)a1 fontSize:(double)a2 maxPointSize:(double)a3 minPointSize:(double)a4 scalingStyle:(short)a5 alignment:(short)a6;
- (id)initWithMultisizeImageSetNamed:(id)a0 sizesByIndex:(id)a1;
- (id)initWithModelAsset:(id)a0;
- (void)addMeshReference:(id)a0;
- (void)addSubmeshReference:(id)a0;
- (id)CSIRepresentationWithCompression:(BOOL)a0;

@end

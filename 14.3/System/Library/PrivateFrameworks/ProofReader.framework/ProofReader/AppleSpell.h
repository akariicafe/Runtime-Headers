@class NSData, NSString, NSURL, NSArray, NSMutableDictionary, NSMutableSet, NSMutableArray, NSObject;
@protocol OS_dispatch_queue;

@interface AppleSpell : NSObject {
    NSObject<OS_dispatch_queue> *_serialQueue;
    void *_proofReaderConnection;
    struct __CFDictionary { } *_databaseConnections;
    NSMutableDictionary *_languageModelDicts;
    NSMutableDictionary *_lexiconDict;
    NSMutableDictionary *_phraseLexiconDict;
    struct __CFDictionary { } *_emojiPredictorDict;
    double _referenceResetTimer;
    double _lastWriteLanguageModels;
    double _lastDecayLanguageModels;
    double _lastResetLanguageModels;
    double _lastReleaseLanguageModels;
    double _lastMaintainLanguageModels;
    unsigned long long _languageModelWordCount;
    NSMutableDictionary *_localDictionaryArrays;
    NSMutableArray *_globalDictionaryArray;
    NSString *_lastLanguage;
    NSString *_lastCandidateLanguage;
    NSArray *_userPreferredLanguages;
    NSArray *_userPreferredLatinLanguages;
    NSArray *_userTopLanguages;
    NSArray *_userTransliterationLocalizations;
    NSArray *_userAdditionalEnglishLocalizations;
    NSMutableDictionary *_learnedResponses;
    NSMutableDictionary *_probationaryLearnedResponses;
    NSMutableDictionary *_probationaryLearnedResponseTimes;
    NSMutableArray *_diagnosticInfo;
    NSMutableSet *_foundNames;
    id _foundNamesLexicon;
    id _foundPhrasesLexicon;
    double _lastFindNames;
    NSMutableSet *_foundShortcuts;
    NSMutableDictionary *_foundShortcutsDictionary;
    struct __CFDictionary { } *_databaseConnectionsByPathAndCode;
    unsigned long long _reserved1;
    double _reserved2;
    NSMutableArray *_reserved3;
    NSMutableDictionary *_reserved4;
    double _reserved5;
    NSMutableArray *_altBundleURLs;
    NSObject<OS_dispatch_queue> *_assetDataBundleSerialQueue;
    NSMutableDictionary *_assetDataBundleURLDictionary;
    NSMutableSet *_updatedDataBundleLanguages;
    NSURL *_updateBundleURL;
    NSMutableDictionary *_languageCounts;
    double _lastLanguageCounts;
    NSMutableDictionary *_userAdaptationDictionary;
    NSData *_lastKeyEventArray;
    unsigned long long *_keyboardHistogram;
    double _lastKeyboardHistogramRecording;
    NSMutableArray *_requestedAssets;
    NSMutableArray *_requestedByCheckerAssets;
    double _lastAssetRequest;
    NSMutableArray *_recordedCorrections;
    NSMutableArray *_recordedTICorrections;
    double _probationaryInterval;
    BOOL _userPrefersUncheckedLatinLanguage;
    BOOL _userPrefersUncheckedCyrillicLanguage;
    BOOL _hasUpdatedDataBundleLanguages;
    BOOL _shouldClearFoundNames;
    BOOL _automaticTextCompletionCollapsed;
    BOOL _automaticTextCompletionEnabled;
}

+ (id)sharedInstance;
+ (void)resetSharedInstance;

- (id)_crudePreviousWordInString:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)phraseMatching:(id)a0 inLexiconForLanguage:(id)a1;
- (void)resetTimer;
- (id)englishStringFromWordBuffer:(char *)a0 length:(unsigned long long)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2;
- (id)spellServer:(id)a0 alternativesForPinyinInputString:(id)a1;
- (void)clearCaches;
- (id)spellServer:(id)a0 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4;
- (BOOL)validateWord:(id)a0 inLexicons:(id)a1 forLanguage:(id)a2 requiredMetaFlags:(unsigned int)a3 alternativeRequiredMetaFlags:(unsigned int)a4 prohibitedMetaFlags:(unsigned int)a5 caseInsensitive:(BOOL)a6;
- (id)autocorrectionDictionaryForLanguage:(id)a0;
- (BOOL)onNoContractionList:(id)a0 language:(id)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2 sender:(id)a3;
- (id)spellServer:(id)a0 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)a0 checkGrammarInString:(id)a1 language:(id)a2 details:(id *)a3;
- (void)releaseLanguageModels;
- (BOOL)looksLikeParticiple:(id)a0 language:(id)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2 sender:(id)a3;
- (id)_lexiconsForLanguage:(id)a0;
- (BOOL)validateWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 checkBase:(BOOL)a5 checkDict:(BOOL)a6 checkTemp:(BOOL)a7 checkUser:(BOOL)a8 checkNames:(BOOL)a9 checkHyphens:(BOOL)a10 checkIntercaps:(BOOL)a11 checkOptions:(BOOL)a12 forCorrection:(BOOL)a13 depth:(unsigned long long)a14;
- (id)localizationsForLanguage:(id)a0;
- (BOOL)validateWordPrefixBuffer:(char *)a0 length:(unsigned long long)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2;
- (id)spellServer:(id)a0 generateCandidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 offset:(unsigned long long)a3 types:(unsigned long long)a4 options:(id)a5 orthography:(id)a6;
- (id)spellServer:(id)a0 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3;
- (id)init;
- (id)_spellServer:(id)a0 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4 tagger:(id)a5 taggerIndex:(unsigned long long)a6 errorModel:(id)a7 guessesDictionaries:(id)a8;
- (id)_capitalizationResultForString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 offset:(unsigned long long)a3 language:(id)a4 onlyAtInsertionPoint:(BOOL)a5 keyEventArray:(id)a6 selectedRangeValue:(id)a7;
- (id)_primitiveRetainedAlternativesForPinyinInputString:(id)a0;
- (id)phraseCorrectionsDictionaryForLanguage:(id)a0;
- (void)_addLanguageModelCompletionsForPrefix:(id)a0 languageModel:(id)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 encoding:(unsigned int)a5 capitalized:(BOOL)a6 candidates:(id)a7;
- (unsigned int)_tokenIDForString:(id)a0 languageModel:(id)a1 language:(id)a2 terminatorTokenID:(unsigned int)a3;
- (id)_pinyinStringByCombiningPinyinString:(id)a0 withPinyinString:(id)a1;
- (BOOL)useLanguageModelForLanguage:(id)a0 tagger:(id)a1 taggerIndex:(unsigned long long)a2 appIdentifier:(id)a3;
- (BOOL)validateWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 checkBase:(BOOL)a5 checkDict:(BOOL)a6 checkTemp:(BOOL)a7 checkNames:(BOOL)a8 checkHyphens:(BOOL)a9 checkIntercaps:(BOOL)a10 checkOptions:(BOOL)a11 depth:(unsigned long long)a12;
- (void)timeout:(id)a0;
- (id)linguisticTaggerForLanguage:(id)a0 string:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 taggerIndex:(unsigned long long *)a3;
- (unsigned long long)_resetLanguageModels;
- (void)resetLanguageModels;
- (id)globalDictionaryArray;
- (BOOL)checkNoCapAbbreviationWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)a0 findMisspelledWordInString:(id)a1 language:(id)a2 wordCount:(long long *)a3 countOnly:(BOOL)a4 correction:(id *)a5;
- (id)spellServer:(id)a0 _retainedCorrectionsForPinyinInputString:(id)a1;
- (id)externalStringForKoreanInternalString:(id)a0;
- (void)_releaseLanguageModels;
- (id)englishStringsFromWordBuffer:(char *)a0 length:(unsigned long long)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2;
- (BOOL)validateWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 checkBase:(BOOL)a5 checkDict:(BOOL)a6 checkNames:(BOOL)a7 checkHyphens:(BOOL)a8 checkIntercaps:(BOOL)a9 checkOptions:(BOOL)a10 depth:(unsigned long long)a11;
- (id)_retainedAlternativesByCombiningAlternatives:(id)a0 withAlternatives:(id)a1 andAddingAlternatives:(id)a2;
- (void)enumerateEntriesForWord:(id)a0 inLexiconForLanguage:(id)a1 withBlock:(id /* block */)a2;
- (id)localDictionaryArrayForLanguage:(id)a0;
- (id)_correctionForSuggestedPhrase:(const char *)a0 originalBuffer:(const char *)a1 length:(unsigned long long)a2;
- (void)personalizeEmojiArray:(id)a0;
- (id)spellServer:(id)a0 _retainedPrefixesForPinyinInputString:(id)a1;
- (BOOL)_useAlternateLanguageForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 ofString:(id)a1 language:(id)a2 tagger:(id)a3 taggerIndex:(unsigned long long)a4 alternateLanguage:(id)a5 alternateTagger:(id)a6 alternateTaggerIndex:(unsigned long long)a7 appIdentifier:(id)a8;
- (id)languageModelFallbackLocalizationForLanguage:(id)a0;
- (id)_correctionResultForKoreanString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 offset:(unsigned long long)a3 tagger:(id)a4 taggerIndex:(unsigned long long)a5 appIdentifier:(id)a6 dictionary:(id)a7 keyEventArray:(id)a8;
- (BOOL)looksLikeAdverb:(id)a0 language:(id)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2 sender:(id)a3;
- (id)spellServer:(id)a0 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4;
- (id)spellServer:(id)a0 prefixesForPinyinInputString:(id)a1;
- (void)updateLexiconsForLanguageIfNecessary:(id)a0;
- (id)spellServer:(id)a0 suggestGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4 errorModel:(id)a5;
- (id)spellServer:(id)a0 suggestContextualGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4;
- (unsigned long long)_getSplitIndexes:(unsigned long long *)a0 maxCount:(unsigned long long)a1 forPinyinInputString:(id)a2;
- (BOOL)validateWord:(id)a0 inLexiconForLanguage:(id)a1;
- (void)_addGuessesForWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 minAutocorrectionLength:(unsigned long long)a5 previousLetter:(unsigned short)a6 nextLetter:(unsigned short)a7 basicOnly:(BOOL)a8 toGuesses:(id)a9;
- (id)vietnameseModificationForWord:(id)a0;
- (BOOL)findMatchingRangesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 keyEventArray:(id)a2 selectedRangeValue:(id)a3 matchingStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a4 correctableStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a5 matchingKeyEventRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a6 firstMisspelledKeyEventIndex:(unsigned long long *)a7 lastMisspelledKeyEventIndex:(unsigned long long *)a8 previousBackspaceCount:(unsigned long long *)a9;
- (BOOL)getMetaFlagsForWord:(id)a0 inLexiconForLanguage:(id)a1 metaFlags:(unsigned int *)a2 otherMetaFlags:(unsigned int *)a3;
- (id)_loadLexiconsForLanguage:(id)a0 localization:(id)a1 onQueue:(id)a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)a0 findMisspelledWordInString:(id)a1 languages:(id)a2 wordCount:(long long *)a3 countOnly:(BOOL)a4 correction:(id *)a5;
- (void)updateAllLexicons;
- (id)stringByRemovingArabicDiacriticsFromString:(id)a0;
- (BOOL)_checkGrammarInString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 bufIO:(struct _PR_BUF_IO { char *x0; unsigned char x1; unsigned char x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; struct _PR_LIMITS *x7; struct _PR_PARA_INFO *x8; struct _PR_ERROR *x9; struct _PR_PARSE_INFO **x10; unsigned char x11; short x12; char x13; char x14; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x15; } *)a5 errorRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a6 details:(id *)a7;
- (id)guessesDictionaryForLanguage:(id)a0;
- (id)_phraseLexiconsForLanguage:(id)a0 waitForResult:(BOOL)a1;
- (id)_phraseLexiconPathForLanguage:(id)a0;
- (unsigned long long)numberOfTurkishSuffixPointsInBuffer:(char *)a0 length:(unsigned long long)a1 maxSuffixPoints:(unsigned long long)a2 suffixPoints:(struct { unsigned long long x0; int x1; } *)a3;
- (BOOL)spellServer:(id)a0 _canChangeCaseOfFirstLetterInString:(id)a1 toUpperCase:(BOOL)a2 language:(id)a3;
- (id)spellServer:(id)a0 suggestContextualGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3 options:(id)a4;
- (id)_crudeNextWordInString:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)stringByReducingArabicAlefVariantsInString:(id)a0;
- (void)resetAllLanguageModels;
- (BOOL)noSuggestForCompletion:(id)a0 language:(id)a1 appIdentifier:(id)a2 alreadyCapitalized:(BOOL)a3;
- (id)sentenceCorrectionsDictionaryForLanguage:(id)a0;
- (id)spellServer:(id)a0 modificationsForPinyinInputString:(id)a1 geometryModelData:(id)a2;
- (id)spellServer:(id)a0 suggestGuessesForKoreanWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 options:(id)a3;
- (id)spellServer:(id)a0 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3 options:(id)a4;
- (BOOL)validateUntilLearnedWord:(id)a0 inLexiconForLanguage:(id)a1;
- (id)spellServer:(id)a0 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3 options:(id)a4;
- (id)_lexiconsForLanguage:(id)a0 waitForResult:(BOOL)a1;
- (id)spellServer:(id)a0 correctionsForPinyinInputString:(id)a1 language:(id)a2;
- (id)_detailWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 description:(id)a1 corrections:(id)a2;
- (id)dataBundle;
- (id)_orthographyByModifyingOrthography:(id)a0 withLatinLanguage:(id)a1;
- (id)spellServer:(id)a0 correctionsForPinyinInputString:(id)a1;
- (id)fallbackLocalizationForLanguage:(id)a0;
- (BOOL)validateNoCapAbbreviation:(id)a0 inLexiconForLanguage:(id)a1;
- (id)_rankedCandidatesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 candidates:(id)a1 language:(id)a2 tagger:(id)a3 taggerIndex:(unsigned long long)a4 appIdentifier:(id)a5 scoreDictionary:(id)a6;
- (void)releaseDatabaseConnections;
- (BOOL)validateWordBuffer:(char *)a0 length:(unsigned long long)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2;
- (id)databasePathForLanguage:(id)a0;
- (float)dynamicScoreForWord:(id)a0 language:(id)a1 appIdentifier:(id)a2;
- (id)spellServer:(id)a0 _retainedFinalModificationsForPinyinInputString:(id)a1 geometryModelData:(id)a2;
- (id)spellServer:(id)a0 suggestWordWithMinimumLength:(unsigned long long)a1 maximumLength:(unsigned long long)a2 language:(id)a3;
- (BOOL)validateAdditionalWord:(id)a0 inLexiconForLanguage:(id)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)a0 checkGrammarInString:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 language:(id)a3 orthography:(id)a4 mutableResults:(id)a5 offset:(unsigned long long)a6 details:(id *)a7;
- (id)spellServer:(id)a0 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3;
- (BOOL)_findMatchingRangesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1 keyEventArray:(id)a2 endingAtIndex:(unsigned long long)a3 matchingStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a4 correctableStringRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a5 matchingKeyEventRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a6 firstMisspelledKeyEventIndex:(unsigned long long *)a7 lastMisspelledKeyEventIndex:(unsigned long long *)a8 previousBackspaceCount:(unsigned long long *)a9;
- (BOOL)spellServer:(id)a0 canChangeCaseOfFirstLetterInString:(id)a1 toUpperCase:(BOOL)a2 language:(id)a3;
- (unsigned long long)loadedLexiconsCountForLanguage:(id)a0;
- (id)_lexiconPathForLocalization:(id)a0 type:(id)a1;
- (id)dictionaryForLanguage:(id)a0 index:(unsigned long long)a1;
- (void)addModifiedPartialPinyinToArray:(id)a0 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a1 fromIndex:(unsigned long long)a2 prevIndex:(unsigned long long)a3 prevPrevIndex:(unsigned long long)a4 prePrevPrevIndex:(unsigned long long)a5 startingModificationsAt:(unsigned long long)a6 inBuffer:(char *)a7 length:(unsigned long long)a8 initialSyllableCount:(unsigned long long)a9 initialScore:(unsigned long long)a10 prevScore:(unsigned long long)a11 prevPrevScore:(unsigned long long)a12 lastSyllableScore:(unsigned long long)a13;
- (BOOL)shouldBlockWord:(id)a0 language:(id)a1 encoding:(unsigned int)a2;
- (id)backgroundMaintenanceQueue;
- (BOOL)validateWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 checkBase:(BOOL)a5 checkDict:(BOOL)a6 checkTemp:(BOOL)a7 checkUser:(BOOL)a8 checkNames:(BOOL)a9 checkHyphens:(BOOL)a10 checkIntercaps:(BOOL)a11 checkOptions:(BOOL)a12 depth:(unsigned long long)a13;
- (id)spellServer:(id)a0 candidatesForSelectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 offset:(unsigned long long)a3 types:(unsigned long long)a4 options:(id)a5 orthography:(id)a6;
- (id)spellServer:(id)a0 stringForInputString:(id)a1 language:(id)a2;
- (id)_phraseLexiconsForLanguage:(id)a0;
- (id)spellServer:(id)a0 suggestCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4;
- (void)setUpdateBundleURL:(id)a0;
- (id)spellServer:(id)a0 finalModificationsForPinyinInputString:(id)a1;
- (id)_standardizedLanguageModelStringForString:(id)a0;
- (void)enumerateCorrectionEntriesForWord:(id)a0 maxCorrections:(unsigned long long)a1 inLexiconForLanguage:(id)a2 withBlock:(id /* block */)a3;
- (BOOL)checkWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3 index:(unsigned long long)a4;
- (id)localizationForLanguage:(id)a0;
- (id)sentenceTerminatorCharacterSet;
- (id)_loadLanguageModelForLanguage:(id)a0 localization:(id)a1 appIdentifier:(id)a2 onQueue:(id)a3;
- (id)languageModelLocalizationForLanguage:(id)a0;
- (void)addAlternateDataBundleURL:(id)a0;
- (id)internalStringForKoreanExternalString:(id)a0;
- (void)_readLanguageModelParametersFromDictionary:(id)a0;
- (id)languageModelForLanguage:(id)a0 appIdentifier:(id)a1 waitForResult:(BOOL)a2;
- (void)addGuessesForKoreanWord:(id)a0 includeAdditionalGuesses:(BOOL)a1 toGuesses:(id)a2;
- (id)spellServer:(id)a0 modificationsForPinyinInputString:(id)a1;
- (void)releaseAllLanguageModels;
- (id)spellServer:(id)a0 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 inLanguage:(id)a3 options:(id)a4;
- (id)_lexiconPathForLanguage:(id)a0 type:(id)a1;
- (BOOL)onContractionList:(id)a0 language:(id)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2 sender:(id)a3;
- (BOOL)wordIsAlreadyAccented:(id)a0;
- (void)resetDataBundlesForAllLanguages;
- (id)_modifiedGrammarDescriptionForDescription:(id)a0;
- (id)_correctionResultForString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 offset:(unsigned long long)a3 tagger:(id)a4 taggerIndex:(unsigned long long)a5 appIdentifier:(id)a6 dictionary:(id)a7 languages:(id)a8 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a9 onlyAtInsertionPoint:(BOOL)a10 capitalize:(BOOL)a11 autocapitalize:(BOOL)a12 keyEventArray:(id)a13 selectedRangeValue:(id)a14 previousLetter:(unsigned short)a15 nextLetter:(unsigned short)a16 isAlternateLanguage:(BOOL)a17 extraMisspellingCount:(unsigned long long)a18 extraCorrectionCount:(unsigned long long *)a19;
- (unsigned long long)_contextLengthForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 language:(id)a1 tagger:(id)a2 taggerIndex:(unsigned long long)a3 languageModel:(id)a4 maxContextLength:(unsigned long long)a5 context:(unsigned int *)a6 cleanOffset:(unsigned long long *)a7 lastTokenRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a8 lastTokenID:(unsigned int *)a9;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3 forPrediction:(BOOL)a4 alreadyCapitalized:(BOOL)a5;
- (BOOL)_acceptWithoutAccentForString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3;
- (id)assetDataBundleURLsForLanguage:(id)a0;
- (BOOL)_checkEnglishGrammarInString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 indexIntoBuffer:(unsigned long long)a2 bufferLength:(unsigned long long)a3 language:(id)a4 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a5 sender:(id)a6 bufIO:(struct _PR_BUF_IO { char *x0; unsigned char x1; unsigned char x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; struct _PR_LIMITS *x7; struct _PR_PARA_INFO *x8; struct _PR_ERROR *x9; struct _PR_PARSE_INFO **x10; unsigned char x11; short x12; char x13; char x14; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x15; } *)a7 retval:(int *)a8 errorRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a9 details:(id *)a10;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)a0 findMisspelledWordInString:(id)a1 language:(id)a2 wordCount:(long long *)a3 countOnly:(BOOL)a4;
- (BOOL)checkNegativeWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3 alreadyCapitalized:(BOOL)a4;
- (id)spellServer:(id)a0 prefixesForPinyinInputString:(id)a1 language:(id)a2;
- (char *)_validatedGuessWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a3 sender:(id)a4 checkUser:(BOOL)a5 additionalBuffer:(char *)a6;
- (id)capitalizationDictionaryArrayForLanguage:(id)a0;
- (id)_phraseCapitalizationResultForString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 currentWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 inString:(id)a3 offset:(unsigned long long)a4 language:(id)a5 onlyAtInsertionPoint:(BOOL)a6 keyEventArray:(id)a7 selectedRangeValue:(id)a8;
- (BOOL)validateVariantWord:(id)a0 inLexiconForLanguage:(id)a1;
- (void)loadLanguageModelForLanguage:(id)a0;
- (void *)databaseConnectionForLanguage:(id)a0;
- (id)spellServer:(id)a0 _retainedModificationsForPinyinInputString:(id)a1 geometryModelData:(id)a2;
- (id)_recursiveRetainedAlternativesForPinyinInputString:(id)a0 depth:(unsigned long long)a1;
- (id)spellServer:(id)a0 checkString:(id)a1 offset:(unsigned long long)a2 types:(unsigned long long)a3 options:(id)a4 orthography:(id)a5 wordCount:(long long *)a6;
- (BOOL)_getUnigramProbabilityForString:(id)a0 languageModel:(id)a1 probability:(double *)a2;
- (id)_stringForTokenIDs:(const unsigned int *)a0 tokenCount:(unsigned long long)a1 entryString:(id)a2 languageModel:(id)a3 language:(id)a4 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a5 sender:(id)a6 encoding:(unsigned int)a7 prefix:(id)a8 capitalized:(BOOL)a9;
- (BOOL)checkNameWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3 globalOnly:(BOOL)a4;
- (void)resetDataBundlesForLanguage:(id)a0;
- (BOOL)looksLikeArticledNoun:(id)a0 language:(id)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2;
- (id)_loadPhraseLexiconsForLanguage:(id)a0 localization:(id)a1 onQueue:(id)a2;
- (id)spellServer:(id)a0 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3;
- (unsigned int)_tokenIDForString:(id)a0 languageModel:(id)a1 language:(id)a2 createIfAbsent:(BOOL)a3 terminatorTokenID:(unsigned int)a4;
- (id)spellServer:(id)a0 suggestWordWithLengthInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 language:(id)a2;
- (id)_accentCorrectionResultForString:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 offset:(unsigned long long)a3 language:(id)a4 onlyAtInsertionPoint:(BOOL)a5 capitalize:(BOOL)a6 keyEventArray:(id)a7 selectedRangeValue:(id)a8;
- (void)addSpecialModifiedPinyinToArray:(id)a0 inBuffer:(char *)a1 length:(unsigned long long)a2 atEnd:(BOOL)a3;
- (id)spellServer:(id)a0 suggestGuessesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3 options:(id)a4;
- (id)lexiconForLanguage:(id)a0;
- (id)dataBundlesForLanguage:(id)a0;
- (BOOL)checkSpecialPrefixesForWordBuffer:(char *)a0 length:(unsigned long long)a1;
- (void)addModifiedPinyinToArray:(id)a0 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a1 fromIndex:(unsigned long long)a2 prevIndex:(unsigned long long)a3 prevPrevIndex:(unsigned long long)a4 startingModificationsAt:(unsigned long long)a5 inBuffer:(char *)a6 length:(unsigned long long)a7 initialSyllableCount:(unsigned long long)a8 initialScore:(unsigned long long)a9 prevScore:(unsigned long long)a10 prevPrevScore:(unsigned long long)a11 lastSyllableScore:(unsigned long long)a12 couldBeAbbreviatedPinyin:(BOOL)a13;
- (void)loadLexiconsAndLanguageModelsForLanguage:(id)a0;
- (id)spellServer:(id)a0 extendedAlternativesForPinyinInputString:(id)a1 language:(id)a2;
- (void)_readLanguageModelParametersFromDefaults;
- (BOOL)useUnigramProbabilityForLanguage:(id)a0;
- (id)spellServer:(id)a0 _retainedAlternativesForPinyinInputString:(id)a1 extended:(BOOL)a2;
- (float)dynamicScoreForWord:(id)a0 languageModel:(id)a1 language:(id)a2;
- (id)spellServer:(id)a0 extendedAlternativesForPinyinInputString:(id)a1;
- (void)releaseAllLexicons;
- (BOOL)validateAbbreviationOrNumberWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a4 sender:(id)a5;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })spellServer:(id)a0 findMisspelledWordInString:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 languages:(id)a3 topLanguages:(id)a4 orthography:(id)a5 checkOrthography:(BOOL)a6 mutableResults:(id)a7 offset:(unsigned long long)a8 autocorrect:(BOOL)a9 onlyAtInsertionPoint:(BOOL)a10 initialCapitalize:(BOOL)a11 autocapitalize:(BOOL)a12 keyEventArray:(id)a13 appIdentifier:(id)a14 selectedRangeValue:(id)a15 wordCount:(long long *)a16 countOnly:(BOOL)a17 correction:(id *)a18;
- (void)enumerateAssetDataItemsForLocale:(id)a0 withBlock:(id /* block */)a1;
- (unsigned int)encodingForLanguage:(id)a0;
- (id)spellServer:(id)a0 suggestGuessDictionariesForWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3 options:(id)a4 errorModel:(id)a5;
- (id)spellServer:(id)a0 alternativesForPinyinInputString:(id)a1 language:(id)a2;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3 forPrediction:(BOOL)a4 alreadyCapitalized:(BOOL)a5 depth:(unsigned long long)a6;
- (id)backgroundLoadingQueue;
- (id)spellServer:(id)a0 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 inString:(id)a2 language:(id)a3 options:(id)a4;
- (void)addLexiconGuessesForWord:(id)a0 buffer:(char *)a1 length:(unsigned long long)a2 language:(id)a3 minCorrectionLength:(unsigned long long)a4 minExtendedCorrectionLength:(unsigned long long)a5 isCapitalized:(BOOL)a6 stopAfterFreeInsertions:(BOOL)a7 toGuesses:(id)a8;
- (BOOL)validateWord:(id)a0 inLexicon:(id)a1;
- (id)_crudePreviousWordInString:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 precededBy:(id *)a2;
- (BOOL)checkNegativeWordBuffer:(char *)a0 length:(unsigned long long)a1 language:(id)a2 encoding:(unsigned int)a3;
- (void)updateLexiconsForLanguage:(id)a0;
- (id)spellServer:(id)a0 suggestGuessesForWord:(id)a1 inLanguage:(id)a2;
- (BOOL)_addLanguageModelCompletionsForPartialWordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 language:(id)a1 connection:(struct _PR_DB_IO { unsigned char x0; unsigned char x1; struct _PR_DOC_FORMAT { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned short x6; unsigned short x7; } x2; unsigned short x3; unsigned short x4; unsigned int *x5; unsigned char x6; short x7; short x8; short x9; short x10; unsigned short x11; struct _PR_DBINIT { struct _PR_FILE *x0[1]; struct _PR_FILE *x1; struct _PR_FILE *x2; struct _PR_FILE *x3; struct _PR_FILE *x4; } x12; struct _RULEFILE *x13[1]; struct _PR_STATUS { unsigned int x0; int x1; unsigned short x2; } x14; } *)a2 sender:(id)a3 encoding:(unsigned int)a4 tagger:(id)a5 taggerIndex:(unsigned long long)a6 appIdentifier:(id)a7 waitForLanguageModel:(BOOL)a8 candidates:(id)a9 tryTransliteration:(BOOL *)a10;
- (id)_rankedCandidatesForCandidateList:(id)a0 language:(id)a1 tagger:(id)a2 taggerIndex:(unsigned long long)a3 appIdentifier:(id)a4;
- (id)languageModelCompletionsForPartialWord:(id)a0 language:(id)a1 sender:(id)a2 appIdentifier:(id)a3;

@end

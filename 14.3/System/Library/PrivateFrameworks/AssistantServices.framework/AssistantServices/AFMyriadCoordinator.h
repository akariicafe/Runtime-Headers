@class NSMutableDictionary, AFMyriadAdvertisementContextManager, AFPowerAssertionManager, NSDate, NSObject, SFDiagnostics, AFWatchdogTimer, WPHeySiri, NSDateFormatter, AFMyriadAdvertisementContextRecord, NSString, AFMyriadSession, AFNotifyStatePublisher, AFMyriadRecord, NSData, _DKKnowledgeStore, AFMyriadEmergencyCallPunchout, NSUUID;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface AFMyriadCoordinator : NSObject <WPHeySiriProtocol> {
    unsigned long long _myriadState;
    unsigned long long _nextState;
    unsigned long long _previousState;
    NSData *_incomingAudioData;
    NSData *_previousAdvertisedData;
    NSMutableDictionary *_replies;
    NSMutableDictionary *_replyCounts;
    NSMutableDictionary *_repliesBeforeDecision;
    NSMutableDictionary *_previousTrumps;
    NSMutableDictionary *_incomingTrumps;
    NSMutableDictionary *_multipleContinuations;
    id _delegate;
    NSString *_deviceClassName;
    unsigned char _deviceClass;
    unsigned char _productType;
    NSString *_productTypeName;
    int _deviceAdjust;
    double _deviceDelay;
    double _deviceTrumpDelay;
    double _deviceVTEndtimeDistanceThreshold;
    double _deviceInEarDelay;
    double _deviceInEarInterval;
    unsigned char _deviceGroup;
    NSObject<OS_dispatch_queue> *_myriadWorkQueue;
    NSObject<OS_dispatch_queue> *_myriadAdvertisementContextQueue;
    NSString *_timerLabel;
    NSObject<OS_dispatch_source> *_timer;
    NSUUID *_eventToken;
    AFWatchdogTimer *_overallTimeout;
    AFPowerAssertionManager *_powerAssertionManager;
    struct __CFNotificationCenter { } *_center;
    AFMyriadRecord *_triggerRecord;
    long long _recordType;
    unsigned long long _voiceTriggerTime;
    float _delayTarget;
    float _advertInterval;
    int _nTimesContinued;
    int _nTimesExtended;
    char _incomingAdjustment;
    int _slowdownMsecs;
    int _testInducedSlowdownMsecs;
    AFMyriadRecord *_maxSlowdownRecord;
    BOOL _BTLEReady;
    BOOL _inTask;
    BOOL _inSetupMode;
    BOOL _ducking;
    BOOL _stateMachineEncounteredError;
    BOOL _listenTimerIsRunning;
    BOOL _coordinationEnabled;
    BOOL _BLEActivityEnabled;
    BOOL _clientIsDirectActivating;
    BOOL _clientIsInEarActivation;
    BOOL _clientRecentlyLostElection;
    BOOL _clientLostDueToTrumping;
    BOOL _clientIsListeningAfterRecentWin;
    BOOL _clientIsWatchActivation;
    BOOL _clientIsWatchTrumpPromote;
    BOOL _clientIsRespondingToSlowdown;
    BOOL _clientDoneRespondingToSlowdown;
    BOOL _clientRespondingToCarPlay;
    BOOL _clientIsDeciding;
    int _constantGoodness;
    NSObject<OS_dispatch_source> *_timerSource;
    NSDateFormatter *_dateFormat;
    WPHeySiri *_heySiriBTLE;
    _DKKnowledgeStore *_coreDuetStore;
    NSUUID *_designatedSelfID;
    double _lastSiriActivationTime;
    NSDate *_triggerTime;
    int _nDeltaTs;
    AFMyriadEmergencyCallPunchout *_callPunchout;
    unsigned long long _lastDecisionTime;
    BOOL _lastDecision;
    unsigned short _lastPHash;
    double _lastEmergencyAttempt;
    BOOL _wasEmergency;
    BOOL _suppressLateTrigger;
    SFDiagnostics *_sfdiagnostics;
    AFWatchdogTimer *_sfDiagnosticsTimer;
    struct { BOOL didRequestForBTLEScan; BOOL didRequestForBTLEAdvertisement; } _heySiriBTLEState;
    struct { NSObject<OS_dispatch_source> *waitTimer; id /* block */ waitBlock; BOOL isWaitTimerSuspended; } _wiproxReadinessTimer;
    struct { NSDate *advertTriggerAdvStartTime; NSDate *advertTriggerEndTime; } _advTiming;
    AFMyriadAdvertisementContextManager *_advContextManager;
    AFMyriadAdvertisementContextRecord *_contextRecord;
    AFMyriadSession *_myriadSession;
    AFNotifyStatePublisher *_electionBeginPublisher;
    AFNotifyStatePublisher *_electionWinPublisher;
    AFNotifyStatePublisher *_electionLossPublisher;
    AFNotifyStatePublisher *_electionRepostWinDecisionPublisher;
    unsigned long long _electionPublisherState;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)currentCoordinator;
+ (void)didChangeDefaults;
+ (void)clearCurrentCoordinator;

- (void)stopListening;
- (id)_stateAsString;
- (id)stateAsString:(unsigned long long)a0;
- (BOOL)inTask;
- (unsigned char)deviceClass;
- (void).cxx_destruct;
- (void)endTask;
- (void)dealloc;
- (void)_startListening:(id /* block */)a0;
- (void)_unduck;
- (void)startAdvertisingFromVoiceTrigger;
- (void)startAdvertisingFromInTaskVoiceTrigger;
- (void)startAdvertisingFromInEarTrigger;
- (void)readDefaults;
- (void)_initializeTimer;
- (void)startAdvertisingFromCarPlayTrigger;
- (void)notifyCurrentDecisionResult;
- (void)_initDeviceClassAndAdjustments;
- (void)_initializeWiProxReadinessTimer;
- (void)_resetAdvertisementTimings;
- (void)enterState:(unsigned long long)a0;
- (void)waitWiProx:(long long)a0 andExecute:(id /* block */)a1;
- (void)_clearWiProxReadinessTimer;
- (void)_readDefaults;
- (void)startAdvertisingSlowdown:(unsigned short)a0;
- (id)_phsSetupRecord;
- (id)voiceTriggerRecord;
- (void)advertiseWith:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2;
- (void)startAdvertisingFromVoiceTriggerWithContext:(id)a0;
- (void)_setMyraidAudioData:(id)a0;
- (void)_startAdvertisingFromInTaskVoiceTrigger;
- (void)_enterState:(unsigned long long)a0;
- (void)_startAdvertisingFromVoiceTrigger;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(char)a0 withContext:(id)a1;
- (void)startAdvertisingFromVoiceTriggerWithAdjustment:(char)a0 bias:(unsigned char)a1 withContext:(id)a2;
- (void)startWatchAdvertisingFromVoiceTriggerWithContext:(id)a0;
- (BOOL)_inTaskTriggerWasTooSoon;
- (void)startWatchAdvertisingFromDirectTriggerWithContext:(id)a0;
- (id)directTriggerRecord;
- (id)emptyRecord;
- (void)startAdvertisingFromDirectTriggerWithContext:(id)a0;
- (void)startAdvertisingFromOutgoingTriggerWithContext:(id)a0;
- (void)_duringNextWindowEnterState:(unsigned long long)a0;
- (id)responseObject:(unsigned short)a0;
- (void)_stopAdvertising:(id /* block */)a0;
- (void)startAdvertisingFromInTaskVoiceTriggerWithContext:(id)a0;
- (void)startAdvertisingFromAlertFiringVoiceTriggerWithContext:(id)a0;
- (void)_startAdvertising:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2;
- (void)startListening;
- (void)_startTimer:(id)a0 for:(float)a1 thenExecute:(id /* block */)a2;
- (void)_endAdvertising:(id /* block */)a0;
- (void)endAdvertising:(id /* block */)a0;
- (id)_sortedReplies;
- (void)_advertiseTrigger;
- (BOOL)_deviceShouldContinue:(id)a0;
- (void)_winElection;
- (unsigned long long)_nextElectionPublisherState;
- (void)_loseElection;
- (void)_cancelOverallTimeout;
- (void)_ageWedgeFilter;
- (void)resetReplies;
- (void)_resetAudioData;
- (BOOL)_shouldContinueFor:(id)a0;
- (id)_myriadSession;
- (void)_endAdvertisingWithDeviceProhibitions:(id)a0;
- (id)_endAdvertisingAnalyticsContext:(BOOL)a0;
- (id)_stateAsString:(unsigned long long)a0;
- (void)_createDispatchTimerWithTime:(unsigned long long)a0 toExecute:(id /* block */)a1;
- (void)_enteringIntoState:(unsigned long long)a0 fromState:(unsigned long long)a1;
- (void)_leaveBLEDiagnosticMode;
- (void)_stopAdvertisingAndListening;
- (void)_resetActionWindows;
- (void)_handleStateMachineErrorIfNeeded;
- (void)_clearMyriadSession;
- (BOOL)_shouldStopListeningBeforeAdvertising;
- (void)_stopListening:(id /* block */)a0;
- (void)_createMyriadSessionIfRequired;
- (void)_addElectionAdvertisementDataToMyriadSession:(id)a0;
- (void)_setupActionWindows;
- (void)_setOverallTimeout;
- (void)_startTimer:(id)a0 for:(float)a1 thenEnterState:(unsigned long long)a2;
- (id)lateSuppressionRecord;
- (void)_advertise:(id)a0 andMoveTo:(unsigned long long)a1;
- (id)continuationRecord;
- (id)emergencyRecord;
- (id)emergencyHandledRecord;
- (void)_advertiseIndefinite:(id)a0;
- (void)_advertiseSlowdown;
- (void)_advertiseSuppressTriggerInOutput;
- (void)_enterBLEDiagnosticMode;
- (void)_waitWiProxAndExecute:(id /* block */)a0;
- (void)_waitWiProx:(long long)a0 andExecute:(id /* block */)a1;
- (BOOL)_shouldUseContextCollector;
- (double)_contextFetchDelayForAdvertimentInterval:(double)a0 advertisementDelay:(double)a1;
- (void)_updateRepliesWith:(id)a0 id:(id)a1 data:(id)a2;
- (void)_createDispatchTimerForEvent:(id)a0 toExecute:(id /* block */)a1;
- (void)_duringNextWindowExecute:(id /* block */)a0;
- (id)_testAndFilterAdvertisementsFromContextCollector:(id)a0 voiceTriggerEndTime:(double)a1 advertisementDispatchTime:(double)a2 advertisement:(id)a3;
- (BOOL)_testAndUpdateWedgeFilter:(id)a0;
- (id)slowdownRecord:(unsigned short)a0;
- (void)endAdvertising;
- (void)_suppressDeviceIfNeededWithVoiceTriggerEndTime:(double)a0 adverisementDispatchTime:(double)a1;
- (void)setupAdvIntervalsInDelay:(float *)a0 interval:(float *)a1 withSlowdown:(int)a2;
- (void)_adjustActionWindowsFromSlowdown:(int)a0;
- (void)_advertiseWith:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2 thenExecute:(id /* block */)a3;
- (BOOL)_okayToSuppressOnOutput;
- (void)_advertise:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2 andMoveTo:(unsigned long long)a3;
- (unsigned char)recentEventBump;
- (id)_sortedReplies:(id)a0;
- (void)_resumeWiProxReadinessTimer;
- (void)_pushMyriadAdvertisementContextToContextCollectorWithAdvertisementInterval:(double)a0 advertisementDelay:(double)a1;
- (BOOL)_isAPhone:(unsigned char)a0;
- (void)_suspendWiProxReadinessTimer;
- (void)_createWaitWiProxTimer:(long long)a0 waitBlock:(id /* block */)a1;
- (BOOL)_shouldHandleEmergency;
- (void)_signalEmergencyCallHandled;
- (void)heySiri:(id)a0 foundDevice:(id)a1 withInfo:(id)a2;
- (void)heySiriDidUpdateState:(id)a0;
- (void)heySiriStartedAdvertising:(id)a0;
- (void)heySiriAdvertisingPending:(id)a0;
- (void)heySiriStoppedAdvertising:(id)a0;
- (void)heySiri:(id)a0 failedToStartAdvertisingWithError:(id)a1;
- (void)setInTask:(BOOL)a0;
- (void)heySiriStartedScanning:(id)a0;
- (void)heySiriStoppedScanning:(id)a0;
- (void)heySiri:(id)a0 failedToStartScanningWithError:(id)a1;
- (void)preheatWiProx;
- (void)startAdvertisingForPHSSetupAfterDelay:(float)a0 maxInterval:(float)a1;
- (void)resetStateMachine;
- (void)startAdvertisingFromVoiceTriggerAdjusted:(char)a0;
- (void)startWatchAdvertisingFromVoiceTrigger;
- (void)startWatchAdvertisingFromDirectTrigger;
- (void)setupEnabled:(BOOL)a0;
- (unsigned char)deviceGroup;
- (void)_cancelTimer;
- (void)startAdvertisingFromDirectTrigger;
- (void)startAdvertisingFromOutgoingTrigger;
- (void)startAdvertisingEmergencyHandled;
- (void)startAdvertisingFromInTaskTriggerWithContext:(id)a0;
- (void)startAdvertisingFromAlertFiringVoiceTrigger;
- (void)startResponseAdvertising:(unsigned short)a0;
- (void)endAdvertisingAfterDelay:(float)a0;
- (void)endAdvertisingWithDeviceProhibitions:(id)a0;
- (void)_startListenTimer;
- (void)startListening:(id /* block */)a0;
- (void)stopListening:(id /* block */)a0;
- (void)startAdvertising:(id)a0 afterDelay:(float)a1 maxInterval:(float)a2;
- (void)advertiseWith:(id)a0;
- (void)injectAdvertisementForTesting:(id)a0 forDevice:(id)a1;
- (float)deviceTrumpDelay;
- (void)startListeningToEmergencySignal;
- (void)startAdvertisingEmergencySignal;
- (void)setupActionWindows;
- (void)updateRepliesWith:(id)a0 id:(id)a1 data:(id)a2;
- (void)myriadSession:(id /* block */)a0;
- (void)resetMyriadCoordinator:(id /* block */)a0;
- (id)initWithDelegate:(id)a0;
- (void)startAdvertisingEmergency;
- (void)_createDispatchTimerFor:(double)a0 toExecute:(id /* block */)a1;

@end

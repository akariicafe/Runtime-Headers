@class _Body, _Background, NSString, _Arms, _Foot, NSCalendar, NSDate, NTKCharacterResourceLoader, _Head, UIColor;
@protocol MTLRenderPipelineState, MTLBuffer, MTLDevice;

@interface NTKCharacterRenderer : NSObject {
    id<MTLDevice> _mtlDevice;
    NSCalendar *_cal;
    NSDate *_overrideDate;
    float _overrideDateFraction;
    double _fromHourPercent;
    double _fromMinutePercent;
    double _toHourPercent;
    double _toMinutePercent;
    float _animationFrameInterval;
    int _prevState;
    int _idealState;
    int _curState;
    int _endState;
    int _prevPose;
    int _idealPose;
    int _curPose;
    int _endPose;
    float _hourHandPos;
    float _minHandPos;
    id<MTLRenderPipelineState> _pipelines[4];
    unsigned long long _currentPipeline;
    BOOL _animatingToNewDate;
    BOOL _animatingIntoOrb;
    BOOL _applyInstantTimeWarp;
    BOOL _pinHandsBrightnessToMax;
    BOOL _sayCheese;
    float _blinkDuration;
    float _scrubOffset;
    BOOL _inTimeTravel;
    NSDate *_timeTravelEnterDate;
    struct CharacterPoseSpecs { float bodyOffsetX; float footOffsetX; float headOffsetX; } _poseSpecs[2];
    struct CharacterStateSpecs { unsigned int bodyTexIdx; unsigned int minuteTexIdx; unsigned int hourArmOnLeftShoulder; float xFlipBody; float xFlipFoot; float xFlipFace; float xFlipMinuteHand; float xFlipHourHand; float leftShoulderX; float rightShoulderX; float minuteElbowBend; float hourElbowBend; } _stateSpecs[4];
}

@property (retain) id<MTLBuffer> geometryMtlBuffer;
@property (retain) _Head *head;
@property (retain) _Body *body;
@property (retain) _Foot *foot;
@property (retain) _Arms *arms;
@property (retain) _Background *background;
@property (readonly) UIColor *clothingColor;
@property (readonly) double desaturation;
@property (readonly) int modelMatrixLoc;
@property (readonly) int clothingColorLoc;
@property (readonly) float characterScale;
@property (readonly) float zoomFraction;
@property (readonly) struct { void /* unknown type, empty encoding */ columns[4]; } headMatrix;
@property (readonly) void /* unknown type, empty encoding */ neckBone;
@property (readonly) float dampenBones;
@property (readonly) float curTimeMod1Sec;
@property (readonly) float curTimeMod15Sec;
@property (readonly, nonatomic) NSString *prefix;
@property (readonly, nonatomic) BOOL active;
@property (readonly, nonatomic) NTKCharacterResourceLoader *loader;
@property (nonatomic) float characterBrightness;
@property (nonatomic) float glowBrightness;
@property (nonatomic) float numbersBrightness;
@property (nonatomic) float numbersScale;
@property (nonatomic) float numbersAlpha;
@property void /* unknown type, empty encoding */ globalOffset;
@property void /* unknown type, empty encoding */ globalScale;

+ (id)rendererWithCharacter:(unsigned long long)a0 loader:(id)a1;

- (void).cxx_destruct;
- (void)setTimeOffset:(double)a0;
- (void)dealloc;
- (void)activate;
- (void)setAnimationFrameInterval:(float)a0;
- (int)curPose;
- (void)_localeChanged;
- (void)deactivate;
- (void)setScrubOffset:(float)a0;
- (void)prepareToZoom;
- (void)cleanupAfterZoom;
- (void)_raiseFootForBodyAnimation;
- (void)_lowerFootAfterBodyAnimation;
- (void)setupGeometry;
- (void)setupPipelineState;
- (void)setupBodyState;
- (void)significantTimeChanged:(id)a0;
- (void)setupTextures;
- (void)_updateStateAndPose;
- (float)_getElbowScaleForPosition:(float)a0;
- (void)loadNumbersTexture;
- (void)loadBackgroundTextures;
- (void)loadBodyTextures;
- (void)loadHeadTextures;
- (void)loadFootTextures;
- (void)loadHeadBlinkTextures;
- (void)loadShiftTextures;
- (void)_updateTimeVariables;
- (void)bindPipelineState:(unsigned long long)a0 withEncoder:(id)a1;
- (void)_updateWaitingForFootRaise;
- (void)_idleBodyAfterAnimation;
- (void)_applyClothingColorWithEncoder:(id)a0;
- (BOOL)_footIsRaisedEnoughToStartAnimation;
- (void)_doneWaitingForFootRaise;
- (int)getBlinkFrameFor15sTime:(float)a0;
- (void)_drawArmFromShoulder:(id)a0 toWrist:(SEL)a1 withBend:(float)a2 withEncoder:(id)a3;
- (void)_resetTimeVariable;
- (void)_drawBackgroundWithEncoder:(id)a0;
- (void)_drawCharacterWithEncoder:(id)a0;
- (void)_drawBodyWithEncoder:(id)a0;
- (void)_drawTappingFootWithEncoder:(id)a0;
- (void)_drawHourHandWithEncoder:(id)a0;
- (void)_drawHeadWithEncoder:(id)a0;
- (void)_drawMinuteHandWithEncoder:(id)a0;
- (void)copyStateFrom:(id)a0;
- (void)prepareToAnimateToDate:(id)a0 forOrb:(BOOL)a1;
- (void)setOverrideDateFraction:(float)a0;
- (void)cleanupToOverrideDate:(id)a0;
- (void)setClothingColor:(id)a0 andDesaturation:(double)a1;
- (id)initWithCharacter:(unsigned long long)a0 loader:(id)a1 prefix:(id)a2;
- (void)_setPoseSpecs:(struct CharacterPoseSpecs { float x0; float x1; float x2; }[2])a0;
- (void)_setStateSpecs:(struct CharacterStateSpecs { unsigned int x0; unsigned int x1; unsigned int x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; }[4])a0;
- (void)_setBlinkDuration:(float)a0;
- (void)setZoomFraction:(double)a0 diameter:(double)a1;
- (void)forceUpdateTimeVariables;
- (void)scrubToDate:(id)a0;
- (void)renderWithEncoder:(id)a0;
- (int)curState;

@end

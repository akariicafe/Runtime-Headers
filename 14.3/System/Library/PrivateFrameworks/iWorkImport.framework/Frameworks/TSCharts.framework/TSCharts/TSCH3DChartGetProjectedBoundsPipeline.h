@class TSCH3DChartScenePropertyAccessor, TSCH3DCamera;

@interface TSCH3DChartGetProjectedBoundsPipeline : TSCH3DGetBoundsPipeline {
    struct ChartProjectedBoundsSpaces { struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mChart; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mOrient; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mDrawing; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mLayout; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mLayoutInPage; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mBodyLayout; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mBodyLayoutInPage; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } mContainingViewport; } mSpaces;
    TSCH3DCamera *mOriginalCamera;
    TSCH3DChartScenePropertyAccessor *mOriginalSceneAccessor;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mShadowsLayoutBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mLayoutBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mConstantDepthBodyLayoutBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mBodyLayoutBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mLabelsLayoutBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mChartBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mOrientBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mDrawingBounds;
    struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMin; struct tvec3<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; union { float z; float b; float p; } ; } mMax; } mLabelsBounds;
}

@property (readonly, nonatomic) const struct ChartProjectedBoundsSpaces { struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x0; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x1; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x2; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x3; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x4; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x5; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x6; struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x0; struct tvec2<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; } x1; } x7; } *spaces;
@property (nonatomic) struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } layoutInPage;
@property (nonatomic) struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } bodyLayoutInPage;
@property (nonatomic) struct box<glm::detail::tvec2<float> > { struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMin; struct tvec2<float> { union { float x; float r; float s; } ; union { float y; float g; float t; } ; } mMax; } containingViewport;
@property (nonatomic) BOOL enableScaledDepth;
@property (nonatomic) int labelsMode;

- (BOOL)run;
- (void)dealloc;
- (id).cxx_construct;
- (void)updateBounds;
- (id)updatedConstantDepthSceneFromScene:(id)a0;
- (struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x0; struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x1; })boundsFromObjectBoundsOfType:(int)a0;
- (id)drawingBoundsSceneObjectClasses;
- (id)labelsSceneObjectClasses;
- (id)chartSceneObjectClasses;
- (int)p_depthBoundsTypes;
- (struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x0; struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x1; })getBoundsFromObjectBoundsForScene:(id)a0 boundsType:(int)a1;
- (void)calculateLayoutBoundsSkippingLayoutSceneBounds:(BOOL)a0;
- (void)calculateLayoutBounds;
- (BOOL)p_excludesLabels;
- (void)calculateLabelsBounds;
- (BOOL)p_updatesLabelsOnly;
- (void)calculateBounds;
- (void)calculateLabelsBoundsIfNecssary;
- (void)calculateBoundsIfNecessary;
- (void)updateLayoutBounds;
- (void)updateLayoutBoundsIfNecessary;
- (void)updateRenderBounds;
- (struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x0; struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x1; })p_extendLabelsBoundsToBounds:(const struct box<glm::detail::tvec3<float> > { struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x0; struct tvec3<float> { union { float x0; float x1; float x2; } x0; union { float x0; float x1; float x2; } x1; union { float x0; float x1; float x2; } x2; } x1; } *)a0;
- (void)calculateLayoutLabelsBounds;
- (Class)labelsMeshRendererClassForLabelsRenderer:(id)a0;

@end

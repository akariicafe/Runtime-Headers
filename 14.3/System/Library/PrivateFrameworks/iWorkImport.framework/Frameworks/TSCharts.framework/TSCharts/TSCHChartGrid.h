@class NSMutableArray, NSMutableDictionary;
@protocol TSCHNotifyOnModify;

@interface TSCHChartGrid : NSObject <NSCopying, TSDMixing> {
    BOOL mAddingMultipleRows;
    unsigned long long mNextRowNumber;
    BOOL mAddingMultipleCols;
    unsigned long long mNextColNumber;
    unsigned long long mTransitionLevel;
    BOOL mSkipUUIDAssertions;
    NSMutableDictionary *mRowIdToIndexMap;
    NSMutableDictionary *mColumnIdToIndexMap;
}

@property (readonly, copy, nonatomic) NSMutableArray *rowNames;
@property (readonly, copy, nonatomic) NSMutableArray *columnNames;
@property (readonly, copy, nonatomic) NSMutableArray *values;
@property (weak, nonatomic) id<TSCHNotifyOnModify> objectToNotify;
@property (nonatomic) int direction;
@property (nonatomic) BOOL dirty;
@property (readonly, nonatomic) unsigned long long numberOfRows;
@property (readonly, nonatomic) unsigned long long numberOfColumns;
@property (readonly, copy, nonatomic) NSMutableArray *rowIds;
@property (readonly, copy, nonatomic) NSMutableArray *columnIds;

- (id)init;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (void)removeColumn:(unsigned long long)a0;
- (id)createUUID;
- (void)removeRow:(unsigned long long)a0;
- (void)willModify;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (BOOL)isEquivalentForCrossDocumentPasteMasterComparison:(id)a0;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (id)nameForRow:(unsigned long long)a0;
- (void)setNameForRow:(unsigned long long)a0 toName:(id)a1;
- (id)nameForColumn:(unsigned long long)a0;
- (void)setNameForColumn:(unsigned long long)a0 toName:(id)a1;
- (void)generateRowColumnIdMaps;
- (BOOL)contentsEqualToGrid:(id)a0;
- (unsigned long long)noAssertNumberOfRows;
- (unsigned long long)noAssertNumberOfColumns;
- (BOOL)p_name:(id)a0 isInArray:(id)a1;
- (void)p_adjustNameListLength:(BOOL)a0;
- (id)createUUIDArrayWithCount:(unsigned long long)a0;
- (void)updateRowAndColumnIndexMaps;
- (void)p_updateRowIndexMap;
- (void)p_updateColumnIndexMap;
- (void)p_updateRowMapStartingAtIndex:(unsigned long long)a0;
- (void)p_updateColumnMapStartingAtIndex:(unsigned long long)a0;
- (void)p_updateIdMapStartingAtIndex:(unsigned long long)a0 isRow:(BOOL)a1;
- (id)p_uuidsForRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)extractRowNames:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 returningRowIds:(id *)a1 valueRows:(id *)a2;
- (void)insertRowsAt:(unsigned long long)a0 names:(id)a1 data:(id)a2 withIds:(id)a3;
- (id)p_uuidsForColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)extractColumnNames:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 returningColumnIds:(id *)a1 valueColumns:(id *)a2;
- (void)insertColumnsAt:(unsigned long long)a0 names:(id)a1 data:(id)a2 withIds:(id)a3;
- (void)takeDataFromDictionary:(id)a0 rowIds:(id)a1 columnIds:(id)a2;
- (void)insertRow:(unsigned long long)a0 withName:(id)a1 withId:(id)a2;
- (void)insertColumn:(unsigned long long)a0 withName:(id)a1 withId:(id)a2;
- (void)setValue:(id)a0 forRow:(unsigned long long)a1 column:(unsigned long long)a2;
- (id)valueForRow:(unsigned long long)a0 column:(unsigned long long)a1;
- (void)incrementTransitionLevel;
- (void)decrementTransitionLevel;
- (id)rowIdForRow:(unsigned long long)a0;
- (id)columnIdForColumn:(unsigned long long)a0;
- (unsigned long long)rowIndexForRowId:(id)a0;
- (unsigned long long)columnIndexForColumnId:(id)a0;
- (void)addingMultipleRows:(BOOL)a0;
- (void)addingMultipleCols:(BOOL)a0;
- (id)getNewColumnNameForLocale:(id)a0;
- (id)getNewRowNameForLocale:(id)a0;
- (void)adjustRowAndColumnNameListLength;
- (void)validateRowColumnIdMapsAndFix:(BOOL)a0;
- (void)setRowIds:(id)a0;
- (void)setColumnIds:(id)a0;
- (void)moveRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 afterRow:(long long)a1;
- (void)moveColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 afterColumn:(long long)a1;
- (id)extractGridValuesReturningRowNames:(id *)a0 rowIds:(id *)a1 columnNames:(id *)a2 columnIds:(id *)a3;
- (void)insertRowsNames:(id)a0 at:(unsigned long long)a1 withIds:(id)a2;
- (void)insertColumnNames:(id)a0 at:(unsigned long long)a1 withIds:(id)a2;
- (void)takeDataFromDictionary:(id)a0;
- (id)gridAdapterForRow:(unsigned long long)a0;
- (id)gridAdapterForColumn:(unsigned long long)a0;
- (id)gridAdapterForRowCount;
- (id)gridAdapterForColumnCount;
- (id)gridAdapterForRowConstant;
- (id)gridAdapterForColumnConstant;
- (void)loadFromPreUFFArchive:(const struct ChartGridArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct RepeatedPtrField<std::__1::basic_string<char> > { struct Arena *x0; int x1; int x2; struct Rep *x3; } x4; struct RepeatedPtrField<std::__1::basic_string<char> > { struct Arena *x0; int x1; int x2; struct Rep *x3; } x5; struct RepeatedPtrField<TSCH::PreUFF::ChartGridArchive_ValueRow> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x6; int x7; BOOL x8; } *)a0;
- (void)insertRow:(unsigned long long)a0 withName:(id)a1;
- (void)insertColumn:(unsigned long long)a0 withName:(id)a1;
- (void)saveToUnityArchive:(struct ChartArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<1> { unsigned int x0[1]; } x3; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x5; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x6; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x7; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x8; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x9; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x10; struct RectArchive *x11; struct Reference *x12; struct ChartGridArchive *x13; struct Reference *x14; struct Reference *x15; struct Reference *x16; struct Reference *x17; struct Reference *x18; struct SparseReferenceArray *x19; struct SparseReferenceArray *x20; struct Reference *x21; int x22; int x23; int x24; BOOL x25; BOOL x26; BOOL x27; unsigned int x28; } *)a0 forCopy:(BOOL)a1;
- (void)loadFromUnityArchive:(const struct ChartArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<1> { unsigned int x0[1]; } x3; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x5; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x6; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x7; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x8; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x9; struct RepeatedPtrField<TSP::Reference> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x10; struct RectArchive *x11; struct Reference *x12; struct ChartGridArchive *x13; struct Reference *x14; struct Reference *x15; struct Reference *x16; struct Reference *x17; struct Reference *x18; struct SparseReferenceArray *x19; struct SparseReferenceArray *x20; struct Reference *x21; int x22; int x23; int x24; BOOL x25; BOOL x26; BOOL x27; unsigned int x28; } *)a0 chartInfo:(id)a1;

@end

@class NSString, NSUUID, TSUCustomFormat;

@interface TSCHNumberFormat : NSObject <NSCopying, NSMutableCopying, TSCHDataFormatter, TSCHCustomFormatSupport, TSCHDataFormatterPersistableStyleObject, TSCHDataFormatterSupportedClientFormatObject, TSCHFormatTypeSupport> {
    NSString *mPrefixString;
    NSString *mSuffixString;
    struct { unsigned int mFormatType; union { struct { unsigned short mCurrencyCodeIndex : 16; unsigned char mDecimalPlaces : 8; unsigned char mNegativeStyle : 3; unsigned char mShowThousandsSeparator : 1; unsigned char mUseAccountingStyle : 1; } mNumberFormatStruct; struct { unsigned char mFractionAccuracy : 8; } mFractionFormatStruct; struct { unsigned char mBase : 8; unsigned char mBasePlaces : 8; unsigned char mBaseUseMinusSign : 1; } mBaseFormatStruct; struct { unsigned char mSuppressDateFormat : 1; unsigned char mSuppressTimeFormat : 1; NSString *mDateTimeFormat; } mDateFormatStruct; struct { unsigned char mUseAutomaticUnits : 1; int mDurationUnitSmallest; int mDurationUnitLargest; int mDurationStyle; } mDurationFormatStruct; struct { NSUUID *mCustomFormatKey; TSUCustomFormat *mCustomFormat; unsigned int mLegacyID; unsigned char mAppliedConditionKey; } mCustomFormatStruct; } ; } mFormatStruct;
}

@property (readonly, nonatomic) BOOL isCurrency;
@property (readonly, nonatomic) BOOL isPercentage;
@property (readonly, nonatomic) BOOL isFraction;
@property (readonly, nonatomic) BOOL isBase;
@property (readonly, nonatomic) unsigned int decimalPlaces;
@property (readonly, copy, nonatomic) NSString *currencyCode;
@property (readonly, nonatomic) BOOL useAccountingStyle;
@property (readonly, nonatomic) int negativeStyle;
@property (readonly, nonatomic) BOOL showThousandsSeparator;
@property (readonly, nonatomic) int fractionAccuracy;
@property (readonly, copy, nonatomic) NSString *prefixString;
@property (readonly, copy, nonatomic) NSString *suffixString;
@property (readonly, nonatomic) double scaleFactor;
@property (readonly, nonatomic) unsigned int base;
@property (readonly, nonatomic) unsigned int basePlaces;
@property (readonly, nonatomic) BOOL baseUseMinusSign;
@property (readonly, nonatomic) BOOL usesNumberFormatStruct;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) unsigned int formatType;

+ (id)instanceWithArchive:(const struct FormatStructArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<2> { unsigned int x0[2]; } x3; struct RepeatedPtrField<std::__1::basic_string<char> > { struct Arena *x0; int x1; int x2; struct Rep *x3; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x8; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x9; struct IndexSet *x10; struct UUID *x11; struct CustomFormatArchive *x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; double x26; unsigned int x27; unsigned int x28; double x29; double x30; double x31; unsigned int x32; unsigned int x33; BOOL x34; BOOL x35; BOOL x36; BOOL x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; BOOL x47; BOOL x48; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x49; } *)a0 unarchiver:(id)a1;
+ (id)numberFormatWithFormatType:(unsigned int)a0 decimalPlaces:(unsigned int)a1 showThousandsSeparator:(BOOL)a2;
+ (id)defaultDecimalNumberFormat;
+ (BOOL)supportsFormatType:(unsigned int)a0;
+ (id)numberFormatWithFormatStruct:(struct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; unsigned char x1 : 1; id x2; } x3; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x4; struct { id x0; id x1; unsigned int x2; unsigned char x3; } x5; } x1; })a0 prefixString:(id)a1 suffixString:(id)a2;
+ (int)labelFormatTypeFromTSUFormatType:(unsigned int)a0;
+ (int)defaultFractionAccuracy;
+ (id)defaultCurrencyCode;
+ (int)defaultNegativeNumberStyle;
+ (unsigned int)defaultBase;
+ (unsigned int)defaultBasePlaces;
+ (BOOL)defaultBaseUseMinusSign;
+ (id)customFormatForKey:(id)a0 documentRoot:(id)a1 fromPasteboardCustomFormatList:(id)a2;
+ (id)automaticDecimalPlaces;

- (int)valueType;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)dealloc;
- (BOOL)isCustom;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (unsigned int)p_base;
- (BOOL)isEqual:(id)a0;
- (id)customFormatKey;
- (struct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; unsigned char x1 : 1; id x2; } x3; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x4; struct { id x0; id x1; unsigned int x2; unsigned char x3; } x5; } x1; })formatStruct;
- (id)initWithArchive:(const struct FormatStructArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<2> { unsigned int x0[2]; } x3; struct RepeatedPtrField<std::__1::basic_string<char> > { struct Arena *x0; int x1; int x2; struct Rep *x3; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x8; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x9; struct IndexSet *x10; struct UUID *x11; struct CustomFormatArchive *x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; double x26; unsigned int x27; unsigned int x28; double x29; double x30; double x31; unsigned int x32; unsigned int x33; BOOL x34; BOOL x35; BOOL x36; BOOL x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; BOOL x47; BOOL x48; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x49; } *)a0 unarchiver:(id)a1;
- (void)saveToArchive:(struct FormatStructArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<2> { unsigned int x0[2]; } x3; struct RepeatedPtrField<std::__1::basic_string<char> > { struct Arena *x0; int x1; int x2; struct Rep *x3; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x8; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x9; struct IndexSet *x10; struct UUID *x11; struct CustomFormatArchive *x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; double x26; unsigned int x27; unsigned int x28; double x29; double x30; double x31; unsigned int x32; unsigned int x33; BOOL x34; BOOL x35; BOOL x36; BOOL x37; unsigned int x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; BOOL x47; BOOL x48; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x49; } *)a0 archiver:(id)a1;
- (BOOL)isCompatibleWithDataFormatter:(id)a0;
- (id)dataFormatterForDocumentRoot:(id)a0 pasteboardCustomFormatList:(id)a1;
- (id)convertToPersistableStyleObject;
- (long long)numberOfDecimalPlaces;
- (id)customFormatListKey;
- (id)numberFormatByResettingToDefaultNegativeStyleIfAvailable;
- (id)chartFormattedStringForValue:(id)a0 locale:(id)a1;
- (id)chartFormattedInspectorStringForValue:(id)a0 locale:(id)a1;
- (id)convertToSupportedClientFormatObjectWithLocale:(id)a0;
- (id)upgradedNumberFormatFromPreUFFOrUnity1_0;
- (id)initWithFormatStruct:(struct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; unsigned char x1 : 1; id x2; } x3; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x4; struct { id x0; id x1; unsigned int x2; unsigned char x3; } x5; } x1; })a0 prefixString:(id)a1 suffixString:(id)a2;
- (id)p_initWithFormatStruct:(struct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; unsigned char x1 : 1; id x2; } x3; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x4; struct { id x0; id x1; unsigned int x2; unsigned char x3; } x5; } x1; })a0 prefixString:(id)a1 suffixString:(id)a2;
- (BOOL)isScientific;
- (unsigned int)p_decimalPlacesIfAvailable;
- (unsigned int)p_decimalPlaces;
- (id)p_currencyCode;
- (id)p_currencyCodeIfAvailable;
- (BOOL)p_useAccountingStyle;
- (BOOL)p_useAccountingStyleIfAvailable;
- (int)p_negativeStyle;
- (int)p_negativeStyleIfAvailable;
- (BOOL)p_showThousandsSeparator;
- (BOOL)p_showThousandsSeparatorIfAvailable;
- (int)p_fractionAccuracy;
- (int)p_fractionAccuracyIfAvailable;
- (unsigned int)p_basePlaces;
- (BOOL)p_baseUseMinusSign;
- (int)negativeStyleForNumberFormatter;
- (id)p_formattedBodyStringForDouble:(double)a0 locale:(id)a1;
- (id)p_formatTypeDescription;
- (BOOL)p_hasValidDecimalPlaces;
- (unsigned int)p_baseIfAvailable;
- (unsigned int)p_basePlacesIfAvailable;
- (BOOL)p_baseUseMinusSignIfAvailable;
- (BOOL)supportsAutoMinMax;

@end

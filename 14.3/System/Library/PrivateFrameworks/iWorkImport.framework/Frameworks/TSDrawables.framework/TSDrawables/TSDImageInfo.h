@class TSDImageDataHelper, NSString, NSArray, TSUBezierPath, TSDMediaStyle, TSDMaskInfo, TSDInfoGeometry, NSObject, TSDImageAdjustments, TSPData, TSPObject, NSSet;
@protocol TSDInfo, TSDOwningAttachment;

@interface TSDImageInfo : TSDMediaInfo <TSDReducibleImageContainer, TSDContainerInfo, TSDMixing, TSSPresetSource, TSKTransformableObject, TSDCompatibilityAwareMediaContainer, TSDAttachmentAwareContainerInfo> {
    TSUBezierPath *mInstantAlphaPath;
    struct CGSize { double width; double height; } mNaturalSize;
    TSDImageDataHelper *mImageDataHelper;
    TSPData *mThumbnailAdjustedImageData;
    TSDImageDataHelper *mAdjustedImageDataHelper;
    TSPData *mEnhancedImageData;
    TSDMediaStyle *mStyle;
    TSUBezierPath *mTracedPath;
    BOOL mShouldTracePDFData;
    BOOL mCurrentlyInDocument;
    double mDescentForInlineLayout;
    BOOL mDescentForInlineLayoutValid;
}

@property (retain, nonatomic) TSPData *imageData;
@property (retain, nonatomic) TSPData *thumbnailImageData;
@property (retain, nonatomic) TSPData *originalImageData;
@property (readonly, nonatomic) TSPData *imageDataForExport;
@property (readonly, nonatomic) TSDMediaStyle *imageStyle;
@property (retain, nonatomic) TSDMaskInfo *maskInfo;
@property (retain, nonatomic) TSUBezierPath *instantAlphaPath;
@property (readonly, nonatomic) BOOL canBeMasked;
@property (copy, nonatomic) TSDImageAdjustments *imageAdjustments;
@property (retain, nonatomic) TSPData *adjustedImageData;
@property (retain, nonatomic) TSPData *thumbnailAdjustedImageData;
@property (retain, nonatomic) TSPData *enhancedImageData;
@property (readonly, nonatomic) BOOL canAdjustImage;
@property (readonly, nonatomic) TSUBezierPath *tracedPath;
@property (nonatomic) BOOL shouldTracePDFData;
@property (nonatomic) struct CGSize { double x0; double x1; } naturalSize;
@property (readonly, nonatomic) double descentForInlineLayout;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *childInfos;
@property (readonly, nonatomic) BOOL isMaster;
@property (copy, nonatomic) TSDInfoGeometry *geometry;
@property (nonatomic) NSObject<TSDInfo> *parentInfo;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (readonly, nonatomic, getter=isFloatingAboveText) BOOL floatingAboveText;
@property (readonly, nonatomic, getter=isAnchoredToText) BOOL anchoredToText;
@property (readonly, nonatomic, getter=isInlineWithText) BOOL inlineWithText;
@property (readonly, nonatomic, getter=isInlineWithTextWithWrap) BOOL inlineWithTextWithWrap;
@property (readonly, nonatomic, getter=isAttachedToBodyText) BOOL attachedToBodyText;
@property (nonatomic) BOOL matchesObjectPlaceholderGeometry;
@property (readonly, nonatomic) NSSet *infosToObserveForAttachedInfo;

+ (id)presetKinds;
+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(int)a2;
+ (id)i_thumbnailForImageData:(id)a0;
+ (void)adjustIncomingImageGeometry:(id)a0 maskGeometry:(id)a1 forImageData:(id)a2 maskedWithInstantAlphaPath:(id)a3 withNaturalSize:(struct CGSize { double x0; double x1; })a4 forTargetImageGeometry:(id)a5 withTargetMaskGeometry:(id)a6;
+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(int)a2 reservedCount:(unsigned long long)a3;
+ (id)bootstrapPropertyMapForPresetIndex:(unsigned long long)a0 inTheme:(id)a1 alternate:(int)a2;

- (BOOL)needsDownload;
- (BOOL)isPDF;
- (id)objectForProperty:(int)a0;
- (void).cxx_destruct;
- (id)mediaFileType;
- (void)dealloc;
- (id)style;
- (id)copyWithContext:(id)a0;
- (struct CGSize { double x0; double x1; })originalSize;
- (void)setStyle:(id)a0;
- (Class)repClass;
- (Class)layoutClass;
- (void)acceptVisitor:(id)a0;
- (void)setExteriorTextWrap:(id)a0;
- (BOOL)allowsTitle;
- (BOOL)isMasked;
- (id)presetKind;
- (void)willBeRemovedFromDocumentRoot:(id)a0;
- (void)wasRemovedFromDocumentRoot:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })computeFullTransform;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (struct CGSize { double x0; double x1; })targetSizeForImageData:(id)a0 associatedHint:(id)a1;
- (Class)styleClass;
- (struct CGSize { double x0; double x1; })defaultOriginalSize;
- (id)copyWithContext:(id)a0 style:(id)a1;
- (id)geometryWithMask;
- (id)defaultMaskInfoWithContext:(id)a0;
- (id)defaultMaskInfo;
- (id)initWithContext:(id)a0 geometry:(id)a1 style:(id)a2 imageData:(id)a3 originalImageData:(id)a4;
- (id)mediaDisplayName;
- (struct CGSize { double x0; double x1; })rawDataSize;
- (BOOL)maskCanBeReset;
- (id)updatedMaskInfoGeometryForImageDraggedBy:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })centerForReplacingWithNewMedia;
- (void)updateGeometryToReplaceMediaInfo:(id)a0;
- (BOOL)canResetMediaSize;
- (id)styleIdentifierTemplateForNewPreset;
- (void)willBeAddedToDocumentRoot:(id)a0 dolcContext:(id)a1;
- (void)wasAddedToDocumentRoot:(id)a0 dolcContext:(id)a1;
- (void)loadFromArchive:(const struct ImageArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<1> { unsigned int x0[1]; } x3; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x4; struct DrawableArchive *x5; struct Reference *x6; struct Reference *x7; struct Size *x8; struct Reference *x9; struct Reference *x10; struct Reference *x11; struct Size *x12; struct Path *x13; struct DataReference *x14; struct DataReference *x15; struct DataReference *x16; struct ImageAdjustmentsArchive *x17; struct DataReference *x18; struct DataReference *x19; struct DataReference *x20; struct Path *x21; struct Attribution *x22; unsigned int x23; BOOL x24; BOOL x25; } *)a0 unarchiver:(id)a1;
- (void)saveToArchive:(struct ImageArchive { void /* function */ **x0; struct ExtensionSet { struct Arena *x0; unsigned short x1; unsigned short x2; union AllocatedData { struct KeyValue *x0; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > *x1; } x3; } x1; struct InternalMetadataWithArena { void *x0; } x2; struct HasBits<1> { unsigned int x0[1]; } x3; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x4; struct DrawableArchive *x5; struct Reference *x6; struct Reference *x7; struct Size *x8; struct Reference *x9; struct Reference *x10; struct Reference *x11; struct Size *x12; struct Path *x13; struct DataReference *x14; struct DataReference *x15; struct DataReference *x16; struct ImageAdjustmentsArchive *x17; struct DataReference *x18; struct DataReference *x19; struct DataReference *x20; struct Path *x21; struct Attribution *x22; unsigned int x23; BOOL x24; BOOL x25; } *)a0 archiver:(id)a1;
- (id)infoForSelectionPath:(id)a0;
- (void)loadFromUnarchiver:(id)a0;
- (void)saveToArchiver:(id)a0;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (BOOL)allowsCaption;
- (void)scaleDownSizeToFitWithinSize:(struct CGSize { double x0; double x1; })a0;
- (id)typesToPromiseWhenCopyingSingleDrawable;
- (id)promisedDataForType:(id)a0;
- (BOOL)p_canCopy:(id)a0;
- (BOOL)canCopyData;
- (long long)mediaCompatibilityTypeForData:(id)a0 associatedHint:(id)a1;
- (BOOL)allowsParentGroupToBeResizedWithoutAspectRatioLock;
- (void)setImageData:(id)a0 thumbnailData:(id)a1;
- (void)setAdjustedImageData:(id)a0 thumbnailData:(id)a1;
- (BOOL)p_aspectRatioUnlockedResizeWouldCauseSkew;
- (BOOL)hasPDFDataForCopy;
- (id)initWithContext:(id)a0 geometry:(id)a1 style:(id)a2 imageData:(id)a3 thumbnailImageData:(id)a4 originalImageData:(id)a5 imageAdjustments:(id)a6 adjustedImageData:(id)a7 thumbnailAdjustedImageData:(id)a8;
- (id)i_instantAlphaPathIgnoringNaturalSize;
- (id)propertyNameForFlagsCommand;
- (id)propertyNameForOriginalSizeCommand;
- (unsigned short)propertyIdForFlagsCommand;
- (unsigned short)propertyIdForOriginalSizeCommand;
- (id)mediaDataForDragging;
- (void)p_upgradeImageGeometry;
- (void)p_upgradeImageThumbnail;

@end

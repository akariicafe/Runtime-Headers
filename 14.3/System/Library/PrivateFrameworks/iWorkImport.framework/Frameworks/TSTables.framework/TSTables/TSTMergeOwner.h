@class TSCECalculationEngine, TSTMergeChangeDistributor, NSString, TSTMergeRangeCache, TSTTableModel, TSTFormulaStore;

@interface TSTMergeOwner : NSObject <TSCEFormulaOwning>

@property (retain, nonatomic) TSTMergeRangeCache *mergeRangeCache;
@property (nonatomic) BOOL needsMergeCacheLoad;
@property (readonly, weak, nonatomic) TSTTableModel *tableModel;
@property (weak, nonatomic) TSCECalculationEngine *calculationEngine;
@property (retain, nonatomic) TSTFormulaStore *formulaStore;
@property (retain, nonatomic) TSTMergeChangeDistributor *mergeChangeDistributor;
@property (readonly, nonatomic) unsigned long long count;
@property (readonly, nonatomic) BOOL isEmpty;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } ownerUID;
@property (readonly, nonatomic) struct unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > > { struct __hash_table<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true>, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true> > { float __value_; } __p3_; } __table_; } mergeOriginsMap;
@property (readonly, nonatomic) struct unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > > { struct __hash_table<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true>, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true> > { float __value_; } __p3_; } __table_; } reverseOriginsMap;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)init;
- (void).cxx_destruct;
- (BOOL)find:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id).cxx_construct;
- (long long)evaluationMode;
- (id)initWithTableModel:(id)a0;
- (BOOL)hasMergeRanges;
- (id)mergedGridIndicesForDimension:(long long)a0;
- (struct vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; struct TSUModelCellRect *x1; struct __compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; } x2; })mergeRanges;
- (void)saveToArchive:(struct MergeOwnerArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct CFUUIDArchive *x4; struct FormulaStoreArchive *x5; } *)a0 archiver:(id)a1;
- (unsigned short)ownerKind;
- (id)linkedResolver;
- (void)writeResultsForCalcEngine:(id)a0;
- (void)invalidateForCalcEngine:(id)a0;
- (struct TSCERecalculationState { unsigned char x0; })multiEvaluateFormulasAt:(const struct TSCECellCoordSet { struct map<unsigned short, TSUIndexSet, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUIndexSet> > > { struct __tree<std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, TSUIndexSet> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, TSUIndexSet>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true> > { unsigned long long x0; } x2; } x0; } x0; } *)a0 withCalcEngine:(id)a1 recalcOptions:(struct TSCERecalculationState { unsigned char x0; })a2;
- (void)unregisterFromCalcEngine;
- (struct vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; struct TSUModelCellRect *x1; struct __compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; } x2; })mergeRangesIntersectingBaseCellRegion:(id)a0;
- (BOOL)insertBaseMergeRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)initWithTableModel:(id)a0 ownerUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (id)initWithArchive:(const struct MergeOwnerArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct CFUUIDArchive *x4; struct FormulaStoreArchive *x5; } *)a0 unarchiver:(id)a1 forTableModel:(id)a2;
- (void)resetMergeCache;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })mergedRangeForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)rewriteMergesForInsertedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1 isRows:(BOOL)a2;
- (void)rewriteMergesForRemovedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1 isRows:(BOOL)a2;
- (void)remapTableUIDsInFormulasWithMap:(const struct UUIDMap<TSP::UUIDMap> { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x0; } x3; } x0; } *)a0 calcEngine:(id)a1;
- (void)enumerateMergeFormulasUsingBlock:(id /* block */)a0;
- (BOOL)insertBaseMergeRangeRemovingOverlaps:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (void)assertCollaborationConvergence;
- (int)registerWithCalcEngine:(id)a0 baseOwnerUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (BOOL)hasRangeSpanningRowsForCellRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)performActionReturningInverse:(id)a0;
- (BOOL)isValidMergeRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)hasMergeRangeSpanningRowsForBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (unsigned long long)markForRollback;
- (void)rollbackToMark:(unsigned long long)a0;
- (id)mergeIndexesForRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)mergeIndexesForBaseCellRegion:(id)a0;
- (void)openRewritingTransaction;
- (void)commitRewritingTransaction;
- (struct vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; struct TSUModelCellRect *x1; struct __compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; } x2; })mergeRangesIntersectingBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })expandBaseCellRectToCoverMergedCells:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)expandBaseCellRegionToCoverMergedCells:(id)a0;
- (BOOL)hasRangeSpanningRowsForCellRegion:(id)a0;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })mergeOriginForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)loadMergeCache;
- (void)p_updateOriginMapWithSourceCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 destCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (void)p_moveCellFromCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 toCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (id)mergeActionForBaseCellRegion:(id)a0 nonOriginPartialsOnly:(BOOL)a1;
- (void)reloadMergeCacheForIndexes:(id)a0;
- (void)p_dirtyCellsForMerge:(const struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } *)a0;
- (void)removeBaseMergeRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)p_shrinkReturningInverseForAction:(id)a0;
- (id)p_growReturningInverseForAction:(id)a0;
- (id)p_shrinkMergesAtIndexes:(id)a0 intersectedByBaseRegion:(id)a1;
- (id)shrinkReturningInverseForBaseCellRegion:(id)a0;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })p_growRangeFrom:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0 toDesired:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a1;
- (void)enumerateMergesIntersectingBaseCellRegion:(id)a0 usingBlock:(id /* block */)a1;
- (id)allMergesAsString;
- (void)resetMergeOriginMap;
- (id)mergeActionForBaseCellRegion:(id)a0;
- (id)removeReturningInverseForBaseCellRegion:(id)a0;
- (void)p_enumerateMergesUsingBlock:(id /* block */)a0;
- (struct vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; struct TSUModelCellRect *x1; struct __compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect *x0; } x2; })mergeRangesAndCrumbsIntersectingBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)hasMergeRangesIntersectingBaseCellRect:(const struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } *)a0;
- (BOOL)hasMergeRangesIntersectingBaseCellRegion:(id)a0;
- (BOOL)mergeRangesPartiallyIntersectBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)mergeRangesPartiallyIntersectBaseCellRegion:(id)a0;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })rewroteFormula:(id)a0 atCoordinate:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 withRewriteSpec:(id)a2 isUndo:(BOOL)a3;

@end

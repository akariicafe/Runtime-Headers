@class TSTCellUIDList;

@interface TSTCellUIDIterator : NSObject {
    struct deque<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct __split_buffer<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> > { struct UUIDData<TSP::UUIDData> **__first_; struct UUIDData<TSP::UUIDData> **__begin_; struct UUIDData<TSP::UUIDData> **__end_; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> **, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> > { struct UUIDData<TSP::UUIDData> **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { unsigned long long __value_; } __size_; } _recentRowResults;
    struct deque<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct __split_buffer<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> > { struct UUIDData<TSP::UUIDData> **__first_; struct UUIDData<TSP::UUIDData> **__begin_; struct UUIDData<TSP::UUIDData> **__end_; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> **, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> > { struct UUIDData<TSP::UUIDData> **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { unsigned long long __value_; } __size_; } _recentColumnResults;
}

@property (retain, nonatomic) TSTCellUIDList *cellUIDList;
@property (nonatomic) unsigned long long index;
@property (nonatomic) unsigned long long rowIndex;
@property (nonatomic) unsigned long long columnIndex;
@property (nonatomic) unsigned long long rowRemainDup;
@property (nonatomic) unsigned long long columnRemainDup;
@property (nonatomic) unsigned long long lastRowDiffPos;
@property (nonatomic) unsigned long long lastColumnDiffPos;
@property (nonatomic) struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } _column; struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } _row; } cellUID;

- (void).cxx_destruct;
- (id).cxx_construct;
- (struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })nextCellUID;
- (BOOL)nextCellUIDsBatch:(struct vector<TSTCellUID, std::__1::allocator<TSTCellUID> > { struct TSTCellUID *x0; struct TSTCellUID *x1; struct __compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> > { struct TSTCellUID *x0; } x2; } *)a0 batchSize:(unsigned long long)a1;
- (id)initWithCellUIDList:(id)a0;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })p_nextCellRefIdWithUIDIndexList:(const struct vector<int, std::__1::allocator<int> > { int *x0; int *x1; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x0; } x2; } *)a0 UIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1 index:(unsigned long long *)a2 remainDup:(unsigned long long *)a3 lastDiffPos:(unsigned long long *)a4 recentResults:(struct deque<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct __split_buffer<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> > { struct UUIDData<TSP::UUIDData> **x0; struct UUIDData<TSP::UUIDData> **x1; struct UUIDData<TSP::UUIDData> **x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> **, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> > { struct UUIDData<TSP::UUIDData> **x0; } x3; } x0; unsigned long long x1; struct __compressed_pair<unsigned long, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { unsigned long long x0; } x2; } *)a5;
- (struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })_nextCellUID_NoDispatch;

@end

@class TSTGroupBy, TSTConditionalStyleSet, TSTTableSortOrder, NSDictionary, TSTConcurrentMutableCellUIDSet, TSTCellWillChangeDistributor, TSTPencilAnnotationOwner, TSTTableModel, TSDStroke, TSTCellStyle, TSTCategoryOrder, TSTArchivedMasterLayoutBundle, TSCEOwnerUidMapper, TSTLayoutHint, TSCECalculationEngine, TSTTableTranslator, TSDFill, TSWPShapeStyle, TSCECoordMapper, TSTMasterLayout, TSWPParagraphStyle, TSTCategoryOwner, TSDInfoGeometry, TSTColumnRowUIDMap, TSTStructuredTextImportRecord, TSUMutableUUIDSet, NSArray, TSTHiddenStates, TSTConditionalStyleFormulaOwner, TSTHiddenStatesOwner, TSTSortRuleReferenceTracker, NSString, NSObject, TSTTablePartitioner, TSPObject, TSTTableStyle, TSTSummaryModel, TSTStrokeSidecar, NSUUID, TSTTableStylePreset, TSTTableFilterSet;
@protocol TSDInfo, TSDOwningAttachment;

@interface TSTTableInfo : TSDDrawableInfo <TSSPropertySource, TSDReplaceableMediaContainer, TSDReducibleImageContainer, TSDCompatibilityAwareMediaContainer, TSCECalculationEngineRegistration, TSDContainerInfo, TSDMixing, TSKModel, TSKSearchable, TSSPresetSource, TSSStyleClient, TSCEColumnRowUIDMapping, TSTCompatibilityVersionProviding, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableHiddenRowColumnProviding, TSTAdditionalHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSTTableStrokeProviding, TSWPStorageParent, TSWPTextStatisticsTrackerProvider> {
    TSTTableModel *_tableModel;
    TSTConditionalStyleSet *_noRuleConditionalStyleSet;
    BOOL _needsFilterSetUpdated;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) TSUMutableUUIDSet *rowUIDsWithPendingGroupingChanges;
@property (nonatomic) BOOL migratingStylesOnly;
@property (retain, nonatomic) TSUMutableUUIDSet *rowUIDsForImportedGroupingRows;
@property (nonatomic) BOOL documentIsClosing;
@property (nonatomic) struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__begin_; struct UUIDData<TSP::UUIDData> *__end_; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__value_; } __end_cap_; } _colIdList; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__begin_; struct UUIDData<TSP::UUIDData> *__end_; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__value_; } __end_cap_; } _rowIdList; } tableTranslatorBaseMapForPasteboard;
@property (nonatomic) struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__begin_; struct UUIDData<TSP::UUIDData> *__end_; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__value_; } __end_cap_; } _colIdList; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__begin_; struct UUIDData<TSP::UUIDData> *__end_; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *__value_; } __end_cap_; } _rowIdList; } tableTranslatorViewMapForPasteboard;
@property (retain, nonatomic) TSTArchivedMasterLayoutBundle *archivedMasterLayoutBundle;
@property (nonatomic) long long formulaCoordSpace;
@property (retain, nonatomic) NSDictionary *dragAndDropDetails;
@property (nonatomic) BOOL isCopyContainingCategoryColumn;
@property (nonatomic) BOOL hasReference;
@property (retain, nonatomic) TSTTablePartitioner *partitioner;
@property (retain, nonatomic) TSTLayoutHint *overrideLayoutHint;
@property (retain, nonatomic) TSTMasterLayout *masterLayout;
@property (readonly, nonatomic, getter=isCategorized) BOOL categorized;
@property (readonly, nonatomic) BOOL hasCategoryRules;
@property (nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly, nonatomic) NSUUID *nsTableUID;
@property (readonly, nonatomic) TSTSummaryModel *summaryModel;
@property (readonly, nonatomic) TSTColumnRowUIDMap *columnRowUIDMap;
@property (readonly, nonatomic) TSTCategoryOrder *categoryOrder;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } tableUID;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } fromTableUID;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } fromGroupByUID;
@property (readonly, nonatomic) TSCEOwnerUidMapper *ownerUIDMapper;
@property (readonly, nonatomic) TSCEOwnerUidMapper *identityOwnerUIDMapper;
@property (nonatomic) BOOL wasCut;
@property (readonly, nonatomic) unsigned int numberOfRows;
@property (readonly, nonatomic) unsigned short numberOfColumns;
@property (nonatomic) unsigned int numberOfHeaderRows;
@property (nonatomic) unsigned int numberOfHeaderColumns;
@property (nonatomic) unsigned int numberOfFooterRows;
@property (readonly, nonatomic) unsigned int minNumberOfHeaderColumns;
@property (readonly, nonatomic) unsigned int maxNumberOfHeaderColumns;
@property (nonatomic) BOOL headerRowsFrozen;
@property (nonatomic) BOOL headerColumnsFrozen;
@property (nonatomic) double defaultRowHeight;
@property (nonatomic) double defaultColumnWidth;
@property (retain, nonatomic) NSString *tableName;
@property (nonatomic) BOOL tableNameEnabled;
@property (nonatomic) double tableNameHeight;
@property (nonatomic) BOOL tableNameBorderEnabled;
@property (readonly, nonatomic) TSDStroke *tableNameBorderStroke;
@property (nonatomic) BOOL repeatingHeaderRowsEnabled;
@property (nonatomic) BOOL repeatingHeaderColumnsEnabled;
@property (readonly, nonatomic) int tableWritingDirection;
@property (nonatomic) long long contentWritingDirection;
@property (readonly, nonatomic) BOOL hasTableBorder;
@property (readonly, nonatomic) BOOL hasAlternatingRows;
@property (nonatomic) BOOL styleApplyClearsAll;
@property (retain, nonatomic) TSTTableStylePreset *tableStylePreset;
@property (readonly, nonatomic) BOOL hasMigratableStylesInBaseTableCells;
@property (readonly, nonatomic) TSDFill *backgroundFill;
@property (readonly, nonatomic) TSDFill *bodyFill;
@property (readonly, nonatomic) TSDFill *headerColumnsFill;
@property (readonly, nonatomic) TSDFill *headerRowsFill;
@property (readonly, nonatomic) TSDFill *footerRowsFill;
@property (readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateAfterRecalc;
@property (readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateNonoverflowingAfterRecalc;
@property (readonly, nonatomic) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property (readonly, nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } conditionalStyleFormulaOwnerUID;
@property (readonly, nonatomic) TSTCategoryOwner *categoryOwner;
@property (readonly, nonatomic) TSTHiddenStatesOwner *hiddenStatesOwner;
@property (retain, nonatomic) TSTHiddenStates *hiddenStates;
@property (readonly, nonatomic) TSTPencilAnnotationOwner *pencilAnnotationOwner;
@property (copy, nonatomic) TSTTableFilterSet *filterSet;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } hiddenStatesUid;
@property (copy, nonatomic) TSTTableSortOrder *sortOrder;
@property (readonly, nonatomic) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property (readonly, nonatomic) TSTStrokeSidecar *strokeSidecar;
@property (readonly, nonatomic) TSTCellWillChangeDistributor *cellWillChangeDistributor;
@property (nonatomic) BOOL presetNeedsStrongOwnership;
@property (nonatomic) BOOL wasUnarchivedFromAProvidedTable;
@property (retain, nonatomic) TSTTableTranslator *translator;
@property (retain, nonatomic) TSCECoordMapper *fromTableCoordMapperForPasteboard;
@property (retain, nonatomic) TSTStructuredTextImportRecord *textImportRecord;
@property (readonly, nonatomic, getter=isReimportable) BOOL reimportable;
@property (readonly, nonatomic, getter=isNewlyImported) BOOL newlyImported;
@property (readonly, nonatomic) BOOL hasImportWarnings;
@property (readonly, nonatomic) unsigned long long tableSizeClass;
@property (readonly, retain, nonatomic) NSArray *rowHeights;
@property (readonly, retain, nonatomic) NSArray *columnWidths;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } range;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bodyRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bodyColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bodyRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } headerRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } footerRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } headerColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } actualHeaderColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } topCornerRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bottomCornerRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } categoryColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } baseColumnRange;
@property (readonly, nonatomic) BOOL wasRemovedFromDocument;
@property (retain, nonatomic) TSTGroupBy *groupBy;
@property (readonly, nonatomic) struct TSUModelColumnIndex { unsigned short x0; } numberOfBaseColumns;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseRows;
@property (readonly, nonatomic) struct TSUModelColumnIndex { unsigned short x0; } numberOfBaseHeaderColumns;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseHeaderRows;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseFooterRows;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseBodyRows;
@property (readonly, nonatomic) struct TSUChromeColumnIndex { unsigned short x0; } numberOfChromeColumns;
@property (readonly, nonatomic) struct TSUChromeRowIndex { unsigned int x0; } numberOfChromeRows;
@property (readonly, nonatomic) struct TSUChromeColumnIndex { unsigned short x0; } numberOfChromeHeaderColumns;
@property (readonly, nonatomic) struct TSUChromeRowIndex { unsigned int x0; } numberOfChromeHeaderRows;
@property (readonly, nonatomic) struct TSUChromeRowIndex { unsigned int x0; } numberOfChromeFooterRows;
@property (readonly, nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } baseTableUID;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } groupByUid;
@property (nonatomic) double categoryColumnWidth;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *childInfos;
@property (readonly, nonatomic) BOOL isMaster;
@property (copy, nonatomic) TSDInfoGeometry *geometry;
@property (nonatomic) NSObject<TSDInfo> *parentInfo;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (readonly, nonatomic, getter=isFloatingAboveText) BOOL floatingAboveText;
@property (readonly, nonatomic, getter=isAnchoredToText) BOOL anchoredToText;
@property (readonly, nonatomic, getter=isInlineWithText) BOOL inlineWithText;
@property (readonly, nonatomic, getter=isInlineWithTextWithWrap) BOOL inlineWithTextWithWrap;
@property (readonly, nonatomic, getter=isAttachedToBodyText) BOOL attachedToBodyText;
@property (nonatomic) BOOL matchesObjectPlaceholderGeometry;
@property (readonly, nonatomic) unsigned long long archivingCompatibilityVersion;
@property (retain, nonatomic) TSTTableStyle *tableStyle;
@property (retain, nonatomic) TSTCellStyle *bodyCellStyle;
@property (retain, nonatomic) TSTCellStyle *headerRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *headerColumnCellStyle;
@property (retain, nonatomic) TSTCellStyle *footerRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel1CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel2CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel3CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel4CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel5CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel1CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel2CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel3CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel4CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel5CellStyle;
@property (retain, nonatomic) TSWPParagraphStyle *bodyTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *headerRowTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *headerColumnTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *footerRowTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel1TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel2TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel3TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel4TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel5TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel1TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel2TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel3TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel4TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel5TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *tableNameStyle;
@property (retain, nonatomic) TSWPShapeStyle *tableNameShapeStyle;
@property (readonly, nonatomic) TSDStroke *defaultHorizontalBorderStroke;
@property (readonly, nonatomic) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property (readonly, nonatomic) TSDStroke *defaultVerticalBorderStroke;
@property (readonly, nonatomic) TSDStroke *bodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *bodyRowStroke;
@property (readonly, nonatomic) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property (readonly, nonatomic) TSDStroke *headerColumnBorderStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBorderStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *headerRowSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBorderStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *footerRowSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5InteriorStroke;
@property (readonly, nonatomic) BOOL autoListRecognition;
@property (readonly, nonatomic) BOOL autoListTermination;
@property (readonly, nonatomic) BOOL textIsLinked;
@property (readonly, nonatomic) BOOL preventsComments;
@property (readonly, nonatomic) BOOL preventsChangeTracking;
@property (readonly, nonatomic) BOOL supportsMultipleColumns;
@property (readonly, nonatomic) BOOL storageChangesInvalidateWrap;
@property (readonly, nonatomic) BOOL supportsVerticalTextLayoutInChildStorages;
@property (readonly, nonatomic) BOOL supportsDropCapsInChildStorages;

+ (id)presetKinds;
+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(int)a2;
+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(int)a2 reservedCount:(unsigned long long)a3;
+ (unsigned long long)tableAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 inTableWithHeaderColumns:(unsigned int)a1 headerRows:(unsigned int)a2 footerRows:(unsigned int)a3 totalRows:(unsigned int)a4;
+ (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForTableArea:(unsigned long long)a0 givenTableSize:(struct { unsigned int x0; unsigned int x1; })a1 numberOfHeaderRows:(unsigned int)a2 numberOfFooterRows:(unsigned int)a3 numberOfHeaderColumns:(unsigned int)a4;
+ (unsigned int)numberOfRowsForProtoIndex:(unsigned long long)a0;
+ (unsigned int)numberOfColumnsForProtoIndex:(unsigned long long)a0;
+ (id)geometryForPrototypeIndex:(long long)a0 withCanvasPoint:(struct CGPoint { double x0; double x1; })a1;
+ (id)tablePrototypeWithIndex:(long long)a0 context:(id)a1 geometry:(id)a2 styles:(id)a3;
+ (BOOL)needsObjectUUID;
+ (void)performRewritesForInsertedTableInfos:(id)a0;
+ (id)tableInfoForTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 withCalcEngine:(id)a1;
+ (BOOL)canPartitionInline;
+ (void)ensureAllTablesAreRegisteredInDocumentRoot:(id)a0;
+ (void)upgradeTablesIfNeeded:(unsigned long long)a0 forDocumentRoot:(id)a1;
+ (BOOL)canPartitionForPrinting;
+ (id)tablePrototypeWithIndex:(long long)a0 context:(id)a1 geometry:(id)a2 styles:(id)a3 forTableInsertOnly:(BOOL)a4;
+ (id)localizedDescriptionForProtoIndex:(unsigned long long)a0;
+ (BOOL)validateNewName:(id)a0 forTable:(id)a1;
+ (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 inTableWithHeaderColumns:(unsigned int)a1 headerRows:(unsigned int)a2 footerRows:(unsigned int)a3 totalRows:(unsigned int)a4;

- (id)resolver;
- (void)setGeometry:(id)a0;
- (unsigned long long)numberOfCells;
- (void)didCopy;
- (id)objectForProperty:(int)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (void)validate;
- (id)tableModel;
- (id)allAnnotations;
- (id)copyWithContext:(id)a0;
- (unsigned int)elementKind;
- (BOOL)checkState;
- (id).cxx_construct;
- (BOOL)isSelectable;
- (id)childEnumerator;
- (Class)repClass;
- (Class)layoutClass;
- (void)acceptVisitor:(id)a0;
- (id)initWithContext:(id)a0 geometry:(id)a1;
- (float)floatValueForProperty:(int)a0;
- (BOOL)containsProperty:(int)a0;
- (unsigned int)numberOfHiddenRows;
- (void)removeRowsAtIndexes:(id)a0;
- (BOOL)allowsTitle;
- (id)componentRootObject;
- (id)searchForAnnotationsWithHitBlock:(id /* block */)a0;
- (id)referencedStyles;
- (void)replaceReferencedStylesUsingBlock:(id /* block */)a0;
- (id)presetKind;
- (BOOL)textIsVerticalAtCharIndex:(unsigned long long)a0;
- (BOOL)supportsAttachedComments;
- (Class)editorClass;
- (BOOL)supportsHyperlinks;
- (void)willCopyWithOtherDrawables:(id)a0;
- (void)adoptStylesheet:(id)a0 withMapper:(id)a1;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)a0 animationFilter:(id)a1;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)a0;
- (id)textureDeliveryStylesLocalized:(BOOL)a0 animationFilter:(id)a1;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (struct CGSize { double x0; double x1; })targetSizeForImageData:(id)a0 associatedHint:(id)a1;
- (void)setInsertionCenterPosition:(struct CGPoint { double x0; double x1; })a0;
- (id)cellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)useBandedFill;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)bandedFillObject;
- (void)setDrawableIsBeingCopied:(BOOL)a0;
- (void)mapTableStylesToStylesheet:(id)a0 withMapper:(id)a1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForTableArea:(unsigned long long)a0;
- (unsigned int)numberOfVisibleBodyRows;
- (unsigned int)numberOfVisibleBodyColumns;
- (BOOL)hasMergeRanges;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })minPopulatedCellRange;
- (void)upgradeFromPreUFF;
- (unsigned int)numberOfHiddenColumns;
- (unsigned int)numberOfUserHiddenRows;
- (unsigned int)numberOfUserHiddenColumns;
- (void)setStyleNetwork:(id)a0;
- (id)mergedGridIndicesForDimension:(long long)a0;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3 styles:(id)a4;
- (id)initForTestingWithContext:(id)a0 rows:(unsigned int)a1 columns:(unsigned int)a2;
- (id)initWithContext:(id)a0 geometry:(id)a1 styles:(id)a2;
- (id)initWithContext:(id)a0 otherTableInfo:(id)a1;
- (void)shiftGeometryToIncludeTableNameHeight;
- (double)masterLayoutEffectiveTableNameHeight;
- (BOOL)isSafeToConvertToImage;
- (BOOL)isSafeToConvertToAttributedString;
- (BOOL)isSafeToConvertToText;
- (void)clearPartitioner;
- (void)scaleInfoGeometry:(struct CGSize { double x0; double x1; })a0;
- (id)mergedContainedStorages;
- (void)didReplaceTextsInStoragesWithPlaceHolderString;
- (void)willClose;
- (id)childEnumeratorForUserFlags:(unsigned long long)a0;
- (void)setPrimitiveGeometry:(id)a0;
- (void)loadFromArchive:(const struct TableInfoArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct DrawableArchive *x4; struct Reference *x5; struct Reference *x6; struct Reference *x7; struct Reference *x8; struct Reference *x9; struct UUID *x10; struct UUID *x11; struct CoordMapperArchive *x12; struct MasterLayoutArchive *x13; unsigned int x14; unsigned int x15; } *)a0 unarchiver:(id)a1;
- (void)saveToArchive:(struct TableInfoArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct DrawableArchive *x4; struct Reference *x5; struct Reference *x6; struct Reference *x7; struct Reference *x8; struct Reference *x9; struct UUID *x10; struct UUID *x11; struct CoordMapperArchive *x12; struct MasterLayoutArchive *x13; unsigned int x14; unsigned int x15; } *)a0 archiver:(id)a1;
- (BOOL)prohibitsModificationToChildren;
- (id)infoForSelectionPath:(id)a0;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)a0;
- (void)loadFromUnarchiver:(id)a0;
- (void)saveToArchiver:(id)a0;
- (BOOL)isEquivalentForCrossDocumentPasteMasterComparison:(id)a0 styleComparisonBlock:(id /* block */)a1;
- (void)chooseUniqueNameInContainer:(id)a0 forPaste:(BOOL)a1 needsNewName:(BOOL)a2 avoidNames:(id)a3;
- (id)allRichTextStorages;
- (id)baseTableModel;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (BOOL)requiresStagesBuildingInReverse;
- (BOOL)suppliesFinalTextures;
- (void)registerWithCalcEngineForDocumentLoad:(id)a0;
- (void)unregisterFromCalcEngine:(id)a0;
- (id)formulaOwner;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })formulaOwnerUID;
- (id)objectToArchiveInDependencyTracker;
- (BOOL)registerLast;
- (BOOL)findChartableRangesFromTableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 getBodyRange:(out struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a1 headerColumnRange:(out struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a2 headerRowRange:(out struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a3;
- (id)indexesOfVisibleRowsInRowRange:(id)a0;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })referenceToHiddenStateFromRow:(unsigned int)a0 toRow:(unsigned int)a1;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })referenceToHiddenStateFromColumn:(unsigned short)a0 toColumn:(unsigned short)a1;
- (BOOL)hasCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })columnUIDForColumnIndex:(unsigned short)a0;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })rowUIDForRowIndex:(unsigned int)a0;
- (id)indexesForBodyRows;
- (id)indexesForSummaryRows;
- (void)iterateCellsInRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 usingBlock:(id /* block */)a3;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)a0;
- (unsigned int)numberOfCategoryColumns;
- (unsigned long long)numberOfComments;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 usingBlock:(id /* block */)a3;
- (BOOL)allowsCaption;
- (void)upgradeFormatsForCustomFormatListU2_0;
- (void)reassignPasteboardCustomFormatKeys;
- (void)registerAllFormulasWithCalculationEngine:(id)a0;
- (BOOL)hasDeferredImportActions;
- (void)processDeferredImportActions;
- (BOOL)shouldCancelScrollingToSelectionPath:(id)a0 forChanges:(id)a1;
- (struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })cellUIDForCellID:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (void)iterateCellsWithFlags:(unsigned long long)a0 searchFlags:(unsigned long long)a1 usingBlock:(id /* block */)a2;
- (int)setCellsWithCellMap:(id)a0 ignoreFormulas:(BOOL)a1 skipDirtyingNonFormulaCells:(BOOL)a2;
- (BOOL)canCommentInCaptionOrTitle;
- (unsigned int)rowIndexForRowUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (id)mutableColumnIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (id)mutableRowIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (int)registerWithCalcEngine:(id)a0;
- (unsigned short)columnIndexForColumnUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })columnUIDsForColumnIndexes:(id)a0;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })rowUIDsForRowIndexes:(id)a0;
- (id)UIDSetForIndexes:(id)a0 isRows:(BOOL)a1;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })tableRangeCoordinate;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })rowUIDsForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })columnUIDsForColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)enumerateAllAnnotationsInModelWithHitBlock:(id /* block */)a0;
- (long long)mediaCompatibilityTypeForData:(id)a0 associatedHint:(id)a1;
- (BOOL)contentsAreRightToLeft;
- (id)columnDisplayNameForCategoryLevel:(unsigned char)a0;
- (id)cellUIDRegionFromCellRegion:(id)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })expandCellRangeToCoverMergedCells:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDForCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a0;
- (id)cellRegionFromCellUIDRegion:(id)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })mergeOriginForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (unsigned int)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned int)a0;
- (id)indexesOfVisibleColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)a0;
- (BOOL)isCategorySummaryRowCollapsed:(unsigned int)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rowRangeUnderSummaryOrLabelRow:(unsigned int)a0;
- (BOOL)isSingleCellOrMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)hasMergeFragmentAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)indexesForCategoryColumnsInRegion:(id)a0;
- (id)indexesForSummaryRowsInRegion:(id)a0;
- (id)indexesForLabelRowsInRegion:(id)a0;
- (id)indexesForGroupingColumnsInRegion:(id)a0;
- (id)indexesForSummaryAndLabelRowsInRegion:(id)a0;
- (unsigned short)categoryColumnIndex;
- (id)indexesForSummaryAndLabelRows;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })mergeRangeAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)newCell;
- (int)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (BOOL)isCategoryColumn:(unsigned short)a0;
- (BOOL)isCategorySummaryRow:(unsigned int)a0;
- (struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; } x2; })mergeRangesIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned char)groupLevelForGroupUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (unsigned char)aggregateTypeForColumnUID:(struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })a0 atGroupLevel:(unsigned char)a1;
- (void)setShouldUseWideRows:(BOOL)a0;
- (double)heightOfRowAtIndex:(unsigned int)a0 isDefault:(out BOOL *)a1;
- (void)setHeight:(double)a0 ofRowAtIndex:(unsigned int)a1;
- (double)widthOfColumnAtIndex:(unsigned short)a0 isDefault:(out BOOL *)a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(unsigned short)a1;
- (void)setStroke:(id)a0 forTopOfRow:(unsigned int)a1 order:(int)a2 columnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forBottomOfRow:(unsigned int)a1 order:(int)a2 columnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forLeftOfColumn:(unsigned short)a1 order:(int)a2 rowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forRightOfColumn:(unsigned short)a1 order:(int)a2 rowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)updateTableRowColumnStylesWithBlock:(id /* block */)a0;
- (unsigned long long)numberOfPopulatedCells;
- (BOOL)shouldUseWideRows;
- (id)indexesOfUserHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)showRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (id)indexesOfHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)showColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (void)prepareToApplyConcurrentCellMap:(id)a0;
- (id)defaultCellStyleForTableStyleArea:(unsigned long long)a0;
- (id)defaultTextStyleForTableStyleArea:(unsigned long long)a0;
- (void)updateCalcEngineForTableSize;
- (BOOL)hasHiddenRows;
- (BOOL)hasHiddenColumns;
- (int)getDefaultCell:(id)a0 forTableStyleArea:(unsigned long long)a1;
- (BOOL)cellExistsAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)cellBorderAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasFormulaAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)formulaAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)clearCommentHostingMapForCommentStorage:(id)a0;
- (int)setTextStyle:(id)a0 ofColumnAtIndex:(unsigned short)a1;
- (id)cellStyleOfRowAtIndex:(unsigned int)a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfColumnAtIndex:(unsigned short)a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfRowAtIndex:(unsigned int)a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfColumnAtIndex:(unsigned short)a0 isDefault:(out BOOL *)a1;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)a0;
- (void)removeColumnsAtIndexes:(id)a0;
- (void)removeRowsAtIndex:(unsigned int)a0 count:(unsigned int)a1;
- (void)removeColumnsAtIndex:(unsigned short)a0 count:(unsigned int)a1;
- (void)swapRowAtIndex:(unsigned int)a0 withRowAtIndex:(unsigned int)a1;
- (BOOL)hideRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (BOOL)hideColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned short)a0;
- (id)strokeLayerForRightSideOfColumn:(unsigned short)a0;
- (id)strokeLayerForTopOfRow:(unsigned int)a0;
- (id)strokeLayerForBottomOfRow:(unsigned int)a0;
- (void)setColumnRowUIDMap:(id)a0;
- (void)resetSortRuleReferenceTrackerForInsert;
- (void)clearFromTableUID;
- (void)clearFromGroupByUID;
- (unsigned long long)tableAreaForRow:(unsigned int)a0;
- (unsigned long long)tableAreaForColumn:(unsigned short)a0;
- (unsigned long long)tableStyleAreaForRow:(unsigned int)a0;
- (void)computeDefaultRowHeight;
- (int)insertColumnsAtIndex:(unsigned short)a0 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (int)insertRowsAtIndex:(unsigned int)a0 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3 unsetFilterHidingAction:(BOOL)a4;
- (void)upgradeHiddenStates;
- (id)fillForRow:(unsigned int)a0;
- (id)fillForColumn:(unsigned short)a0;
- (int)maxStrokeOrder;
- (void)setStroke:(id)a0 forTopOfRow:(unsigned int)a1 order:(int)a2;
- (void)setStroke:(id)a0 forBottomOfRow:(unsigned int)a1 order:(int)a2;
- (void)setStroke:(id)a0 forLeftOfColumn:(unsigned short)a1 order:(int)a2;
- (void)setStroke:(id)a0 forRightOfColumn:(unsigned short)a1 order:(int)a2;
- (void)setFormulaOwnerUIDsWithMap:(id)a0 shouldStealReferences:(BOOL)a1;
- (void)remapTableUIDsInFormulasWithMap:(const struct UUIDMap<TSP::UUIDMap> { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x0; } x3; } x0; } *)a0 calcEngine:(id)a1 bakeForBadRefs:(BOOL)a2;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (BOOL)hasFormulas;
- (void)assertCollaborationConvergence;
- (Class)tableModelClass;
- (void)p_updateStorageParentInfoForModels;
- (void)p_initializeDefaultHeight:(double)a0 andWidth:(double)a1;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3 stylePreset:(id)a4 styles:(id)a5;
- (id)_initWithContext:(id)a0 flatteningFromCategorizedInfo:(id)a1 cellRegion:(id)a2 waitForCalcEngine:(BOOL)a3 flatteningOptions:(long long)a4;
- (id)_initWithContext:(id)a0 fromSourceInfo:(id)a1 cellRegion:(id)a2 tableModel:(id)a3 waitForCalcEngine:(BOOL)a4 formulaCoordSpace:(long long)a5;
- (id)expandCellRegionToCoverMergedCells:(id)a0;
- (id)indexesForCategoryColumns;
- (void)flattenGroupValuesIfNeededForCell:(id)a0 viewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 summaryAndLabelRows:(id)a2 categoryColumns:(id)a3;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)_correctAndCheckStateSuppressingAssertions:(BOOL)a0;
- (void)releaseMasterLayout;
- (id)initWithContext:(id)a0 fromSourceInfo:(id)a1 cellRegion:(id)a2 waitForCalcEngine:(BOOL)a3 flattenCategories:(long long)a4;
- (void)p_setupTableModelforNewForm;
- (int)setCell:(id)a0 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3;
- (void)p_setupTableModelforStockPrototype;
- (void)p_setupTableModelforStockSwatch;
- (void)setupTableModelForPrototypeIndex:(long long)a0 forTableInsertOnly:(BOOL)a1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })columnUIDs;
- (void)p_setFillOnCell:(id)a0 positive:(BOOL)a1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })rowUIDs;
- (void)p_setFormula:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)p_positiveImageFill;
- (id)p_negativeImageFill;
- (id)p_masterLayoutCreateIfNeeded:(BOOL)a0;
- (BOOL)hasActiveFilters;
- (BOOL)isCategoryGroupValueCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isRegisteredWithCalcEngine:(id)a0;
- (void)filterSetUpdated;
- (void)performReadForOneOffFormulaEvaluation:(id)a0 forCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)cellIteratorWithFlags:(unsigned long long)a0 searchFlags:(unsigned long long)a1;
- (void)p_bakeMixedCellStrokesIntoTable:(id)a0 outgoingTable:(id)a1 incomingTable:(id)a2 fraction:(double)a3;
- (id)cellStyleForCellWithEmptyStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleForCellWithEmptyStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 isDefault:(out BOOL *)a1;
- (void)removeAnnotationsFromRowsAtIndexes:(id)a0;
- (void)removeAnnotationsFromColumnsAtIndexes:(id)a0;
- (void)chooseUniqueNameInContainer:(id)a0 forPaste:(BOOL)a1;
- (BOOL)hasCommentAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (int)setCommentStorage:(id)a0 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1;
- (int)removeCommentStorageAtCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a0;
- (id)commentHostingAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 forCommentStorage:(id)a1;
- (id)commentHostingAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)a0;
- (int)writingDirectionForCellwithTableDefault:(id)a0;
- (id)textStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 isDefault:(out BOOL *)a1;
- (BOOL)isCategoryGroupValueLabelCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategorySummaryOrLabelRow:(unsigned int)a0;
- (unsigned char)categoryGroupLevelAtRow:(unsigned int)a0;
- (id)cellStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 isDefault:(out BOOL *)a1;
- (void)modifiedTextPropertiesForCategorizedCellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 wraps:(BOOL *)a1 padding:(id *)a2;
- (void)setFilterSetType:(int)a0;
- (void)dirtyFilterState;
- (unsigned int)numberOfVisibleBaseBodyRows;
- (int)parseNumberFromTableName:(id)a0;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)a0;
- (unsigned long long)tableAreaForDroppingRowAtIndex:(unsigned int)a0;
- (unsigned long long)tableStyleAreaForCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a0;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (int)getDefaultCell:(out id)a0 forCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (int)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 suppressCellBorder:(BOOL)a2;
- (void)convertFormulasToUidForm:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 preserveHostCell:(BOOL)a2;
- (int)setCell:(id)a0 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3 formulaReplacer:(id)a4;
- (id)cellUIDListFromCellRegion:(id)a0 useCategoriesWildcards:(BOOL)a1;
- (int)getCell:(id)a0 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1;
- (void)convertFormulasToUidForm:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)mergeActionForRegion:(id)a0;
- (int)cellValueTypeAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (int)cellValueTypeAtCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a0;
- (int)setCellStyle:(id)a0 ofRowAtUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (int)setTextStyle:(id)a0 ofRowAtUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (int)setCellStyle:(id)a0 ofColumnAtUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (int)setTextStyle:(id)a0 ofColumnAtUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (BOOL)cellStyle:(id)a0 isEqualToDefaultCellStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (BOOL)textStyle:(id)a0 isEqualToDefaultTextStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)cellStyleAtCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)textStyleAtCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (int)getValue:(out struct TSCEValue { struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; int x2[1]; struct TSCEFormat { struct TSCEFormatStruct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x3; } x1; id x2; id x3; id x4; } x0; unsigned char x1; } x3; BOOL x4; } x0; unsigned long long x1[19]; int x2; } *)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (id)p_stringValueAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)columnNameForColumnIndex:(unsigned short)a0 withFallbackFormat:(id)a1;
- (id)columnNameForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 restrictToBodyRange:(BOOL)a1;
- (id)chromeLabelForColumn:(unsigned short)a0;
- (id)chromeLabelForRow:(unsigned int)a0;
- (unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)a0;
- (unsigned int)indexOfVisibleRowBeforeRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowAfterRowAtIndex:(unsigned int)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })bodyRangeForLowestLevelGroupEnclosingCellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (int)insertRowsAtIndex:(unsigned int)a0 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (void)moveRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toRowIndex:(unsigned int)a1;
- (void)moveColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(unsigned short)a1;
- (BOOL)hasUserHiddenRows;
- (BOOL)hasUserHiddenColumns;
- (unsigned int)numberOfHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned int)numberOfUserHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned int)numberOfHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)hasHiddenRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (BOOL)hasHiddenColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (id)indexesOfUserHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleColumnsInCellRegion:(id)a0;
- (id)indexesOfVisibleColumnsInColumnRange:(id)a0;
- (id)indexesOfHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfFilteredRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleRowsInCellRegion:(id)a0;
- (id)indexesOfUserVisibleRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfCollapsedRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned char)hidingActionForRowAtIndex:(unsigned int)a0;
- (unsigned char)hidingActionForColumnAtIndex:(unsigned short)a0;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 forAction:(unsigned char)a1;
- (BOOL)hasHiddenRowAtIndex:(unsigned int)a0;
- (BOOL)hasHiddenColumnAtIndex:(unsigned short)a0;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)anyHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)stringAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (id)characterFillAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (BOOL)mergeCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)unmergeCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRegion:(id)a0;
- (BOOL)hasMergeRangeSpanningRowsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)hasMergeRangesIntersectingCellRegion:(id)a0;
- (id)regionForValueOrCommentCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)hasRangeSpanningRowsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)shrinkReturningInverseForRegion:(id)a0;
- (id)removeReturningInverseForRegion:(id)a0;
- (id)performActionReturningInverse:(id)a0;
- (id)mergeActionForRegion:(id)a0 nonOriginPartialsOnly:(BOOL)a1;
- (void)enumerateMergesIntersectingCellRegion:(id)a0 usingBlock:(id /* block */)a1;
- (struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; } x2; })mergeRangesIntersectingCellRegion:(id)a0;
- (struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; } x2; })mergeRangesAndCrumbsIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)isValidMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)cellValueFromCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)registerAllFormulasWithCalculationEngine:(id)a0 wasCrossDocumentPaste:(BOOL)a1 wasUndo:(BOOL)a2;
- (id)applyCollapseExpandState:(id)a0 outUndoState:(id *)a1;
- (BOOL)isCategoryLabelRow:(unsigned int)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDForCellContainingRichTextStorage:(id)a0;
- (BOOL)writeCellIDsInCellUIDList:(id)a0 toVector:(struct vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> > { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct __compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> > { struct TSUCellCoord *x0; } x2; } *)a1 prunedCellUIDs:(struct vector<TSTCellUID, std::__1::allocator<TSTCellUID> > { struct TSTCellUID *x0; struct TSTCellUID *x1; struct __compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> > { struct TSTCellUID *x0; } x2; } *)a2;
- (void)convertCellUIDLookupList:(id)a0 toCellRangeVector:(struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *x0; } x2; } *)a1 prunedSummaryCellUIDs:(struct vector<TSTCellUID, std::__1::allocator<TSTCellUID> > { struct TSTCellUID *x0; struct TSTCellUID *x1; struct __compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> > { struct TSTCellUID *x0; } x2; } *)a2;
- (id)rowIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (id)columnIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })prunedColumnUIDsFromColumnUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; })prunedRowUIDsFromRowUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1 notFoundUIDs:(id)a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rowRangeForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })columnRangeForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0;
- (unsigned int)numberOfCategoryLevels;
- (id)cellRegionFromCellUIDLookupList:(id)a0;
- (id)cellRegionFromCellUIDList:(id)a0 includeLabelsWithSummaries:(BOOL)a1 didAddLabels:(out BOOL *)a2;
- (id)cellRegionFromCellUIDLookupList:(id)a0 includeLabelsWithSummaries:(BOOL)a1 didAddLabels:(BOOL *)a2;
- (unsigned char)categoryGroupLevelAtSummaryRow:(unsigned int)a0;
- (unsigned char)categoryGroupLevelAtLabelRow:(unsigned int)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForUIDRange:(const struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } x0; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } x1; } *)a0;
- (struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } x0; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } x1; })cellUIDRangeForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)cellRegionForUIDRange:(const struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } x0; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } x1; } *)a0;
- (id)cellTractRefForUIDRectRef:(id)a0;
- (int)getDefaultCell:(out id)a0 forCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1;
- (int)getCell:(id)a0 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1 suppressCellBorder:(BOOL)a2;
- (BOOL)checkStateForArchiving:(BOOL)a0;
- (void)setSummaryModel:(id)a0;
- (void)resetViewMap;
- (id)indexesForLabelRows;
- (id)populatedCategoryGroupLevelsInColumn:(unsigned short)a0;
- (id)collapseSummaryGroupUIDs:(id)a0;
- (id)expandSummaryGroupUIDs:(id)a0;
- (BOOL)isCategoryGroupOrParentsCollapsed:(struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })a0;
- (id)indexesForGroupingColumns;
- (id)columnNameForColumnIndex:(unsigned short)a0;
- (void)setAggregateType:(unsigned char)a0 forColumnUID:(struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })a1 atGroupLevel:(unsigned char)a2;
- (double)summaryRowHeightAtCategoryLevel:(unsigned char)a0;
- (void)setSummaryRowHeight:(double)a0 atCategoryLevel:(unsigned char)a1;
- (double)labelRowHeightAtCategoryLevel:(unsigned char)a0;
- (void)setLabelRowHeight:(double)a0 atCategoryLevel:(unsigned char)a1;
- (Class)iteratorClass;
- (void)setTableModelPrivate:(id)a0;
- (void)setCategoryOrder:(id)a0;
- (id)mergesIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)mergesIntersectingCellRegion:(id)a0;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3 stylePreset:(id)a4;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3;
- (id)p_popupItemsForStrings:(id)a0;
- (void)p_setPopupMenuOnCell:(id)a0 withItems:(id)a1 andSelectedIndex:(double)a2;
- (void)p_setFormulaWithSymbolCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 andAttributeCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (void)p_setFormulaWithSymbolString:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)additionalObjectsToCopy;
- (BOOL)isSafeToConvertToImageForImagePaste;
- (id)tableModelPrivate;
- (BOOL)supportsRichTextUndoAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)notifyTableOfNewResults;
- (id)geometryForRTLTableWithGeometry:(id)a0;
- (void)prepareForPasteWithSourceOffset:(struct TSUColumnRowOffset { int x0; int x1; })a0 bakeFormulas:(BOOL)a1;
- (void)postCommentNotificationForStorage:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 notificationKey:(id)a2;
- (void)bakeFormulas;
- (void)applyWritingDirection:(int)a0 toCell:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (void)getTextPropertiesWithCell:(id)a0 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 wraps:(BOOL *)a2 alignment:(int *)a3 verticalAlignment:(int *)a4 padding:(id *)a5;
- (void)notifyAboutStructuredTextImportState;
- (id)sortTagsForCellsInColumns:(const struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *x0; unsigned short *x1; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *x0; } x2; } *)a0 rows:(id)a1;
- (id)duplicateFilterSet;
- (id)duplicateFilterSetInUidForm;
- (BOOL)needsFilterFormulaRewriteForImport;
- (void)setNeedsFilterFormulaRewriteForImport:(BOOL)a0;
- (void)enableFilterSet:(BOOL)a0;
- (BOOL)hasFilterRulesInBaseColumns:(id)a0;
- (BOOL)hasFilterRulesAffectingInsertRows;
- (BOOL)canTranspose;
- (BOOL)hasUntitledTableNameFormat;
- (void)chooseUniqueNameInContainer:(id)a0 forPaste:(BOOL)a1 needsNewName:(BOOL)a2;
- (BOOL)cellIDIsLegal:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)cellRegionForTableStyleArea:(unsigned long long)a0;
- (id)tableAreasForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (int)setCell:(id)a0 atCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)cellMapForRegion:(id)a0 uidBased:(BOOL)a1 suppressMergeContent:(BOOL)a2 useCategoriesWildcards:(BOOL)a3;
- (id)concurrentCellMapForRegion:(id)a0 suppressMergeContent:(BOOL)a1;
- (int)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 holdingReadLockWithAccessController:(id)a2;
- (id)noRuleConditionalStyleSet;
- (id)rowNameForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 restrictToBodyRange:(BOOL)a1;
- (id)cellRangeName:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 usedSymbolicName:(out BOOL *)a1;
- (id)chromeLabelForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDLeftOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDRightOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDAboveCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDBelowCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)insertRowsAtIndex:(unsigned int)a0 count:(unsigned int)a1 addBefore:(BOOL)a2;
- (void)insertColumnsAtIndex:(unsigned short)a0 count:(unsigned int)a1 addBefore:(BOOL)a2;
- (void)importDeferredRemoveGroupingRowsAtIndexes:(id)a0;
- (BOOL)isCellRangeHidden:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned int)numberOfUserVisibleBodyRows;
- (id)strokeExporterReturningDefaultStrokes:(BOOL)a0;
- (struct TSCEValue { struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; int x2[1]; struct TSCEFormat { struct TSCEFormatStruct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x3; } x1; id x2; id x3; id x4; } x0; unsigned char x1; } x3; BOOL x4; } x0; unsigned long long x1[19]; int x2; })valueToUseForSummaryCellFormulaError;
- (id)cellUIDListFromCellRegion:(id)a0;
- (id)cellRegionFromCellUIDList:(id)a0;
- (struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })cellUIDForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 useCategoriesWildcards:(BOOL)a1;
- (id)textStyleForCellWithEmptyStyleAtCellUID:(struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })a0 isDefault:(out BOOL *)a1;
- (void)applyGroupingColumns:(id)a0;
- (void)setIsCategoryEnabled:(BOOL)a0;
- (unsigned int)numberOfGroupLevelsShowingLabelsUnderGroupAtIndex:(unsigned int)a0;
- (BOOL)isCategorySummaryCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategoryLabelCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategoryColumnUneditableCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategoryGroupingColumn:(unsigned short)a0;
- (BOOL)isCategoryAnyKindOfCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)allGroupUIDs;
- (id)allRowUIDsAtSameLevelAsRowIndex:(unsigned int)a0 withFilter:(id /* block */)a1;
- (id)indexesForSummaryAndBodyRowsInGroupUIDs:(id)a0;
- (BOOL)hasSummaryRowsInRegion:(id)a0;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)a0 inRegion:(id)a1;
- (id)indexesForSummaryRowsUpToGroupLevel:(unsigned char)a0 omitGroupsWithUids:(const struct UUIDSet<TSP::UUIDSet> { struct __hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<TSUUUID> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > > { float x0; } x3; } x0; } *)a1;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)a0 inRegion:(id)a1;
- (id)indexesForLabelRowsUpToGroupLevel:(unsigned char)a0 omitGroupsWithUids:(const struct UUIDSet<TSP::UUIDSet> { struct __hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<TSUUUID> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > > { float x0; } x3; } x0; } *)a1;
- (id)indexesForBodyAndFooterRows;
- (id)indexesForBodyColumns;
- (id)indexesForBodyRowsInGroupWithRowAtIndex:(unsigned int)a0;
- (id)regionSubtractingCategoryColumnsAndRows:(id)a0;
- (unsigned long long)groupingColumnLevelCountForColumn:(unsigned short)a0;
- (BOOL)groupingTypesAreUniqueForColumn:(unsigned short)a0;
- (struct TSCECategoryRef { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x3; unsigned char x4; unsigned char x5; struct TSUPreserveFlags { unsigned char x0; } x6; short x7; })categoryRefReferringToCellRef:(const struct RefTypeHolder<TSCECellRef, 1> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } x0; } *)a0;
- (BOOL)shouldDisplaySummaryLabelRowAtGroupLevel:(unsigned char)a0;
- (void)willMakeGroupingChangesInRowUIDs:(id)a0;
- (id)processRowsWithPendingGroupingChangesAndReturnAffectedCellRegion;
- (id)commandForSettingTableDirection:(int)a0 icc:(id)a1;
- (id)cellAfterApplyDiff:(id)a0 toCell:(id)a1 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a2 migrationMap:(id)a3 inverseCellDiff:(id)a4 concurrentStylesheet:(id)a5 defaultCellStyle:(id)a6 defaultTextStyle:(id)a7;
- (void)p_performCommentStorageDOLC:(id)a0;
- (void)p_postCommentNotificationFromDiff:(id)a0 inverseDiff:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (id)applyCellDiffMap:(id)a0 migrationHelper:(id)a1 updateProperties:(id)a2;
- (void)applyCellMap:(id)a0 outPrunedCellMap:(id)a1 outInverseCellMap:(id)a2 options:(unsigned long long)a3 stylesContainer:(id)a4;
- (id)applyCellDiff:(id)a0 atCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1 migrationMap:(id)a2 inverseCellDiff:(id)a3 defaultCellStyle:(id)a4 defaultTextStyle:(id)a5;
- (id)applyConcurrentCellMapToBaseTable:(id)a0 options:(unsigned long long)a1 requestPruneMap:(BOOL)a2 stylesContainer:(id)a3 migrationHelper:(id)a4;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2;
- (id)p_imageFillAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)p_propertyMapForReplacingImageFill:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)compatibilityCheckerForData:(id)a0 associatedHint:(id)a1;
- (void)enumerateCellStringsForRows:(unsigned int)a0 rowCount:(unsigned int)a1 usingBlock:(id /* block */)a2;
- (void)enumerateCellStringsUsingBlock:(id /* block */)a0;
- (id)cellIteratorWithRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2;
- (void)iterateCellsInRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 clampingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a3 usingBlock:(id /* block */)a4;
- (void)p_iterateCellsAndTerminateWithIterator:(id)a0 usingBlock:(id /* block */)a1;
- (id)cellIteratorWithRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 clampingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a3;
- (id)mappingFromRowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0 toRowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1;
- (id)mappingForSortWithRules:(id)a0 inRows:(id)a1;
- (void)rearrangeWithMapping:(id)a0;
- (id)changeDescriptorsForReorganizingFromRowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a0 toRowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1;

@end

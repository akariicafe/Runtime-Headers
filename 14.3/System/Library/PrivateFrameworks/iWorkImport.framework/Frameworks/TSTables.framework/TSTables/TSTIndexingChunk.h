@interface TSTIndexingChunk : NSObject {
    struct vector<std::__1::vector<NSString *, std::__1::allocator<NSString *> >, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > > { struct vector<NSString *, std::__1::allocator<NSString *> > *__begin_; struct vector<NSString *, std::__1::allocator<NSString *> > *__end_; struct __compressed_pair<std::__1::vector<NSString *, std::__1::allocator<NSString *> > *, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > > { struct vector<NSString *, std::__1::allocator<NSString *> > *__value_; } __end_cap_; } _wordFragmentsList;
    struct vector<TSU::UUIDCoord<TSP::UUIDCoord>, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > > { struct UUIDCoord<TSP::UUIDCoord> *__begin_; struct UUIDCoord<TSP::UUIDCoord> *__end_; struct __compressed_pair<TSU::UUIDCoord<TSP::UUIDCoord> *, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > > { struct UUIDCoord<TSP::UUIDCoord> *__value_; } __end_cap_; } _headerCoords;
}

@property (readonly, nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } tableUID;
@property (readonly, nonatomic) unsigned long long size;

- (void).cxx_destruct;
- (id).cxx_construct;
- (id)initWithTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (const struct vector<std::__1::vector<NSString *, std::__1::allocator<NSString *> >, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > > { struct vector<NSString *, std::__1::allocator<NSString *> > *x0; struct vector<NSString *, std::__1::allocator<NSString *> > *x1; struct __compressed_pair<std::__1::vector<NSString *, std::__1::allocator<NSString *> > *, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > > { struct vector<NSString *, std::__1::allocator<NSString *> > *x0; } x2; } *)wordFragmentsList;
- (const struct vector<TSU::UUIDCoord<TSP::UUIDCoord>, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > > { struct UUIDCoord<TSP::UUIDCoord> *x0; struct UUIDCoord<TSP::UUIDCoord> *x1; struct __compressed_pair<TSU::UUIDCoord<TSP::UUIDCoord> *, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > > { struct UUIDCoord<TSP::UUIDCoord> *x0; } x2; } *)headerCoords;
- (void)addHeaderWordFragments:(const struct vector<NSString *, std::__1::allocator<NSString *> > { } *)a0 atCoord:(const struct UUIDCoord<TSP::UUIDCoord> { struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; } *)a1;

@end

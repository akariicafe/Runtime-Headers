@class TSTLayoutSpaceBezierPathCache, TSTLayoutSpaceBundle, TSTMasterLayout, TSTCoordinateArray, TSTLayout;

@interface TSTLayoutSpace : NSObject {
    struct _opaque_pthread_rwlock_t { long long __sig; char __opaque[192]; } mLock;
}

@property (nonatomic) struct { struct { unsigned int column; unsigned int row; } topLeft; struct { unsigned int column; unsigned int row; } bottomRight; } gridRange;
@property (retain, nonatomic) TSTCoordinateArray *headerRowColumnCoordinates;
@property (retain, nonatomic) TSTCoordinateArray *bodyColumnCoordinates;
@property (retain, nonatomic) TSTCoordinateArray *headerColumnRowCoordinates;
@property (retain, nonatomic) TSTCoordinateArray *bodyRowCoordinates;
@property (retain, nonatomic) TSTLayoutSpaceBezierPathCache *bezierPathCache;
@property (nonatomic) BOOL invalidatedForEditingCell;
@property (nonatomic) BOOL invalidTableOffset;
@property (nonatomic) unsigned short invalidColumnIndex;
@property (nonatomic) unsigned int invalidRowIndex;
@property (nonatomic) BOOL layoutDirectionIsLeftToRight;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cachedFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cachedAlignedFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cachedStrokeFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cachedAlignedStrokeFrame;
@property (readonly, weak, nonatomic) TSTLayoutSpaceBundle *bundle;
@property (readonly, nonatomic) int layoutSpaceType;
@property (readonly, weak, nonatomic) TSTLayout *layout;
@property (readonly, weak, nonatomic) TSTMasterLayout *masterLayout;
@property (readonly, nonatomic) BOOL isMain;
@property (readonly, nonatomic) BOOL isFrozen;
@property (readonly, nonatomic) BOOL isRepeat;
@property (readonly, nonatomic) BOOL isColumns;
@property (readonly, nonatomic) BOOL isRows;
@property (readonly, nonatomic) BOOL isCorner;
@property (nonatomic) BOOL headerColumnsRepeat;
@property (nonatomic) BOOL headerRowsRepeat;
@property (nonatomic) double viewScale;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transformToCanvas;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transformFromCanvas;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transformToDevice;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transformFromDevice;
@property (nonatomic) BOOL drawBlackAndWhite;
@property (nonatomic) BOOL drawPreventAntialias;
@property (nonatomic) struct CGPoint { double x; double y; } tableOffset;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } cellRange;
@property (readonly, nonatomic) double headerColumnsWidth;
@property (readonly, nonatomic) double headerRowsHeight;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } strokeFrame;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frameForTableNameBorder;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } strokeFrameForTableNameBorder;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignedStrokeFrameForTableNameBorder;
@property (readonly, nonatomic) BOOL frameHasWidthAndHeight;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } canvasFrame;

+ (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })gridRangeOfLayoutSpace:(id)a0;
+ (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })intersectionGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 ofLayoutSpace:(id)a1;
+ (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })intersectionRowGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 ofLayoutSpace:(id)a1;
+ (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })intersectionColumnGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 ofLayoutSpace:(id)a1;

- (void)unlock;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })visibleRange;
- (void).cxx_destruct;
- (void)dealloc;
- (int)validate:(id)a0;
- (void)lockForRead;
- (BOOL)intersectsCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)containsCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)p_getLayoutDirectionLeftToRight;
- (void)lockForWrite;
- (void)validateCachedFrames;
- (int)validateCoordinateCache:(id)a0;
- (int)validateTableOffset:(id)a0;
- (id)initWithLayoutSpaceBundle:(id)a0 type:(int)a1;
- (void)invalidateCoordinates;
- (void)invalidateTableOffset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layoutRectForCanvasRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)invalidateCoordinatesAfterColumn:(unsigned short)a0;
- (void)invalidateCoordinatesAfterRow:(unsigned int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasRectForLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedFrame;
- (struct CGPoint { double x0; double x1; })layoutPointForCanvasPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })canvasPointForLayoutPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasStrokeFrame;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })rangeIntersectingLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct { unsigned int x0; unsigned int x1; })gridPointHitByCanvasPoint:(struct CGPoint { double x0; double x1; })a0 tabsViewable:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })intersectionCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)intersectsGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasStrokeFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)containsGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedOverrideFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 strokeWidthOverride:(double)a1;
- (BOOL)intersectsRowGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeLineForRowGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)intersectsColumnGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeLineForColumnGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)alignedStrokeLinePathForRowGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 inset:(double)a2 reoriginToZero:(BOOL)a3 cornerRadius:(double)a4;
- (id)alignedStrokeLinePathForColumnGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 inset:(double)a2 reoriginToZero:(BOOL)a3 cornerRadius:(double)a4;
- (id)alignedStrokeFramePathForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 inset:(double)a2 reoriginToZero:(BOOL)a3 cornerRadius:(double)a4;
- (id)alignedMaskStrokeFramePathForTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a0 cornerRadius:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedContentFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })visiblePartOfRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedRectForLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setUserSpaceToDeviceSpaceTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_headerColumnsGridRange;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_headerRowsGridRange;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_footerRowsGridRange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_tableRectForLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_gridRangeForTableRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })gridRangeForLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_rangeForLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (double)p_tableCoordinateForGridColumn:(unsigned int)a0;
- (double)p_tableCoordinateForGridRow:(unsigned int)a0;
- (struct CGPoint { double x0; double x1; })p_layoutPointForTablePoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_tableRectForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_layoutRectForTableRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; double x4; double x5; double x6; double x7; })p_frameSpecForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 frameType:(int)a1 strokeWidthOverride:(double *)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })strokeFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (double)p_rawTableCoordinateForGridColumn:(unsigned int)a0;
- (double)p_layoutCoordinateForGridColumn:(unsigned int)a0;
- (double)p_layoutCoordinateForGridRow:(unsigned int)a0;
- (struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; double x4; double x5; double x6; double x7; })p_alignedFrameSpecForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 strokeWidthOverride:(double *)a1;
- (struct { unsigned int x0; unsigned int x1; })gridPointHitByLayoutPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })p_tablePointForLayoutPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct { unsigned int x0; unsigned int x1; })p_gridPointForTablePoint:(struct CGPoint { double x0; double x1; })a0;
- (void)p_alignStrokeWidth:(double)a0 deviceWidth:(double *)a1 scaledWidth:(double *)a2;
- (void)p_alignStrokeHeight:(double)a0 deviceWidth:(double *)a1 scaledWidth:(double *)a2;
- (struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; double x4; double x5; double x6; double x7; })p_alignedFrameSpecForRowGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; double x4; double x5; double x6; double x7; })p_alignedFrameSpecForColumnGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)alignStrokeCoordinatesOfBeginPoint:(struct CGPoint { double x0; double x1; } *)a0 endPoint:(struct CGPoint { double x0; double x1; } *)a1 width:(double *)a2;
- (double)strokeWidthForDrawingWithAlignedWidth:(double)a0 originalWidth:(double)a1;
- (void)drawSingleStroke:(id)a0 context:(struct CGContext { } *)a1 beginPoint:(struct CGPoint { double x0; double x1; })a2 endPoint:(struct CGPoint { double x0; double x1; })a3 width:(double)a4 strokeWidthForDrawing:(double)a5 strokeFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6;
- (BOOL)p_drawStrokeForGridColumn:(unsigned int)a0 strokeRect:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 clearStroke:(BOOL)a2 shadowType:(int)a3 context:(struct CGContext { } *)a4;
- (BOOL)p_drawStrokeForGridRow:(unsigned int)a0 strokeRect:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a1 clearStroke:(BOOL)a2 shadowType:(int)a3 context:(struct CGContext { } *)a4;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_bodyGridRange;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_topLeftCornerGridRange;
- (id)p_createRowCoordinatesForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 invalidRowIndex:(unsigned int)a1 previousCoordinates:(id)a2 validateSingleRow:(BOOL)a3 outCoordinatesChanged:(BOOL *)a4;
- (struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_extendedBodyGridRange;
- (id)p_createColumnCoordinatesForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 invalidColumnIndex:(unsigned short)a1 previousCoordinates:(id)a2 outCoordinatesChanged:(BOOL *)a3;
- (unsigned int)p_gridColumnForTableCoordinate:(double)a0;
- (unsigned int)p_gridRowForTableCoordinate:(double)a0;
- (double)p_bodyTranslationX;
- (double)p_bodyTranslationY;
- (double)p_tableCoordinateForX:(double)a0;
- (double)p_tableCoordinateForY:(double)a0;
- (int)p_cellTypeForGridPoint:(struct { unsigned int x0; unsigned int x1; })a0;
- (struct CGPoint { double x0; double x1; })p_layoutOffsetForGridPoint:(struct { unsigned int x0; unsigned int x1; })a0;
- (struct CGPoint { double x0; double x1; })p_layoutOffsetForTablePoint:(struct CGPoint { double x0; double x1; })a0;
- (void)p_alignFrameSpec:(struct { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; double x4; double x5; double x6; double x7; } *)a0;
- (void)invalidateCoordinatesForEditingCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)validateCoordinateDirection;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })nearestRangeForLayoutRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrameForRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })strokeFrameForRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })canvasFrameForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (double)canvasPositionForGridColumn:(unsigned int)a0;
- (double)canvasPositionForGridRow:(unsigned int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeFrameForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)drawStrokesInGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 clearStrokes:(BOOL)a1 context:(struct CGContext { } *)a2;

@end

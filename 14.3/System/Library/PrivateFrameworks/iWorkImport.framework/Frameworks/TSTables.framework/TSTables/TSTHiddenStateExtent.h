@class TSTTableFilterSet, NSString, TSTTableInfo, TSTHiddenStatesOwner, TSCECalculationEngine, NSMutableArray, NSMutableIndexSet, TSUMutableUUIDSet;

@interface TSTHiddenStateExtent : NSObject <TSCEFormulaOwning, TSTGroupByChangeProtocol> {
    struct unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned char, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned char> > > { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::hash<TSUUUID>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float __value_; } __p3_; } __table_; } _hiddenByUid;
    TSTTableFilterSet *_filterSet;
    struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } _hiddenStatesOwnerUid;
    TSCECalculationEngine *_calcEngine;
    TSTTableInfo *_tableInfo;
    NSMutableIndexSet *_baseUserHiddenIndexes;
    NSMutableIndexSet *_baseFilteredIndexes;
    NSMutableIndexSet *_anyBaseHiddenIndexes;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _viewIndexesMutex;
    NSMutableIndexSet *_userHiddenIndexes;
    NSMutableIndexSet *_filteredIndexes;
    NSMutableIndexSet *_anyHiddenIndexes;
    NSMutableIndexSet *_collapsedRowIndexes;
    TSTTableFilterSet *_rewrittenFilterSet;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _pendingComputedLock;
    struct TSUIndexSet { unsigned char _isEmpty : 1; unsigned char _hasSingleRange : 1; struct TSUIndexRange { long long _begin; long long _end; } _singleRange; struct *_multipleRanges; } _pendingRowsShown;
    struct TSUIndexSet { unsigned char _isEmpty : 1; unsigned char _hasSingleRange : 1; struct TSUIndexRange { long long _begin; long long _end; } _singleRange; struct *_multipleRanges; } _pendingRowsHidden;
    struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *__begin_; struct TSUCellRect *__end_; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect *__value_; } __end_cap_; } _cellRangesToInvalidate;
    BOOL _invalidateViewGeometry;
    BOOL _invalidateCollapsedRows;
}

@property (weak, nonatomic) TSTHiddenStatesOwner *hiddenStatesOwner;
@property (nonatomic) BOOL needsToUpdateFilterSetForImport;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } hiddenStateExtentUid;
@property (readonly, nonatomic) BOOL forRows;
@property (readonly, nonatomic) BOOL anyHidden;
@property (readonly, nonatomic) BOOL anyUserHidden;
@property (readonly, nonatomic) BOOL anyCollapsed;
@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSUMutableUUIDSet *collapsedGroupUids;
@property (readonly, nonatomic) NSMutableArray *thresholdCellValues;
@property (readonly, nonatomic) unsigned int numberOfHidden;
@property (readonly, nonatomic) unsigned int numberOfUserHidden;
@property (retain, nonatomic) TSTTableFilterSet *filterSet;
@property (nonatomic) BOOL needsFilterFormulaRewriteForImport;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)mutableIndexSetByIntersecting:(id)a0 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
+ (void)swapIndexesWithIndexSet:(id)a0 index:(unsigned long long)a1 withIndex:(unsigned long long)a2;

- (void).cxx_destruct;
- (id)filteredIndexes;
- (void)dealloc;
- (id).cxx_construct;
- (long long)evaluationMode;
- (void)setTableInfo:(id)a0;
- (void)encodeToArchive:(struct HiddenStateExtentArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct RepeatedPtrField<TST::HiddenStateExtentArchive_RowOrColumnState> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x4; struct RepeatedPtrField<TSCE::CellValueArchive> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x5; struct RepeatedPtrField<TSP::UUID> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x6; struct UUID *x7; int x8; BOOL x9; } *)a0 archiver:(id)a1;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; })ownerUID;
- (unsigned short)ownerKind;
- (id)linkedResolver;
- (void)writeResultsForCalcEngine:(id)a0;
- (void)invalidateForCalcEngine:(id)a0;
- (struct TSCERecalculationState { unsigned char x0; })evaluateFormulaAt:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 withCalcEngine:(id)a1 recalcOptions:(struct TSCERecalculationState { unsigned char x0; })a2;
- (void)unregisterFromCalcEngine;
- (void)didAddRowUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 toGroup:(id)a1;
- (void)didRemoveRowUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 fromGroup:(id)a1;
- (void)startOfGroupingChangesBatch;
- (void)endOfGroupingChangesBatch;
- (void)remapTableUIDsInFormulasWithMap:(const struct UUIDMap<TSP::UUIDMap> { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x0; } x3; } x0; } *)a0 calcEngine:(id)a1;
- (BOOL)hasActiveFilters;
- (int)registerWithCalcEngine:(id)a0 baseOwnerUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a1;
- (void)filterSetUpdated;
- (id)duplicateFilterSetInUidFormWithTable:(id)a0;
- (void)setFilterSetType:(int)a0;
- (void)dirtyFilterState;
- (BOOL)hasFilterRulesWithTable:(id)a0 inBaseColumns:(id)a1;
- (BOOL)hideAtViewIndex:(struct TSUViewColumnOrRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (id)applyCollapseExpandState:(id)a0 outUndoState:(id *)a1;
- (void)willChangeGroupByTo:(id)a0;
- (id)collapseSummaryGroupUIDs:(id)a0;
- (id)expandSummaryGroupUIDs:(id)a0;
- (BOOL)isCategoryGroupOrParentsCollapsed:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (id)duplicateFilterSet;
- (void)enableFilterSet:(BOOL)a0;
- (void)didChangeGroupByStructure;
- (void)didCreateGroup:(id)a0;
- (void)willRemoveGroup:(id)a0;
- (void)didRemoveGroup:(id)a0;
- (void)loadIndexesFromTable:(id)a0;
- (id)initWithArchive:(const struct HiddenStateExtentArchive { void /* function */ **x0; struct InternalMetadataWithArena { void *x0; } x1; struct HasBits<1> { unsigned int x0[1]; } x2; struct CachedSize { struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x0; } x3; struct RepeatedPtrField<TST::HiddenStateExtentArchive_RowOrColumnState> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x4; struct RepeatedPtrField<TSCE::CellValueArchive> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x5; struct RepeatedPtrField<TSP::UUID> { struct Arena *x0; int x1; int x2; struct Rep *x3; } x6; struct UUID *x7; int x8; BOOL x9; } *)a0 unarchiver:(id)a1 forHiddenStatesOwner:(id)a2;
- (id)initWithHiddenStatesOwner:(id)a0 forRows:(BOOL)a1;
- (BOOL)showAtViewIndex:(struct TSUViewColumnOrRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (BOOL)hideAtBaseIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (BOOL)showAtBaseIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (unsigned char)hidingActionForViewIndex:(struct TSUViewColumnOrRowIndex { unsigned int x0; })a0;
- (unsigned char)hidingActionForBaseIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0;
- (id)indexesOfHiddenInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)indexesOfUserHiddenInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)indexesOfFilteredInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)indexesOfVisibleInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)indexesOfUserVisibleInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)indexesOfVisibleIndexesInIndexes:(id)a0;
- (id)indexesOfCollapsedInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned int)numberOfHiddenInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned int)numberOfUserHiddenInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)anyHiddenInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)anyHiddenInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 forAction:(unsigned char)a1;
- (BOOL)hasHiddenAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleBeforeIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleBeforeAndIncludingIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleAfterIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleAfterAndIncludingIndex:(unsigned int)a0;
- (unsigned int)numberOfHiddenInBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)indexesOfHiddenInBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned int)numberOfUserHiddenInBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)syncUpHiddenStateFormulaOwnerUIDs;
- (BOOL)isCategoryGroupUIDCollapsed:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (void)setCategoryGroupUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 asCollapsed:(BOOL)a1;
- (id)copyCollapsedStateToUpdatedGroupUids:(id)a0;
- (id)runChange:(id)a0 withCollapsedState:(id)a1 outUndoState:(id *)a2;
- (void)mutateFormulaFiltersWithTable:(id)a0 usingBlock:(id /* block */)a1;
- (void)dirtyFilterStateForHeaders;
- (void)dirtyFilterStateForFooters;
- (void)insertBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)deleteBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; struct UUIDData<TSP::UUIDData> *x1; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> *x0; } x2; } *)a1;
- (void)moveViewRangeOnlyFrom:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toIndex:(struct TSUViewColumnOrRowIndex { unsigned int x0; })a1;
- (void)moveBaseRangeFrom:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a1;
- (void)swapBaseIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0 withIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a1;
- (id)mutableUserHiddenIndexes;
- (id)mutableFilteredIndexes;
- (id)mutableAnyHiddenIndexes;
- (void)p_registerAllFormulaToCalculationEngine;
- (struct TSUViewColumnOrRowIndex { unsigned int x0; })viewIndexForBaseIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0;
- (BOOL)hideAtUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 forIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a1 forAction:(unsigned char)a2;
- (unsigned char)hidingActionForUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;
- (void)addHiddenIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (void)hiddenStateChangedForBaseIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0;
- (BOOL)showAtUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 forIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a1 forAction:(unsigned char)a2;
- (void)removeHiddenIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0 forAction:(unsigned char)a1;
- (BOOL)useCollapsedRows;
- (id)collapsedRowIndexes;
- (id)anyHiddenIndexes;
- (void)clearInvalidIndexes;
- (BOOL)hideAtUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 forAction:(unsigned char)a1;
- (BOOL)showAtUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0 forAction:(unsigned char)a1;
- (id)userHiddenIndexes;
- (void)dirtyFilterStateForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)precedentsForFilterSet:(id)a0 calcEngine:(id)a1 hostOwnerUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a2 hostCellID:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a3;
- (struct TSCEValue { struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; int x2[1]; struct TSCEFormat { struct TSCEFormatStruct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x3; } x1; id x2; id x3; id x4; } x0; unsigned char x1; } x3; BOOL x4; } x0; unsigned long long x1[19]; int x2; })p_calculateAverageThresholdWithCalcEngine:(id)a0 formulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1;
- (struct TSCEValue { struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; int x2[1]; struct TSCEFormat { struct TSCEFormatStruct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x3; } x1; id x2; id x3; id x4; } x0; unsigned char x1; } x3; BOOL x4; } x0; unsigned long long x1[19]; int x2; })p_calculateTopOrBottomThresholdWithCalcEngine:(id)a0 formulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 isTop:(BOOL)a2 keyScale:(unsigned char)a3;
- (id)p_createThresholdCellValue:(struct TSCEValue { struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; int x2[1]; struct TSCEFormat { struct TSCEFormatStruct { unsigned int x0; union { struct { unsigned short x0 : 16; unsigned char x1 : 8; unsigned char x2 : 3; unsigned char x3 : 1; unsigned char x4 : 1; } x0; struct { unsigned char x0 : 8; } x1; struct { unsigned char x0 : 8; unsigned char x1 : 8; unsigned char x2 : 1; } x2; struct { unsigned char x0 : 1; int x1; int x2; int x3; } x3; } x1; id x2; id x3; id x4; } x0; unsigned char x1; } x3; BOOL x4; } x0; unsigned long long x1[19]; int x2; })a0 locale:(id)a1;
- (void)p_removeAllFormulaFromCalculationEngine;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } x1; })cellReferenceForIndex:(struct TSUModelColumnOrRowIndex { unsigned int x0; })a0;
- (struct TSUModelColumnOrRowIndex { unsigned int x0; })baseIndexForViewIndex:(struct TSUViewColumnOrRowIndex { unsigned int x0; })a0;
- (void)removeUid:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x0[16]; struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned char x6; unsigned char x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned char x15; } x1; struct { unsigned long long x0; unsigned long long x1; } x2; } x0; } *)a0;

@end

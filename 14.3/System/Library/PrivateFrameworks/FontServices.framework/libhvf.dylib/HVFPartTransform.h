@interface HVFPartTransform : NSObject {
    struct HVF_PartTransform { struct ReadWriteProperty<CGVector, void> { struct function<CGVector ()> { struct __value_func<CGVector ()> { struct type { unsigned char __lx[24]; } __buf_; struct __base<CGVector ()> *__f_; } __f_; } get; struct function<void (const CGVector &)> { struct __value_func<void (const CGVector &)> { struct type { unsigned char __lx[24]; } __buf_; struct __base<void (const CGVector &)> *__f_; } __f_; } set; } translation; struct ReadWriteProperty<double, void> { struct function<double ()> { struct __value_func<double ()> { struct type { unsigned char __lx[24]; } __buf_; struct __base<double ()> *__f_; } __f_; } get; struct function<void (const double &)> { struct __value_func<void (const double &)> { struct type { unsigned char __lx[24]; } __buf_; struct __base<void (const double &)> *__f_; } __f_; } set; } rotation; struct ReadWriteProperty<double, unsigned long> { struct function<Util::ReadWriteProperty<double, void> (const unsigned long &)> { struct __value_func<Util::ReadWriteProperty<double, void> (const unsigned long &)> { struct type { unsigned char __lx[24]; } __buf_; struct __base<Util::ReadWriteProperty<double, void> (const unsigned long &)> *__f_; } __f_; } get; } axisValues; struct ReadWriteProperty<HVF::PartTransform, unsigned long> { struct function<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> { struct __value_func<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> { struct type { unsigned char __lx[24]; } __buf_; struct __base<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)> *__f_; } __f_; } get; } subpartTransforms; struct FlatPartCache { void /* function */ **_vptr$PartCache; struct function<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> { struct __value_func<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> { struct type { unsigned char __lx[24]; } __buf_; struct __base<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)> *__f_; } __f_; } loader; struct vector<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > > { struct pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *__begin_; struct pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *__end_; struct __compressed_pair<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > > { struct pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *__value_; } __end_cap_; } parts; } cache; struct Part *part; unsigned long long partIndex; struct BlendContext { struct Transform { double tx; double tyFlipped; double scaleX; double scaleY; double shearX; double shearY; } transform; struct AxisBlendValues { struct shared_ptr<const double> { double *__ptr_; struct __shared_weak_count *__cntrl_; } _defaultValue; struct SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > > { unsigned long long virtsize; struct vector<unsigned short, Util::Allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, Util::Allocator<unsigned short> > { unsigned short *__value_; struct Allocator<unsigned short> { struct MemoryResource *mem; } __value_; } __end_cap_; } ixspan; } vixmap; struct vector<double, Util::Allocator<double> > { double *__begin_; double *__end_; struct __compressed_pair<double *, Util::Allocator<double> > { double *__value_; struct Allocator<double> { struct MemoryResource *mem; } __value_; } __end_cap_; } values; } axisBlendValues; struct AllNSPTransforms { struct Transform *__begin_; struct Transform *__end_; struct __compressed_pair<HVF::Transform *, Util::Allocator<HVF::Transform> > { struct Transform *__value_; struct Allocator<HVF::Transform> { struct MemoryResource *mem; } __value_; } __end_cap_; } allNSPTransforms; struct AllNSPBlendValues { struct NSPBlendValues *__begin_; struct NSPBlendValues *__end_; struct __compressed_pair<HVF::NSPBlendValues *, Util::Allocator<HVF::NSPBlendValues> > { struct NSPBlendValues *__value_; struct Allocator<HVF::NSPBlendValues> { struct MemoryResource *mem; } __value_; } __end_cap_; struct optional<HVF::NSPBlendValues> { union { char __null_state_; struct NSPBlendValues { struct shared_ptr<const double> { double *__ptr_; struct __shared_weak_count *__cntrl_; } _defaultValue; struct SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > > { unsigned long long virtsize; struct vector<unsigned short, Util::Allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, Util::Allocator<unsigned short> > { unsigned short *__value_; struct Allocator<unsigned short> { struct MemoryResource *mem; } __value_; } __end_cap_; } ixspan; } vixmap; struct vector<double, Util::Allocator<double> > { double *__begin_; double *__end_; struct __compressed_pair<double *, Util::Allocator<double> > { double *__value_; struct Allocator<double> { struct MemoryResource *mem; } __value_; } __end_cap_; } values; } __val_; } ; BOOL __engaged_; } _defaultValue; } allNSPBlendValues; } blendContext; } partTransform;
}

@property (nonatomic) struct CGVector { double x0; double x1; } translation;
@property (nonatomic) double rotation;
@property (nonatomic) struct HVFAxisValues { struct HVF_PartTransform *x0; unsigned long long x1; unsigned long long x2; } axisValues;
@property (nonatomic) struct HVFSubpartTransforms { struct HVF_PartTransform *x0; unsigned long long x1; unsigned long long x2; } subpartTransforms;

- (void).cxx_destruct;
- (id).cxx_construct;
- (id)initForPartAtIndex:(unsigned long long)a0 withLoader:(id /* block */)a1;
- (struct HVFAxisValues { struct HVF_PartTransform *x0; unsigned long long x1; unsigned long long x2; })axisValues;
- (struct HVFSubpartTransforms { struct HVF_PartTransform *x0; unsigned long long x1; unsigned long long x2; })subpartTransforms;
- (BOOL)renderToContext:(id /* block */)a0;

@end

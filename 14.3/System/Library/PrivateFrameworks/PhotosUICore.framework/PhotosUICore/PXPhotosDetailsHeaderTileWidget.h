@class PXPhotosDetailsLoadCoordinationToken, PXBasicUIViewTileAnimator, PXReusableObjectPool, PXUIPlayButtonTile, NSString, NSMutableSet, PXUITapGestureRecognizer, PXPhotosDetailsContext, PXPhotoKitUIMediaProvider, PXOneUpPresentation, PXMovieProvider, PHFetchResult, PXPhotosDataSource, OKPresentationViewController, PXSlideshowSession, NSObject, PHAssetCollection, PXImageRequester, PXTilingController, PXSectionedSelectionManager, PXTitleSubtitleUILabelTile, PXWidgetSpec, PXPhotosDetailsHeaderSpec, PXPhotosDetailsHeaderSpecManager, PXUISlideshowViewTile;
@protocol PXDisplayAsset, PXWidgetDelegate, PXWidgetEditingDelegate, PXWidgetUnlockDelegate, OS_dispatch_queue, PXAnonymousView;

@interface PXPhotosDetailsHeaderTileWidget : NSObject <PXTileSource, PXTilingControllerTransitionDelegate, PXReusableObjectPoolDelegate, UIGestureRecognizerDelegate, PXChangeObserver, PXPhotosDataSourceChangeObserver, PXPhotosDetailsHeaderTileLayoutDelegate, PXSlideshowSessionDelegate, PXTilingControllerZoomAnimationCoordinatorDelegate, PXUISlideshowViewTileDelegate, PXZoomAnimationObserverCoordinatorDelegate, PXMovieProviderDelegate, PXScrollViewControllerObserver, PXUIWidget, PXDiagnosticsEnvironment> {
    NSObject<OS_dispatch_queue> *_internalWorkQueue;
    PXPhotosDetailsHeaderSpecManager *_specManager;
    PXTilingController *_tilingController;
    PXPhotoKitUIMediaProvider *_mediaProvider;
    PXReusableObjectPool *_tilePool;
    NSMutableSet *_tilesInUse;
    PXBasicUIViewTileAnimator *_tileAnimator;
    PXImageRequester *_primaryAssetImageRequester;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _keyAssetCropRect;
    PXSlideshowSession *_slideshowSession;
    struct { BOOL keyAssets; BOOL assetCollection; BOOL curatedAssetCollection; } _needsUpdateFlags;
}

@property (retain, nonatomic, setter=_setPhotosDataSource:) PXPhotosDataSource *_photosDataSource;
@property (retain, nonatomic, setter=_setHeaderSpec:) PXPhotosDetailsHeaderSpec *_headerSpec;
@property (retain, nonatomic, setter=_setMovieProvider:) PXMovieProvider *_movieProvider;
@property (retain, nonatomic, setter=_setSlideshowViewController:) OKPresentationViewController *_slideshowViewController;
@property (retain, nonatomic, setter=_setSlideshowTile:) PXUISlideshowViewTile *_slideshowTile;
@property (retain, nonatomic, setter=_setPlayButtonTile:) PXUIPlayButtonTile *_playButtonTile;
@property (retain, nonatomic, setter=_setTitleTile:) PXTitleSubtitleUILabelTile *_titleTile;
@property (nonatomic, getter=_isBasicContentLoaded, setter=_setBasicContentLoaded:) BOOL _basicContentLoaded;
@property (nonatomic, setter=_setCanLoadContentData:) BOOL _canLoadContentData;
@property (nonatomic, setter=_setSlideshowDidPrepare:) BOOL _slideshowDidPrepare;
@property (nonatomic, setter=_setSlideshowDidStart:) BOOL _slideshowDidStart;
@property (nonatomic, setter=_setSlideshowTileCheckedOut:) BOOL _isSlideshowTileCheckedOut;
@property (nonatomic, setter=_setPreventSlideshowNextStep:) BOOL _isPreventingSlideshowNextStep;
@property (nonatomic, setter=_setSlideshowStartingDelayFinished:) BOOL _slideshowStartingDelayFinished;
@property (retain, nonatomic, setter=_setLoadCoordinationToken:) PXPhotosDetailsLoadCoordinationToken *_loadCoordinationToken;
@property (retain, nonatomic, setter=_setKeyAssetsFetchResult:) PHFetchResult *_keyAssetsFetchResult;
@property (retain, nonatomic, setter=_setAssetCollection:) PHAssetCollection *_assetCollection;
@property (retain, nonatomic, setter=_setCuratedAssetCollection:) PHAssetCollection *_curatedAssetCollection;
@property (retain, nonatomic, setter=_setSlideshowReferenceAssetCollection:) PHAssetCollection *_slideshowReferenceAssetCollection;
@property (nonatomic, setter=_setTransitionAnimationsCount:) long long _transitionAnimationsCount;
@property (nonatomic, setter=_setHasLoadedContentData:) BOOL hasLoadedContentData;
@property (retain, nonatomic, setter=_setTapGestureRecognizer:) PXUITapGestureRecognizer *_tapGestureRecognizer;
@property (nonatomic, setter=_setContentSize:) struct CGSize { double width; double height; } _contentSize;
@property (readonly, nonatomic) id<PXDisplayAsset> presentedKeyAsset;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) PXOneUpPresentation *oneUpPresentation;
@property (readonly, nonatomic) BOOL cursorInteractionEnabled;
@property (weak, nonatomic) id<PXWidgetDelegate> widgetDelegate;
@property (weak, nonatomic) id<PXWidgetUnlockDelegate> widgetUnlockDelegate;
@property (weak, nonatomic) id<PXWidgetEditingDelegate> widgetEditingDelegate;
@property (retain, nonatomic) PXPhotosDetailsContext *context;
@property (retain, nonatomic) PXWidgetSpec *spec;
@property (readonly, nonatomic) BOOL hasContentForCurrentInput;
@property (readonly, nonatomic) double extraSpaceNeededAtContentBottom;
@property (readonly, nonatomic) NSObject<PXAnonymousView> *contentView;
@property (readonly, nonatomic) long long contentViewAnchoringType;
@property (readonly, nonatomic) PXTilingController *contentTilingController;
@property (readonly, nonatomic) long long contentLayoutStyle;
@property (readonly, nonatomic) NSString *localizedTitle;
@property (readonly, nonatomic) NSString *localizedSubtitle;
@property (readonly, nonatomic) NSString *localizedCaption;
@property (readonly, nonatomic) NSString *localizedDisclosureTitle;
@property (readonly, nonatomic) BOOL allowUserInteractionWithSubtitle;
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property (readonly, nonatomic) BOOL supportsSelection;
@property (nonatomic, getter=isSelecting) BOOL selecting;
@property (readonly, nonatomic) BOOL supportsFaceMode;
@property (nonatomic, getter=isFaceModeEnabled) BOOL faceModeEnabled;
@property (readonly, nonatomic) PXSectionedSelectionManager *selectionManager;
@property (readonly, nonatomic) BOOL wantsFocus;
@property (readonly, nonatomic) BOOL isInEditMode;
@property (nonatomic) struct CGSize { double x0; double x1; } maxVisibleSizeInEditMode;

+ (double)preferredHeaderContentHeightForWidth:(double)a0 screen:(id)a1;
+ (BOOL)canShowMiroMovieHeaderForDataSource:(id)a0;

- (void)setContentSize:(struct CGSize { double x0; double x1; })a0;
- (id)presentingViewControllerForMovieProvider:(id)a0;
- (void)zoomAnimationObserverCoordinator:(id)a0 animationWillBeginWithContext:(id)a1;
- (void)zoomAnimationObserverCoordinator:(id)a0 animationDidEndWithContext:(id)a1;
- (id)slideshowViewTileHostViewController:(id)a0;
- (void)slideshowSession:(id)a0 didPrepareSlideshow:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })photosDetailsHeaderTileLayout:(id)a0 contentsRectForAspectRatio:(double)a1;
- (void)_loadBasicContent;
- (id)photosDetailsHeaderTileLayoutFontName:(id)a0;
- (void)_updateLayoutStyle;
- (void)_invalidateKeyAssets;
- (void)_updateKeyAssetsIfNeeded;
- (void)_updateKeyAssetCropRect;
- (void)_invalidateAssetCollection;
- (void)_updateAssetCollectionIfNeeded;
- (void)_invalidateCuratedAssetCollection;
- (void)_updateCuratedAssetCollectionIfNeeded;
- (BOOL)_showPlaceholder;
- (void)_updateBasicContent;
- (void)_updateMovieProvider;
- (void)_filterOutVideosFromAssetCollection:(id)a0 filteredAssetCollection:(id *)a1 assets:(id *)a2;
- (void)_updateTitleTile;
- (void)_prepareSlideshowSessionWithAssetCollection:(id)a0 keyAsset:(id)a1;
- (void)_didFinishPreparingSlideshowSession:(id)a0;
- (id)viewToBeFocused;
- (void)_updateSlideshowTile;
- (void)_updateSlideshowPlayState;
- (id)init;
- (void)_slideshowStartingDelayDidFinish;
- (BOOL)_isSlideShowReadyToStart;
- (void)_headerSpecDidChange;
- (id)_startMiroMovie;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentRectInCoordinateSpace:(id)a0 withIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a1;
- (id)_contentRegionOfInterestForTileWithIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a0;
- (id)createHeaderSnapshotViewForMemoryCreationAnimation;
- (void *)_tileForIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a0 layout:(id)a1;
- (BOOL)_isPointWithinCurrentLayoutBounds:(struct CGPoint { double x0; double x1; })a0;
- (void)_updatePreventSlideshowNextStep;
- (void)playMiroMovieWithCompletionHandler:(id /* block */)a0;
- (void)ppt_navigateToMovieWithCompletionHandler:(id /* block */)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (void)observable:(id)a0 didChange:(unsigned long long)a1 context:(void *)a2;
- (id)keyAsset;
- (id)_scrollViewController;
- (id)tilingController:(id)a0 tileIdentifierConverterForChange:(id)a1;
- (id)tilingController:(id)a0 transitionAnimationCoordinatorForChange:(id)a1;
- (BOOL)_needsUpdate;
- (id)_subtitle;
- (void)scrollViewControllerDidEndScrolling:(id)a0;
- (void)_updateSlideshow;
- (void)scrollViewControllerWillBeginScrolling:(id)a0;
- (id)_title;
- (void)photosDataSource:(id)a0 didChange:(id)a1;
- (void)loadContentData;
- (double)preferredContentHeightForWidth:(double)a0;
- (void)unloadContentData;
- (void)_handleTapGesture:(id)a0;
- (id)extendedTraitCollection;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (id)_titleFontName;
- (id)regionOfInterestForContext:(id)a0;
- (void)preloadWithSourceRegionOfInterest:(id)a0 forContext:(id)a1;
- (id)zoomAnimationCoordinatorForContext:(id)a0;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })a0 forCoordinateSpace:(id)a1;
- (void)tilingControllerZoomAnimationCoordinator:(id)a0 enumerateTilesToAnimateInLayerWithType:(long long)a1 layout:(id)a2 zoomAnimationContext:(id)a3 usingBlock:(id /* block */)a4;
- (void *)checkOutTileForIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a0 layout:(id)a1;
- (void)checkInTile:(void *)a0 withIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a1;
- (id)px_diagnosticsItemProvidersForPoint:(struct CGPoint { double x0; double x1; })a0 inCoordinateSpace:(id)a1;

@end

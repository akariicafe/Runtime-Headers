@class NSMapTable, NSMutableIndexSet;

@interface PXTileStatePool : NSObject {
    struct PXTileState { BOOL x0; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x1; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x2; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x3; unsigned long long x4; BOOL x5; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x6; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x7; BOOL x8; BOOL x9; void *x10; void *x11; void *x12; unsigned long long x13; } *_states;
    struct unordered_map<PXTileIdentifier, unsigned long, std::__1::hash<PXTileIdentifier>, std::__1::equal_to<PXTileIdentifier>, std::__1::allocator<std::__1::pair<const PXTileIdentifier, unsigned long> > > { struct __hash_table<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::__unordered_map_hasher<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::hash<PXTileIdentifier>, true>, std::__1::__unordered_map_equal<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::equal_to<PXTileIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<PXTileIdentifier, unsigned long> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::hash<PXTileIdentifier>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<PXTileIdentifier, std::__1::__hash_value_type<PXTileIdentifier, unsigned long>, std::__1::equal_to<PXTileIdentifier>, true> > { float __value_; } __p3_; } __table_; } _indexByTargetIdentifier;
    NSMapTable *_tileIndexesByPageKey;
    long long _statesMaxCount;
    NSMutableIndexSet *_usedIndexes;
    NSMutableIndexSet *_unusedIndexes;
    NSMutableIndexSet *_pageKeysToRemove;
}

@property (readonly, nonatomic) long long count;

- (id)init;
- (void).cxx_destruct;
- (void)dealloc;
- (id)description;
- (id).cxx_construct;
- (void)checkInIndex:(unsigned long long)a0;
- (unsigned long long)checkOutIndexWithInitialConfiguration:(id /* block */)a0;
- (void)checkInIndexes:(id)a0;
- (void)_cleanupStateAtIndex:(unsigned long long)a0;
- (struct PXProtectedTileState { BOOL x0; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x1; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x2; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x3; unsigned long long x4; BOOL x5; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x6; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x7; BOOL x8; BOOL x9; void *x10; void *x11; void *x12; unsigned long long x13; } *)stateAtIndex:(unsigned long long)a0;
- (struct PXTileState { BOOL x0; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x1; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x2; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x3; unsigned long long x4; BOOL x5; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x6; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x7; BOOL x8; BOOL x9; void *x10; void *x11; void *x12; unsigned long long x13; } *)_mutableStateAtIndex:(unsigned long long)a0;
- (void)enumerateStatesUsingBlock:(id /* block */)a0;
- (void)enumerateStatesAtIndexes:(id)a0 usingBlock:(id /* block */)a1;
- (void)enumerateStatesInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 usingBlock:(id /* block */)a1;
- (unsigned long long)indexOfFirstStatePassingTest:(id /* block */)a0;
- (id)indexesOfStatesPassingTest:(id /* block */)a0;
- (unsigned long long)indexOfStateWithTargetIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a0;
- (void)setTargetIdentifier:(struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; })a0 forTileStateAtIndex:(unsigned long long)a1;
- (void)setCurrentGeometry:(const struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } *)a0 forTileStateAtIndex:(unsigned long long)a1;
- (void)_storeTargetIdentifierLookupForTileState:(struct PXTileState { BOOL x0; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x1; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x2; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x3; unsigned long long x4; BOOL x5; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x6; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x7; BOOL x8; BOOL x9; void *x10; void *x11; void *x12; unsigned long long x13; } *)a0 withIndex:(unsigned long long)a1;
- (void)_storeCurrentFrameLookupForTileState:(struct PXTileState { BOOL x0; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x1; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x2; struct PXTileIdentifier { unsigned long long x0; unsigned long long x1[10]; } x3; unsigned long long x4; BOOL x5; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x6; struct PXTileGeometry { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; double x5; BOOL x6; struct CGSize { double x0; double x1; } x7; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x8; void *x9; } x7; BOOL x8; BOOL x9; void *x10; void *x11; void *x12; unsigned long long x13; } *)a0 withIndex:(unsigned long long)a1;

@end

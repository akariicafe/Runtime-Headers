@class PVEffectTimedPropertiesComponent, NSMutableDictionary, NSDictionary, NSString, NSLock, NSMutableArray;

@interface PVEffect : NSObject <PVEffectHitArea, PVEffectTransformable, PVEffectTimedProperties, PVEffectTextual, PVEffectTranscript, NSSecureCoding, NSCopying> {
    NSString *_effectID;
    NSString *_effectType;
    NSString *_displayName;
    NSMutableDictionary *_inspectableProperties;
    NSLock *_inspectablePropertiesLock;
    struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } *_loadCount;
    NSMutableArray *_components;
    PVEffectTimedPropertiesComponent *_timedPropertiesComponent;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (nonatomic) struct { struct { long long value; int timescale; unsigned int flags; long long epoch; } start; struct { long long value; int timescale; unsigned int flags; long long epoch; } duration; } effectRange;
@property (nonatomic) BOOL conformToInputAspect;
@property (copy, nonatomic) NSDictionary *inspectableProperties;
@property (retain, nonatomic) NSMutableDictionary *effectParameters;
@property (retain, nonatomic) NSDictionary *contentProperties;
@property (nonatomic) BOOL isPreview;
@property (nonatomic) BOOL isRecording;
@property (nonatomic) BOOL useLocalLoopTime;
@property (nonatomic) BOOL isInInteractiveMode;
@property (nonatomic) BOOL shouldDisableFadeOut;
@property (nonatomic, getter=isHidden) BOOL hidden;

+ (void)setInteractiveMode:(BOOL)a0;
+ (void)initEffectRegistry;
+ (id)newEffectWithID:(id)a0;
+ (id)registeredEffectIDsForEffectType:(id)a0;
+ (BOOL)effectIDIsNone:(id)a0;
+ (id)effectTypeForEffectID:(id)a0;
+ (id)displayNameForEffectID:(id)a0;
+ (id)shadowFromAttributedString:(id)a0 defaultAttributes:(id)a1;
+ (double)textHeightFromAttributedString:(id)a0 defaultAttributes:(id)a1 scale:(double)a2;
+ (long long)verticalAlignmentFromAttributedString:(id)a0 defaultAttributes:(id)a1;
+ (double)xOffsetForTextTrackingFromAttributedString:(id)a0;
+ (void)initEffectRegistryWithHostDelegate:(id)a0;
+ (void)cleanupEffectsCache;
+ (void)noteApplicationDidReceiveMemoryWarning;
+ (BOOL)isAllCapsFromAttributes:(id)a0;
+ (double)baselineOffsetFromAttributedString:(id)a0;
+ (void)modifyAttributedStringByApplyingSubstituteFont:(id)a0 attributes:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
+ (void)modifyAttributedStringByAdjustingKerning:(id)a0 attributes:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 scale:(double)a3;
+ (void)modifyAttributedStringByAdjustingOutline:(id)a0 attributes:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 scale:(double)a3;
+ (void)modifyAttributedStringByAdjustingFontSize:(id)a0 scale:(double)a1;
+ (void)modifyAttributedStringByAdjustingForNegativeLineSpacing:(id)a0 scale:(double)a1;
+ (void)modifyAttributedStringByAdjustingShadow:(id)a0 scale:(double)a1 rotation:(double)a2;
+ (void)modifyAttributedStringByAdjustingFont:(id)a0 toFitSize:(struct CGSize { double x0; double x1; })a1;
+ (BOOL)effectIDIsRegistered:(id)a0;
+ (id)propertiesForEffect:(id)a0;
+ (id)categoryForEffectID:(id)a0;
+ (void)registerEffectClass:(Class)a0 forEffectID:(id)a1 withProperties:(id)a2;
+ (void)registerEffects;
+ (void)handleApplicationWillTerminate;
+ (void)willTerminate:(id)a0;
+ (void)handleCleanupEffectsCache;
+ (void)handleApplicationDidReceiveMemoryWarning;
+ (void)cleanupEffectsSingletons;
+ (BOOL)isInteractiveMode;
+ (id)newEffectWithURL:(id)a0;
+ (id)newEffectWithData:(id)a0;
+ (void)clearPreviewStats;
+ (id)attributeForName:(id)a0 fromAttributedString:(id)a1 defaultAttributes:(id)a2;
+ (double)textHeightFromAttributedString:(id)a0 defaultAttributes:(id)a1;
+ (void)modifyAttributedStringByAdjustingShadow:(id)a0 effectTransform:(id)a1;
+ (void)modifyAttributedStringByAdjustingOutline:(id)a0 attributes:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
+ (void)modifyAttributedStringByAdjustingForNegativeLineSpacing:(id)a0;
+ (void)runDeferredRegistration;
+ (void)ensureEffectsRegistered;
+ (id)_effectRegistry;
+ (id)_effectRegistryForLookup;
+ (id)_registryEntryForEffectID:(id)a0;
+ (id)allRegisteredEffectIDs;
+ (Class)classForEffectID:(id)a0;
+ (void)appFinishedLaunching:(id)a0;
+ (void)deferEffectRegistrationForClass:(Class)a0;
+ (id)userVisibleEffectIDs;
+ (id)registeredEffectIDsForEffectTypes:(id)a0;
+ (id)firstRegisteredEffectIDContainingSubstring:(id)a0;
+ (id)registeredEffectIDsForClass:(Class)a0;
+ (id)displayNameForEffectType:(id)a0;
+ (id)themeForEffectID:(id)a0;
+ (id)descriptionForEffectID:(id)a0;
+ (BOOL)isVideoForEffectID:(id)a0;
+ (id)defaultVideoTransitionEffectID;
+ (id)_registeredEffectClasses;
+ (void)_registerBuiltInEffects;
+ (void)_registerEffectsInBundle:(id)a0 atPath:(id)a1;
+ (void)noteApplicationWillTerminate;

- (BOOL)isReady;
- (void)setTransform:(id)a0;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)releaseResources;
- (int)origin;
- (void)dealloc;
- (void)setHidden:(BOOL)a0;
- (struct CGSize { double x0; double x1; })outputSize;
- (id)initWithCoder:(id)a0;
- (int)orientation;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (id)effectType;
- (id)categoryName;
- (void)encodeWithCoder:(id)a0;
- (id)displayName;
- (void)setTranscriptionText:(id)a0;
- (id)cameraTransform;
- (id)effectID;
- (void)removeAllTimedPropertiesDelegates;
- (void)addTimedPropertiesDelegate:(id)a0 userContext:(id)a1;
- (id)initWithEffectID:(id)a0;
- (float)proxyRenderScale;
- (BOOL)isTextFlipped;
- (BOOL)supportsFlippingText;
- (BOOL)supportsOrientation;
- (struct PVCGPointQuad { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; })cornersAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 includeDropShadow:(BOOL)a2 scale:(struct CGPoint { double x0; double x1; })a3 viewSize:(struct CGSize { double x0; double x1; })a4 viewOrigin:(int)a5;
- (BOOL)bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 atTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 forcePosterFrame:(BOOL)a2 includeDropShadow:(BOOL)a3 includeMasks:(BOOL)a4;
- (id)transformAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 includeTransformAnimation:(BOOL)a2 viewSize:(struct CGSize { double x0; double x1; })a3 viewOrigin:(int)a4;
- (id)hitAreaPointsAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 includeDropShadow:(BOOL)a2 scale:(struct CGPoint { double x0; double x1; })a3 viewSize:(struct CGSize { double x0; double x1; })a4 viewOrigin:(int)a5;
- (id)defaultAttributedString:(unsigned long long)a0;
- (struct PVCGPointQuad { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; })textCornersAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 index:(unsigned long long)a1 forcePosterFrame:(BOOL)a2 includeDropShadow:(BOOL)a3 scale:(struct CGPoint { double x0; double x1; })a4 viewSize:(struct CGSize { double x0; double x1; })a5 viewOrigin:(int)a6;
- (id)textEditingBoundsAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 useParagraphBounds:(BOOL)a2 includeDropShadow:(BOOL)a3 includeMasks:(BOOL)a4;
- (void)beginTextEditing;
- (void)endTextEditing;
- (double)topLevelOpacity;
- (BOOL)resourcesAreReady;
- (BOOL)loadResources;
- (void)updateInspectableProperties:(id)a0;
- (void)setInspectableProperty:(id)a0 forKey:(id)a1;
- (id)cameraProjection;
- (id)transformAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 viewSize:(struct CGSize { double x0; double x1; })a2 viewOrigin:(int)a3;
- (id)textTransformsAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 viewSize:(struct CGSize { double x0; double x1; })a2 viewOrigin:(int)a3;
- (void)addEntriesToInspectableProperties:(id)a0;
- (BOOL)loadEffect;
- (void)updateInspectableProperties;
- (struct HGRef<HGNode> { struct HGNode *x0; })previewHGNodeForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 inputHGNode:(struct HGRef<HGNode> { struct HGNode *x0; })a1 outputSize:(struct CGSize { double x0; double x1; })a2 renderer:(struct HGRenderer { void /* function */ **x0; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x1; struct HGNode *x2; struct HGBitmap *x3; struct HGRendererTextureUnit { struct HGBitmap *x0; struct HGTransform *x1; int x2; } x4[8]; struct vector<DepthBufferManager *, std::__1::allocator<DepthBufferManager *> > { struct DepthBufferManager **x0; struct DepthBufferManager **x1; struct __compressed_pair<DepthBufferManager **, std::__1::allocator<DepthBufferManager *> > { struct DepthBufferManager **x0; } x2; } x5; struct vector<HGExecutionUnit *, std::__1::allocator<HGExecutionUnit *> > { struct HGExecutionUnit **x0; struct HGExecutionUnit **x1; struct __compressed_pair<HGExecutionUnit **, std::__1::allocator<HGExecutionUnit *> > { struct HGExecutionUnit **x0; } x2; } x6; struct HGExecutionData *x7; struct HGSyncData *x8; struct _opaque_pthread_rwlock_t { long long x0; char x1[192]; } x9; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x10; struct HGLUTCacheManager *x11; struct GraphStats *x12; struct RendererStats *x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int x24; int x25; int x26; int x27; int x28; int x29; int x30; int x31; int x32; int x33; int x34; int x35; int x36; int x37; int x38; int x39; int x40; int x41; int x42; int x43; int x44; int x45; struct HGCache { void /* function */ **x0; int x1; struct HGCacheEntry *x2; struct HGCacheEntry *x3; struct HGCacheEntry *x4; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x5; } x46; BOOL x47; BOOL x48; BOOL x49; unsigned int x50; struct HGLimits *x51[2]; int x52; struct HGDotGraph { struct map<unsigned long, HGDotGraph::Node, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, HGDotGraph::Node> > > { struct __tree<std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, HGDotGraph::Node> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, HGDotGraph::Node>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::less<unsigned long>, true> > { unsigned long long x0; } x2; } x0; } x0; struct map<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge> > > { struct __tree<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::__map_value_compare<std::__1::tuple<unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::tuple<unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, true> > { unsigned long long x0; } x2; } x0; } x1; struct __sFILE *x2; BOOL x3; BOOL x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x53; struct HGBufferDumper { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x2; int x3; int x4; BOOL x5; } x54; unsigned int x55; int x56; unsigned long long x57; unsigned long long x58; int x59; struct HGLimitsCache *x60; struct HGRenderQueue *x61; void *x62; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x63; } *)a3;
- (struct HGRef<HGNode> { struct HGNode *x0; })hgNodeForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 inputs:(const struct PVInputHGNodeMap<unsigned int> { struct map<unsigned int, HGRef<HGNode>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, HGRef<HGNode> > > > { struct __tree<std::__1::__value_type<unsigned int, HGRef<HGNode> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, HGRef<HGNode> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, HGRef<HGNode> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, HGRef<HGNode> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, HGRef<HGNode> >, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x0; struct map<unsigned int, PCRect<double>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, PCRect<double> > > > { struct __tree<std::__1::__value_type<unsigned int, PCRect<double> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, PCRect<double> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, PCRect<double> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, PCRect<double> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, PCRect<double> >, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x1; struct map<unsigned int, PCMatrix44Tmpl<double>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, PCMatrix44Tmpl<double> > > > { struct __tree<std::__1::__value_type<unsigned int, PCMatrix44Tmpl<double> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, PCMatrix44Tmpl<double> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, PCMatrix44Tmpl<double> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, PCMatrix44Tmpl<double> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, PCMatrix44Tmpl<double> >, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x2; struct map<unsigned int, HGRef<HGCVBitmap>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, HGRef<HGCVBitmap> > > > { struct __tree<std::__1::__value_type<unsigned int, HGRef<HGCVBitmap> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, HGRef<HGCVBitmap> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, HGRef<HGCVBitmap> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, HGRef<HGCVBitmap> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, HGRef<HGCVBitmap> >, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x3; struct map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int> > > { struct __tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x4; } *)a1 renderer:(const struct HGRef<HGRenderer> { struct HGRenderer *x0; } *)a2 igContext:(struct HGRef<PVInstructionGraphContext> { struct PVInstructionGraphContext *x0; })a3;
- (void)releaseEffect;
- (void)assertInspectablePropertiesAreLocked;
- (void)assertInspectablePropertiesAreUnlocked;
- (id)textEditingBounds:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (id)textTransformsAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 forcePosterFrame:(BOOL)a1 includeTransformAnimation:(BOOL)a2 viewSize:(struct CGSize { double x0; double x1; })a3 viewOrigin:(int)a4;
- (BOOL)hasTimedPropertiesDelegates;
- (BOOL)supportsExtendedRangeInputs;
- (id)effectDescription;
- (BOOL)isTranscription;
- (void)clearTranscription;
- (void)resetToDefaultTranscriptionForLocaleID:(id)a0;
- (BOOL)transcriptionHitTest:(struct CGPoint { double x0; double x1; })a0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)updateLiveTitlePickerLoopTime:(BOOL)a0;
- (void)runWithInspectableProperties:(id /* block */)a0;
- (id)inspectablePropertyForKey:(id)a0;
- (void)setTopLevelGroupTransform:(id)a0;
- (void)enableCameraOverride:(id)a0 projection:(id)a1;
- (void)disableCameraOverride;
- (BOOL)isCameraOverrideEnabled;
- (id)initWithContentID:(id)a0 andDictionary:(id)a1;
- (void)_configureComponents;
- (id)contentPropertyForKey:(id)a0;
- (void)_copyWithZone:(struct _NSZone { } *)a0 into:(id)a1;
- (void)_postInit:(id)a0;
- (void)_decodeFromCoder:(id)a0 into:(id)a1;
- (id)descriptionOfInspectableProperties;
- (id)contentBundle;
- (BOOL)shouldRenderPreviewAtPosterTime;
- (BOOL)hasBuiltInEnvironment;
- (BOOL)usesDefaultChannelDataEncoding;
- (BOOL)writeDefaultChannels;
- (void)applyInspectableProperties;
- (BOOL)applyTimedPropertiesForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)removeTimedPropertiesDelegate:(id)a0;
- (id)timedPropertiesDelegates;
- (BOOL)hasTimedPropertiesDelegate:(id)a0;
- (id)userContextForTimedPropertiesDelegate:(id)a0;
- (BOOL)hasAllNecessaryResources;

@end

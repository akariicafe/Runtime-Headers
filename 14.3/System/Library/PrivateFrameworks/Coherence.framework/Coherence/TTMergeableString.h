@class NSUUID, _TtC9Coherence11ObjCReplica, _TtC9Coherence9CRContext, _TtC9Coherence11ObjCVersion;

@interface TTMergeableString : NSObject {
    struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **__begin_; struct TopoSubstring **__end_; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **__value_; } __end_cap_; } _startNodes;
    struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **__begin_; struct TopoSubstring **__end_; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **__value_; } __end_cap_; } _endNodes;
    struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **__begin_; struct TopoSubstring **__end_; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **__value_; } __end_cap_; } _orderedSubstrings;
    unsigned long long _editCount;
    BOOL _cacheInvalid;
    TTMergeableString *_renamedString;
}

@property (readonly, nonatomic) NSUUID *uuid;
@property (readonly, nonatomic) struct TopoReplica { NSUUID *uuid; unsigned int index; } replica;
@property (retain, nonatomic) _TtC9Coherence11ObjCVersion *version;
@property (nonatomic) long long localCounter;
@property (readonly, nonatomic) _TtC9Coherence11ObjCReplica *addedByReplica;
@property (retain, nonatomic) _TtC9Coherence11ObjCVersion *addedByVersion;
@property (nonatomic) long long addedByLocalCounter;
@property (nonatomic) BOOL hasLocalChanges;
@property (retain, nonatomic) id attributedString;
@property (nonatomic) long long renameGeneration;
@property (readonly, nonatomic) _TtC9Coherence9CRContext *context;

- (void)invalidateCache;
- (unsigned long long)length;
- (void)getSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a0 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)deleteSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a0 withCharacterRanges:(struct vector<_NSRange, std::__1::allocator<_NSRange> > { struct _NSRange *x0; struct _NSRange *x1; struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > { struct _NSRange *x0; } x2; } *)a1;
- (struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)orderedSubstrings;
- (struct TopoSubstring { struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x0; struct vector<TopoID, std::__1::allocator<TopoID> > { struct TopoID *x0; struct TopoID *x1; struct __compressed_pair<TopoID *, std::__1::allocator<TopoID> > { struct TopoID *x0; } x2; } x1; struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } x2; unsigned int x3; unsigned int x4; } *)splitTopoSubstring:(struct TopoSubstring { struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x0; struct vector<TopoID, std::__1::allocator<TopoID> > { struct TopoID *x0; struct TopoID *x1; struct __compressed_pair<TopoID *, std::__1::allocator<TopoID> > { struct TopoID *x0; } x2; } x1; struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } x2; unsigned int x3; unsigned int x4; } *)a0 atIndex:(unsigned int)a1;
- (id)selectionForCharacterRanges:(id)a0 selectionAffinity:(unsigned long long)a1;
- (id)characterRangesForSelection:(id)a0 selectedSubstringsBlock:(id /* block */)a1;
- (void)updateSubstringIndexes;
- (void)getSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a0 inOrderedSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a1 forCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (BOOL)isFragment;
- (void)traverseUnordered:(id /* block */)a0;
- (struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)startNodes;
- (BOOL)check:(id *)a0;
- (void)dumpMergeData:(id)a0;
- (BOOL)canMergeString:(id)a0;
- (void)sortSplitNodes;
- (BOOL)graphIsEqual:(id)a0;
- (void)updateAttributedStringAfterMerge;
- (id)replicaUUIDForCharacterAtIndex:(unsigned long long)a0;
- (id)selectionForCharacterRanges:(id)a0;
- (id)characterRangesForSelection:(id)a0;
- (id)dotDescription:(unsigned long long)a0;
- (struct TopoSubstring { struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x0; struct vector<TopoID, std::__1::allocator<TopoID> > { struct TopoID *x0; struct TopoID *x1; struct __compressed_pair<TopoID *, std::__1::allocator<TopoID> > { struct TopoID *x0; } x2; } x1; struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } x2; unsigned int x3; unsigned int x4; } *)getSubstringBeforeTopoID:(struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; })a0;
- (void)getSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a0 forTopoIDRange:(struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; })a1;
- (void)getCharacterRanges:(struct vector<_NSRange, std::__1::allocator<_NSRange> > { struct _NSRange *x0; struct _NSRange *x1; struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > { struct _NSRange *x0; } x2; } *)a0 forSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a1;
- (void)enumerateSubstrings:(id /* block */)a0;
- (unsigned long long)mergeWithString:(id)a0;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)dealloc;
- (void)apply:(id)a0;
- (void)removeObjectsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_updateCache;
- (void)setContext:(id)a0;
- (void)rename:(id)a0;
- (id)description;
- (void)undeleteSubstrings:(struct vector<std::__1::pair<TopoIDRange, id<TTMergeableStringStorage> >, std::__1::allocator<std::__1::pair<TopoIDRange, id<TTMergeableStringStorage> > > > { struct pair<TopoIDRange, id<TTMergeableStringStorage> > *x0; struct pair<TopoIDRange, id<TTMergeableStringStorage> > *x1; struct __compressed_pair<std::__1::pair<TopoIDRange, id<TTMergeableStringStorage> > *, std::__1::allocator<std::__1::pair<TopoIDRange, id<TTMergeableStringStorage> > > > { struct pair<TopoIDRange, id<TTMergeableStringStorage> > *x0; } x2; } *)a0;
- (void)coalesce;
- (id).cxx_construct;
- (BOOL)isEqual:(id)a0;
- (void)endEditing;
- (struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)endNodes;
- (void)beginEditing;
- (id)initAsFragment:(BOOL)a0 storage:(id)a1 uuid:(id)a2 context:(id)a3;
- (long long)substringCount;
- (void)saveSubstrings:(struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } *)a0 encoder:(id)a1;
- (id)uuidLookupDictionaryFor:(id)a0;
- (id)initWithDecoder:(id)a0 error:(id *)a1;
- (void)saveToEncoder:(id)a0;
- (id)temporaryNamesExcludingSelf:(BOOL)a0;
- (void)deleteAllSubstrings;
- (id)copyRenamedIfAvailable:(BOOL)a0;
- (id)renamedIfAvailable;
- (void)useRenameIfAvailable;
- (void)insertStorage:(id)a0 atIndex:(unsigned long long)a1;
- (void)insertStorage:(id)a0 after:(struct TopoSubstring { struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x0; struct vector<TopoID, std::__1::allocator<TopoID> > { struct TopoID *x0; struct TopoID *x1; struct __compressed_pair<TopoID *, std::__1::allocator<TopoID> > { struct TopoID *x0; } x2; } x1; struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } x2; unsigned int x3; unsigned int x4; } *)a1 before:(struct TopoSubstring { struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x0; struct vector<TopoID, std::__1::allocator<TopoID> > { struct TopoID *x0; struct TopoID *x1; struct __compressed_pair<TopoID *, std::__1::allocator<TopoID> > { struct TopoID *x0; } x2; } x1; struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } x2; unsigned int x3; unsigned int x4; } *)a2;
- (id)renamed:(id)a0;
- (id)temporaryConcurrentNames;
- (void)applyRenamesAndRetainOrRelease:(id)a0;
- (void)applyTimestampRenames:(id)a0;
- (void)replaceStorageInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withStorage:(id)a1;
- (void)addNewAddedByFor:(struct TopoSubstring { struct TopoIDRange { struct TopoID { struct TopoReplica { id x0; unsigned int x1; } x0; unsigned int x1; } x0; unsigned int x1; } x0; struct vector<TopoID, std::__1::allocator<TopoID> > { struct TopoID *x0; struct TopoID *x1; struct __compressed_pair<TopoID *, std::__1::allocator<TopoID> > { struct TopoID *x0; } x2; } x1; struct vector<TopoSubstring *, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; struct TopoSubstring **x1; struct __compressed_pair<TopoSubstring **, std::__1::allocator<TopoSubstring *> > { struct TopoSubstring **x0; } x2; } x2; unsigned int x3; unsigned int x4; } *)a0;
- (id)mergeableIndexForCharacterIndex:(long long)a0 affinity:(unsigned long long)a1;
- (unsigned long long)characterIndexForIndex:(id)a0;
- (id)fullyRenamed;
- (BOOL)needToFinalizeTimestamps;
- (void)finalizeTimestamps;
- (void)deltaTo:(id)a0 added:(id /* block */)a1 deleted:(id /* block */)a2;
- (void)_deltaTo:(id)a0 added:(id /* block */)a1 deleted:(id /* block */)a2;
- (id)undoCommandToChangeTo:(id)a0;
- (void)deltaTo:(id)a0 edited:(id /* block */)a1;
- (BOOL)hasDeltaTo:(id)a0 compareElements:(id /* block */)a1;

@end

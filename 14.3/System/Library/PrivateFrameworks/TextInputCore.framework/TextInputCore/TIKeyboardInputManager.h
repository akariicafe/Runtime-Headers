@class NSDictionary, TIRevisionHistory, TISmartPunctuationOptions, TILanguageSelectionController, TIEmojiCandidateGenerator, NSMutableSet, TILRUDictionary, TITextCheckerExemptions, TISmartSelector, TISKMetricCollector, TICounterChangeCache, NSArray, TIAutoshiftRegularExpressionLoader, TIKeyboardInputManagerState, NSString, NSMutableDictionary, TIKeyboardLayout, TIKeyboardCandidate, TIKeyboardInputManagerConfig, TICoreAnalyticsEventDispatcher, NSMutableString, TIKBUserModel, TIAutocorrectionList, TIKeyboardLayoutState, TIInputContextHistory, NSCharacterSet, TICharacterSetDescription, TITypingSessionMonitor, TIKeyboardState, TIKeyboardFeatureSpecialization;
@protocol TICandidateHandler;

@interface TIKeyboardInputManager : TIKeyboardInputManagerBase <TIRevisionHistoryDelegate, TITypingSessionDelegate, TILanguageSelectionControllerDelegate> {
    struct TIInputManager { void /* function */ **x0; struct vector<KB::Input, std::__1::allocator<KB::Input> > { struct Input *x0; struct Input *x1; struct __compressed_pair<KB::Input *, std::__1::allocator<KB::Input> > { struct Input *x0; } x2; } x1; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x2; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x3; unsigned int x4; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x5; struct retain_ptr<const __CFLocale *> { struct __CFLocale *x0; } x6; struct ConfidenceModel { struct Params { float x0; float x1; float x2; float x3; float x4; int x5; int x6; } x0; } x7; struct LockedInput { unsigned int x0; unsigned int x1; } x8; struct unique_ptr<TI::Favonius::StrokeBuildManager, std::__1::default_delete<TI::Favonius::StrokeBuildManager> > { struct __compressed_pair<TI::Favonius::StrokeBuildManager *, std::__1::default_delete<TI::Favonius::StrokeBuildManager> > { struct StrokeBuildManager *x0; } x0; } x9; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x10; struct RefPtr<KB::DictionaryContainer> { struct DictionaryContainer *x0; } x11; struct shared_ptr<KB::LanguageModel> { struct LanguageModel *x0; struct __shared_weak_count *x1; } x12; unsigned int x13; struct Vector<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> { unsigned long long x0; struct VectorBuffer<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> { struct RefPtr<TI::Favonius::LayoutKey> *x0; unsigned long long x1; } x1; } x14; BOOL x15; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x16; struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout *x0; } x17; struct ContinuousPathDetector { struct map<int, KB::ContinuousPathDetector::AnnotatedPath, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, KB::ContinuousPathDetector::AnnotatedPath> > > { struct __tree<std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, std::__1::__map_value_compare<int, std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, std::__1::less<int>, true> > { unsigned long long x0; } x2; } x0; } x0; struct Parameters { float x0; float x1; float x2; float x3; float x4; float x5; } x1; double x2; float x3; float x4; } x18; int x19; BOOL x20; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x21; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x22; struct shared_ptr<KB::InputManagerSpecialization> { struct InputManagerSpecialization *x0; struct __shared_weak_count *x1; } x23; id /* block */ x24; struct shared_ptr<KB::TypologyLogger> { struct TypologyLogger *x0; struct __shared_weak_count *x1; } x25; BOOL x26; BOOL x27; BOOL x28; BOOL x29; BOOL x30; BOOL x31; BOOL x32; BOOL x33; BOOL x34; int x35; } *m_impl;
    NSMutableString *m_composedText;
    unsigned long long m_initialSelectedIndex;
    TIKeyboardLayout *_keyLayout;
    TIKeyboardLayoutState *_layoutState;
    TIKeyboardInputManagerState *_currentState;
    TIKeyboardFeatureSpecialization *_keyboardFeatureSpecialization;
    NSCharacterSet *_allowPredictionCharacterSet;
    NSMutableDictionary *_cachedLayoutTags;
    struct shared_ptr<KB::TypologyLogger> { struct TypologyLogger *__ptr_; struct __shared_weak_count *__cntrl_; } m_typology_recorder;
    struct shared_ptr<KB::LanguageModel> { struct LanguageModel *__ptr_; struct __shared_weak_count *__cntrl_; } m_lightweight_language_model;
    TILanguageSelectionController *_languageSelectionController;
    TIEmojiCandidateGenerator *_emojiCandidateGenerator;
    TIInputContextHistory *_synchronizedInputContextHistory;
    TICharacterSetDescription *_wordCharacters;
    TICharacterSetDescription *_closingQuotes;
    TICharacterSetDescription *_openingQuotes;
    TISmartPunctuationOptions *_smartOptions;
    int _lastHitTestKeycode;
    BOOL _didInitialSync;
}

@property (retain, nonatomic) TIKeyboardLayout *keyLayout;
@property (readonly, nonatomic) TIRevisionHistory *revisionHistory;
@property (readonly, nonatomic) TILRUDictionary *autocorrectionHistory;
@property (readonly, nonatomic) TILRUDictionary *recentAutocorrections;
@property (readonly, nonatomic) TILRUDictionary *recentPredictiveInputSelections;
@property (readonly, nonatomic) TILRUDictionary *rejectedAutocorrections;
@property (retain, nonatomic) TILRUDictionary *autocorrectionForCurrentStem;
@property (retain, nonatomic) TILRUDictionary *rejectedDisplayedAutocorrectionsForCurrentStem;
@property (readonly, nonatomic) TILRUDictionary *autocorrectionListsSuggestedForCurrentInput;
@property (readonly, nonatomic) TILRUDictionary *autocorrectionListsForWordsInDocument;
@property (nonatomic, getter=isWordLearningEnabled) BOOL wordLearningEnabled;
@property (nonatomic) BOOL isEditingWordPrefix;
@property (retain, nonatomic) TIAutoshiftRegularExpressionLoader *autoshiftRegexLoader;
@property (readonly, nonatomic) TITextCheckerExemptions *textCheckerExemptions;
@property (readonly, nonatomic) NSCharacterSet *allowPredictionCharacterSet;
@property (readonly, nonatomic) unsigned long long linguisticResourceStatus;
@property (nonatomic) long long deleteKeyCount;
@property (readonly, nonatomic) TIEmojiCandidateGenerator *emojiCandidateGenerator;
@property (retain, nonatomic) TIKeyboardCandidate *hitTestCorrectedInputMatchingCandidate;
@property (copy, nonatomic) TIKeyboardCandidate *lastAcceptedText;
@property (retain, nonatomic) NSMutableSet *rejectedConversionsForCurrentContinuousPath;
@property (retain, nonatomic) TITypingSessionMonitor *typingSessionMonitor;
@property (retain, nonatomic) TIKBUserModel *userModel;
@property (retain, nonatomic) TICoreAnalyticsEventDispatcher *coreAnalyticsEventDispatcher;
@property (retain, nonatomic) TICounterChangeCache *counterChangeCache;
@property (retain, nonatomic) TISmartSelector *smartSelector;
@property (retain, nonatomic) TISKMetricCollector *skMetricCollector;
@property (copy, nonatomic) id /* block */ proactiveSuggestionsGenerationBlock;
@property (retain, nonatomic) TIAutocorrectionList *lastContinuousPathAutocorrection;
@property (retain, nonatomic) id<TICandidateHandler> candidateHandlerForOpenRequest;
@property (nonatomic) unsigned long long lastNumCandidatesRequest;
@property (readonly, nonatomic) TISmartPunctuationOptions *smartOptions;
@property (copy, nonatomic) id /* block */ candidateGenerationCompletionHandler;
@property (nonatomic) long long userInterfaceIdiom;
@property (readonly, nonatomic) TIKeyboardInputManagerConfig *config;
@property (readonly, nonatomic) TILanguageSelectionController *languageSelectionController;
@property (readonly, nonatomic) NSArray *languageModelAssets;
@property (retain, nonatomic) TIKeyboardState *keyboardState;
@property (readonly, nonatomic) TIKeyboardInputManagerState *currentState;
@property (readonly, nonatomic) TIKeyboardFeatureSpecialization *keyboardFeatureSpecialization;
@property (nonatomic) struct _NSRange { unsigned long long location; unsigned long long length; } candidateRange;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSDictionary *testingParameters;

+ (void)removeAllDynamicDictionaries;
+ (void)removeDynamicDictionaryForInputMode:(id)a0;
+ (id)offlineLearningHandleForInputMode:(id)a0;
+ (int)shiftContextForShiftState:(int)a0 autocapitalizationType:(unsigned long long)a1;
+ (id)recentsFilePathForIdentifier:(id)a0;
+ (id)keyboardUserDirectory;
+ (id)dynamicDictionaryFilePathForInputMode:(id)a0;
+ (id)userDictionaryWordKeyPairsFilePath;
+ (void)clearRecentsFileForIdentifier:(id)a0;
+ (void)resetResponseKit;

- (id)searchStringForMarkedText;
- (BOOL)usesContinuousPath;
- (BOOL)suppliesCompletions;
- (void)clearInput;
- (id)keyboardBehaviors;
- (BOOL)usesCandidateSelection;
- (BOOL)acceptInputString:(id)a0;
- (BOOL)nextInputWouldStartSentence;
- (id)markedText;
- (BOOL)supportsNumberKeySelection;
- (unsigned long long)phraseBoundary;
- (BOOL)shouldSkipCandidateSelection;
- (BOOL)usesAutoDeleteWord;
- (BOOL)canHandleKeyHitTest;
- (id)dynamicResourcePath;
- (void)setInputIndex:(unsigned int)a0;
- (void)skipHitTestForTouchEvent:(id)a0 keyboardState:(id)a1;
- (BOOL)usesRetrocorrection;
- (id)terminatorsPreventingAutocorrection;
- (void)generateCandidatesWithKeyboardState:(id)a0 candidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 completionHandler:(id /* block */)a2;
- (id)autocorrectionRecordForWord:(id)a0;
- (void)setAutocapitalizationType:(unsigned long long)a0;
- (void).cxx_destruct;
- (id)autocorrection;
- (BOOL)supportsSetPhraseBoundary;
- (unsigned long long)autoquoteType;
- (BOOL)newInputAcceptsUserSelectedCandidate;
- (void)dealloc;
- (BOOL)suppressPlaceholderCandidate;
- (id)inputString;
- (BOOL)delayedCandidateList;
- (unsigned int)inputCount;
- (void)setOriginalInput:(id)a0;
- (void)candidateRejected:(id)a0;
- (id)defaultCandidate;
- (unsigned long long)initialSelectedIndex;
- (void)logDiscoverabilityEvent:(int)a0 userInfo:(id)a1;
- (BOOL)shouldUpdateDictionary;
- (id)terminatorsDeletingAutospace;
- (void)setAutocapitalizationEnabled:(BOOL)a0;
- (BOOL)stringEndsWord:(id)a0;
- (id)wordCharacters;
- (void)setKeyboardEventsLagging:(BOOL)a0;
- (id)wordSeparator;
- (double)continuousPathLanguageWeight;
- (id)keyboardConfiguration;
- (id)replacementForDoubleSpace;
- (void)setInSplitKeyboardMode:(BOOL)a0;
- (void)setInput:(id)a0;
- (BOOL)shouldFixupIncompleteRomaji;
- (id)autocorrectionList;
- (id)sentenceDelimitingCharacters;
- (id).cxx_construct;
- (id)currentInputModeIdentifier;
- (BOOL)shouldAddModifierSymbolsToWordCharacters;
- (id)shadowTyping;
- (void)loadDictionaries;
- (void)tearDown;
- (id)candidates;
- (void)resume;
- (id)candidateResultSet;
- (unsigned long long)initialCandidateBatchCount;
- (BOOL)usesPunctuationKeysForRowNavigation;
- (id)sentencePrefixingCharacters;
- (BOOL)syncToKeyboardState:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)ignoresDeadKeys;
- (BOOL)usesLiveConversion;
- (id)nonstopPunctuationCharacters;
- (BOOL)doesComposeText;
- (void)didUpdateInputModes:(id)a0;
- (void)suspend;
- (void)setMarkedText;
- (BOOL)suppressCompletionsForFieldEditor;
- (id)keyEventMap;
- (BOOL)updateLanguageModelForKeyboardState;
- (void)didUpdateInputModeProbabilities:(id)a0;
- (BOOL)commitsAcceptedCandidate;
- (unsigned int)inputIndex;
- (id)resourceInputModes;
- (id)primaryInputMode;
- (id)sentenceTrailingCharacters;
- (BOOL)shouldExtendPriorWord;
- (void)setInHardwareKeyboardMode:(BOOL)a0;
- (id)inputsToReject;
- (id)initWithConfig:(id)a0 keyboardState:(id)a1;
- (BOOL)isProgressivelyPathing;
- (BOOL)shouldDelayUpdateComposedText;
- (BOOL)shouldClearInputOnMarkedTextOutOfSync;
- (void)updateComposedText;
- (id)handleAcceptedCandidate:(id)a0 keyboardState:(id)a1;
- (long long)addTouch:(id)a0 shouldHitTest:(BOOL)a1;
- (void)storeLanguageModelDynamicDataIncludingCache;
- (BOOL)shouldUpdateLanguageModel;
- (void)syncToKeyboardState:(id)a0 from:(id)a1 afterContextChange:(BOOL)a2;
- (void)incrementUsageTrackingKeysForDeleteFromInput;
- (id)handleKeyboardInput:(id)a0;
- (void)deleteFromInputWithContext:(id)a0;
- (void)generateAutocorrectionsWithKeyboardState:(id)a0 candidateRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 candidateHandler:(id)a2;
- (id)generateReplacementsForString:(id)a0 keyLayout:(id)a1;
- (long long)performHitTestForTouchEvent:(id)a0 keyboardState:(id)a1;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)a0;
- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)a0 granularity:(int)a1;
- (void)textAccepted:(id)a0 fromPredictiveInputBar:(BOOL)a1 withInput:(id)a2;
- (BOOL)supportsLearning;
- (id)dictionaryInputMode;
- (id)externalStringToInternal:(id)a0;
- (id)internalStringToExternal:(id)a0;
- (unsigned long long)maxPriorWordTokensAfterTrimming;
- (BOOL)acceptsCharacter:(unsigned int)a0;
- (BOOL)dictionaryUsesExternalEncoding;
- (const struct USet { } *)precomposedCharacterSet;
- (void)dynamicDictionariesRemoved:(id)a0;
- (void)setAutoCorrects:(BOOL)a0;
- (void)incrementUsageTrackingKeyForAutocorrectionStatistic:(id)a0 autocorrectionTypes:(unsigned int)a1;
- (void)incrementUsageTrackingKey:(id)a0;
- (void)incrementUsageTrackingKeyForAppWithIsSentence:(BOOL)a0;
- (void)incrementLanguageModelCount:(id)a0 tokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })a1 context:(const struct TITokenID { unsigned int x0; unsigned int x1; } *)a2 contextLength:(unsigned long long)a3 contextStringTokens:(id)a4 saveToDifferentialPrivacy:(int)a5;
- (void)decrementLanguageModelCount:(id)a0 tokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })a1 context:(const struct TITokenID { unsigned int x0; unsigned int x1; } *)a2 contextLength:(unsigned long long)a3 contextStringTokens:(id)a4;
- (void)registerNegativeEvidence:(id)a0 tokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })a1 context:(const struct TITokenID { unsigned int x0; unsigned int x1; } *)a2 contextLength:(unsigned long long)a3 intendedTokenID:(struct TITokenID { unsigned int x0; unsigned int x1; } *)a4 hint:(int)a5 contextStringTokens:(id)a6;
- (struct TITokenID { unsigned int x0; unsigned int x1; })findTokenIDForWord:(id)a0 context:(const struct TITokenID { unsigned int x0; unsigned int x1; } *)a1 contextLength:(unsigned long long)a2 tokenLookupMode:(unsigned int)a3 surfaceFormPtr:(id *)a4 hasCaseInsensitiveStaticVariant:(BOOL *)a5 contextStringTokens:(id)a6;
- (struct TITokenID { unsigned int x0; unsigned int x1; })findTokenIDForWord:(id)a0 context:(const struct TITokenID { unsigned int x0; unsigned int x1; } *)a1 contextLength:(unsigned long long)a2 tokenLookupMode:(unsigned int)a3 contextStringTokens:(id)a4;
- (struct TITokenID { unsigned int x0; unsigned int x1; })addWord:(id)a0 context:(const struct TITokenID { unsigned int x0; unsigned int x1; } *)a1 contextLength:(unsigned long long)a2 surfaceFormPtr:(id *)a3 contextStringTokens:(id)a4;
- (id)initWithInputMode:(id)a0 keyboardState:(id)a1;
- (id)newInputManagerState;
- (void)refreshInputManagerState;
- (void)scheduleLinguisticResourceUpdate;
- (void)scheduleLinguisticResourceUpdateWithReason:(id)a0;
- (BOOL)isLinguisticResourceUpdateScheduled;
- (void)updateDictionaryAndLanguageModel;
- (void)openCandidateGenerationContextWithCompletionHandler:(id /* block */)a0;
- (BOOL)closeCandidateGenerationContextWithResults:(id)a0;
- (id)usageTrackingKeyForStatistic:(id)a0;
- (void)syncToLayoutState:(id)a0;
- (void)syncMarkedTextForKeyboardState:(id)a0 afterContextChange:(BOOL)a1;
- (void)syncInputStringToKeyboardState:(id)a0 afterContextChange:(BOOL)a1;
- (void)willChangeToKeyboardState:(id)a0 afterContextChange:(BOOL)a1;
- (BOOL)updateAdaptationContextToKeyboardState:(id)a0 from:(id)a1;
- (id)layoutTagsForLayout:(id)a0;
- (id)keyboardConfigurationLayoutTag;
- (id)keyboardConfigurationAccentKeyString;
- (BOOL)keyboardConfigurationAssertDefaultKeyPlane;
- (BOOL)shouldCommitInputString;
- (id)rawInputString;
- (id)inputStringFromDocumentState:(id)a0;
- (id)contextBeforeWithDesiredLength:(unsigned long long)a0;
- (BOOL)shouldOmitEmojiCandidates;
- (void)setPhraseBoundaryIfNecessary;
- (id)sortMethodTitles;
- (id)sortMethodsGroupsForCandidates:(id)a0;
- (id)sortMethodIndexes;
- (id)sortMethodsShowExtensionCandidates;
- (id)candidateResultSetFromCandidates:(id)a0;
- (id)candidateResultSetFromCandidates:(id)a0 proactiveTriggers:(id)a1;
- (void)acceptCurrentCandidateWithContext:(id)a0;
- (void)acceptCurrentCandidateIfSelectedWithContext:(id)a0;
- (void)runMaintenanceTask;
- (void)releaseMRLBuffers;
- (BOOL)documentState:(id)a0 matchesDocumentState:(id)a1;
- (void)syncToKeyboardState:(id)a0;
- (void)addInput:(id)a0 withContext:(id)a1;
- (void)continuousPathCandidateRejected:(id)a0;
- (void)trackProactiveMetrics:(id)a0 keyboardState:(id)a1;
- (id)generateAutofillFormWithKeyboardState:(id)a0;
- (id)generateOneTimeCodeCandidatesWithKeyboardState:(id)a0;
- (void)candidatesOfferedFeedback:(id)a0 keyboardState:(id)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })smartSelectionRangeForTextInDocument:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 language:(id)a2 tokenizedRanges:(id)a3 options:(unsigned long long)a4;
- (BOOL)shouldInsertSpaceBeforeInput:(id)a0;
- (id)suffixOfDesiredString:(id)a0 toAppendToInputString:(id)a1 withInputIndex:(unsigned long long)a2 afterDeletionCount:(unsigned long long *)a3;
- (id)deletedSuffixOfInputContext:(id)a0 whenDeletingFromInputString:(id)a1 withInputIndex:(unsigned long long)a2 deletionCount:(unsigned long long)a3;
- (void)inputLocationChanged;
- (void)appendToInputContext:(id)a0;
- (BOOL)removeSuffixOfInputContext:(id)a0;
- (void)clearInputContext;
- (id)didAcceptCandidate:(id)a0;
- (id)remainingInput;
- (BOOL)deletesComposedTextByComposedCharacterSequence;
- (unsigned int)internalIndexToExternal:(unsigned int)a0;
- (unsigned int)externalIndexToInternal:(unsigned int)a0;
- (id)dictionaryStringForExternalString:(id)a0;
- (id)externalStringForDictionaryString:(id)a0;
- (struct TIInputManager { void /* function */ **x0; struct vector<KB::Input, std::__1::allocator<KB::Input> > { struct Input *x0; struct Input *x1; struct __compressed_pair<KB::Input *, std::__1::allocator<KB::Input> > { struct Input *x0; } x2; } x1; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x2; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x3; unsigned int x4; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x5; struct retain_ptr<const __CFLocale *> { struct __CFLocale *x0; } x6; struct ConfidenceModel { struct Params { float x0; float x1; float x2; float x3; float x4; int x5; int x6; } x0; } x7; struct LockedInput { unsigned int x0; unsigned int x1; } x8; struct unique_ptr<TI::Favonius::StrokeBuildManager, std::__1::default_delete<TI::Favonius::StrokeBuildManager> > { struct __compressed_pair<TI::Favonius::StrokeBuildManager *, std::__1::default_delete<TI::Favonius::StrokeBuildManager> > { struct StrokeBuildManager *x0; } x0; } x9; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x10; struct RefPtr<KB::DictionaryContainer> { struct DictionaryContainer *x0; } x11; struct shared_ptr<KB::LanguageModel> { struct LanguageModel *x0; struct __shared_weak_count *x1; } x12; unsigned int x13; struct Vector<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> { unsigned long long x0; struct VectorBuffer<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> { struct RefPtr<TI::Favonius::LayoutKey> *x0; unsigned long long x1; } x1; } x14; BOOL x15; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x16; struct RefPtr<TI::Favonius::KeyboardLayout> { struct KeyboardLayout *x0; } x17; struct ContinuousPathDetector { struct map<int, KB::ContinuousPathDetector::AnnotatedPath, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, KB::ContinuousPathDetector::AnnotatedPath> > > { struct __tree<std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, std::__1::__map_value_compare<int, std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, KB::ContinuousPathDetector::AnnotatedPath>, std::__1::less<int>, true> > { unsigned long long x0; } x2; } x0; } x0; struct Parameters { float x0; float x1; float x2; float x3; float x4; float x5; } x1; double x2; float x3; float x4; } x18; int x19; BOOL x20; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x21; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x22; struct shared_ptr<KB::InputManagerSpecialization> { struct InputManagerSpecialization *x0; struct __shared_weak_count *x1; } x23; id /* block */ x24; struct shared_ptr<KB::TypologyLogger> { struct TypologyLogger *x0; struct __shared_weak_count *x1; } x25; BOOL x26; BOOL x27; BOOL x28; BOOL x29; BOOL x30; BOOL x31; BOOL x32; BOOL x33; BOOL x34; int x35; } *)initImplementation;
- (struct { struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x0; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x1; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x2; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x3; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x4; unsigned int x5; float x6; })lexiconInformation;
- (id)dictionaryPathForContentType:(id)a0 inputMode:(id)a1 filePrefix:(id)a2;
- (id)staticDictionaryPathForInputMode:(id)a0;
- (id)pathToStaticDictionary;
- (id)deltaDictionaryPathForInputMode:(id)a0;
- (id)pathToDeltaStaticDictionary;
- (id)phraseDictionaryPathForInputMode:(id)a0;
- (id)pathToPhraseDictionary;
- (id)dynamicDictionaryPathForInputMode:(id)a0;
- (id)languageModelAssetsForInputMode:(id)a0;
- (void)logTestingParametersToTypology;
- (void)mergeLanguageModelParameters:(id)a0 toTestingParameters:(id)a1 withLexiconID:(id)a2 andSuffix:(id)a3;
- (id)pathToDynamicDictionary;
- (void)loadFavoniusTypingModel;
- (struct shared_ptr<KB::LanguageModel> { struct LanguageModel *x0; struct __shared_weak_count *x1; })loadedLightweightLanguageModel;
- (void)setLinguisticResourceStatus:(unsigned long long)a0 reason:(id)a1;
- (void)mobileAssetsChanged:(id)a0;
- (id)addInput:(id)a0 flags:(unsigned int)a1 point:(struct CGPoint { double x0; double x1; })a2 firstDelete:(unsigned long long *)a3;
- (BOOL)hasLegacyInputStem;
- (BOOL)hasLegacyInputString;
- (unsigned int)simulateAutoshiftIfNecessaryForFlags:(unsigned int)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })legacyInputRangeForTokenRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })acceptableRangeFromRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inText:(id)a1 withSelectionLocation:(unsigned long long)a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })inputStringRangeFromRevisionHistory;
- (void)setInputStringFromDocumentState:(id)a0 isDeleteEvent:(BOOL)a1;
- (BOOL)canComputeSentenceContextForInputStem:(id)a0;
- (struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; })sentenceContextForInputStem:(id)a0;
- (id)trimmedInputStem;
- (unsigned long long)countOfWordsIninputStem:(id)a0;
- (unsigned long long)internalIndexOfInputStemSuffix:(id)a0;
- (BOOL)canTrimInputAtIndex:(unsigned int)a0;
- (BOOL)canRetrocorrectInputAtIndex:(unsigned int)a0;
- (void)trimInput;
- (id)trimmedInputStemAfterLathamConversion;
- (void)trimInputAfterLathamConversion;
- (void)dropInputPrefix:(unsigned int)a0;
- (void)dropInput;
- (void)willDropInputStem;
- (void)didDropInputStem;
- (id)deleteFromInput:(unsigned long long *)a0;
- (void)clearIgnoredSuggestionForCurrentInput;
- (void)acceptInput;
- (id)inputContext;
- (id)internalInputContext;
- (void)updateInputContext;
- (id)inputStem;
- (id)currentWordStem;
- (void)displayedCandidateRejected;
- (BOOL)shouldAllowCorrectionOfAcceptedCandidate:(id)a0;
- (BOOL)shouldSuppressTokenIDLookups;
- (BOOL)shouldSuppressLearning;
- (BOOL)shouldSuppressLanguageSelectionEvidence;
- (BOOL)shouldLearnWord:(id)a0;
- (void)addItemToConversationHistoryWithText:(id)a0 timestamp:(id)a1 senderID:(id)a2;
- (void)resetConversationHistory;
- (void)synchronizeConversationHistoryWithInputContextHistory:(id)a0;
- (void)learnRecentMessageUserIsRespondingTo;
- (struct TITokenID { unsigned int x0; unsigned int x1; })tokenIDForWordSeparator:(unsigned short)a0;
- (void)recordSuggestedAutocorrectionList:(id)a0;
- (BOOL)isContinuousPathCandidate:(id)a0 replacementForOriginalConversion:(id)a1;
- (id)originatingAutocorrectionListForCandidate:(id)a0;
- (id)revisionListFromAutocorrectionList:(id)a0 afterAcceptingCandidate:(id)a1;
- (void)recordAcceptedAutocorrection:(id)a0 fromPredictiveInputBar:(BOOL)a1;
- (void)recordRejectedAutocorrectionForAcceptedText:(id)a0 fromPredictiveInputBar:(BOOL)a1;
- (void)updateForRevisitedString:(id)a0;
- (BOOL)nextInputWouldStartSentenceAfterInput:(id)a0;
- (BOOL)spaceAndNextInputWouldStartSentence;
- (BOOL)_canStartSentenceAfterString:(id)a0 maxRecursionDepth:(unsigned long long)a1;
- (BOOL)canStartSentenceAfterString:(id)a0;
- (void)setAutoshiftFromInputContext;
- (void)checkAutocorrectionDictionaries;
- (unsigned long long)prefixLengthOfInput:(id)a0 sharedWithCandidate:(const struct Candidate { struct Vector<KB::Word, 3> { unsigned long long x0; struct VectorBuffer<KB::Word, 3> { struct Word *x0; unsigned long long x1; struct AlignedBuffer<480, 8> { char x0[480]; } x2; } x1; } x0; float x1; struct CandidateScoreFactors { float x0; float x1; float x2; float x3; float x4; float x5; } x2; unsigned int x3; unsigned int x4; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x5; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x6; struct ByteString { union { struct { unsigned short x0; char *x1; } x0; struct { unsigned short x0; unsigned char x1[14]; } x1; } x0; } x7; BOOL x8; BOOL x9; unsigned long long x10; struct retain_ptr<const __CFDictionary *> { struct __CFDictionary *x0; } x11; struct retain_ptr<__CFDictionary *> { struct __CFDictionary *x0; } x12; } *)a1;
- (unsigned long long)prefixLengthOfInput:(id)a0 sharedWithCandidates:(const struct CandidateCollection { struct vector<KB::Candidate, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; struct Candidate *x1; struct __compressed_pair<KB::Candidate *, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; } x2; } x0; struct vector<KB::Candidate, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; struct Candidate *x1; struct __compressed_pair<KB::Candidate *, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; } x2; } x1; struct vector<KB::Candidate, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; struct Candidate *x1; struct __compressed_pair<KB::Candidate *, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; } x2; } x2; int x3; } *)a1;
- (id)phraseCandidateCompletedByWord:(const struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } *)a0 allowNoSuggest:(BOOL)a1 forAutocorrection:(BOOL)a2 shiftContext:(int)a3;
- (BOOL)isEditingExistingWord;
- (id)autocorrectionCandidateForInput:(id)a0 withCandidate:(const struct Candidate { struct Vector<KB::Word, 3> { unsigned long long x0; struct VectorBuffer<KB::Word, 3> { struct Word *x0; unsigned long long x1; struct AlignedBuffer<480, 8> { char x0[480]; } x2; } x1; } x0; float x1; struct CandidateScoreFactors { float x0; float x1; float x2; float x3; float x4; float x5; } x2; unsigned int x3; unsigned int x4; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x5; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x6; struct ByteString { union { struct { unsigned short x0; char *x1; } x0; struct { unsigned short x0; unsigned char x1[14]; } x1; } x0; } x7; BOOL x8; BOOL x9; unsigned long long x10; struct retain_ptr<const __CFDictionary *> { struct __CFDictionary *x0; } x11; struct retain_ptr<__CFDictionary *> { struct __CFDictionary *x0; } x12; } *)a1;
- (id)autocorrectionCandidateForInput:(id)a0 withCandidate:(const struct Candidate { struct Vector<KB::Word, 3> { unsigned long long x0; struct VectorBuffer<KB::Word, 3> { struct Word *x0; unsigned long long x1; struct AlignedBuffer<480, 8> { char x0[480]; } x2; } x1; } x0; float x1; struct CandidateScoreFactors { float x0; float x1; float x2; float x3; float x4; float x5; } x2; unsigned int x3; unsigned int x4; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x5; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x6; struct ByteString { union { struct { unsigned short x0; char *x1; } x0; struct { unsigned short x0; unsigned char x1[14]; } x1; } x0; } x7; BOOL x8; BOOL x9; unsigned long long x10; struct retain_ptr<const __CFDictionary *> { struct __CFDictionary *x0; } x11; struct retain_ptr<__CFDictionary *> { struct __CFDictionary *x0; } x12; } *)a1 insertingSpace:(BOOL)a2 sharedPrefixLength:(unsigned long long)a3;
- (BOOL)supportsShortcutConversion;
- (void)enumerateWordSuffixesOfString:(id)a0 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 usingBlock:(id /* block */)a2;
- (BOOL)shouldSkipShortcutConversionForDocumentState:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })shortcutSearchRangeForString:(id)a0;
- (id)shortcutConversionForString:(id)a0 stringStartsInMiddleOfWord:(BOOL)a1;
- (id)shortcutConversionForInput:(id)a0 andExistingString:(id)a1 existingStringStartsInMiddleOfWord:(BOOL)a2;
- (BOOL)suggestionBlacklistMatchesStrings:(id)a0;
- (BOOL)shouldDropInputStem;
- (BOOL)shouldAllowContextTokenID:(struct TITokenID { unsigned int x0; unsigned int x1; })a0;
- (void)updateResponseModelForKeyboardState:(id)a0;
- (id)cannedResponseCandidatesForString:(id)a0;
- (void)generateCannedResponseCandidatesAsyncForString:(id)a0 completionHandler:(id /* block */)a1;
- (id)autocorrectionListForSelectedText;
- (void)reconcileCandidates:(struct CandidateCollection { struct vector<KB::Candidate, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; struct Candidate *x1; struct __compressed_pair<KB::Candidate *, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; } x2; } x0; struct vector<KB::Candidate, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; struct Candidate *x1; struct __compressed_pair<KB::Candidate *, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; } x2; } x1; struct vector<KB::Candidate, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; struct Candidate *x1; struct __compressed_pair<KB::Candidate *, std::__1::allocator<KB::Candidate> > { struct Candidate *x0; } x2; } x2; int x3; } *)a0 forTypedString:(struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } *)a1 withPhraseCandidate:(struct Candidate { struct Vector<KB::Word, 3> { unsigned long long x0; struct VectorBuffer<KB::Word, 3> { struct Word *x0; unsigned long long x1; struct AlignedBuffer<480, 8> { char x0[480]; } x2; } x1; } x0; float x1; struct CandidateScoreFactors { float x0; float x1; float x2; float x3; float x4; float x5; } x2; unsigned int x3; unsigned int x4; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x5; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x6; struct ByteString { union { struct { unsigned short x0; char *x1; } x0; struct { unsigned short x0; unsigned char x1[14]; } x1; } x0; } x7; BOOL x8; BOOL x9; unsigned long long x10; struct retain_ptr<const __CFDictionary *> { struct __CFDictionary *x0; } x11; struct retain_ptr<__CFDictionary *> { struct __CFDictionary *x0; } x12; } *)a2 replacing:(const struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } *)a3;
- (BOOL)shouldGenerateSuggestionsForSelectedText;
- (BOOL)shouldAutocapitalizePredictionAfterSpace;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfUnclosedQuoteMatchingQuote:(id)a0 inString:(id)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (BOOL)stringEndsWithClosingQuote:(id)a0;
- (BOOL)shouldInsertSpaceBeforePredictions;
- (id)predictionCandidates:(unsigned long long)a0 predictionType:(int)a1;
- (id)continuousPathCandidates:(unsigned long long)a0;
- (id)indexesOfDuplicatesInCandidates:(id)a0;
- (id)autocorrectionListForEmptyInputWithDesiredCandidateCount:(unsigned long long)a0;
- (int)shiftContext;
- (id)completionCandidates:(unsigned long long)a0;
- (id)extendedAutocorrection:(id)a0 spanningInputsForCandidates:(id)a1 emojis:(id)a2;
- (void)reconcileConversions:(id)a0;
- (BOOL)shouldGeneratePredictionsForCurrentContext;
- (id)typedStringForEmptyAutocorrection;
- (BOOL)doesSelectedTextGenerateEmojiCandidates;
- (BOOL)acceptsRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 inString:(id)a1;
- (void)installTypologyTraceLogger;
- (id)terminatorsPrecedingAutospace;
- (id)openingQuotes;
- (id)closingQuotes;
- (void)logToTypologyRecorderWithString:(id)a0;
- (void)setPhraseBoundary:(unsigned long long)a0;
- (id)candidatesForString:(id)a0;
- (void)generateAndRenderProactiveSuggestionsWithTriggers:(id)a0 withAdditionalPredictions:(id)a1 withInput:(id)a2 async:(BOOL)a3 completionHandler:(id /* block */)a4;
- (id)autocorrectionListWithCandidateCount:(unsigned long long)a0;
- (id)shortcutConversionForDocumentState:(id)a0;
- (BOOL)alwaysShowExtensionCandidatesForSortingMethod:(id)a0;
- (id)titleForSortingMethod:(id)a0;
- (id)sortingMethods;
- (id)indexTitlesForGroupTitles:(id)a0 sortingMethod:(id)a1;
- (id)groupedCandidatesFromCandidates:(id)a0 usingSortingMethod:(id)a1;
- (void)setLearnsCorrection:(BOOL)a0;
- (id)shortcutCompletionsForDocumentState:(id)a0;
- (BOOL)isHardwareKeyboardAutocorrectionEnabled;
- (void)transferErrorCorrectionFlagsToInputCandidate:(struct Candidate { struct Vector<KB::Word, 3> { unsigned long long x0; struct VectorBuffer<KB::Word, 3> { struct Word *x0; unsigned long long x1; struct AlignedBuffer<480, 8> { char x0[480]; } x2; } x1; } x0; float x1; struct CandidateScoreFactors { float x0; float x1; float x2; float x3; float x4; float x5; } x2; unsigned int x3; unsigned int x4; struct LanguageModelContext { struct vector<TITokenID, std::__1::allocator<TITokenID> > { struct TITokenID *x0; struct TITokenID *x1; struct __compressed_pair<TITokenID *, std::__1::allocator<TITokenID> > { struct TITokenID *x0; } x2; } x0; unsigned long long x1; unsigned long long x2; struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x1; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *x0; } x2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x5; } x5; struct String { unsigned short x0; unsigned short x1; unsigned short x2; unsigned char x3; char *x4; char x5[16]; } x6; struct ByteString { union { struct { unsigned short x0; char *x1; } x0; struct { unsigned short x0; unsigned char x1[14]; } x1; } x0; } x7; BOOL x8; BOOL x9; unsigned long long x10; struct retain_ptr<const __CFDictionary *> { struct __CFDictionary *x0; } x11; struct retain_ptr<__CFDictionary *> { struct __CFDictionary *x0; } x12; } *)a0;
- (void)groupedCandidatesFromCandidates:(id)a0 usingSortingMethod:(id)a1 completion:(id /* block */)a2;
- (BOOL)inHardwareKeyboardMode;
- (void)clearDynamicDictionary;
- (void)releaseDynamicLanguageModel;
- (unsigned long long)maximumShortcutLengthAllowed;
- (void)addSynthesizedTouchToInput:(id)a0;
- (BOOL)enablesProactiveQuickType;
- (id)generateAndRenderProactiveSuggestionsWithTriggers:(id)a0 withAdditionalPredictions:(id)a1 withInput:(id)a2;
- (unsigned long long)userFrequencyOfWord:(id)a0 lexiconID:(unsigned int)a1;
- (unsigned long long)userFrequencyOfWord:(id)a0;
- (id)getTestingStateObject;
- (id)humanReadableTrace;
- (void)clearHumanReadableTrace;
- (BOOL)isTypologyEnabled;
- (id)configurationPropertyList;
- (BOOL)dictionaryContainsWord:(id)a0;
- (struct RefPtr<KB::DictionaryContainer> { struct DictionaryContainer *x0; })getDictionary;

@end

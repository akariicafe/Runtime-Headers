@class NSString, NSMutableSet, NSMutableDictionary;
@protocol GCBatteryXPCProxyServiceRemoteServerInterface, GCPlayerIndicatorXPCProxyServiceRemoteServerInterface, GCLightXPCProxyServiceRemoteServerInterface, GCControllerServiceRemoteServerInterface, GCPhotoVideoXPCProxyServiceRemoteServerInterface, GCSettingsXPCProxyServiceRemoteServerInterface, _GCIPCEndpointConnection, _GCIPCOutgoingConnection, GCMotionXPCProxyServiceRemoteServerInterface;

@interface _GCControllerManagerAppClient : _GCControllerManager <GCControllerServiceRemoteClientInterface, GCPlayerIndicatorXPCProxyServiceClient, GCPlayerIndicatorXPCProxyServiceRemoteClientInterface, GCLightXPCProxyServiceClient, GCLightXPCProxyServiceRemoteClientInterface, GCMotionXPCProxyServiceClient, GCMotionXPCProxyServiceRemoteClientInterface, GCBatteryXPCProxyServiceClient, GCBatteryXPCProxyServiceRemoteClientInterface, GCSettingsXPCProxyServiceClient, GCSettingsXPCProxyServiceRemoteClientInterface, _GCAppClientInterface> {
    NSMutableSet *_knownHIDServices;
    NSMutableDictionary *_publishedControllers;
    NSMutableSet *_pendingControllers;
    NSMutableSet *_serverValidControllerIdentifiers;
    id<_GCIPCOutgoingConnection> _serverConnection;
    id _serverConnectionInvalidation;
    id _serverConnectionInterruption;
    id<GCControllerServiceRemoteServerInterface> _controllerService;
    id<GCPlayerIndicatorXPCProxyServiceRemoteServerInterface> _playerIndicatorXPCProxyService;
    id<GCLightXPCProxyServiceRemoteServerInterface> _lightXPCProxyService;
    id<GCSettingsXPCProxyServiceRemoteServerInterface> _settingsXPCProxyService;
    id<GCMotionXPCProxyServiceRemoteServerInterface> _motionXPCProxyService;
    id<GCBatteryXPCProxyServiceRemoteServerInterface> _batteryXPCProxyService;
    id<GCPhotoVideoXPCProxyServiceRemoteServerInterface> _photoVideoService;
    BOOL _shouldResumeDaemonConnectionOnForeground;
}

@property (readonly) id<_GCIPCEndpointConnection> playerIndicatorXPCProxyServiceConnection;
@property (readonly) id<GCPlayerIndicatorXPCProxyServiceRemoteServerInterface> playerIndicatorXPCProxyServiceRemoteServer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) id<_GCIPCEndpointConnection> lightXPCProxyServiceConnection;
@property (readonly) id<GCLightXPCProxyServiceRemoteServerInterface> lightXPCProxyServiceRemoteServer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) id<_GCIPCEndpointConnection> motionXPCProxyServiceConnection;
@property (readonly) id<GCMotionXPCProxyServiceRemoteServerInterface> motionXPCProxyServiceRemoteServer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) id<_GCIPCEndpointConnection> batteryXPCProxyServiceConnection;
@property (readonly) id<GCBatteryXPCProxyServiceRemoteServerInterface> batteryXPCProxyServiceRemoteServer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) id<_GCIPCEndpointConnection> settingsXPCProxyServiceConnection;
@property (readonly) id<GCSettingsXPCProxyServiceRemoteServerInterface> settingsXPCProxyServiceRemoteServer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)_connectToDaemon;
- (void)unpublishControllersWithIdentifiers:(id)a0;
- (void)setCurrentMicroGamepad:(id)a0;
- (id)init;
- (void)handleKeyboardEventAsFrontmostApp:(id)a0;
- (void).cxx_destruct;
- (void)_onqueue_unpublishController:(id)a0;
- (void)_resumeDaemonConnection;
- (void)onHIDDeviceRemoved:(struct __IOHIDServiceClient { } *)a0;
- (void)setCurrentExtendedGamepad:(id)a0;
- (void)handleMouseEventAsFrontmostApp:(id)a0;
- (void)updateCurrentControllerAndProfileForUnpublishedController:(id)a0;
- (id)_mostRecentlyActiveMicroGamepadIgnoring:(id)a0;
- (void)onScreenshotTriggeredWithController:(id)a0;
- (id)mice;
- (id)currentMicroGamepad;
- (void)setProperty:(id)a0 forKey:(id)a1 forHIDServiceClientWithRegistryID:(id)a2;
- (BOOL)isVideoRecordingAllowedForController:(id)a0;
- (void)_onqueue_addPendingController:(id)a0;
- (void)refreshControllers;
- (void)CBApplicationDidBecomeActive;
- (id)currentController;
- (BOOL)_containsPublishedController:(id)a0;
- (void)_setCurrentMicroGamepad:(id)a0;
- (id)_mostRecentlyActiveControllerIgnoring:(id)a0;
- (id)serviceClientForIPCService:(id)a0;
- (id)_mostRecentlyActiveExtendedGamepadIgnoring:(id)a0;
- (void)_setCurrentController:(id)a0;
- (void)onVideoRecordingToggledWithController:(id)a0;
- (void)publishControllers:(id)a0;
- (BOOL)isScreenShotAllowedForController:(id)a0;
- (void)open;
- (id)currentExtendedGamepad;
- (void)onHIDDeviceAdded:(struct __IOHIDServiceClient { } *)a0;
- (void)_onqueue_publishController:(id)a0;
- (void)setCurrentController:(id)a0;
- (void)_setCurrentExtendedGamepad:(id)a0;
- (void)_onqueue_refreshPublishedControllers;
- (id)controllers;

@end

@class PKPaletteTapToRadarCommand, PKPaletteContentView, UIWindowScene, PKPaletteInputAssistantButtonProvider, UIView, NSLayoutConstraint, NSString, NSUndoManager, MTMaterialView, PKInk, PKPaletteFloatingKeyboardController, NSArray, UIPencilInteraction, PKTextInputWindowFirstResponder, PKTextInputWindowFirstResponderController;
@protocol PKPaletteViewAnnotationDelegate, PKPaletteTool;

@interface PKDrawingPaletteView : PKPaletteView <PKDrawingPaletteViewStateSubject, PKPaletteUndoRedoViewDelegate, PKPaletteToolPickerViewDelegate, PKPaletteColorPickerViewDelegate, PKPaletteAdditionalOptionsViewDelegate, PKPaletteToolPreviewDelegate, PKPalettePopoverUpdating, PKTextInputWindowFirstResponderControllerDelegate, PKPaletteFloatingKeyboardControllerDelegate, PKPaletteContentViewInputAssistantDelegate, PKPaletteViewStateSubject> {
    NSUndoManager *_undoManager;
}

@property (retain, nonatomic) MTMaterialView *backgroundView;
@property (retain, nonatomic) PKPaletteContentView *contentView;
@property (retain, nonatomic) NSLayoutConstraint *contentViewBottomConstraint;
@property (retain, nonatomic) NSLayoutConstraint *contentViewWidthConstraint;
@property (retain, nonatomic) NSLayoutConstraint *contentViewHeightConstraint;
@property (retain, nonatomic) UIView *bottomThinSeparator;
@property (nonatomic) BOOL isEditingOpacity;
@property (nonatomic) BOOL isEditingStrokeSelection;
@property (retain, nonatomic) PKTextInputWindowFirstResponderController *firstResponderController;
@property (retain, nonatomic) PKPaletteFloatingKeyboardController *floatingKeyboardController;
@property (retain, nonatomic) PKPaletteInputAssistantButtonProvider *inputAssistantButtonProvider;
@property (readonly, nonatomic) id<PKPaletteTool> selectedTool;
@property (nonatomic) long long contextEditingMode;
@property (readonly, nonatomic) UIPencilInteraction *pencilInteraction;
@property (readonly, nonatomic) PKTextInputWindowFirstResponder *windowFirstResponder;
@property (retain, nonatomic) PKPaletteTapToRadarCommand *tapToRadarCommand;
@property (weak, nonatomic) id<PKPaletteViewAnnotationDelegate> annotationDelegate;
@property (readonly, nonatomic) UIView *contextualEditingView;
@property (nonatomic) BOOL supportsOpacityEditing;
@property (readonly, nonatomic) UIView *opacityEditingView;
@property (nonatomic) BOOL wantsClearBackgroundColorInCompactSize;
@property (retain, nonatomic) PKInk *selectedToolInk;
@property (nonatomic) long long colorUserInterfaceStyle;
@property (readonly, nonatomic, getter=isAnnotationSupportEnabled) BOOL annotationSupportEnabled;
@property (nonatomic, getter=isFingerDrawsOptionEnabled) BOOL fingerDrawsOptionEnabled;
@property (copy, nonatomic) NSArray *toolIdentifiers;
@property (copy, nonatomic) NSArray *toolProperties;
@property (nonatomic) BOOL showsHandwritingTool;
@property (copy, nonatomic) NSString *handwritingToolLocaleIdentifier;
@property (readonly, nonatomic, getter=isHandwritingToolSelected) BOOL handwritingToolSelected;
@property (nonatomic, getter=isPencilInteractionEnabledWhenNotVisible) BOOL pencilInteractionEnabledWhenNotVisible;
@property (readonly, copy, nonatomic) NSArray *inputAssistantItems;
@property (readonly, nonatomic, getter=isVisible) BOOL visible;
@property (readonly, nonatomic) BOOL enableKeyboardButtons;
@property (readonly, nonatomic) long long floatingKeyboardType;
@property (readonly, nonatomic) double paletteScaleFactor;
@property (readonly, nonatomic, getter=isAutoHideEnabled) BOOL autoHideEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIWindowScene *windowScene;

- (id)undoManager;
- (void)safeAreaInsetsDidChange;
- (void).cxx_destruct;
- (double)shadowOpacity;
- (void)dealloc;
- (void)updateConstraints;
- (double)shadowRadius;
- (void)_updateUI;
- (void)layoutSubviews;
- (void)setUndoManager:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setDelegate:(id)a0;
- (void)pencilInteractionDidTap:(id)a0;
- (void)_releaseUndoManager;
- (void)_changeWasDone:(id)a0;
- (void)traitCollectionDidChange:(id)a0;
- (void)_changeWasUndone:(id)a0;
- (void)_changeWasRedone:(id)a0;
- (void)_setSelectedColor:(id)a0;
- (void)contentViewDidDismissInputAssistantView:(id)a0;
- (void)contentViewDidSelectInputAssistantKeyboardItem:(id)a0;
- (void)contentViewDidSelectInputAssistantReturnKeyItem:(id)a0;
- (void)dismissPalettePopoverWithCompletion:(id /* block */)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })plusButtonFrame;
- (struct CGSize { double x0; double x1; })paletteSizeForEdge:(unsigned long long)a0;
- (unsigned long long)paletteViewType;
- (BOOL)_isPaletteContentViewHidden;
- (void)didChangePalettePosition;
- (void)_willDockPaletteToEdge:(unsigned long long)a0 prepareForExpansion:(BOOL)a1 isPaletteChangingOrientation:(BOOL)a2;
- (void)_willDockPaletteToCorner:(unsigned long long)a0;
- (void)didChangePaletteScaleFactor;
- (void)updatePopoverUI;
- (void)hostView:(id)a0 willDockPaletteToPosition:(long long)a1 prepareForExpansion:(BOOL)a2;
- (void)hostView:(id)a0 didDockPaletteToPosition:(long long)a1;
- (id)borderColorForTraitCollection:(id)a0;
- (double)borderWidthForTraitCollection:(id)a0;
- (double)responseForThrowingFromPosition:(long long)a0 toPosition:(long long)a1 withVelocity:(struct CGPoint { double x0; double x1; })a2;
- (double)dampingRatioForThrowingFromPosition:(long long)a0 toPosition:(long long)a1 withVelocity:(struct CGPoint { double x0; double x1; })a2;
- (void)configureForDockedAtCorner;
- (void)configureForDockedAtEdge:(unsigned long long)a0;
- (void)willStartAppearanceAnimation;
- (void)didEndAppearanceAnimation;
- (double)compactPaletteHeight;
- (BOOL)shouldAdjustShadowRadiusForMinimized;
- (BOOL)_shouldShowFingerDrawsOption;
- (void)floatingKeyboardController:(id)a0 didChangeKeyboardType:(long long)a1;
- (void)floatingKeyboardControllerWillHide:(id)a0;
- (id)responderForFloatingKeyboardController:(id)a0;
- (void)floatingKeyboardControllerWillShow:(id)a0;
- (void)undoRedoViewDidTapUndo:(id)a0;
- (void)undoRedoViewDidTapRedo:(id)a0;
- (void)updateUndoRedo;
- (void)selectPenTool;
- (void)windowFirstResponderController:(id)a0 didChangeFirstResponder:(id)a1;
- (void)colorPickerDidChangeSelectedColor:(id)a0 isFromExtendedColorPicker:(BOOL)a1;
- (BOOL)colorPickerShouldDisplayColorSelection:(id)a0;
- (void)toolPreviewDidChangeToolColor:(id)a0;
- (void)additionalOptionsViewDidSelectPlusButton:(id)a0;
- (void)additionalOptionsView:(id)a0 didToggleAutoHideOption:(BOOL)a1;
- (void)additionalOptionsViewDidPressTapToRadarButton:(id)a0;
- (void)additionalOptionsViewDidPressKeyboardButton:(id)a0;
- (void)additionalOptionsViewDidPressReturnKeyButton:(id)a0;
- (void)_installPaletteContentViewInView:(id)a0;
- (void)_updateColorPickerSelectedColor;
- (void)_updateUIForAnnotationSupportIfNeeded;
- (void)_centerPaletteContainerSubviewToCurrentlySelectedToolForEdge:(unsigned long long)a0 needsContainerViewLayout:(BOOL)a1;
- (BOOL)_canShowFingerDrawsOption;
- (id)_clippingViewBackgroundColor;
- (BOOL)_isPaletteConsideredMinimized;
- (void)_updateToolPreview;
- (void)_setToolPickerViewSelectedToolColor:(id)a0 ignoreColorOpacity:(BOOL)a1;
- (id)_selectedToolViewInToolPicker;
- (void)_updateToolPreviewForEdge:(unsigned long long)a0;
- (void)_updateHandwritingAssistantItemsFromResponder:(id)a0;
- (void)_updateInputResponderControllerInputAssistantSupressionState;
- (void)_updateHandwritingAssistantItems;
- (void)_presentOrDismissFloatingKeyboard;
- (BOOL)_shouldHandlePencilInteractionWhenNotVisible;
- (BOOL)_canHandlePencilInteraction;
- (void)toolPickerDidChangeSelectedTool:(id)a0;
- (void)toolPickerDidToggleRulerTool:(id)a0;
- (void)toolPickerViewDidChangeTraitCollectionSizeClass:(id)a0;
- (void)setSelectedAnnotationType:(long long)a0;
- (void)startOpacityEditing;
- (void)endOpacityEditing;

@end

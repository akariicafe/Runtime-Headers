@class PKMetalShader, MTLPipelineBufferDescriptor, NSMutableDictionary, PKMetalResourceHandlerBuffer, MTLRenderPipelineDescriptor, PKLRUCache, NSObject;
@protocol OS_dispatch_queue, MTLDevice, MTLPipelineLibrarySPI, MTLLibrary, MTLTexture, MTLComputePipelineState, MTLBuffer;

@interface PKMetalResourceHandler : NSObject {
    id<MTLComputePipelineState> _particleShaderKernelPipelineState;
    id<MTLComputePipelineState> _particleShaderKernelPipelineStateWithVariableSpacing;
    id<MTLComputePipelineState> _paintShaderKernelPipelineState;
    id<MTLComputePipelineState> _paintShaderKernelPipelineStateWithLiveStrokeMode;
    id<MTLComputePipelineState> _paintShaderKernelPipelineStateWithLiveStrokeParticles;
    PKMetalShader *_particleShader;
    PKMetalShader *_particleShaderWithAspectRatioSupport;
    PKMetalShader *_paintShader;
    PKMetalShader *_paintShaderForLiveStrokeMode;
    PKMetalShader *_particleShaderForAccumulator;
    PKMetalShader *_particleShaderForAccumulatorWithAspectRatioSupport;
    PKMetalShader *_paintShaderForAccumulator;
    PKMetalShader *_erasePaintShader;
    PKMetalShader *_erasePaintAccumulatorShader;
    PKMetalShader *_eraseOriginalBackShader;
    PKMetalShader *_paperShader;
    PKMetalShader *_blitIntoPaintShader;
    PKMetalShader *_blitShader;
    PKMetalShader *_singleAttachmentBlitShader;
    PKMetalShader *_eraseShader;
    PKMetalShader *_copyAccumulatorIntoPaintShader;
    PKMetalShader *_linesShader;
    PKMetalShader *_paintCircleShader;
    PKMetalShader *_invertShader;
    PKMetalShader *_fillColorShader;
    id<MTLBuffer> _cachedQuadVertexBuffer;
    id<MTLBuffer> _cachedQuadTexCoordBuffer;
    NSMutableDictionary *_inkTextures;
    struct unordered_map<unsigned long long, PKMetalShader *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, PKMetalShader *> > > { struct __hash_table<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, PKMetalShader *> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, std::__1::hash<unsigned long long>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, PKMetalShader *>, std::__1::equal_to<unsigned long long>, true> > { float __value_; } __p3_; } __table_; } _uberShaders;
    id<MTLLibrary> _defaultLibrary;
    id<MTLTexture> _paperTexture;
    struct CGSize { double width; double height; } _paperTextureSize;
    MTLRenderPipelineDescriptor *_sharedPipelineDescriptor;
    MTLRenderPipelineDescriptor *_singleColorPipelineDescriptor;
    MTLRenderPipelineDescriptor *_singlePaintPipelineDescriptor;
    PKLRUCache *_strokeRenderCache;
    id<MTLBuffer> _particleIndexBuffer;
    id<MTLBuffer> _randomNumberBuffer;
    NSObject<OS_dispatch_queue> *_accessQueue;
    unsigned long long _signpost_id;
    PKMetalResourceHandlerBuffer *_purgeableResourceBuffer;
    PKMetalResourceHandlerBuffer *_resourceBuffer;
    PKMetalResourceHandlerBuffer *_gpuResourceBuffer;
    id<MTLPipelineLibrarySPI> _pipelineLibrary;
    BOOL _generatePipelineDescriptors;
    BOOL _generateForScribble;
}

@property (readonly, nonatomic) id<MTLDevice> device;
@property (readonly, nonatomic) unsigned long long pixelFormat;
@property (readonly, nonatomic) unsigned long long paintAndParticlePixelFormat;
@property (readonly, nonatomic) unsigned long long stencilPixelFormat;
@property (readonly, nonatomic) id<MTLTexture> paperTexture;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } paperTextureSize;
@property (readonly, nonatomic) MTLPipelineBufferDescriptor *sharedPipelineDescriptor;
@property (readonly, nonatomic) BOOL deviceSupportsAppleFamily;
@property (readonly, nonatomic) BOOL deviceSupportsMacFamily;
@property (readonly, nonatomic) BOOL deviceSupportsCatalystFamily;
@property (readonly, nonatomic) BOOL deviceSupportsFramebufferFetch;

+ (id)sharedResourceHandlerWithDevice:(id)a0;
+ (id)sharedResourceHandlerWithDevice:(id)a0 pixelFormat:(unsigned long long)a1 paintAndParticlePixelFormat:(unsigned long long)a2 stencilPixelFormat:(unsigned long long)a3;
+ (id)inkBundle;
+ (id)generatePipelineDescriptorsForDevice:(id)a0;

- (id)initWithDevice:(id)a0;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)replaceInkTexture:(id)a0 image:(struct CGImage { } *)a1;
- (id)initWithDevice:(id)a0 pixelFormat:(unsigned long long)a1;
- (id)strokeRenderCache;
- (id)newPurgeableBufferWithLength:(unsigned long long)a0 bytes:(const void *)a1 outOffset:(unsigned long long *)a2;
- (void)deallocateReusableBuffers;
- (id)erasePaintAccumulatorShader;
- (id)erasePaintShader;
- (id)copyAccumulatorIntoPaintShader;
- (id)blitIntoPaintShader;
- (id)singleAttachmentBlitShader;
- (id)blitShader;
- (id)cachedQuadVertexBuffer;
- (id)cachedQuadTexCoordBuffer;
- (id)paintShaderForLiveStrokeMode;
- (id)paintShader;
- (id)particleShader;
- (id)particleShaderWithAspectRatioSupport;
- (id)particleIndexBuffer;
- (id)randomNumberBuffer;
- (id)paintCircleShader;
- (id)paperShader;
- (id)fillColorShader;
- (id)linesShader;
- (id)compositeOverShaderWithMode:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned long long)a2 renderMask:(BOOL)a3 edgeMask:(BOOL)a4;
- (id)compositeSoftWhiteShaderWithMode:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned long long)a2 renderMask:(BOOL)a3 edgeMask:(BOOL)a4;
- (id)compositeMultiplyShaderWithMode:(long long)a0 clipping:(BOOL)a1 targetMultiple:(BOOL)a2 colorAttachmentIndex:(unsigned long long)a3 renderMask:(BOOL)a4 edgeMask:(BOOL)a5;
- (id)compositeEraseShaderWithMode:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned long long)a2;
- (id)compositePaperShaderWithMode:(long long)a0 colorAttachmentIndex:(unsigned long long)a1;
- (id)paintShaderKernelPipelineStateWithLiveStrokeMode;
- (id)paintShaderKernelPipelineState;
- (id)newGPUBufferWithLength:(unsigned long long)a0 outOffset:(unsigned long long *)a1 commandBuffer:(id)a2;
- (id)paintShaderKernelPipelineStateWithLiveStrokeParticles;
- (id)particleShaderKernelPipelineStateWithVariableSpacing;
- (id)particleShaderKernelPipelineState;
- (id)newBufferWithLength:(unsigned long long)a0 bytes:(const void *)a1 outOffset:(unsigned long long *)a2;
- (id)invertShader;
- (id)paintShaderForAccumulator;
- (id)particleShaderForAccumulatorWithAspectRatioSupport;
- (id)particleShaderForAccumulator;
- (id)inkTextureNamed:(id)a0;
- (const float *)randomNumberArray;
- (id)eraseShader;
- (id)eraseOriginalBackShader;
- (id)initWithDevice:(id)a0 pixelFormat:(unsigned long long)a1 paintAndParticlePixelFormat:(unsigned long long)a2 stencilPixelFormat:(unsigned long long)a3 generatePipelineDescriptors:(BOOL)a4;
- (id)_signpostLog;
- (void)_setupCachedQuad;
- (void)_preloadShaders;
- (id)paintShaderWithColorAttachmentIndex:(unsigned int)a0 liveStrokeMode:(BOOL)a1;
- (id)particleShaderWithColorAttachmentIndex:(unsigned int)a0 aspectRatioSupport:(BOOL)a1;
- (id)newParticleShaderKernelPipelineStateWithVariableSpacing:(BOOL)a0;
- (id)newPaintShaderKernelPipelineState;
- (id)newComputePipelineDescriptor;
- (id)_paintShaderKernelPipelineStateWithLiveStrokeMode:(BOOL)a0 particles:(BOOL)a1;
- (id)newPaperShader;
- (id)eraseShaderWithColorAttachmentIndex:(unsigned int)a0;
- (id)blitShaderWithColorAttachmentIndex:(unsigned int)a0 sharedPipelineDescriptor:(BOOL)a1;
- (id)eraseShaderWithColorAttachmentIndex:(unsigned int)a0 sharedPipelineDescriptor:(BOOL)a1;
- (id)copyFramebufferShaderWithSourceColorAttachmentIndex:(unsigned int)a0 destinationColorAttachmentIndex:(unsigned int)a1;
- (id)newLinesShader;
- (id)newPaintCircleShader;
- (id)newInvertShader;
- (id)newFillColorShader;
- (id)newRenderPipelineDescriptor;
- (void)_preloadUberShaders;
- (id)_inkTextureNamed:(id)a0;
- (id)uberShaderForKey:(struct { union { struct { unsigned char x0 : 3; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 4; unsigned char x5 : 8; unsigned char x6 : 1; } x0; unsigned long long x1; } x0; })a0;
- (id)constantValuesForKey:(long long)a0 clipping:(BOOL)a1 colorAttachmentIndex:(unsigned int)a2 renderMask:(BOOL)a3 edgeMask:(BOOL)a4;
- (id)_uberShaderForKey:(struct { union { struct { unsigned char x0 : 3; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 4; unsigned char x5 : 8; unsigned char x6 : 1; } x0; unsigned long long x1; } x0; })a0;
- (void)_preloadScribbleUberShadersForBaseKey:(struct { union { struct { unsigned char x0 : 3; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 4; unsigned char x5 : 8; unsigned char x6 : 1; } x0; unsigned long long x1; } x0; })a0;
- (void)_preloadUberShadersForBaseKey:(struct { union { struct { unsigned char x0 : 3; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 4; unsigned char x5 : 8; unsigned char x6 : 1; } x0; unsigned long long x1; } x0; })a0;
- (id)textureByUnpremultiplyingAlphaInTexture:(id)a0;
- (void)_setupPaperTextureIfNecessary;
- (void)_setupRandomNumberBufferIfNecessary;
- (void)_setupParticleIndexBufferIfNecessary;
- (void)_preloadInkTextures;
- (id)initWithDevice:(id)a0 generatePipelineDescriptors:(BOOL)a1;
- (void)preloadPaperTexture;
- (void)preloadParticleResources;

@end

@interface _PKClippedStroke : PKStroke {
    struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *__begin_; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *__end_; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *__value_; } __end_cap_; } _maskPaths;
    struct vector<_PKFloatRange, std::__1::allocator<_PKFloatRange> > { struct *__begin_; struct *__end_; struct __compressed_pair<_PKFloatRange *, std::__1::allocator<_PKFloatRange> > { struct *__value_; } __end_cap_; } _centerlineSlices;
}

+ (id)sliceWithEraser:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a0 toClip:(id)a1 clipType:(int)a2;
+ (id)sliceWithEraser:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a0 toClip:(id)a1;

- (id)mask;
- (void).cxx_destruct;
- (id).cxx_construct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calculateBounds;
- (id)initWithStroke:(id)a0;
- (id)sliceWithEraser:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a0;
- (id)sliceWithMask:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a0;
- (BOOL)intersectsPoint:(struct CGPoint { double x0; double x1; })a0 boundsOutset:(double)a1 minimumStrokeThreshold:(double)a2;
- (struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)maskPaths;
- (struct CGPath { } *)selectionPathRepresentationWithPointsCount:(int *)a0;
- (id)initWithStroke:(id)a0 hidden:(BOOL)a1 version:(struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })a2 ink:(id)a3 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a4;
- (id)initWithInk:(id)a0 strokePath:(id)a1 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 mask:(id)a3;
- (struct CGPath { } *)newPathRepresentation;
- (void)_appendPointsOfInterestForSelection:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint *x0; } x2; } *)a0;
- (id)maskedPathRanges;
- (struct vector<_PKFloatRange, std::__1::allocator<_PKFloatRange> > { struct *x0; struct *x1; struct __compressed_pair<_PKFloatRange *, std::__1::allocator<_PKFloatRange> > { struct *x0; } x2; } *)centerlineSlices;
- (void)debugRender:(struct CGContext { } *)a0;
- (BOOL)intersectsPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)intersectsLineFrom:(struct CGPoint { double x0; double x1; })a0 to:(struct CGPoint { double x0; double x1; })a1 minThreshold:(double)a2;
- (BOOL)intersectsClosedStroke:(id)a0;
- (void)generatePolyHull;
- (void)calculateCenterlineSlices;
- (id)initWithArchive:(const struct Stroke { void /* function */ **x0; struct vector<float, std::__1::allocator<float> > { float *x0; float *x1; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x0; } x2; } x1; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle *x0; } x0; } x2; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x3; unsigned long long x4; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data *x0; struct Data *x1; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data *x0; } x2; } x5; unsigned long long x6; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x7; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData *x0; } x0; } x8; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x9; unsigned long long x10; struct PtrVector<drawing::Stroke> { struct vector<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> >, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; } x2; } x0; } x11; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x12; struct unique_ptr<drawing::Transform, std::__1::default_delete<drawing::Transform> > { struct __compressed_pair<drawing::Transform *, std::__1::default_delete<drawing::Transform> > { struct Transform *x0; } x0; } x13; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x14; struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; } x15; struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *x0; struct __shared_weak_count *x1; } x16; } *)a0 sortedUUIDs:(id)a1 inks:(id)a2 parent:(id)a3 isHidden:(BOOL)a4 transientArchiveDictionary:(id)a5;
- (unsigned int)saveToArchive:(struct Stroke { void /* function */ **x0; struct vector<float, std::__1::allocator<float> > { float *x0; float *x1; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x0; } x2; } x1; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle *x0; } x0; } x2; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x3; unsigned long long x4; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data *x0; struct Data *x1; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data *x0; } x2; } x5; unsigned long long x6; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x7; struct unique_ptr<drawing::StrokeData, std::__1::default_delete<drawing::StrokeData> > { struct __compressed_pair<drawing::StrokeData *, std::__1::default_delete<drawing::StrokeData> > { struct StrokeData *x0; } x0; } x8; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x9; unsigned long long x10; struct PtrVector<drawing::Stroke> { struct vector<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> >, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; } x2; } x0; } x11; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x12; struct unique_ptr<drawing::Transform, std::__1::default_delete<drawing::Transform> > { struct __compressed_pair<drawing::Transform *, std::__1::default_delete<drawing::Transform> > { struct Transform *x0; } x0; } x13; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x14; struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; } x15; struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *x0; struct __shared_weak_count *x1; } x16; } *)a0 sortedUUIDs:(id)a1 inks:(id)a2 withPathData:(BOOL)a3 parent:(id)a4 transient:(BOOL)a5;

@end

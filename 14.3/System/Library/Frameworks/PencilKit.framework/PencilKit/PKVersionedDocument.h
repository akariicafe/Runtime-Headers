@interface PKVersionedDocument : NSObject

@property (nonatomic) struct Document { void /* function */ **x0; struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x1; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; } x2; } x0; } x1; unsigned int x2; struct { unsigned char x0 : 1; } x3; } *documentArchive;
@property (readonly, nonatomic) unsigned long long futureVersionCount;

+ (unsigned int)versionedDocumentSerializationVersion;
+ (unsigned int)minimumSupportedVersion;
+ (unsigned int)serializationVersion;

- (id)serialize;
- (id)init;
- (BOOL)loadDocumentArchive:(struct Document { void /* function */ **x0; struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x1; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; } x2; } x0; } x1; unsigned int x2; struct { unsigned char x0 : 1; } x3; } *)a0;
- (void)mergeVersion:(unsigned int)a0 fromData:(id)a1;
- (id)serializeCurrentVersion:(unsigned int *)a0;
- (void)saveCurrentVersion:(struct Version { void /* function */ **x0; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x1; unsigned int x2; unsigned int x3; struct { unsigned char x0 : 1; unsigned char x1 : 1; } x4; } *)a0;
- (unsigned int)maxDocumentVersion;
- (unsigned long long)mergeWithVersionedDocument:(id)a0;
- (id)initWithData:(id)a0;
- (void)dealloc;
- (id)initWithArchive:(const struct Document { void /* function */ **x0; struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x1; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; } x2; } x0; } x1; unsigned int x2; struct { unsigned char x0 : 1; } x3; } *)a0;
- (void)loadArchive:(const struct Document { void /* function */ **x0; struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x1; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; } x2; } x0; } x1; unsigned int x2; struct { unsigned char x0 : 1; } x3; } *)a0;
- (BOOL)loadData:(id)a0;
- (void)saveToArchive:(struct Document { void /* function */ **x0; struct PtrVector<versioned_document::Version> { struct vector<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> >, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x1; struct __compressed_pair<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *, std::__1::allocator<std::__1::unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > > > { struct unique_ptr<versioned_document::Version, std::__1::default_delete<versioned_document::Version> > *x0; } x2; } x0; } x1; unsigned int x2; struct { unsigned char x0 : 1; } x3; } *)a0;
- (id)initWithUnzippedData:(id)a0;
- (BOOL)loadUnzippedData:(id)a0;

@end

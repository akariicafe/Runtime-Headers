@class PKMetalShader, PKMetalFramebuffer, PKMetalRenderState, PKLinedPaper, PKMetalResourceHandler;
@protocol MTLDevice, MTLTexture, MTLBuffer, MTLCommandQueueSPI;

@interface PKMetalRenderer : NSObject {
    PKMetalRenderState *_currentRenderState;
    unsigned long long _currentCacheSize;
    PKMetalFramebuffer *_originalBackFramebuffer;
    BOOL _shouldClearOriginalBackFramebuffer;
    PKMetalFramebuffer *_paintFramebuffer;
    PKMetalFramebuffer *_alwaysMemorylessPaintFramebuffer;
    PKMetalFramebuffer *_paintFramebufferAccumulator;
    PKMetalFramebuffer *_maskMSAAFramebuffer;
    PKMetalFramebuffer *_dummyPaintFramebuffer;
    PKMetalFramebuffer *_dummyColorFramebuffer;
    struct CGSize { double width; double height; } _drawingPixelSize;
    double _fromStrokeSpaceScale;
    BOOL _lastPointForEraserIsValid;
    struct _PKStrokePoint { double timestamp; struct CGPoint { double x; double y; } location; double radius; double aspectRatio; double edgeWidth; double force; double azimuth; double altitude; double opacity; } _lastPointForEraser;
    struct vector<(anonymous namespace)::StrokeVertex, std::__1::allocator<(anonymous namespace)::StrokeVertex> > { struct StrokeVertex *__begin_; struct StrokeVertex *__end_; struct __compressed_pair<(anonymous namespace)::StrokeVertex *, std::__1::allocator<(anonymous namespace)::StrokeVertex> > { struct StrokeVertex *__value_; } __end_cap_; } _strokeBuffer;
    unsigned long long _strokeBufferCount;
    id<MTLTexture> _paperTexture;
    struct CGSize { double width; double height; } _paperTextureSize;
    unsigned long long _pixelFormat;
    unsigned long long _paintAndParticlePixelFormat;
    struct vector<PKMetalParticleStrokePoint, std::__1::allocator<PKMetalParticleStrokePoint> > { struct PKMetalParticleStrokePoint *__begin_; struct PKMetalParticleStrokePoint *__end_; struct __compressed_pair<PKMetalParticleStrokePoint *, std::__1::allocator<PKMetalParticleStrokePoint> > { struct PKMetalParticleStrokePoint *__value_; } __end_cap_; } _particleStrokePointBuffer;
    struct vector<PKMetalPaintStrokePoint, std::__1::allocator<PKMetalPaintStrokePoint> > { struct PKMetalPaintStrokePoint *__begin_; struct PKMetalPaintStrokePoint *__end_; struct __compressed_pair<PKMetalPaintStrokePoint *, std::__1::allocator<PKMetalPaintStrokePoint> > { struct PKMetalPaintStrokePoint *__value_; } __end_cap_; } _paintStrokePointBuffer;
    struct vector<PKMetalLiveStrokePaintStrokePoint, std::__1::allocator<PKMetalLiveStrokePaintStrokePoint> > { struct PKMetalLiveStrokePaintStrokePoint *__begin_; struct PKMetalLiveStrokePaintStrokePoint *__end_; struct __compressed_pair<PKMetalLiveStrokePaintStrokePoint *, std::__1::allocator<PKMetalLiveStrokePaintStrokePoint> > { struct PKMetalLiveStrokePaintStrokePoint *__value_; } __end_cap_; } _liveStrokeStrokePointBuffer;
    struct vector<(anonymous namespace)::AnimatingStroke, std::__1::allocator<(anonymous namespace)::AnimatingStroke> > { struct AnimatingStroke *__begin_; struct AnimatingStroke *__end_; struct __compressed_pair<(anonymous namespace)::AnimatingStroke *, std::__1::allocator<(anonymous namespace)::AnimatingStroke> > { struct AnimatingStroke *__value_; } __end_cap_; } _animatingStrokes;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _paintFramebufferDirtyRect;
    PKMetalShader *_paintShader;
    PKMetalShader *_particleShader;
    PKMetalShader *_particleShaderWithAspectRatioSupport;
    id<MTLBuffer> _particleIndexBuffer;
    id<MTLBuffer> _randomNumberBuffer;
    unsigned long long _renderMaskMSAASampleCount;
    BOOL _needRestartWorkaroundForOldIntelDrivers;
    BOOL _useComputeRenderCaches;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _drawableDirtyRect;
}

@property (readonly, nonatomic) id<MTLCommandQueueSPI> commandQueue;
@property (readonly, nonatomic) id<MTLDevice> device;
@property (retain, nonatomic) PKLinedPaper *linedPaper;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } paperTransform;
@property (nonatomic) struct CGColor { } *backgroundColor;
@property (nonatomic) struct CGColor { } *liveRenderingOverrideColor;
@property (nonatomic) BOOL solidColorBackboard;
@property (nonatomic) BOOL oneRenderPassForLiveRendering;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } viewScissor;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } strokeTransform;
@property (nonatomic) struct CGSize { double width; double height; } actualSize;
@property (nonatomic) double backboardPaperMultiply;
@property (readonly, nonatomic) PKMetalResourceHandler *resourceHandler;
@property (nonatomic) double inputScale;
@property (nonatomic) double eraserIndicatorAlpha;
@property (nonatomic) BOOL fadeOutStrokesMode;
@property (nonatomic) BOOL liveStrokeMode;
@property (nonatomic) struct CGSize { double width; double height; } liveStrokeMaxSize;
@property (nonatomic) BOOL edgeMask;
@property (nonatomic) double liveStrokeElapsedTime;
@property (readonly, nonatomic) BOOL isFinishedRendering;
@property (readonly, nonatomic) double latestTimestamp;
@property (nonatomic) BOOL invertColors;

+ (BOOL)useBlitEncoder;
+ (BOOL)disableClearOriginalBackbufferWorkaround;

- (void)setup;
- (void)clear;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (struct CGImage { } *)newCGImage;
- (void)flushMemoryIfPossible;
- (void)setPaperTextureImage:(struct CGImage { } *)a0;
- (void)purgeOriginalBackFramebuffer;
- (void)purgeRenderCachesForStrokes:(id)a0;
- (void)setAlternativeStrokes:(id)a0 alpha:(double)a1 originalStrokeAlpha:(double)a2;
- (void)drawingBeganWithStroke:(id)a0;
- (void)drawingEnded:(id)a0 finishStrokeBlock:(id /* block */)a1;
- (void)drawingCancelled;
- (id)initWithDrawingPixelSize:(struct CGSize { double x0; double x1; })a0 actualSize:(struct CGSize { double x0; double x1; })a1 device:(id)a2 resourceHandler:(id)a3;
- (struct CGImage { } *)newCGImageWithClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)teardownOriginalBackFramebuffer;
- (void)buildRenderCacheForStrokes:(id)a0;
- (unsigned long long)clearAndRenderStrokes:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 stopBlock:(id /* block */)a3;
- (void)generateLiveStrokeCachesForStrokes:(id)a0 destinationLocations:(const struct vector<std::__1::vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >, std::__1::allocator<std::__1::vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > > > { struct vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > *x0; struct vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > *x1; struct __compressed_pair<std::__1::vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > *, std::__1::allocator<std::__1::vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > > > { struct vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> > *x0; } x2; } *)a1 startTime:(double)a2 duration:(double)a3;
- (void)clearTile:(id)a0 waitUntilCompleted:(BOOL)a1;
- (void)setShouldClearOriginalFramebuffer;
- (void)copyIntoTile:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 waitUntilCompleted:(BOOL)a2;
- (void)clearAndRenderTiles:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 waitUntilCompleted:(BOOL)a2;
- (void)renderTiles:(id)a0 intoTile:(id)a1 waitUntilCompleted:(BOOL)a2;
- (void)renderTexture:(id)a0;
- (void)renderImage:(struct CGImage { } *)a0 andMask:(struct CGImage { } *)a1;
- (void)renderImage:(struct CGImage { } *)a0 andMask:(struct CGImage { } *)a1 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (unsigned long long)renderStrokes:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 stopBlock:(id /* block */)a3;
- (unsigned long long)renderStrokes:(id)a0 stopBlock:(id /* block */)a1;
- (void)getAndRenderNewPoints:(id)a0;
- (void)renderAheadWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 onPaper:(BOOL)a1 renderBufferSize:(struct CGSize { double x0; double x1; })a2 destinationTexture:(id)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawableDirtyRect;
- (void)finishLiveStrokeAndPresentDrawable:(id)a0 waitUntilScheduled:(BOOL)a1;
- (void)renderLiveStrokeWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 renderBufferSize:(struct CGSize { double x0; double x1; })a1;
- (void)resetDrawableDirtyRect;
- (void)addStrokeSpaceDrawableDirtyRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)generateSmartFillMaskForStroke:(id)a0 maskPaths:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a1;
- (double)alphaForStroke:(id)a0;
- (void)teardownDrawingFramebuffers;
- (void)renderSmartFillMask:(id)a0 stroke:(id)a1;
- (void)drawNewPointsAt:(double)a0;
- (void)clearPaintFramebuffers;
- (unsigned long long)renderStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 accumulating:(BOOL)a2 combinedRendering:(BOOL)a3 renderEncoder:(id)a4 computeEncoder:(id)a5 renderCache:(id)a6;
- (BOOL)applyStrokeSpaceClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (unsigned long long)_renderStrokes:(id)a0 clippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 stopBlock:(id /* block */)a3;
- (void)disableClippingForRenderEncoder:(id)a0;
- (void)setupRenderStateForRenderingStrokes:(id)a0;
- (void)teardownRenderStateIfNecessary;
- (void)setupDrawingFramebuffersIfNecessaryLiveRendering:(BOOL)a0;
- (id)renderCommandEncoderForCommandBuffer:(id)a0 backBufferLoadAction:(unsigned long long)a1 backBufferStoreAction:(unsigned long long)a2 paintBufferLoadAction:(unsigned long long)a3 accumulatorBufferLoadAction:(unsigned long long)a4 accumulatorBufferStoreAction:(unsigned long long)a5 destinationLoadAction:(unsigned long long)a6;
- (void)setupRenderStateForStrokeRenderingNeedPaintBuffer:(BOOL)a0 needRenderMask:(BOOL)a1;
- (BOOL)shouldAccumulateLiveStroke;
- (void)setupRenderStateForLiveRenderingDestinationTexture:(id)a0 destinationLoadAction:(unsigned long long)a1 accumLoadAction:(unsigned long long)a2 accumStoreAction:(unsigned long long)a3 backBufferLoadAction:(unsigned long long)a4 backBufferStoreAction:(unsigned long long)a5 renderMask:(BOOL)a6;
- (void)renderAlternativeStroke:(id)a0 alpha:(double)a1 purgeableResources:(id)a2;
- (void)resetPaintFramebufferAccumulate:(BOOL)a0;
- (void)renderAnimatingStrokesWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 renderBufferSize:(struct CGSize { double x0; double x1; })a1;
- (void)renderWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 mode:(long long)a2 clipped:(BOOL)a3 renderBufferSize:(struct CGSize { double x0; double x1; })a4 renderEncoder:(id)a5;
- (void)purgePaintFramebuffers;
- (void)finishRenderingClippedToStrokeSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 renderEncoder:(id)a2;
- (void)finishStroke;
- (void)renderFullscreenQuadWithShader:(id)a0 renderEncoder:(id)a1;
- (void)renderStroke:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 mode:(long long)a2 flipped:(BOOL)a3 renderBufferSize:(struct CGSize { double x0; double x1; })a4 renderEncoder:(id)a5 currentClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 needRenderMask:(BOOL)a7;
- (void)copyFromFramebuffer:(id)a0 toFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 renderEncoder:(id)a3;
- (void)copyIntoPaintFromTexture:(id)a0 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2;
- (void)setupForDefaultUberVertexShaderInRenderEncoder:(id)a0;
- (id)renderCacheItemForStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a0 bsplineFilter:(struct PKBSplineFilter { void /* function */ **x0; struct PKInputProvider<_PKStrokePoint> *x1; BOOL x2; double x3; long long x4; long long x5; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint *x0; struct _PKStrokePoint *x1; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint *x0; } x2; } x6; long long x7; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint *x0; struct _PKStrokePoint *x1; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint *x0; } x2; } x8; int x9; BOOL x10; BOOL x11; id x12; double x13; double x14; double x15; int x16; struct { double x0; double x1; } x17; } *)a1 purgeableResources:(id)a2 strokeRenderCache:(id)a3;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 destinationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 renderState:(id)a4;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 sourceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 destinationPosition:(struct CGPoint { double x0; double x1; })a3 renderState:(id)a4;
- (BOOL)ensureOriginalBackFramebufferHasContents;
- (struct CGImage { } *)newCGImageWithClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 copyImage:(BOOL)a1;
- (void)setupUberVertexShaderWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 paperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 renderEncoder:(id)a2;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })strokeRenderTransformForFramebufferSize:(struct CGSize { double x0; double x1; })a0 flipped:(BOOL)a1;
- (void)clearFramebuffer:(id)a0 waitUntilCompleted:(BOOL)a1;
- (void)setupOriginalBackFramebufferIfNecessary;
- (void)setupCachedResourcesIfNecessary;
- (void)renderEraserIndicator:(struct _PKStrokePoint { double x0; struct CGPoint { double x0; double x1; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)finishRenderingNoTeardownForStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a0 clippedToPixelSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2;
- (void)finishRendering;
- (BOOL)setupClippingForStrokeClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 clippedToPixelSpaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 renderEncoder:(id)a2 outNewClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a3;
- (void)clearPaintFramebuffersWithRenderEncoder:(id)a0;
- (void)setPaperTextureOnRenderEncoder:(id)a0 fragmentUniforms:(struct PKMetalUberFragmentUniforms { float x0; float x1; float x2; float x3; } *)a1;
- (void)renderPaperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 paperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 flipped:(BOOL)a2 multiply:(double)a3 renderEncoder:(id)a4;
- (void)renderBackgroundColorWithRenderEncoder:(id)a0;
- (void)renderLinesRenderBufferSize:(struct CGSize { double x0; double x1; })a0 renderEncoder:(id)a1;
- (void)renderBrushIndicatorForStroke:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 mode:(long long)a2;
- (void)setupRenderEncoder:(id)a0 forParticleStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1;
- (void)setupRenderEncoder:(id)a0 forPenStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 alphaFactor:(double)a2;
- (unsigned long long)renderPaintRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a3;
- (unsigned long long)renderLiveStrokePaintRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a3;
- (unsigned long long)renderStrokeRenderCache:(id)a0 renderEncoder:(id)a1 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a2 indexed:(BOOL)a3;
- (unsigned long long)renderPenStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 combinedRendering:(BOOL)a2 renderEncoder:(id)a3;
- (unsigned long long)renderParticleRenderCache:(id)a0 renderEncoder:(id)a1 computeEncoder:(id)a2 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a3;
- (unsigned long long)renderParticleStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 starts:(BOOL)a2 ends:(BOOL)a3 combinedRendering:(BOOL)a4 renderEncoder:(id)a5;
- (void)setVertexBuffersForVertices:(const struct StrokeVertex { float x0; float x1; struct half { unsigned short x0; } x2; struct half { unsigned short x0; } x3; struct half { unsigned short x0; } x4; struct half { unsigned short x0; } x5; } *)a0 numVertices:(unsigned long long)a1 renderEncoder:(id)a2;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })strokeRenderTransform;
- (void)setupStrokeBufferIfNecessary;
- (struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; })fadeOutLimitFromPoints:(const struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; } *)a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1;
- (void)renderStrokeVertices:(const struct StrokeVertex { float x0; float x1; struct half { unsigned short x0; } x2; struct half { unsigned short x0; } x3; struct half { unsigned short x0; } x4; struct half { unsigned short x0; } x5; } *)a0 numVertices:(unsigned long long)a1 numIndices:(unsigned long long)a2 renderEncoder:(id)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clipRectForVertices:(const struct StrokeVertex { float x0; float x1; struct half { unsigned short x0; } x2; struct half { unsigned short x0; } x3; struct half { unsigned short x0; } x4; struct half { unsigned short x0; } x5; } *)a0 numVertices:(unsigned long long)a1;
- (void)addBufferForRenderCache:(id)a0 strokeVertices:(struct StrokeVertex { float x0; float x1; struct half { unsigned short x0; } x2; struct half { unsigned short x0; } x3; struct half { unsigned short x0; } x4; struct half { unsigned short x0; } x5; } *)a1 numVertices:(unsigned long long)a2;
- (unsigned long long)renderVerticies:(struct StrokeVertex { float x0; float x1; struct half { unsigned short x0; } x2; struct half { unsigned short x0; } x3; struct half { unsigned short x0; } x4; struct half { unsigned short x0; } x5; } *)a0 size:(unsigned long long)a1 numRenderedVertices:(unsigned long long)a2 numIndices:(unsigned long long)a3 localClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a5 combinedRendering:(BOOL)a6 renderEncoder:(id)a7;
- (void)generateRenderMaskForPaths:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a0 renderCache:(id)a1;
- (id)dummyPaintFramebuffer;
- (id)dummyColorFramebuffer;
- (BOOL)generateBSplineInComputeForStroke:(id)a0;
- (id)generateCacheForStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a0 points:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a1 segmentSteps:(const struct vector<int, std::__1::allocator<int> > { int *x0; int *x1; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x0; } x2; } *)a2;
- (void)setupRenderState:(id)a0 needCompute:(BOOL)a1 clearPaint:(BOOL)a2;
- (id)cacheForMask:(id)a0 strokeRenderCache:(id)a1 purgeableResources:(id)a2;
- (void)setupRenderState:(id)a0 needCompute:(BOOL)a1;
- (BOOL)canRenderStroke:(id)a0 combinedWith:(id)a1;
- (void)clearNowWithStrokeSpaceClipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (id)generatePaintCacheForStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 segmentSteps:(const struct vector<int, std::__1::allocator<int> > { int *x0; int *x1; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x0; } x2; } *)a2 liveStrokePoints:(const void *)a3 liveStrokeStartTime:(double)a4 duration:(double)a5;
- (id)generateCacheForPenStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a0 points:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a1;
- (id)generateCacheForParticleStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a0 points:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a1 startPt:(BOOL)a2 endPt:(BOOL)a3;
- (id)generateParticleCacheForStroke:(struct _PKStrokePointSlice { struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x0; struct __wrap_iter<const _PKStrokePoint *> { struct _PKStrokePoint *x0; } x1; })a0 animatingStroke:(struct AnimatingStroke { id x0; id x1; BOOL x2; struct unique_ptr<PKBSplineFilter, std::__1::default_delete<PKBSplineFilter> > { struct __compressed_pair<PKBSplineFilter *, std::__1::default_delete<PKBSplineFilter> > { struct PKBSplineFilter *x0; } x0; } x3; struct unique_ptr<PKOutputTimeFilter, std::__1::default_delete<PKOutputTimeFilter> > { struct __compressed_pair<PKOutputTimeFilter *, std::__1::default_delete<PKOutputTimeFilter> > { struct PKOutputTimeFilter *x0; } x0; } x4; struct unique_ptr<PKMetalInputProvider, std::__1::default_delete<PKMetalInputProvider> > { struct __compressed_pair<PKMetalInputProvider *, std::__1::default_delete<PKMetalInputProvider> > { struct PKMetalInputProvider *x0; } x0; } x5; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x6; long long x7; BOOL x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x10; double x11; unsigned int x12; BOOL x13; BOOL x14; id x15; double x16; BOOL x17; double x18; unsigned long long x19; id /* block */ x20; } *)a1 starts:(BOOL)a2 ends:(BOOL)a3;
- (id)generateCacheForMask:(id)a0;
- (void)renderMaskForStroke:(id)a0 renderCache:(id)a1;
- (id)framebufferForTile:(id)a0 createIfNeeded:(BOOL)a1;
- (void)renderTexture:(id)a0 intoFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 renderState:(id)a3;
- (void)renderTile:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 renderState:(id)a2;
- (void)renderImage:(struct CGImage { } *)a0 intoFramebuffer:(id)a1 clipRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)cancelLiveStroke;
- (unsigned long long)colorAttachmentIndexFromFramebuffer:(id)a0;

@end

@class NSUUID, PKRecognitionSessionManager, CHRecognitionSession, NSArray, NSString, NSMutableDictionary, PKVectorTimestamp, NSMutableArray, PKVisualizationManager, NSMapTable;

@interface PKDrawing : NSObject <CHQueryDelegate, NSCopying, NSSecureCoding> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } __canvasBounds;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } __bounds;
    struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *__ptr_; struct __shared_weak_count *__cntrl_; } _unknownFields;
    NSMutableArray *_visibleStrokes;
    NSMutableDictionary *_visibleStrokesIdentifierMap;
    BOOL _recognitionEnabled;
    NSArray *_forcedRecognitionLocales;
    NSUUID *_listenerID;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (nonatomic) long long _orientation;
@property (retain, nonatomic) PKRecognitionSessionManager *recognitionManager;
@property (retain, nonatomic) NSMutableArray *_allStrokes;
@property (retain, nonatomic, setter=_setUUID:) NSUUID *uuid;
@property (readonly, nonatomic) NSUUID *replicaUUID;
@property (readonly, nonatomic) BOOL _hasReplicaUUID;
@property (retain, nonatomic) PKVectorTimestamp *version;
@property (nonatomic) struct _PKStrokeID { unsigned int clock; unsigned char replicaUUID[16]; unsigned int subclock; } boundsVersion;
@property (retain, nonatomic) CHRecognitionSession *recognitionSession;
@property (retain, nonatomic) NSMapTable *ongoingQueries;
@property (retain, nonatomic) PKVisualizationManager *visualizationManager;
@property (readonly, nonatomic) NSArray *strokes;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })newStrokeIDGreaterThan:(struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })a0 forUUID:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundingBoxForStrokeArray:(id)a0;
+ (id)_findLeftmostStrokes:(id)a0;
+ (id)_findRightmostStrokes:(id)a0;
+ (void)sortStrokes:(id)a0;
+ (long long)_currentSerializationVersion;
+ (id)_uuidDescriptionForStrokes:(id)a0;
+ (id)visibleStrokesFromStrokes:(id)a0 inDrawing:(id)a1;
+ (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_orientationTransform:(long long)a0 size:(struct CGSize { double x0; double x1; })a1;
+ (id)_defaultConversionQueue;
+ (id)_upgradeDrawingData:(id)a0 queue:(id)a1 completionBlock:(id /* block */)a2;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundingBoxForStrokes:(id)a0;
+ (id)_otherStrokesCloseToLeft:(BOOL)a0 forStrokes:(id)a1 withClosestStroke:(id)a2;
+ (id)drawingWithData:(id)a0;

- (id)_data;
- (id)serialize;
- (id)debugQuickLookObject;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_bounds;
- (id)init;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)data;
- (void)saveToArchive:(struct Drawing { void /* function */ **x0; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle *x0; } x0; } x1; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x2; struct PtrVector<drawing::Ink> { struct vector<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *x0; struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *x0; } x2; } x0; } x3; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data *x0; struct Data *x1; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data *x0; } x2; } x4; struct PtrVector<drawing::Stroke> { struct vector<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> >, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; } x2; } x0; } x5; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x6; struct PtrVector<drawing::StrokeID> { struct vector<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> >, std::__1::allocator<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > > > { struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *x0; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *, std::__1::allocator<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > > > { struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *x0; } x2; } x0; } x7; struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *x0; struct __shared_weak_count *x1; } x8; } *)a0 withPathData:(BOOL)a1;
- (void)dealloc;
- (id)_strokes;
- (id)_ascii;
- (id)initWithCoder:(id)a0;
- (id).cxx_construct;
- (BOOL)isEqual:(id)a0;
- (id)initWithDrawing:(id)a0;
- (id)initWithData:(id)a0 error:(id *)a1;
- (id)dataRepresentation;
- (unsigned long long)mergeWithDrawing:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (id)_unclippedStroke:(id)a0;
- (id)_clipAgainstLegacyCanvas:(id)a0;
- (id)_clipStroke:(id)a0 againstPaths:(const struct vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x1; struct __compressed_pair<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > { struct vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > *x0; } x2; } *)a1;
- (id)_clipStroke:(id)a0;
- (id)_visibleStrokeForIdentifier:(id)a0;
- (void)queryDidUpdateResult:(id)a0;
- (id)_visibleStrokes;
- (void)setStrokes:(id)a0 hidden:(BOOL)a1;
- (id)visibleStrokeForInsertingStroke:(id)a0;
- (void)addNewStroke:(id)a0;
- (id)sliceWithEraseStroke:(id)a0;
- (id)setStroke:(id)a0 hidden:(BOOL)a1;
- (void)invalidateVisibleStrokes;
- (void)set_canvasBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_canvasBounds;
- (id)strokesIntersectedByPoint:(struct CGPoint { double x0; double x1; })a0 prevPoint:(struct CGPoint { double x0; double x1; })a1 onscreenVisibleStrokes:(id)a2;
- (id)initWithStrokes:(id)a0 fromDrawing:(id)a1;
- (void)_copyAndAddStrokes:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)_teardownRecognitionObjects;
- (id)_copyAndAddStroke:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 ink:(id)a2 newParent:(id *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateStrokeBounds;
- (struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })newStrokeIDGreaterThan:(struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })a0;
- (id)visibleStrokeForInsertingStroke:(id)a0 ink:(id)a1;
- (id)visibleStrokeForInsertingStroke:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 ink:(id)a2;
- (void)setStrokeSortIDForInsertion:(id)a0;
- (void)invalidateStrokeBounds;
- (void)setNeedsRecognitionUpdate;
- (id)_copyAndAddStroke:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (struct _PKStrokeID { unsigned int x0; unsigned char x1[16]; unsigned int x2; })strokeVersionForUpdatedStroke:(id)a0;
- (void)updateStrokes:(id /* block */)a0;
- (void)_updateStrokes:(id)a0 updateBlock:(id /* block */)a1;
- (id)_stroke:(id)a0 transformed:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 concat:(BOOL)a2;
- (id)_newStroke:(id)a0 withInk:(id)a1;
- (id)updateStroke:(id)a0 updater:(id /* block */)a1;
- (void)willMergeWithDrawing:(id)a0;
- (void)didMergeWithDrawing:(id)a0;
- (id)imageFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 scale:(double)a1;
- (id)_initWithData:(id)a0 loadNonInkingStrokes:(BOOL)a1 error:(id *)a2;
- (void)_updateRecognitionSession;
- (BOOL)recognitionEnabled;
- (id)forcedRecognitionLocales;
- (id)_visibleStrokesIdentifierMap;
- (id)indexableContent;
- (BOOL *)_newAsciiBitfield;
- (id)initWithStrokes:(id)a0;
- (BOOL)containsInternalStrokes;
- (id)copyWithoutInternalStrokes;
- (void)_imageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 scale:(double)a1 completionHandler:(id /* block */)a2;
- (id)drawingByApplyingTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (id)drawingByAppendingDrawing:(id)a0;
- (id)drawingByAppendingStrokes:(id)a0;
- (id)visibleStrokes;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })strokeBounds;
- (void)sortStrokes;
- (id)insertNewTestStroke;
- (id)_addStroke:(id)a0;
- (void)_removeStroke:(id)a0;
- (id)copyAndAddStroke:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (void)setStrokes:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 concat:(BOOL)a2;
- (void)setStrokes:(id)a0 inks:(id)a1;
- (id)setStroke:(id)a0 ink:(id)a1;
- (void)_transformAllStrokes:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (id)setStroke:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 concat:(BOOL)a2;
- (void)setStrokeSubstrokes:(id)a0;
- (void)_mergeStroke:(id)a0;
- (id)CHDrawing;
- (void)_addTestDataToUnknownFields;
- (id)_dataInUnknownFields;
- (void)setRecognitionEnabled:(BOOL)a0;
- (void)setForcedRecognitionLocales:(id)a0;
- (void)cancelOngoingRecognitionRequests;
- (void)performSearchQuery:(id)a0 withBlock:(id /* block */)a1;
- (id)serializeWithVersion:(long long)a0;
- (id)serializeTransiently;
- (long long)_minimumSerializationVersion;
- (id)initWithLegacyData:(id)a0;
- (id)_upgradeOnQueue:(id)a0 isLegacyDrawing:(BOOL)a1 completionBlock:(id /* block */)a2;
- (struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; })_drawingStrokeInfoIsLegacyDrawing:(BOOL)a0;
- (struct CGSize { double x0; double x1; })_unscaledOrientedDrawingSize;
- (double)_conversionScaleFactor;
- (void)_removeInvisibleStrokes;
- (void)_removeHiddenAndEraserStrokes;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_transformForImageWithSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })_orientedDrawingSize;
- (void)_upgradeLegacyPenInks;
- (void)fetchIntersectedStrokesBetweenPoint:(struct CGPoint { double x0; double x1; })a0 otherPoint:(struct CGPoint { double x0; double x1; })a1 visibleOnscreenStrokes:(id)a2 completion:(id /* block */)a3;
- (id)intersectedStrokesFromStroke:(id)a0 visibleOnscreenStrokes:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_eraserStrokeBounds;
- (id)strokesIntersectedByPoint:(struct CGPoint { double x0; double x1; })a0 prevPoint:(struct CGPoint { double x0; double x1; })a1 minThreshold:(double)a2 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a3 onscreenVisibleStrokes:(id)a4;
- (id)_strokesIntersectedByPoint:(struct CGPoint { double x0; double x1; })a0 prevPoint:(struct CGPoint { double x0; double x1; })a1 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2;
- (id)intersectedStrokesAtPoint:(struct CGPoint { double x0; double x1; })a0 selectionType:(long long)a1 inputType:(long long)a2 visibleOnscreenStrokes:(id)a3;
- (id)initWithV1Data:(id)a0 loadNonInkingStrokes:(BOOL)a1;
- (id)v1SerializeWithPathData:(BOOL)a0 toVersion:(unsigned int *)a1;
- (id)_initWithUnzippedData:(id)a0 loadNonInkingStrokes:(BOOL)a1 error:(id *)a2;
- (id)initWithArchive:(const struct Drawing { void /* function */ **x0; struct unique_ptr<drawing::Rectangle, std::__1::default_delete<drawing::Rectangle> > { struct __compressed_pair<drawing::Rectangle *, std::__1::default_delete<drawing::Rectangle> > { struct Rectangle *x0; } x0; } x1; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > { struct __compressed_pair<drawing::StrokeID *, std::__1::default_delete<drawing::StrokeID> > { struct StrokeID *x0; } x0; } x2; struct PtrVector<drawing::Ink> { struct vector<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *x0; struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > > > { struct unique_ptr<drawing::Ink, std::__1::default_delete<drawing::Ink> > *x0; } x2; } x0; } x3; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data *x0; struct Data *x1; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data *x0; } x2; } x4; struct PtrVector<drawing::Stroke> { struct vector<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> >, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *, std::__1::allocator<std::__1::unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > > > { struct unique_ptr<drawing::Stroke, std::__1::default_delete<drawing::Stroke> > *x0; } x2; } x0; } x5; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x6; struct PtrVector<drawing::StrokeID> { struct vector<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> >, std::__1::allocator<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > > > { struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *x0; struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *, std::__1::allocator<std::__1::unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > > > { struct unique_ptr<drawing::StrokeID, std::__1::default_delete<drawing::StrokeID> > *x0; } x2; } x0; } x7; struct shared_ptr<PKProtobufUnknownFields> { struct PKProtobufUnknownFields *x0; struct __shared_weak_count *x1; } x8; } *)a0 loadNonInkingStrokes:(BOOL)a1 error:(id *)a2;
- (id)initWithV1Archive:(const struct Drawing { void /* function */ **x0; struct unique_ptr<drawingV1::Rectangle, std::__1::default_delete<drawingV1::Rectangle> > { struct __compressed_pair<drawingV1::Rectangle *, std::__1::default_delete<drawingV1::Rectangle> > { struct Rectangle *x0; } x0; } x1; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > { struct __compressed_pair<drawingV1::StrokeID *, std::__1::default_delete<drawingV1::StrokeID> > { struct StrokeID *x0; } x0; } x2; struct PtrVector<drawingV1::Ink> { struct vector<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *x0; struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *x0; } x2; } x0; } x3; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data *x0; struct Data *x1; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data *x0; } x2; } x4; unsigned long long x5; struct PtrVector<drawingV1::Stroke> { struct vector<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > > > { struct unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *x0; struct unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > > > { struct unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *x0; } x2; } x0; } x6; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x7; struct PtrVector<drawingV1::StrokeID> { struct vector<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > > > { struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *x0; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > > > { struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *x0; } x2; } x0; } x8; struct { unsigned char x0 : 1; } x9; } *)a0 loadNonInkingStrokes:(BOOL)a1;
- (id)initWithLegacyArchive:(const struct Drawing { void /* function */ **x0; struct PtrVector<legacy_drawing::Command> { struct vector<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> >, std::__1::allocator<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > > > { struct unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > *x0; struct unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > *x1; struct __compressed_pair<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > *, std::__1::allocator<std::__1::unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > > > { struct unique_ptr<legacy_drawing::Command, std::__1::default_delete<legacy_drawing::Command> > *x0; } x2; } x0; } x1; double x2; struct unique_ptr<legacy_drawing::VectorTimestamp, std::__1::default_delete<legacy_drawing::VectorTimestamp> > { struct __compressed_pair<legacy_drawing::VectorTimestamp *, std::__1::default_delete<legacy_drawing::VectorTimestamp> > { struct VectorTimestamp *x0; } x0; } x3; struct unique_ptr<legacy_drawing::Rectangle, std::__1::default_delete<legacy_drawing::Rectangle> > { struct __compressed_pair<legacy_drawing::Rectangle *, std::__1::default_delete<legacy_drawing::Rectangle> > { struct Rectangle *x0; } x0; } x4; unsigned int x5; unsigned int x6; struct { unsigned char x0 : 1; unsigned char x1 : 1; unsigned char x2 : 1; } x7; } *)a0;
- (unsigned int)saveToV1Archive:(struct Drawing { void /* function */ **x0; struct unique_ptr<drawingV1::Rectangle, std::__1::default_delete<drawingV1::Rectangle> > { struct __compressed_pair<drawingV1::Rectangle *, std::__1::default_delete<drawingV1::Rectangle> > { struct Rectangle *x0; } x0; } x1; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > { struct __compressed_pair<drawingV1::StrokeID *, std::__1::default_delete<drawingV1::StrokeID> > { struct StrokeID *x0; } x0; } x2; struct PtrVector<drawingV1::Ink> { struct vector<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *x0; struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > > > { struct unique_ptr<drawingV1::Ink, std::__1::default_delete<drawingV1::Ink> > *x0; } x2; } x0; } x3; struct vector<PB::Data, std::__1::allocator<PB::Data> > { struct Data *x0; struct Data *x1; struct __compressed_pair<PB::Data *, std::__1::allocator<PB::Data> > { struct Data *x0; } x2; } x4; unsigned long long x5; struct PtrVector<drawingV1::Stroke> { struct vector<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > > > { struct unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *x0; struct unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > > > { struct unique_ptr<drawingV1::Stroke, std::__1::default_delete<drawingV1::Stroke> > *x0; } x2; } x0; } x6; struct unique_ptr<PB::Data, std::__1::default_delete<PB::Data> > { struct __compressed_pair<PB::Data *, std::__1::default_delete<PB::Data> > { struct Data *x0; } x0; } x7; struct PtrVector<drawingV1::StrokeID> { struct vector<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> >, std::__1::allocator<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > > > { struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *x0; struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *x1; struct __compressed_pair<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *, std::__1::allocator<std::__1::unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > > > { struct unique_ptr<drawingV1::StrokeID, std::__1::default_delete<drawingV1::StrokeID> > *x0; } x2; } x0; } x8; struct { unsigned char x0 : 1; } x9; } *)a0 withPathData:(BOOL)a1;
- (id)_initWithUnzippedData:(id)a0 error:(id *)a1;
- (id)v1SerializeWithPathData:(BOOL)a0;

@end

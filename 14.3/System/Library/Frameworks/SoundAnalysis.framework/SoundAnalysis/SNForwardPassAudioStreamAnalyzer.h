@class NSString, SNAudioProcessorCache, NSArray, SNUltronResultsLogger, NSMutableArray, AVAudioFormat;

@interface SNForwardPassAudioStreamAnalyzer : NSObject <SNTimeConverting> {
    SNAudioProcessorCache *_processorCache;
    struct list<SoundAnalysis::ProcessingContext, std::__1::allocator<SoundAnalysis::ProcessingContext> > { struct __list_node_base<SoundAnalysis::ProcessingContext, void *> { struct __list_node_base<SoundAnalysis::ProcessingContext, void *> *__prev_; struct __list_node_base<SoundAnalysis::ProcessingContext, void *> *__next_; } __end_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingContext, void *> > > { unsigned long long __value_; } __size_alloc_; } _processingContexts;
    struct ProcessingTree { struct shared_ptr<DSPGraph::Graph> { struct Graph *__ptr_; struct __shared_weak_count *__cntrl_; } mGraph; struct list<SoundAnalysis::ProcessingContext, std::__1::allocator<SoundAnalysis::ProcessingContext> > { struct __list_node_base<SoundAnalysis::ProcessingContext, void *> { struct __list_node_base<SoundAnalysis::ProcessingContext, void *> *__prev_; struct __list_node_base<SoundAnalysis::ProcessingContext, void *> *__next_; } __end_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingContext, void *> > > { unsigned long long __value_; } __size_alloc_; } mProcessingContexts; struct list<SoundAnalysis::FormatMatchingNode, std::__1::allocator<SoundAnalysis::FormatMatchingNode> > { struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> { struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> *__prev_; struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> *__next_; } __end_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::FormatMatchingNode, void *> > > { unsigned long long __value_; } __size_alloc_; } mFormatMatchingNodes; struct list<SoundAnalysis::SharedProcessingNode, std::__1::allocator<SoundAnalysis::SharedProcessingNode> > { struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> { struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> *__prev_; struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> *__next_; } __end_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::SharedProcessingNode, void *> > > { unsigned long long __value_; } __size_alloc_; } mSharedProcessingNodes; struct list<SoundAnalysis::AnalyzerNode, std::__1::allocator<SoundAnalysis::AnalyzerNode> > { struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> { struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> *__prev_; struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> *__next_; } __end_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::AnalyzerNode, void *> > > { unsigned long long __value_; } __size_alloc_; } mAnalyzerNodes; struct RootNode { void /* function */ **_vptr$ProcessingNode; struct ProcessingNode *mUpstreamNode; struct list<SoundAnalysis::ProcessingNode *, std::__1::allocator<SoundAnalysis::ProcessingNode *> > { struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> { struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> *__prev_; struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> *__next_; } __end_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingNode *, void *> > > { unsigned long long __value_; } __size_alloc_; } mDownstreamNodes; struct Box *mProcessingBox; struct FormatAndBlockSize { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } mFormat; int mBlockSize; } mUpstreamFormat; struct FormatAndBlockSize { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } mFormat; int mBlockSize; } mDownstreamFormat; } mRootNode; int mMaxFramesPerSlice; struct function<void (std::__1::shared_ptr<DSPGraph::Graph>, unsigned long)> { struct __value_func<void (std::__1::shared_ptr<DSPGraph::Graph>, unsigned long)> { struct type { unsigned char __lx[24]; } __buf_; struct __base<void (std::__1::shared_ptr<DSPGraph::Graph>, unsigned long)> *__f_; } __f_; } mWillInitializeCallback; long long mCurrentInputSampleTime; } _processingTree;
    AVAudioFormat *_currentFormat;
    NSArray *_requests;
    NSMutableArray *_analyzerInfos;
    SNUltronResultsLogger *_resultsLogger;
    BOOL _shouldRebuildProcessingTree;
}

@property (readonly, nonatomic) double clientSampleRate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)stopRecording;
- (id)detailedDescription;
- (void)removeRequest:(id)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithFormat:(id)a0;
- (void)removeAllRequests;
- (id).cxx_construct;
- (BOOL)addRequest:(id)a0 withObserver:(id)a1 error:(id *)a2;
- (void)analyzeAudioBuffer:(id)a0 atAudioFramePosition:(long long)a1;
- (void)sendErrorToAllRequests:(id)a0;
- (void)completeAnalysis;
- (long long)clientSampleTimeFromSampleTime:(long long)a0 fromBox:(struct Box { void /* function */ **x0; struct Graph *x1; struct IsoGroup *x2; struct Subset *x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x4; long long x5; struct vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort *x0; struct InputPort *x1; struct __compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> > { struct InputPort *x0; } x2; } x6; struct vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort *x0; struct OutputPort *x1; struct __compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> > { struct OutputPort *x0; } x2; } x7; struct unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> > { struct __hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > > { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> { struct __hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> > { float x0; } x3; } x0; } x8; struct vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> > { struct ParameterTap *x0; struct ParameterTap *x1; struct __compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> > { struct ParameterTap *x0; } x2; } x9; struct vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> > { struct PropertyTap *x0; struct PropertyTap *x1; struct __compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> > { struct PropertyTap *x0; } x2; } x10; struct vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > > { struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x0; struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > > { struct unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *x0; } x2; } x11; struct vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > > { struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x0; struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > > { struct unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *x0; } x2; } x12; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x13; struct vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > > { struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x0; struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x1; struct __compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > > { struct unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *x0; } x2; } x14; struct Set<DSPGraph::Analyzer *> { struct Member *x0; unsigned long long x1; } x15; struct map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> > { unsigned long long x0; } x2; } x0; } x16; struct function<void (double)> { struct __value_func<void (double)> { struct type { unsigned char x0[24]; } x0; struct __base<void (double)> *x1; } x0; } x17; struct function<void (DSPGraph::Box *, int)> { struct __value_func<void (DSPGraph::Box *, int)> { struct type { unsigned char x0[24]; } x0; struct __base<void (DSPGraph::Box *, int)> *x1; } x0; } x18; struct function<void (DSPGraph::Box *, int)> { struct __value_func<void (DSPGraph::Box *, int)> { struct type { unsigned char x0[24]; } x0; struct __base<void (DSPGraph::Box *, int)> *x1; } x0; } x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; long long x24; } *)a1;
- (void)updateProcessingTreeFormat:(id)a0;
- (BOOL)addRequest:(id)a0 completionHandler:(id /* block */)a1 resultsHandler:(id /* block */)a2 error:(id *)a3;
- (id /* block */)completionHandlerWithClientCompletionHandler:(id /* block */)a0 forRequest:(id)a1;
- (id /* block */)resultsHandlerWithClientResultsHandler:(id /* block */)a0 forRequest:(id)a1;
- (id)createAnalyzerInfoForRequest:(id)a0 completionHandler:(id /* block */)a1 resultsHandler:(id /* block */)a2 error:(id *)a3;
- (BOOL)configureAnalyzer:(id)a0 withFormat:(id)a1;
- (void)removeAnalyzerInfoForRequest:(id)a0;
- (BOOL)configureAnalysisTreeWithFormat:(id)a0;
- (BOOL)updateTreeProcessingContexts;
- (void)handleAnalyzeAudioBufferError;
- (id)analyzerInfoForRequest:(id)a0;
- (void)analyzeAudioBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)a0 withAudioFrameCount:(unsigned int)a1 atAudioFramePosition:(long long)a2;
- (void)writeDSPGraphDotFilesToDirectory:(id)a0;
- (BOOL)startRecordingToDirectory:(id)a0 requestDescription:(id)a1 error:(id *)a2;

@end

@class NSArray, NSMutableArray;

@interface GKObstacleGraph : GKGraph {
    NSMutableArray *_sourceObstacles;
    struct GKCObstacleGraph { void /* function */ **x0; struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode **x0; struct GKCGraphNode **x1; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode **x0; } x2; } x1; id x2; struct vector<GKCPolygonObstacle *, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; struct GKCPolygonObstacle **x1; struct __compressed_pair<GKCPolygonObstacle **, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; } x2; } x3; struct vector<GKCPolygonObstacle *, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; struct GKCPolygonObstacle **x1; struct __compressed_pair<GKCPolygonObstacle **, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; } x2; } x4; struct vector<GKPolygonObstacle *, std::__1::allocator<GKPolygonObstacle *> > { id *x0; id *x1; struct __compressed_pair<GKPolygonObstacle *__strong *, std::__1::allocator<GKPolygonObstacle *> > { id *x0; } x2; } x5; float x6; struct vector<GKConnection, std::__1::allocator<GKConnection> > { struct GKConnection *x0; struct GKConnection *x1; struct __compressed_pair<GKConnection *, std::__1::allocator<GKConnection> > { struct GKConnection *x0; } x2; } x7; struct map<GKCPolygonObstacle *, GKCPolygonObstacle *, std::__1::less<GKCPolygonObstacle *>, std::__1::allocator<std::__1::pair<GKCPolygonObstacle *const, GKCPolygonObstacle *> > > { struct __tree<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true>, std::__1::allocator<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true> > { unsigned long long x0; } x2; } x0; } x8; struct map<GKCPolygonObstacle *, GKCPolygonObstacle *, std::__1::less<GKCPolygonObstacle *>, std::__1::allocator<std::__1::pair<GKCPolygonObstacle *const, GKCPolygonObstacle *> > > { struct __tree<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true>, std::__1::allocator<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true> > { unsigned long long x0; } x2; } x0; } x9; id x10; } *_cObstacleGraph;
    Class _nodeClass;
}

@property (readonly, nonatomic) NSArray *obstacles;
@property (readonly, nonatomic) float bufferRadius;

+ (BOOL)supportsSecureCoding;
+ (id)graphWithObstacles:(id)a0 bufferRadius:(float)a1;
+ (id)graphWithObstacles:(id)a0 bufferRadius:(float)a1 nodeClass:(Class)a2;

- (void).cxx_destruct;
- (Class)nodeClass;
- (id)initWithCoder:(id)a0;
- (void)encodeWithCoder:(id)a0;
- (struct GKCGraph { void /* function */ **x0; struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode **x0; struct GKCGraphNode **x1; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode **x0; } x2; } x1; id x2; } *)makeCGraph;
- (void)addObstacles:(id)a0;
- (void)removeObstacles:(id)a0;
- (void)connectNodeUsingObstacles:(id)a0;
- (Class)classForGenericArgumentAtIndex:(unsigned long long)a0;
- (id)mutObstacles;
- (id)initWithObstacles:(id)a0 bufferRadius:(float)a1;
- (id)initWithObstacles:(id)a0 bufferRadius:(float)a1 nodeClass:(Class)a2;
- (struct GKCObstacleGraph { void /* function */ **x0; struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode **x0; struct GKCGraphNode **x1; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode **x0; } x2; } x1; id x2; struct vector<GKCPolygonObstacle *, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; struct GKCPolygonObstacle **x1; struct __compressed_pair<GKCPolygonObstacle **, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; } x2; } x3; struct vector<GKCPolygonObstacle *, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; struct GKCPolygonObstacle **x1; struct __compressed_pair<GKCPolygonObstacle **, std::__1::allocator<GKCPolygonObstacle *> > { struct GKCPolygonObstacle **x0; } x2; } x4; struct vector<GKPolygonObstacle *, std::__1::allocator<GKPolygonObstacle *> > { id *x0; id *x1; struct __compressed_pair<GKPolygonObstacle *__strong *, std::__1::allocator<GKPolygonObstacle *> > { id *x0; } x2; } x5; float x6; struct vector<GKConnection, std::__1::allocator<GKConnection> > { struct GKConnection *x0; struct GKConnection *x1; struct __compressed_pair<GKConnection *, std::__1::allocator<GKConnection> > { struct GKConnection *x0; } x2; } x7; struct map<GKCPolygonObstacle *, GKCPolygonObstacle *, std::__1::less<GKCPolygonObstacle *>, std::__1::allocator<std::__1::pair<GKCPolygonObstacle *const, GKCPolygonObstacle *> > > { struct __tree<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true>, std::__1::allocator<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true> > { unsigned long long x0; } x2; } x0; } x8; struct map<GKCPolygonObstacle *, GKCPolygonObstacle *, std::__1::less<GKCPolygonObstacle *>, std::__1::allocator<std::__1::pair<GKCPolygonObstacle *const, GKCPolygonObstacle *> > > { struct __tree<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true>, std::__1::allocator<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<GKCPolygonObstacle *, std::__1::__value_type<GKCPolygonObstacle *, GKCPolygonObstacle *>, std::__1::less<GKCPolygonObstacle *>, true> > { unsigned long long x0; } x2; } x0; } x9; id x10; } *)cObstacleGraph;
- (void)connectNodeUsingObstacles:(id)a0 ignoringObstacles:(id)a1;
- (void)connectNodeUsingObstacles:(id)a0 ignoringBufferRadiusOfObstacles:(id)a1;
- (void)removeAllObstacles;
- (id)nodesForObstacle:(id)a0;
- (void)lockConnectionFromNode:(id)a0 toNode:(id)a1;
- (void)unlockConnectionFromNode:(id)a0 toNode:(id)a1;
- (BOOL)isConnectionLockedFromNode:(id)a0 toNode:(id)a1;

@end

@class SCNNode, SCNView, NSString, SCNCameraController, NSDictionary, UIGestureRecognizer;
@protocol SCNCameraNavigationControllerDelegate;

@interface SCNCameraNavigationController : NSObject <SCNEventHandler, SCNCameraControllerDelegate> {
    UIGestureRecognizer *_pressGesture;
    UIGestureRecognizer *_tapGesture;
    UIGestureRecognizer *_pinchGesture;
    UIGestureRecognizer *_panGesture;
    UIGestureRecognizer *_rotateGesture;
    BOOL _isDraggingWithOneFinger;
    long long _lastGestureFingerCount;
    long long _browseMode;
    float _cameraOriginalFieldOfView;
    float _fieldOfViewZoomFactor;
    float _originalOrthoScale;
    float _orthographicZoomFactor;
    BOOL _enabled;
    BOOL _translationAllowed;
    BOOL _didEverFocusNode;
    BOOL _isSceneBoundingSphereComputed;
    BOOL _cameraTargetComputed;
    BOOL _pinchShouldMoveCamera;
    BOOL _shouldUpdateTarget;
    BOOL _shouldIgnoreMomentumEvents;
    BOOL _isOrbiting;
    BOOL _recordingPointOfViewEvents;
    BOOL _mouseDown;
    union { void /* unknown type, empty encoding */ vector; void /* unknown type, empty encoding */ center; struct { float x; float y; float z; float radius; } ; } _sceneBoundingSphere;
    void /* unknown type, empty encoding */ _translationOrigin;
    float _initialZoom;
    void /* unknown type, empty encoding */ _initialPointOfViewWorldPosition;
    double _lastKeyInputTime;
    struct CGPoint { double x; double y; } _initialInputLocation;
    struct CGPoint { double x; double y; } _lastInputLocation;
    struct CGPoint { double x; double y; } _accumulatedDrag;
    double _lastRotationAngle;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _drawAtTimeLock;
    struct { BOOL stickyMoveEnabled; void /* unknown type, empty encoding */ direction; unsigned long long pickedAxis; unsigned long long userStickyAxis; } _stickyAxis;
    struct { BOOL automaticLocationUpToDate; BOOL hasAutomatic; } _target;
    struct { struct CGPoint { double x; double y; } lastDragLocation; struct CGPoint { double x; double y; } velocity; double lastDragTime; } _inertia;
    struct { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; NSDictionary *keyCodeConfiguration; struct set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short> > { struct __tree<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned short, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::less<unsigned short> > { unsigned long long __value_; } __pair3_; } __tree_; } keyDown; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *__value_; } __end_cap_; } forward; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *__value_; } __end_cap_; } backward; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *__value_; } __end_cap_; } left; struct vector<unsigned short, std::__1::allocator<unsigned short> > { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > { unsigned short *__value_; } __end_cap_; } right; } _keyboard;
    struct { BOOL hasShift; BOOL hasOption; } _scrollWheelModifiers;
}

@property (readonly, nonatomic) SCNCameraController *cameraController;
@property (nonatomic) id<SCNCameraNavigationControllerDelegate> delegate;
@property (nonatomic) unsigned long long stickyAxis;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } cameraTarget;
@property (nonatomic) BOOL gimbalLockMode;
@property (nonatomic) BOOL enableInertia;
@property (nonatomic) double friction;
@property (nonatomic) BOOL automaticCameraTarget;
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL enableFreeCamera;
@property (readonly, nonatomic) SCNNode *freeCamera;
@property (nonatomic) SCNView *view;
@property (nonatomic) BOOL autoSwitchToFreeCamera;
@property (nonatomic) BOOL allowsTranslation;
@property (nonatomic) double flyModeVelocity;
@property (nonatomic) double panSensitivity;
@property (nonatomic) double truckSensitivity;
@property (nonatomic) double rotationSensitivity;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)initWithView:(id)a0;
- (void).cxx_destruct;
- (double)zoomFactor;
- (void)_handleDoubleTap:(id)a0;
- (void)dealloc;
- (id)pointOfView;
- (void)setZoomFactor:(double)a0;
- (void)_handlePinch:(id)a0;
- (id)gestureRecognizers;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void)_handlePan:(id)a0;
- (id).cxx_construct;
- (void)zoomBy:(float)a0;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)_handlePress:(id)a0;
- (float)_targetDistance;
- (void)cameraInertiaWillStartForController:(id)a0;
- (void)cameraInertiaDidEndForController:(id)a0;
- (void /* unknown type, empty encoding */)worldFront;
- (void)sceneWillChange;
- (void)sceneDidChange;
- (void)viewWillDrawAtTime:(double)a0;
- (void)viewDidDrawAtTime:(double)a0;
- (void)cameraWillChange;
- (void)cameraDidChange;
- (BOOL)wantsRedraw;
- (void)activateFreeCamera;
- (void)invalidateCameraTarget;
- (void)_switchToFreeViewCamera;
- (void)_resetFreeViewCamera;
- (void)_prepareFreeViewCamera;
- (BOOL)_freeCameraActivated;
- (void)_installFreeViewCameraIfNeeded;
- (struct SCNVector3 { float x0; float x1; float x2; })cameraAutomaticTargetPoint;
- (void)zoomBy:(float)a0 animate:(BOOL)a1;
- (float)_translationCoef;
- (void)focusNode:(id)a0;
- (void)_handleRotation:(id)a0;
- (void)beginGesture:(id)a0;
- (void)pinchWithGestureRecognizer:(id)a0;
- (void)panWithGestureRecognizer:(id)a0;
- (void)rotateWithGestureRecognizer:(id)a0;
- (void)_startBrowsingIfNeeded:(struct CGPoint { double x0; double x1; })a0;
- (struct SCNVector3 { float x0; float x1; float x2; })gimbalLockVector;
- (void)setGimbalLockVector:(struct SCNVector3 { float x0; float x1; float x2; })a0;
- (void)rotateOf:(double)a0;
- (void)translateByX:(float)a0 Y:(float)a1 Z:(float)a2;
- (void)_computeAutomaticTargetPointIfNeeded;
- (void)focusNodes:(id)a0;
- (BOOL)_pointOfViewUsesOrthographicProjection;
- (float)_pointOfViewOrthographicScale;
- (float)_orthographicScaleForZoomFactor:(float)a0;
- (union { struct { float x0; float x1; float x2; float x3; } x0; })_sceneBoundingSphere;
- (float)_orthographicZoomFactorForProposedZoomFactor:(float)a0;
- (void)_setPointOfViewOrthographicScale:(float)a0;
- (float)_cappedTranslationDelta:(float)a0;
- (void)__didChangePointOfView;
- (void /* unknown type, empty encoding */)_defaultTargetForScene:(id)a0;
- (void)_stopInertia;
- (void)_setupUpVector;
- (void)_willBeginInteraction;
- (void)_computeTranslationOrigin3DFromPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)__willChangePointOfView;
- (double)_modeSensitivity;
- (void)_translateToViewPoint:(struct CGPoint { double x0; double x1; })a0;
- (unsigned long long)_effectiveStickyAxis;
- (BOOL)_computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode { } *)a0 sphere:(struct C3DSphere { } *)a1;
- (void)_computeStickyAxisIfNeeded:(struct CGPoint { double x0; double x1; })a0;

@end

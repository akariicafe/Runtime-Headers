@class NSString, NSDictionary, AVAudioFormat;
@protocol AVVoiceControllerPlaybackDelegate, AVVoiceControllerRecordDelegate, Endpointer;

@interface AVVoiceController : NSObject {
    void *_impl;
}

@property (getter=isBargeInDetectEnabled) BOOL bargeInDetectEnabled;
@property (getter=isStopOnBargeInEnabled) BOOL stopOnBargeInEnabled;
@property (readonly, copy) NSString *recordRoute;
@property (readonly, copy) NSString *playbackRoute;
@property (readonly) unsigned long long lastRecordStartTime;
@property (readonly) NSDictionary *voiceTriggerInfo;
@property (getter=isSynchronousCallbackEnabled) BOOL synchronousCallbackEnabled;
@property (readonly) AVAudioFormat *pcmRecordBufferFormat;
@property (setter=setDuckOthersOption:) BOOL duckOthersOption;
@property (readonly) unsigned long long numberOfChannels;
@property (readonly) NSDictionary *recordSettings;
@property (readonly, getter=isRecording) BOOL recording;
@property (retain) id<Endpointer> endpointerDelegate;
@property int recordEndpointMode;
@property double recordStartWaitTime;
@property double recordInterspeechWaitTime;
@property double recordEndWaitTime;
@property id<AVVoiceControllerRecordDelegate> recordDelegate;
@property (getter=isMeteringEnabled) BOOL meteringEnabled;
@property (readonly) NSDictionary *playbackSettings;
@property (readonly, getter=isPlaying) BOOL playing;
@property id<AVVoiceControllerPlaybackDelegate> playbackDelegate;
@property float playbackVolume;
@property (getter=isStopOnEndpointEnabled) BOOL stopOnEndpointEnabled;
@property float alertVolume;
@property (readonly) unsigned long long alertStartTime;
@property (readonly) NSDictionary *metrics;

- (void)stopRecording;
- (BOOL)startRecording;
- (id)initWithError:(id *)a0;
- (BOOL)playAlertSoundForType:(int)a0;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (struct ControllerImpl { void /* function */ **x0; id x1; id x2; id x3; BOOL x4; struct GenericRunLoopThread *x5; BOOL x6; float x7; id x8; struct __CFDictionary *x9; unsigned int x10; id x11; id x12; struct CAStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x13; double x14; struct OpaqueAudioQueue *x15; int x16; id x17; unsigned int x18; struct AudioQueueBuffer **x19; int x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; BOOL x26; float x27; unsigned int x28; long long x29; struct CAStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x30; long long x31; struct OpaqueAudioQueue *x32; struct map<AVVoiceAlertType, NSURL *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, NSURL *> > > { struct __tree<std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, NSURL *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, NSURL *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true> > { unsigned long long x0; } x2; } x0; } x33; struct map<AVVoiceAlertType, AudioQueueBuffer *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, AudioQueueBuffer *> > > { struct __tree<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::less<AVVoiceAlertType>, true> > { unsigned long long x0; } x2; } x0; } x34; int x35; int x36; int x37; long long x38; long long x39; long long x40; int x41; int x42; float x43; double x44; unsigned long long x45; unsigned long long x46; float x47; float x48; BOOL x49; BOOL x50; struct OpaqueAudioQueue *x51; id x52; id x53; struct OpaqueAudioFileID *x54; unsigned int x55; struct AudioFormatListItem *x56; unsigned int x57; unsigned long long x58; char *x59; struct AudioFilePacketTableInfo { long long x0; int x1; int x2; } x60; long long x61; long long x62; BOOL x63; int x64; int x65; id x66; BOOL x67; BOOL x68; BOOL x69; BOOL x70; int x71; double x72; double x73; double x74; BOOL x75; BOOL x76; BOOL x77; id x78; unsigned char x79; int x80; BOOL x81; BOOL x82; BOOL x83; unsigned int x84; BOOL x85; id x86; unsigned long long x87; unsigned long long x88; BOOL x89; BOOL x90; int x91; BOOL x92; long long x93; id x94; struct MyMutex *x95[4]; int x96; int x97; BOOL x98; long long x99; unsigned long long x100; unsigned long long x101; unsigned long long x102; id x103; id x104; struct shared_ptr<AVVCRecordingEngineMap> { struct AVVCRecordingEngineMap *x0; struct __shared_weak_count *x1; } x105; BOOL x106; id /* block */ x107; id /* block */ x108; long long x109; id x110; } *)impl;
- (oneway void)release;
- (void)configureAlertBehavior:(id)a0;
- (void)dealloc;
- (BOOL)startPlaying;
- (BOOL)willAcceptContext:(id)a0;
- (BOOL)IsDeviceAvailableInLocalRoute:(id)a0 error:(id *)a1;
- (void)resetEndpointer;
- (int)doStartRecordingAtTime_v1:(unsigned long long)a0 behavior:(id)a1;
- (void)setupAlertBehavior_v1:(id)a0;
- (BOOL)startRecordingAtTime:(unsigned long long)a0 error:(id *)a1;
- (BOOL)startRecordingWithSettings:(id)a0 error:(id *)a1;
- (BOOL)prepareListenWithSettings:(id)a0 error:(id *)a1;
- (void)stopPlaying;
- (BOOL)startListeningWithSettings:(id)a0 error:(id *)a1;
- (BOOL)setRecordMode:(long long)a0 error:(id *)a1;
- (BOOL)releaseAudioSessionForListening:(id *)a0;
- (BOOL)releaseAudioSessionForListening:(unsigned long long)a0 error:(id *)a1;
- (BOOL)preparePlaybackWithSettings:(id)a0 error:(id *)a1;
- (id)recordDelegate;
- (BOOL)preparePlaybackFromURL:(id)a0 error:(id *)a1;
- (double)getRecordBufferDuration;
- (id)playbackDelegate;
- (void)setPlaybackDelegate:(id)a0;
- (double)getPlaybackBufferDuration;
- (BOOL)setPlaybackBufferDuration:(double)a0;
- (unsigned long long)getAlertStartTime;
- (id)currentRecordDeviceInfo;
- (unsigned long long)setContext:(id)a0 error:(id *)a1;
- (void)prepareRecordForStream:(id)a0 completion:(id /* block */)a1;
- (BOOL)updateMeterForStream:(unsigned long long)a0;
- (BOOL)prepareRecordForStream:(id)a0 error:(id *)a1;
- (void)startRecordWithSettings:(id)a0 completion:(id /* block */)a1 alertCompletion:(id /* block */)a2 audioCallback:(id /* block */)a3;
- (BOOL)startRecordForStream:(id)a0 error:(id *)a1;
- (BOOL)configureAlertBehaviorForStream:(id)a0 error:(id *)a1;
- (BOOL)setCurrentContext:(id)a0 error:(id *)a1;
- (void)stopRecordOnStream:(unsigned long long)a0 completion:(id /* block */)a1;
- (BOOL)stopRecordForStream:(unsigned long long)a0 error:(id *)a1;
- (long long)getCurrentStreamState:(unsigned long long)a0;
- (id)getRecordDeviceInfoForStream:(unsigned long long)a0;
- (BOOL)activateAudioSessionForStream:(unsigned long long)a0 isPrewarm:(BOOL)a1 error:(id *)a2;
- (long long)getCurrentSessionState;
- (BOOL)activateAudioSessionForStream:(unsigned long long)a0 isPrewarm:(BOOL)a1 recordMode:(BOOL)a2 error:(id *)a3;
- (void)deactivateAudioSessionWithOptions:(unsigned long long)a0;
- (BOOL)setContextForStream:(id)a0 forStream:(unsigned long long)a1 error:(id *)a2;
- (void)playAlert:(int)a0 withOverride:(long long)a1 completion:(id /* block */)a2;
- (BOOL)playAlertSoundForType:(int)a0 overrideMode:(long long)a1;
- (double)getRecordBufferDurationForStream:(unsigned long long)a0;
- (id)getRecordSettingsForStream:(unsigned long long)a0;
- (BOOL)isMeteringEnabledForStream:(unsigned long long)a0;
- (float)getPeakPowerForStream:(unsigned long long)a0 forChannel:(unsigned long long)a1;
- (float)getAveragePowerForStream:(unsigned long long)a0 forChannel:(unsigned long long)a1;
- (void)setRecordStatusChangeBlock:(id /* block */)a0;
- (BOOL)enableSmartRoutingConsiderationForStream:(unsigned long long)a0 enable:(BOOL)a1 error:(id *)a2;
- (BOOL)setRecordModeForStream:(unsigned long long)a0 recordMode:(long long)a1 error:(id *)a2;
- (long long)getRecordModeForStream:(unsigned long long)a0;
- (void)setSessionNotifications_v1v2;
- (void)removeSessionNotifications;
- (void)hardwareConfigChanged;
- (void)handlePluginDidPublishDevice:(id)a0 withDevice:(id)a1;
- (void)handlePluginDidUnpublishDevice:(id)a0 withDevice:(id)a1;
- (void)beganRecording_v1v2:(id)a0;
- (void)encodeError;
- (void)setRecordDelegate:(id)a0;
- (id)initWithContext:(id)a0 error:(id *)a1;
- (BOOL)setRecordBufferDuration:(double)a0;
- (BOOL)prepareRecordWithSettings:(id)a0 error:(id *)a1;
- (void)releaseAudioSession:(unsigned long long)a0;
- (void)finishedRecording_v1v2:(id)a0;
- (void)startpointDetected;
- (void)interspeechPointDetected;
- (void)endpointDetected;
- (void)beganPlaying;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer { unsigned int x0; void *x1; unsigned int x2; void *x3; unsigned int x4; struct AudioStreamPacketDescription *x5; unsigned int x6; struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x7; BOOL x8; unsigned char x9; unsigned char x10; BOOL x11; } *)a0;
- (void)finishedPlaying_v1v2;
- (void)alertPlaybackFinishedOfType_v1v2:(int)a0;
- (void)releaseAudioSession;
- (void)notifyStreamInvalidated_v1v2:(unsigned long long)a0;
- (void)beginRecordInterruption_v1v2;
- (void)beginRecordInterruptionWithContext_v1v2:(id)a0;
- (void)endRecordInterruption_v1v2;
- (void)beginPlaybackInterruption_v1v2;
- (void)endPlaybackInterruption_v1v2;
- (void)beginAudioSessionActivate_v1v2:(BOOL)a0;
- (void)endAudioSessionActivate_v1v2:(BOOL)a0;
- (void)sendRemoteConnectionMessage:(id)a0;
- (void)handleInterruption_v1v2:(id)a0;
- (void)handleRouteChange_v1v2:(id)a0;
- (void)handleMediaServerDeath_v1v2:(id)a0;
- (void)handleMediaServerReset_v1v2:(id)a0;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (id)retain;
- (void)finalize;
- (void)updateMeters;
- (BOOL)startListening:(id *)a0;
- (BOOL)startRecording:(id *)a0;
- (void)prewarmAudioSession;
- (BOOL)setAlertSoundFromURL:(id)a0 forType:(int)a1;
- (void)enableMiniDucking:(BOOL)a0;
- (void)decodeError;

@end

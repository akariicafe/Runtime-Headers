@class SKDisplayLink, NSData, NSMutableDictionary, SKScene, CAEAGLLayer, NSObject, CAMetalLayer, NSMapTable, SKTransition;
@protocol SKViewDelegate, OS_dispatch_queue, OS_dispatch_semaphore;

@interface SKView : UIView {
    struct SKCStats { void /* function */ **_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _currentStats;
    struct SKCStats { void /* function */ **_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _nextStats;
    struct SKCStats { void /* function */ **_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _frameStats;
    struct SKCRenderer { id x0; float x1; struct shared_ptr<SKCRenderPass> { struct SKCRenderPass *x0; struct __shared_weak_count *x1; } x2; unsigned int x3; struct shared_ptr<jet_command_buffer> { struct jet_command_buffer *x0; struct __shared_weak_count *x1; } x4; struct list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > > { struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> { struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> *x0; struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > > { unsigned long long x0; } x1; } x5; struct { unsigned int x0; unsigned int x1; struct { void /* unknown type, empty encoding */ x0[4]; } ***x2; float x3; struct SKCRenderer *x4; float x5; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x6; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x7; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x8; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x9; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x10; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x11; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x12; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x13; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x15; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x16; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x17; struct jet_buffer *x18; struct jet_buffer *x19; struct jet_buffer *x20; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x21; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x22; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x23; struct shared_ptr<jet_buffer> { struct jet_buffer *x0; struct __shared_weak_count *x1; } x24; struct shared_ptr<jet_buffer> { struct jet_buffer *x0; struct __shared_weak_count *x1; } x25; struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; } x26; struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; } x27; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x28; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x29; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x30; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x31; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x32; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x33; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x34; BOOL x35; unsigned int x36; struct SKCRenderBatch { BOOL x0; int x1; unsigned int x2; unsigned int x3; id x4; struct jet_program *x5; struct jet_texture *x6; struct jet_texture *x7; struct jet_sampler *x8; struct jet_sampler *x9; unsigned int x10; unsigned int x11; float x12; } x37; struct SKCStats *x38; struct vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > > { struct shared_ptr<jet_buffer> *x0; struct shared_ptr<jet_buffer> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > > { struct shared_ptr<jet_buffer> *x0; } x2; } x39; struct vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > > { struct shared_ptr<jet_buffer_pool> *x0; struct shared_ptr<jet_buffer_pool> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > > { struct shared_ptr<jet_buffer_pool> *x0; } x2; } x40; } x6; struct SKCStats *x7; struct SKCStats { void /* function */ **x0; double x1; double x2; double x3; double x4; int x5; struct { double x0; double x1; } x6; struct { double x0; double x1; } x7; struct { double x0; double x1; int x2; } x8; struct { double x0; double x1; int x2; } x9; struct { double x0; double x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x10; } x8; id x9; id x10; BOOL x11; BOOL x12; BOOL x13; struct shared_ptr<jet_context> { struct jet_context *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<jet_fence> { struct jet_fence *x0; struct __shared_weak_count *x1; } x15; struct map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > > { struct __tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> > { unsigned long long x0; } x2; } x0; } x16; struct map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > > { struct __tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x17; struct vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct SKCRenderSortInfo **x0; struct SKCRenderSortInfo **x1; struct __compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> > { struct SKCRenderSortInfo **x0; } x2; } x18; struct map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > > { struct __tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> > { unsigned long long x0; } x2; } x0; } x19; struct SKCSpriteNode *x20; struct SKCLabelNode *x21; struct { struct SKCRenderPass *x0; struct SKCRenderSortGroup *x1; unsigned int x2; struct list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct __list_node_base<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; struct __list_node_base<SKCRenderSortInfo *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > > { unsigned long long x0; } x1; } x3; struct list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct __list_node_base<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; struct __list_node_base<SKCRenderSortInfo *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > > { unsigned long long x0; } x1; } x4; struct __list_iterator<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; } x5; } x22; struct vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > > { struct shared_ptr<jet_framebuffer> *x0; struct shared_ptr<jet_framebuffer> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > > { struct shared_ptr<jet_framebuffer> *x0; } x2; } x23; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x24; id x25; } *_renderer;
    void /* unknown type, empty encoding */ _viewScale;
    void /* unknown type, empty encoding */ _viewTranslation;
    struct shared_ptr<jet_framebuffer> { struct jet_framebuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _framebuffer;
    struct shared_ptr<jet_texture> { struct jet_texture *__ptr_; struct __shared_weak_count *__cntrl_; } _frameBufferColorTexture;
    struct shared_ptr<jet_texture> { struct jet_texture *__ptr_; struct __shared_weak_count *__cntrl_; } _frameBufferDepthStencilTexture;
    unsigned int _colorRenderBuffer;
    unsigned int _depthStencilRenderBuffer;
    struct shared_ptr<jet_fence> { struct jet_fence *__ptr_; struct __shared_weak_count *__cntrl_; } _renderFence;
    CAMetalLayer *_metalLayer;
    CAEAGLLayer *_eaglLayer;
    BOOL _needsInitialUpdate;
    BOOL _didRunOnce;
    BOOL _viewFramebufferIsValid;
    void /* unknown type, empty encoding */ _viewFramebufferPixelSize;
    BOOL _isBackgrounded;
    BOOL _allowsTransparency;
    BOOL _priorResignActivePausedState;
    unsigned long long _frameInterval;
    unsigned long long _preferredFramesPerSecond;
    SKDisplayLink *_displayLink;
    NSObject<OS_dispatch_queue> *_updateQueue;
    double _timePreviousUpdate;
    BOOL _prefersLowPowerGPU;
    BOOL _usesAsyncUpdateQueue;
    BOOL _hasRenderedOnce;
    BOOL _hasRenderedForCurrentUpdate;
    BOOL _disableInput;
    BOOL _mouseIsDown;
    BOOL _rightMouseIsDown;
    SKTransition *_transition;
    SKScene *_nextScene;
    SKScene *_scene;
    BOOL _paused;
    NSData *_spriteArrayHint;
    NSMutableDictionary *_viewRenderOptions;
    NSMapTable *_touchMap;
    float _prevBackingScaleFactor;
    id /* block */ _dynamicRenderBlock;
    NSObject<OS_dispatch_queue> *_renderQueue;
    NSObject<OS_dispatch_semaphore> *_renderSemaphore;
    int _queuedFrameCount;
    double _prevVsyncRenderTime;
    double _prevRenderTime;
}

@property (readonly, nonatomic) struct CGSize { double width; double height; } pixelSize;
@property struct SKCRenderer { id x0; float x1; struct shared_ptr<SKCRenderPass> { struct SKCRenderPass *x0; struct __shared_weak_count *x1; } x2; unsigned int x3; struct shared_ptr<jet_command_buffer> { struct jet_command_buffer *x0; struct __shared_weak_count *x1; } x4; struct list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > > { struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> { struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> *x0; struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > > { unsigned long long x0; } x1; } x5; struct { unsigned int x0; unsigned int x1; struct { void /* unknown type, empty encoding */ x0[4]; } ***x2; float x3; struct SKCRenderer *x4; float x5; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x6; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x7; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x8; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x9; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x10; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x11; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x12; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x13; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x15; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x16; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x17; struct jet_buffer *x18; struct jet_buffer *x19; struct jet_buffer *x20; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x21; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x22; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x23; struct shared_ptr<jet_buffer> { struct jet_buffer *x0; struct __shared_weak_count *x1; } x24; struct shared_ptr<jet_buffer> { struct jet_buffer *x0; struct __shared_weak_count *x1; } x25; struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; } x26; struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; } x27; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x28; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x29; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x30; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x31; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x32; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x33; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x34; BOOL x35; unsigned int x36; struct SKCRenderBatch { BOOL x0; int x1; unsigned int x2; unsigned int x3; id x4; struct jet_program *x5; struct jet_texture *x6; struct jet_texture *x7; struct jet_sampler *x8; struct jet_sampler *x9; unsigned int x10; unsigned int x11; float x12; } x37; struct SKCStats *x38; struct vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > > { struct shared_ptr<jet_buffer> *x0; struct shared_ptr<jet_buffer> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > > { struct shared_ptr<jet_buffer> *x0; } x2; } x39; struct vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > > { struct shared_ptr<jet_buffer_pool> *x0; struct shared_ptr<jet_buffer_pool> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > > { struct shared_ptr<jet_buffer_pool> *x0; } x2; } x40; } x6; struct SKCStats *x7; struct SKCStats { void /* function */ **x0; double x1; double x2; double x3; double x4; int x5; struct { double x0; double x1; } x6; struct { double x0; double x1; } x7; struct { double x0; double x1; int x2; } x8; struct { double x0; double x1; int x2; } x9; struct { double x0; double x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x10; } x8; id x9; id x10; BOOL x11; BOOL x12; BOOL x13; struct shared_ptr<jet_context> { struct jet_context *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<jet_fence> { struct jet_fence *x0; struct __shared_weak_count *x1; } x15; struct map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > > { struct __tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> > { unsigned long long x0; } x2; } x0; } x16; struct map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > > { struct __tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x17; struct vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct SKCRenderSortInfo **x0; struct SKCRenderSortInfo **x1; struct __compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> > { struct SKCRenderSortInfo **x0; } x2; } x18; struct map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > > { struct __tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> > { unsigned long long x0; } x2; } x0; } x19; struct SKCSpriteNode *x20; struct SKCLabelNode *x21; struct { struct SKCRenderPass *x0; struct SKCRenderSortGroup *x1; unsigned int x2; struct list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct __list_node_base<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; struct __list_node_base<SKCRenderSortInfo *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > > { unsigned long long x0; } x1; } x3; struct list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct __list_node_base<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; struct __list_node_base<SKCRenderSortInfo *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > > { unsigned long long x0; } x1; } x4; struct __list_iterator<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; } x5; } x22; struct vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > > { struct shared_ptr<jet_framebuffer> *x0; struct shared_ptr<jet_framebuffer> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > > { struct shared_ptr<jet_framebuffer> *x0; } x2; } x23; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x24; id x25; } *_layerBackedRenderer;
@property (retain, nonatomic) NSMutableDictionary *_info;
@property (readonly) NSMutableDictionary *options;
@property (nonatomic) double physicsDebugStrokeWidth;
@property (nonatomic, getter=disableDepthStencilBuffer, setter=setDisableDepthStencilBuffer:) BOOL disableStencilBuffers;
@property (nonatomic, getter=isPaused) BOOL paused;
@property (nonatomic) BOOL showsFPS;
@property (nonatomic) BOOL showsDrawCount;
@property (nonatomic) BOOL showsNodeCount;
@property (nonatomic) BOOL showsQuadCount;
@property (nonatomic) BOOL showsPhysics;
@property (nonatomic) BOOL showsFields;
@property (nonatomic, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic) BOOL allowsTransparency;
@property (nonatomic) BOOL ignoresSiblingOrder;
@property (nonatomic) BOOL shouldCullNonVisibleNodes;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic) BOOL disableDepthStencilBuffer;
@property (weak, nonatomic) NSObject<SKViewDelegate> *delegate;
@property (nonatomic) long long frameInterval;
@property (nonatomic) float preferredFrameRate;
@property (readonly, nonatomic) SKScene *scene;

+ (Class)layerClass;
+ (BOOL)supportsSecureCoding;
+ (id)debugHierarchyObjectsInGroupWithID:(id)a0 onObject:(id)a1 outOptions:(id *)a2;
+ (void)_setCurrentTime:(double)a0;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)a0 onObject:(id)a1 outOptions:(id *)a2 outError:(id *)a3;
+ (id)debugHierarchyAdditionalGroupingIDs;

- (double)_fps;
- (void)_commonInit;
- (BOOL)isOpaque;
- (void).cxx_destruct;
- (void)_searchForFocusRegionsInContext:(id)a0;
- (void)touchesCancelled:(id)a0 withEvent:(id)a1;
- (id)snapshot;
- (void)dealloc;
- (double)_viewScale;
- (void)_update:(double)a0;
- (id)initWithCoder:(id)a0;
- (void)touchesMoved:(id)a0 withEvent:(id)a1;
- (void)onInit;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (void)CBApplicationDidBecomeActive;
- (id).cxx_construct;
- (double)alphaValue;
- (long long)_preferredFocusMovementStyle;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)touchesEnded:(id)a0 withEvent:(id)a1;
- (void)runOnce;
- (id)_regionForFocusedItem:(id)a0 inCoordinateSpace:(id)a1;
- (void)touchesBegan:(id)a0 withEvent:(id)a1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)encodeWithCoder:(id)a0;
- (void)_renderSynchronouslyForTime:(double)a0 preRender:(id /* block */)a1 postRender:(id /* block */)a2 withMTLScheduleHandler:(id /* block */)a3;
- (void)renderForTime:(double)a0 shouldBlock:(BOOL)a1;
- (void)overrideMetalCommandQueue:(id)a0;
- (void)set_showsGPUStats:(BOOL)a0;
- (void)set_showsCPUStats:(BOOL)a0;
- (void)presentScene:(id)a0;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toScene:(id)a1;
- (void)CBApplicationWillResignActive;
- (id)_focusedItemRegionContainer;
- (BOOL)_showsCPUStats;
- (BOOL)_showsGPUStats;
- (void)_showAllStats;
- (int)_spriteRenderCount;
- (int)_spriteSubmitCount;
- (struct { void /* unknown type, empty encoding */ x0[4]; })getViewTransform;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromScene:(id)a1;
- (void)willRenderContent;
- (id)textureFromNode:(id)a0 withOptions:(id)a1;
- (id)archiveToFile:(id)a0;
- (float)_getViewContentsScale;
- (void)debugPrint;
- (struct SKCRenderer { id x0; float x1; struct shared_ptr<SKCRenderPass> { struct SKCRenderPass *x0; struct __shared_weak_count *x1; } x2; unsigned int x3; struct shared_ptr<jet_command_buffer> { struct jet_command_buffer *x0; struct __shared_weak_count *x1; } x4; struct list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > > { struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> { struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> *x0; struct __list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > > { unsigned long long x0; } x1; } x5; struct { unsigned int x0; unsigned int x1; struct { void /* unknown type, empty encoding */ x0[4]; } ***x2; float x3; struct SKCRenderer *x4; float x5; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x6; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x7; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x8; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x9; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x10; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x11; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x12; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x13; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x15; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x16; struct shared_ptr<jet_program> { struct jet_program *x0; struct __shared_weak_count *x1; } x17; struct jet_buffer *x18; struct jet_buffer *x19; struct jet_buffer *x20; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x21; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x22; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x23; struct shared_ptr<jet_buffer> { struct jet_buffer *x0; struct __shared_weak_count *x1; } x24; struct shared_ptr<jet_buffer> { struct jet_buffer *x0; struct __shared_weak_count *x1; } x25; struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; } x26; struct shared_ptr<jet_texture> { struct jet_texture *x0; struct __shared_weak_count *x1; } x27; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x28; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x29; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x30; struct shared_ptr<jet_sampler> { struct jet_sampler *x0; struct __shared_weak_count *x1; } x31; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x32; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x33; struct shared_ptr<jet_depth_stencil_mode> { struct jet_depth_stencil_mode *x0; struct __shared_weak_count *x1; } x34; BOOL x35; unsigned int x36; struct SKCRenderBatch { BOOL x0; int x1; unsigned int x2; unsigned int x3; id x4; struct jet_program *x5; struct jet_texture *x6; struct jet_texture *x7; struct jet_sampler *x8; struct jet_sampler *x9; unsigned int x10; unsigned int x11; float x12; } x37; struct SKCStats *x38; struct vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > > { struct shared_ptr<jet_buffer> *x0; struct shared_ptr<jet_buffer> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > > { struct shared_ptr<jet_buffer> *x0; } x2; } x39; struct vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > > { struct shared_ptr<jet_buffer_pool> *x0; struct shared_ptr<jet_buffer_pool> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > > { struct shared_ptr<jet_buffer_pool> *x0; } x2; } x40; } x6; struct SKCStats *x7; struct SKCStats { void /* function */ **x0; double x1; double x2; double x3; double x4; int x5; struct { double x0; double x1; } x6; struct { double x0; double x1; } x7; struct { double x0; double x1; int x2; } x8; struct { double x0; double x1; int x2; } x9; struct { double x0; double x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x10; } x8; id x9; id x10; BOOL x11; BOOL x12; BOOL x13; struct shared_ptr<jet_context> { struct jet_context *x0; struct __shared_weak_count *x1; } x14; struct shared_ptr<jet_fence> { struct jet_fence *x0; struct __shared_weak_count *x1; } x15; struct map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > > { struct __tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> > { unsigned long long x0; } x2; } x0; } x16; struct map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > > { struct __tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> > { unsigned long long x0; } x2; } x0; } x17; struct vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct SKCRenderSortInfo **x0; struct SKCRenderSortInfo **x1; struct __compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> > { struct SKCRenderSortInfo **x0; } x2; } x18; struct map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > > { struct __tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> > { unsigned long long x0; } x2; } x0; } x19; struct SKCSpriteNode *x20; struct SKCLabelNode *x21; struct { struct SKCRenderPass *x0; struct SKCRenderSortGroup *x1; unsigned int x2; struct list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct __list_node_base<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; struct __list_node_base<SKCRenderSortInfo *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > > { unsigned long long x0; } x1; } x3; struct list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > { struct __list_node_base<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; struct __list_node_base<SKCRenderSortInfo *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > > { unsigned long long x0; } x1; } x4; struct __list_iterator<SKCRenderSortInfo *, void *> { struct __list_node_base<SKCRenderSortInfo *, void *> *x0; } x5; } x22; struct vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > > { struct shared_ptr<jet_framebuffer> *x0; struct shared_ptr<jet_framebuffer> *x1; struct __compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > > { struct shared_ptr<jet_framebuffer> *x0; } x2; } x23; struct shared_ptr<jet_buffer_pool> { struct jet_buffer_pool *x0; struct __shared_weak_count *x1; } x24; id x25; } *)chooseViewRenderer;
- (id)getRenderOptions;
- (void)_ensureRenderer;
- (void)setUpRenderCallback;
- (void)startRenderCallbacks;
- (void)_renderSynchronouslyForTime:(double)a0 preRender:(id /* block */)a1 postRender:(id /* block */)a2;
- (unsigned long long)_getEffectivePreferredFramesPerSecond;
- (id)captureToFile:(id)a0;
- (struct SKCNode { void /* function */ **x0; id x1; BOOL x2; struct unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float x0; } x3; } x0; } x3; id x4; id x5; struct SKCNode *x6; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode **x0; struct SKCNode **x1; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode **x0; } x2; } x7; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode **x0; struct SKCNode **x1; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode **x0; } x2; } x8; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode **x0; struct SKCNode **x1; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode **x0; } x2; } x9; id x10; float x11; BOOL x12; struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node_base<SKCAction *, void *> *x0; struct __list_node_base<SKCAction *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long long x0; } x1; } x13; struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node_base<SKCAction *, void *> *x0; struct __list_node_base<SKCAction *, void *> *x1; } x0; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long long x0; } x1; } x14; BOOL x15; id x16; struct shared_ptr<PKPath> { struct PKPath *x0; struct __shared_weak_count *x1; } x17; unsigned int x18; unsigned int x19; BOOL x20; long long x21; float x22; float x23; BOOL x24; BOOL x25; struct { void /* unknown type, empty encoding */ x0[4]; } x26; struct { void /* unknown type, empty encoding */ x0[4]; } x27; } *)getRootNode;
- (BOOL)hasValidViewFramebuffer;
- (struct shared_ptr<jet_framebuffer> { struct jet_framebuffer *x0; struct __shared_weak_count *x1; })nextFramebuffer;
- (void /* unknown type, empty encoding */)getViewport;
- (void)_endFrameStats;
- (void)notifyWillRenderContent;
- (void)_renderToIOSurfaceID:(unsigned int)a0 scaleFactor:(float)a1 asynchronous:(BOOL)a2 waitOnFence:(BOOL)a3 preRender:(id /* block */)a4 postRender:(id /* block */)a5;
- (BOOL)_shouldRenderForTime:(double)a0;
- (void)_vsyncRenderForTime:(double)a0 preRender:(id /* block */)a1 postRender:(id /* block */)a2;
- (void)stopRenderCallbacks;
- (void)renderContent;
- (void)_reshape;
- (void)_renderToIOSurfaceID:(unsigned int)a0 scaleFactor:(float)a1 asynchronous:(BOOL)a2 preRender:(id /* block */)a3 postRender:(id /* block */)a4;
- (void)remakeFramebuffer;
- (void)_renderContent;
- (id)textureFromNode:(id)a0 crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)setDynamicRenderBlock:(id /* block */)a0;
- (void)_dispatchRenderToIOSurfaceID:(unsigned int)a0 async:(BOOL)a1 onQueue:(id)a2 waitOnFence:(BOOL)a3 preRender:(id /* block */)a4 postRender:(id /* block */)a5;
- (void)set_usesAsyncUpdateQueue:(BOOL)a0;
- (BOOL)_usesAsyncUpdateQueue;
- (BOOL)_renderUpdateEnabled;
- (void)set_renderUpdateEnabled:(BOOL)a0;
- (void)remakeFramebuffer:(double)a0;
- (void)presentScene:(id)a0 transition:(id)a1;
- (id)textureFromNode:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 updateQueue:(id)a1;
- (BOOL)isEqualToView:(id)a0;
- (void)writeContentsToPNG:(id)a0;
- (void)renderToIOSurfaceID:(unsigned int)a0 withScaleFactor:(double)a1;
- (void)_setUpdateQueue:(id)a0;
- (void)set_viewScale:(double)a0;
- (struct CGPoint { double x0; double x1; })_viewTranslation;
- (void)set_viewTranslation:(struct CGPoint { double x0; double x1; })a0;
- (id)_getPerformanceStats;

@end

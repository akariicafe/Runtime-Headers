@class NSXPCConnection, NSString, MPMusicPlayerControllerNowPlayingTimeSnapshot, MPMusicPlayerApplicationController, MPMusicPlayerQueueDescriptor, MPMusicPlayerControllerNowPlaying, MPVolumeController, NSObject, MPMediaItem;
@protocol MPSystemMusicPlayerController, OS_dispatch_queue;

@interface MPMusicPlayerController : NSObject <MPArtworkDataSource, MPVolumeControllerDelegate, MPMusicPlayerControllerClient, MPMediaPlayback> {
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (class, readonly) MPMusicPlayerController *applicationMusicPlayer;
@property (class, readonly) MPMusicPlayerApplicationController *applicationQueuePlayer;
@property (class, readonly) MPMusicPlayerController<MPSystemMusicPlayerController> *systemMusicPlayer;
@property (class, readonly) MPMusicPlayerController *iPodMusicPlayer;

@property (readonly, copy, nonatomic) NSString *clientIdentifier;
@property (readonly, nonatomic) NSXPCConnection *connection;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlaying *serverNowPlaying;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlayingTimeSnapshot *serverTimeSnapshot;
@property (readonly, nonatomic) MPMusicPlayerQueueDescriptor *serverQueueDescriptor;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlayingTimeSnapshot *lastServerTimeSnapshot;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlaying *lastServerNowPlaying;
@property (readonly, nonatomic) MPMusicPlayerQueueDescriptor *targetQueueDescriptor;
@property (readonly, nonatomic) long long notificationsCounter;
@property (readonly, nonatomic) MPVolumeController *volumeController;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) long long playbackSpeed;
@property (readonly, nonatomic) BOOL isNowPlayingItemFromGeniusMix;
@property (nonatomic) unsigned long long currentChapterIndex;
@property (readonly, nonatomic) long long playbackState;
@property (nonatomic) long long repeatMode;
@property (nonatomic) long long shuffleMode;
@property (nonatomic) float volume;
@property (copy, nonatomic) MPMediaItem *nowPlayingItem;
@property (readonly, nonatomic) unsigned long long indexOfNowPlayingItem;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL isPreparedToPlay;
@property (nonatomic) double currentPlaybackTime;
@property (nonatomic) float currentPlaybackRate;

+ (void)setRunLoopForNotifications:(id)a0;
+ (id)alloc;

- (void)play;
- (id)existingRepresentationForArtworkCatalog:(id)a0;
- (unsigned long long)numberOfItems;
- (void).cxx_destruct;
- (BOOL)areRepresentationsAvailableForCatalog:(id)a0;
- (void)dealloc;
- (void)volumeController:(id)a0 mutedStateDidChange:(BOOL)a1;
- (void)shuffle;
- (void)stop;
- (void)setUserQueueModificationsDisabled:(BOOL)a0;
- (id)_snapshot;
- (id)_queueDescriptor;
- (void)volumeController:(id)a0 volumeValueDidChange:(float)a1;
- (id)_nowPlaying;
- (void)setServerNowPlaying:(id)a0;
- (void)setServerQueueDescriptor:(id)a0;
- (void)setServerTimeSnapshot:(id)a0;
- (void)serverPlaybackModeDidChangeAffectingQueue:(BOOL)a0;
- (void)serverItemDidEnd;
- (void)serverQueueDidEnd;
- (id)initWithClientIdentifier:(id)a0 queue:(id)a1;
- (void)skipToNextItem;
- (void)setQueueWithQuery:(id)a0;
- (void)setQueueWithItemCollection:(id)a0;
- (void)setQueueWithStoreIDs:(id)a0;
- (void)setQueueWithDescriptor:(id)a0;
- (void)prependQueueDescriptor:(id)a0;
- (void)appendQueueDescriptor:(id)a0;
- (void)prepareToPlayWithCompletionHandler:(id /* block */)a0;
- (void)skipToBeginning;
- (void)skipToPreviousItem;
- (void)setQueueWithQuery:(id)a0 firstItem:(id)a1;
- (void)beginGeneratingPlaybackNotifications;
- (void)endGeneratingPlaybackNotifications;
- (void)setQueueWithRadioStation:(id)a0;
- (id)queueAsQuery;
- (id)queueAsRadioStation;
- (id)nowPlayingAtIndex:(long long)a0;
- (id)nowPlayingItemAtIndex:(unsigned long long)a0;
- (void)prepareQueueForPlayback;
- (void)pauseWithFadeoutDuration:(double)a0;
- (void)skipToBeginningOrPreviousItem;
- (BOOL)userQueueModificationsDisabled;
- (void)setVolumePrivate:(float)a0;
- (BOOL)isGeniusAvailable;
- (BOOL)isGeniusAvailableForSeedItems:(id)a0;
- (BOOL)setQueueWithSeedItems:(id)a0;
- (void)setQueueWithGeniusMixPlaylist:(id)a0;
- (void)adjustLoadedQueueRangeToReverseCount:(long long)a0 forwardCount:(long long)a1;
- (void)onServerAsync:(id /* block */)a0;
- (void)_establishConnectionIfNeeded;
- (id)_mediaItemFromNowPlaying:(id)a0;
- (void)pause;
- (void)endSeeking;
- (void)prepareToPlay;
- (void)beginSeekingForward;
- (void)beginSeekingBackward;
- (id)visualIdenticalityIdentifierForCatalog:(id)a0;
- (id)initWithClientIdentifier:(id)a0;
- (void)_clearConnection;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)a0;
- (void)onServer:(id /* block */)a0;
- (void)loadRepresentationForArtworkCatalog:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)isRepresentation:(id)a0 bestRepresentationForArtworkCatalog:(id)a1;

@end

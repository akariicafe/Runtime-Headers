@class NSError, NSString, NSArray, AVPlayerItem, AVPlayer, MPAVRoute, AVQueuePlayer, NSObject, NSMutableArray, MPAVRoutingController;
@protocol OS_dispatch_queue;

@interface MPQueuePlayer : NSObject <MPAVRoutingControllerDelegate> {
    NSObject<OS_dispatch_queue> *_accessQueue;
    unsigned long long _allowsExternalPlaybackRevisionID;
    MPAVRoutingController *_routingController;
    AVPlayerItem *_currentItem;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentTime;
    BOOL _isExternalPlaybackActive;
    BOOL _pausedForPlaybackQueueTransaction;
    MPAVRoute *_lastPickedRoute;
    long long _playbackQueueTransactionCount;
    AVQueuePlayer *_player;
    NSMutableArray *_queuedOperations;
    float _rate;
    float _rateBeforePlaybackQueueTransaction;
    BOOL _routeDidChangeDuringPlaybackQueueTransaction;
    long long _status;
    BOOL _outputObscuredDueToInsufficientExternalProtection;
    unsigned long long _usesAudioOnlyModeForExternalPlaybackRevisionID;
    unsigned long long _usesExternalPlaybackWhileExternalScreenIsActiveRevisionID;
}

@property (readonly, nonatomic) long long status;
@property (readonly, nonatomic) NSError *error;
@property (readonly, nonatomic) float rawRate;
@property (nonatomic) float rate;
@property (nonatomic) long long actionAtItemEnd;
@property (readonly, nonatomic) BOOL allowsExternalPlayback;
@property (readonly, nonatomic, getter=isExternalPlaybackActive) BOOL externalPlaybackActive;
@property (readonly, nonatomic) BOOL usesExternalPlaybackWhileExternalScreenIsActive;
@property (readonly, nonatomic) BOOL usesAudioOnlyModeForExternalPlayback;
@property (readonly, nonatomic) long long externalPlaybackType;
@property (nonatomic) long long defaultItemEQPresetType;
@property (readonly, nonatomic) BOOL outputObscuredDueToInsufficientExternalProtection;
@property (readonly, nonatomic) AVPlayerItem *currentItem;
@property (copy, nonatomic) id /* block */ playbackQueueCommitHandler;
@property (readonly, nonatomic) BOOL isPlaybackQueueTransactionActive;
@property (readonly, nonatomic) NSArray *items;
@property (readonly, nonatomic) AVPlayer *_player;
@property (readonly, nonatomic) long long _externalProtectionStatus;
@property (copy, nonatomic) NSString *externalPlaybackVideoGravity;
@property (readonly, nonatomic) id playerAVAudioSession;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)removeItem:(id)a0;
- (void)_setCALayerDestinationIsTVOut:(BOOL)a0;
- (void)advanceToNextItem;
- (void)play;
- (void)routingControllerAvailableRoutesDidChange:(id)a0;
- (void)setUsesExternalPlaybackWhileExternalScreenIsActive:(BOOL)a0 shouldIgnorePlaybackQueueTransactions:(BOOL)a1;
- (id)init;
- (void)removeTimeObserver:(id)a0;
- (void).cxx_destruct;
- (float)_userVolume;
- (void)_setClientName:(id)a0;
- (void)dealloc;
- (void)_setExpectedAssetTypes:(id)a0;
- (void)_setUserVolume:(float)a0;
- (void)prepareItem:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)commitPlaybackQueueTransaction;
- (void)insertItem:(id)a0 afterItem:(id)a1;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2 completionHandler:(id /* block */)a3;
- (BOOL)_CALayerDestinationIsTVOut;
- (void)setCurrentPlaybackQueueTransactionDisplayTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(BOOL)a0;
- (BOOL)_resumePlayback:(double)a0;
- (void)setAllowsExternalPlayback:(BOOL)a0 shouldIgnorePlaybackQueueTransactions:(BOOL)a1;
- (void)pause;
- (void)_currentItemDidChangeNotification:(id)a0;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (id)addBoundaryTimeObserverForTimes:(id)a0 queue:(id)a1 usingBlock:(id /* block */)a2;
- (void)setMediaSelectionCriteria:(id)a0 forMediaCharacteristic:(id)a1;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2;
- (void)setUsesAudioOnlyModeForExternalPlayback:(BOOL)a0 shouldIgnorePlaybackQueueTransactions:(BOOL)a1;
- (void)_setPreferredLanguageList:(id)a0;
- (void)removeAllItems;
- (void)_setEQPreset:(int)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_setStoppingFadeOutDuration:(float)a0;
- (void)beginPlaybackQueueTransactionAndPause:(BOOL)a0;
- (id)addPeriodicTimeObserverForInterval:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 queue:(id)a1 usingBlock:(id /* block */)a2;

@end

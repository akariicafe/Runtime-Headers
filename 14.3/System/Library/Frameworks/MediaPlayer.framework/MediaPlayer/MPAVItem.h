@class NSURL, MPQueueFeeder, NSDictionary, NSObject, AVAsset, MPModelPlayEvent, MPModelGenericObject, AVPlayerItemAccessLog, MPMediaItem, NSString, AVPlayerItem, ICMusicSubscriptionLeaseStatus, NSArray, NSNumber, MPNowPlayingContentItem, NSError, MPAlternateTracks;
@protocol OS_dispatch_queue, MPAVItemObserver;

@interface MPAVItem : NSObject {
    AVAsset *_asset;
    NSObject<OS_dispatch_queue> *_assetQueue;
    AVPlayerItem *_avPlayerItem;
    NSArray *_closedCaptionTimeMarkers;
    double _cachedDuration;
    double _cachedPlayableDuration;
    NSArray *_cachedSeekableTimeRanges;
    double _seekableTimeRangesCacheTime;
    long long _type;
    MPNowPlayingContentItem *_contentItem;
    unsigned char _advancedDuringPlayback : 1;
    unsigned char _handledFinishTime : 1;
    unsigned char _hasPlayedThisSession : 1;
    unsigned char _wasCountedAsSkipped : 1;
    unsigned char _isStreamable : 2;
    unsigned char _watchingAttributes : 1;
    unsigned char _userChangedItemsDuringPlayback : 1;
    unsigned char _lyricsAvailable : 1;
    unsigned char _timeMarkersNeedLoading : 1;
    NSObject<OS_dispatch_queue> *_accessQueue;
    BOOL _hasLoadedHasProtectedContent;
    BOOL _hasLoadedPlaybackMode;
    BOOL _hasPostedNaturalSizeChange;
    BOOL _hasRegisteredForCaptionsAppearanceChanged;
    BOOL _hasValidPlayerItemDuration;
    double _lastLoggedTotalDuration;
    long long _likedState;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _playerItemDuration;
    long long _exportableArtworkRevision;
}

@property (class, readonly, nonatomic, getter=isPlaceholder) BOOL placeholder;

@property BOOL isAssetLoaded;
@property (retain, nonatomic) NSArray *chapterTimeMarkers;
@property (retain, nonatomic) NSArray *artworkTimeMarkers;
@property (retain, nonatomic) NSArray *urlTimeMarkers;
@property (readonly, nonatomic, getter=isPlaceholder) BOOL placeholder;
@property (readonly, nonatomic, getter=isTailPlaceholder) BOOL tailPlaceholder;
@property (nonatomic, getter=isStartItem) BOOL startItem;
@property (nonatomic) long long repeatIndex;
@property (nonatomic) long long lastChangeDirection;
@property (readonly, nonatomic) BOOL shouldPreventPlayback;
@property (readonly, nonatomic) MPModelGenericObject *modelGenericObject;
@property (readonly, nonatomic) MPModelPlayEvent *modelPlayEvent;
@property (readonly, copy, nonatomic) NSNumber *bookmarkTime;
@property (readonly, copy, nonatomic) NSNumber *initialPlaybackStartTime;
@property (copy, nonatomic) NSNumber *initialPlaybackStartTimeOverride;
@property (copy, nonatomic) NSNumber *lastMetadataChangeTime;
@property (readonly, nonatomic) BOOL allowsAirPlayFromCloud;
@property (readonly, nonatomic) BOOL allowsExternalPlayback;
@property (readonly, nonatomic) BOOL requiresLoadedAssetForAirPlayProperties;
@property (readonly, copy, nonatomic) NSString *aggregateDictionaryItemIdentifier;
@property (nonatomic, getter=_currentPlaybackRate, setter=_setCurrentPlaybackRate:) float _currentPlaybackRate;
@property (readonly, nonatomic) BOOL hasFinishedDownloading;
@property (nonatomic) BOOL hasPerformedErrorResolution;
@property (readonly, copy, nonatomic) NSDictionary *playbackInfo;
@property (retain, nonatomic) AVPlayerItem *playerItem;
@property (readonly, nonatomic) struct OpaqueCMTimebase { } *timebase;
@property (nonatomic, getter=isActiveItem) BOOL activeItem;
@property (readonly, copy, nonatomic) NSString *storeFrontIdentifier;
@property (nonatomic, getter=hasExternalDisplay) BOOL externalDisplay;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } _playerItemDurationIfAvailable;
@property (readonly, nonatomic) NSNumber *storeAccountID;
@property (readonly, nonatomic) NSNumber *useListeningHistory;
@property (readonly, nonatomic) long long leasePlaybackPreventionState;
@property (readonly, copy, nonatomic) ICMusicSubscriptionLeaseStatus *leaseStatus;
@property (copy, nonatomic) NSString *explicitBadge;
@property (readonly, nonatomic) BOOL didReachEnd;
@property (readonly, nonatomic) BOOL canUseLoadedAsset;
@property (copy, nonatomic) NSString *contentItemID;
@property (copy, nonatomic) NSString *previousContentItemID;
@property (readonly, nonatomic) MPNowPlayingContentItem *contentItem;
@property (weak, nonatomic) id<MPAVItemObserver> observer;
@property (readonly, nonatomic) BOOL meetsPlaybackHistoryThreshold;
@property (readonly, nonatomic, getter=isAssetLoaded) BOOL assetLoaded;
@property (readonly, nonatomic, getter=isAssetURLValid) BOOL assetURLValid;
@property (readonly, nonatomic) BOOL didAttemptToLoadAsset;
@property (readonly, nonatomic) AVAsset *asset;
@property (readonly, nonatomic) BOOL canReusePlayerItem;
@property (readonly, copy, nonatomic) NSError *playbackError;
@property (retain, nonatomic) NSError *itemError;
@property (readonly, nonatomic) long long status;
@property (retain, nonatomic) NSString *queueIdentifier;
@property (readonly, nonatomic, getter=isAlwaysLive) BOOL alwaysLive;
@property (nonatomic) BOOL userAdvancedDuringPlayback;
@property (nonatomic) BOOL userChangedItemsDuringPlayback;
@property (nonatomic) BOOL userSkippedPlayback;
@property (weak, nonatomic) MPQueueFeeder *feeder;
@property (nonatomic) BOOL hasPlayedThisSession;
@property (readonly, nonatomic) long long playbackMode;
@property (readonly, nonatomic) AVPlayerItemAccessLog *accessLog;
@property (readonly, nonatomic) double currentTimeDisplayOverride;
@property (nonatomic) float defaultPlaybackRate;
@property (retain, nonatomic) NSArray *closedCaptionTimeMarkers;
@property (readonly, nonatomic) BOOL useEmbeddedChapterData;
@property (readonly, nonatomic) long long type;
@property (readonly, nonatomic) long long customAVEQPreset;
@property (readonly, nonatomic) BOOL allowsEQ;
@property (readonly, nonatomic) MPAlternateTracks *alternateTracks;
@property (readonly, nonatomic) NSString *displayableText;
@property (readonly, nonatomic) BOOL displayableTextLoaded;
@property (readonly, nonatomic) NSString *album;
@property (readonly, nonatomic) long long albumStoreID;
@property (readonly, nonatomic) NSString *artist;
@property (readonly, nonatomic) NSString *albumArtist;
@property (readonly, nonatomic) long long artistStoreID;
@property (readonly, nonatomic) unsigned long long albumTrackNumber;
@property (readonly, nonatomic) unsigned long long albumTrackCount;
@property (readonly, copy, nonatomic) NSArray *buyOffers;
@property (readonly, nonatomic) BOOL canSeedGenius;
@property (readonly, nonatomic) NSString *composer;
@property (readonly, copy, nonatomic) NSString *copyrightText;
@property (readonly, nonatomic) unsigned long long discNumber;
@property (readonly, nonatomic) unsigned long long discCount;
@property (readonly, nonatomic, getter=isExplicitTrack) BOOL explicitTrack;
@property (readonly, copy, nonatomic) NSString *externalContentIdentifier;
@property (readonly, nonatomic) NSString *genre;
@property (readonly, nonatomic) unsigned long long mediaType;
@property (nonatomic) long long likedState;
@property (readonly, nonatomic, getter=isLikedStateEnabled) BOOL likedStateEnabled;
@property (readonly, nonatomic) BOOL supportsLikedState;
@property (readonly, nonatomic) NSString *lyrics;
@property (readonly, nonatomic) NSString *libraryLyrics;
@property (readonly, nonatomic) BOOL hasStoreLyrics;
@property (readonly, nonatomic) BOOL hasTimeSyncedLyrics;
@property (readonly, copy, nonatomic) NSString *containerUniqueID;
@property (readonly, nonatomic) NSString *mainTitle;
@property (readonly, nonatomic) NSURL *podcastURL;
@property (readonly, nonatomic, getter=isStreamable) BOOL streamable;
@property (readonly, nonatomic) unsigned long long persistentID;
@property (readonly, nonatomic) NSString *databaseID;
@property (readonly, nonatomic) unsigned long long cloudID;
@property (readonly, nonatomic) NSString *personID;
@property (readonly, nonatomic) NSString *cloudUniversalLibraryID;
@property (readonly, nonatomic) NSString *cloudAlbumID;
@property (readonly, nonatomic) unsigned long long albumPersistentID;
@property (readonly, nonatomic) unsigned long long albumArtistPersistentID;
@property (readonly, nonatomic) unsigned long long artistPersistentID;
@property (readonly, nonatomic) unsigned long long genrePersistentID;
@property (readonly, nonatomic) unsigned long long composerPersistentID;
@property (readonly, nonatomic) BOOL shouldShowComposer;
@property (readonly, nonatomic) NSString *storeItemID;
@property (readonly, nonatomic) long long storeItemInt64ID;
@property (readonly, nonatomic) long long storePurchasedAdamID;
@property (readonly, nonatomic) long long storeSubscriptionAdamID;
@property (readonly, nonatomic) float userRating;
@property (readonly, nonatomic) BOOL supportsRewindAndFastForward15Seconds;
@property (readonly, nonatomic) BOOL durationIsValid;
@property (readonly, nonatomic) double durationIfAvailable;
@property (readonly, nonatomic) double durationFromExternalMetadata;
@property (readonly, nonatomic) double playableDuration;
@property (readonly, nonatomic) double playableDurationIfAvailable;
@property (readonly, nonatomic) double timeOfSeekableStart;
@property (readonly, nonatomic) double timeOfSeekableEnd;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } naturalSize;
@property (readonly, nonatomic) NSArray *timedMetadataIfAvailable;
@property (readonly, nonatomic) BOOL usesSubscriptionLease;
@property (readonly, retain, nonatomic) MPMediaItem *mediaItem;
@property (nonatomic) float loudnessInfoVolumeNormalization;
@property (nonatomic) float soundCheckVolumeNormalization;
@property (readonly, nonatomic) BOOL supportsRating;
@property (readonly, nonatomic) BOOL prefersSeekOverSkip;
@property (readonly, nonatomic) BOOL isAd;
@property (readonly, nonatomic) BOOL hasProtectedContent;
@property (nonatomic, getter=isInWishList) BOOL inWishList;
@property (readonly, nonatomic, getter=isRadioItem) BOOL radioItem;
@property (readonly, nonatomic) BOOL stationAllowsItemLiking;
@property (readonly, copy, nonatomic) NSString *stationHash;
@property (readonly, nonatomic) long long stationID;
@property (readonly, copy, nonatomic) NSString *stationName;
@property (readonly, copy, nonatomic) NSString *stationStringID;
@property (readonly, nonatomic) BOOL supportsRadioTrackActions;
@property (readonly, nonatomic) long long stationProviderID;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } duration;
@property (nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } forwardPlaybackEndTime;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } presentationSize;
@property (retain, nonatomic) id rtcReportingParentHierarchyToken;

+ (id)URLFromPath:(id)a0;
+ (long long)defaultScaleMode;
+ (void)setDefaultScaleMode:(long long)a0;

- (long long)albumYear;
- (void)_applicationDidBecomeActive:(id)a0;
- (id)path;
- (id)init;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithURL:(id)a0;
- (id)url;
- (void)setSelectedAlternateTextTrack:(id)a0;
- (void)setMeetsPlaybackHistoryThresholdForElapsedTime:(double)a0 startTime:(double)a1;
- (BOOL)isSupportedDefaultPlaybackSpeed:(long long)a0;
- (id)initWithPlayerItem:(id)a0;
- (void)_releaseAllTimeMarkers;
- (void)flushNowPlayingCaches;
- (void)disableItemReuse;
- (void)loadAssetAndPlayerItem;
- (void)_loadAssetAndPlayerItem;
- (id)initWithAsset:(id)a0;
- (void)resetBookkeeping;
- (void)setAlternateAudioTrackID:(int)a0;
- (int)subtitleTrackID;
- (void)setAlternateAudioTrackLocale:(id)a0;
- (void)setPlaybackStoppedTime:(double)a0;
- (void)notePlaybackFinishedByHittingEnd;
- (void)setPlaybackCheckpointCurrentTime:(double)a0;
- (void)setPlaybackFinishedTime:(double)a0;
- (void)setSubtitleTrackID:(int)a0;
- (double)durationInSeconds;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(BOOL)a0;
- (BOOL)isValidPlayerSubstituteForItem:(id)a0;
- (BOOL)hasAlternatesForTypes:(unsigned long long)a0;
- (unsigned long long)alternatesCountForTypes:(unsigned long long)a0;
- (BOOL)hasDataForItemArtwork;
- (BOOL)hasDisplayableText;
- (float)playbackRateForLevel:(unsigned long long)a0 direction:(long long)a1 paused:(BOOL)a2;
- (void)prepareForRate:(float)a0 completionHandler:(id /* block */)a1;
- (float)scanIntervalForLevel:(unsigned long long)a0 paused:(BOOL)a1;
- (void)setOverrideDuration:(double)a0;
- (void)setLikedState:(long long)a0 forUserIdentity:(id)a1;
- (void)_realoadEmbeddedTimeMarkers;
- (void)_loadTimeMarkersBlocking;
- (void)_loadTimeMarkersAsync;
- (id)_timeMarkerFromMarkers:(id)a0 forTime:(double)a1;
- (id)chapterTimeMarkerForTime:(double)a0;
- (id)artworkTimeMarkerForTime:(double)a0;
- (id)urlTimeMarkerForTime:(double)a0;
- (id)closedCaptionTimeMarkerForTime:(double)a0;
- (id)_imageChapterTrackIDsForAsset:(id)a0;
- (double)_durationFromExternalMetadataIfAvailable;
- (void)_internalLikedStateDidChangeNotification:(id)a0;
- (void)_itemAttributeAvailableKey:(id)a0;
- (void)_captionAppearanceSettingsChanged;
- (void)_addObservationsForAVPlayerItem:(id)a0;
- (id)_seekableTimeRanges;
- (void)_clearAsset;
- (void)_removeObservationsForAVPlayerItem:(id)a0;
- (id)_currentContentItemDeviceSpecificUserInfo;
- (void)_likedStateDidChange;
- (id)_initialPlaybackStartTimeForPlaybackInfo:(id)a0;
- (void)_loadAvailableMediaCharacteristicsIfNeeded;
- (double)_playableDurationForLoadedTimeRanges:(id)a0;
- (void)_loadAssetProperties;
- (BOOL)_shouldPublishArtworkURL;
- (void)reevaluateType;
- (void)_updateSoundCheckVolumeNormalizationForPlayerItem;
- (void)_performContentItemUpdate:(id /* block */)a0;
- (void)setupPlaybackInfo;
- (id /* block */)blockForDirectAVControllerNotificationReferencingItem:(id)a0;
- (void)setupEQPresetWithDefaultPreset:(long long)a0;
- (BOOL)_isBackgroundPlaybackRestricted;
- (void)_updateDurationSnapshotWithElapsedTime:(double)a0 playbackRate:(float)a1;
- (void)_currentPlaybackRateDidChange:(float)a0;
- (void)_applyLoudnessInfo;
- (double)_expectedStartTimeWithPlaybackInfo:(id)a0;
- (double)_expectedStopTimeWithPlaybackInfo:(id)a0;
- (void)_handleUpdatedLikedState:(long long)a0 forUserIdentity:(id)a1 completion:(id /* block */)a2;
- (long long)_persistedLikedState;
- (void)_setNeedsPersistedLikedStateUpdate;
- (void)_setListeningForCaptionsAppearanceSettingsChanged:(BOOL)a0;
- (void)invalidateContentItemDeviceSpecificUserInfo;
- (void)reevaluateHasProtectedContent;
- (void)replacePlayerItemWithPlayerItem:(id)a0;
- (void)_updateHasFinishedDownloading;
- (void)resolvePlaybackError:(id)a0 withCompletion:(id /* block */)a1;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (void)_didResignActivePlayerItem;
- (void)_didBecomeActivePlayerItem;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)setRating:(float)a0;
- (id)artworkCatalogForPlaybackTime:(double)a0;
- (id /* block */)artworkCatalogBlock;
- (id)initWithURL:(id)a0 options:(id)a1;

@end

@class MPSwipableView, MPAVController, _UIHostedWindow, MPVideoView, MPVideoBackgroundView, UIView, UIColor, NSString, MPAVItem, MPTVOutWindow, UIAlertController, UIActivityIndicatorView, UIImage;
@protocol MPVideoOverlay;

@interface MPVideoViewController : MPViewController <MPVideoControllerProtocol, MPSwipableViewDelegate> {
    MPVideoBackgroundView *_backgroundView;
    MPSwipableView *_backstopView;
    BOOL _batteryMonitoringWasEnabled;
    unsigned char _tvOutEnabled : 1;
    unsigned char _allowsTVOutInBackground : 1;
    long long _scaleModeOverride;
    UIActivityIndicatorView *_loadingIndicator;
    MPTVOutWindow *_tvOutWindow;
    unsigned long long _backgroundTaskId;
    unsigned char _canAnimateControlsOverlay : 1;
    unsigned char _canShowControlsOverlay : 1;
    unsigned char _disableControlsAutohide : 1;
    unsigned char _playAfterPop : 1;
    unsigned char _scheduledLoadingIndicator : 1;
    unsigned char _displayPlaybackErrorAlerts : 1;
    unsigned char _allowsDetailScrubbing : 1;
    unsigned char _attemptAutoPlayWhenControlsHidden : 1;
    unsigned char _alwaysAllowHidingControlsOverlay : 1;
    unsigned char _hasShownFirstVideoFrame : 1;
    unsigned char _allowsWirelessPlayback : 1;
    unsigned char _disableAutoRotation : 1;
    unsigned char _inlinePlaybackUsesTVOut : 1;
    UIAlertController *_alertController;
}

@property (readonly, nonatomic) BOOL canShowQTAudioOnlyUI;
@property (readonly, nonatomic) UIView<MPVideoOverlay> *videoOverlayViewIfLoaded;
@property (nonatomic) BOOL allowsTVOutInBackground;
@property (readonly, nonatomic, getter=isTransitioningToFullscreen) BOOL transitioningToFullscreen;
@property (readonly, nonatomic, getter=isTransitioningFromFullscreen) BOOL transitioningFromFullscreen;
@property (readonly, nonatomic) UIView *artworkImageView;
@property (readonly, nonatomic) BOOL showArtworkInImageView;
@property (readonly, nonatomic) BOOL showArtworkForTVOut;
@property (nonatomic) BOOL allowsDetailScrubbing;
@property (nonatomic) BOOL allowsWirelessPlayback;
@property (nonatomic) BOOL alwaysAllowHidingControlsOverlay;
@property (nonatomic) long long artworkImageStyle;
@property (nonatomic) BOOL attemptAutoPlayWhenControlsHidden;
@property (readonly, nonatomic) UIView *backgroundView;
@property (retain, nonatomic) UIColor *backstopColor;
@property (nonatomic) BOOL canAnimateControlsOverlay;
@property (readonly, nonatomic) BOOL canChangeScaleMode;
@property (nonatomic) BOOL canShowControlsOverlay;
@property (nonatomic) BOOL controlsOverlayVisible;
@property (nonatomic) unsigned long long desiredParts;
@property (nonatomic) BOOL disableAutoRotation;
@property (nonatomic) BOOL disableControlsAutohide;
@property (nonatomic) unsigned long long disabledParts;
@property (nonatomic) BOOL displayPlaybackErrorAlerts;
@property (readonly, nonatomic) _UIHostedWindow *hostedWindow;
@property (readonly, nonatomic) unsigned int hostedWindowContextID;
@property (nonatomic) BOOL inlinePlaybackUsesTVOut;
@property (nonatomic) long long itemTypeOverride;
@property (nonatomic, getter=isFullscreen) BOOL fullscreen;
@property (retain, nonatomic) UIImage *posterImage;
@property (nonatomic) long long scaleMode;
@property (nonatomic) BOOL TVOutEnabled;
@property (readonly, nonatomic) BOOL viewControllerWillRequestExit;
@property (readonly, retain, nonatomic) UIView<MPVideoOverlay> *videoOverlayView;
@property (readonly, retain, nonatomic) MPVideoView *videoView;
@property (nonatomic) unsigned long long visibleParts;
@property (nonatomic) BOOL autoPlayWhenLikelyToKeepUp;
@property (weak, nonatomic) id delegate;
@property (retain, nonatomic) MPAVItem *item;
@property (nonatomic) long long orientation;
@property (retain, nonatomic) MPAVController *player;
@property (readonly, retain, nonatomic) UIView *view;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)supportsFullscreenDisplay;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateArtworkImageViewFrameInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;

- (void)toggleScaleMode:(BOOL)a0;
- (void)_endBackgroundTask;
- (void)_videoView_applicationSuspendedNotification:(id)a0;
- (void)_videoView_applicationWillEnterForegroundNotification:(id)a0;
- (void)_exitPlayerForPlaybackError;
- (void)_popForTimeJump:(id)a0;
- (void)_videoView_availableRoutesDidChangeNotification:(id)a0;
- (void)_videoView_batteryStateDidChangeNotification:(id)a0;
- (void)_videoView_effectiveScaleModeChangedNotification:(id)a0;
- (void)videoView_playbackStateChangedNotification:(id)a0;
- (void)_videoView_isExternalPlaybackActiveDidChangeNotification:(id)a0;
- (void)_videoView_playbackErrorNotification:(id)a0;
- (void)_videoView_resumeEventsOnlyNotification:(id)a0;
- (void)_videoView_scaleModeChangedNotification:(id)a0;
- (void)removeChildViewController:(id)a0;
- (void)_videoView_sizeChangedNotification:(id)a0;
- (void)_videoView_timedImageMetadataAvailableNotification:(id)a0;
- (void)videoView_tvOutCapabilityDidChangeNotification:(id)a0;
- (void)_videoView_validityChangedNotification:(id)a0;
- (void)videoView_itemTypeAvailableNotification:(id)a0;
- (void)videoView_firstVideoFrameDisplayedNotification:(id)a0;
- (void)_updateBackgroundView:(BOOL)a0;
- (void)videoView_bufferingStateChangedNotification:(id)a0;
- (void)_itemDurationDidChange:(id)a0;
- (void)_delayedPopForTimeJump;
- (void)_delayedShowLoading;
- (void)tearDownTVOutWindow;
- (void)displayVideoViewOnScreen;
- (void)displayVideoViewOnTV;
- (void)handleScaleModeChange;
- (void)handleExternalPlaybackDidChange;
- (void)backgroundViewDidUpdate;
- (void)_showStillFrameIfNotAlreadyPlaying;
- (void)_scheduleLoadingIndicatorIfNeeded;
- (unsigned long long)disabledPartsForProposedParts:(unsigned long long)a0;
- (BOOL)_canEnableAirPlayVideoRoutes;
- (void)_delayedUpdateBackgroundView;
- (void)_hideLoadingIndicator;
- (BOOL)_showDestinationPlaceholder;
- (void)_updateIdleTimerDisabledFromPlaybackState:(long long)a0;
- (void)_updateProgressControlForItem:(id)a0;
- (id)init;
- (void).cxx_destruct;
- (void)dealloc;
- (void)viewWillDisappear:(BOOL)a0;
- (void)_screenDidConnect:(id)a0;
- (void)_screenDidDisconnect:(id)a0;
- (void)loadView;
- (void)setFullscreen:(BOOL)a0 animated:(BOOL)a1;
- (void)viewDidAppear:(BOOL)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (BOOL)canHideOverlay:(BOOL)a0;
- (void)exitFullscreen;
- (void)displayVideoView;
- (void)prepareToDisplayVideo;
- (void)setControlsNeedLayout;
- (void)setControlsOverlayVisible:(BOOL)a0 animate:(BOOL)a1;
- (void)setOwnsStatusBar:(BOOL)a0;
- (void)setControlsOverlayVisible:(BOOL)a0 animate:(BOOL)a1 force:(BOOL)a2;
- (void)setDesiredParts:(unsigned long long)a0 animate:(BOOL)a1;
- (void)setScaleModeOverride:(long long)a0 animated:(BOOL)a1;
- (void)setUseHostedWindowWhenFullscreen:(BOOL)a0;
- (void)setVisibleParts:(unsigned long long)a0 animate:(BOOL)a1;
- (void)noteIgnoredChangeTypes:(unsigned long long)a0;
- (void)setOrientation:(long long)a0 animate:(BOOL)a1;
- (void)registerForPlayerNotifications;
- (id)newArtworkImageView;
- (void)unregisterForPlayerNotifications;
- (BOOL)isFullscreenForLayoutPurposes;
- (long long)displayArtworkImageStyle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateFullScreenArtworkImageViewFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateArtworkImageViewFrame;
- (long long)_itemTypeWithActualTypePreference;
- (void)reloadArtworkImageView;
- (void)enableAirPlayVideoRoutesIfNecessary;
- (void)_updateAlwaysPlayWheneverPossible;
- (void)setScaleMode:(long long)a0 animated:(BOOL)a1;
- (unsigned long long)visiblePartsForProposedParts:(unsigned long long)a0;

@end

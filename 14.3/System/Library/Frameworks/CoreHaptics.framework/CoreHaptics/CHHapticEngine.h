@class AVHapticPlayer, HapticServerConfig, AVAudioSession, NSObject;
@protocol OS_dispatch_source, OS_dispatch_queue;

@interface CHHapticEngine : NSObject {
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    struct map<unsigned long, NSURL *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, NSURL *> > > { struct __tree<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, NSURL *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, NSURL *>, std::__1::less<unsigned long>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _publicAudioResources;
    BOOL _autoShutdownEnabled;
    BOOL _muteHapticsWhileRecordingAudio;
}

@property (readonly) AVAudioSession *avAudioSession;
@property (readonly) unsigned int audioSessionID;
@property (readonly) BOOL sessionIsShared;
@property (readonly) BOOL sessionIsConstantVolume;
@property (copy) id /* block */ clientFinishedHandler;
@property (retain) NSObject<OS_dispatch_source> *timer;
@property (readonly) AVHapticPlayer *player;
@property BOOL running;
@property unsigned long long currentPlayerBehavior;
@property (readonly) HapticServerConfig *serverConfig;
@property (nonatomic) BOOL hapticsOnly;
@property (nonatomic) BOOL audioIsMuted;
@property (nonatomic) BOOL hapticsIsMuted;
@property (nonatomic) BOOL muteHapticsWhileRecordingAudio;
@property (nonatomic) BOOL followAudioRoute;
@property (nonatomic) BOOL activateAudioSessionOnStart;
@property (nonatomic) BOOL muteAudioOnRingerOff;
@property (nonatomic) BOOL highPriority;
@property (readonly) double currentTime;
@property (copy) id /* block */ stoppedHandler;
@property (copy) id /* block */ resetHandler;
@property (nonatomic) BOOL playsHapticsOnly;
@property (nonatomic) BOOL isMutedForAudio;
@property (nonatomic) BOOL isMutedForHaptics;
@property (nonatomic, getter=isAutoShutdownEnabled) BOOL autoShutdownEnabled;

+ (void)initialize;
+ (BOOL)resourceIsRegistered:(unsigned long long)a0;
+ (BOOL)doUnregisterAudioResource:(unsigned long long)a0 fromPattern:(BOOL)a1 player:(id)a2 error:(id *)a3;
+ (void)dispatchOnGlobal:(id /* block */)a0;
+ (void)lazyInitResourceMap;
+ (BOOL)supports1stPartyHaptics;
+ (unsigned long long)doRegisterAudioResource:(id)a0 options:(id)a1 fromPattern:(BOOL)a2 player:(id)a3 error:(id *)a4;
+ (id)capabilitiesForHardware;

- (BOOL)resourceIsRegistered:(unsigned long long)a0;
- (id)init;
- (void).cxx_destruct;
- (BOOL)startAndReturnError:(id *)a0;
- (void)startWithCompletionHandler:(id /* block */)a0;
- (void)dealloc;
- (id)createPrivilegedPlayerWithPlayable:(id)a0 error:(id *)a1;
- (unsigned long long)registerAudioResource:(id)a0 options:(id)a1 error:(id *)a2;
- (void)stopAndWait;
- (id).cxx_construct;
- (id)createAdvancedPlayerWithRingtonePattern:(id)a0 error:(id *)a1;
- (id)createAdvancedPlayerWithRingtoneData:(id)a0 error:(id *)a1;
- (id)initWithAudioSessionID:(unsigned int)a0 error:(id *)a1;
- (id)initWithOptions:(id)a0 error:(id *)a1;
- (void)stopPrewarm;
- (void)handleConnectionError;
- (id)createOptionsFromAudioSessionID:(unsigned int)a0 shared:(BOOL)a1;
- (BOOL)doInitWithOptions:(id)a0 error:(id *)a1;
- (id)initAndReturnError:(id *)a0;
- (void)dispatchOnLocal:(id /* block */)a0;
- (void)setMetricsTestModeEnabled;
- (id)getMetricsForPlayer:(id)a0;
- (double)getDurationForResource:(unsigned long long)a0;
- (BOOL)doReferenceAudioResourceByID:(unsigned long long)a0;
- (id)getAvailableChannel:(id *)a0;
- (void)releaseChannel:(id)a0;
- (BOOL)checkEngineStateOnStart:(id *)a0;
- (BOOL)checkEngineRunning:(id *)a0;
- (BOOL)notifyPlayerStarted:(id)a0 atTime:(double)a1;
- (void)notifyPlayerStopped:(id)a0 atTime:(double)a1;
- (void)updatePlayerDuration:(id)a0 atTime:(double)a1;
- (BOOL)isBehaviorSet:(unsigned long long)a0;
- (void)toggleBehavior:(unsigned long long)a0 set:(BOOL)a1;
- (void)updateEngineBehavior;
- (void)handleFinish:(id)a0;
- (void)cancelIdleTimer;
- (unsigned int)getSessionIDFromAVAudioSession:(id)a0;
- (BOOL)setupUnsharedAudioSessionAndReturnError:(id *)a0;
- (id)createHapticPlayerWithOptions:(id)a0;
- (BOOL)finishInit:(id *)a0;
- (void)handleMediaServerRecovery:(id)a0;
- (void)startIdleTimerWithHandler:(id /* block */)a0;
- (void)beginIdleTimer;
- (void)doStopWithCompletionHandler:(id /* block */)a0;
- (BOOL)doStopEngineAndWait:(id *)a0;
- (void)disconnectAudioSession:(id)a0;
- (void)doUnregisterAllPublicAudioResources;
- (void)connectAudioSession:(id)a0;
- (BOOL)doStartEngineAndWait:(id *)a0;
- (BOOL)doInit:(unsigned int)a0 sessionIsShared:(BOOL)a1 error:(id *)a2;
- (void)doStartWithCompletionHandler:(id /* block */)a0;
- (struct __map_iterator<std::__1::__tree_iterator<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> *, long> > { struct __tree_iterator<std::__1::__value_type<unsigned long, NSURL *>, std::__1::__tree_node<std::__1::__value_type<unsigned long, NSURL *>, void *> *, long> { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; } x0; })doFindPublicAudioResourceID:(unsigned long long)a0;
- (unsigned long long)idForPublicAudioResourceURL:(id)a0;
- (void)addPublicAudioResourceID:(unsigned long long)a0 withURL:(id)a1;
- (BOOL)hasPublicAudioResourceID:(unsigned long long)a0;
- (void)removePublicAudioResourceID:(unsigned long long)a0;
- (BOOL)doPlayPatternFromDictionary:(id)a0 error:(id *)a1;
- (id)createPlayerWithPattern:(id)a0 error:(id *)a1;
- (void)dispatchSyncOnLocal:(id /* block */)a0;
- (long long)getReporterIDFromAVAudioSession:(id)a0;
- (BOOL)playPatternFromURL:(id)a0 error:(id *)a1;
- (id)initWithAudioSession:(id)a0 error:(id *)a1;
- (id)createPlayerWithEvent:(id)a0 error:(id *)a1;
- (id)createAdvancedPlayerWithPattern:(id)a0 error:(id *)a1;
- (BOOL)unregisterAudioResource:(unsigned long long)a0 error:(id *)a1;
- (BOOL)playPatternFromData:(id)a0 error:(id *)a1;
- (void)stopWithCompletionHandler:(id /* block */)a0;
- (id)initWithAudioSession:(id)a0 sessionIsShared:(BOOL)a1 error:(id *)a2;
- (void)prewarmWithCompletionHandler:(id /* block */)a0;
- (void)notifyWhenPlayersFinished:(id /* block */)a0;

@end

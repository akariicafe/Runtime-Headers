@class NSDictionary, PXImageModulationManager, PLImageGeometry, PXImageLayerModulator, NSMutableArray, UILongPressGestureRecognizer, NSString, UIImage, CEKBadgeTextView, NSTimer, NSMutableDictionary, NUCropModel, NUComposition, PUCropAspectFlipperView, PUAdjustmentsViewController, UIButton, NSObject, PUCropToolControllerSpec, UIView, PXUIButton, PUCropAspectViewController, PUCropPerspectiveAdjustmentsDataSource, PUCropPerspectiveView, PUCropAspect, PUEditActionActivity, PUCropHandleView, PLPhotoEditRenderer, PUCropOverlayView, PUCropVideoScrubberView, PFSerialQueue;
@protocol OS_dispatch_queue;

@interface PUCropToolController : PUPhotoEditToolController <UIGestureRecognizerDelegate, PUCropTransformedImageViewDelegate, PUCropAspectViewControllerDelegate, PUCropPerspectiveAdjustmentsDataSourceDelegate, PUAdjustmentViewControllerDelegate, PUCropVideoScrubberViewDelegate, UIPopoverPresentationControllerDelegate, PXChangeObserver>

@property (retain, nonatomic) PUAdjustmentsViewController *adjustmentsViewController;
@property (retain, nonatomic) UIView *containerView;
@property (retain, nonatomic) UIView *adjustmentPickerView;
@property (retain, nonatomic, setter=_setAutoButton:) PXUIButton *_autoButton;
@property (nonatomic) long long autoButtonMode;
@property (retain, nonatomic, setter=_setRotateButton:) PXUIButton *_rotateButton;
@property (retain, nonatomic, setter=_setFlipButton:) PXUIButton *_flipButton;
@property (retain, nonatomic, setter=_setAspectButton:) PXUIButton *_aspectButton;
@property (retain, nonatomic, setter=_setPerspectiveButton:) UIButton *_perspectiveButton;
@property (retain, nonatomic) PUEditActionActivity *overcaptureSourceToggleActivity;
@property (retain, nonatomic, setter=_setCropView:) PUCropPerspectiveView *_cropView;
@property (retain, nonatomic, setter=_setCropCanvasView:) UIView *_cropCanvasView;
@property (retain, nonatomic, setter=_setCropOverlayView:) PUCropOverlayView *_cropOverlayView;
@property (retain, nonatomic, setter=_setCropHandleViewsByHandle:) NSDictionary *_cropHandleViewsByHandle;
@property (retain, nonatomic, setter=_setSelectedCropHandleView:) PUCropHandleView *_selectedCropHandleView;
@property (retain, nonatomic, setter=_setRotateSnapshotView:) UIView *_rotateSnapshotView;
@property (retain, nonatomic) PUCropAspectViewController *cropAspectViewController;
@property (retain, nonatomic) PUCropAspectFlipperView *cropAspectFlipperView;
@property (nonatomic) struct CGSize { double width; double height; } minimumViewCropRectSizeForHandleGesture;
@property (retain, nonatomic) PUCropPerspectiveAdjustmentsDataSource *dataSource;
@property (retain, nonatomic, setter=_setInitialLocationsInHandlesByHandle:) NSMutableDictionary *_initialLocationsInHandlesByHandle;
@property (nonatomic, setter=_setInitialHandlePanCropRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _initialHandlePanCropRect;
@property (nonatomic, setter=_setContentViewsHidden:) BOOL _contentViewsHidden;
@property (nonatomic, setter=_setPreviewViewInsets:) struct UIEdgeInsets { double top; double left; double bottom; double right; } _previewViewInsets;
@property (nonatomic, setter=_setWantsPreviewViewHidden:) BOOL _wantsPreviewViewHidden;
@property (nonatomic, setter=_setIgnoreTrackingUpdates:) BOOL _ignoreTrackingUpdates;
@property (retain, nonatomic, setter=_setAnimationsByKeyPath:) NSMutableDictionary *_animationsByKeyPath;
@property (retain, nonatomic, setter=_setAnimationTargetsByKeyPath:) NSMutableDictionary *_animationTargetsByKeyPath;
@property (nonatomic, setter=_setRotatingAnimationCount:) unsigned long long _rotatingAnimationCount;
@property (nonatomic, setter=_setContentViewsHiddenAnimationCount:) unsigned long long _contentViewsHiddenAnimationCount;
@property (nonatomic, getter=_isTrackingAdjustmentControl, setter=_setTrackingAdjustmentControl:) BOOL trackingAdjustmentControl;
@property (retain, nonatomic) NSTimer *badgeShowingExpirationTimer;
@property (nonatomic) BOOL toolBadgeDoesHide;
@property (nonatomic) BOOL modelLoadingSuspended;
@property (nonatomic, setter=_setNeedsImageLoad:) BOOL _needsImageLoad;
@property (nonatomic) BOOL initialImageLoaded;
@property (nonatomic, setter=_setNeedsLivePhotoLoad:) BOOL _needsLivePhotoLoad;
@property (retain, nonatomic, setter=_setFileSystemQueue:) NSObject<OS_dispatch_queue> *_fileSystemQueue;
@property (nonatomic, getter=_isActiveTool, setter=_setActiveTool:) BOOL _activeTool;
@property (nonatomic, setter=_setNeedsModelLoad:) BOOL _needsModelLoad;
@property (nonatomic, setter=_setCropViewFrameForLastModelLoad:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _cropViewFrameForLastModelLoad;
@property (nonatomic, getter=_isModelChangeLocal, setter=_setModelChangeLocal:) BOOL _modelChangeLocal;
@property (retain, nonatomic, setter=_setLastKnownComposition:) NUComposition *_lastKnownComposition;
@property (retain, nonatomic, setter=_setRenderer:) PLPhotoEditRenderer *_renderer;
@property (retain, nonatomic, setter=_setGeometry:) PLImageGeometry *_geometry;
@property (nonatomic, setter=_setCropMode:) long long _cropMode;
@property (retain, nonatomic) NUCropModel *cropModel;
@property (retain, nonatomic, setter=_setImage:) UIImage *_image;
@property (nonatomic, setter=_setInputExtent:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputExtent;
@property (nonatomic, setter=_setViewCropRect:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _viewCropRect;
@property (nonatomic, setter=_setStraightenAngle:) double _straightenAngle;
@property (nonatomic, setter=_setPitchAngle:) double _pitchAngle;
@property (nonatomic, setter=_setYawAngle:) double _yawAngle;
@property (retain, nonatomic, setter=_setCropAspect:) PUCropAspect *_cropAspect;
@property (nonatomic, setter=_setGridVisible:) BOOL _gridVisible;
@property (nonatomic, setter=_setSuggestedCrop:) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _suggestedCrop;
@property (nonatomic, setter=_setSuggestedStraightenAngle:) double _suggestedStraightenAngle;
@property (nonatomic, setter=_setHasAutoAppliedCropSuggestion:) BOOL _hasAutoAppliedCropSuggestion;
@property (nonatomic, setter=_setHasAppliedCropSuggestion:) BOOL _hasAppliedCropSuggestion;
@property (nonatomic, setter=_setHasRequestedCropSuggestion:) BOOL _hasRequestedCropSuggestion;
@property (nonatomic, setter=_setSuggestedPitchAngle:) double _suggestedPitchAngle;
@property (nonatomic, setter=_setSuggestedYawAngle:) double _suggestedYawAngle;
@property (nonatomic, setter=_setHasAutoAppliedPerspectiveSuggestion:) BOOL _hasAutoAppliedPerspectiveSuggestion;
@property (nonatomic, setter=_setHasAppliedPerspectiveSuggestion:) BOOL _hasAppliedPerspectiveSuggestion;
@property (nonatomic, setter=_setHasRequestedPerspectiveSuggestion:) BOOL _hasRequestedPerspectiveSuggestion;
@property (retain, nonatomic) PUCropVideoScrubberView *videoScrubberView;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } videoScrubberSeekTime;
@property (nonatomic) BOOL videoScrubberIsInteracting;
@property (nonatomic) struct CGSize { double width; double height; } screenSize;
@property (nonatomic) double screenScale;
@property (retain, nonatomic) PFSerialQueue *imageLoadingQueue;
@property (retain, nonatomic) NSMutableArray *imageLoadingQueueCompletionBlocks;
@property (nonatomic) BOOL imageLoadingInProgress;
@property (retain, nonatomic, setter=_setAccessibilityLongPressGestureRecognizer:) UILongPressGestureRecognizer *_accessibilityLongPressGestureRecognizer;
@property (retain, nonatomic) CEKBadgeTextView *badgeView;
@property (nonatomic) BOOL imageHasReframeData;
@property (nonatomic) BOOL imageHasOriginalCrop;
@property (nonatomic) BOOL imageIsUsingReframe;
@property (nonatomic) BOOL autoButtonInReframeMode;
@property (nonatomic) BOOL disableSourceSwitch;
@property (retain, nonatomic) PXImageModulationManager *imageModulationManager;
@property (retain, nonatomic) PXImageLayerModulator *imageLayerModulator;
@property (readonly, nonatomic) PUCropToolControllerSpec *toolControllerSpec;
@property (retain, nonatomic) struct CGImage { } *gainMapImage;
@property (nonatomic) float gainMapValue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)filter;
- (void).cxx_destruct;
- (BOOL)wantsSecondaryToolbarVisible;
- (void)cropAspectController:(id)a0 cropAspectSelected:(id)a1;
- (void)cropAspectFlipperView:(id)a0 cropOrientationSelected:(long long)a1;
- (void)dealloc;
- (void)videoScrubberViewDidScrubTo:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)videoScrubberViewInteractionDone;
- (void)cropTransformedImageViewWillBeginTracking:(id)a0;
- (void)_layoutAdjustmentTools;
- (void)cropTransformedImageViewDidTrack:(id)a0;
- (void)cropTransformedImageViewDidEndTracking:(id)a0;
- (void)_invalidateConstraintsForKey:(id)a0;
- (BOOL)_hasConstraintsForKey:(id)a0;
- (void)_updateCropCanvasConstraintsIfNeeded;
- (void)_updateCropToggleConstraintsIfNeeded;
- (void)viewDidLayoutSubviews;
- (void)_performLocalModelChanges:(id /* block */)a0;
- (void)_performLocalCropModelChanges:(id /* block */)a0;
- (BOOL)_forceOvercaptureSourceForCrop;
- (BOOL)_overcaptureSourceUsed;
- (void)_updateRendererWithCurrentComposition;
- (void)_createRendererIfNeeded;
- (void)_loadImageIfNeededWithCompletion:(id /* block */)a0;
- (void)observable:(id)a0 didChange:(unsigned long long)a1 context:(void *)a2;
- (void)_loadLivePhotoIfNeeded;
- (void)_setupCropModelFromCompositionController:(id)a0;
- (void)_handleDidCreateEditedImage:(id)a0 inputExtent:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_handleRenderedVideoWithURL:(id)a0 originalLivePhoto:(id)a1 success:(BOOL)a2 error:(id)a3;
- (void)_performGeometryChange:(id /* block */)a0 animated:(BOOL)a1;
- (void)_removeSnapshotView:(id)a0;
- (void)_setCropAspect:(id)a0 animated:(BOOL)a1;
- (void)_setViewCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 animated:(BOOL)a1;
- (void)_setStraightenAngle:(double)a0 animated:(BOOL)a1;
- (void)_setPitchAngle:(double)a0 animated:(BOOL)a1;
- (void)_setYawAngle:(double)a0 animated:(BOOL)a1;
- (void)_cancelAnimationForKeyPath:(id)a0;
- (id)_animationForKeyPath:(id)a0;
- (void)_setAnimation:(id)a0 forKeyPath:(id)a1;
- (id)_animationTargetForKeyPath:(id)a0;
- (void)_setAnimationTarget:(id)a0 forKeyPath:(id)a1;
- (double)_defaultYawAngle;
- (long long)_defaultOrientation;
- (id)_animateValueFromValue:(double)a0 toValue:(double)a1 interpolation:(id /* block */)a2 completion:(id /* block */)a3;
- (void)_updatePreviewViewInsets;
- (void)_loadStateFromModel;
- (double)_defaultStraightenAngle;
- (double)_defaultPitchAngle;
- (void)showToolLabel;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_defaultImageCropRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_defaultViewCropRect;
- (void)_resetAllValuesAnimated:(BOOL)a0;
- (void)_resetAllValuesAnimated:(BOOL)a0 skipLayerTransformUpdate:(BOOL)a1;
- (void)baseLivePhotoInvalidated;
- (void)basePhotoInvalidated;
- (void)_loadCropSuggestionIfNeeded;
- (void)_autoApplyCropAndPerspectiveSuggestionIfNeeded;
- (void)_applyCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 straightenAngle:(double)a1 pitchAngle:(double)a2 yawAngle:(double)a3 isAutoCrop:(BOOL)a4 isSmartCrop:(BOOL)a5 isOriginalCrop:(BOOL)a6;
- (void)_applyCropAndPerspectiveSuggestion;
- (void)_applyReframeOrDynamicCrop;
- (BOOL)_hasCropSuggestion;
- (void)_toggleCropAndPerspective;
- (void)_loadPerspectiveSuggestionIfNeeded;
- (BOOL)_hasPerspectiveSuggestion;
- (struct CGPoint { double x0; double x1; })_pointForHandle:(unsigned long long)a0;
- (void)_updateCropActionButtons;
- (void)_updateOvercaptureSourceSwitchActivity;
- (void)_updateCropToggleButtonMode;
- (void)_updateCropToggleButton;
- (void)_updateCropViewsForInteraction;
- (void)_hideGridDelayed;
- (void)updateViewOrdering;
- (void)_showGridAndCancelDelayedHide;
- (void)_hideMaskedContent;
- (void)_hideMaskedContentDelayed;
- (void)_showMaskedContentAndCancelDelayedHide;
- (BOOL)_needsRecomposeCropRect;
- (void)_autoRecomposeCropRect;
- (void)_recomposeCropRectDelayed;
- (void)_cancelDelayedRecomposeCropRect;
- (void)_handleTouchingGesture:(id)a0;
- (void)_handleCropHandlePan:(id)a0;
- (struct CGVector { double x0; double x1; })_applyAspectOfCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toHandleMovement:(struct CGVector { double x0; double x1; })a1;
- (void)showVideoScrubber:(BOOL)a0;
- (void)resetToolLabelHidingTimer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_cropRectFromPanningHandle:(unsigned long long)a0 byAmount:(struct CGVector { double x0; double x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_addWidth:(double)a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 anchorLeft:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_addHeight:(double)a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 anchorTop:(BOOL)a2;
- (struct CGVector { double x0; double x1; })_correctInputVector:(struct CGVector { double x0; double x1; })a0 forHandle:(unsigned long long)a1 onCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 lockDirection:(BOOL)a3;
- (struct CGVector { double x0; double x1; })_deltaMaskForHandle:(unsigned long long)a0;
- (struct CGPoint { double x0; double x1; })_pointForHandle:(unsigned long long)a0 onCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_cropCanvasFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_suggestedCropRectForImageRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_recomposeCropRectAnimated:(BOOL)a0;
- (void)updateCropAspectRatioOrientation:(long long)a0;
- (void)createVideoScrubber;
- (void)showBadgeView:(BOOL)a0 animated:(BOOL)a1;
- (void)updateVideoFrameWithScrubber;
- (BOOL)wantsDefaultPreviewView;
- (void)prepareForToolTransitionWithCompletion:(id /* block */)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })preferredPreviewViewInsets;
- (BOOL)suppressesEditUpdates;
- (BOOL)handlesMediaViewInsets;
- (void)_setContentViewsHidden:(BOOL)a0 animated:(BOOL)a1;
- (BOOL)canBecomeActiveTool;
- (void)prepareForSave:(BOOL)a0;
- (void)_setContentViewsHidden:(BOOL)a0 animated:(BOOL)a1 completion:(id /* block */)a2;
- (void)_installRenderedImageAndDisplayIfNeeded;
- (void)willResignActiveTool;
- (void)leavingEditWithCancel;
- (void)handleResigningCropTool;
- (void)didResignActiveTool;
- (id)leadingToolbarViews;
- (id)trailingToolbarViews;
- (void)_rotateButtonTapped:(id)a0;
- (void)_flipButtonTapped:(id)a0;
- (void)_gridButtonTapped:(id)a0;
- (void)_closeAspectRatioPicker;
- (void)_aspectButtonTapped:(id)a0;
- (void)_cropToggleTapped:(id)a0;
- (void)_toggleOvercaptureSource;
- (void)_preferredContentSizeCategoryChanged;
- (id)localizedName;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void)updateViewConstraints;
- (void)adjustmentsDataChanged:(id)a0;
- (id)adjustmentsRenderer:(id)a0;
- (void)adjustmentsViewControllerToolWillBeginScrubbing:(id)a0;
- (void)adjustmentsViewControllerToolDidEndScrubbing:(id)a0;
- (void)adjustmentsViewControllerSliderWillBeginScrubbing:(id)a0;
- (void)adjustmentsViewControllerSliderDidEndScrubbing:(id)a0;
- (void)adjustmentsViewControllerDidUpdateSelectedControl:(id)a0;
- (void)setupWithAsset:(id)a0 compositionController:(id)a1 editSource:(id)a2 overcaptureEditSource:(id)a3 valuesCalculator:(id)a4;
- (void)_updateBadgeTextWithInfo:(id)a0;
- (id)toolbarIcon;
- (id)centerToolbarView;
- (BOOL)canResetToDefaultValue;
- (id)localizedResetToolActionTitle;
- (void)resetToDefaultValueAnimated:(BOOL)a0;
- (BOOL)installTogglePreviewGestureRecognizer:(id)a0;
- (long long)toolControllerTag;
- (void)willBecomeActiveTool;
- (void)didBecomeActiveTool;
- (void)setLayoutOrientation:(long long)a0 withTransitionCoordinator:(id)a1;
- (void)compositionControllerDidChangeForAdjustments:(id)a0;
- (void)viewWillAppear:(BOOL)a0;
- (void)_accessibilityLongPressChanged:(id)a0;
- (void)viewDidAppear:(BOOL)a0;
- (void)setDelegate:(id)a0;
- (id)initWithNibName:(id)a0 bundle:(id)a1;
- (void)_hideGrid;
- (void)viewDidLoad;

@end

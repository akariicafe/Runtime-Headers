@class NSString, CADisplayLink, UIImage, UIScrollView, UIView;
@protocol PUUserTransformViewDelegate;

@interface PUUserTransformView : UIView <UIScrollViewDelegate> {
    struct { BOOL respondsToShouldReceiveTouchAtPoint; BOOL respondsToDidChangeIsUserInteracting; } _delegateFlags;
}

@property (readonly, nonatomic) UIScrollView *_scrollView;
@property (readonly, nonatomic) UIView *_scrollContentView;
@property (nonatomic, setter=_setDoubleTapZoomScale:) double _doubleTapZoomScale;
@property (nonatomic, getter=_isUpdatingScrollView, setter=_setUpdatingScrollView:) BOOL _updatingScrollView;
@property (nonatomic, setter=_setUserPanning:) BOOL _isUserPanning;
@property (nonatomic, setter=_setUserDeceleratingPan:) BOOL _isUserDeceleratingPan;
@property (nonatomic, setter=_setUserZooming:) BOOL _isUserZooming;
@property (nonatomic, setter=_setUserEndingZoom:) BOOL _isUserEndingZoom;
@property (nonatomic, setter=_setUserPanningOrDecelerating:) BOOL _isUserPanningOrDecelerating;
@property (nonatomic, setter=_setUserZoomingOrBouncing:) BOOL _isUserZoomingOrBouncing;
@property (nonatomic, setter=_setUserInteracting:) BOOL isUserInteracting;
@property (nonatomic, setter=_setShouldTrackContentAnimation:) BOOL _shouldTrackContentAnimation;
@property (nonatomic, setter=_setContentAnimating:) BOOL _isContentAnimating;
@property (nonatomic, setter=_setContentCenter:) struct CGPoint { double x; double y; } _contentCenter;
@property (nonatomic, setter=_setContentZoomScale:) double _contentZoomScale;
@property (nonatomic, setter=_setAnimatingZoomEnd:) BOOL _isAnimatingZoomEnd;
@property (nonatomic, setter=_setNumberOfNestedStateChanges:) long long _numberOfNestedStateChanges;
@property (nonatomic, setter=_setUpdatingState:) BOOL _isUpdatingState;
@property (nonatomic, setter=_setWasUserInteractingBeforeStateUpdate:) BOOL _wasUserInteractingBeforeStateUpdate;
@property (nonatomic, setter=_setNeedsUpdateUserPanningOrDecelerating:) BOOL _needsUpdateUserPanningOrDecelerating;
@property (nonatomic, setter=_setNeedsUpdateUserZoomingOrBouncing:) BOOL _needsUpdateUserZoomingOrBouncing;
@property (nonatomic, setter=_setNeedsUpdateUserInteracting:) BOOL _needsUpdateUserInteracting;
@property (nonatomic, setter=_setNeedsUpdateShouldTrackContentAnimation:) BOOL _needsUpdateShouldTrackContentAnimation;
@property (nonatomic, setter=_setNeedsUpdateUserAffineTransform:) BOOL _needsUpdateUserAffineTransform;
@property (nonatomic, setter=_setNeedsUpdateContentState:) BOOL _needsUpdateContentState;
@property (nonatomic, setter=_setNeedsUpdateAnimatingZoomEnd:) BOOL _needsUpdateAnimatingZoomEnd;
@property (retain, nonatomic, setter=_setDisplayLink:) CADisplayLink *_displayLink;
@property (nonatomic, setter=_setDesiredZoomScale:) double _desiredZoomScale;
@property (nonatomic, setter=_setPreferredMinimumZoomScale:) double _preferredMinimumZoomScale;
@property (nonatomic, setter=_setPreferredMaximumZoomScale:) double _preferredMaximumZoomScale;
@property (nonatomic, setter=_setNumberOfNestedZoomAndScrollChanges:) long long _numberOfNestedZoomAndScrollChanges;
@property (nonatomic, setter=_setNeedsUpdateZoomAndScroll:) BOOL _needsUpdateZoomAndScroll;
@property (nonatomic, setter=_setNeedsUpdateScrollView:) BOOL _needsUpdateScrollView;
@property (retain, nonatomic) UIImage *debugScrollViewContentImage;
@property (weak, nonatomic) id<PUUserTransformViewDelegate> delegate;
@property (nonatomic) struct CGSize { double width; double height; } contentPixelSize;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } untransformedContentFrame;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } userAffineTransform;
@property (nonatomic) unsigned long long enabledInteractions;
@property (nonatomic) struct CGSize { double width; double height; } scrollPadding;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (struct CGPoint { double x0; double x1; })_contentOffsetAdjustmentForContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_invalidateUserZoomingOrBouncing;
- (void)scrollViewDidZoom:(id)a0;
- (void)_updateUserAffineTransformIfNeeded;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_contentInsetsForContentScale:(double)a0;
- (void).cxx_destruct;
- (void)scrollViewDidScroll:(id)a0;
- (void)_assertInsideZoomAndScrollChangeBlock;
- (void)handleDoubleTapWithLocationProvider:(id)a0;
- (BOOL)_needsStateUpdate;
- (void)_setNeedsStateUpdate;
- (void)_performZoomAndScrollChanges:(id /* block */)a0;
- (void)_updateAnimatingZoomEndIfNeeded;
- (void)_updateDisplayLink;
- (void)_invalidateAnimatingZoomEnd;
- (void)_willChangeState;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)_updateUserInteractingIfNeeded;
- (void)_updateShouldTrackContentAnimationIfNeeded;
- (void)scrollViewDidEndDecelerating:(id)a0;
- (void)_invalidateScrollView;
- (void)_handleDisplayLink:(id)a0;
- (void)_updateUserPanningOrDeceleratingIfNeeded;
- (void)_updateZoomAndScrollIfNeeded;
- (void)layoutSubviews;
- (void)scrollViewDidEndZooming:(id)a0 withView:(id)a1 atScale:(double)a2;
- (void)_assertInsideStateChangeBlock;
- (void)_didChangeState;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_invalidateContentState;
- (void)_invalidateZoomAndScroll;
- (id)viewForZoomingInScrollView:(id)a0;
- (void)_assertInsideStateUpdate;
- (void)_setUserAffineTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)_invalidateShouldTrackContentAnimation;
- (void)_setEnabledInteractions:(unsigned long long)a0;
- (void)_invalidateUserAffineTransform;
- (void)_updateStateIfNeeded;
- (void)_invalidateUserPanningOrDecelerating;
- (void)scrollViewDidEndDragging:(id)a0 willDecelerate:(BOOL)a1;
- (void)_updateScrollViewIfNeeded;
- (void)scrollViewWillBeginZooming:(id)a0 withView:(id)a1;
- (void)_updateContentStateIfNeeded;
- (void)_performStateChanges:(id /* block */)a0;
- (void)scrollViewWillBeginDragging:(id)a0;
- (void)_invalidateUserInteracting;
- (BOOL)contentContainsLocationFromProvider:(id)a0;
- (void)_updateUserZoomingOrBouncingIfNeeded;

@end

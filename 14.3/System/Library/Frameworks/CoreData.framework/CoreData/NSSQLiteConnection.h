@class NSString, NSArray, NSURL, NSSQLCore, NSSQLEntity, NSMutableDictionary, NSSQLSaveChangesRequestContext, NSObject, NSSQLiteStatement, NSMutableSet, NSMutableArray, NSSQLitePrefetchRequestCache;
@protocol OS_dispatch_queue;

@interface NSSQLiteConnection : NSObject {
    NSObject<OS_dispatch_queue> *_queue;
    NSSQLCore *_sqlCore;
    NSURL *_workingURL;
    NSString *_dbPath;
    BOOL _transactionIsOpen;
    BOOL _transactionIsCurrentlyReadOnly;
    BOOL _useSyntaxColoredLogging;
    NSSQLiteStatement *_sqlStatement;
    NSArray *_columnsToFetch;
    NSArray *_metadataColumns;
    struct sqlite3 { } *_db;
    struct sqlite3_stmt { } *_vmstatement;
    int _rowsProcessedCount;
    unsigned int _lastEntityKey;
    NSSQLEntity *_finalEntity;
    NSSQLEntity *_lastEntity;
    struct sqlite3_stmt { } *_fetchPKStatement;
    struct sqlite3_stmt { } *_updatePKStatement;
    NSSQLiteStatement *_beginStatement;
    NSSQLiteStatement *_commitStatement;
    NSSQLiteStatement *_rollbackStatement;
    struct __CFDictionary { } *_vmCachedStatements;
    NSMutableDictionary *_pragmaSettings;
    NSMutableSet *_mObjectIDsUpdatedByTriggers;
    NSMutableArray *_mObjectIDsInsertedByDATriggers;
    NSMutableArray *_mObjectIDsUpdatededByDATriggers;
    NSSQLSaveChangesRequestContext *_saveRequest;
    struct __CFDictionary { } *_statementCachesByEntity;
    NSSQLitePrefetchRequestCache *_prefetchRequestCache;
    struct __CFDictionary { } *_cachedEntityUpdateStatements;
    struct __CFDictionary { } *_cachedEntityConstrainedValuesUpdateStatements;
    double _timeOutOption;
    double _timeOutIncrement;
    void *_extraBuffersForRegisteredFunctions[5];
    NSString *_dbPathRegisteredWithBackupd;
    long long _vacuumTracker;
    NSMutableArray *_temporaryTables;
    struct __sqliteConnectionFlags { unsigned char _readyToBind : 1; unsigned char _fetchInProgress : 1; unsigned char _fileSystemType : 2; unsigned char _proxyLocking : 1; unsigned char _vacuumSetupNeeded : 1; unsigned char _usingWAL : 1; unsigned char _disallowReconnect : 1; unsigned char _isWriter : 1; unsigned char _didSnapshotRecovery : 1; unsigned char _hasTransactionStringTable : 1; unsigned char _isQueryGenTracking : 1; unsigned int _reserved : 20; } _sqliteConnectionFlags;
    unsigned long long _debugInode;
    NSMutableArray *_activeGenerations;
    NSMutableDictionary *_transactionStringName;
    NSMutableDictionary *_usedIndexes;
}

@property (nonatomic) BOOL isWriter;

+ (void)initialize;
+ (int)openAtPath:(const char *)a0 withKey:(id)a1 handle:(struct sqlite3 **)a2 flags:(int)a3 module:(const char *)a4 checkpointOnClose:(BOOL)a5;
+ (BOOL)_replacePersistentStoreAtURL:(id)a0 destinationOptions:(id)a1 withPersistentStoreFromURL:(id)a2 sourceOptions:(id)a3 error:(id *)a4;
+ (const char *)_databaseOpenURLStringForURL:(id)a0;
+ (void)_setDebugFlags:(int)a0;
+ (int)readMagicWordFromPath:(const char *)a0 options:(id)a1;
+ (BOOL)_destroyPersistentStoreAtURL:(id)a0 options:(id)a1 error:(id *)a2;
+ (BOOL)_rekeyPersistentStoreAtURL:(id)a0 options:(id)a1 withKey:(id)a2 error:(id *)a3;
+ (void)__INode_Changed_AllThatIsLeftToUsIsHonor__;

- (void)connect;
- (id)reopenQueryGenerationWithIdentifier:(id)a0 error:(id *)a1;
- (void)disconnect;
- (id)_createInsertStatementForEntity:(id)a0;
- (BOOL)_useContextObjects;
- (int)freeQueryGenerationWithIdentifier:(id)a0;
- (id)connectionManager;
- (void)_configureIntegrityCheck;
- (void)triggerUpdatedRowInTable:(const char *)a0 withEntityID:(long long)a1 primaryKey:(long long)a2 columnName:(const char *)a3 newValue:(long long)a4;
- (id)fetchCreationSQLForType:(id)a0 containing:(id)a1;
- (void)_batchInsertThrowWithErrorCode:(int)a0 andMessage:(id)a1 forKey:(id)a2 andValue:(id)a3 additionalDetail:(id)a4;
- (id)statementCacheForEntity:(id)a0;
- (void)beginTransaction;
- (BOOL)_hasSaveRequest;
- (id)newFetchedArray;
- (id)_createInsertStatementsForEntities:(id)a0;
- (void)selectRowsWithStatement:(id)a0 cached:(BOOL)a1;
- (void)setColumnsToFetch:(id)a0;
- (int)registerCurrentQueryGenerationWithStore:(id)a0;
- (void)addPeerRange:(id)a0;
- (void)_executeSQLString:(id)a0;
- (void)createPrimaryKeyTableForModel:(id)a0 knownEmpty:(BOOL)a1;
- (void)createTriggersForEntities:(id)a0;
- (void)prepareAndExecuteSQLStatement:(id)a0;
- (BOOL)hasOpenTransaction;
- (BOOL)setUpIndexTracking;
- (id)_decompressedModelWithData:(id)a0;
- (id)createArrayOfPrimaryKeysAndEntityIDsForRowsWithoutRecordMetadataWithEntity:(id)a0 metadataEntity:(id)a1;
- (id)cachedUpdateConstrainedValuesStatmentForEntity:(id)a0;
- (id)initAsQueryGenerationTrackingConnectionForSQLCore:(id)a0;
- (void)_ensureNoFetchInProgress;
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)a0;
- (void **)_buffersForRegisteredFunctions;
- (void)insertReorderUpdates:(id)a0 transactionID:(long long)a1 context:(id)a2;
- (void)_ensureNoTransactionOpen;
- (long long)fetchMaxPrimaryKeyForEntity:(id)a0;
- (void)transactionDidCommit;
- (BOOL)_hasTableWithName:(id)a0 isTemp:(BOOL)a1;
- (void)insertBatchInserts:(id)a0 transactionID:(long long)a1;
- (BOOL)hasAttributeChanges:(id)a0;
- (id)ubiquityTableKeysAndValues;
- (BOOL)isOpen;
- (void)willCreateSchema;
- (void)_finalizeStatement;
- (BOOL)hasCachedModelTable;
- (id)fetchCachedModel;
- (void)insertBatchDeleteChangesForTransactionID:(long long)a0;
- (id)createMapOfEntityNameToPKMaxForEntities:(id)a0;
- (int)fetchBufferResultSet:(void *)a0 usingFetchPlan:(id)a1;
- (void)derivedAttributeUpdatedInsertedRowInTable:(const char *)a0 withEntityID:(long long)a1 primaryKey:(long long)a2 columnName:(const char *)a3 newValue:(id)a4;
- (void)writeCorrelationReordersFromTracker:(id)a0;
- (void)_ensureNoStatementPrepared;
- (void)_dropOldHistoryTrackingTablesV1;
- (void)createManyToManyTablesForEntity:(id)a0;
- (void)processInsertRequest:(id)a0 withOIDs:(id)a1;
- (BOOL)registerMigrationUpdateFunctionWithMigrator:(id)a0;
- (void)_dropAllDATriggers;
- (BOOL)_hasTableWithName:(id)a0;
- (BOOL)_hasOldHistoryTrackingTables;
- (void)_ensureDatabaseOpen;
- (void)addPeerRangeForPeerID:(id)a0 entityName:(id)a1 rangeStart:(id)a2 rangeEnd:(id)a3 peerRangeStart:(id)a4 peerRangeEnd:(id)a5;
- (void)rollbackTransaction;
- (id)adapter;
- (void)processMigrationRequestForHash:(id)a0;
- (id)currentQueryGenerationIdentifier;
- (void)setExclusiveLockingMode:(BOOL)a0;
- (void)executeCorrelationChangesForValue1:(unsigned long long)a0 value2:(unsigned long long)a1 value3:(unsigned long long)a2 value4:(unsigned long long)a3;
- (void)dealloc;
- (void)execute;
- (id)newFetchUUIDSForSubentitiesRootedAt:(id)a0;
- (void)updateUbiquityKnowledgeVector:(id)a0;
- (void)cacheUpdateStatement:(id)a0 forEntity:(id)a1 andDeltasMask:(struct __CFBitVector { } *)a2;
- (void)_clearTransactionCaches;
- (unsigned long long)_countOfVMCachedStatements;
- (void)createTableForEntity:(id)a0;
- (void)_configurePageSize;
- (void)_configureAutoVacuum;
- (id)fetchIndexCreationSQL;
- (int)_adoptQueryGenerationWithSnapshot:(id)a0;
- (void)updateConstrainedValuesForRow:(id)a0;
- (void)cacheCurrentDBStatementOn:(id)a0;
- (BOOL)selectCountWithStatement:(id)a0;
- (void)clearObjectIDsUpdatededByDATriggers;
- (long long)_ensureWalFileExists;
- (void)processUpdateRequest:(id)a0 withOIDs:(id)a1 forAttributes:(id)a2;
- (void)createTablesForEntities:(id)a0;
- (int)logQueryPlanForStatement:(id)a0;
- (int)_rowsChangedByLastExecute;
- (int)adoptQueryGenerationWithIdentifier:(id)a0;
- (id)fetchTableCreationSQL;
- (BOOL)addTransactionStringColumnsToTransactionTable;
- (BOOL)_hasOldHistoryTrackingTablesV1;
- (unsigned long long)percentageUsedByPersistentHistory;
- (void)clearPrefetchRequestCache;
- (void)_clearBindVariablesForConstrainedValuesUpdateStatement:(id)a0;
- (BOOL)addTombstoneColumnsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_dropOldHistoryTrackingTablesV0;
- (long long)_getCurrentAutoVacuumValue;
- (void)writeCorrelationChangesFromTracker:(id)a0;
- (void)clearObjectIDsUpdatedByTriggers;
- (id)fetchMetadata;
- (void)_clearOtherStatements;
- (void)_performPostSaveTasks:(BOOL)a0 andForceFullVacuum:(BOOL)a1;
- (BOOL)_hasTempTableWithName:(id)a0;
- (void)configureUbiquityMetadataTable;
- (void)setSecureDeleteMode:(BOOL)a0;
- (void)_bindVariablesWithDeletedRow:(id)a0;
- (void)prepareInsertStatementForEntity:(id)a0 includeConstraints:(BOOL)a1 includeOnConflict:(BOOL)a2;
- (id)_lastInsertRowID;
- (void)writeCorrelationInsertsFromTracker:(id)a0;
- (void)_configureSynchronousMode;
- (id)_currentQueryGenerationSnapshot:(id *)a0;
- (void)cacheUpdateConstrainedValuesStatement:(id)a0 forEntity:(id)a1;
- (int)registerCurrentQueryGenerationWithStore:(id)a0 retries:(unsigned long long)a1;
- (void)writeCorrelationDeletesFromTracker:(id)a0;
- (id)processRelationshipUpdates:(id)a0 forRequestContext:(id)a1;
- (id)sqlStatement;
- (int)_registerNewQueryGenerationSnapshot:(id)a0;
- (unsigned long long)insertArray:(id)a0 forEntity:(id)a1 includeOnConflict:(BOOL)a2;
- (id)columnsToFetch;
- (void)_clearSaveGeneratedCachedStatements;
- (unsigned long long)pagesInStore;
- (id)fetchTriggerCreationSQL;
- (id)createSetOfObjectIDsUpdatedByDATriggers;
- (id)_insertTransactionStringsForRequestContext:(id)a0;
- (void)replaceUbiquityKnowledgeVector:(id)a0;
- (id)executeMulticolumnUniquenessCheckSQLStatement:(id)a0 returningColumns:(id)a1;
- (BOOL)databaseIsEmpty;
- (void)_clearSaveRequest;
- (void)saveCachedModel:(id)a0;
- (void)dropHistoryBeforeTransactionID:(id)a0;
- (id)fetchTableNames;
- (void)transactionDidRollback;
- (id)hasAncillaryEntitiesInHistory;
- (void)bindTempTableForBindIntarray:(id)a0;
- (BOOL)hasTransactionStringColumnsInTransactionTable;
- (void)derivedAttributeUpdatedRowInTable:(const char *)a0 withEntityID:(long long)a1 primaryKey:(long long)a2 columnName:(const char *)a3 newValue:(id)a4;
- (long long)_countOfRowsInTable:(id)a0;
- (void)_clearBindVariablesForInsertedRow;
- (long long)_insertTransactionForRequestContext:(id)a0 andStrings:(id)a1;
- (id)createSetOfObjectIDsInsertUpdatedByDATriggers;
- (BOOL)performIntegrityCheck;
- (void)updateUbiquityKnowledgeForPeerWithID:(id)a0 andTransactionNumber:(id)a1;
- (id)_entitiesWithDeferredMigration;
- (struct __CFArray { } *)copyRawIntegerRowsForSQL:(id)a0;
- (id)_transactionsStringAndPKsForStrings:(id)a0;
- (void)createMissingHistoryTables;
- (void)prepareSQLStatement:(id)a0;
- (id)_createTransactionStringWithName:(id)a0;
- (unsigned long long)pagesUsedByTables:(id)a0;
- (void)processExternalDataReferenceFilesDeletedByRequest:(id)a0;
- (void)_clearBindVariablesForUpdateStatement:(id)a0 forDeltasMask:(struct __CFBitVector { } *)a1;
- (void)processDeleteRequest:(id)a0;
- (void)processSaveRequest:(id)a0;
- (id)transactionStringForName:(id)a0;
- (id)metadataColumns;
- (void)dropUbiquityTables;
- (void)forceTransactionClosed;
- (void)transactionDidBegin;
- (void)_performBlock:(id /* block */)a0;
- (void)_validateProperty:(id)a0 withValue:(id)a1;
- (BOOL)hasHistoryRows;
- (id)executeAttributeUniquenessCheckSQLStatement:(id)a0 returningColumns:(id)a1;
- (void)bindTempTablesForStatementIfNecessary:(id)a0;
- (id)gatherObjectIDsAndAttributeNamesFromTable:(id)a0;
- (void)insertUpdates:(id)a0 transactionID:(long long)a1 updatedAttributes:(id)a2;
- (BOOL)isFetchInProgress;
- (id)_dropTableStatementsForTempOfEntities:(id)a0;
- (BOOL)_tableHasRows:(id)a0;
- (void)createMetadata;
- (id)ubiquityTableValueForKey:(id)a0;
- (id)_createTableStatementsForEntities:(id)a0;
- (BOOL)_isQueryGenerationTrackingConnection;
- (long long)generatePrimaryKeysForEntity:(id)a0 batch:(unsigned int)a1;
- (BOOL)hasPrimaryKeyTable;
- (void)_bindVariablesWithUpdatedRow:(id)a0 andOriginalRow:(id)a1 forDeltasMask:(struct __CFBitVector { } *)a2;
- (void)addVMCachedStatement:(id)a0;
- (void)clearObjectIDsInsertUpdatededByDATriggers;
- (id)_checkActiveGenerationsForIdentfier:(id)a0;
- (void)_dropOldHistoryTrackingTables;
- (id)allPeerRanges;
- (void)writeCorrelationMasterReordersFromTracker:(id)a0;
- (void)_registerExtraFunctions;
- (void)didCreateSchema;
- (id)_tempNameForTableName:(id)a0;
- (BOOL)hasHistoryTransactionWithNumber:(id)a0;
- (void)_endFetch;
- (void)setUbiquityTableValue:(id)a0 forKey:(id)a1;
- (unsigned long long)numberOfTombstones;
- (BOOL)_hasHistoryTransactionStringTable;
- (id)gatherObjectIDsFromTable:(id)a0;
- (id)_compressedDataWithModel:(id)a0;
- (void)handleCorruptedDB:(id)a0;
- (id)cachedUpdateStatementForEntity:(id)a0 andDeltasMask:(struct __CFBitVector { } *)a1;
- (void)createCachedModelTable;
- (void)beginReadTransaction;
- (struct sqlite3_stmt { } *)_vmstatement;
- (int)fetchResultSet:(void *)a0 usingFetchPlan:(id)a1;
- (BOOL)finishDeferredLightweightMigration:(BOOL)a0;
- (void)createIndexesForEntity:(id)a0;
- (unsigned long long)insertDictionaryBlock:(id /* block */)a0 forEntity:(id)a1 includeOnConflict:(BOOL)a2;
- (unsigned long long)insertManagedObjectBlock:(id /* block */)a0 forEntity:(id)a1 includeOnConflict:(BOOL)a2;
- (void)_setSaveRequest:(id)a0;
- (int)rowsChangedByLastStatement;
- (void)updateRow:(id)a0 forRequestContext:(id)a1;
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)a0;
- (void)_bindVariablesWithInsertedRow:(id)a0;
- (long long)_fetchMaxPrimaryKeyForEntity:(id)a0;
- (BOOL)_dropTableWithName:(id)a0;
- (void)_setupVacuumIfNecessary;
- (id)createSetOfObjectIDsUpdatedByTriggers;
- (void)_dropAllTriggers;
- (void)releaseSQLStatement;
- (void)_clearCachedStatements;
- (id)_newValueForColumn:(id)a0 atIndex:(unsigned int)a1 inStatement:(struct sqlite3_stmt { } *)a2;
- (void)endFetchAndRecycleStatement:(BOOL)a0;
- (BOOL)_hasOldHistoryTrackingTablesV0;
- (id)prefetchRequestCache;
- (BOOL)recreateIndices;
- (void)insertRow:(id)a0;
- (void)_restoreBusyTimeOutSettings;
- (id)initForSQLCore:(id)a0;
- (BOOL)deleteRow:(id)a0 forRequestContext:(id)a1;
- (void)_bindVariablesForConstrainedValuesWithRow:(id)a0;
- (void)prepareInsertStatementForAncillaryEntity:(id)a0;
- (void)performAndWait:(id /* block */)a0;
- (void)saveMetadata:(id)a0;
- (BOOL)hasMetadataTable;
- (void)resetSQLStatement;
- (id)_alterTableStatementsForEntities:(id)a0;
- (void)createSchema;
- (BOOL)isLocalFS;
- (void)_forceDisconnectOnError;
- (id)harvestUsedIndexes;
- (id)_insertTransactionStringForMigrationAuthor:(id)a0;
- (void)insertChanges:(id)a0 type:(long long)a1 transactionID:(long long)a2 context:(id)a3;
- (void)_dropKnownHistoryTrackingTables;
- (id)indexesUsedByStatement:(id)a0;
- (BOOL)hasIndexTrackingTable;
- (id)fetchUbiquityKnowledgeVector;
- (id)fetchTableCreationSQLContaining:(id)a0;
- (void)dropIndexTrackingTable;
- (void)dropHistoryTrackingTables;
- (void)commitTransaction;
- (BOOL)canConnect;
- (void)uncacheVMStatement:(id)a0;
- (BOOL)_hasPersistentHistoryTables;
- (void)_configurePragmaOptions:(int)a0 createdSchema:(BOOL)a1;

@end

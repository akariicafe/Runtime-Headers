@class NSArray, NSMutableArray;

@interface _CTFontFallbacksArray : NSArray {
    struct TUnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } fLock; } _lock;
    const struct TBaseFont { void /* function */ **x0; struct atomic<int> { struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> > { _Atomic int x0; } x0; } x1; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x2; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x3; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x4; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x5; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x6; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x7; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x8; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x9; struct TCFRef<const __CFData *> { struct atomic<const __CFData *> { struct __cxx_atomic_impl<const __CFData *, std::__1::__cxx_atomic_base_impl<const __CFData *> > { _Atomic struct __CFData *x0; } x0; } x0; } x10; struct TCFRef<const __CFURL *> { struct atomic<const __CFURL *> { struct __cxx_atomic_impl<const __CFURL *, std::__1::__cxx_atomic_base_impl<const __CFURL *> > { _Atomic struct __CFURL *x0; } x0; } x0; } x11; struct TCFRef<const __CFString *> { struct atomic<const __CFString *> { struct __cxx_atomic_impl<const __CFString *, std::__1::__cxx_atomic_base_impl<const __CFString *> > { _Atomic struct __CFString *x0; } x0; } x0; } x12; struct TCFRef<const __CFString *> { struct atomic<const __CFString *> { struct __cxx_atomic_impl<const __CFString *, std::__1::__cxx_atomic_base_impl<const __CFString *> > { _Atomic struct __CFString *x0; } x0; } x0; } x13; struct TCFRef<CGFont *> { struct atomic<CGFont *> { struct __cxx_atomic_impl<CGFont *, std::__1::__cxx_atomic_base_impl<CGFont *> > { _Atomic struct CGFont *x0; } x0; } x0; } x14; struct TUnfairLock { struct os_unfair_lock_s { unsigned int x0; } x0; } x15; struct TCFRef<__CFDictionary *> { struct atomic<__CFDictionary *> { struct __cxx_atomic_impl<__CFDictionary *, std::__1::__cxx_atomic_base_impl<__CFDictionary *> > { _Atomic struct __CFDictionary *x0; } x0; } x0; } x16; struct TCFRef<const __CFArray *> { struct atomic<const __CFArray *> { struct __cxx_atomic_impl<const __CFArray *, std::__1::__cxx_atomic_base_impl<const __CFArray *> > { _Atomic struct __CFArray *x0; } x0; } x0; } x17[2]; struct TCFRef<const __CFCharacterSet *> { struct atomic<const __CFCharacterSet *> { struct __cxx_atomic_impl<const __CFCharacterSet *, std::__1::__cxx_atomic_base_impl<const __CFCharacterSet *> > { _Atomic struct __CFCharacterSet *x0; } x0; } x0; } x18[2]; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x19; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x20; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x21; unsigned int x22; struct TCFRef<const __CFCharacterSet *> { struct atomic<const __CFCharacterSet *> { struct __cxx_atomic_impl<const __CFCharacterSet *, std::__1::__cxx_atomic_base_impl<const __CFCharacterSet *> > { _Atomic struct __CFCharacterSet *x0; } x0; } x0; } x23; struct atomic<long> { struct __cxx_atomic_impl<long, std::__1::__cxx_atomic_base_impl<long> > { _Atomic long long x0; } x0; } x24; struct atomic<const TBMPDataCache *> { struct __cxx_atomic_impl<const TBMPDataCache *, std::__1::__cxx_atomic_base_impl<const TBMPDataCache *> > { _Atomic struct TBMPDataCache *x0; } x0; } x25; struct atomic<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short> > > *> { struct __cxx_atomic_impl<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short> > > *, std::__1::__cxx_atomic_base_impl<const std::__1::unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short> > > *> > { _Atomic struct unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short> > > *x0; } x0; } x26; struct atomic<unsigned short> { struct __cxx_atomic_impl<unsigned short, std::__1::__cxx_atomic_base_impl<unsigned short> > { _Atomic unsigned short x0; } x0; } x27; struct TUnfairLock { struct os_unfair_lock_s { unsigned int x0; } x0; } x28; struct pair<const unsigned short *, const unsigned short *> { unsigned short *x0; unsigned short *x1; } x29; struct atomic<TTraitsValues *> { struct __cxx_atomic_impl<TTraitsValues *, std::__1::__cxx_atomic_base_impl<TTraitsValues *> > { _Atomic struct TTraitsValues *x0; } x0; } x30; struct StrikeMetrics { double x0; double x1; double x2; unsigned int x3; struct CGPoint { double x0; double x1; } x4; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x5; BOOL x6; } x31; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x32; struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> > { _Atomic unsigned int x0; } x0; } x33; struct atomic<CTFontFormat> { struct __cxx_atomic_impl<CTFontFormat, std::__1::__cxx_atomic_base_impl<CTFontFormat> > { _Atomic unsigned int x0; } x0; } x34; struct TUnfairLock { struct os_unfair_lock_s { unsigned int x0; } x0; } x35; struct array<std::__1::unordered_map<unsigned int, OTL::Lookup, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, OTL::Lookup> > >, 2> { struct unordered_map<unsigned int, OTL::Lookup, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, OTL::Lookup> > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, OTL::Lookup> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> **x0; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> *> > { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, OTL::Lookup>, void *> *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::hash<unsigned int>, true> > { unsigned long long x0; } x2; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, OTL::Lookup>, std::__1::equal_to<unsigned int>, true> > { float x0; } x3; } x0; } x0[2]; } x36; struct atomic<unsigned short> { struct __cxx_atomic_impl<unsigned short, std::__1::__cxx_atomic_base_impl<unsigned short> > { _Atomic unsigned short x0; } x0; } x37; struct TUnfairLock { struct os_unfair_lock_s { unsigned int x0; } x0; } x38; struct TInlineVector<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> >, 1> { struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x0; struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x1; struct __compressed_pair<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *, TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> >, 1> > { struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x0; struct TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> >, 1> { struct type { unsigned char x0[8]; } x0; struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x1; } x1; } x2; } x39; struct TInlineVector<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> >, 4> { struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x0; struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x1; struct __compressed_pair<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *, TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> >, 4> > { struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x0; struct TInlineBufferAllocator<std::__1::unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> >, 4> { struct type { unsigned char x0[32]; } x0; struct unique_ptr<unsigned short const[], std::__1::default_delete<unsigned short const[]> > *x1; } x1; } x2; } x40; struct array<TCFRef<__CFDictionary *>, 7> { struct TCFRef<__CFDictionary *> { struct atomic<__CFDictionary *> { struct __cxx_atomic_impl<__CFDictionary *, std::__1::__cxx_atomic_base_impl<__CFDictionary *> > { _Atomic struct __CFDictionary *x0; } x0; } x0; } x0[7]; } x41; struct atomic<const OTL::MergeTable *> { struct __cxx_atomic_impl<const OTL::MergeTable *, std::__1::__cxx_atomic_base_impl<const OTL::MergeTable *> > { _Atomic struct MergeTable *x0; } x0; } x42; } *_baseFont;
    const struct TTraitsValues { unsigned int x0; double x1; double x2; double x3; } *_refTraits;
    unsigned long long _count;
    NSArray *_cascade;
    NSMutableArray *_fallbacks;
    unsigned long long _hash;
    int _uiUse;
}

- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x0; id *x1; unsigned long long *x2; unsigned long long x3[5]; } *)a0 objects:(id *)a1 count:(unsigned long long)a2;
- (void)dealloc;
- (void)getObjects:(id *)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id).cxx_construct;
- (unsigned long long)count;
- (id)objectAtIndex:(unsigned long long)a0;

@end

@class NSDictionary, NSArray, MPSGraph;

@interface MPSGraphExecutable : NSObject {
    MPSGraph *_graph;
    struct MLIRContext { struct unique_ptr<mlir::MLIRContextImpl, std::__1::default_delete<mlir::MLIRContextImpl> > { struct __compressed_pair<mlir::MLIRContextImpl *, std::__1::default_delete<mlir::MLIRContextImpl> > { struct MLIRContextImpl *__value_; } __ptr_; } impl; } _context;
    struct OpBuilder { struct MLIRContext *x0; struct Block *x1; struct ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation, false, false, void>, false, false> { struct ilist_node_impl<llvm::ilist_detail::node_options<mlir::Operation, false, false, void> > *x0; } x2; struct Listener *x3; } *_builder;
    struct ModuleOp { struct Operation *state; } _module;
    struct MPSSymbolTable { struct StringMap<std::__1::basic_string<char>, llvm::MallocAllocator> { struct StringMapEntryBase **x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct MallocAllocator { } x5; } x0; } *_symbolTable;
    unsigned long long _compilerOptions;
    struct map<MPSGraphTensor *, mlir::Value, std::__1::less<MPSGraphTensor *>, std::__1::allocator<std::__1::pair<MPSGraphTensor *const, mlir::Value> > > { struct __tree<std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::less<MPSGraphTensor *>, true>, std::__1::allocator<std::__1::__value_type<MPSGraphTensor *, mlir::Value> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MPSGraphTensor *, mlir::Value>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::less<MPSGraphTensor *>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _tensorToExecutableValueMap;
    struct map<MPSGraphTensor *, mlir::Operation *, std::__1::less<MPSGraphTensor *>, std::__1::allocator<std::__1::pair<MPSGraphTensor *const, mlir::Operation *> > > { struct __tree<std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, std::__1::less<MPSGraphTensor *>, true>, std::__1::allocator<std::__1::__value_type<MPSGraphTensor *, mlir::Operation *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, std::__1::less<MPSGraphTensor *>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _targetTensorToOutputOpMap;
    struct map<void *, MPSGraphTensor *, std::__1::less<void *>, std::__1::allocator<std::__1::pair<void *const, MPSGraphTensor *> > > { struct __tree<std::__1::__value_type<void *, MPSGraphTensor *>, std::__1::__map_value_compare<void *, std::__1::__value_type<void *, MPSGraphTensor *>, std::__1::less<void *>, true>, std::__1::allocator<std::__1::__value_type<void *, MPSGraphTensor *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<void *, MPSGraphTensor *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<void *, std::__1::__value_type<void *, MPSGraphTensor *>, std::__1::less<void *>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } _targettedOptimizedExecutableValue;
    struct unordered_map<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > > > > { struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> **__value_; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::hash<unsigned long long>, true> > { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::equal_to<unsigned long long>, true> > { float __value_; } __p3_; } __table_; } _runtimeCache;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _executableMutex;
}

@property (readonly) BOOL initializedWithModule;
@property (readonly, nonatomic) NSDictionary *feeds;
@property (readonly, nonatomic) NSArray *targetTensors;
@property (readonly, nonatomic) NSArray *targetOperations;

- (void)dump;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (id)debugDescription;
- (BOOL)isExecutableForFeeds:(id)a0 targetTensors:(id)a1 targetOperations:(id)a2;
- (id)initWithGraph:(id)a0 feeds:(id)a1 module:(struct ModuleOp { struct Operation *x0; })a2 targetTensors:(id)a3;
- (id)initWithGraph:(id)a0 feeds:(id)a1 targetTensors:(id)a2 targetOperations:(id)a3;
- (id)runInternalWithMPSCommandBuffer:(id)a0 feeds:(id)a1 targetTensors:(id)a2 targetOperations:(id)a3 resultsDictionary:(id)a4 executionDescriptor:(id)a5 finish:(BOOL)a6;
- (void)recurseFeeds:(id)a0 targetTensors:(id)a1 targetOperations:(id)a2;
- (void)optimizationPasses;
- (void)recurseOperation:(id)a0 operationsRecursed:(id)a1;
- (id)getCompiledShapesForTargetTensors;

@end

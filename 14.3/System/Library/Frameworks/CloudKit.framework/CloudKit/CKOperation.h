@class NSMutableDictionary, CKPlaceholderOperation, NSDictionary, NSObject, CKDiscretionaryOptions, CKOperationGroup, NSString, CKOperationMMCSRequestOptions, CKOperationConfiguration, CKEventMetric, CKOperationMetrics, CKOperationInfo, NSError, CKOperationCallbackProxy;
@protocol OS_os_activity, OS_voucher, OS_dispatch_source, OS_dispatch_queue, OS_os_transaction;

@interface CKOperation : NSOperation <CKOperationCallbacks, CKThrottlingCriteria> {
    NSObject<OS_os_transaction> *_isExecuting;
    CKOperationCallbackProxy *_clientOperationCallbackProxy;
}

@property (retain, nonatomic) CKOperationMetrics *metrics;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *timeoutSource;
@property (nonatomic) BOOL isOutstandingOperation;
@property (nonatomic) BOOL usesBackgroundSession;
@property (readonly, nonatomic) CKEventMetric *operationMetric;
@property (nonatomic) BOOL scheduledDiscretionaryOperation;
@property (nonatomic) BOOL startedDiscretionaryOperation;
@property (nonatomic) BOOL failedToScheduleDiscretionaryOperation;
@property (nonatomic) struct _xpc_activity_eligibility_changed_handler_s { } *xpcActivityEligibilityChangedHandler;
@property (nonatomic) unsigned long long duetPreClearedMode;
@property (nonatomic) unsigned long long discretionaryWhenBackgroundedState;
@property (nonatomic) unsigned long long systemScheduler;
@property (retain, nonatomic) NSMutableDictionary *lifecycleCallbacks;
@property (readonly, nonatomic) CKDiscretionaryOptions *discretionaryOptions;
@property (retain, nonatomic) NSError *cancelError;
@property (retain, nonatomic) NSError *error;
@property (retain) CKPlaceholderOperation *placeholderOperation;
@property (copy, nonatomic) NSString *operationID;
@property (nonatomic) BOOL isExecuting;
@property (readonly, nonatomic) BOOL isFinishingOnCallbackQueue;
@property (nonatomic) BOOL clouddConnectionInterrupted;
@property (nonatomic) BOOL isDiscretionarySuspended;
@property (retain, nonatomic) NSString *sectionID;
@property (readonly, nonatomic) NSString *parentSectionID;
@property (readonly, nonatomic) id context;
@property (readonly, nonatomic) CKOperationInfo *operationInfo;
@property (readonly, nonatomic) CKOperationCallbackProxy *clientOperationCallbackProxy;
@property BOOL queueHasStarted;
@property (nonatomic) BOOL _ckRaiseInGeneratedCallbackImplementation;
@property (retain, nonatomic) NSString *deviceIdentifier;
@property (retain, nonatomic) CKOperationMMCSRequestOptions *MMCSRequestOptions;
@property (retain, nonatomic) NSObject<OS_os_activity> *osActivity;
@property (retain, nonatomic) NSObject<OS_voucher> *clientVoucher;
@property (readonly, nonatomic) NSString *flowControlKey;
@property (nonatomic) BOOL preferAnonymousRequests;
@property (nonatomic) BOOL isFinished;
@property (readonly, copy, nonatomic) CKOperationConfiguration *resolvedConfiguration;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (copy, nonatomic) id /* block */ requestCompletedBlock;
@property (copy, nonatomic) NSDictionary *additionalRequestHTTPHeaders;
@property (copy, nonatomic) CKOperationConfiguration *configuration;
@property (retain, nonatomic) CKOperationGroup *group;
@property (copy, nonatomic) id /* block */ longLivedOperationWasPersistedBlock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)applyDaemonCallbackInterfaceTweaks:(id)a0;
+ (BOOL)_wireUpAssetContentForOperation:(id)a0 inRecord:(id)a1 checkSignatures:(BOOL)a2 outError:(id *)a3;
+ (id)assetInfoForOperation:(id)a0 recordID:(id)a1 recordKey:(id)a2 arrayIndex:(long long)a3;
+ (Class)operationClass;
+ (id)operationDaemonCallbackProtocol;
+ (id)exportedDaemonCallbackInterface;
+ (Class)operationInfoClass;
+ (SEL)daemonCallbackCompletionSelector;

- (BOOL)isLongLived;
- (void)cancel;
- (id)activityCreate;
- (void)_finishOnCallbackQueueWithError:(id)a0;
- (BOOL)CKOperationShouldRun:(id *)a0;
- (id)daemon;
- (void)setContainer:(id)a0;
- (void)fillFromOperationInfo:(id)a0;
- (void)performCKOperation;
- (void)_setIsExecuting:(BOOL)a0;
- (id)CKDescriptionPropertiesWithPublic:(BOOL)a0 private:(BOOL)a1 shouldExpand:(BOOL)a2;
- (void)_start;
- (void)setQualityOfService:(long long)a0;
- (id)unitTestOverrides;
- (void)finishWithError:(id)a0;
- (id)containerID;
- (id)init;
- (void)setCompletionBlock:(id /* block */)a0;
- (void).cxx_destruct;
- (double)timeoutIntervalForResource;
- (id)container;
- (void)dealloc;
- (void)main;
- (long long)qualityOfService;
- (BOOL)allowsCellularAccess;
- (void)cancelWithUnderlyingError:(id)a0;
- (BOOL)_wantsFlowControl;
- (id)discretionaryDaemonWithErrorHandler:(id /* block */)a0;
- (void)cancelWithError:(id)a0;
- (void)_cancelDaemonOperation;
- (void)_finishInternalOnCallbackQueueWithError:(id)a0;
- (void)_uninstallTimeoutSource;
- (id)_findBestThrottleError:(id)a0;
- (void)_installTimeoutSource;
- (void)_handleRemoteProxyFailureWithError:(id)a0;
- (void)addUnitTestOverrides:(id)a0;
- (BOOL)_BOOLForUnitTestOverride:(id)a0 defaultValue:(BOOL)a1;
- (void)_setIsFinished:(BOOL)a0;
- (double)timeoutIntervalForRequest;
- (void)setLongLived:(BOOL)a0;
- (void)fillOutOperationInfo:(id)a0;
- (void)start;
- (void)handleLongLivedOperationDidPersist;
- (void)handleSystemDidImposeInfo:(id)a0;
- (void)handleRequestDidComplete:(id)a0;
- (void)handleOperationDidCompleteWithMetrics:(id)a0 error:(id)a1;
- (void)handleDiscretionaryOperationShouldSuspend;
- (void)handleDiscretionaryOperationShouldStart:(BOOL)a0 nonDiscretionary:(BOOL)a1 error:(id)a2;
- (void)handleDaemonOperationWillStartWithClassName:(id)a0 isTopLevelDaemonOperation:(BOOL)a1 replyBlock:(id /* block */)a2;
- (void)setTimeoutIntervalForRequest:(double)a0;
- (void)setAllowsCellularAccess:(BOOL)a0;
- (BOOL)isConcurrent;
- (void)setTimeoutIntervalForResource:(double)a0;
- (BOOL)hasCKOperationCallbacksSet;

@end

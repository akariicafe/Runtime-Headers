@class NSObject, CKSyncEngineMetadata, CKNotificationListener, NSOperationQueue, CKDatabase;
@protocol OS_dispatch_queue, CKSyncEngineDataSource;

@interface CKSyncEngine : NSObject

@property (class, nonatomic) BOOL fastErrorRetry;

@property (retain, nonatomic) CKDatabase *database;
@property (retain, nonatomic) CKSyncEngineMetadata *metadata;
@property (nonatomic) unsigned long long lastNotifiedMetadataChangeCount;
@property (retain, nonatomic) CKNotificationListener *notificationListener;
@property (retain, nonatomic) NSOperationQueue *operationQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *batchCreationQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic) unsigned long long maxRecordCountPerBatch;
@property (nonatomic) unsigned long long maxRecordBytesPerBatch;
@property (nonatomic) unsigned long long maxZoneCountPerBatch;
@property (nonatomic) BOOL allowMetadataCallbackDeferral;
@property (nonatomic, getter=isWaitingForIdentityUpdate) BOOL waitingForIdentityUpdate;
@property (nonatomic, getter=isWaitingForHSA2) BOOL waitingForHSA2;
@property (nonatomic) long long lastKnownAccountStatus;
@property (nonatomic) BOOL useUniqueActivityIdentifiers;
@property (readonly, nonatomic) BOOL ignoringSystemConditions;
@property (nonatomic) long long priority;
@property (copy, nonatomic) id /* block */ updateMetadataBlock;
@property (nonatomic) BOOL skipRetryOnOperationError;
@property (nonatomic, getter=isAutomaticSyncingEnabled) BOOL automaticSyncingEnabled;
@property (nonatomic) BOOL useOpportunisticPushTopic;
@property (readonly, weak, nonatomic) id<CKSyncEngineDataSource> dataSource;

+ (id)userRequestedBackupActivityIdentifierInDatabase:(id)a0 ignoringSystemConditions:(BOOL)a1;
+ (void)unregisterActivitiesWithDatabase:(id)a0 ignoringSystemConditions:(BOOL)a1;
+ (BOOL)shouldDeferAfterError:(id)a0;
+ (id)earliestStartDateAfterError:(id)a0;
+ (id)saveSubscriptionActivityIdentifierInDatabase:(id)a0 ignoringSystemConditions:(BOOL)a1;
+ (id)errorForAccountStatus:(long long)a0;
+ (id)syncActivityIdentifierInDatabase:(id)a0 ignoringSystemConditions:(BOOL)a1;
+ (id)supportedDatabaseScopes;
+ (id)activityIdentifierWithName:(id)a0 database:(id)a1 ignoringSystemConditions:(BOOL)a2 uniquenessPointer:(id)a3;

- (id)initWithDatabase:(id)a0 dataSource:(id)a1 metadata:(id)a2 machServiceName:(id)a3 ignoringSystemConditions:(BOOL)a4 useUniqueActivityIdentifiers:(BOOL)a5 automaticSyncingEnabled:(BOOL)a6;
- (void)notifyDataSourceForUnserializedMetadataIfNecessaryWithCoalescing:(BOOL)a0;
- (id)defaultOperationConfiguration;
- (void)ensureAccountAvailableWithCompletionHandler:(id /* block */)a0;
- (void)fetchChangesOperation:(id)a0 recordChanged:(id)a1;
- (id)initWithDatabase:(id)a0 dataSource:(id)a1 metadata:(id)a2;
- (id)newOperationToFetchChangesForZoneIDs:(id)a0 operationGroup:(id)a1 osActivity:(id)a2;
- (void)_queue_modifyPendingChangesInZoneIDs:(id)a0 operationGroup:(id)a1 osActivity:(id)a2 completionHandler:(id /* block */)a3;
- (BOOL)hasPendingModifications;
- (void)_fetchChangesForZoneIDs:(id)a0 operationGroup:(id)a1 completionHandler:(id /* block */)a2;
- (void)fetchChangesOperation:(id)a0 completedWithError:(id)a1;
- (id)init;
- (void)_modifyPendingChangesInZoneIDs:(id)a0 operationGroup:(id)a1 completionHandler:(id /* block */)a2;
- (void)saveSubscriptionIfNecessaryWithOperationGroup:(id)a0 completionHandler:(id /* block */)a1;
- (void).cxx_destruct;
- (void)scheduleInitialWorkIfNecessary;
- (void)modifyPendingChangesInZoneIDs:(id)a0 completionHandler:(id /* block */)a1;
- (void)modifyRecordBatchesOperation:(id)a0 perRecordProgressForRecord:(id)a1 progress:(double)a2;
- (id)existingOperationToModifyRecordBatchesForZoneIDs:(id)a0 includingExecutingOperations:(BOOL)a1;
- (BOOL)hasSchedulerActivityWithIdentifier:(id)a0;
- (void)fetchChangesOperation:(id)a0 recordZoneWithIDWasPurged:(id)a1;
- (void)fetchChangesOperation:(id)a0 updatedServerChangeToken:(id)a1 clientChangeToken:(id)a2 forRecordZoneID:(id)a3;
- (BOOL)isReadyToSubmitSchedulerActivity;
- (void)modifyPendingChangesWithCompletionHandler:(id /* block */)a0;
- (void)scheduleSyncIfNecessaryWithEarliestStartDate:(id)a0;
- (void)dealloc;
- (void)_fetchChangesForZoneIDs:(id)a0 ifNecessary:(BOOL)a1 operationGroup:(id)a2 completionHandler:(id /* block */)a3;
- (void)unregisterActivities;
- (BOOL)shouldRetryAfterError:(id)a0;
- (void)identityUpdateNotification:(id)a0;
- (id)initWithDatabase:(id)a0 dataSource:(id)a1 metadata:(id)a2 useUniqueActivityIdentifiers:(BOOL)a3 automaticSyncingEnabled:(BOOL)a4;
- (void)addRecordZonesToSave:(id)a0 recordZoneIDsToDelete:(id)a1;
- (void)performSaveSubscriptionActivity:(id)a0 completionHandler:(id /* block */)a1;
- (void)addRecordIDsToSave:(id)a0 recordIDsToDelete:(id)a1;
- (void)scheduleUserRequestedBackupActivityIfNecessary;
- (void)modifyRecordBatchesOperation:(id)a0 perDeleteRecordIDCompletion:(id)a1 inBatch:(id)a2 error:(id)a3;
- (void)registerSchedulerActivities;
- (void)fetchChangesOperation:(id)a0 recordZoneWithIDWasDeleted:(id)a1;
- (void)updateAccountInfoAndScheduleWorkIfNecessaryWithCompletionHandler:(id /* block */)a0;
- (void)submitActivityIfNecessaryWithIdentifier:(id)a0 earliestStartDate:(id)a1 priority:(long long)a2 userRequestedBackupTask:(BOOL)a3;
- (void)scheduleSaveSubscriptionIfNecessaryWithEarliestStartDate:(id)a0;
- (void)fetchChangesOperation:(id)a0 completedFetchingDatabaseChangesWithError:(id)a1;
- (id)syncActivityIdentifier;
- (void)registerForSubscriptions;
- (BOOL)_needsToFetchChangesForZoneIDs:(id)a0;
- (void)startWaitingForHSA2IfNecessary;
- (id)newOperationToModifyZonesToSave:(id)a0 zoneIDsToDelete:(id)a1 inOperationGroup:(id)a2 osActivity:(id)a3;
- (void)performUserRequestedBackupActivity:(id)a0 completionHandler:(id /* block */)a1;
- (void)_queue_fetchChangesForZoneIDs:(id)a0 operationGroup:(id)a1 osActivity:(id)a2 completionHandler:(id /* block */)a3;
- (id)databaseSubscription;
- (id)activityIdentifierWithName:(id)a0;
- (void)_saveSubscriptionIfNecessaryWithOperationGroup:(id)a0 completionHandler:(id /* block */)a1;
- (void)accountChangedNotification:(id)a0;
- (id)nextBatchOfRecordsToModifyInZoneIDs:(id)a0;
- (void)fetchChangesForZoneIDs:(id)a0 completionHandler:(id /* block */)a1;
- (void)modifyRecordBatchesOperation:(id)a0 completedBatch:(id)a1 withSavedRecords:(id)a2 deletedRecordIDs:(id)a3 error:(id)a4;
- (void)fetchChangesWithCompletionHandler:(id /* block */)a0;
- (void)startWaitingForIdentityUpdateIfNecessary;
- (BOOL)_hasPendingModifications;
- (BOOL)needsToFetchChangesForZoneIDs:(id)a0;
- (void)didReceiveDatabaseNotification:(id)a0;
- (id)nextBatchOfRecordsToModifyDefaultBehaviorInZoneIDs:(id)a0;
- (void)updateAccountInfoWithCompletionHandler:(id /* block */)a0;
- (void)addOperationsToModifyZonesIfNecessaryFilteredByZoneIDs:(id)a0 operationGroup:(id)a1 osActivity:(id)a2;
- (void)saveSubscriptionIfNecessaryWithCompletionHandler:(id /* block */)a0;
- (id)newOperationToModifyRecordBatchesInZoneIDs:(id)a0 operationGroup:(id)a1 osActivity:(id)a2;
- (id)existingOperationsToModifyAnyZonesInZoneIDs:(id)a0;
- (void)fetchChangesOperation:(id)a0 completedFetchingChangesForRecordZoneID:(id)a1 serverChangeToken:(id)a2 clientChangeToken:(id)a3 error:(id)a4;
- (id)initWithDatabase:(id)a0 dataSource:(id)a1 metadata:(id)a2 machServiceName:(id)a3;
- (void)updateReadinessStateFromError:(id)a0;
- (void)modifyRecordBatchesOperation:(id)a0 perRecordSaveCompletionForRecord:(id)a1 inBatch:(id)a2 error:(id)a3;
- (id)initWithDatabase:(id)a0 dataSource:(id)a1 metadata:(id)a2 machServiceName:(id)a3 priority:(long long)a4;
- (void)modifyRecordBatchesOperation:(id)a0 completedWithError:(id)a1;
- (id)nextBatchOfRecordsToModifyWithCustomBatchingInZoneIDs:(id)a0;
- (void)fetchChangesOperation:(id)a0 recordWithIDWasDeleted:(id)a1 recordType:(id)a2;
- (id)existingOperationToFetchChangesForZoneIDs:(id)a0 includingExecutingOperations:(BOOL)a1;
- (void)fetchChangesOperation:(id)a0 databaseChangeTokenUpdated:(id)a1;
- (unsigned long long)numberOfModifyPendingRecordsOperations;
- (void)fetchChangesOperation:(id)a0 recordZoneWithIDChanged:(id)a1;
- (void)modifyPendingChangesInZoneIDs:(id)a0 operationGroup:(id)a1 completionHandler:(id /* block */)a2;
- (BOOL)shouldFetchChangesForZoneID:(id)a0;
- (id)saveSubscriptionActivityIdentifier;
- (id)userRequestedBackupActivityIdentifier;
- (void)commonInitWithDatabase:(id)a0 dataSource:(id)a1 metadata:(id)a2 machServiceName:(id)a3 useUniqueActivityIdentifiers:(BOOL)a4 automaticSyncingEnabled:(BOOL)a5 priority:(long long)a6;
- (void)fetchChangesForZoneIDs:(id)a0 ifNecessary:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)performSyncActivity:(id)a0 completionHandler:(id /* block */)a1;

@end

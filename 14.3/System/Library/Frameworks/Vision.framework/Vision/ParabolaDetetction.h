@interface ParabolaDetetction : NSObject {
    int UID_counter;
    struct map<int, InternalObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, InternalObservedParabola> > > { struct __tree<std::__1::__value_type<int, InternalObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, InternalObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, InternalObservedParabola> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, InternalObservedParabola>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, InternalObservedParabola>, std::__1::less<int>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } internalParabolas;
    struct ParabolaSearchBuffer { int maxFramesSkippedForDetection; int minRegionSizeX; int minRegionSizeY; struct deque<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> >, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > > > { struct __split_buffer<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > *, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > *> > { struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > **__first_; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > **__begin_; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > **__end_; struct __compressed_pair<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > **, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > *> > { struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > > > { unsigned long long __value_; } __size_; } contourPointsQ; } parabolaSearchBuffer;
    struct InternalParameters { int minRegionSizeX; int minRegionSizeY; float initialYDiffLimit; float startingMinDiffDeviation; float maxDistanceForSolution; int frameWidth; int frameHeight; float xScaleFactor; float yScaleFactor; int runningMinDiffDeviation; float maxFrameSkipScaleFactor; float majorAxisScaler; float minorAxisScalar; float contourSizeUpperBound; float contourSizeLowerBound; float maxRadiusToCompensate; float maxRadiusBasedDeviation; float xConsistencyDeviation; float rejectionScaler; } internalParams;
}

@property struct ForestAlgoParams { float FAFrameRate; int parabolaLength; int minXDistanceFromLastPointOnParabola; int maxXDistanceFromLastPointOnParabola; int minYDistanceFromLastPointOnParabola; int maxYDistanceFromLastPointOnParabola; int maxFramesSkippedToContinueParabolaDetection; int minObjectSize; } forestAlgoParams;
@property struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola> > > { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *__begin_node_; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true> > { unsigned long long __value_; } __pair3_; } __tree_; } observedParabolas;

+ (BOOL)isMinMaxXYOfParabolaChanging:(struct InternalObservedParabola { id x0; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; struct CGPointWithPts *x1; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; } x2; } x1; float x2; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; struct CGPointWithPts *x1; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; } x2; } x3; struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } x4; struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } x5; float x6; float x7; float x8; float x9; struct CGPoint { double x0; double x1; } x10; float x11; struct KalmanFilter { struct { void /* unknown type, empty encoding */ x0[4]; } x0; struct { void /* unknown type, empty encoding */ x0[4]; } x1; struct { void /* unknown type, empty encoding */ x0[4]; } x2; struct { void /* unknown type, empty encoding */ x0[4]; } x3; struct { void /* unknown type, empty encoding */ x0[4]; } x4; struct { void /* unknown type, empty encoding */ x0[4]; } x5; struct { void /* unknown type, empty encoding */ x0[4]; } x6; struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint *x0; } x2; } x7; struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint *x0; } x2; } x8; double x9; double x10; } x12; float x13; unsigned char x14; struct vector<float, std::__1::allocator<float> > { float *x0; float *x1; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x0; } x2; } x15; float x16; float x17; } *)a0 withPoint:(const struct CGPoint { double x0; double x1; } *)a1;
+ (BOOL)updateMinMaxXYOfParabola:(struct InternalObservedParabola { id x0; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; struct CGPointWithPts *x1; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; } x2; } x1; float x2; struct vector<CGPointWithPts, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; struct CGPointWithPts *x1; struct __compressed_pair<CGPointWithPts *, std::__1::allocator<CGPointWithPts> > { struct CGPointWithPts *x0; } x2; } x3; struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } x4; struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } x5; float x6; float x7; float x8; float x9; struct CGPoint { double x0; double x1; } x10; float x11; struct KalmanFilter { struct { void /* unknown type, empty encoding */ x0[4]; } x0; struct { void /* unknown type, empty encoding */ x0[4]; } x1; struct { void /* unknown type, empty encoding */ x0[4]; } x2; struct { void /* unknown type, empty encoding */ x0[4]; } x3; struct { void /* unknown type, empty encoding */ x0[4]; } x4; struct { void /* unknown type, empty encoding */ x0[4]; } x5; struct { void /* unknown type, empty encoding */ x0[4]; } x6; struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint *x0; } x2; } x7; struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint *x0; struct CGPoint *x1; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint *x0; } x2; } x8; double x9; double x10; } x12; float x13; unsigned char x14; struct vector<float, std::__1::allocator<float> > { float *x0; float *x1; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x0; } x2; } x15; float x16; float x17; } *)a0 withPoint:(const struct CGPoint { double x0; double x1; } *)a1;

- (id)init;
- (void).cxx_destruct;
- (id)initWithConfig:(id)a0;
- (void)updateForestParamsWithBufferWidth:(int)a0 bufferHeight:(int)a1;
- (void)updateInternalParamswithXfactor:(float)a0 yFactor:(float)a1;
- (const struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola> > > { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true> > { unsigned long long x0; } x2; } x0; } *)processContoursForParabolas:(struct vector<CGPointWithRadius, std::__1::allocator<CGPointWithRadius> > { struct CGPointWithRadius *x0; struct CGPointWithRadius *x1; struct __compressed_pair<CGPointWithRadius *, std::__1::allocator<CGPointWithRadius> > { struct CGPointWithRadius *x0; } x2; } *)a0 withPTS:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 objectMinimumPixelSize:(unsigned long long)a2 bufferWidth:(unsigned long long)a3 bufferHeight:(unsigned long long)a4;
- (BOOL)isValidRadius:(float)a0 withPrecedingRadius:(float)a1;
- (void)initialParabolaSearch:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void /* unknown type, empty encoding */)computeEquationCoefficients:(const struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } *)a0 yValues:(const struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } *)a1;
- (void /* unknown type, empty encoding */)computeNormalizedEquationCoefficients:(const struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } *)a0 yValues:(const struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } *)a1;
- (float)getRsquareOfEquation:(const struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } *)a0 yValues:(const struct vector<double, std::__1::allocator<double> > { double *x0; double *x1; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x0; } x2; } *)a1 equationConstants:(const void *)a2;
- (BOOL)isInitialCurvePossibleWithI:(struct CGPointWithPts { struct CGPoint { double x0; double x1; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; float x2; } *)a0 j:(struct CGPointWithPts { struct CGPoint { double x0; double x1; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; float x2; } *)a1 k:(struct CGPointWithPts { struct CGPoint { double x0; double x1; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; float x2; } *)a2;
- (const struct map<int, ObservedParabola, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, ObservedParabola> > > { struct __tree<std::__1::__value_type<int, ObservedParabola>, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, ObservedParabola> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, ObservedParabola>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, ObservedParabola>, std::__1::less<int>, true> > { unsigned long long x0; } x2; } x0; } *)parabolaExtensionWithInputContours:(const struct vector<CGPointWithRadius, std::__1::allocator<CGPointWithRadius> > { struct CGPointWithRadius *x0; struct CGPointWithRadius *x1; struct __compressed_pair<CGPointWithRadius *, std::__1::allocator<CGPointWithRadius> > { struct CGPointWithRadius *x0; } x2; } *)a0 withPTS:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (id).cxx_construct;
- (void)purgeCaches;

@end

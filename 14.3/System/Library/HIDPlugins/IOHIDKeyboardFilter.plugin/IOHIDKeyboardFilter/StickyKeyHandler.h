@interface StickyKeyHandler : NSObject {
    struct IOHIDKeyboardFilter { struct IOHIDServiceFilterPlugInInterface *x0; struct __CFUUID *x1; unsigned int x2; int x3; struct __IOHIDService *x4; void /* function */ *x5; void *x6; void *x7; struct map<Key, KeyAttribute, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, KeyAttribute> > > { struct __tree<std::__1::__value_type<Key, KeyAttribute>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, KeyAttribute>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, KeyAttribute> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, KeyAttribute>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, KeyAttribute>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x8; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x9; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x10; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x11; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x12; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x13; unsigned int x14; unsigned int x15; struct __IOHIDEvent *x16; unsigned int x17; unsigned int x18; unsigned int x19[10]; int x20; int x21; int x22; struct __IOHIDEvent *x23; unsigned int x24; unsigned int x25; struct __IOHIDEvent *x26; unsigned int x27; int x28; unsigned int x29; int x30; int x31; int x32; struct __CFString *x33; id x34; id x35; id x36; id x37; id x38; id x39; id x40; id x41; } *_filter;
    struct __IOHIDService { } *_service;
}

- (void)removeObserver;
- (id)initWithFilter:(struct IOHIDKeyboardFilter { struct IOHIDServiceFilterPlugInInterface *x0; struct __CFUUID *x1; unsigned int x2; int x3; struct __IOHIDService *x4; void /* function */ *x5; void *x6; void *x7; struct map<Key, KeyAttribute, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, KeyAttribute> > > { struct __tree<std::__1::__value_type<Key, KeyAttribute>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, KeyAttribute>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, KeyAttribute> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, KeyAttribute>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, KeyAttribute>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x8; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x9; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x10; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x11; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x12; struct map<Key, Key, std::__1::less<Key>, std::__1::allocator<std::__1::pair<const Key, Key> > > { struct __tree<std::__1::__value_type<Key, Key>, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true>, std::__1::allocator<std::__1::__value_type<Key, Key> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> *x0; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Key, Key>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Key, std::__1::__value_type<Key, Key>, std::__1::less<Key>, true> > { unsigned long long x0; } x2; } x0; } x13; unsigned int x14; unsigned int x15; struct __IOHIDEvent *x16; unsigned int x17; unsigned int x18; unsigned int x19[10]; int x20; int x21; int x22; struct __IOHIDEvent *x23; unsigned int x24; unsigned int x25; struct __IOHIDEvent *x26; unsigned int x27; int x28; unsigned int x29; int x30; int x31; int x32; struct __CFString *x33; id x34; id x35; id x36; id x37; id x38; id x39; id x40; id x41; } *)a0 service:(struct __IOHIDService { } *)a1;
- (void)StickyKeyNotification:(id)a0;

@end

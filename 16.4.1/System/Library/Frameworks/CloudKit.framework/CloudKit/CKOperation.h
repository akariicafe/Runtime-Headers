@class NSMutableDictionary, CKOperationCallbackProxy, CKLogicalDeviceContext, CKPlaceholderOperation, NSObject, NSDictionary, CKSignpost, CKOperationGroup, NSString, CKOperationMMCSRequestOptions, CKOperationConfiguration, CKEventMetric, CKOperationMetrics, NSXPCInterface, NSError, CKOperationInfo;
@protocol OS_os_activity, OS_voucher, OS_os_transaction, OS_dispatch_queue, OS_dispatch_source;

@interface CKOperation : NSOperation <CKOperationCallbacks, CKThrottlingCriteria> {
    NSObject<OS_os_transaction> *_executingTransaction;
    NSObject<OS_voucher> *_clientVoucher;
    NSObject<OS_os_activity> *_osActivity;
    CKOperationCallbackProxy *_clientOperationCallbackProxy;
    int _executionState;
    BOOL _scheduledDiscretionaryOperation;
    BOOL _startedDiscretionaryOperation;
    BOOL _failedToScheduleDiscretionaryOperation;
    BOOL _startedDaemonOperation;
    BOOL _clouddConnectionInterrupted;
    BOOL _isDiscretionarySuspended;
    NSError *_cancelError;
    NSObject<OS_dispatch_source> *_timeoutSource;
    struct _xpc_activity_eligibility_changed_handler_s { } *_xpcActivityEligibilityChangedHandler;
    unsigned long long _duetPreClearedMode;
    unsigned long long _discretionaryWhenBackgroundedState;
    unsigned long long _systemScheduler;
    CKPlaceholderOperation *_placeholderOperation;
    CKSignpost *_signpost;
}

@property (class, readonly, copy) NSXPCInterface *exportedDaemonCallbackInterface;
@property (class, retain) NSString *operationIDPrefix;

@property (copy, nonatomic) NSString *operationID;
@property (retain, nonatomic) CKOperationMetrics *metrics;
@property (nonatomic) BOOL usesBackgroundSession;
@property (retain, nonatomic) NSMutableDictionary *lifecycleCallbacks;
@property (nonatomic) BOOL isOutstandingOperation;
@property (copy, nonatomic) CKOperationConfiguration *convenienceOperationConfiguration;
@property (retain, nonatomic) CKOperationGroup *convenienceOperationGroup;
@property (retain, nonatomic) NSError *error;
@property (readonly, nonatomic) BOOL isFinishingOnCallbackQueue;
@property (nonatomic) BOOL canDropItemResultsEarly;
@property (readonly, nonatomic) CKOperationInfo *operationInfo;
@property (readonly, nonatomic) CKLogicalDeviceContext *deviceContext;
@property (readonly, nonatomic) CKOperationCallbackProxy *clientOperationCallbackProxy;
@property (readonly, nonatomic) CKEventMetric *operationMetric;
@property BOOL queueHasStarted;
@property (nonatomic) BOOL _ckRaiseInGeneratedCallbackImplementation;
@property (retain, nonatomic) CKOperationMMCSRequestOptions *MMCSRequestOptions;
@property (nonatomic) unsigned long long requestOriginator;
@property (nonatomic) BOOL preferAnonymousRequests;
@property BOOL isFinished;
@property (readonly, copy, nonatomic) CKOperationConfiguration *resolvedConfiguration;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (copy, nonatomic) id /* block */ requestCompletedBlock;
@property (copy, nonatomic) NSDictionary *additionalRequestHTTPHeaders;
@property (copy, nonatomic) CKOperationConfiguration *configuration;
@property (retain, nonatomic) CKOperationGroup *group;
@property (copy, nonatomic) id /* block */ longLivedOperationWasPersistedBlock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (SEL)daemonCallbackCompletionSelector;
+ (SEL)daemonInvocationSelector;
+ (id)operationDaemonCallbackProtocol;
+ (Class)operationInfoClass;
+ (void)applyDaemonCallbackInterfaceTweaks:(id)a0;
+ (Class)operationClass;
+ (BOOL)_wireUpAssetContentForOperation:(id)a0 inRecord:(id)a1 checkSignatures:(BOOL)a2 outError:(id *)a3;
+ (id)assetInfoForOperation:(id)a0 recordID:(id)a1 recordKey:(id)a2 arrayIndex:(long long)a3;

- (void)fillOutOperationInfo:(id)a0;
- (id)operationGroupName;
- (void)ckSignpostEndWithError:(id)a0;
- (void)fillFromOperationInfo:(id)a0;
- (void)ckSignpostBegin;
- (BOOL)CKOperationShouldRun:(id *)a0;
- (id)applicationBundleIdentifierForContainerAccess;
- (void)setContainer:(id)a0;
- (void)_finishOnCallbackQueueWithError:(id)a0;
- (BOOL)hasCKOperationCallbacksSet;
- (long long)qualityOfService;
- (void)performCKOperation;
- (void)finishWithError:(id)a0;
- (BOOL)transitionToFinished;
- (id)CKDescriptionPropertiesWithPublic:(BOOL)a0 private:(BOOL)a1 shouldExpand:(BOOL)a2;
- (void)setQualityOfService:(long long)a0;
- (BOOL)transitionToExecuting;
- (id)activityCreate;
- (void)setAllowsCellularAccess:(BOOL)a0;
- (BOOL)allowsCellularAccess;
- (BOOL)isExecuting;
- (void)setCompletionBlock:(id /* block */)a0;
- (void)main;
- (id)container;
- (void)cancelWithError:(id)a0;
- (id)ckShortDescription;
- (void)setTimeoutIntervalForRequest:(double)a0;
- (BOOL)isConcurrent;
- (void)cancel;
- (void)dealloc;
- (void)setTimeoutIntervalForResource:(double)a0;
- (void)setLongLived:(BOOL)a0;
- (id)unitTestOverrides;
- (id)init;
- (void)addUnitTestOverrides:(id)a0;
- (BOOL)isLongLived;
- (void)start;
- (id)containerID;
- (double)timeoutIntervalForResource;
- (void).cxx_destruct;
- (void)openFileWithOpenInfo:(id)a0 reply:(id /* block */)a1;
- (double)timeoutIntervalForRequest;
- (id)CKShortDescriptionRedact:(BOOL)a0;
- (void)handleDiscretionaryOperationShouldStart:(BOOL)a0 nonDiscretionary:(BOOL)a1 error:(id)a2;
- (BOOL)_BOOLForUnitTestOverride:(id)a0 defaultValue:(BOOL)a1;
- (void)_cancelDaemonOperation;
- (id)_createPlaceholderOperation;
- (void)_finishDiscretionaryOperation;
- (void)_handleRemoteProxyFailureWithError:(id)a0;
- (void)_performErrorRateMitigation;
- (void)applyConvenienceConfiguration:(id)a0;
- (void)cancelWithUnderlyingError:(id)a0;
- (void)cancelWithUnderlyingError:(id)a0 message:(id)a1;
- (void)configureConvenience:(id)a0;
- (void)handleDaemonOperationWillStartWithClassName:(id)a0 isTopLevelDaemonOperation:(BOOL)a1 replyBlock:(id /* block */)a2;
- (void)handleDiscretionaryOperationShouldSuspend;
- (void)handleFinishWithAssetDownloadStagingInfo:(id)a0 reply:(id /* block */)a1;
- (void)handleLongLivedOperationDidPersist;
- (void)handleOperationDidCompleteWithMetrics:(id)a0 error:(id)a1;
- (void)handleRequestDidComplete:(id)a0;
- (void)handleSystemDidImposeInfo:(id)a0;
- (void)withContainerScopedDaemon:(id /* block */)a0;
- (id)zoneIDsToZoneNamesString:(id)a0;

@end

@class PKPencilShadowView, PKAttachmentView, PKSelectionController, NSOrderedSet, NSMutableArray, NSString, PKInk, UIImage, PKRulerController, NSArray, PKStrokePreviewView, UITouch, PKLinedPaper, NSObject, UIView, PKTiledCanvasView, PKDrawing, PKController, PKTileController, PKPencilStatisticsManager, PKAnalyticsSession, PKToolPreviewView, _UIEditMenuInteraction, NSUUID, UIDropInteraction, UIScrollView, PKSelectionInteraction, PKHoverController;
@protocol PKTiledViewDelegate, PKDrawingVersion, PKDrawingPaletteStatistics, PKRulerHostingDelegate, PKDrawingUUID;

@interface PKTiledView : UIView <UIScrollViewDelegate, _UIScrollViewScrollObserver, _UIScrollViewLayoutObserver, UIDropInteractionDelegate_Private, UIGestureRecognizerDelegate, PKRulerDelegate, PKRulerHostingDelegate, PKDrawableView, PKHoverControllerDelegate, PKPaletteViewHoverDelegate, PKTiledCanvasViewDelegate, _UIEditMenuInteractionDelegate> {
    UIDropInteraction *_dropInteraction;
    PKDrawing *_dirtyDrawing;
    BOOL _rulerEnabled;
    id /* block */ _updateVisibleTilesAfterZoomOutBlock;
    struct { unsigned char delegateAttachmentViews : 1; unsigned char delegateWillCreateSnapshot : 1; } _tiledViewFlags;
    BOOL _safeToStartDrawing;
    NSUUID *_previouslySelectedDrawingUUID;
    BOOL _shouldAdjustStrokeTransformAtEndOfStroke;
    BOOL _isLayingOut;
    BOOL _shouldHideCanvasAfterScroll;
    BOOL _isDoingInteractiveResize;
    BOOL _needUpdateAfterBackgroundTraitCollectionChange;
    BOOL _shouldBeginHoverPreview;
    BOOL _hoverPreviewActive;
    BOOL _symbolPreviewActive;
    BOOL _didDisableScrollViewPanGestureRecognizer;
    UIScrollView *_scrollView;
    UITouch *_drawingTouchThatHitNothing;
    double _tileSize;
    double _tileScale;
    long long _tileLevel;
    UIView *_gestureView;
    PKAttachmentView *_liveAttachment;
    PKDrawing *_currentDrawingBeingCopiedToCanvas;
    double _lastZoomScale;
    PKRulerController *_rulerController;
    NSArray *_cachedAdditionalStrokes;
    NSArray *_cachedVisibleStrokesWithAdditionalStrokesForDirtyDrawing;
    id<PKDrawingUUID> _cachedDrawingUUIDForAdditionalStrokes;
    id<PKDrawingVersion> _cachedDrawingVersionForAdditionalStrokes;
    id /* block */ _didScrollBlock;
    id /* block */ _updateAttachmentBoundsBlock;
    id /* block */ _hideCanvasBlock;
    NSMutableArray *_undoManagersRegisteredWith;
    id<PKDrawingPaletteStatistics> _drawingPaletteStatistics;
    PKHoverController *_hoverController;
    id /* block */ _hoverConvertToShapeBlock;
    double _delayHoverPreviewUntil;
    double _hoverPreviewStartTimestamp;
    PKStrokePreviewView *_strokePreviewView;
    NSOrderedSet *_eraseOrLassoPreviewStrokes;
    PKDrawing *_erasePreviewDrawing;
    PKToolPreviewView *_toolPreviewView;
    PKPencilShadowView *_pencilShadowView;
    NSUUID *_currentPreviewDrawingUUID;
    PKPencilStatisticsManager *_pencilStatisticsManager;
    PKAnalyticsSession *_analyticsSession;
    long long _aggd_cachedVisibleStrokeCount;
    struct CGPoint { double x; double y; } _lastContentOffset;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _strokeTransformAtStartOfStroke;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _strokeTransformAdjustment;
}

@property (nonatomic) BOOL aggd_didMergeWithCollaborator;
@property (nonatomic) long long _maxFileFormatVersion;
@property (readonly, nonatomic) PKController *drawingController;
@property (nonatomic) BOOL insertSpaceEnabled;
@property (readonly, nonatomic) BOOL isReadOnlyView;
@property (readonly, nonatomic) _UIEditMenuInteraction *editMenuInteraction;
@property (nonatomic) BOOL editMenuVisible;
@property (retain, nonatomic) Class defaultDrawingClass;
@property (copy, nonatomic) PKInk *ink;
@property (copy, nonatomic) PKLinedPaper *linedPaper;
@property (nonatomic) BOOL cropDrawingAttachmentsWhenViewIsSmaller;
@property (readonly, weak, nonatomic) UIScrollView *scrollView;
@property (weak, nonatomic) UIView *attachmentContainerView;
@property (retain, nonatomic) PKTiledCanvasView *canvasView;
@property (readonly, nonatomic) BOOL allowsFingerDrawing;
@property (nonatomic) unsigned long long drawingPolicy;
@property (readonly, nonatomic) BOOL _hasSelection;
@property (nonatomic) BOOL rulerEnabled;
@property (nonatomic) BOOL showDebugOutlines;
@property (weak, nonatomic) NSObject<PKTiledViewDelegate> *delegate;
@property (retain, nonatomic) UIImage *paperTexture;
@property (nonatomic) long long canvasViewZOrderPolicy;
@property (readonly, nonatomic) BOOL sixChannelBlending;
@property (weak, nonatomic) UIView *contentSnapshottingView;
@property (weak, nonatomic) id drawingUndoTarget;
@property (nonatomic) SEL drawingUndoSelector;
@property (readonly, nonatomic) PKSelectionController *selectionController;
@property (readonly, nonatomic) PKSelectionInteraction *selectionInteraction;
@property (retain, nonatomic) PKTileController *tileController;
@property (readonly, nonatomic) UITouch *drawingTouchThatHitNothing;
@property (weak, nonatomic) id<PKRulerHostingDelegate> rulerHostingDelegate;
@property (nonatomic) BOOL supportsCopyAsText;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)newInlineDrawingOfClass:(Class)a0;
+ (BOOL)showDebugOutlines;

- (void)selectAll:(id)a0;
- (id)attachments;
- (BOOL)dropInteraction:(id)a0 canHandleSession:(id)a1;
- (void)dropInteraction:(id)a0 performDrop:(id)a1;
- (id)dropInteraction:(id)a0 sessionDidUpdate:(id)a1;
- (void)_layoutSubviews;
- (void)cut:(id)a0;
- (long long)_dropInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (void)didMoveToWindow;
- (void)paste:(id)a0;
- (void)selectionDidChange;
- (void)dealloc;
- (id)_accessibilityUserTestingChildren;
- (BOOL)canBecomeFirstResponder;
- (void)layoutSubviews;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)copy:(id)a0;
- (void)_share:(id)a0;
- (void)traitCollectionDidChange:(id)a0;
- (void)_sceneDidActivate:(id)a0;
- (void)_sceneWillDeactivate:(id)a0;
- (void).cxx_destruct;
- (void)_observeScrollViewDidScroll:(id)a0;
- (void)delete:(id)a0;
- (id)topView;
- (void)_editMenuInteraction:(id)a0 didDismissMenuForConfiguration:(id)a1;
- (void)_editMenuInteraction:(id)a0 didPresentMenuForConfiguration:(id)a1;
- (id)_editMenuInteraction:(id)a0 menuForConfiguration:(id)a1 suggestedActions:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_editMenuInteraction:(id)a0 targetRectForConfiguration:(id)a1;
- (void)_scrollViewDidLayoutSubviews:(id)a0;
- (void)duplicate:(id)a0;
- (void)_flushCaches;
- (void)performUndo:(id)a0;
- (BOOL)isDrawing;
- (id)visibleAttachments;
- (BOOL)canvasViewShouldCombineStrokes:(id)a0;
- (struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })convertInputPoint:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a0 toAttachment:(id)a1;
- (id)selectedStrokeIdsForAttachment:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })strokeTransform;
- (void)_updateAttachmentOnscreenBounds;
- (BOOL)insertAttachmentIfInBlankSpace:(struct CGPoint { double x0; double x1; })a0;
- (id)_adornmentViewsToHitTest;
- (void)_beginAnalyticsSessionIfNecessary;
- (void)_cancelHideCanvasIfNecessary;
- (void)_canvasView:(id)a0 didFinishRenderingNewStrokes:(id)a1 inDrawing:(id)a2 forPreview:(BOOL)a3;
- (void)_canvasViewDidEraseStrokes:(id)a0;
- (void)_canvasViewWillBeginDrawing:(id)a0;
- (void)_canvasViewWillCreateSnapshot;
- (void)_clearSelectionIfNecessary;
- (void)_copyFromCanvas:(id)a0 intoAttachment:(id)a1 hideCanvas:(BOOL)a2 strokes:(id)a3;
- (id)_currentStroke;
- (void)_didAddDrawingAttachmentView;
- (void)_didEndInteractiveResize;
- (void)_disableScrollViewPanGestureIfNecessary;
- (void)_dismissInsertSpaceHandlesIfNecessary;
- (void)_endAnalyticsSessionsIfNecessary;
- (void)_endHoverToolPreview;
- (void)_findSelectionTranscriptionWithCompletion:(id /* block */)a0;
- (void)_finishCombiningStrokesIfNecessaryForAttachment:(id)a0;
- (void)_hideCanvas;
- (BOOL)_isScrollViewSizeAnimating;
- (BOOL)_isValidDropPointForStrokes:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_isValidDropPointForStrokes:(struct CGPoint { double x0; double x1; })a0 didInsertNewAttachment:(BOOL *)a1;
- (BOOL)_isZoomingOrResizing;
- (double)_latestLatency;
- (double)_layerContentsScale;
- (void)_layoutSubviewsUpdateTilesForRendering:(BOOL)a0;
- (id)_liveDrawing;
- (void)_recordDrawingStatisticsForHitPoint:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)_reenableScrollViewPanGestureIfNecessary;
- (void)_resetDrawingState;
- (void)_resetSelectedStrokeStateForRenderer;
- (BOOL)_scrollViewIsScrollingOrZoomingOrResizing;
- (void)_selectionRefreshWithChangeToDrawings:(id)a0 completion:(id /* block */)a1;
- (void)_setAdditionalStrokes:(id)a0 inDrawing:(id)a1 completion:(id /* block */)a2;
- (void)_setAdditionalStrokes:(id)a0 inDrawing:(id)a1 invalidateTiles:(BOOL)a2;
- (void)_setAdditionalStrokes:(id)a0 inDrawing:(id)a1 invalidateTiles:(BOOL)a2 completion:(id /* block */)a3;
- (BOOL)_shouldExpandBottomAttachmentForDragAndDrop;
- (BOOL)_shouldForwardSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (BOOL)_shouldPreventScrollViewPanGestureWhilePreviewing;
- (BOOL)_shouldSelectionBeginAtPoint:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (BOOL)_shouldUpdateHeightOfAttachments;
- (void)_showEditMenuFromLocation:(struct CGPoint { double x0; double x1; })a0 forAttachment:(id)a1;
- (BOOL)_sixChannelBlendingIsActive;
- (id)_tilesForAttachment:(id)a0 bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 invert:(BOOL)a2;
- (BOOL)_toolPickerIsOrWillBeVisible;
- (long long)_totalVisibleStrokes;
- (void)_transientlyUpdateHeightOfAttachment:(id)a0 delta:(double)a1;
- (void)_updateAttachmentHeightIfNecessaryForDrawing:(id)a0;
- (void)_updateForToolPickerVisibilityChange:(id)a0;
- (BOOL)_updateHeightOfAttachmentIfNecessary:(id)a0;
- (void)_updateSymbolPreviewViewForTouch:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a0 attachment:(id)a1 alpha:(double)a2;
- (void)_updateToolPreviewIndicatorInputPoint:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a0;
- (id)_visibleTilesForAttachment:(id)a0;
- (void)_willBeginInteractiveResize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })attachmentBoundsForDrawing:(id)a0;
- (id)attachmentForHoverPreviewAt:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a0;
- (id)attachmentForUUID:(id)a0;
- (void)blitOldTilesIntoNewTiles:(id)a0 completion:(id /* block */)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForDrawing:(id)a0;
- (BOOL)canAddStroke;
- (void)cancelTileGenerationInvalidateTiles:(BOOL)a0;
- (void)canvasView:(id)a0 beganStroke:(id)a1;
- (void)canvasView:(id)a0 cancelledStroke:(id)a1;
- (void)canvasView:(id)a0 drawingDidChange:(id)a1;
- (void)canvasView:(id)a0 endedStroke:(id)a1;
- (void)canvasView:(id)a0 registerMultiStepUndoCommands:(id)a1;
- (void)canvasView:(id)a0 registerUndoCommands:(id)a1;
- (BOOL)canvasView:(id)a0 shouldBeginDrawingWithTouch:(id)a1;
- (BOOL)canvasView:(id)a0 shouldDelayDrawingBeganWithTouch:(id)a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })canvasView:(id)a0 transformForStroke:(id)a1;
- (void)canvasViewDidBeginDrawing:(id)a0;
- (void)canvasViewDidEndDrawing:(id)a0;
- (void)canvasViewDrawingMoved:(id)a0 withTouch:(id)a1;
- (void)canvasViewInvalidateTiles:(id)a0;
- (void)canvasViewWillBeginNewStroke:(id)a0 location:(struct CGPoint { double x0; double x1; })a1;
- (void)canvasViewWillBeginNewStroke:(id)a0 withTouch:(id)a1;
- (void)canvasViewWillBeginNewStroke:(id)a0 withTouch:(id)a1 location:(struct CGPoint { double x0; double x1; })a2;
- (void)changeStrokesUsingTransformations:(id)a0 strokeGroups:(id)a1 drawing:(id)a2 originalStrokes:(id)a3;
- (void)commitSelectionIfNecessaryWithCompletion:(id /* block */)a0;
- (void)convertToShapeAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)didChangeDrawing:(id)a0;
- (id)drawingGestureRecognizer;
- (id)generateTile:(struct CGPoint { double x0; double x1; })a0 inAttachment:(id)a1 rendering:(BOOL)a2 offscreen:(BOOL)a3;
- (void)getAttachment:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a2 paperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a3;
- (void)getAttachment:(id)a0 tileTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 strokeTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a2 paperTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a3 scrollViewContentOffset:(struct CGPoint { double x0; double x1; })a4;
- (struct vector<AttachmentTileInfo, std::allocator<AttachmentTileInfo>> { struct AttachmentTileInfo *x0; struct AttachmentTileInfo *x1; struct __compressed_pair<AttachmentTileInfo *, std::allocator<AttachmentTileInfo>> { struct AttachmentTileInfo *x0; } x2; })getVisibleTiles:(id)a0;
- (id)hitAttachment:(struct CGPoint { double x0; double x1; })a0;
- (id)hitAttachment:(struct CGPoint { double x0; double x1; })a0 includeStandinAttachment:(BOOL)a1;
- (id)hitAttachment:(struct CGPoint { double x0; double x1; })a0 includeStandinAttachment:(BOOL)a1 expandBottomAttachment:(BOOL)a2;
- (void)hoverController:(id)a0 didBegin:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a1;
- (void)hoverController:(id)a0 didUpdate:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a1;
- (void)hoverController:(id)a0 holdGestureMeanTouch:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a1 latestTouch:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a2;
- (void)hoverController:(id)a0 intentionalHoverWithDuration:(double)a1;
- (void)hoverControllerDidEnd:(id)a0;
- (void)hoverControllerHoldGestureEnded:(id)a0;
- (id)initInScrollView:(id)a0;
- (id)initInScrollView:(id)a0 defaultDrawingClass:(Class)a1;
- (id)initInScrollView:(id)a0 sixChannelBlending:(BOOL)a1 defaultDrawingClass:(Class)a2;
- (id)initInScrollView:(id)a0 sixChannelBlending:(BOOL)a1 defaultDrawingClass:(Class)a2 readOnly:(BOOL)a3;
- (void)insertCanvasView:(id)a0 intoScrollView:(id)a1;
- (void)insertSpace:(id)a0;
- (BOOL)invertColors;
- (id)liveAttachment;
- (BOOL)needToUpdateViewFrame;
- (void)newCanvasView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })newViewFrame;
- (void)paletteViewHoverDidSwitchToolsViaPencilInteraction:(id)a0;
- (struct CGPoint { double x0; double x1; })paletteViewHoverLocation:(id)a0;
- (id)paletteViewHoverView:(id)a0;
- (void)paletteViewPencilDidTap:(id)a0;
- (id)paperTexture;
- (struct CGPoint { double x0; double x1; })pointInStrokeSpace:(struct CGPoint { double x0; double x1; })a0 inDrawing:(id)a1;
- (void)purgeNonVisibleTiles;
- (void)registerUndoCommand:(id)a0;
- (void)renderAttachment:(id)a0 intoCanvas:(id)a1 showing:(BOOL)a2;
- (void)replaceInkTexture:(id)a0 image:(struct CGImage { } *)a1;
- (void)resizeTiles:(id)a0 completion:(id /* block */)a1;
- (BOOL)rulerHostWantsSharedRuler;
- (id)rulerHostingView;
- (id)rulerView;
- (void)setPaperTexture:(id)a0;
- (void)setSelectedStrokesColor:(id)a0;
- (BOOL)shouldStartToolPreviewWhenHovering;
- (id)standInAttachmentView;
- (void)startToolPreviewIfPossibleForInputPoint:(struct { union { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; BOOL x8; long long x9; double x10; BOOL x11; })a0;
- (void)startedDrawingInBlankSpaceWithTouch:(id)a0 location:(struct CGPoint { double x0; double x1; })a1;
- (void)straighten:(id)a0 strokes:(id)a1 drawing:(id)a2;
- (void)swapOffscreenCallback:(id /* block */)a0;
- (id)tileForOffset:(struct CGPoint { double x0; double x1; })a0 inAttachment:(id)a1 offscreen:(BOOL)a2;
- (BOOL)tileIsVisibleForOffset:(struct CGPoint { double x0; double x1; })a0 inAttachment:(id)a1 distanceToMiddle:(double *)a2;
- (BOOL)toolShadowShouldBeActive;
- (BOOL)toolShadowShouldBeRenderedInMetal;
- (id)topZAttachment;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformFromStrokeSpaceToViewInAttachment:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformFromStrokeSpaceToViewInDrawing:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformFromViewToStrokeSpaceInAttachment:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformFromViewToStrokeSpaceInDrawing:(id)a0;
- (void)updateAfterTraitCollectionChange;
- (void)updateCurrentSelectionWithNewDrawingIfNecessary:(id)a0;
- (void)updateEndAttachment;
- (void)updateExistingTiles:(BOOL)a0;
- (void)updateForAllowedDrawingInput;
- (void)updateTilesForVisibleRect;
- (void)updateTilesForVisibleRectForceIfZooming:(BOOL)a0;
- (void)updateTilesForVisibleRectOffscreenWithCallback:(id /* block */)a0;
- (void)updateTilesForVisibleRectRendering:(BOOL)a0 offscreen:(BOOL)a1;
- (id)viewForAttachmentAtBlankSpace;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleOnscreenBoundsForDrawing:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleOnscreenBoundsForDrawing:(id)a0 slack:(struct CGSize { double x0; double x1; })a1;

@end

@class NSString, UIImage, NSArray, CALayer, VKNavigationPuck, CAGradientLayer, _MKPuckAccuracyLayer, CLLocation, UIColor;
@protocol MKUserLocationHeadingIndicator;

@interface _MKPuckAnnotationView : MKAnnotationView <VKPuckAnimatorTarget> {
    CALayer *_puckLayer;
    CALayer *_glyphLayer;
    CALayer *_puckContainerLayer;
    CALayer *_shadowLayer;
    CALayer *_baseLayer;
    CALayer *_puckTransitionContainer;
    CALayer *_puckTransitionLayer;
    double _puckScale;
    BOOL _faux3DEnabled;
    CAGradientLayer *_faux3DFaceLayer;
    CAGradientLayer *_faux3DBaseBottomLayer;
    CALayer *_faux3DHighlightMask;
    NSArray *_faux3DHighlightMaskRings;
    CALayer *_innerCircleLayer;
    BOOL _isShowingStaleColor;
    CALayer *_accuracyContainerLayer;
    CALayer *_headingContainerLayer;
    VKNavigationPuck *_navigationPuckMarker;
    CALayer *_pulseLayer;
    _MKPuckAccuracyLayer *_accuracyLayer;
    BOOL _shouldPulse;
    BOOL _hasValidHeading;
    BOOL _useDarkAppearance;
    double _mapRotation;
    double _mapCameraDistance;
    CALayer<MKUserLocationHeadingIndicator> *_headingLayer;
    BOOL _headingLayerTracksAccuracy;
    BOOL _hasExplicitCollisionMode;
    id _minAccuracyConfigListener;
    id _newPuckConfigListener;
    id _faux3DPuckConfigListener;
    id _shelbyvilleConfigListener;
    id _minUncertaintyConfigListener;
    double _minimumAccuracyUncertainty;
}

@property (class, readonly, nonatomic, getter=_calloutOffset) struct CGPoint { double x0; double x1; } calloutOffset;

@property (nonatomic) BOOL shouldDisplayInaccurateHeading;
@property (nonatomic) BOOL forcesConeIndicator;
@property (nonatomic, getter=_minimumAccuracyUncertainty, setter=_setMinimumAccuracyUncertainty:) double minimumAccuracyUncertainty;
@property (nonatomic, getter=_forceHeadingUp, setter=_setForceHeadingUp:) BOOL forceHeadingUp;
@property (nonatomic, getter=_shouldShowDynamicLocationAnimations, setter=_setShouldShowDynamicLocationAnimations:) BOOL shouldShowDynamicLocationAnimations;
@property (nonatomic) float opacity;
@property (nonatomic, getter=isEffectsEnabled) BOOL effectsEnabled;
@property (nonatomic, getter=isStale, setter=setStale:) BOOL stale;
@property (nonatomic, getter=isOverrideStale) BOOL overrideIsStale;
@property (nonatomic) long long zoomDirection;
@property (nonatomic, getter=_displaysPuckAsAccuracy, setter=_setDisplaysPuckAsAccuracy:) BOOL displaysPuckAsAccuracy;
@property (nonatomic, getter=isAnimatingPresentationAccuracy) BOOL animatingPresentationAccuracy;
@property (nonatomic) double presentationAccuracy;
@property (readonly, nonatomic) CLLocation *lastLocation;
@property (nonatomic, getter=_minimumAccuracyRadius, setter=_setMinimumAccuracyRadius:) double minimumAccuracyRadius;
@property (nonatomic) BOOL shouldDisplayHeading;
@property (nonatomic) BOOL canShowHeadingIndicator;
@property (nonatomic) double heading;
@property (nonatomic) double headingAccuracy;
@property (readonly, nonatomic) double locationAccuracy;
@property (readonly, nonatomic, getter=_locationAccuracyInScreenPoints) double locationAccuracyInScreenPoints;
@property (nonatomic) long long headingIndicatorStyle;
@property (nonatomic) BOOL allowsPulse;
@property (nonatomic) BOOL shouldInnerPulse;
@property (nonatomic) BOOL shouldShowOuterRing;
@property (nonatomic) BOOL allowsAccuracyRing;
@property (nonatomic) double maxRadiusToShowAccuracyRing;
@property (nonatomic, getter=_shouldHidePuckWhenAccuracyVisible, setter=_setShouldHidePuckWhenAccuracyVisible:) BOOL shouldHidePuckWhenAccuracyVisible;
@property (nonatomic, getter=_accuracyRingStrokeOpacityThreshold, setter=_setAccuracyRingStrokeOpacityThreshold:) double accuracyRingStrokeOpacityThreshold;
@property (nonatomic) double puckAlpha;
@property (nonatomic) double accuracyRingAlpha;
@property (retain, nonatomic) UIImage *glyphImage;
@property (copy, nonatomic) UIColor *glyphTintColor;
@property (retain, nonatomic) UIImage *innerImageMask;
@property (nonatomic) BOOL rotateInnerImageToMatchCourse;
@property (nonatomic) double presentationCourse;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } collisionSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (double)shadowBlur;
+ (double)baseDiameter;
+ (double)innerDiameter;
+ (double)outerRingWidth;

- (void)setAnimatingToCoordinate:(BOOL)a0;
- (void)_updateBaseImage;
- (void)_updateLayers;
- (void)didMoveToWindow;
- (void)setSelected:(BOOL)a0 animated:(BOOL)a1;
- (void)setDisplayPriority:(float)a0;
- (void)tintColorDidChange;
- (void)dealloc;
- (void)setPresentationCoordinate:(struct { double x0; double x1; })a0;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(id)a0;
- (id)_effectiveTintColor;
- (void).cxx_destruct;
- (BOOL)_isSelectable;
- (id)_pulseLayer;
- (BOOL)_tracking;
- (long long)collisionMode;
- (void)setCollisionMode:(long long)a0;
- (id)_pulseAnimation;
- (id)_animationToSynchronizePulse:(id *)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_annotationTrackingInsets;
- (BOOL)_balloonCalloutShouldShowArrow;
- (id)_baseLayer;
- (id)_createFakePuckLayer;
- (void)_createOrRemoveFaux3DRingsIfNecessary;
- (id)_currentInnerColor;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_defaultCollisionAlignmentRectInsets;
- (long long)_enforcedHeadingIndicatorStyle;
- (BOOL)_hideLargeAccuracyRing;
- (id)_innerPulseAnimation;
- (unsigned long long)_innerPulseFrameWhenDisabled:(unsigned long long)a0;
- (BOOL)_isLocationStale:(id)a0;
- (id)_layerToMatchAccuracyRing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_mapkit_visibleRect;
- (void)_pausePulse;
- (void)_removePulse;
- (void)_resetInnerPulseFrame;
- (void)_resetLayerToMatchAccuracyRing;
- (void)_resumePulse;
- (float)_selectionPriority;
- (void)_setAnimatingToCoordinate:(BOOL)a0;
- (void)_setHeadingLayerHidden:(BOOL)a0;
- (void)_setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })a0;
- (void)_setMapPitchRadians:(double)a0;
- (void)_setMapRotationRadians:(double)a0;
- (void)_setMapType:(unsigned long long)a0;
- (void)_setPresentationCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0;
- (void)_setPresentationCourse:(double)a0;
- (void)_setTracking:(BOOL)a0;
- (void)_setVKNavigationPuckMarker:(id)a0;
- (void)_setupLayers;
- (BOOL)_shouldPulseForLocation:(id)a0;
- (BOOL)_shouldShowAccuracyRing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_significantBounds;
- (void)_updateAccuracyAnimation;
- (void)_updateAccuracyColors;
- (void)_updateAccuracyOpacityForRadius:(double)a0 duration:(double)a1;
- (void)_updateFaux3DColors;
- (void)_updateFaux3DLayers;
- (void)_updateFromMap;
- (void)_updateGlyphImage;
- (void)_updateHeadingIndicators;
- (void)_updateHeadingLayerForStyleChange:(BOOL)a0;
- (void)_updateInnerCourseRotation;
- (void)_updateInnerImage;
- (void)_updateInnerMaskLayer;
- (void)_updateLegacyConfiguration;
- (void)_updatePuckVisibilityForRadius:(double)a0 previousRadius:(double)a1 duration:(double)a2;
- (void)_updatePulse;
- (void)_updatePulseAnimation;
- (void)_updatePulseColor;
- (void)_updateShadowImage;
- (void)_updateShowHeadingLayer;
- (void)_updateShowHeadingLayer:(BOOL)a0 animatedIfPossible:(BOOL)a1;
- (void)_updateShowHeadingLayerAnimatedIfPossible:(BOOL)a0;
- (void)_updateToReflectLocationAccuracyWithDuration:(double)a0 allowShowHideAnimation:(BOOL)a1;
- (id)_vkNavigationPuckMarker;
- (struct CGPoint { double x0; double x1; })calloutOffset;
- (id)initWithAnnotation:(id)a0 reuseIdentifier:(id)a1;
- (void)locationManagerFailedToUpdateLocation;
- (void)setLocationAccuracy:(double)a0 duration:(double)a1;
- (void)setPuckScale:(double)a0;
- (void)setZoomDirection:(long long)a0 deltaScale:(double)a1;
- (void)updateStateFromLocation:(id)a0 duration:(double)a1;

@end

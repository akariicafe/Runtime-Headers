@class NSString, EKObjectID, EKPersistentObject, NSMutableDictionary, NSDictionary, EKObjectValidationContext, EKEventStore, EKChangeSet, CADGenerationStampedObjectID;

@interface EKObject : NSObject <EKFrozenMeltedPair, EKProtocolMutableObject>

@property (readonly, nonatomic) NSString *specificIdentifier;
@property (retain, nonatomic) EKPersistentObject *persistentObject;
@property (retain, nonatomic) EKEventStore *eventStore;
@property (retain, nonatomic) EKChangeSet *changeSet;
@property (retain, nonatomic) NSMutableDictionary *_cachedMeltedObjects;
@property (retain, nonatomic) NSDictionary *additionalFrozenProperties;
@property (retain, nonatomic) NSDictionary *additionalMeltedObjects;
@property (retain, nonatomic) NSMutableDictionary *_cachedValues;
@property (retain, nonatomic) EKObjectValidationContext *_validationContext;
@property (retain, nonatomic) EKPersistentObject *backingObject;
@property (readonly, nonatomic) BOOL hasChanges;
@property (readonly, nonatomic, getter=isNew) BOOL new;
@property (readonly, nonatomic) BOOL isFrozen;
@property (readonly, nonatomic) BOOL isPartialObject;
@property (readonly, nonatomic) NSString *uniqueIdentifier;
@property (readonly, nonatomic) NSString *semanticIdentifier;
@property (readonly, nonatomic) EKObjectID *objectID;
@property (readonly, nonatomic) CADGenerationStampedObjectID *CADObjectID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL canBeConvertedToFullObject;
@property (readonly, nonatomic) NSDictionary *preFrozenRelationshipObjects;

+ (id)knownRelationshipSingleValueKeys;
+ (id)knownSingleValueKeysForComparison;
+ (Class)frozenClass;
+ (Class)meltedClass;
+ (id)knownIdentityKeysForComparison;
+ (BOOL)isWeakRelationship;
+ (BOOL)_compareIdentityKeysForObject:(id)a0 againstObject:(id)a1 propertiesToIgnore:(id)a2;
+ (BOOL)_compareIdentityKeysForObject:(id)a0 againstObject:(id)a1 propertiesToIgnore:(id)a2;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (void)_addChangesFromObject:(id)a0 toObjects:(id)a1 passingTest:(id /* block */)a2 copyingBackingObjects:(BOOL)a3;
+ (id)_array:(id)a0 intersectedWithSet:(id)a1 minusSet:(id)a2;
+ (id)_changeSetForDiff:(id)a0;
+ (BOOL)_compareAllKnownKeysExceptKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2;
+ (BOOL)_compareAllKnownKeysExceptKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareIdentityKeys:(BOOL)a3;
+ (BOOL)_compareKnownKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2;
+ (BOOL)_compareKnownKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareIdentityKeys:(BOOL)a3 compareImmutableKeys:(BOOL)a4 propertiesToIgnore:(id)a5;
+ (BOOL)_compareKnownKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareIdentityKeys:(BOOL)a3 compareImmutableKeys:(BOOL)a4 propertiesToIgnore:(id)a5;
+ (BOOL)_compareKnownKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareImmutableKeys:(BOOL)a3 propertiesToIgnore:(id)a4;
+ (BOOL)_compareKnownKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareImmutableKeys:(BOOL)a3 propertiesToIgnore:(id)a4;
+ (BOOL)_compareMultiValueRelationshipKey:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareMultiValueRelationshipKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareMultiValueRelationshipKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareMutliValueRelationshipKey:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareNonIdentityKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareImmutableKeys:(BOOL)a3 propertiesToIgnore:(id)a4;
+ (BOOL)_compareNonIdentityKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 compareImmutableKeys:(BOOL)a3 propertiesToIgnore:(id)a4;
+ (BOOL)_compareNonIdentityKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareNonRelationshipKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareRelationshipObject1:(id)a0 againstRelationshipObject2:(id)a1 propertiesToIgnore:(id)a2;
+ (BOOL)_compareRelationshipObject1:(id)a0 againstRelationshipObject2:(id)a1 propertiesToIgnore:(id)a2 relationshipObjectKey:(id)a3;
+ (BOOL)_compareSingleValueRelationshipKey:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareSingleValueRelationshipKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (BOOL)_compareSingleValueRelationshipKeys:(id)a0 forObject:(id)a1 againstObject:(id)a2 propertiesToIgnore:(id)a3;
+ (id)_createNonPartialObjectFromObject:(id)a0 ifPropertyIsUnavailable:(id)a1;
+ (unsigned long long)_numberOfSharedLocksForUnitTesting;
+ (BOOL)_object:(id)a0 equalsObject:(id)a1 forKeys:(id)a2 compareImmutableKeys:(BOOL)a3 ignoringProperties:(id)a4;
+ (BOOL)_objects:(id)a0 haveSameMeltedClass:(Class)a1 frozenClass:(Class)a2;
+ (void)addChangesFromObject:(id)a0 toObjects:(id)a1 except:(id)a2;
+ (void)addChangesFromObject:(id)a0 toObjects:(id)a1 keep:(id)a2;
+ (void)addChangesFromObject:(id)a0 toObjects:(id)a1 passingTest:(id /* block */)a2;
+ (BOOL)canonicalizedEqualityTestValue1:(id)a0 value2:(id)a1 key:(id)a2 object1:(id)a3 object2:(id)a4;
+ (id)defaultPropertyKeysToSkipForRecursiveSnapshotCopies;
+ (id)duplicatedPersistentObjectForObject:(id)a0 alreadyCopiedObjects:(id)a1;
+ (BOOL)isDerivedRelationship;
+ (BOOL)isMeltedAndNotWeakRelationshipObject:(id)a0 forKey:(id)a1;
+ (BOOL)isWeakRelationObject:(id)a0 forKey:(id)a1;
+ (id)keysToIgnoreForApplyingChanges;
+ (id)knownDerivedAndSingleValueRelationshipKeys;
+ (id)knownDerivedRelationshipKeys;
+ (id)knownImmutableKeys;
+ (id)knownRelationshipMultiValueKeysForValidation;
+ (id)knownRelationshipSingleValueKeysForValidation;
+ (id)knownRelationshipWeakKeys;
+ (id)knownSummaryKeys;
+ (id)objectsIDsExistingInStoreFromObjects:(id)a0 eventStore:(id)a1;
+ (id)propertiesUnavailableForPartialObjects;

- (void)rollback;
- (BOOL)_reset;
- (id)initWithObject:(id)a0;
- (BOOL)refresh;
- (BOOL)isSaved;
- (BOOL)isDeleted;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (void)applyChanges:(id)a0;
- (int)rowID;
- (void)addChanges:(id)a0;
- (BOOL)validate:(id *)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)_sharedInit;
- (id)changedKeys;
- (Class)frozenClass;
- (BOOL)isEqual:(id)a0;
- (id)init;
- (BOOL)hasUnsavedChanges;
- (void)_resetInternalState;
- (id)duplicate;
- (void).cxx_destruct;
- (void)reset;
- (BOOL)isUndeleted;
- (BOOL)_hasChanges;
- (void)_applyKnownImmutableValuesFrom:(id)a0;
- (BOOL)_hasChangesForKey:(id)a0 checkUnsaved:(BOOL)a1;
- (void)_rollbackCommon;
- (id)diffWithObject:(id)a0;
- (void)markAsUndeleted;
- (void)markAsCommitted;
- (id)multiChangedObjectValuesForKey:(id)a0;
- (void)refetch;
- (void)_addCachedMeltedObject:(id)a0 forMultiValueKey:(id)a1;
- (void)_addChanges:(id)a0 copyingBackingObjects:(BOOL)a1;
- (void)_addChangesFromObject:(id)a0 passingTest:(id /* block */)a1 ignoreRelations:(id)a2 copyingBackingObjects:(BOOL)a3;
- (void)_addSummaryWithDepth:(long long)a0 toMutableString:(id)a1 indentFirstLine:(BOOL)a2;
- (void)_applyDefinedAfterFirstSaveFrom:(id)a0;
- (BOOL)_areOnlyChangedKeys:(id)a0;
- (id)_basicSummaryWithDepth:(long long)a0;
- (void)_cachedMeltedChildIdentifierToParentMap:(id)a0;
- (unsigned long long)_cachedMeltedObjectsCount;
- (id)_convertBackingObjectsWithPath:(id)a0 updateBackingObjects:(BOOL)a1 allChangedBackingObjects:(id)a2 eventStore:(id)a3 updatedBackingObjectProvider:(id)a4;
- (id)_copyWithoutChangesInZone:(struct _NSZone { } *)a0;
- (BOOL)_hasChangeHelperInKeys:(id)a0 ignoreKeys:(id)a1 checkUnsaved:(BOOL)a2;
- (BOOL)_hasChangesForKey:(id)a0;
- (BOOL)_hasUnsavedChangesInKeys:(id)a0 ignoreKeys:(id)a1;
- (void)_initChangeSetIfNone;
- (BOOL)_isNew;
- (BOOL)_isOnlyChangedKey:(id)a0;
- (BOOL)_isPropertyUnavailable:(id)a0 convertToFullObjectIfUnavailable:(BOOL)a1;
- (void)_markAsCommittedCommon;
- (void)_markAsDeletedCommon;
- (void)_markAsNewCommon;
- (void)_markAsNotNewCommon;
- (void)_markAsSavedCommon;
- (void)_markAsUndeletedCommon;
- (id)_multiRelationshipKeysToCheckForChanges;
- (void)_performBlockOnOwnedCachedRelatedObjects:(id /* block */)a0;
- (void)_performWithReadLock:(id /* block */)a0;
- (void)_performWithWriteLock:(id /* block */)a0;
- (id)_previousValueForKey:(id)a0;
- (id)_propertyValueForKey:(id)a0;
- (id)_readWriteLock;
- (id)_recursiveSnapshotCopyWithPropertyAccessor:(id /* block */)a0 propertyKeysToCopy:(id)a1 propertyKeysToSkip:(id)a2 recurseOnWeakRelations:(BOOL)a3;
- (BOOL)_refreshCommon;
- (BOOL)_refreshable;
- (void)_removeCachedMeltedObject:(id)a0 forMultiValueKey:(id)a1;
- (void)_resetAfterUpdatingChangeSetOrBackingObject;
- (BOOL)_resetCommon;
- (BOOL)_resetIfBackingObjectIsOfClass:(Class)a0 fetchResetFrozenObjectBlock:(id /* block */)a1;
- (void)_resetMeltedCache;
- (void)_resetWithFrozenObject:(id)a0;
- (id)_singleRelationshipKeysToCheckForChanges;
- (id)_summaryWithDepth:(long long)a0;
- (void)_updateCachedMeltedObjectSetForMultiValueKey:(id)a0 usingBlock:(id /* block */)a1;
- (void)_updatePersistentValueForKey:(id)a0;
- (void)addCachedMeltedObject:(id)a0 forMultiValueKey:(id)a1;
- (void)addChangesFromObject:(id)a0;
- (void)addChangesFromObject:(id)a0 copyingBackingObjects:(BOOL)a1;
- (void)addCoCommitObject:(id)a0;
- (void)addMultiChangedObjectValue:(id)a0 forKey:(id)a1;
- (void)addMultiChangedObjectValues:(id)a0 forKey:(id)a1;
- (void)augmentMeltedObjectCache:(id)a0;
- (id)backingObjectOfChildObject:(id)a0 withRelationshipKey:(id)a1;
- (id)cachedMeltedChildIdentifierToParentMap;
- (id)cachedMeltedObjectForSingleValueKey:(id)a0;
- (id)cachedMeltedObjectsForMultiValueKey:(id)a0;
- (id)cachedValueForKey:(id)a0;
- (id)cachedValueForKey:(id)a0 expectingCachedValue:(id)a1 forMasterKey:(id)a2 relatedKeys:(id)a3 populateBlock:(id /* block */)a4;
- (id)cachedValueForKey:(id)a0 populateBlock:(id /* block */)a1;
- (void)clearCachedValueForKey:(id)a0;
- (void)clearCachedValuesForKeys:(id)a0;
- (id)committedCopy;
- (id)committedValueForKey:(id)a0;
- (id)copyMeltedObjectCache;
- (void)deletePersistentObject;
- (id)duplicateToEventStore:(id)a0;
- (void)emptyMeltedCache;
- (void)emptyMeltedCacheForKey:(id)a0;
- (void)emptyMeltedCacheForKeys:(id)a0;
- (id)existingMeltedObject;
- (BOOL)existsInStore;
- (id)frozenObject;
- (id)frozenObjectInStore:(id)a0;
- (id)frozenOrMeltedCachedMultiRelationObjectsForKey:(id)a0;
- (id)frozenOrMeltedCachedSingleRelationObjectForKey:(id)a0;
- (BOOL)hasEverBeenCommitted;
- (BOOL)hasNeverBeenCommitted;
- (BOOL)hasUnsavedChangesIgnoreKeys:(id)a0;
- (BOOL)hasUnsavedChangesInKeys:(id)a0;
- (id)initWithPersistentObject:(id)a0;
- (id)initWithPersistentObject:(id)a0 objectForCopy:(id)a1;
- (void)insertPersistentObjectIfNeeded;
- (id)inverseObjectWithObject:(id)a0 diff:(id *)a1;
- (BOOL)isCompletelyEqual:(id)a0;
- (BOOL)isDifferentFromCommitted;
- (BOOL)isEqual:(id)a0 comparingKeys:(id)a1 compareImmutableKeys:(BOOL)a2 ignoringProperties:(id)a3;
- (BOOL)isEqual:(id)a0 ignoringProperties:(id)a1;
- (BOOL)isPropertyUnavailable:(id)a0;
- (void)markAsDeleted;
- (void)markAsNew;
- (void)markAsNotNew;
- (void)markAsSaved;
- (unsigned long long)meltedAndCachedMultiRelationCountForKey:(id)a0;
- (id)meltedAndCachedMultiRelationObjectsForKey:(id)a0;
- (id)meltedAndCachedSingleRelationObjectForKey:(id)a0;
- (id)meltedObjectInStore:(id)a0;
- (id)prepareReminderKitObjectForSaveWithUpdatedBackingObjectProvider:(id)a0;
- (id)previouslySavedCopy;
- (id)privacyDescription;
- (void)rebase;
- (void)rebaseSkippingRelationProperties:(id)a0;
- (void)rebaseSkippingRelationProperties:(id)a0 toEventStore:(id)a1;
- (void)rebaseToEventStore:(id)a0;
- (BOOL)refreshAndNotify:(BOOL)a0;
- (void)removeCachedMeltedObject:(id)a0 forMultiValueKey:(id)a1;
- (void)removeMultiChangedObjectValue:(id)a0 forKey:(id)a1;
- (void)removeMultiChangedObjectValues:(id)a0 forKey:(id)a1;
- (void)replaceMultiChangedObjectValuesWithObjectValues:(id)a0 forKey:(id)a1;
- (BOOL)revert;
- (void)setCachedMeltedObject:(id)a0 forSingleValueKey:(id)a1;
- (void)setCachedMeltedObjects:(id)a0 forMultiValueKey:(id)a1;
- (void)setCachedValue:(id)a0 forKey:(id)a1;
- (void)setSingleChangedValue:(id)a0 forKey:(id)a1;
- (id)shallowCopyWithoutChanges;
- (BOOL)shouldLoadRelationshipForValidation:(id)a0;
- (id)singleChangedValueForKey:(id)a0;
- (id)snapshotCopy;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)a0;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)a0 propertyKeysToSkip:(id)a1;
- (void)updateAfterApplyingChanges:(id)a0;
- (void)updateMeltedAndCachedMultiRelationObjects:(id)a0 forKey:(id)a1;
- (void)updateMeltedAndCachedSingleRelationObject:(id)a0 forKey:(id)a1 frozenClass:(Class)a2;
- (void)updateMeltedCacheForChangeSet:(id)a0;
- (void)updateMultiValueCacheForChangeSet:(id)a0 preservingExistingAdds:(BOOL)a1;
- (void)updatePersistentObject;
- (void)updatePersistentObjectSkippingProperties:(id)a0;
- (void)updatePersistentValueForKeyIfNeeded:(id)a0;
- (BOOL)validateWithOwner:(id)a0 error:(id *)a1;

@end

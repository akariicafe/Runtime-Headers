@class EspressoProfilingNetworkInfo, NSString, NSArray, MLCompilerNeuralNetworkOutput, MLVersionInfo, NSMutableDictionary, NSDictionary, NSObject, MLModelDescription, MLModelMetadata;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface MLNeuralNetworkEngine : MLModel <MLNeuralNetwork, MLClassifier, MLRegressor, MLCompiledModelLoader> {
    struct vector<std::map<std::string, espresso_buffer_t *>, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__begin_; void *__end_; struct __compressed_pair<std::map<std::string, espresso_buffer_t *> *, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__value_; } __end_cap_; } _inputBuffers;
    struct vector<std::map<std::string, espresso_buffer_t *>, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__begin_; void *__end_; struct __compressed_pair<std::map<std::string, espresso_buffer_t *> *, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__value_; } __end_cap_; } _outputBuffers;
    struct map<std::string, Espresso::vimage2espresso_param, std::less<std::string>, std::allocator<std::pair<const std::string, Espresso::vimage2espresso_param>>> { struct __tree<std::__value_type<std::string, Espresso::vimage2espresso_param>, std::__map_value_compare<std::string, std::__value_type<std::string, Espresso::vimage2espresso_param>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, Espresso::vimage2espresso_param>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, Espresso::vimage2espresso_param>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, Espresso::vimage2espresso_param>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _params;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _widths;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _heights;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _ks;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _batches;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _sequences;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _ranks;
    struct vector<bool, std::allocator<bool>> { unsigned long long *__begin_; unsigned long long __size_; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long __value_; } __cap_alloc_; } _bufferAvailable;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long __value_; } __pair3_; } __tree_; } _flexibleShapesConfigNamesInNet;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long __cap_ : 63; unsigned char __is_long_ : 1; } __l; struct __short { char __data_[23]; unsigned char __padding_[0]; unsigned char __size_ : 7; unsigned char __is_long_ : 1; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } _currentConfigurationName;
    struct map<std::string, bool, std::less<std::string>, std::allocator<std::pair<const std::string, bool>>> { struct __tree<std::__value_type<std::string, bool>, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, bool>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, bool>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _OutputBlobIsDynamic;
    NSMutableDictionary *_pixelBufferPoolCache;
    struct OpaqueVTPixelTransferSession { } *_transferSession;
    MLCompilerNeuralNetworkOutput *_compilerOutput;
}

@property (readonly, nonatomic) unsigned long long numInputs;
@property (readonly, nonatomic) unsigned long long numOutputs;
@property (nonatomic) BOOL usingCPU;
@property (nonatomic) void *plan;
@property (nonatomic) int precision;
@property (nonatomic) int engine;
@property (nonatomic) int qos;
@property (nonatomic) void *context;
@property (nonatomic) BOOL isEspressoBiasPreprocessingShared;
@property (retain, nonatomic) NSArray *classLabels;
@property (retain, nonatomic) NSString *classScoreVectorName;
@property (retain, nonatomic) id probabilityDictionarySharedKeySet;
@property (retain, nonatomic) NSString *modelFilePath;
@property (nonatomic) BOOL hasBidirectionalLayer;
@property (readonly, nonatomic) BOOL modelIsEncrypted;
@property (nonatomic) BOOL hasOptionalInputSequenceConcat;
@property (retain) NSObject<OS_dispatch_semaphore> *bufferSemaphore;
@property (retain) NSObject<OS_dispatch_queue> *espressoQueue;
@property (retain) NSObject<OS_dispatch_queue> *predictionsQueue;
@property (retain) NSObject<OS_dispatch_semaphore> *submitSemaphore;
@property BOOL isGPUPathForbidden;
@property BOOL isANEPathForbidden;
@property (readonly, nonatomic) NSMutableDictionary *inputBlobNameToLastBackingMode;
@property (readonly, nonatomic) NSMutableDictionary *outputBlobNameToLastBackingMode;
@property (nonatomic) BOOL ndArrayInterpretation;
@property (retain, nonatomic) NSDictionary *imagePreprocessingParameters;
@property (retain, nonatomic) EspressoProfilingNetworkInfo *espressoProfileInfo;
@property (readonly, nonatomic) NSDictionary *optionalInputTypes;
@property (nonatomic) struct { void *plan; int network_index; } network;
@property (retain, nonatomic) NSDictionary *defaultOptionalValues;
@property (readonly, retain, nonatomic) MLVersionInfo *compilerVersionInfo;
@property (retain, nonatomic) NSString *activeFunction;
@property (readonly, retain, nonatomic) NSArray *inputLayers;
@property (readonly, retain, nonatomic) NSArray *outputLayers;
@property (nonatomic) BOOL hardwareFallbackDetected;
@property (retain, nonatomic) NSDictionary *espressoInputShapes;
@property (retain, nonatomic) NSDictionary *espressoInputStrides;
@property (readonly, nonatomic) MLVersionInfo *modelVersionInfo;
@property (nonatomic) BOOL modelIsMIL;
@property (retain, nonatomic) MLModelDescription *modelDescription;
@property (readonly) MLModelMetadata *metadata;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (Class)containerClass;
+ (int)gpuPrecision;
+ (int)gpuEngine;
+ (id)loadModelFromCompiledArchive:(void *)a0 modelVersionInfo:(id)a1 compilerVersionInfo:(id)a2 configuration:(id)a3 error:(id *)a4;
+ (id)neuralNetworkFromContainer:(id)a0 configuration:(id)a1 error:(id *)a2;
+ (id)neuralNetworkFromContainer:(id)a0 error:(id *)a1;

- (struct __CVBuffer { } *)pixelBufferFromOutputBacking:(id)a0 forFeature:(id)a1;
- (BOOL)transferPixelBuffer:(struct __CVBuffer { } *)a0 toPixelBuffer:(struct __CVBuffer { } *)a1;
- (id)verifyInputs:(id)a0 error:(id *)a1;
- (BOOL)copyImagePreprocessingParametersTo:(void *)a0 error:(id *)a1;
- (BOOL)_setupContextAndPlanWithConfiguration:(id)a0 usingCPU:(BOOL)a1 reshapeWithContainer:(BOOL)a2 error:(id *)a3;
- (id)parameterValueForKey:(id)a0 error:(id *)a1;
- (void)dumpTestVectorsToPath:(id)a0;
- (BOOL)bindDirectlyInputFeatureNamed:(id)a0 pixelBuffer:(struct __CVBuffer { } *)a1 cleanUpBlocks:(id)a2 error:(id *)a3;
- (BOOL)usingEspressoConfigurations;
- (id)populateOutputs:(unsigned long long)a0 outputBackings:(id)a1 directlyBoundOutputFeatureNames:(id)a2 error:(id *)a3;
- (id)regress:(id)a0 options:(id)a1 error:(id *)a2;
- (id)evaluateInputs:(id)a0 options:(id)a1 verifyInputs:(BOOL)a2 error:(id *)a3;
- (unsigned long long)supportFromEspressoLayerInfo:(id)a0;
- (id)outputBackingMultiArrayForFeatureName:(id)a0;
- (BOOL)bindInputsAndOutputs:(id)a0 cleanUpBlocks:(id)a1 bufferIndex:(unsigned long long)a2 options:(id)a3 error:(id *)a4;
- (id)convertPredictionToClassifierResult:(id)a0 withOptions:(id)a1 error:(id *)a2;
- (BOOL)tryToSetOutputBacking:(id)a0 forFeatureName:(id)a1 toEbuf:(struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a2 reportPointerFlags:(int *)a3 error:(id *)a4;
- (id)pixelBufferBackedMultiArrayWithShape:(id)a0;
- (BOOL)collectParametersFromContainer:(id)a0 configuration:(id)a1 error:(id *)a2;
- (id)evaluate:(id)a0 error:(id *)a1;
- (id)evaluateBatch:(id)a0 options:(id)a1 error:(id *)a2;
- (struct __CVBuffer { } *)copyPixelBufferFromPixelBuffer:(struct __CVBuffer { } *)a0 usingPixelFormat:(unsigned int)a1;
- (id)imageFeatureValueFromPixelBuffer:(struct __CVBuffer { } *)a0 usingPixelFormat:(unsigned int)a1;
- (struct __CVBuffer { } *)copyPixelBufferByApplyingImagePreprocessingForFeatureNamed:(id)a0 toPixelBuffer:(struct __CVBuffer { } *)a1;
- (void)enableInstrumentsTracing;
- (long long)inputBindStateForFeatureValue:(id)a0 error:(id *)a1;
- (id)availableOutputBlobList;
- (BOOL)_espressoOutputShapeForFeatureName:(id)a0 matchesShapeOfMLMultiArray:(id)a1;
- (unsigned long long)obtainBuffer;
- (id)addClassifierInformationToOutput:(id)a0 options:(id)a1 error:(id *)a2;
- (id)initWithContainer:(id)a0 configuration:(id)a1 error:(id *)a2;
- (BOOL)_matchEngineToOptions:(id)a0 error:(id *)a1;
- (unsigned long long)supportFromEspressoPlatform:(int)a0;
- (BOOL)_addCompiledNetworkOrProgramToPlan:(void *)a0 error:(id *)a1;
- (BOOL)_setMultiArrayOutputBacking:(id)a0 forOutputFeatureName:(id)a1 toEbuf:(struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a2 error:(id *)a3;
- (int)_espressoDeviceForConfiguration:(id)a0 error:(id *)a1;
- (struct __CVBuffer { } *)copyPixelBufferByApplyingImagePreprocessing:(const struct vimage2espresso_param { float x0; int x1; int x2; int x3; float x4; float x5; float x6; float x7; int x8; unsigned int x9; unsigned int x10; unsigned int x11; int x12; int x13; int x14; } *)a0 toPixelBuffer:(struct __CVBuffer { } *)a1;
- (BOOL)verifyPixelBufferOutputBacking:(struct __CVBuffer { } *)a0 forFeature:(id)a1 error:(id *)a2;
- (BOOL)_addNetworkToPlan:(void *)a0 error:(id *)a1;
- (int)sequenceNamed:(id)a0;
- (id)imageFeatureValueFromEbuf:(struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a0 backingCVPixelBuffer:(struct __CVBuffer { } *)a1 description:(id)a2 error:(id *)a3;
- (void)releaseBuffer:(unsigned long long)a0;
- (BOOL)bindOutputBuffers:(const void *)a0 outputBackings:(id)a1 automaticOutputBackingMode:(id)a2 directlyBoundOutputFeatureNames:(id)a3 error:(id *)a4;
- (BOOL)resetSizes:(id)a0 error:(id *)a1;
- (id)classify:(id)a0 options:(id)a1 error:(id *)a2;
- (BOOL)updateDynamicOutputBlobIndicatorCacheAndReturnError:(id *)a0;
- (BOOL)_setupContextAndPlanWithConfiguration:(id)a0 usingCPU:(BOOL)a1 error:(id *)a2;
- (BOOL)copyEbuf:(const struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a0 ofPixelType:(unsigned long long)a1 toPixelBuffer:(struct __CVBuffer { } *)a2 error:(id *)a3;
- (BOOL)bindInputFeatureNamed:(id)a0 featureValue:(id)a1 bufferIndex:(unsigned long long)a2 cleanUpBlocks:(id)a3 error:(id *)a4;
- (struct __CVPixelBufferPool { } *)pixelBufferPoolWithSize:(struct CGSize { double x0; double x1; })a0 pixelFormat:(unsigned int)a1;
- (id)evaluateInputs:(id)a0 options:(id)a1 error:(id *)a2;
- (BOOL)bindInputFeatureNamed:(id)a0 convertingMultiArray:(id)a1 bufferIndex:(unsigned long long)a2 error:(id *)a3;
- (BOOL)transferOneComponent16HalfPixelBuffer:(struct __CVBuffer { } *)a0 toPixelBuffer:(struct __CVBuffer { } *)a1 withScale:(float)a2 bias:(float)a3;
- (BOOL)verifyOutputBacking:(id)a0 forFeature:(id)a1 error:(id *)a2;
- (id)predictionsFromBatch:(id)a0 options:(id)a1 error:(id *)a2;
- (BOOL)resetSizesNoAutoRelease:(id)a0 error:(id *)a1;
- (BOOL)bindDynamicOutputBuffers:(const void *)a0 error:(id *)a1;
- (id)executionSchedule;
- (id).cxx_construct;
- (BOOL)_setupContextAndPlanWithForceCPU:(BOOL)a0 error:(id *)a1;
- (id)completeOutputBackings:(id)a0 automaticOutputBackingMode:(id)a1 error:(id *)a2;
- (BOOL)bindInputFeatures:(id)a0 bufferIndex:(unsigned long long)a1 cleanUpBlocks:(id)a2 error:(id *)a3;
- (BOOL)_setMultipleBuffersOnPlan:(void *)a0 error:(id *)a1;
- (id)initWithContainer:(id)a0 error:(id *)a1;
- (id)multiArrayFeatureValueFromEbuf:(struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a0 backingMultiArray:(id)a1 description:(id)a2 outputName:(id)a3 error:(id *)a4;
- (struct __CVBuffer { } *)_pixelBufferFromEbuf:(struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a0 description:(id)a1 error:(id *)a2;
- (BOOL)executePlan:(void *)a0 error:(id *)a1;
- (BOOL)_setupContextAndPlanWithConfiguration:(id)a0 error:(id *)a1;
- (id)predictionFromFeatures:(id)a0 options:(id)a1 error:(id *)a2;
- (BOOL)rebuildPlan:(id *)a0;
- (BOOL)bindInputFeatureNamed:(id)a0 pixelBuffer:(struct __CVBuffer { } *)a1 cleanUpBlocks:(id)a2 error:(id *)a3;
- (struct __CVBuffer { } *)createPixelBufferWithSize:(struct CGSize { double x0; double x1; })a0 pixelFormat:(unsigned int)a1;
- (id)evaluateInputs:(id)a0 bufferIndex:(unsigned long long)a1 options:(id)a2 error:(id *)a3;
- (BOOL)opacifyAndPermutePixelBuffer:(struct __CVBuffer { } *)a0 bufferContainsBGRA:(BOOL)a1 error:(id *)a2;
- (void)populateMultiArrayShape:(id *)a0 strides:(id *)a1 forEbuf:(struct { void *x0; void *x1; unsigned long long x2[4]; unsigned long long x3[4]; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)a2 featureDescription:(id)a3 ndArrayInterpretation:(BOOL)a4;
- (void)_deallocContextAndPlan;
- (id)sortBatchByShape:(id)a0 withMap:(id *)a1 error:(id *)a2;
- (void)prepareBlobNamed:(id)a0 forNewBlobBackingMode:(long long)a1 bindMode:(int)a2;
- (BOOL)sequenceConcatConsumesOptionalInputNamed:(id)a0;
- (BOOL)lockPixelBuffer:(struct __CVBuffer { } *)a0 cleanUpBlocks:(id)a1 error:(id *)a2;
- (BOOL)resetSizesWithEspressoConfigurations:(id)a0 error:(id *)a1;
- (BOOL)rebuildPlan:(BOOL)a0 error:(id *)a1;
- (BOOL)setEspressoBlobShapes:(void *)a0 widths:(void *)a1 heights:(void *)a2 ks:(void *)a3 batches:(void *)a4 sequences:(void *)a5 ranks:(void *)a6 error:(id *)a7;
- (BOOL)verifyMultiArrayOutputBacking:(id)a0 forFeature:(id)a1 error:(id *)a2;
- (void)dealloc;
- (void).cxx_destruct;

@end

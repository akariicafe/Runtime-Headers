@class NSOperationQueue, NSString, NSObject;
@protocol OS_dispatch_queue;

@interface CMMotionManagerInternal : NSObject {
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } fSampleLock;
    struct Dispatcher { void /* function */ **x0; id x1; } *fAccelerometerDispatcher;
    double fAccelerometerUpdateInterval;
    id /* block */ fAccelerometerHandler;
    NSOperationQueue *fAccelerometerQueue;
    double fLastAccelerometerNotificationTimestamp;
    struct Sample { double timestamp; struct { float x; float y; float z; } acceleration; } fLatestAccelerometerSample;
    struct Dispatcher { void /* function */ **x0; id x1; } *fAmbientPressureDispatcher;
    double fAmbientPressureUpdateInterval;
    id /* block */ fAmbientPressureHandler;
    NSOperationQueue *fAmbientPressureQueue;
    double fLastAmbientPressureNotificationTimestamp;
    struct Sample { double timestamp; struct { float pressure; float temperature; } pressureData; } fLatestAmbientPressureSample;
    struct Dispatcher { void /* function */ **x0; id x1; } *fCompensatedAmbientPressureDispatcher;
    double fCompensatedAmbientPressureUpdateInterval;
    id /* block */ fCompensatedAmbientPressureHandler;
    NSOperationQueue *fCompensatedAmbientPressureQueue;
    double fLastCompensatedAmbientPressureNotificationTimestamp;
    struct Sample { double timestamp; struct { float pressure; float temperature; } pressureData; } fLatestCompensatedAmbientPressureSample;
    struct Dispatcher { void /* function */ **x0; id x1; } *fGyroDispatcher;
    double fGyroUpdateInterval;
    id /* block */ fGyroHandler;
    NSOperationQueue *fGyroQueue;
    double fLastGyroNotificationTimestamp;
    struct Sample { double timestamp; struct { float x; float y; float z; } rotationRate; unsigned short sampleNum; BOOL fsync; } fLatestGyroSample;
    struct Dispatcher { void /* function */ **x0; id x1; } *fDeviceMotionDispatcher;
    double fDeviceMotionUpdateInterval;
    id /* block */ fDeviceMotionHandler;
    NSOperationQueue *fDeviceMotionQueue;
    double fLastDeviceMotionNotificationTimestamp;
    int fDeviceMotionMode;
    unsigned long long fAttitudeReferenceFrame;
    BOOL fCompassCalibrationHud;
    BOOL fIsCompassCalibrated;
    BOOL fIsUsingCalibratedCompass;
    BOOL fHaveSentDeviceRequiresMovementError;
    BOOL fHaveSentTrueNorthUnavailableError;
    double fDeviceMotionStartTimestamp;
    struct { double w; double x; double y; double z; } fInitialReferenceRotation;
    BOOL fIsInitialReferenceAvailable;
    struct Dispatcher { void /* function */ **x0; id x1; } *fMagnetometerDispatcher;
    double fMagnetometerUpdateInterval;
    id /* block */ fMagnetometerHandler;
    NSOperationQueue *fMagnetometerQueue;
    double fLastMagnetometerNotificationTimestamp;
    struct Sample { double timestamp; struct { float x; float y; float z; } magneticField; float temperature; } fLatestMagnetometerSample;
    BOOL fShowsDeviceMovementDisplay;
    struct Dispatcher { void /* function */ **x0; id x1; } *fPrivateAccelerometerDataDispatcher;
    void /* function */ *fPrivateAccelerometerDataCallback;
    void *fPrivateAccelerometerDataCallbackInfo;
    struct Dispatcher { void /* function */ **x0; id x1; } *fPrivateGyroDataDispatcher;
    void /* function */ *fPrivateGyroDataCallback;
    void *fPrivateGyroDataCallbackInfo;
    struct Dispatcher { void /* function */ **x0; id x1; } *fPrivateMagnetometerDataDispatcher;
    void /* function */ *fPrivateMagnetometerDataCallback;
    void *fPrivateMagnetometerDataCallbackInfo;
    struct Dispatcher { void /* function */ **x0; id x1; } *fPrivateDeviceMotionDispatcher;
    void /* function */ *fPrivateDeviceMotionCallback;
    void *fPrivateDeviceMotionCallbackInfo;
    BOOL fPrivateDeviceMotionUse9Axis;
    BOOL fPrivateUseAccelerometer;
    void *fConnection;
    NSObject<OS_dispatch_queue> *fConnectionQueue;
    BOOL fSidebandSensorFusionEnabled;
    BOOL fSidebandSensorFusionLatency;
    BOOL fSidebandSensorFusionSnoop;
    struct unique_ptr<CLIspDataVisitor, std::default_delete<CLIspDataVisitor>> { struct __compressed_pair<CLIspDataVisitor *, std::default_delete<CLIspDataVisitor>> { struct CLIspDataVisitor *__value_; } __ptr_; } fSidebandVisitor;
    int fPrivatePowerConservationMode;
    void /* function */ *fPrivateNotificationCallback;
    void *fPrivateNotificationCallbackInfo;
    struct Dispatcher { void /* function */ **x0; id x1; } *fPrivateDeviceMotionSensorStatusDispatcher;
    id /* block */ fDeviceMotionErrorHandler;
    NSOperationQueue *fDeviceMotionErrorQueue;
    BOOL fIsApplicationActive;
    struct unique_ptr<CLDeviceMotionLiteService, std::default_delete<CLDeviceMotionLiteService>> { struct __compressed_pair<CLDeviceMotionLiteService *, std::default_delete<CLDeviceMotionLiteService>> { struct CLDeviceMotionLiteService *__value_; } __ptr_; } fDeviceMotionLiteService;
    struct unique_ptr<CMMotionManagerStatsCollector, std::default_delete<CMMotionManagerStatsCollector>> { struct __compressed_pair<CMMotionManagerStatsCollector *, std::default_delete<CMMotionManagerStatsCollector>> { struct CMMotionManagerStatsCollector *__value_; } __ptr_; } fMotionManagerStatsCollector;
    struct Dispatcher { void /* function */ **x0; id x1; } *fFactoryGyroDispatcher;
    double fFactoryGyroUpdateInterval;
    struct Dispatcher { void /* function */ **x0; id x1; } *fFactoryGyroTemperatureDispatcher;
    double fFactoryGyroTemperatureUpdateInterval;
    id /* block */ fFactoryGyroHandler;
    NSOperationQueue *fFactoryGyroQueue;
    double fLastFactoryGyroNotificationTimestamp;
    float fLastFactoryGyroTemperature;
    BOOL fFactoryGyroFitComputed;
    struct NonlinearGyroBiasFit { unsigned char fType; unsigned char fPadding[3]; struct LinearFit { float fSlope[3]; float fIntercept[3]; } fFits[8]; float fTemperatures[7]; float fOverlap; unsigned char fError[3][18]; } fFactoryGyroNonlinearGyroBiasFit;
    struct LinearFit { float fSlope[3]; float fIntercept[3]; } fFactoryGyroLinearGyroBiasFit;
    id /* block */ fKeyboardMotionHandler;
    NSOperationQueue *fKeyboardMotionQueue;
    struct Dispatcher { void /* function */ **x0; id x1; } *fKeyboardMotionDMDispatcher;
    double fKeyboardMotionTimestampGravityHidReportPrev;
    struct CMVector<float, 3UL> { float elements[3]; } fKeyboardMotionGravityHIDReportPrev;
    float fKeyboardMotionGravityDeltaThreshold;
    float fKeyboardMotionGravityNotificationFrequency;
    struct Dispatcher { void /* function */ **x0; id x1; } *fKeyboardMotionDispatcher;
}

@property (retain, nonatomic) NSOperationQueue *fDeviceMotionLiteClientQueue;
@property (copy, nonatomic) id /* block */ fDeviceMotionLiteFusedHandler;
@property (retain, nonatomic) NSString *fDeviceMotionLitePhysicalDeviceID;

- (id).cxx_construct;
- (void)teardownPrivate;
- (void)dealloc;
- (id)init;
- (void).cxx_destruct;

@end

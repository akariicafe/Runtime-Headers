@class NSArray, NSAttributedString;

@interface NSString : NSObject <NSItemProviderReading, NSItemProviderWriting, NSCopying, NSMutableCopying, NSSecureCoding>

@property (class, readonly, copy, nonatomic) NSArray *readableTypeIdentifiersForItemProvider;
@property (class, readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly) BOOL containsDotDotPathComponents;
@property (readonly, nonatomic) NSAttributedString *__baseAttributedString;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (readonly, copy) NSString *stringByRemovingPercentEncoding;
@property (readonly) unsigned long long length;

+ (id)NSStringFromLSInstallState:(unsigned long long)a0;
+ (id)NSStringFromLSInstallPhase:(unsigned long long)a0;
+ (id)NSStringFromLSInstallType:(unsigned long long)a0;
+ (id)stringWithFileSystemRepresentation:(const char *)a0 length:(unsigned long long)a1;
+ (id)stringWithFileSystemRepresentation:(const char *)a0;
+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone { } *)a0;
+ (id)pathWithComponents:(id)a0;
+ (BOOL)_subclassesMustBeExplicitlyMentionedWhenDecoded;
+ (id)objectWithItemProviderData:(id)a0 typeIdentifier:(id)a1 error:(id *)a2;
+ (id)string;
+ (id)stringWithString:(id)a0;
+ (id)stringWithContentsOfURL:(id)a0 encoding:(unsigned long long)a1 error:(id *)a2;
+ (id)stringWithFormat:(id)a0;
+ (id)stringWithUTF8String:(const char *)a0;
+ (id)localizedStringWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 error:(id *)a2;
+ (id)_newStringFromUTF16InternalData:(id)a0 typeIdentifier:(id)a1 error:(id *)a2;
+ (id)_newZStringWithCharacters:(const unsigned short *)a0 length:(unsigned long long)a1;
+ (id)_newZStringWithString:(id)a0;
+ (id)_newZStringWithUTF8String:(const char *)a0;
+ (id)_stringWithFormat:(id)a0 locale:(id)a1 options:(id)a2 arguments:(char *)a3;
+ (id)_web_stringRepresentationForBytes:(long long)a0;
+ (const unsigned long long *)availableStringEncodings;
+ (unsigned long long)defaultCStringEncoding;
+ (id)localizedNameOfStringEncoding:(unsigned long long)a0;
+ (id)localizedStringWithFormat:(id)a0;
+ (unsigned long long)stringEncodingForData:(id)a0 encodingOptions:(id)a1 convertedString:(id *)a2 usedLossyConversion:(BOOL *)a3;
+ (id)stringWithBytes:(const void *)a0 length:(unsigned long long)a1 encoding:(unsigned long long)a2;
+ (id)stringWithCString:(const char *)a0;
+ (id)stringWithCString:(const char *)a0 encoding:(unsigned long long)a1;
+ (id)stringWithCString:(const char *)a0 length:(unsigned long long)a1;
+ (id)stringWithCharacters:(const unsigned short *)a0 length:(unsigned long long)a1;
+ (id)stringWithContentsOfFile:(id)a0;
+ (id)stringWithContentsOfFile:(id)a0 encoding:(unsigned long long)a1 error:(id *)a2;
+ (id)stringWithContentsOfFile:(id)a0 usedEncoding:(unsigned long long *)a1 error:(id *)a2;
+ (id)stringWithContentsOfURL:(id)a0;
+ (id)stringWithContentsOfURL:(id)a0 usedEncoding:(unsigned long long *)a1 error:(id *)a2;
+ (id)stringWithFormat:(id)a0 locale:(id)a1;
+ (id)stringWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 error:(id *)a2;

- (BOOL)ls_matchesStringForPluginQuery:(id)a0;
- (id)ls_cleanForPluginQuery;
- (BOOL)ls_matchesForPluginQuery:(id)a0;
- (id)ls_visuallyOrderCharactersReturningError:(id *)a0;
- (id)_pb_fixCase:(BOOL)a0;
- (BOOL)isEqualToString:(id)a0;
- (id)propertyList;
- (void)getCharacters:(unsigned short *)a0;
- (float)floatValue;
- (id)replacementObjectForPortCoder:(id)a0;
- (void)getCharacters:(unsigned short *)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (int)intValue;
- (BOOL)_allowsDirectEncoding;
- (unsigned short)characterAtIndex:(unsigned long long)a0;
- (void)encodeWithCoder:(id)a0;
- (id)substringFromIndex:(unsigned long long)a0;
- (id)initWithCString:(const char *)a0 length:(unsigned long long)a1;
- (unsigned long long)_cfTypeID;
- (id)mutableCopyWithZone:(struct _NSZone { } *)a0;
- (id)stringByTrimmingCharactersInSet:(id)a0;
- (id)lowercaseString;
- (id)initWithContentsOfFile:(id)a0;
- (id)initWithCharacters:(const unsigned short *)a0 length:(unsigned long long)a1;
- (long long)longLongValue;
- (id)initWithCharactersNoCopy:(unsigned short *)a0 length:(unsigned long long)a1 deallocator:(id /* block */)a2;
- (id)initWithContentsOfURL:(id)a0;
- (long long)integerValue;
- (unsigned long long)fastestEncoding;
- (id)initWithUTF8String:(const char *)a0;
- (id)_newSubstringWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 zone:(struct _NSZone { } *)a1;
- (long long)compare:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 locale:(id)a3;
- (id)_createSubstringWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (const char *)_fastCStringContents:(BOOL)a0;
- (id)_initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 locale:(id)a2 options:(id)a3 error:(id *)a4 arguments:(char *)a5;
- (id)substringWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)initWithCoder:(id)a0;
- (id)initWithCharactersNoCopy:(unsigned short *)a0 length:(unsigned long long)a1 freeWhenDone:(BOOL)a2;
- (BOOL)writeToFile:(id)a0 atomically:(BOOL)a1;
- (unsigned long long)cStringLength;
- (double)doubleValue;
- (Class)classForCoder;
- (id)formatConfiguration;
- (BOOL)containsString:(id)a0;
- (id)initWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 encoding:(unsigned long long)a2 deallocator:(id /* block */)a3;
- (id)stringByReplacingOccurrencesOfString:(id)a0 withString:(id)a1 options:(unsigned long long)a2 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (id)stringByDeletingLastPathComponent;
- (id)stringByAppendingPathExtension:(id)a0;
- (id)initWithString:(id)a0;
- (id)stringByStandardizingPath;
- (struct { unsigned char x0 : 8; unsigned char x1 : 4; unsigned char x2 : 1; unsigned char x3 : 1; unsigned int x4 : 18; unsigned short x5[8]; })decimalValue;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)initWithData:(id)a0 encoding:(unsigned long long)a1;
- (BOOL)isNSString__;
- (id)stringByResolvingSymlinksInPath;
- (id)dataUsingEncoding:(unsigned long long)a0;
- (id)initWithCStringNoCopy:(char *)a0 length:(unsigned long long)a1 freeWhenDone:(BOOL)a2;
- (id)pathExtension;
- (id)lastPathComponent;
- (id)initWithFormat:(id)a0 locale:(id)a1 arguments:(char *)a2;
- (BOOL)writeToURL:(id)a0 atomically:(BOOL)a1;
- (BOOL)isEqual:(id)a0;
- (const char *)UTF8String;
- (id)pathComponents;
- (id)stringByAppendingPathComponent:(id)a0;
- (id)initWithCString:(const char *)a0;
- (const char *)lossyCString;
- (id)initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 locale:(id)a2 arguments:(char *)a3 error:(id *)a4;
- (id)initWithFormat:(id)a0;
- (id)stringByDeletingPathExtension;
- (BOOL)getBytes:(void *)a0 maxLength:(unsigned long long)a1 usedLength:(unsigned long long *)a2 encoding:(unsigned long long)a3 options:(unsigned long long)a4 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a5 remainingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a6;
- (void)getCString:(char *)a0;
- (id)_initWithFormat:(id)a0 locale:(id)a1 options:(id)a2 arguments:(char *)a3;
- (BOOL)isAbsolutePath;
- (id)initWithBytesNoCopy:(void *)a0 length:(unsigned long long)a1 encoding:(unsigned long long)a2 freeWhenDone:(BOOL)a3;
- (long long)compare:(id)a0;
- (unsigned long long)smallestEncoding;
- (id)init;
- (id)loadDataWithTypeIdentifier:(id)a0 forItemProviderCompletionHandler:(id /* block */)a1;
- (id)uppercaseString;
- (id)initWithCString:(const char *)a0 encoding:(unsigned long long)a1;
- (id)stringByExpandingTildeInPath;
- (id)substringToIndex:(unsigned long long)a0;
- (id)_stringByStandardizingPathUsingCache:(BOOL)a0;
- (BOOL)hasSuffix:(id)a0;
- (const char *)cString;
- (id)_stringByResolvingSymlinksInPathUsingCache:(BOOL)a0;
- (id)initWithFormat:(id)a0 arguments:(char *)a1;
- (const unsigned short *)_fastCharacterContents;
- (BOOL)_isCString;
- (id)stringByAbbreviatingWithTildeInPath;
- (BOOL)boolValue;
- (const char *)cStringUsingEncoding:(unsigned long long)a0;
- (id)stringByAppendingFormat:(id)a0;
- (id)stringByAppendingString:(id)a0;
- (id)stringByReplacingOccurrencesOfString:(id)a0 withString:(id)a1;
- (BOOL)writeToFile:(id)a0 atomically:(BOOL)a1 encoding:(unsigned long long)a2 error:(id *)a3;
- (id)decomposedStringWithCanonicalMapping;
- (BOOL)getCString:(char *)a0 maxLength:(unsigned long long)a1 encoding:(unsigned long long)a2;
- (BOOL)_getCString:(char *)a0 maxLength:(unsigned long long)a1 encoding:(unsigned int)a2;
- (id)_initWithFormat:(id)a0 locale:(id)a1 options:(id)a2;
- (id)_web_stringByTrimmingWhitespace;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })localizedStandardRangeOfString:(id)a0;
- (id)__escapeString5991;
- (id)_initWithDataOfUnknownEncoding:(id)a0;
- (id)_web_parseAsKeyValuePair_nowarn;
- (id)commonPrefixWithString:(id)a0 options:(unsigned long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })significantText;
- (id)_componentsSeparatedByCharactersInSet:(struct __CFCharacterSet { } *)a0;
- (id)_copyFormatStringWithConfiguration:(id)a0;
- (unsigned char)_encodingCantBeStoredInEightBitCFString;
- (unsigned int)_fastestEncodingInCFStringEncoding;
- (void)_flushRegularExpressionCaches;
- (void)_getBlockStart:(unsigned long long *)a0 end:(unsigned long long *)a1 contentsEnd:(unsigned long long *)a2 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 stopAtLineSeparators:(BOOL)a4;
- (id)_initWithBytesOfUnknownEncoding:(char *)a0 length:(unsigned long long)a1 copy:(BOOL)a2 usedEncoding:(unsigned long long *)a3;
- (id)_initWithFormat:(id)a0 options:(id)a1;
- (id)_initWithFormat:(id)a0 options:(id)a1 arguments:(char *)a2;
- (id)_initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 locale:(id)a2 options:(id)a3 error:(id *)a4;
- (id)_initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 options:(id)a2 error:(id *)a3;
- (id)_initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 options:(id)a2 error:(id *)a3 arguments:(char *)a4;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeOfCharacterFromSet:(struct __CFCharacterSet { } *)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeOfRegularExpressionPattern:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 locale:(id)a3;
- (unsigned int)_smallestEncodingInCFStringEncoding;
- (id)_stringByAddingPercentEncodingWithAllowedCharacters:(struct __CFCharacterSet { } *)a0;
- (id)_stringByReplacingOccurrencesOfRegularExpressionPattern:(id)a0 withTemplate:(id)a1 options:(unsigned long long)a2 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (id)_stringByTrimmingCharactersInSet:(struct __CFCharacterSet { } *)a0;
- (id)_stringRepresentation;
- (id)_web_HTTPStyleLanguageCode;
- (id)_web_HTTPStyleLanguageCodeWithoutRegion;
- (id)_web_URLFragment;
- (id)_web_characterSetFromContentTypeHeader_nowarn;
- (long long)_web_countOfString:(id)a0;
- (id)_web_domainFromHost;
- (BOOL)_web_domainMatches:(id)a0;
- (unsigned int)_web_extractFourCharCode;
- (id)_web_fileNameFromContentDispositionHeader_nowarn;
- (id)_web_filenameByFixingIllegalCharacters;
- (id)_web_fixedCarbonPOSIXPath;
- (BOOL)_web_hasCaseInsensitivePrefix:(id)a0;
- (BOOL)_web_hasCountryCodeTLD;
- (BOOL)_web_isCaseInsensitiveEqualToString:(id)a0;
- (BOOL)_web_isFileURL;
- (BOOL)_web_isJavaScriptURL;
- (BOOL)_web_looksLikeAbsoluteURL;
- (BOOL)_web_looksLikeIPAddress;
- (id)_web_mimeTypeFromContentTypeHeader_nowarn;
- (id)_web_parseAsKeyValuePairHandleQuotes_nowarn:(BOOL)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_web_rangeOfURLHost;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_web_rangeOfURLResourceSpecifier_nowarn;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_web_rangeOfURLScheme_nowarn;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_web_rangeOfURLUserPasswordHostPort;
- (id)_web_splitAtNonDateCommas_nowarn;
- (id)_web_stringByCollapsingNonPrintingCharacters;
- (id)_web_stringByExpandingTildeInPath;
- (id)_web_stringByReplacingValidPercentEscapes_nowarn;
- (id)_widthVariants;
- (BOOL)canBeConvertedToEncoding:(unsigned long long)a0;
- (id)capitalizedString;
- (id)capitalizedStringWithLocale:(id)a0;
- (long long)caseInsensitiveCompare:(id)a0;
- (long long)compare:(id)a0 options:(unsigned long long)a1;
- (long long)compare:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (unsigned long long)completePathIntoString:(id *)a0 caseSensitive:(BOOL)a1 matchesIntoArray:(id *)a2 filterTypes:(id)a3;
- (id)componentsSeparatedByCharactersInSet:(id)a0;
- (id)componentsSeparatedByString:(id)a0;
- (id)dataUsingEncoding:(unsigned long long)a0 allowLossyConversion:(BOOL)a1;
- (id)decomposedStringWithCompatibilityMapping;
- (id)displayableString;
- (void)enumerateLinesUsingBlock:(id /* block */)a0;
- (void)enumerateLinguisticTagsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 scheme:(id)a1 options:(unsigned long long)a2 orthography:(id)a3 usingBlock:(id /* block */)a4;
- (void)enumerateSubstringsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 options:(unsigned long long)a1 usingBlock:(id /* block */)a2;
- (const char *)fileSystemRepresentation;
- (BOOL)getBytes:(char *)a0 maxLength:(unsigned long long)a1 filledLength:(unsigned long long *)a2 encoding:(unsigned long long)a3 allowLossyConversion:(BOOL)a4 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a5 remainingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a6;
- (void)getCString:(char *)a0 maxLength:(unsigned long long)a1;
- (void)getCString:(char *)a0 maxLength:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 remainingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a3;
- (BOOL)getExternalRepresentation:(id *)a0 extendedAttributes:(id *)a1 forWritingToURLOrPath:(id)a2 usingEncoding:(unsigned long long)a3 error:(id *)a4;
- (BOOL)getFileSystemRepresentation:(char *)a0 maxLength:(unsigned long long)a1;
- (void)getLineStart:(unsigned long long *)a0 end:(unsigned long long *)a1 contentsEnd:(unsigned long long *)a2 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)getParagraphStart:(unsigned long long *)a0 end:(unsigned long long *)a1 contentsEnd:(unsigned long long *)a2 forRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (BOOL)hasPrefix:(id)a0;
- (id)initWithContentsOfFile:(id)a0 encoding:(unsigned long long)a1 error:(id *)a2;
- (id)initWithContentsOfFile:(id)a0 usedEncoding:(unsigned long long *)a1 error:(id *)a2;
- (id)initWithContentsOfURL:(id)a0 encoding:(unsigned long long)a1 error:(id *)a2;
- (id)initWithContentsOfURL:(id)a0 usedEncoding:(unsigned long long *)a1 error:(id *)a2;
- (id)initWithData:(id)a0 usedEncoding:(unsigned long long *)a1;
- (id)initWithFormat:(id)a0 locale:(id)a1;
- (id)initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 arguments:(char *)a2 error:(id *)a3;
- (id)initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 error:(id *)a2;
- (id)initWithValidatedFormat:(id)a0 validFormatSpecifiers:(id)a1 locale:(id)a2 error:(id *)a3;
- (unsigned long long)lengthOfBytesUsingEncoding:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })lineRangeForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)linguisticTagsInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 scheme:(id)a1 options:(unsigned long long)a2 orthography:(id)a3 tokenRanges:(id *)a4;
- (id)localizedCapitalizedString;
- (long long)localizedCaseInsensitiveCompare:(id)a0;
- (BOOL)localizedCaseInsensitiveContainsString:(id)a0;
- (long long)localizedCompare:(id)a0;
- (BOOL)localizedHasPrefix:(id)a0;
- (BOOL)localizedHasSuffix:(id)a0;
- (id)localizedLowercaseString;
- (long long)localizedStandardCompare:(id)a0;
- (BOOL)localizedStandardContainsString:(id)a0;
- (id)localizedUppercaseString;
- (id)lowercaseStringWithLocale:(id)a0;
- (unsigned long long)maximumLengthOfBytesUsingEncoding:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })paragraphRangeForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)precomposedStringWithCanonicalMapping;
- (id)precomposedStringWithCompatibilityMapping;
- (id)propertyListFromStringsFileFormat;
- (id)quotedStringRepresentation;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCharacterFromSet:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCharacterFromSet:(id)a0 options:(unsigned long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfCharacterFromSet:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfComposedCharacterSequenceAtIndex:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfComposedCharacterSequencesForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfString:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfString:(id)a0 options:(unsigned long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfString:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfString:(id)a0 options:(unsigned long long)a1 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 locale:(id)a3;
- (id)standardizedURLPath;
- (id)stringByAddingPercentEncodingWithAllowedCharacters:(id)a0;
- (id)stringByAddingPercentEscapes;
- (id)stringByAddingPercentEscapesUsingEncoding:(unsigned long long)a0;
- (id)stringByApplyingTransform:(id)a0 reverse:(BOOL)a1;
- (id)stringByConvertingPathToURL;
- (id)stringByConvertingURLToPath;
- (id)stringByFoldingWithOptions:(unsigned long long)a0 locale:(id)a1;
- (id)stringByPaddingToLength:(unsigned long long)a0 withString:(id)a1 startingAtIndex:(unsigned long long)a2;
- (id)stringByRemovingPercentEscapes;
- (id)stringByReplacingCharactersInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withString:(id)a1;
- (id)stringByReplacingPercentEscapesUsingEncoding:(unsigned long long)a0;
- (id)stringsByAppendingPaths:(id)a0;
- (id)uppercaseStringWithLocale:(id)a0;
- (id)variantFittingPresentationWidth:(long long)a0;
- (BOOL)writeToURL:(id)a0 atomically:(BOOL)a1 encoding:(unsigned long long)a2 error:(id *)a3;

@end

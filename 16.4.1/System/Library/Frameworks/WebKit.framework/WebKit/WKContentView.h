@class NSDictionary, RTIInputSystemSourceSession, UIWebFormAccessory, UITextPosition, UITextInputTraits, NSUndoManager, UITextRange, UIWebTouchEventsGestureRecognizer, NSString, UIImage, UIContextMenuInteraction, NSArray, UIInputContextHistory, UITextInputPasswordRules, UITextInteractionAssistant, WKFormSelectControl, UIView, _UISupplementalLexicon, UIGestureRecognizer, UITextInputAssistantItem, WKDateTimeInputControl, UIWKTextInteractionAssistant, WKBrowsingContextController, UIColor, NSIndexSet;
@protocol NSObject, UITextInputDelegate, UITextInputSuggestionDelegate, WKFormControl, UITextInputTokenizer, NSCopying;

@interface WKContentView : WKApplicationStateTrackingView <_WKWebViewPrintProvider, UIGestureRecognizerDelegate, UITextAutoscrolling, UITextInputMultiDocument, UITextInputPrivate, UIWebFormAccessoryDelegate, UIWebTouchEventsGestureRecognizerDelegate, UIWKInteractionViewProtocol, _UITextInputTranslationSupport, WKActionSheetAssistantDelegate, WKFileUploadPanelDelegate, WKKeyboardScrollViewAnimatorDelegate, WKDeferringGestureRecognizerDelegate, WKContactPickerDelegate, WKShareSheetDelegate, UIDragInteractionDelegate, UIDropInteractionDelegate, WKTouchActionGestureRecognizerDelegate, UITextSearching, UIContextMenuInteractionDelegate, UIPreviewItemDelegate> {
    struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> { struct WebPageProxy *m_ptr; } _page;
    struct WeakObjCPtr<WKWebView> { id m_weakReference; } _webView;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchStartDeferringGestureRecognizerForImmediatelyResettableGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchStartDeferringGestureRecognizerForDelayedResettableGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchStartDeferringGestureRecognizerForSyntheticTapGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchEndDeferringGestureRecognizerForImmediatelyResettableGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchEndDeferringGestureRecognizerForDelayedResettableGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchEndDeferringGestureRecognizerForSyntheticTapGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchMoveDeferringGestureRecognizer;
    struct optional<WTF::HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>>> { union { char __null_state_; struct HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTableTraits> { struct HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::IdentityExtractor, WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>> { union { void *m_table; unsigned int *m_tableForLLDB; } ; } m_impl; } __val_; } ; BOOL __engaged_; } _failedTouchStartDeferringGestures;
    struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _imageAnalysisDeferringGestureRecognizer;
    struct unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer, std::default_delete<WebKit::GestureRecognizerConsistencyEnforcer>> { struct __compressed_pair<WebKit::GestureRecognizerConsistencyEnforcer *, std::default_delete<WebKit::GestureRecognizerConsistencyEnforcer>> { struct GestureRecognizerConsistencyEnforcer *__value_; } __ptr_; } _gestureRecognizerConsistencyEnforcer;
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> { void *m_ptr; } _touchEventGestureRecognizer;
    BOOL _touchEventsCanPreventNativeGestures;
    BOOL _preventsPanningInXAxis;
    BOOL _preventsPanningInYAxis;
    struct RetainPtr<WKSyntheticTapGestureRecognizer> { void *m_ptr; } _singleTapGestureRecognizer;
    struct RetainPtr<WKHighlightLongPressGestureRecognizer> { void *m_ptr; } _highlightLongPressGestureRecognizer;
    struct RetainPtr<UILongPressGestureRecognizer> { void *m_ptr; } _longPressGestureRecognizer;
    struct RetainPtr<WKSyntheticTapGestureRecognizer> { void *m_ptr; } _doubleTapGestureRecognizer;
    struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _nonBlockingDoubleTapGestureRecognizer;
    struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _doubleTapGestureRecognizerForDoubleClick;
    struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _twoFingerDoubleTapGestureRecognizer;
    struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _twoFingerSingleTapGestureRecognizer;
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> { void *m_ptr; } _inspectorNodeSearchGestureRecognizer;
    struct RetainPtr<WKTouchActionGestureRecognizer> { void *m_ptr; } _touchActionGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionLeftSwipeGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionRightSwipeGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionUpSwipeGestureRecognizer;
    struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionDownSwipeGestureRecognizer;
    struct RetainPtr<WKMouseGestureRecognizer> { void *m_ptr; } _mouseGestureRecognizer;
    unsigned char _mouseEventPolicy;
    struct RetainPtr<WKMouseGestureRecognizer> { void *m_ptr; } _pencilHoverGestureRecognizer;
    struct RetainPtr<UIIndirectScribbleInteraction> { void *m_ptr; } _scribbleInteraction;
    struct RetainPtr<UIPointerInteraction> { void *m_ptr; } _pointerInteraction;
    BOOL _hasOutstandingPointerInteractionRequest;
    struct optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (UIPointerRegion *)>>> { union { char __null_state_; struct pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (UIPointerRegion *)>> { struct InteractionInformationRequest { struct IntPoint { int m_x; int m_y; } point; BOOL includeSnapshot; BOOL includeLinkIndicator; BOOL includeCaretContext; BOOL includeHasDoubleClickHandler; BOOL includeImageData; BOOL linkIndicatorShouldHaveLegacyMargins; BOOL disallowUserAgentShadowContent; } first; struct BlockPtr<void (UIPointerRegion *)> { id /* block */ m_block; } second; } __val_; } ; BOOL __engaged_; } _deferredPointerInteractionRequest;
    struct RetainPtr<UIWKTextInteractionAssistant> { void *m_ptr; } _textInteractionAssistant;
    struct OptionSet<WebKit::SuppressSelectionAssistantReason> { unsigned char m_storage; } _suppressSelectionAssistantReasons;
    struct RetainPtr<UITextInputTraits> { void *m_ptr; } _traits;
    struct RetainPtr<UIWebFormAccessory> { void *m_ptr; } _formAccessoryView;
    struct RetainPtr<_UIHighlightView> { void *m_ptr; } _highlightView;
    struct RetainPtr<UIView> { void *m_ptr; } _interactionViewsContainerView;
    struct RetainPtr<WKTargetedPreviewContainer> { void *m_ptr; } _contextMenuHintContainerView;
    struct WeakObjCPtr<UIScrollView> { id m_weakReference; } _scrollViewForTargetedPreview;
    struct CGPoint { double x; double y; } _scrollViewForTargetedPreviewInitialOffset;
    struct RetainPtr<WKTargetedPreviewContainer> { void *m_ptr; } _dragPreviewContainerView;
    struct RetainPtr<WKTargetedPreviewContainer> { void *m_ptr; } _dropPreviewContainerView;
    struct RetainPtr<NSString> { void *m_ptr; } _markedText;
    struct RetainPtr<WKActionSheetAssistant> { void *m_ptr; } _actionSheetAssistant;
    struct RetainPtr<WKAirPlayRoutePicker> { void *m_ptr; } _airPlayRoutePicker;
    struct RetainPtr<WKFormInputSession> { void *m_ptr; } _formInputSession;
    struct RetainPtr<WKFileUploadPanel> { void *m_ptr; } _fileUploadPanel;
    struct FrameInfoData { BOOL isMainFrame; struct ResourceRequest { struct RequestData { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_url; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_firstPartyForCookies; double m_timeoutInterval; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_httpMethod; struct HTTPHeaderMap { struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0UL, WTF::CrashOnOverflow, 6UL, WTF::FastMalloc> { struct CommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_commonHeaders; struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0UL, WTF::CrashOnOverflow, 0UL, WTF::FastMalloc> { struct UncommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_uncommonHeaders; } m_httpHeaderFields; struct Vector<WTF::String, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct String *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_responseContentDispositionEncodingFallbackArray; unsigned char m_cachePolicy; unsigned char m_sameSiteDisposition; unsigned char m_priority; unsigned char m_requester; unsigned char m_isTopSite : 1; unsigned char m_allowCookies : 1; unsigned char m_isAppInitiated : 1; } m_requestData; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_initiatorIdentifier; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_cachePartition; struct RefPtr<WebCore::FormData, WTF::RawPtrTraits<WebCore::FormData>, WTF::DefaultRefDerefTraits<WebCore::FormData>> { struct FormData *m_ptr; } m_httpBody; struct optional<int> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } m_inspectorInitiatorNodeIdentifier; unsigned char m_resourceRequestUpdated : 1; unsigned char m_platformRequestUpdated : 1; unsigned char m_resourceRequestBodyUpdated : 1; unsigned char m_platformRequestBodyUpdated : 1; unsigned char m_hiddenFromInspector : 1; struct optional<WebCore::SystemPreviewInfo> { union { char __null_state_; struct SystemPreviewInfo { struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } element; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } previewRect; BOOL isPreview; } __val_; } ; BOOL __engaged_; } m_systemPreviewInfo; struct RetainPtr<NSURLRequest> { void *m_ptr; } m_nsRequest; } request; struct SecurityOriginData { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } protocol; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } host; struct optional<unsigned short> { union { char __null_state_; unsigned short __val_; } ; BOOL __engaged_; } port; } securityOrigin; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } frameName; struct optional<WebCore::ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>>> { union { char __null_state_; struct ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>> { struct ObjectIdentifier<WebCore::FrameIdentifierType> { unsigned long long m_identifier; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } __val_; } ; BOOL __engaged_; } frameID; struct optional<WebCore::ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>>> { union { char __null_state_; struct ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>> { struct ObjectIdentifier<WebCore::FrameIdentifierType> { unsigned long long m_identifier; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } __val_; } ; BOOL __engaged_; } parentFrameID; } _frameInfoForFileUploadPanel;
    struct RetainPtr<WKShareSheet> { void *m_ptr; } _shareSheet;
    struct RetainPtr<WKContactPicker> { void *m_ptr; } _contactPicker;
    struct RetainPtr<UIGestureRecognizer> { void *m_ptr; } _previewGestureRecognizer;
    struct RetainPtr<UIGestureRecognizer> { void *m_ptr; } _previewSecondaryGestureRecognizer;
    struct Vector<bool, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { BOOL *m_buffer; unsigned int m_capacity; unsigned int m_size; } _focusStateStack;
    struct RetainPtr<UIContextMenuInteraction> { void *m_ptr; } _contextMenuInteraction;
    struct RetainPtr<WKContextMenuElementInfo> { void *m_ptr; } _contextMenuElementInfo;
    BOOL _showLinkPreviews;
    struct RetainPtr<UIViewController> { void *m_ptr; } _contextMenuLegacyPreviewController;
    struct RetainPtr<UIMenu> { void *m_ptr; } _contextMenuLegacyMenu;
    BOOL _contextMenuHasRequestedLegacyData;
    BOOL _contextMenuActionProviderDelegateNeedsOverride;
    BOOL _contextMenuIsUsingAlternateURLForImage;
    BOOL _isDisplayingContextMenuWithAnimation;
    struct RetainPtr<UIPreviewItemController> { void *m_ptr; } _previewItemController;
    struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> { struct TextIndicator *m_ptr; } _textIndicator;
    struct RetainPtr<WebTextIndicatorLayer> { void *m_ptr; } _textIndicatorLayer;
    struct RetainPtr<UITargetedPreview> { void *m_ptr; } _contextMenuInteractionTargetedPreview;
    struct unique_ptr<WebKit::SmartMagnificationController, std::default_delete<WebKit::SmartMagnificationController>> { struct __compressed_pair<WebKit::SmartMagnificationController *, std::default_delete<WebKit::SmartMagnificationController>> { struct SmartMagnificationController *__value_; } __ptr_; } _smartMagnificationController;
    struct WeakObjCPtr<id<UITextInputDelegate>> { id m_weakReference; } _inputDelegate;
    struct ObjectIdentifier<WebKit::TapIdentifierType> { unsigned long long m_identifier; } _latestTapID;
    struct TapHighlightInformation { BOOL nodeHasBuiltInClickHandling; struct Color { unsigned long long m_colorAndFlags; } color; struct Vector<WebCore::FloatQuad, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatQuad *m_buffer; unsigned int m_capacity; unsigned int m_size; } quads; struct IntSize { int m_width; int m_height; } topLeftRadius; struct IntSize { int m_width; int m_height; } topRightRadius; struct IntSize { int m_width; int m_height; } bottomLeftRadius; struct IntSize { int m_width; int m_height; } bottomRightRadius; } _tapHighlightInformation;
    struct WebAutocorrectionContext { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } contextBefore; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } markedText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } selectedText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } contextAfter; struct EditingRange { unsigned long long location; unsigned long long length; } markedTextRange; } _lastAutocorrectionContext;
    struct WKAutoCorrectionData { struct RetainPtr<UIFont> { void *m_ptr; } font; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } textFirstRect; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } textLastRect; } _autocorrectionData;
    struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int m_x; int m_y; } point; BOOL includeSnapshot; BOOL includeLinkIndicator; BOOL includeCaretContext; BOOL includeHasDoubleClickHandler; BOOL includeImageData; BOOL linkIndicatorShouldHaveLegacyMargins; BOOL disallowUserAgentShadowContent; } request; BOOL canBeValid; struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } nodeAtPositionHasDoubleClickHandler; unsigned char selectability; BOOL isSelected; BOOL prefersDraggingOverTextSelection; BOOL isNearMarkedText; BOOL touchCalloutEnabled; BOOL isLink; BOOL isImage; BOOL isAttachment; BOOL isAnimatedImage; BOOL isPausedVideo; BOOL isElement; BOOL isContentEditable; unsigned long long containerScrollingNodeID; BOOL isDataDetectorLink; BOOL preventTextInteraction; BOOL elementContainsImageOverlay; BOOL shouldNotUseIBeamInEditableContent; BOOL isImageOverlayText; BOOL isVerticalWritingMode; struct FloatPoint { float m_x; float m_y; } adjustedPointForNodeRespondingToClickEvents; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } url; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } imageURL; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } imageMIMEType; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } title; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } idAttribute; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } bounds; struct RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>> { struct ShareableBitmap *m_ptr; } image; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } textBefore; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } textAfter; float caretLength; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } lineCaretExtent; struct optional<WebCore::Cursor> { union { char __null_state_; struct Cursor { int m_type; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } m_image; struct IntPoint { int m_x; int m_y; } m_hotSpot; void *m_platformCursor; } __val_; } ; BOOL __engaged_; } cursor; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } selectionRectInRootViewCoordinates; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } textBoundingRectInRootViewCoordinates; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } contentImageWithoutSelectionRectInRootViewCoordinates; struct Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatRect *m_buffer; unsigned int m_capacity; unsigned int m_size; } textRectsInBoundingRectCoordinates; float contentImageScaleFactor; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImageWithHighlight; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImageWithoutSelection; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImage; struct Color { unsigned long long m_colorAndFlags; } estimatedBackgroundColor; unsigned char presentationTransition; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short m_storage; } options; } linkIndicator; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } dataDetectorIdentifier; struct RetainPtr<NSArray> { void *m_ptr; } dataDetectorResults; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } dataDetectorBounds; struct optional<WebCore::ElementContext> { union { char __null_state_; struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } __val_; } ; BOOL __engaged_; } elementContext; struct optional<WebCore::ElementContext> { union { char __null_state_; struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } __val_; } ; BOOL __engaged_; } hostImageOrVideoElementContext; } _positionInformation;
    struct FocusedElementInformation { struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } interactionRect; struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } elementContext; struct IntPoint { int m_x; int m_y; } lastInteractionLocation; double minimumScaleFactor; double maximumScaleFactor; double maximumScaleFactorIgnoringAlwaysScalable; double nodeFontSize; BOOL hasNextNode; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } nextNodeRect; BOOL hasPreviousNode; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } previousNodeRect; BOOL isAutocorrect; BOOL isRTL; BOOL isMultiSelect; BOOL isReadOnly; BOOL allowsUserScaling; BOOL allowsUserScalingIgnoringAlwaysScalable; BOOL insideFixedPosition; unsigned char autocapitalizeType; int elementType; unsigned char inputMode; unsigned char enterKeyHint; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } formAction; struct Vector<WebKit::OptionItem, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct OptionItem *m_buffer; unsigned int m_capacity; unsigned int m_size; } selectOptions; int selectedIndex; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } value; double valueAsNumber; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } title; BOOL acceptsAutofilledLoginCredentials; BOOL isAutofillableUsernameField; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } representingPageURL; int autofillFieldName; int nonAutofillCredentialType; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } placeholder; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } label; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } ariaLabel; BOOL hasSuggestions; BOOL isFocusingWithDataListDropdown; struct Color { unsigned long long m_colorAndFlags; } colorValue; struct Vector<WebCore::Color, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct Color *m_buffer; unsigned int m_capacity; unsigned int m_size; } suggestedColors; BOOL shouldSynthesizeKeyEventsForEditing; BOOL isSpellCheckingEnabled; BOOL shouldAvoidResizingWhenInputViewBoundsChange; BOOL shouldAvoidScrollingWhenFocusedContentIsVisible; BOOL shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation; BOOL isFocusingWithValidationMessage; BOOL preventScroll; struct MonotonicObjectIdentifier<WebKit::FocusedElementInformationIdentifierType> { unsigned long long m_identifier; } identifier; unsigned long long containerScrollingNodeID; struct ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>> { struct ObjectIdentifier<WebCore::FrameIdentifierType> { unsigned long long m_identifier; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } frameID; } _focusedElementInformation;
    struct RetainPtr<NSObject<WKFormPeripheral>> { void *m_ptr; } _inputPeripheral;
    struct BlockPtr<void (WebEvent *, bool)> { id /* block */ m_block; } _keyWebEventHandler;
    struct CGPoint { double x; double y; } _lastInteractionLocation;
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { unsigned long long m_identifier; } _layerTreeTransactionIdAtLastInteractionStart;
    struct WKSelectionDrawingInfo { int type; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } caretRect; struct Color { unsigned long long m_colorAndFlags; } caretColor; struct Vector<WebCore::SelectionGeometry, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct SelectionGeometry *m_buffer; unsigned int m_capacity; unsigned int m_size; } selectionGeometries; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } selectionClipRect; } _lastSelectionDrawingInfo;
    struct RetainPtr<WKTextRange> { void *m_ptr; } _cachedSelectedTextRange;
    struct optional<WebKit::InteractionInformationRequest> { union { char __null_state_; struct InteractionInformationRequest { struct IntPoint { int m_x; int m_y; } point; BOOL includeSnapshot; BOOL includeLinkIndicator; BOOL includeCaretContext; BOOL includeHasDoubleClickHandler; BOOL includeImageData; BOOL linkIndicatorShouldHaveLegacyMargins; BOOL disallowUserAgentShadowContent; } __val_; } ; BOOL __engaged_; } _lastOutstandingPositionInformationRequest;
    unsigned long long _positionInformationCallbackDepth;
    struct Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _pendingPositionInformationHandlers;
    struct unique_ptr<WebKit::InputViewUpdateDeferrer, std::default_delete<WebKit::InputViewUpdateDeferrer>> { struct __compressed_pair<WebKit::InputViewUpdateDeferrer *, std::default_delete<WebKit::InputViewUpdateDeferrer>> { struct InputViewUpdateDeferrer *__value_; } __ptr_; } _inputViewUpdateDeferrer;
    struct RetainPtr<WKKeyboardScrollViewAnimator> { void *m_ptr; } _keyboardScrollingAnimator;
    struct Vector<WTF::BlockPtr<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _actionsToPerformAfterEditorStateUpdate;
    struct RetainPtr<UIView<WKFormControl>> { void *m_ptr; } _dataListTextSuggestionsInputView;
    struct RetainPtr<NSArray<UITextSuggestion *>> { void *m_ptr; } _dataListTextSuggestions;
    struct WeakObjCPtr<WKDataListSuggestionsControl> { id m_weakReference; } _dataListSuggestionsControl;
    struct RefPtr<WebKit::RevealFocusedElementDeferrer, WTF::RawPtrTraits<WebKit::RevealFocusedElementDeferrer>, WTF::DefaultRefDerefTraits<WebKit::RevealFocusedElementDeferrer>> { struct RevealFocusedElementDeferrer *m_ptr; } _revealFocusedElementDeferrer;
    BOOL _isEditable;
    BOOL _showingTextStyleOptions;
    BOOL _hasValidPositionInformation;
    BOOL _isTapHighlightIDValid;
    BOOL _isTapHighlightFading;
    BOOL _potentialTapInProgress;
    BOOL _isDoubleTapPending;
    BOOL _longPressCanClick;
    BOOL _hasTapHighlightForPotentialTap;
    BOOL _selectionNeedsUpdate;
    BOOL _shouldRestoreSelection;
    BOOL _usingGestureForSelection;
    BOOL _inspectorNodeSearchEnabled;
    BOOL _isChangingFocusUsingAccessoryTab;
    BOOL _didAccessoryTabInitiateFocus;
    BOOL _isExpectingFastSingleTapCommit;
    BOOL _showDebugTapHighlightsForFastClicking;
    BOOL _textInteractionDidChangeFocusedElement;
    BOOL _treatAsContentEditableUntilNextEditorStateUpdate;
    BOOL _isWaitingOnPositionInformation;
    BOOL _autocorrectionContextNeedsUpdate;
    int _commitPotentialTapPointerId;
    BOOL _keyboardDidRequestDismissal;
    BOOL _candidateViewNeedsUpdate;
    BOOL _seenHardwareKeyDownInNonEditableElement;
    BOOL _becomingFirstResponder;
    BOOL _needsDeferredEndScrollingSelectionUpdate;
    BOOL _isChangingFocus;
    BOOL _isFocusingElementWithKeyboard;
    BOOL _isBlurringFocusedElement;
    BOOL _isRelinquishingFirstResponderToFocusedElement;
    BOOL _unsuppressSoftwareKeyboardAfterNextAutocorrectionContextUpdate;
    BOOL _isUnsuppressingSoftwareKeyboardUsingLastAutocorrectionContext;
    BOOL _waitingForKeyboardAppearanceAnimationToStart;
    BOOL _isHidingKeyboard;
    BOOL _isPreparingEditMenu;
    BOOL _focusRequiresStrongPasswordAssistance;
    BOOL _waitingForEditDragSnapshot;
    long long _dropAnimationCount;
    BOOL _hasSetUpInteractions;
    unsigned long long _ignoreSelectionCommandFadeCount;
    unsigned long long _activeTextInteractionCount;
    long long _suppressNonEditableSingleTapTextInteractionCount;
    struct CompletionHandler<void (WebCore::DOMPasteAccessResponse)> { struct Function<void (WebCore::DOMPasteAccessResponse)> { struct unique_ptr<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>, std::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>>> { struct __compressed_pair<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> *, std::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>>> { void *__value_; } __ptr_; } m_callableWrapper; } m_function; } _domPasteRequestHandler;
    struct optional<WebCore::DOMPasteAccessCategory> { union { char __null_state_; unsigned char __val_; } ; BOOL __engaged_; } _domPasteRequestCategory;
    struct BlockPtr<void (UIWKAutocorrectionContext *)> { id /* block */ m_block; } _pendingAutocorrectionContextHandler;
    struct CompletionHandler<void ()> { struct Function<void ()> { struct unique_ptr<WTF::Detail::CallableWrapperBase<void>, std::default_delete<WTF::Detail::CallableWrapperBase<void>>> { struct __compressed_pair<WTF::Detail::CallableWrapperBase<void> *, std::default_delete<WTF::Detail::CallableWrapperBase<void>>> { void *__value_; } __ptr_; } m_callableWrapper; } m_function; } _pendingRunModalJavaScriptDialogCallback;
    struct RetainPtr<NSDictionary> { void *m_ptr; } _additionalContextForStrongPasswordAssistance;
    struct optional<int> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } _lastInsertedCharacterToOverrideCharacterBeforeSelection;
    unsigned int _selectionChangeNestingLevel;
    struct DragDropInteractionState { struct CGPoint { double x; double y; } m_lastGlobalPosition; struct CGPoint { double x; double y; } m_adjustedPositionForDragEnd; BOOL m_didBeginDragging; BOOL m_isPerformingDrop; struct RetainPtr<id<UIDragSession>> { void *m_ptr; } m_dragSession; struct RetainPtr<id<UIDropSession>> { void *m_ptr; } m_dropSession; struct BlockPtr<void ()> { id /* block */ m_block; } m_dragStartCompletionBlock; struct BlockPtr<void ()> { id /* block */ m_block; } m_dragCancelSetDownBlock; struct BlockPtr<void (NSArray<UIDragItem *> *)> { id /* block */ m_block; } m_addDragItemCompletionBlock; struct optional<WebKit::DragSourceState> { union { char __null_state_; struct DragSourceState { struct OptionSet<WebCore::DragSourceAction> { unsigned char m_storage; } action; struct CGPoint { double x; double y; } adjustedOrigin; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } dragPreviewFrameInRootViewCoordinates; struct RetainPtr<UIImage> { void *m_ptr; } image; struct optional<WebCore::TextIndicatorData> { union { char __null_state_; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } selectionRectInRootViewCoordinates; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } textBoundingRectInRootViewCoordinates; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } contentImageWithoutSelectionRectInRootViewCoordinates; struct Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatRect *m_buffer; unsigned int m_capacity; unsigned int m_size; } textRectsInBoundingRectCoordinates; float contentImageScaleFactor; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImageWithHighlight; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImageWithoutSelection; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImage; struct Color { unsigned long long m_colorAndFlags; } estimatedBackgroundColor; unsigned char presentationTransition; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short m_storage; } options; } __val_; } ; BOOL __engaged_; } indicatorData; struct optional<WebCore::Path> { union { char __null_state_; struct Path { struct RetainPtr<CGPath *> { void *m_ptr; } m_path; struct variant<std::monostate, WebCore::MoveData, WebCore::LineData, WebCore::ArcData, WebCore::QuadCurveData, WebCore::BezierCurveData> { struct __impl<std::monostate, WebCore::MoveData, WebCore::LineData, WebCore::ArcData, WebCore::QuadCurveData, WebCore::BezierCurveData> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, std::monostate, WebCore::MoveData, WebCore::LineData, WebCore::ArcData, WebCore::QuadCurveData, WebCore::BezierCurveData> { char __dummy; struct __alt<0UL, std::monostate> { struct monostate { } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, WebCore::MoveData, WebCore::LineData, WebCore::ArcData, WebCore::QuadCurveData, WebCore::BezierCurveData> { char __dummy; struct __alt<1UL, WebCore::MoveData> { struct MoveData { struct FloatPoint { float m_x; float m_y; } location; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL, WebCore::LineData, WebCore::ArcData, WebCore::QuadCurveData, WebCore::BezierCurveData> { char __dummy; struct __alt<2UL, WebCore::LineData> { struct LineData { struct FloatPoint { float m_x; float m_y; } start; struct FloatPoint { float m_x; float m_y; } end; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3UL, WebCore::ArcData, WebCore::QuadCurveData, WebCore::BezierCurveData> { char __dummy; struct __alt<3UL, WebCore::ArcData> { struct ArcData { struct FloatPoint { float m_x; float m_y; } start; struct FloatPoint { float m_x; float m_y; } center; float radius; float startAngle; float endAngle; BOOL clockwise; unsigned char type; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 4UL, WebCore::QuadCurveData, WebCore::BezierCurveData> { char __dummy; struct __alt<4UL, WebCore::QuadCurveData> { struct QuadCurveData { struct FloatPoint { float m_x; float m_y; } startPoint; struct FloatPoint { float m_x; float m_y; } controlPoint; struct FloatPoint { float m_x; float m_y; } endPoint; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 5UL, WebCore::BezierCurveData> { char __dummy; struct __alt<5UL, WebCore::BezierCurveData> { struct BezierCurveData { struct FloatPoint { float m_x; float m_y; } startPoint; struct FloatPoint { float m_x; float m_y; } controlPoint1; struct FloatPoint { float m_x; float m_y; } controlPoint2; struct FloatPoint { float m_x; float m_y; } endPoint; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 6UL> { } __tail; } __tail; } __tail; } __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl; } m_inlineData; BOOL m_copyPathBeforeMutation; } __val_; } ; BOOL __engaged_; } visiblePath; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } linkTitle; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } linkURL; BOOL possiblyNeedsDragPreviewUpdate; BOOL containsSelection; long long itemIdentifier; } __val_; } ; BOOL __engaged_; } m_stagedDragSource; struct Vector<WebKit::DragSourceState, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct DragSourceState *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_activeDragSources; struct Vector<WebKit::ItemAndPreviewProvider, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct ItemAndPreviewProvider *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_delayedItemPreviewProviders; struct Vector<WebKit::ItemAndPreview, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct ItemAndPreview *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_defaultDropPreviews; } _dragDropInteractionState;
    struct RetainPtr<UIDragInteraction> { void *m_ptr; } _dragInteraction;
    struct RetainPtr<UIDropInteraction> { void *m_ptr; } _dropInteraction;
    BOOL _isAnimatingDragCancel;
    BOOL _shouldRestoreCalloutBarAfterDrop;
    struct RetainPtr<UIView> { void *m_ptr; } _visibleContentViewSnapshot;
    struct RetainPtr<UIView> { void *m_ptr; } _unselectedContentSnapshot;
    struct RetainPtr<_UITextDragCaretView> { void *m_ptr; } _editDropCaretView;
    struct BlockPtr<void ()> { id /* block */ m_block; } _actionToPerformAfterReceivingEditDragSnapshot;
    struct RetainPtr<WKImageAnalysisGestureRecognizer> { void *m_ptr; } _imageAnalysisGestureRecognizer;
    struct RetainPtr<UILongPressGestureRecognizer> { void *m_ptr; } _imageAnalysisTimeoutGestureRecognizer;
    struct optional<WTF::ObjectIdentifier<WebKit::ImageAnalysisRequestIdentifierType>> { union { char __null_state_; struct ObjectIdentifier<WebKit::ImageAnalysisRequestIdentifierType> { unsigned long long m_identifier; } __val_; } ; BOOL __engaged_; } _pendingImageAnalysisRequestIdentifier;
    struct optional<WebCore::ElementContext> { union { char __null_state_; struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } __val_; } ; BOOL __engaged_; } _elementPendingImageAnalysis;
    struct Vector<WTF::BlockPtr<void (WebKit::ProceedWithTextSelectionInImage)>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _actionsToPerformAfterPendingImageAnalysis;
    BOOL _contextMenuWasTriggeredByImageAnalysisTimeout;
    BOOL _isProceedingWithTextSelectionInImage;
    struct RetainPtr<VKCImageAnalyzer> { void *m_ptr; } _imageAnalyzer;
    struct RetainPtr<QLPreviewController> { void *m_ptr; } _visualSearchPreviewController;
    struct RetainPtr<UIImage> { void *m_ptr; } _visualSearchPreviewImage;
    struct RetainPtr<NSURL> { void *m_ptr; } _visualSearchPreviewImageURL;
    struct RetainPtr<NSString> { void *m_ptr; } _visualSearchPreviewTitle;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _visualSearchPreviewImageBounds;
    BOOL _waitingForDynamicImageAnalysisContextMenuActions;
    struct optional<WebKit::ImageAnalysisContextMenuActionData> { union { char __null_state_; struct ImageAnalysisContextMenuActionData { BOOL hasSelectableText; BOOL hasVisualSearchResults; struct RetainPtr<CGImage *> { void *m_ptr; } copySubjectResult; struct RetainPtr<UIMenu> { void *m_ptr; } machineReadableCodeMenu; } __val_; } ; BOOL __engaged_; } _imageAnalysisContextMenuActionData;
    unsigned int _fullscreenVideoImageAnalysisRequestIdentifier;
    struct RetainPtr<VKCImageAnalysisInteraction> { void *m_ptr; } _imageAnalysisInteraction;
    struct RetainPtr<NSMutableSet<UIButton *>> { void *m_ptr; } _imageAnalysisActionButtons;
    struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } _imageAnalysisInteractionBounds;
    struct optional<WebKit::RemoveBackgroundData> { union { char __null_state_; struct RemoveBackgroundData { struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 m_data; } m_object; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long m_identifier; } m_processIdentifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } element; struct RetainPtr<CGImage *> { void *m_ptr; } image; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } preferredMIMEType; } __val_; } ; BOOL __engaged_; } _removeBackgroundData;
    struct unique_ptr<WebKit::PageClientImpl, std::default_delete<WebKit::PageClientImpl>> { struct __compressed_pair<WebKit::PageClientImpl *, std::default_delete<WebKit::PageClientImpl>> { struct PageClientImpl *__value_; } __ptr_; } _pageClient;
    struct RetainPtr<WKBrowsingContextController> { void *m_ptr; } _browsingContextController;
    struct RetainPtr<UIView> { void *m_ptr; } _rootContentView;
    struct RetainPtr<UIView> { void *m_ptr; } _fixedClippingView;
    struct RetainPtr<WKInspectorIndicationView> { void *m_ptr; } _inspectorIndicationView;
    struct RetainPtr<WKInspectorHighlightView> { void *m_ptr; } _inspectorHighlightView;
    struct RetainPtr<_UILayerHostView> { void *m_ptr; } _visibilityPropagationViewForWebProcess;
    struct RetainPtr<_UILayerHostView> { void *m_ptr; } _visibilityPropagationViewForGPUProcess;
    struct HistoricalVelocityData { unsigned int m_historySize; unsigned int m_latestDataIndex; struct MonotonicTime { double m_value; } m_lastAppendTimestamp; struct Data { struct MonotonicTime { double m_value; } timestamp; struct FloatPoint { float m_x; float m_y; } position; double scale; } m_positionHistory[3]; } _historicalKinematicData;
    struct RetainPtr<NSUndoManager> { void *m_ptr; } _undoManager;
    struct RetainPtr<WKQuirkyNSUndoManager> { void *m_ptr; } _quirkyUndoManager;
    struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { _Atomic unsigned char __a_value; } __a_; } value; } m_byte; } _pendingBackgroundPrintFormattersLock;
    struct RetainPtr<NSMutableSet> { void *m_ptr; } _pendingBackgroundPrintFormatters;
    struct ObjectIdentifier<IPC::Connection::AsyncReplyIDType> { unsigned long long m_identifier; } _pdfPrintCallbackID;
    struct Vector<WTF::RetainPtr<NSURL>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _temporaryURLsToDeleteWhenDeallocated;
}

@property (readonly, nonatomic) BOOL _wk_printFormatterRequiresMainThread;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } lastInteractionLocation;
@property (readonly, nonatomic) BOOL isEditable;
@property (readonly, nonatomic) BOOL shouldHideSelectionWhenScrolling;
@property (readonly, nonatomic) BOOL shouldIgnoreKeyboardWillHideNotification;
@property (readonly, nonatomic) const void *positionInformation;
@property (readonly, nonatomic) const void *autocorrectionData;
@property (readonly, nonatomic) const void *focusedElementInformation;
@property (readonly, nonatomic) UIWebFormAccessory *formAccessoryView;
@property (readonly, nonatomic) UITextInputAssistantItem *inputAssistantItemForWebView;
@property (readonly, nonatomic) UIView *inputViewForWebView;
@property (readonly, nonatomic) UIView *inputAccessoryViewForWebView;
@property (readonly, nonatomic) UITextInputTraits *textInputTraitsForWebView;
@property (readonly, nonatomic) BOOL preventsPanningInXAxis;
@property (readonly, nonatomic) BOOL preventsPanningInYAxis;
@property (readonly, nonatomic) UIWebTouchEventsGestureRecognizer *touchEventGestureRecognizer;
@property (readonly, nonatomic) NSArray *deferringGestures;
@property (readonly, nonatomic) void *gestureRecognizerConsistencyEnforcer;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } tapHighlightViewRect;
@property (readonly, nonatomic) UIGestureRecognizer *imageAnalysisGestureRecognizer;
@property (retain, nonatomic) UIView<WKFormControl> *dataListTextSuggestionsInputView;
@property (retain, nonatomic) NSArray *dataListTextSuggestions;
@property (readonly, nonatomic) BOOL _shouldUseContextMenus;
@property (readonly, nonatomic) BOOL _shouldUseContextMenusForFormControls;
@property (readonly, nonatomic) BOOL _shouldAvoidResizingWhenInputViewBoundsChange;
@property (readonly, nonatomic) BOOL _shouldAvoidScrollingWhenFocusedContentIsVisible;
@property (readonly, nonatomic) BOOL _shouldUseLegacySelectPopoverDismissalBehavior;
@property (readonly, nonatomic) BOOL _shouldAvoidSecurityHeuristicScoreUpdates;
@property (readonly, nonatomic) BOOL supportsTextReplacementForWebView;
@property (readonly, nonatomic) BOOL isTextRecognitionInFullscreenVideoEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) long long cursorBehavior;
@property (readonly, nonatomic) id<UITextInputSuggestionDelegate> textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) id<UITextInputDelegate> inputDelegate;
@property (readonly, nonatomic) id<UITextInputTokenizer> tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet { } *textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic, getter=isDevicePasscodeEntry) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property (readonly, nonatomic, getter=isImageBacked) BOOL imageBacked;
@property (readonly, nonatomic) BOOL supportsTextReplacement;
@property (readonly) id<NSObject, NSCopying> selectedTextSearchDocument;
@property (readonly, nonatomic) BOOL isShowingDataListSuggestions;
@property (readonly, nonatomic) NSString *textContentTypeForTesting;
@property (readonly, nonatomic) NSString *selectFormPopoverTitle;
@property (readonly, nonatomic) NSString *formInputLabel;
@property (readonly, nonatomic) WKDateTimeInputControl *dateTimeInputControl;
@property (readonly, nonatomic) WKFormSelectControl *selectControl;
@property (readonly, nonatomic, getter=isAnimatingDragCancel) BOOL animatingDragCancel;
@property (readonly, nonatomic) UIWKTextInteractionAssistant *textInteractionAssistant;
@property (readonly, nonatomic) UIContextMenuInteraction *contextMenuInteraction;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) WKBrowsingContextController *browsingContextController;
@property (readonly, nonatomic) void *page;
@property (readonly, nonatomic) BOOL isFocusingElement;
@property (nonatomic, getter=isShowingInspectorIndication) BOOL showingInspectorIndication;
@property (readonly, nonatomic, getter=isResigningFirstResponder) BOOL resigningFirstResponder;
@property (nonatomic) BOOL sizeChangedSinceLastVisibleContentRectUpdate;
@property (readonly, nonatomic) long long interfaceOrientation;
@property (readonly, nonatomic) NSUndoManager *undoManagerForWebView;

- (id)positionFromPosition:(id)a0 offset:(long long)a1;
- (void)_deleteToEndOfParagraph;
- (id)_moveLeft:(BOOL)a0 withHistory:(id)a1;
- (void)pasteAndMatchStyle:(id)a0;
- (id)dragInteraction:(id)a0 previewForLiftingItem:(id)a1 session:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (id)_moveToEndOfLine:(BOOL)a0 withHistory:(id)a1;
- (void)_didScroll;
- (id)characterRangeByExtendingPosition:(id)a0 inDirection:(long long)a1;
- (void)_dismissContactPickerWithContacts:(id)a0;
- (void)_applicationWillEnterForeground:(id)a0;
- (void)_transliterateChinese:(id)a0;
- (void)imageAnalysisGestureDidFail:(id)a0;
- (id)inputAccessoryView;
- (void)_nextAccessoryTabForWebView:(id)a0;
- (void)scrollSelectionToVisible:(BOOL)a0;
- (void)selectTextWithGranularity:(long long)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (BOOL)hasSelection;
- (id)wordContainingCaretSelection;
- (SEL)_actionForLongPress;
- (void)setUpTextIndicator:(struct Ref<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>> { struct TextIndicator *x0; })a0;
- (void)selectAll:(id)a0;
- (BOOL)isScrollableForKeyboardScrollViewAnimator:(id)a0;
- (BOOL)requiresKeyEvents;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentsRectForImageAnalysisInteraction:(id)a0;
- (void)_accessibilityStoreSelection;
- (void)willStartZoomOrScroll;
- (void)removeContextMenuViewIfPossibleForActionSheetAssistant:(id)a0;
- (void)_showImageSheet;
- (id)provideDataForItem:(id)a0;
- (void)_removeContainerForDropPreviews;
- (void)_decreaseListLevel:(id)a0;
- (void)cancelAutoscroll;
- (void)pasteForWebView:(id)a0;
- (BOOL)shouldSynthesizeKeyEvents;
- (void)_insertNestedUnorderedList:(id)a0;
- (void)_nextAccessoryTab:(id)a0;
- (void)_showKeyboard;
- (void)_didStartProvisionalLoadForMainFrame;
- (unsigned char)_dataOwnerForPasteboard:(BOOL)a0;
- (BOOL)hasHiddenContentEditable;
- (void)_alignLeft:(id)a0;
- (void)dropInteraction:(id)a0 concludeDrop:(id)a1;
- (void)executeEditCommandWithCallback:(id)a0;
- (void)setMarkedText:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_presentationRectForPreviewItemController:(id)a0;
- (void)addTextAlternatives:(id)a0;
- (id)metadataDictionariesForDictationResults;
- (void)didFinishScrolling;
- (void)_willStartScrollingOrZooming;
- (long long)numberOfPreviewItemsInPreviewController:(id)a0;
- (struct OpaqueWKPage { } *)_pageRef;
- (void)setSelectedColorForColorPicker:(id)a0;
- (void)_processDidExit;
- (void)scrollRangeToVisible:(id)a0 inDocument:(id)a1;
- (void)_decreaseListLevelForWebView:(id)a0;
- (void)_hardwareKeyboardAvailabilityChanged;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textLastRect;
- (BOOL)hasVisualSearchResultsForImageContextMenu;
- (id)_contentsOfUserInterfaceItem:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (void)cutForWebView:(id)a0;
- (void)increaseSize:(id)a0;
- (void)_removeContainerForDragPreviews;
- (id)_createTargetedContextMenuHintPreviewIfPossible;
- (void)_alignRightForWebView:(id)a0;
- (void)insertOrderedListForWebView:(id)a0;
- (BOOL)fileUploadPanelDestinationIsManaged:(id)a0;
- (void)dropInteraction:(id)a0 item:(id)a1 willAnimateDropWithAnimator:(id)a2;
- (void)_singleTapRecognized:(id)a0;
- (void)captureTextFromCameraForWebView:(id)a0;
- (void)_pasteAndMatchStyle:(id)a0;
- (void)_simulateSelectionStart;
- (void)cancelTextRecognitionForVideoInElementFullscreen;
- (id)_scroller;
- (void)updateImageAnalysisForContextMenuPresentation:(id)a0;
- (BOOL)becomeFirstResponderForWebView;
- (id)_moveToEndOfParagraph:(BOOL)a0 withHistory:(id)a1;
- (void)_alignJustified:(id)a0;
- (BOOL)deferringGestureRecognizer:(id)a0 shouldDeferOtherGestureRecognizer:(id)a1;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x0; double x1; })a0 withGesture:(long long)a1 withState:(long long)a2 withFlags:(long long)a3;
- (void)_indentForWebView:(id)a0;
- (BOOL)_currentPositionInformationIsApproximatelyValidForRequest:(const struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } *)a0 radiusForApproximation:(int)a1;
- (void)_resetPanningPreventionFlags;
- (id)dropInteraction:(id)a0 previewForDroppingItem:(id)a1 withDefault:(id)a2;
- (void)_selectPositionAtPoint:(struct CGPoint { double x0; double x1; })a0 stayingWithinFocusedElement:(BOOL)a1 completionHandler:(id /* block */)a2;
- (id)machineReadableCodeSubMenuForImageContextMenu;
- (void)endSelectionChange;
- (id)_presentationRectsForPreviewItemController:(id)a0;
- (void)_addShortcutForWebView:(id)a0;
- (void)doAfterPositionInformationUpdate:(id /* block */)a0 forRequest:(struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; })a1;
- (BOOL)indirectScribbleInteraction:(id)a0 isElementFocused:(id)a1;
- (void)_singleTapIdentified:(id)a0;
- (void)indirectScribbleInteraction:(id)a0 didFinishWritingInElement:(id)a1;
- (void)updatePositionInformationForActionSheetAssistant:(id)a0;
- (void)_layerTreeCommitComplete;
- (id)_touchStartDeferringGestures;
- (void)beginTextRecognitionForVideoInElementFullscreen:(const void *)a0 bounds:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })a1;
- (void)makeTextWritingDirectionNaturalForWebView:(id)a0;
- (unsigned int)_characterInRelationToCaretSelection:(int)a0;
- (void)stopRelinquishingFirstResponderToFocusedElement;
- (void)_elementDidBlur;
- (void)_deliverDelayedDropPreviewIfPossible:(struct optional<WebCore::TextIndicatorData> { union { char x0; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x2; struct Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatRect *x0; unsigned int x1; unsigned int x2; } x3; float x4; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x5; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x6; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x7; struct Color { unsigned long long x0; } x8; unsigned char x9; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short x0; } x10; } x1; } x0; BOOL x1; })a0;
- (void)dropInteraction:(id)a0 sessionDidEnter:(id)a1;
- (void)_updateInteractionTintColor:(id)a0;
- (void)_previousAccessoryTab:(id)a0;
- (BOOL)ensurePositionInformationIsUpToDate:(struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; })a0;
- (BOOL)_formControlRefreshEnabled;
- (void)willPresentEditMenuWithAnimator:(id)a0;
- (void)_updateChangedSelection:(BOOL)a0;
- (id)rangeEnclosingPosition:(id)a0 withGranularity:(long long)a1 inDirection:(long long)a2;
- (BOOL)imageAnalysisInteraction:(id)a0 shouldBeginAtPoint:(struct CGPoint { double x0; double x1; })a1 forAnalysisType:(unsigned long long)a2;
- (BOOL)_disableAutomaticKeyboardUI;
- (id)alternativesForSelectedText;
- (void)setUpScribbleInteraction;
- (void)_applicationWillResignActive:(id)a0;
- (void)_didEnterFullscreen;
- (double)timePickerValueHour;
- (void)_didExitStableState;
- (void)_gpuProcessDidCreateContextForVisibilityPropagation;
- (void)_cancelLongPressGestureRecognizer;
- (void)select:(id)a0;
- (void)_didCommitLoadForMainFrame;
- (void)setUpTextSelectionAssistant;
- (void)setTimePickerValueToHour:(long long)a0 minute:(long long)a1;
- (void)accessoryAutoFill;
- (void)_stopSuppressingSelectionAssistantForReason:(unsigned char)a0;
- (void)_addDefaultGestureRecognizers;
- (void)changeSelectionWithTouchAt:(struct CGPoint { double x0; double x1; })a0 withSelectionTouch:(long long)a1 baseIsStart:(BOOL)a2 withFlags:(long long)a3;
- (void)uninstallImageAnalysisInteraction;
- (BOOL)canBecomeFirstResponderForWebView;
- (void)makeTextWritingDirectionNatural:(id)a0;
- (void)replaceFoundTextInRange:(id)a0 inDocument:(id)a1 withText:(id)a2;
- (void)selectAll;
- (void)_cancelTouchEventGestureRecognizer;
- (void)setUpMouseGestureRecognizer;
- (BOOL)_touchEventsMustRequireGestureRecognizerToFail:(id)a0;
- (BOOL)isPosition:(id)a0 withinTextUnit:(long long)a1 inDirection:(long long)a2;
- (void)_cancelInteraction;
- (void)_endImageAnalysisGestureDeferral:(BOOL)a0;
- (void)_didHandleAdditionalDragItemsRequest:(BOOL)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldIgnoreWebTouchWithEvent:(id)a1;
- (BOOL)shouldShowAutomaticKeyboardUI;
- (void)increaseSizeForWebView:(id)a0;
- (struct optional<WebCore::ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>>> { union { char x0; struct ProcessQualified<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>> { struct ObjectIdentifier<WebCore::FrameIdentifierType> { unsigned long long x0; } x0; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long x0; } x1; } x1; } x0; BOOL x1; })_frameIdentifierForPrintFormatter:(id)a0;
- (SEL)_actionForLongPressFromPositionInformation:(const void *)a0;
- (void)toggleBoldface:(id)a0;
- (id)previewController:(id)a0 previewItemAtIndex:(long long)a1;
- (void)_registerPreview;
- (void)_increaseListLevel:(id)a0;
- (void)actionSheetAssistant:(id)a0 copySubject:(id)a1 sourceMIMEType:(id)a2;
- (void)alignRightForWebView:(id)a0;
- (id)removeBackgroundMenu;
- (void)_cancelPendingKeyEventHandler;
- (void)_positionInformationDidChange:(const void *)a0;
- (void)_setDoubleTapGesturesEnabled:(BOOL)a0;
- (void)buildMenuForWebViewWithBuilder:(id)a0;
- (void)useSelectionForFind:(id)a0;
- (void)computeClientAndGlobalPointsForDropSession:(id)a0 outClientPoint:(struct CGPoint { double x0; double x1; } *)a1 outGlobalPoint:(struct CGPoint { double x0; double x1; } *)a2;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1;
- (void)alignJustifiedForWebView:(id)a0;
- (void)setTextIndicatorAnimationProgress:(float)a0;
- (void)_didGetTapHighlightForRequest:(struct ObjectIdentifier<WebKit::TapIdentifierType> { unsigned long long x0; })a0 color:(const struct Color { unsigned long long x0; } *)a1 quads:(const void *)a2 topLeftRadius:(const struct IntSize { int x0; int x1; } *)a3 topRightRadius:(const struct IntSize { int x0; int x1; } *)a4 bottomLeftRadius:(const struct IntSize { int x0; int x1; } *)a5 bottomRightRadius:(const struct IntSize { int x0; int x1; } *)a6 nodeHasBuiltInClickHandling:(BOOL)a7;
- (void)continueContextMenuInteractionWithDataDetectors:(id /* block */)a0;
- (void)_alignCenter:(id)a0;
- (void)makeTextWritingDirectionRightToLeftForWebView:(id)a0;
- (void)moveForward:(unsigned int)a0;
- (void)moveByOffset:(long long)a0;
- (void)_transliterateChineseForWebView:(id)a0;
- (BOOL)dropInteraction:(id)a0 canHandleSession:(id)a1;
- (void)_completeImageAnalysisRequestForContextMenu:(struct CGImage { } *)a0 requestIdentifier:(struct ObjectIdentifier<WebKit::ImageAnalysisRequestIdentifierType> { unsigned long long x0; })a1 hasTextResults:(BOOL)a2;
- (long long)_dragInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (void)_increaseListLevelForWebView:(id)a0;
- (void)actionSheetAssistant:(id)a0 shareElementWithURL:(id)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)_showTextStyleOptions:(id)a0;
- (id)selectedText;
- (void)clearAllDecoratedFoundText;
- (void)selectWordBackward;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })indirectScribbleInteraction:(id)a0 frameForElement:(id)a1;
- (id)textColorForCaretSelection;
- (void)_tearDownImageAnalysis;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)a0 withText:(id)a1 completionHandler:(id /* block */)a2;
- (void)_contextMenuInteraction:(id)a0 configurationForMenuAtLocation:(struct CGPoint { double x0; double x1; })a1 completion:(id /* block */)a2;
- (void)dropInteraction:(id)a0 performDrop:(id)a1;
- (void)teardownDragAndDropInteractions;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_shouldSuppressSelectionCommands;
- (id)createTargetedContextMenuHintForActionSheetAssistant:(id)a0;
- (void)_doneDeferringTouchEnd:(BOOL)a0;
- (void)endEditingAndUpdateFocusAppearanceWithReason:(long long)a0;
- (id)dropInteraction:(id)a0 sessionDidUpdate:(id)a1;
- (void)_showDataDetectorsUI;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (BOOL)selectFormAccessoryHasCheckedItemAtRow:(long long)a0;
- (void)_deleteForwardByWord;
- (void)_deleteToEndOfLine;
- (id)webSelectionRectsForSelectionGeometries:(const void *)a0;
- (id)_formInputSession;
- (void)clearTextIndicator:(unsigned char)a0;
- (void)_removeDefaultGestureRecognizers;
- (void)_didNotHandleTapAsClick:(const struct IntPoint { int x0; int x1; } *)a0;
- (void)updateFixedClippingView:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })a0;
- (id)inputAssistantItem;
- (BOOL)_mayDisableDoubleTapGesturesDuringSingleTap;
- (BOOL)gestureRecognizerMayPanWebView:(id)a0;
- (void)deferringGestureRecognizer:(id)a0 didEndTouchesWithEvent:(id)a1;
- (void)_didHandleDragStartRequest:(BOOL)a0;
- (id)_textInputContextByScribbleIdentifier:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldReceivePress:(id)a1;
- (BOOL)_elementTypeRequiresAccessoryView:(int)a0;
- (id)containerForDragPreviews;
- (void)_selectionChanged;
- (void)clearSelection;
- (void)insertNestedOrderedListForWebView:(id)a0;
- (void)_doneDeferringTouchStart:(BOOL)a0;
- (void)runModalJavaScriptDialog:(void *)a0;
- (void)pasteWithCompletionHandler:(id /* block */)a0;
- (void)_focusTextInputContext:(id)a0 placeCaretAt:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (struct unique_ptr<WebKit::DrawingAreaProxy, std::default_delete<WebKit::DrawingAreaProxy>> { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::default_delete<WebKit::DrawingAreaProxy>> { struct DrawingAreaProxy *x0; } x0; })_createDrawingAreaProxy:(void *)a0;
- (id)_moveToStartOfDocument:(BOOL)a0 withHistory:(id)a1;
- (id)wordRangeContainingCaretSelection;
- (void)setUpInteraction;
- (void)handleKeyWebEvent:(id)a0 withCompletionHandler:(id /* block */)a1;
- (BOOL)actionSheetAssistant:(id)a0 showCustomSheetForElement:(id)a1;
- (BOOL)isReplaceAllowed;
- (void)_invokeAndRemovePendingHandlersValidForCurrentPositionInformation;
- (void)_showPlaybackTargetPicker:(BOOL)a0 fromRect:(const struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } *)a1 routeSharingPolicy:(unsigned char)a2 routingContextUID:(id)a3;
- (void)outdentForWebView:(id)a0;
- (void)actionSheetAssistant:(id)a0 willStartInteractionWithElement:(id)a1;
- (void)_setUpImageAnalysis;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(id /* block */)a0;
- (void)_resetInputViewDeferral;
- (void)_webTouchEvent:(const void *)a0 preventsNativeGestures:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (id)pointerInteraction:(id)a0 styleForRegion:(id)a1;
- (void)_zoomToFocusRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 selectionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fontSize:(float)a2 minimumScale:(double)a3 maximumScale:(double)a4 allowScaling:(BOOL)a5 forceScroll:(BOOL)a6;
- (BOOL)_selectionAtDocumentStart;
- (struct ObjectIdentifier<WebKit::TapIdentifierType> { unsigned long long x0; })nextTapIdentifier;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1 inDocument:(id)a2;
- (void)requestRectsToEvadeForSelectionCommandsWithCompletionHandler:(id /* block */)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldRequireFailureOfGestureRecognizer:(id)a1;
- (void)_previewItemController:(id)a0 didDismissPreview:(id)a1 committing:(BOOL)a2;
- (void)_invokeAllActionsToPerformAfterPendingImageAnalysis:(BOOL)a0;
- (void)replaceText:(id)a0 withText:(id)a1;
- (void)requestTextRecognition:(id)a0 imageData:(const void *)a1 sourceLanguageIdentifier:(id)a2 targetLanguageIdentifier:(id)a3 completionHandler:(void *)a4;
- (BOOL)gestureRecognizerMayDoubleTapToZoomWebView:(id)a0;
- (void)_insertOrderedListForWebView:(id)a0;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)textStylingAtPosition:(id)a0 inDirection:(long long)a1;
- (void)_nonBlockingDoubleTapRecognized:(id)a0;
- (void)_showTapHighlight;
- (void)_requestTextInputContextsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 completionHandler:(id /* block */)a1;
- (id)automaticallySelectedOverlay;
- (void)cleanUpInteractionPreviewContainers;
- (id)_moveRight:(BOOL)a0 withHistory:(id)a1;
- (id)appHighlightMenu;
- (BOOL)_handleDOMPasteRequestWithResult:(unsigned char)a0;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0 withinRange:(id)a1;
- (id)_moveUp:(BOOL)a0 withHistory:(id)a1;
- (void)_configureMouseGestureRecognizer;
- (id)_touchEndDeferringGestures;
- (void)_didCommitLayerTree:(const void *)a0;
- (void *)focusedSelectElementOptions;
- (BOOL)_shouldAdditionallyRecognizeGestureRecognizer:(id)a0 simultaneouslyWithGestureRecognizer:(id)a1;
- (void)_scrollingNodeScrollingDidEnd:(unsigned long long)a0;
- (void)_didHandleKeyEvent:(id)a0 eventWasHandled:(BOOL)a1;
- (void)alignLeftForWebView:(id)a0;
- (void)_processWillSwap;
- (id)containerForDropPreviews;
- (void)updateCurrentFocusedElementInformation:(void *)a0;
- (void)_createAndConfigureHighlightLongPressGestureRecognizer;
- (void)_didChangeDragCaretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 currentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_disableInspectorNodeSearch;
- (void)_updateSelectionAssistantSuppressionState;
- (void)_enableInspectorNodeSearch;
- (void)didInterruptScrolling;
- (void)_showDictionary:(id)a0;
- (void)_insertUnorderedListForWebView:(id)a0;
- (void)_translateForWebView:(id)a0;
- (void)_writePromisedAttachmentToPasteboard:(void *)a0;
- (void)alignCenterForWebView:(id)a0;
- (void)_setFontForWebView:(id)a0 sender:(id)a1;
- (void)_willReceiveEditDragSnapshot;
- (id)webViewUIDelegate;
- (id)selectedTextForActionSheetAssistant:(id)a0;
- (void)_updateFrameOfContainerForContextMenuHintPreviewsIfNeeded;
- (void)actionSheetAssistant:(id)a0 lookUpImage:(id)a1 imageURL:(id)a2 title:(id)a3 imageBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4;
- (void)presentContextMenu:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)_didUpdateInputMode:(unsigned char)a0;
- (void)_findSelected:(id)a0;
- (void)setBottomBufferHeight:(double)a0;
- (BOOL)_allowAnimatedUpdateSelectionRectViews;
- (void)_applicationDidBecomeActive:(id)a0;
- (void)accessoryOpen;
- (id)containerForContextMenuHintPreviews;
- (void)replaceForWebView:(id)a0;
- (id)_autofillContext;
- (void)_cancelPendingAutocorrectionContextHandler;
- (void)toggleItalics:(id)a0;
- (void)_setFontSizeForWebView:(double)a0 sender:(id)a1;
- (void)deferringGestureRecognizer:(id)a0 didTransitionToState:(long long)a1;
- (void)updateSoftwareKeyboardSuppressionStateFromWebView;
- (void)_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:(unsigned long long)a0;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x0; double x1; })a0 withGesture:(long long)a1 withState:(long long)a2;
- (void)_accessibilityRetrieveRectsEnclosingSelectionOffset:(long long)a0 withGranularity:(long long)a1;
- (id)_moveDown:(BOOL)a0 withHistory:(id)a1;
- (id)_contextMenuInteraction:(id)a0 styleForMenuWithConfiguration:(id)a1;
- (void)_webTouchEventsRecognized:(id)a0;
- (void)_removeContainerForContextMenuHintPreviews;
- (void)actionSheetAssistant:(id)a0 openElementAtLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (id)_moveToEndOfWord:(BOOL)a0 withHistory:(id)a1;
- (id)imageAnalyzer;
- (void)_finishInteraction;
- (BOOL)positionInformationHasImageOverlayDataDetector;
- (void)cleanUpInteraction;
- (void)decreaseSize:(id)a0;
- (void)_webViewDestroyed;
- (void)selectAllForWebView:(id)a0;
- (void)actionSheetAssistantDidShowContextMenu:(id)a0;
- (unsigned long long)_dragDestinationActionForDropSession:(id)a0;
- (id)positionWithinRange:(id)a0 farthestInDirection:(long long)a1;
- (void)selectPositionAtPoint:(struct CGPoint { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (BOOL)actionSheetAssistant:(id)a0 shouldIncludeAppLinkActionsForElement:(id)a1;
- (void)_deleteToStartOfLine;
- (void)dragInteraction:(id)a0 sessionDidTransferItems:(id)a1;
- (struct RetainPtr<VKCImageAnalyzerRequest> { void *x0; })createImageAnalyzerRequest:(unsigned long long)a0 image:(struct CGImage { } *)a1;
- (id)_moveToEndOfDocument:(BOOL)a0 withHistory:(id)a1;
- (id)positionFromPosition:(id)a0 toBoundary:(long long)a1 inDirection:(long long)a2;
- (BOOL)actionSheetAssistant:(id)a0 shouldIncludeLookUpImageActionForElement:(id)a1;
- (id)_dataDetectionResults;
- (BOOL)deferringGestureRecognizer:(id)a0 willBeginTouchesWithEvent:(id)a1;
- (void)_insertNestedOrderedList:(id)a0;
- (void)_showAttachmentSheet;
- (void)updateFocusedElementFocusedWithDataListDropdown:(BOOL)a0;
- (void)_didPerformAction:(SEL)a0 sender:(id)a1;
- (void)continueContextMenuInteraction:(id /* block */)a0;
- (id)selectedDOMRange;
- (id)positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2;
- (BOOL)_isTextInputContextFocused:(id)a0;
- (BOOL)isPosition:(id)a0 atBoundary:(long long)a1 inDirection:(long long)a2;
- (void)_alignLeftForWebView:(id)a0;
- (void)_simulateTextEntered:(id)a0;
- (void)toggleStrikeThroughForWebView:(id)a0;
- (void)requestRectForFoundTextRange:(id)a0 completionHandler:(id /* block */)a1;
- (void)_didReceiveEditDragSnapshot:(struct optional<WebCore::TextIndicatorData> { union { char x0; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x2; struct Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatRect *x0; unsigned int x1; unsigned int x2; } x3; float x4; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x5; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x6; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x7; struct Color { unsigned long long x0; } x8; unsigned char x9; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short x0; } x10; } x1; } x0; BOOL x1; })a0;
- (void)takeTraitsFrom:(id)a0;
- (id)_moveToStartOfLine:(BOOL)a0 withHistory:(id)a1;
- (BOOL)_isTouchStartDeferringGesture:(id)a0;
- (void)unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded;
- (void)_deleteByWord;
- (id)_moveToStartOfWord:(BOOL)a0 withHistory:(id)a1;
- (void)_handleAutocorrectionContext:(const void *)a0;
- (void)doAfterEditorStateUpdateAfterFocusingElement:(id /* block */)a0;
- (BOOL)_dragInteraction:(id)a0 item:(id)a1 shouldDelaySetDownAnimationWithCompletion:(id /* block */)a2;
- (void)_defineForWebView:(id)a0;
- (void)shareSheet:(id)a0 willShowActivityItems:(id)a1;
- (void)_updateChangedSelection;
- (void)actionSheetAssistantDidDismissContextMenu:(id)a0;
- (id)selectionRectsForRange:(id)a0;
- (void)_updateTextInputTraits:(id)a0;
- (void)_setMouseEventPolicy:(unsigned char)a0;
- (BOOL)_elementForTextInputContextIsFocused:(id)a0;
- (BOOL)shouldAllowAppHighlightCreation;
- (void)_accessibilityClearSelection;
- (BOOL)hasSelectableTextForImageContextMenu;
- (void)prepareSelectionForContextMenuWithLocationInView:(struct CGPoint { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (double)dragLiftDelay;
- (void)_createAndConfigureDoubleTapGestureRecognizer;
- (void)_twoFingerDoubleTapRecognized:(id)a0;
- (void)_didChangeLinkPreviewAvailability;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_longPressRecognized:(id)a0;
- (BOOL)resignFirstResponderForWebView;
- (void)_alignCenterForWebView:(id)a0;
- (void)selectPositionAtPoint:(struct CGPoint { double x0; double x1; })a0 withContextRequest:(id)a1 completionHandler:(id /* block */)a2;
- (void)_setDataListSuggestionsControl:(id)a0;
- (void)selectWordForReplacement;
- (void)_removeVisibilityPropagationViewForWebProcess;
- (void)insertUnorderedListForWebView:(id)a0;
- (void)_dragInteraction:(id)a0 itemsForAddingToSession:(id)a1 withTouchAtPoint:(struct CGPoint { double x0; double x1; })a2 completion:(id /* block */)a3;
- (id)inputView;
- (void)_toggleStrikeThrough:(id)a0;
- (void)_twoFingerSingleTapGestureRecognized:(id)a0;
- (void)_updateRemoteAccessibilityRegistration:(BOOL)a0;
- (void)_changeListTypeForWebView:(id)a0;
- (void)_startDrag:(struct RetainPtr<CGImage *> { void *x0; })a0 item:(const void *)a1;
- (id)_uiTextSelectionRects;
- (struct CGImage { } *)copySubjectResultForImageContextMenu;
- (void)cleanUpScribbleInteraction;
- (void)_alignRight:(id)a0;
- (void)replace:(id)a0;
- (void)_singleTapDidReset:(id)a0;
- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary;
- (void)_promptForReplace:(id)a0;
- (struct Color { unsigned long long x0; })_tapHighlightColorForFastClick:(BOOL)a0;
- (void)doAfterComputingImageAnalysisResultsForBackgroundRemoval:(void *)a0;
- (void)_previewItemControllerDidCancelPreview:(id)a0;
- (BOOL)shouldDeferGestureDueToImageAnalysis:(id)a0;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (void)replaceDictatedText:(id)a0 withText:(id)a1;
- (id)fontForCaretSelection;
- (void)_insertOrderedList:(id)a0;
- (void)_selectDataListOption:(long long)a0;
- (void)_showLinkSheet;
- (void)setSelectedDOMRange:(id)a0 affinityDownstream:(BOOL)a1;
- (void)imageAnalysisGestureDidBegin:(id)a0;
- (void)selectFormAccessoryPickerRow:(long long)a0;
- (void)_setMarkedText:(id)a0 underlines:(const void *)a1 highlights:(const void *)a2 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)_indent:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)_screenCapturedDidChange:(id)a0;
- (double)inverseScale;
- (struct RetainPtr<VKCImageAnalyzerRequest> { void *x0; })createImageAnalyzerRequest:(unsigned long long)a0 image:(struct CGImage { } *)a1 imageURL:(id)a2;
- (struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; })activeTouchIdentifierForGestureRecognizer:(id)a0;
- (void)removeEmojiAlternatives;
- (void)presentVisualSearchPreviewControllerForImage:(id)a0 imageURL:(id)a1 title:(id)a2 imageBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 appearanceActions:(unsigned long long)a4;
- (void)toggleUnderline:(id)a0;
- (BOOL)becomeFirstResponder;
- (void)contactPickerDidPresent:(id)a0;
- (BOOL)_restoreFocusWithToken:(id)a0;
- (void)_scrollingNodeScrollingWillBegin:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_computeUnobscuredContentRectRespectingInputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)toggleBoldfaceForWebView:(id)a0;
- (id)targetForActionForWebView:(SEL)a0 withSender:(id)a1;
- (void)insertNestedUnorderedListForWebView:(id)a0;
- (void)_resetPrintingState;
- (BOOL)_requiresKeyboardWhenFirstResponder;
- (void)indentForWebView:(id)a0;
- (struct DragData { struct IntPoint { int x0; int x1; } x0; struct IntPoint { int x0; int x1; } x1; void *x2; struct OptionSet<WebCore::DragOperation> { unsigned char x0; } x3; struct OptionSet<WebCore::DragApplicationFlags> { unsigned char x0; } x4; struct Vector<WTF::String, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct String *x0; unsigned int x1; unsigned int x2; } x5; struct OptionSet<WebCore::DragDestinationAction> { unsigned char x0; } x6; struct optional<WTF::ObjectIdentifier<WebCore::PageIdentifierType>> { union { char x0; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x0; } x1; } x0; BOOL x1; } x7; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x8; BOOL x9; })dragDataForDropSession:(id)a0 dragDestinationAction:(unsigned long long)a1;
- (void)captureTextFromCamera:(id)a0;
- (void)_keyboardDidShow;
- (void)beginSelectionChange;
- (id)_itemsForBeginningOrAddingToSessionWithRegistrationLists:(id)a0 stagedDragSource:(const void *)a1;
- (id)_cascadeInteractionTintColor;
- (void)beginTextRecognitionForFullscreenVideo:(const void *)a0 playerViewController:(id)a1;
- (BOOL)actionSheetAssistant:(id)a0 shouldIncludeShowTextActionForElement:(id)a1;
- (void)_doubleTapDidFail:(id)a0;
- (void)startRelinquishingFirstResponderToFocusedElement;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unobscuredContentRect;
- (void)actionSheetAssistant:(id)a0 performAction:(BOOL)a1;
- (void)handleKeyWebEvent:(id)a0;
- (void)_unregisterPreview;
- (id)dataDetectionContextForActionSheetAssistant:(id)a0 positionInformation:(const void *)a1;
- (void)_showInspectorHighlight:(const void *)a0;
- (long long)compareFoundRange:(id)a0 toRange:(id)a1 inDocument:(id)a2;
- (void)_invalidateCurrentPositionInformation;
- (void)_removeTemporaryFilesIfNecessary;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectContainingCaretSelection;
- (void)_attemptSyntheticClickAtLocation:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(long long)a1;
- (void)_findSelectedForWebView:(id)a0;
- (void)actionSheetAssistant:(id)a0 showTextForImage:(id)a1 imageURL:(id)a2 title:(id)a3 imageBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4;
- (void)_updateForScreen:(id)a0;
- (void)dropInteraction:(id)a0 sessionDidEnd:(id)a1;
- (void)_previousAccessoryTabForWebView:(id)a0;
- (BOOL)actionSheetAssistantShouldIncludeCopySubjectAction:(id)a0;
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;
- (void)_preserveFocusWithToken:(id)a0 destructively:(BOOL)a1;
- (BOOL)isAnyTouchOverActiveArea:(id)a0;
- (void)_didExitFullscreen;
- (void)requestDocumentContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)_showMediaControlsContextMenu:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)a0 items:(void *)a1 completionHandler:(void *)a2;
- (BOOL)_shouldSimulateKeyboardInputOnTextInsertion;
- (struct RetainPtr<WKTargetedPreviewContainer> { void *x0; })_createPreviewContainerWithLayerName:(id)a0;
- (void)contactPickerDidDismiss:(id)a0;
- (void)_highlightLongPressRecognized:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previewController:(id)a0 frameForPreviewItem:(id)a1 inSourceView:(id *)a2;
- (void)_fadeTapHighlightViewIfNeeded;
- (void)_setTextColorForWebView:(id)a0 sender:(id)a1;
- (BOOL)_currentPositionInformationIsValidForRequest:(const struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } *)a0;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })_scaledCaretRectForSelectionStart:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })a0;
- (void)_endEditing;
- (BOOL)_shouldShowAutomaticKeyboardUIIgnoringInputMode;
- (void)_removeTemporaryDirectoriesWhenDeallocated:(void *)a0;
- (void)willInsertFinalDictationResult;
- (id)textEffectsWindow;
- (void)copyForWebView:(id)a0;
- (void)_gpuProcessDidExit;
- (BOOL)_dragInteraction:(id)a0 shouldDelayCompetingGestureRecognizer:(id)a1;
- (void)generateSyntheticEditingCommand:(unsigned char)a0;
- (void)_outdent:(id)a0;
- (BOOL)hasMarkedText;
- (void)dragInteraction:(id)a0 item:(id)a1 willAnimateCancelWithAnimator:(id)a2;
- (void)_targetedPreviewContainerDidRemoveLastSubview:(id)a0;
- (void)moveSelectionAtBoundary:(long long)a0 inDirection:(long long)a1 completionHandler:(id /* block */)a2;
- (void)updateFocusedElementValue:(id)a0;
- (id)inputLabelText;
- (void)didEndTextSearchOperation;
- (BOOL)_gestureRecognizerCanBePreventedByTouchEvents:(id)a0;
- (void)didZoomToScale:(double)a0;
- (id)targetForAction:(SEL)a0 withSender:(id)a1;
- (void)_changeListType:(id)a0;
- (void)_keyboardDidRequestDismissal:(id)a0;
- (BOOL)_interactionShouldBeginFromPreviewItemController:(id)a0 forPosition:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)canPerformActionForWebView:(SEL)a0 withSender:(id)a1;
- (void)_hideKeyboard;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 processPool:(struct NakedRef<WebKit::WebProcessPool> { struct WebProcessPool *x0; })a1 configuration:(void *)a2 webView:(id)a3;
- (void)_keyboardWillShow;
- (void)_didEndScrollingOrZooming;
- (double)_contentZoomScale;
- (BOOL)canShowNonEmptySelectionView;
- (void)_updateTapHighlight;
- (BOOL)_scrollToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withOrigin:(struct CGPoint { double x0; double x1; })a1 minimumScrollDistance:(double)a2;
- (void)didBeginTextSearchOperation;
- (void)requestDictationContext:(id /* block */)a0;
- (void)useSelectionForFindForWebView:(id)a0;
- (void)dismissFilePicker;
- (BOOL)gestureRecognizerMayPinchToZoomWebView:(id)a0;
- (void)_updateAccessory;
- (void)accessoryClear;
- (void)removeTextPlaceholder:(id)a0 willInsertText:(BOOL)a1 completionHandler:(id /* block */)a2;
- (id)_moveToStartOfParagraph:(BOOL)a0 withHistory:(id)a1;
- (void)scrollViewWillStartPanOrPinchGesture;
- (void)_pasteAsQuotationForWebView:(id)a0;
- (void)_showContactPicker:(const void *)a0 completionHandler:(void *)a1;
- (void)previewControllerDidDismiss:(id)a0;
- (void)_doubleTapRecognized:(id)a0;
- (void)_applicationDidEnterBackground:(id)a0;
- (void)setUpPointerInteraction;
- (void)_willBeginTextInteractionInTextInputContext:(id)a0;
- (void)_resetIsDoubleTapPending;
- (long long)baseWritingDirectionForPosition:(id)a0 inDirection:(long long)a1;
- (void)startFadeOut;
- (void)_didChangeDragInteractionPolicy;
- (void)_transpose;
- (BOOL)_zoomToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withOrigin:(struct CGPoint { double x0; double x1; })a1 fitEntireRect:(BOOL)a2 minimumScale:(double)a3 maximumScale:(double)a4 minimumScrollDistance:(double)a5;
- (void)reloadContextViewForPresentedListViewController;
- (BOOL)shouldAllowHidingSelectionCommands;
- (void)_doneDeferringTouchMove:(BOOL)a0;
- (BOOL)_shouldShowKeyboardForElement:(const void *)a0;
- (void)teardownTextIndicatorLayer;
- (void)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (void)dropInteraction:(id)a0 sessionDidExit:(id)a1;
- (void)_doubleTapRecognizedForDoubleClick:(id)a0;
- (id)webView;
- (void)makeTextWritingDirectionLeftToRightForWebView:(id)a0;
- (void)_updateLongPressAndHighlightLongPressGestures;
- (void)requestPreferredArrowDirectionForEditMenuWithCompletionHandler:(id /* block */)a0;
- (void)indirectScribbleInteraction:(id)a0 focusElementIfNeeded:(id)a1 referencePoint:(struct CGPoint { double x0; double x1; })a2 completion:(id /* block */)a3;
- (void)_didChangeWebViewEditability;
- (void)_addShortcut:(id)a0;
- (void)cut:(id)a0;
- (void)_scheduleResetInputViewDeferralAfterBecomingFirstResponder;
- (void)_pasteAsQuotation:(id)a0;
- (void)_setupVisibilityPropagationViewForWebProcess;
- (BOOL)_shouldToggleSelectionCommandsAfterTapAt:(struct CGPoint { double x0; double x1; })a0;
- (void)_dragInteraction:(id)a0 prepareForSession:(id)a1 completion:(id /* block */)a2;
- (void)applyAutocorrection:(id)a0 toString:(id)a1 withCompletionHandler:(id /* block */)a2;
- (double)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)a0 currentScale:(double)a1 fitEntireRect:(BOOL)a2 minimumScale:(double)a3 maximumScale:(double)a4;
- (id).cxx_construct;
- (void)accessibilityRetrieveSpeakSelectionContent;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)a0 withText:(id)a1;
- (void)accessoryTab:(BOOL)a0;
- (void)_createAndConfigureLongPressGestureRecognizer;
- (BOOL)_interpretKeyEvent:(id)a0 isCharEvent:(BOOL)a1;
- (BOOL)_isTouchEndDeferringGesture:(id)a0;
- (unsigned short)characterBeforeCaretSelection;
- (void)cleanUpDragSourceSessionState;
- (void)_showTextStyleOptionsForWebView:(id)a0;
- (void)setContinuousSpellCheckingEnabled:(BOOL)a0;
- (BOOL)shouldSuppressUpdateCandidateView;
- (id)markedText;
- (void)accessoryDone;
- (void)_promptForReplaceForWebView:(id)a0;
- (void)keyboardScrollViewAnimatorWillScroll:(id)a0;
- (void)_showRunOpenPanel:(struct OpenPanelParameters { } *)a0 frameInfo:(const void *)a1 resultListener:(struct WebOpenPanelResultListenerProxy { } *)a2;
- (BOOL)requiresAccessoryView;
- (id)contextMenuInteraction:(id)a0 configuration:(id)a1 dismissalPreviewForItemWithIdentifier:(id)a2;
- (void)_didFinishTextInteractionInTextInputContext:(id)a0;
- (void)keyboardScrollViewAnimatorDidFinishScrolling:(id)a0;
- (void)setAttributedMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)actionSheetAssistantDidStopInteraction:(id)a0;
- (long long)_dropInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (void)_outdentForWebView:(id)a0;
- (void)_inspectorNodeSearchRecognized:(id)a0;
- (void)unmarkText;
- (id)textInteractionAssistantContextMenuInteraction;
- (double)timePickerValueMinute;
- (BOOL)_handleTapOverImageAnalysisInteractionButton:(struct CGPoint { double x0; double x1; })a0;
- (id)touchActionActiveTouches;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unoccludedWindowBoundsForActionSheetAssistant:(id)a0;
- (void)_wheelChangedWithEvent:(id)a0;
- (void)didMoveToWindow;
- (void)imageAnalysisGestureDidTimeOut:(id)a0;
- (void)_zoomOutWithOrigin:(struct CGPoint { double x0; double x1; })a0;
- (long long)comparePosition:(id)a0 toPosition:(id)a1;
- (void)insertTextSuggestion:(id)a0;
- (void)_translate:(id)a0;
- (void)_hideInspectorHighlight;
- (void)_didHideMenu:(id)a0;
- (void)_insertNestedUnorderedListForWebView:(id)a0;
- (void)_restoreCalloutBarIfNeeded;
- (void)_showDataDetectorsUIForPositionInformation:(const void *)a0;
- (void)_simulateElementAction:(long long)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)_updateInputContextAfterBlurringAndRefocusingElement;
- (void)_windowDidMoveToScreenNotification:(id)a0;
- (void)replaceRange:(id)a0 withText:(id)a1;
- (void)_handleSmartMagnificationInformationForPotentialTap:(struct ObjectIdentifier<WebKit::TapIdentifierType> { unsigned long long x0; })a0 renderRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)a1 fitEntireRect:(BOOL)a2 viewportMinimumScale:(double)a3 viewportMaximumScale:(double)a4 nodeIsRootLevel:(BOOL)a5;
- (void)beginSelectionInDirection:(long long)a0 completionHandler:(id /* block */)a1;
- (void)_shareForWebView:(id)a0;
- (id)_commonInitializationWithProcessPool:(void *)a0 configuration:(void *)a1;
- (id)dragInteraction:(id)a0 itemsForBeginningSession:(id)a1;
- (void)_handleKeyUIEvent:(id)a0;
- (void)paste:(id)a0;
- (void)_insertUnorderedList:(id)a0;
- (id)menuWithInlineAction:(id)a0 image:(id)a1 identifier:(id)a2 handler:(void *)a3;
- (void)moveBackward:(unsigned int)a0;
- (void)requestAsynchronousPositionInformationUpdate:(struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; })a0;
- (BOOL)shouldUseMouseGestureRecognizer;
- (void)toggleItalicsForWebView:(id)a0;
- (id)unscaledView;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)updateFocusedElementSelectedIndex:(unsigned int)a0 allowsMultipleSelection:(BOOL)a1;
- (void)insertText:(id)a0 alternatives:(id)a1 style:(long long)a2;
- (void)willDismissEditMenuWithAnimator:(id)a0;
- (void)insertText:(id)a0;
- (void)_alignJustifiedForWebView:(id)a0;
- (void)_becomeFirstResponderWithSelectionMovingForward:(BOOL)a0 completionHandler:(id /* block */)a1;
- (BOOL)gestureRecognizer:(id)a0 shouldReceiveTouch:(id)a1;
- (void)_commitPotentialTapFailed;
- (void)_didRelaunchProcess;
- (void)_removeContextMenuHintContainerIfPossible;
- (BOOL)_hasFocusedElement;
- (id)_presentedViewControllerForPreviewItemController:(id)a0;
- (void)setBaseWritingDirection:(long long)a0 forRange:(id)a1;
- (void)_showShareSheet:(const void *)a0 inRect:(struct optional<WebCore::FloatRect> { union { char x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; } x0; BOOL x1; })a1 completionHandler:(void *)a2;
- (void)_simulateLongPressActionAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_dropInteraction:(id)a0 delayedPreviewProviderForDroppingItem:(id)a1 previewProvider:(id /* block */)a2;
- (id)textInputTraits;
- (void)_willHideMenu:(id)a0;
- (void)_cancelImageAnalysis;
- (id)textRangeFromPosition:(id)a0 toPosition:(id)a1;
- (void)_setAcceleratedCompositingRootView:(id)a0;
- (BOOL)canBecomeFocused;
- (struct RetainPtr<NSArray> { void *x0; })actionSheetAssistant:(id)a0 decideActionsForElement:(id)a1 defaultActions:(struct RetainPtr<NSArray> { void *x0; })a2;
- (void)_pasteAndMatchStyleForWebView:(id)a0;
- (void)didInsertFinalDictationResult;
- (void)_wk_requestDocumentForPrintFormatter:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldBeRequiredToFailByGestureRecognizer:(id)a1;
- (void)installImageAnalysisInteraction:(id)a0;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })_scaledCaretRectForSelectionEnd:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })a0;
- (void)_define:(id)a0;
- (id)pointerRegionForPositionInformation:(void *)a0 point:(struct CGPoint { double x0; double x1; })a1;
- (id)previewController:(id)a0 transitionImageForPreviewItem:(id)a1 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a2;
- (BOOL)setIsEditable:(BOOL)a0;
- (void)tintColorDidChange;
- (void)_deleteForwardAndNotify:(BOOL)a0;
- (id)currentDragOrDropSession;
- (void)requestAutocorrectionRectsForString:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)toggleUnderlineForWebView:(id)a0;
- (id)dragInteraction:(id)a0 previewForCancellingItem:(id)a1 withDefault:(id)a2;
- (id)rootContentView;
- (void)selectPositionAtBoundary:(long long)a0 inDirection:(long long)a1 fromPoint:(struct CGPoint { double x0; double x1; })a2 completionHandler:(id /* block */)a3;
- (void)actionSheetAssistant:(id)a0 getAlternateURLForImage:(id)a1 completion:(id /* block */)a2;
- (void)cancelPointersForGestureRecognizer:(id)a0;
- (void)willMoveToWindow:(id)a0;
- (void)_willPerformAction:(SEL)a0 sender:(id)a1;
- (void)dragInteraction:(id)a0 willAnimateLiftWithAnimator:(id)a1 session:(id)a2;
- (void)_cancelPreviousResetInputViewDeferralRequest;
- (void)dragInteraction:(id)a0 sessionWillBegin:(id)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_markedTextNSRange;
- (id)_presentationSnapshotForPreviewItemController:(id)a0;
- (void)_updateInitialWritingDirectionIfNecessary;
- (void)dealloc;
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)a0;
- (void)_lookup:(id)a0;
- (void)_zoomToInitialScaleWithOrigin:(struct CGPoint { double x0; double x1; })a0;
- (void)adjustSelectionWithDelta:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completionHandler:(id /* block */)a1;
- (void)didUpdateFocusInContext:(id)a0 withAnimationCoordinator:(id)a1;
- (BOOL)hasSelectablePositionAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)indirectScribbleInteraction:(id)a0 requestElementsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 completion:(id /* block */)a2;
- (BOOL)_hasValidOutstandingPositionInformationRequest:(const struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } *)a0;
- (BOOL)_pointIsInsideSelectionRect:(struct CGPoint { double x0; double x1; })a0 outBoundingRect:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)a1;
- (void)pasteAndMatchStyleForWebView:(id)a0;
- (void)performTextSearchWithQueryString:(id)a0 usingOptions:(id)a1 resultAggregator:(id)a2;
- (BOOL)canBecomeFirstResponder;
- (void)selectForWebView:(id)a0;
- (void)_interactionStoppedFromPreviewItemController:(id)a0;
- (void)_requestEvasionRectsAboveSelectionIfNeeded:(void *)a0;
- (BOOL)supportsTextSelectionWithCharacterGranularity;
- (BOOL)_shouldShowKeyboardForElementIgnoringInputMode:(const void *)a0;
- (void)_startSuppressingSelectionAssistantForReason:(unsigned char)a0;
- (BOOL)gestureRecognizer:(id)a0 canBePreventedByGestureRecognizer:(id)a1;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)webSelectionRects;
- (void)_didCompleteSyntheticClick;
- (void)_prepareToDragPromisedAttachment:(const void *)a0;
- (BOOL)_requiresKeyboardResetOnReload;
- (void)_requestDOMPasteAccessForCategory:(unsigned char)a0 elementRect:(const struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } *)a1 originIdentifier:(const void *)a2 completionHandler:(void *)a3;
- (void)_setupVisibilityPropagationViewForGPUProcess;
- (void)_waitForDrawToPDFCallbackForPrintFormatterIfNeeded:(id)a0;
- (void)_lookupForWebView:(id)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)contextMenuInteraction:(id)a0 willPerformPreviewActionForMenuWithConfiguration:(id)a1 animator:(id)a2;
- (void)cancelTextRecognitionForFullscreenVideo:(id)a0;
- (void)decorateFoundTextRange:(id)a0 inDocument:(id)a1 usingStyle:(long long)a2;
- (void)didUpdateVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 unobscuredRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 contentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a2 unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3 obscuredInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a4 unobscuredSafeAreaInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a5 inputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 scale:(double)a7 minimumScale:(double)a8 viewStability:(struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char x0; })a9 enclosedInScrollableAncestorView:(BOOL)a10 sendEvenIfUnchanged:(BOOL)a11;
- (void)copy:(id)a0;
- (void)fileUploadPanelDidDismiss:(id)a0;
- (void)indirectScribbleInteraction:(id)a0 willBeginWritingInElement:(id)a1;
- (struct OptionSet<WebCore::DragSourceAction> { unsigned char x0; })_allowedDragSourceActions;
- (id)contextMenuInteraction:(id)a0 configuration:(id)a1 highlightPreviewForItemWithIdentifier:(id)a2;
- (double)keyboardScrollViewAnimator:(id)a0 distanceForIncrement:(unsigned char)a1 inDirection:(unsigned char)a2;
- (void)_handleTouchActionsForTouchEvent:(const void *)a0;
- (void)cancelActiveTextInteractionGestures;
- (BOOL)pointIsNearMarkedText:(struct CGPoint { double x0; double x1; })a0;
- (struct optional<WebKit::InteractionInformationAtPosition> { union { char x0; struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } x0; BOOL x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; unsigned long long x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; struct FloatPoint { float x0; float x1; } x22; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x0; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 3; unsigned int x5 : 26; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; } x23; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x0; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 3; unsigned int x5 : 26; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; } x24; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x25; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x26; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x27; struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } x28; struct RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>> { struct ShareableBitmap *x0; } x29; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x30; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x31; float x32; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x33; struct optional<WebCore::Cursor> { union { char x0; struct Cursor { int x0; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x1; struct IntPoint { int x0; int x1; } x2; void *x3; } x1; } x0; BOOL x1; } x34; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x2; struct Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatRect *x0; unsigned int x1; unsigned int x2; } x3; float x4; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x5; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x6; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x7; struct Color { unsigned long long x0; } x8; unsigned char x9; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short x0; } x10; } x35; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x36; struct RetainPtr<NSArray> { void *x0; } x37; struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } x38; struct optional<WebCore::ElementContext> { union { char x0; struct ElementContext { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x0; } x1; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 x0; } x0; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long x0; } x1; } x2; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x0; } x3; } x1; } x0; BOOL x1; } x39; struct optional<WebCore::ElementContext> { union { char x0; struct ElementContext { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x0; } x1; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned __int128 x0; } x0; struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long x0; } x1; } x2; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x0; } x3; } x1; } x0; BOOL x1; } x40; } x1; } x0; BOOL x1; })positionInformationForActionSheetAssistant:(id)a0;
- (void)_share:(id)a0;
- (void)setUpDragAndDropInteractions;
- (id)supportedPasteboardTypesForCurrentSelection;
- (BOOL)textInteractionGesture:(long long)a0 shouldBeginAtPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)_removeVisibilityPropagationViewForGPUProcess;
- (BOOL)resignFirstResponder;
- (void)_zoomToRevealFocusedElement;
- (void)updateTextSuggestionsForInputDelegate;
- (BOOL)validateImageAnalysisRequestIdentifier:(struct ObjectIdentifier<WebKit::ImageAnalysisRequestIdentifierType> { unsigned long long x0; })a0;
- (void)_didPerformDragOperation:(BOOL)a0;
- (void)_doAfterPendingImageAnalysis:(id /* block */)a0;
- (double)_initialScaleFactor;
- (void)_invokePendingAutocorrectionContextHandler:(id)a0;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_setAccessibilityWebProcessToken:(id)a0;
- (void)_toggleStrikeThroughForWebView:(id)a0;
- (void)_previewItemController:(id)a0 commitPreview:(id)a1;
- (void)changeSelectionWithTouchesFrom:(struct CGPoint { double x0; double x1; })a0 to:(struct CGPoint { double x0; double x1; })a1 withGesture:(long long)a2 withState:(long long)a3;
- (void)_webProcessDidCreateContextForVisibilityPropagation;
- (void)contextMenuInteraction:(id)a0 willDisplayMenuForConfiguration:(id)a1 animator:(id)a2;
- (BOOL)gestureRecognizer:(id)a0 isInterruptingMomentumScrollingWithEvent:(id)a1;
- (BOOL)hasPendingImageAnalysisRequest;
- (void)_disableDoubleTapGesturesDuringTapIfNecessary:(struct ObjectIdentifier<WebKit::TapIdentifierType> { unsigned long long x0; })a0;
- (void)modifierFlagsDidChangeFrom:(long long)a0 to:(long long)a1;
- (void)mouseGestureRecognizerChanged:(id)a0;
- (void)deleteBackward;
- (void)requestAutocorrectionContextWithCompletionHandler:(id /* block */)a0;
- (id)contextMenuInteraction:(id)a0 configurationForMenuAtLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)_pointerInteraction:(id)a0 regionForRequest:(id)a1 defaultRegion:(id)a2 completion:(id /* block */)a3;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)a0 replacementText:(id)a1;
- (id)placeholderForDynamicallyInsertedImageAnalysisActions;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })rectToRevealWhenZoomingToFocusedElement;
- (id)dataDetectionContextForPositionInformation:(const void *)a0;
- (id)_contextMenuInteraction:(id)a0 overrideSuggestedActionsForConfiguration:(id)a1;
- (void)_accessibilityRegisterUIProcessTokens;
- (void)contextMenuInteraction:(id)a0 willEndForConfiguration:(id)a1 animator:(id)a2;
- (id)_dataForPreviewItemController:(id)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 type:(long long *)a2;
- (void)_didUpdateEditorState;
- (BOOL)_handleDropByInsertingImagePlaceholders:(id)a0 session:(id)a1;
- (void)_interactionStartedFromPreviewItemController:(id)a0;
- (void)dragInteraction:(id)a0 session:(id)a1 didEndWithOperation:(unsigned long long)a2;
- (void)_elementDidFocus:(const void *)a0 userIsInteracting:(BOOL)a1 blurPreviousNode:(BOOL)a2 activityStateChanges:(struct OptionSet<WebCore::ActivityState::Flag> { unsigned int x0; })a3 userObject:(id)a4;
- (id)textInRange:(id)a0;
- (void)actionSheetAssistant:(id)a0 shareElementWithImage:(id)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)assignLegacyDataForContextMenuInteraction;
- (BOOL)hasContent;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void)decreaseSizeForWebView:(id)a0;
- (id)filePickerAcceptedTypeIdentifiers;
- (BOOL)gestureRecognizer:(id)a0 canPreventGestureRecognizer:(id)a1;
- (void).cxx_destruct;
- (id)_createTargetedContextMenuHintPreviewForFocusedElement;
- (void)requestRVItemInSelectedRangeWithCompletionHandler:(id /* block */)a0;
- (void)_insertNestedOrderedListForWebView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textFirstRect;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (void)shareSheetDidDismiss:(id)a0;
- (void)updateFocusedElementValueAsColor:(id)a0;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })a0 withBoundary:(long long)a1 completionHandler:(id /* block */)a2;

@end

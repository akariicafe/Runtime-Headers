@class NSString, DupDownscaleHalfConvert, FigRegToolboxGPU, StereoDisparityEstimator, NSDictionary, FigDisparityMetadata, GDCProcessor, FigMetalContext, DisparityDiagnostics, DisparityTuningParameters;
@protocol DisparityProcessorInferenceDelegate;

@interface FigDisparityGenerator : NSObject <ImageBufferProcessor> {
    DupDownscaleHalfConvert *_downscaler;
    GDCProcessor *_gdc;
    StereoDisparityEstimator *_stereoDisparityEstimator;
    unsigned int _refWidth;
    unsigned int _refHeight;
    unsigned int _disparityWidth;
    unsigned int _disparityHeight;
    FigRegToolboxGPU *_keypointDetRtb;
    struct { float x0; float x1; float x2; float x3; float x4; float x5; } *_keypointListRtb;
    unsigned int _keypointGridWidth;
    unsigned int _keypointGridHeight;
    unsigned int _keypointsCount;
    struct AdaptiveCorrection { } *_adc;
    unsigned int _inputImageWidth;
    unsigned int _inputImageHeight;
    unsigned int _scalerOutputWidth;
    unsigned int _scalerOutputHeight;
    unsigned int _widePaddedWidthMax;
    unsigned int _widePaddedHeightMax;
    struct __CVBuffer { } *_teleImageLow;
    struct __CVBuffer { } *_teleImageLowLumaOnly;
    struct __CVBuffer { } *_wideImageLow;
    struct __CVBuffer { } *_undistortedTele;
    struct __CVBuffer { } *_shiftMap;
    NSDictionary *_wideMeta;
    NSDictionary *_teleMeta;
    double *_adaptiveCorrectionKeypointsTeleDistorted;
    double *_adaptiveCorrectionKeypointsWideDistorted;
    float _pixelSizeTeleMicrometers;
    float _pixelSizeWideMicrometers;
    long long _disparityOrientation;
    DisparityDiagnostics *_diagnostics;
    DisparityTuningParameters *_disparityTuningParameters;
    BOOL _isPrewarming;
    struct CalModel { double focalLengthTelePix; double focalLengthWidePix; double opticalCenterTeleX; double opticalCenterTeleY; double opticalCenterWideX; double opticalCenterWideY; double extrinRotTeleToWide[12]; } _initialCalibration;
    struct CalModel { double focalLengthTelePix; double focalLengthWidePix; double opticalCenterTeleX; double opticalCenterTeleY; double opticalCenterWideX; double opticalCenterWideY; double extrinRotTeleToWide[12]; } _correctedCalibration;
    struct { float distortPolynomCoefficients[8]; float undistortPolynomCoefficients[8]; float centerX; float centerY; float originalImageWidth; float originalImageHeight; float pixelSize; float homography[9]; float inverseHomography[9]; BOOL forceIdentityHomography; BOOL convertToRGBA; float disparityScalingFactor; } _gdcParametersTele;
    struct { float distortPolynomCoefficients[8]; float undistortPolynomCoefficients[8]; float centerX; float centerY; float originalImageWidth; float originalImageHeight; float pixelSize; float homography[9]; float inverseHomography[9]; BOOL forceIdentityHomography; BOOL convertToRGBA; float disparityScalingFactor; } _gdcParametersWide;
    struct DistortionModel { double pixelSizeMM; double focalLengthPix; double opticalCenterX; double opticalCenterY; double polyBase[8]; double polyDynamic[8]; } _teleDistModel;
    struct DistortionModel { double pixelSizeMM; double focalLengthPix; double opticalCenterX; double opticalCenterY; double polyBase[8]; double polyDynamic[8]; } _wideDistModel;
    struct DistortionModel { double pixelSizeMM; double focalLengthPix; double opticalCenterX; double opticalCenterY; double polyBase[8]; double polyDynamic[8]; } _teleUndistModel;
    struct DistortionModel { double pixelSizeMM; double focalLengthPix; double opticalCenterX; double opticalCenterY; double polyBase[8]; double polyDynamic[8]; } _wideUndistModel;
    struct { void /* unknown type, empty encoding */ columns[3]; } _paddingHInv;
    float _nearLimitDisparityAtFullRes;
    float _midLimitDisparityAtFullRes;
    float _canonicalDisparityScaleFactorOut;
    BOOL _isShaderHarvesting;
}

@property (readonly, nonatomic) FigDisparityMetadata *shiftMapMetadata;
@property (retain, nonatomic) NSDictionary *options;
@property (nonatomic) BOOL shouldComputeDisparityWhenCalibrationFails;
@property (nonatomic) BOOL equalizeTeleGainToMatchReference;
@property (readonly, nonatomic) FigMetalContext *metalContext;
@property (readonly, nonatomic) NSDictionary *disparityDiagnosticMetadata;
@property (nonatomic) struct opaqueCMSampleBuffer { } *referenceSampleBuffer;
@property (nonatomic) struct opaqueCMSampleBuffer { } *auxiliarySampleBuffer;
@property (nonatomic) struct __CVBuffer { } *outputShiftmap;
@property (weak, nonatomic) id<DisparityProcessorInferenceDelegate> disparityInferenceProcessorDelegate;
@property (nonatomic) struct { unsigned long long inputImageWidth; unsigned long long inputImageHeight; BOOL inputIsLinearRGB; unsigned long long outputDisparityWidth; unsigned long long outputDisparityHeight; float maxPaddingFactor; unsigned int keypointGridWidth; unsigned int keypointGridHeight; } disparityConfig;
@property (retain, nonatomic) NSDictionary *tuningParameters;
@property (retain, nonatomic) NSDictionary *cameraInfoByPortType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (int)prewarm;
- (BOOL)allocateResources:(struct { unsigned long long x0; unsigned long long x1; BOOL x2; unsigned long long x3; unsigned long long x4; float x5; unsigned int x6; unsigned int x7; } *)a0;
- (void)releaseResources;
- (BOOL)sanityChecksTele:(struct __CVBuffer { } *)a0 wide:(struct __CVBuffer { } *)a1 result:(struct __CVBuffer { } *)a2;
- (int)prewarmWithTuningParameters:(id)a0;
- (int)resetState;
- (int)setup;
- (int)_detectKeypoints:(float)a0;
- (int)computeInitialCalibration:(struct CalModel { double x0; double x1; double x2; double x3; double x4; double x5; double x6[12]; } *)a0 teleSbuf:(struct opaqueCMSampleBuffer { } *)a1 wideSbuf:(struct opaqueCMSampleBuffer { } *)a2;
- (int)finishProcessing;
- (BOOL)isImageScalerOutputResolution:(struct __CVBuffer { } *)a0;
- (int)prepareToProcess:(unsigned int)a0;
- (BOOL)isImageFullResolution:(struct __CVBuffer { } *)a0;
- (void)fillShiftMapMetadataWithCalModel:(struct CalModel { double x0; double x1; double x2; double x3; double x4; double x5; double x6[12]; } *)a0 teleGDC:(struct { float x0[8]; float x1[8]; float x2; float x3; float x4; float x5; float x6; float x7[9]; float x8[9]; BOOL x9; BOOL x10; float x11; } *)a1 wideGDC:(struct { float x0[8]; float x1[8]; float x2; float x3; float x4; float x5; float x6; float x7[9]; float x8[9]; BOOL x9; BOOL x10; float x11; } *)a2;
- (void)dealloc;
- (int)purgeResources;
- (int)process;
- (id)init;
- (id)initWithCommandQueue:(id)a0;
- (int)runWithTele:(struct opaqueCMSampleBuffer { } *)a0 wide:(struct opaqueCMSampleBuffer { } *)a1 result:(struct __CVBuffer { } *)a2;
- (void).cxx_destruct;
- (int)_downscaleTele:(struct __CVBuffer { } *)a0 Wide:(struct __CVBuffer { } *)a1 teleMagnification:(float)a2 gainToApplyToTele:(float)a3;

@end

@interface H13FastBayerProcConfig : SoftISPConfig

- (int)_adjustFlashGainWithLSCConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a0 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a1;
- (int)_allocateLSCGainDataWithLSCConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a0 metadata:(id)a1 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a2;
- (int)_applyALSTableWithLSCConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a0 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a1;
- (int)_calculateFlashWeightWithLSCGainData:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a0;
- (int)_computeALSProfileTableWithALSModel:(id)a0 illuminant:(id)a1 alsGridWidth:(unsigned short)a2 alsGridHeight:(unsigned short)a3 alsOutput:(float *)a4 alsOutputWidth:(unsigned short)a5 alsOutputHeight:(unsigned short)a6;
- (void)_deallocLSCGainData:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a0;
- (void)_dumpDataWithFilename:(const char *)a0 config:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a1 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a2 fixedToFloat:(BOOL)a3;
- (int)_fixedPointToFloatWithLSCConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a0 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a1 interleaved:(BOOL)a2;
- (int)_generateLSCGainMapWithLSCMetadata:(struct { struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x0; id x1; } *)a0 metadata:(id)a1 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a2 auxFrame:(BOOL)a3;
- (int)_getALSProfileIDFromMetadata:(id)a0;
- (float)_getShiftedValueFromRawData:(void /* unknown type, blank encoding */ *)a0 x:(int)a1 y:(int)a2 color:(int)a3 lscMetadata:(struct { struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x0; id x1; } *)a4;
- (int)_modulateAndNormalizeGainWithLSCConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a0 data:(struct { unsigned int *x0; unsigned int *x1; float *x2; float *x3; void /* unknown type, blank encoding */ *x4; void /* unknown type, blank encoding */ *x5; unsigned short x6[256]; float x7; float x8; float x9; float x10; float x11; float x12; float x13; BOOL x14; BOOL x15; BOOL x16; } *)a1 needNormalize:(BOOL)a2;
- (void)_scaleArrayLinearWithSrc:(id)a0 srcSize:(SEL)a1 dst:(float *)a2 dstSize:(float *)a3;
- (void)_scaleUIntArrayLinearWithSrc:(id)a0 srcSize:(SEL)a1 dst:(unsigned int *)a2 dstSize:(unsigned int *)a3;
- (int)checkSymmetricalFiltersForConfig:(struct HRDConfig { int x0; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; } x1; struct { float x0; float x1; float x2; float x3; } x2; float x3; float x4; float x5; float x6; float x7[5]; float x8; float x9; float x10[7]; float x11; float x12; float x13[5]; float x14; float x15; float x16[7]; struct { float x0; float x1; } x17; struct { float x0; float x1; } x18; } *)a0;
- (int)determineGOCConfigForInputFrame:(SEL)a0 lscConfig:(id)a1 hrEnabled:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a2 awbComputedGains:(BOOL)a3 gocConfig:(struct GOCConfig { unsigned int x0; } *)a4;
- (int)determineGOCConfigFromRegistersForInputFrame:(id)a0 lscConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a1 hrEnabled:(BOOL)a2 gocConfig:(struct GOCConfig { unsigned int x0; } *)a3;
- (int)determineHPBLUTFromInputFrame:(id)a0 hpbLUT:(char *)a1;
- (int)determineHPBLUTFromRegisters:(id)a0 hpbLUT:(char *)a1;
- (int)determineHPPPInBlendLUTFromInputFrame:(id)a0 hpppInBlendLUT:(float *)a1;
- (int)determineHPPPInBlendLUTFromRegisters:(id)a0 hpppInBlendLUT:(float *)a1;
- (int)determineHRConfigFromInputFrame:(SEL)a0 bounds:(id)a1 hrConfig:(id)a2 awbComputedGains:(struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a3;
- (int)determineHRConfigFromRegistersForInputFrame:(id)a0 hrConfig:(struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1;
- (int)determineHREnabledFromInputFrame:(id)a0 hrEnabled:(BOOL *)a1;
- (int)determineHREnabledFromRegisters:(id)a0 hrEnabled:(BOOL *)a1;
- (int)determineInBlendLUTFromInputFrame:(id)a0 hrConfig:(const struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1 inBlendLUT:(float *)a2;
- (int)determineInBlendLUTFromRegisters:(id)a0 inBlendLUT:(float *)a1;
- (int)determineMixClipLUTFromInputFrame:(id)a0 mixClipLUT:(float *)a1;
- (int)determineMixClipLUTFromRegisters:(id)a0 mixClipLUT:(float *)a1;
- (int)determineRcvLUTFromInputFrame:(id)a0 hrConfig:(const struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1 rcvLUT:(float *)a2;
- (int)determineRcvLUTFromRegisters:(id)a0 rcvLUT:(float *)a1;
- (int)determineSoftClipLUTFromInputFrame:(id)a0 hrConfig:(const struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1 softClipLUT:(float *)a2;
- (int)determineSoftClipLUTFromRegisters:(id)a0 softClipLUT:(float *)a1;
- (int)generateHRDConfigForInputFrame:(id)a0 hrdConfig:(struct HRDConfig { int x0; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; } x1; struct { float x0; float x1; float x2; float x3; } x2; float x3; float x4; float x5; float x6; float x7[5]; float x8; float x9; float x10[7]; float x11; float x12; float x13[5]; float x14; float x15; float x16[7]; struct { float x0; float x1; } x17; struct { float x0; float x1; } x18; } *)a1;
- (int)generateHRDConfigFromRegistersForInputFrame:(id)a0 hrdConfig:(struct HRDConfig { int x0; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; } x1; struct { float x0; float x1; float x2; float x3; } x2; float x3; float x4; float x5; float x6; float x7[5]; float x8; float x9; float x10[7]; float x11; float x12; float x13[5]; float x14; float x15; float x16[7]; struct { float x0; float x1; } x17; struct { float x0; float x1; } x18; } *)a1;
- (int)generateHRDEnabledForInputFrame:(id)a0 hrdEnabled:(BOOL *)a1;
- (int)generateHRDEnabledFromRegistersDict:(id)a0 hrdEnabled:(BOOL *)a1;
- (int)getFrontEndConfigForInputFrame:(id)a0 bounds:(id)a1 frontEndThumbnailConfig:(struct FrontEndProcessorThumbnailConfig { struct Config { BOOL x0; BOOL x1; int x2; } x0; unsigned short x1; float x2; float x3; float x4; float x5; unsigned short x6; float x7; } *)a2 gocConfig:(struct GOCConfig { unsigned int x0; } *)a3;
- (int)getGOCConfigForInputFrame:(SEL)a0 gocConfig:(id)a1 lscConfig:(struct GOCConfig { unsigned int x0; } *)a2 hrEnabled:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a3 awbComputedGains:(BOOL)a4;
- (int)getHRConfigForInputFrame:(SEL)a0 bounds:(id)a1 awbComputedGains:(id)a2 lscConfig:(const struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a3 hrConfig:(struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a4 outputMetadata:(id)a5;
- (int)getHRDConfigForInputFrame:(id)a0 hrdConfig:(struct HRDConfig { int x0; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; } x1; struct { float x0; float x1; float x2; float x3; } x2; float x3; float x4; float x5; float x6; float x7[5]; float x8; float x9; float x10[7]; float x11; float x12; float x13[5]; float x14; float x15; float x16[7]; struct { float x0; float x1; } x17; struct { float x0; float x1; } x18; } *)a1;
- (int)getHRDEnabledForInputFrame:(id)a0 hrdEnabled:(BOOL *)a1;
- (int)getHREnabledForInputFrame:(id)a0 hrEnabled:(BOOL *)a1;
- (int)getHuemapConfigForInputFrame:(id)a0 huemapConfig:(struct HuemapConfig { float x0; float x1; float x2; float x3; BOOL x4; BOOL x5; BOOL x6; unsigned short x7; } *)a1 gocConfig:(struct GOCConfig { unsigned int x0; } *)a2;
- (int)getHuemapFepConfigForInputFrame:(id)a0 huemapFepConfig:(struct HuemapFepConfig { BOOL x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; struct { unsigned short x0; short x1; } x5; } *)a1 gocConfig:(struct GOCConfig { unsigned int x0; } *)a2;
- (int)getHuemapMotionCompensationConfigForInputFrame:(id)a0 huemapMotionCompensationConfig:(struct HuemapMotionCompensationConfig { float x0; float x1; float x2; float x3; BOOL x4; BOOL x5; BOOL x6; unsigned short x7; float x8; unsigned short x9; float x10; float x11; float x12; float x13; float x14; unsigned short x15; } *)a1;
- (int)getLSCConfigForInputFrame:(id)a0 bounds:(id)a1 lscConfig:(struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } *)a2 forAWB:(BOOL)a3;
- (int)getLSCGainsForInputFrame:(id)a0 lscMetadata:(struct { struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x0; id x1; } *)a1 forAWB:(BOOL)a2;
- (int)getMotionCompensationEnabledForInputFrame:(id)a0 mcEnabled:(BOOL *)a1;
- (int)getRNFConfigForInputFrame:(id)a0 bounds:(id)a1 rnfConfig:(struct RNFConfig { BOOL x0; BOOL x1; BOOL x2; BOOL x3; unsigned char x4; unsigned short x5; unsigned char x6; unsigned short x7; unsigned short x8[4][3]; unsigned short x9[4][33]; unsigned short x10[257]; float x11; float x12; float x13[4][2]; float x14; } *)a2;
- (int)getSSCConfigForInputFrame:(id)a0 sscConfig:(struct SSCConfig { id x0; int x1; } *)a1;
- (id)initWithStaticParameters:(id)a0 prepareDescriptor:(id)a1 auxiliaryPixelFormats:(id)a2;
- (int)loadHPBLUTForInputFrame:(id)a0 toTexture:(id)a1;
- (int)loadHPPPInBlendLUTForInputFrame:(id)a0 toTexture:(id)a1;
- (int)loadInBlendLUTForInputFrame:(id)a0 hrConfig:(const struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1 toTexture:(id)a2;
- (int)loadMixClipLUTForInputFrame:(id)a0 toTexture:(id)a1;
- (int)loadRcvLUTForInputFrame:(id)a0 hrConfig:(const struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1 toTexture:(id)a2;
- (int)loadSoftClipLUTForInputFrame:(id)a0 hrConfig:(const struct HRConfig { struct { int x0; int x1; unsigned short x2; unsigned short x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; } x0; unsigned short x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; struct LSCConfig { unsigned short x0; unsigned short x1; float x2; unsigned int x3; BOOL x4; union { struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x0; } x5; union { void /* unknown type, empty encoding */ x0[4]; struct { } x1; } x6; void /* unknown type, empty encoding */ x7[4]; } x11; } *)a1 toTexture:(id)a2;

@end

@class NSDictionary;

@interface FigSDOFRenderingTuningParameters : NSObject {
    struct dynamic_tuning_parameters { struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } disparityScalingFactor; struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } segmentationFusionSubtractiveMaxBlur; struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } segmentationFusionAdditiveMaxBlur; } _dynamicParams;
    struct xhlrb_control_logic_params { int mode; float exposureScoreT0; float exposureScoreT1; float clippedPixelsT0; float clippedPixelsT1; float recoveryScoreT; int maxColourDiffusionIterations; float maxPreFilterGain; float maxWeightGain; float maxIntensityGain; float maxBGBlur; float blurRadiusT0; float blurRadiusT1; float maxIntensityT0; float maxIntensityT1; float minIntensityT0; float minIntensityT1; } _xhlrbControlConfig;
    int _disparityRefinementVersion;
    struct disparity_refinement_params { int radius; float weightScaling; float maxReconstructionWeight; float innerSamplingRadius; float outerSamplingRadius; int nSamples; float lumaSigma; float chromaSigma; float segmentationSigma; float disparitySigma; float accumulatedWeightT0; float accumulatedWeightT1; float aaLumaSigma; float aaChromaSigma; float aaSegmentationSigma; float aaSpatialSigma; } _disparityRefinementConfig;
    struct simple_lens_model_params { float left; float top; float width; float height; float zeroShiftPercentile; float simulatedFocalLength; float simulatedAperture; float minimumSimulatedAperture; float maximumSimulatedAperture; float frameNormalizedFocalLength; float maxFGBlur; float maxBGBlur; float shiftDeadZone; float disparityScalingFactor; } _simpleLensModelConfig;
    struct face_mask_params { float maxBlur; float simulatedAperture; float defaultSimulatedAperture; void /* unknown type, empty encoding */ centreX; void /* unknown type, empty encoding */ centreY; void /* unknown type, empty encoding */ leftEyeX; void /* unknown type, empty encoding */ leftEyeY; void /* unknown type, empty encoding */ rightEyeX; void /* unknown type, empty encoding */ rightEyeY; void /* unknown type, empty encoding */ chinX; void /* unknown type, empty encoding */ chinY; float maxBlurOnEyes; float maxBlurDistFromFocus; float eyeToEyebrowRatio; float linearBlurGrowthM; float linearBlurGrowthC; float distToBlurScaling; float capMultip; float gainMultip; float chinThetaLimit; float chinThetaMultip; float chinVectorSnapping; float imageAspectRatio; } _faceMaskConfig;
    struct segmentation_fusion_params { float simulatedAperture; float defaultSimulatedAperture; float maxBlur; float subtractiveLowerAlpha; float subtractiveUpperAlpha; float subtractiveMaxBlur; float additiveLowerAlpha; float additiveUpperAlpha; float additiveMaxBlur; } _segmentationFusionConfig;
    NSDictionary *_noiseEstimationConfig;
    struct blurmap_smoothing_params { int nIterations; float originalBlurValueT0; float originalBlurValueT1; float localMinimumBlurValueT0; float localMinimumBlurValueT1; } _blurmapSmoothingConfig;
    struct rendering_config_params { float simulatedAperture; float defaultSimulatedAperture; float preFilterBlurStrength; int preFilterRadius; float maxBlur; float sharpRadius; float softRadius; float lumaNoiseModelCoeff; float lumaNoiseAmplitude; float highlightBoostGain; int nRings; float basePixelWeight; float antiAliasBlurStrength; int antiAliasRadius; float relativeWeightThreshold; float alphaEpsilon; float alphaGain; float shapeObstructionCoeff; float ringAmplitude; float ringSharpness; float blendingQuarterResAlphaGain; float blendingFullResAlphaGain; int xhlrbIterations; float xhlrbBlurRadiusT0; float xhlrbBlurRadiusT1; float xhlrbMaxIntensityT0; float xhlrbMaxIntensityT1; float xhlrbMinIntensityT0; float xhlrbMinIntensityT1; float xhlrbPreFilterGain; float xhlrbWeightGain; float xhlrbIntensityGain; int xhlrbTileSize; } _renderingConfig;
    struct threadgroup_sizes_config { struct { unsigned long long width; unsigned long long height; unsigned long long depth; } slm_minMax; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } disparityrefinement_calcWeightsX; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } disparityrefinement_calcWeightsY; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } disparityrefinement_preproc; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } disparityrefinement_sample; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } disparityrefinement_antialias; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } disparityrefinement_passthrough; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } faceMask_apply; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } segfusion_apply; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } blurmapsmoothing_x; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } blurmapsmoothing_y; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_preprocess; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_preFilterX; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_preFilterY; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_withAlpha; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_noAlpha; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_opt2x_withAlpha; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_opt2x_noAlpha; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_antiAliasX; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_antiAliasY; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_yuvOutput1; struct { unsigned long long width; unsigned long long height; unsigned long long depth; } sparserendering_yuvOutput2; } _threadgroupSizesConfig;
}

- (int)calculateDynamicTuningParamsForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (struct blurmap_smoothing_params { int x0; float x1; float x2; float x3; float x4; })blurmapSmoothingConfig;
- (BOOL)readBlurMapSmoothingConfig:(id)a0;
- (id)noiseEstimationConfig;
- (float)simulatedAperture;
- (BOOL)readRenderingConfig:(id)a0;
- (struct rendering_config_params { float x0; float x1; float x2; int x3; float x4; float x5; float x6; float x7; float x8; float x9; int x10; float x11; float x12; int x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; float x21; int x22; float x23; float x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; int x32; })renderingConfig;
- (struct xhlrb_control_logic_params { int x0; float x1; float x2; float x3; float x4; float x5; int x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })xhlrbControlConfig;
- (float)maximumSimulatedAperture;
- (BOOL)readTGConfig:(id)a0;
- (float)minimumSimulatedAperture;
- (id)encodeParametersForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0;
- (struct segmentation_fusion_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; })segmentationFusionConfig;
- (BOOL)readDisparityRefinementConfig:(id)a0;
- (struct face_mask_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; })faceMaskConfig;
- (id)init;
- (struct simple_lens_model_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; })simpleLensModelConfig;
- (id)encodeParametersForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 captureType:(int)a1;
- (struct disparity_refinement_params { int x0; float x1; float x2; float x3; float x4; int x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })disparityRefinementConfig;
- (struct threadgroup_sizes_config { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x2; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x3; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x4; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x5; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x6; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x7; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x8; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x9; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x10; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x11; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x12; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x13; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x14; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x15; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x16; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x17; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x18; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x19; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x20; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x21; })threadgroupSizesConfig;
- (int)calculateXHLRBParamsForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 outParams:(struct xhlrb_control_params { int x0; float x1; float x2; float x3; } *)a1;
- (void).cxx_destruct;
- (BOOL)readSLMConfig:(id)a0;
- (id)initWithTuningDictionary:(id)a0;

@end

@class UITapGestureRecognizer, SBMedusaSettings, SBFailureNotifyingTapGestureRecognizer, UIView, SBAffordancePresenceController, NSString, UILongPressGestureRecognizer, SBFluidSwitcherIconOverlayView, SBFluidSwitcherTouchPassThroughScrollView, SBFFluidBehaviorSettings, SBAppLayout, SBAppSwitcherSettings, SBAppSwitcherPageView, SBApplicationBlurContentView, UIHoverGestureRecognizer, UIDragInteraction;
@protocol SBAppSwitcherPageContentView, SBFluidSwitcherItemContainerDelegate;

@interface SBFluidSwitcherItemContainer : SBFTouchPassThroughClippingView <UIScrollViewDelegate, UIGestureRecognizerDelegate, SBFailureNotifyingTapGestureRecognizerDelegate, UIDragInteractionDelegate, SBAppSwitcherPageViewDelegate, SBAffordancePresenceControllerDelegate, SBAppPlatterDragSourceViewProviding> {
    SBFluidSwitcherTouchPassThroughScrollView *_killScrollView;
    double _killScrollViewInitialVelocityScaleFactor;
    SBAppSwitcherPageView *_pageView;
    SBFluidSwitcherIconOverlayView *_iconOverlayView;
    UILongPressGestureRecognizer *_pressDownGestureRecognizer;
    UILongPressGestureRecognizer *_selectionHighlightGestureRecognizer;
    SBFailureNotifyingTapGestureRecognizer *_tapGestureRecognizer;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    SBFFluidBehaviorSettings *_squishSettings;
    SBAppSwitcherSettings *_settings;
    SBMedusaSettings *_medusaSettings;
    BOOL _sentKillRequest;
    struct CGPoint { double x; double y; } _highlightTapDownLocation;
    BOOL _animatingPageViewScale;
    SBApplicationBlurContentView *_blurView;
    BOOL _blurred;
    double _killProgressForCurrentDecelerationTarget;
    UIHoverGestureRecognizer *_hoverGestureRecognizer;
    UIDragInteraction *_dragInteraction;
    UITapGestureRecognizer *_returnKeyGestureRecognizer;
    BOOL _hasPageViewBeenCommitted;
}

@property (weak, nonatomic) id<SBFluidSwitcherItemContainerDelegate> delegate;
@property (retain, nonatomic) SBAppLayout *appLayout;
@property (retain, nonatomic) UIView<SBAppSwitcherPageContentView> *contentView;
@property (readonly, nonatomic) BOOL contentViewHasSceneOverlay;
@property (nonatomic) struct UIRectCornerRadii { double topLeft; double bottomLeft; double bottomRight; double topRight; } contentCornerRadii;
@property (nonatomic) unsigned long long maskedCorners;
@property (nonatomic) double contentPageViewScale;
@property (nonatomic) struct CGSize { double width; double height; } sizeForContainingSpace;
@property (nonatomic) double unobscuredMargin;
@property (nonatomic) BOOL clipsToUnobscuredMargin;
@property (nonatomic) double dimmingAlpha;
@property (nonatomic) double wallpaperOverlayAlpha;
@property (nonatomic) double lighteningAlpha;
@property (nonatomic, getter=isSelectable) BOOL selectable;
@property (nonatomic) unsigned long long killAxis;
@property (nonatomic, getter=isKillable) BOOL killable;
@property (nonatomic, getter=isRubberbandable) BOOL rubberbandable;
@property (nonatomic, getter=isFocusable) BOOL focusable;
@property (nonatomic, getter=isDraggable) BOOL draggable;
@property (nonatomic, getter=isEligibleForContentDragSpringLoading) BOOL eligibleForContentDragSpringLoading;
@property (nonatomic, getter=isLifted) BOOL lifted;
@property (nonatomic) BOOL suppressesHighlightEffect;
@property (nonatomic) BOOL supportsSwitcherDragAndDrop;
@property (nonatomic) double minimumTranslationForKillingContainer;
@property (nonatomic) BOOL shouldScaleOverlayToFillBounds;
@property (nonatomic) BOOL shouldUseBackgroundWallpaperTreatment;
@property (nonatomic) BOOL shouldUseWallpaperGradientTreatment;
@property (nonatomic) struct SBSwitcherGradientWallpaperAttributes { double leadingAlpha; double trailingAlpha; } wallpaperGradientAttributes;
@property (nonatomic) BOOL contentViewBlocksTouches;
@property (retain, nonatomic) UIView *contentOverlay;
@property (nonatomic) double contentAlpha;
@property (readonly, nonatomic) double killingProgress;
@property (readonly, nonatomic) BOOL isDeceleratingTowardsKillZone;
@property (readonly, nonatomic) double effectivePageViewPresentationCornerRadius;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } effectivePageViewPresentationFrame;
@property (nonatomic) double shadowAlpha;
@property (nonatomic) double shadowOffset;
@property (nonatomic) long long shadowStyle;
@property (nonatomic) long long tintStyle;
@property (nonatomic) double blurViewIconScale;
@property (nonatomic) struct CGPoint { double x; double y; } pageViewAnchorPoint;
@property (nonatomic) struct CGPoint { double x; double y; } pageViewOffset;
@property (nonatomic, getter=isActive) BOOL active;
@property (nonatomic, getter=isVisible) BOOL visible;
@property (nonatomic, getter=isOccludedInContinuousExposeStage) BOOL occludedInContinuousExposeStage;
@property (nonatomic, getter=isResizingAllowed) BOOL resizingAllowed;
@property (nonatomic) unsigned long long allowedTouchResizeCorners;
@property (nonatomic, getter=isHighlightedFromDirectTouch) BOOL highlightedFromDirectTouch;
@property (nonatomic, getter=isHighlightedFromCursorHover) BOOL highlightedFromCursorHover;
@property (nonatomic, getter=isPointerInteractionEnabled) BOOL pointerInteractionEnabled;
@property (nonatomic) double pointerInteractionHitTestPadding;
@property (nonatomic, getter=pointerIsHoveringOverEdge) unsigned long long hoveringOverEdge;
@property (nonatomic) BOOL positionAnimationsBeginFromModelState;
@property (nonatomic) BOOL transformAnimationsAreLegacyCounterRotations;
@property (readonly, nonatomic) SBAffordancePresenceController *affordancePresenceController;
@property (nonatomic) struct CGPoint { double x; double y; } meshWarpCollapsedTargetPosition;
@property (nonatomic) struct CGPoint { double x; double y; } meshWarpExpandedSourcePosition;
@property (nonatomic) BOOL shouldApplyMeshWarp;
@property (nonatomic, getter=isPreferredPointerLockStatusSuppressed) BOOL preferredPointerLockStatusSuppressed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, getter=isDragging) BOOL dragging;

+ (Class)layerClass;
+ (double)preferredRestingVisibleMarginForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;

- (void)_handleHoverGesture:(id)a0;
- (id)dragInteraction:(id)a0 previewForLiftingItem:(id)a1 session:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForPageView;
- (void)_handlePageViewTap:(id)a0;
- (double)currentStatusBarHeight;
- (struct CGSize { double x0; double x1; })_CGSizeFromLengthBasedOnKillAxis:(double)a0;
- (void)setBlurred:(BOOL)a0 duration:(double)a1 blurDelay:(double)a2 iconViewScale:(double)a3 began:(id /* block */)a4 completion:(id /* block */)a5;
- (void)affordancePresenceController:(id)a0 didChangeToPresence:(long long)a1;
- (BOOL)_shouldAnimatePropertyWithKey:(id)a0;
- (void)_updateShadowVisibility;
- (struct CGPoint { double x0; double x1; })_CGPointFromScalarBasedOnKillAxis:(double)a0;
- (id)_springLoadingEffectTargetView;
- (id)sourceView;
- (void)scrollViewDidEndDecelerating:(id)a0;
- (id)initialRimShadowFilters;
- (BOOL)_dragInteraction:(id)a0 shouldDelayCompetingGestureRecognizer:(id)a1;
- (double)_CGSizeWidthOrHeightBasedOnKillAxis:(struct CGSize { double x0; double x1; })a0;
- (id)_pageView;
- (id)containerViewForBlurContentView;
- (id)initWithCoder:(id)a0;
- (double)_inverseScaleTransformFactor;
- (BOOL)_scrollViewShouldPanGestureTryToBegin:(id)a0;
- (void)_notifyDelegateScrollViewDidChange;
- (double)_scaleForHighlightFromDirectTouch;
- (id)focusEffect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForScrollView;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)_updatePageViewContentClippingFrame;
- (id)dragInteraction:(id)a0 itemsForBeginningSession:(id)a1;
- (BOOL)appSwitcherPageView:(id)a0 shouldBeginPointerInteractionAtLocation:(struct CGPoint { double x0; double x1; })a1 window:(id)a2;
- (void)prepareForReuse;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)scrollViewDidScroll:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_updateKillScrollViewEnabled;
- (BOOL)canBecomeFocused;
- (double)_scaleForHighlightFromCursorHover;
- (struct CGSize { double x0; double x1; })_contentSizeForScrollView;
- (double)_killingProgressForContentOffset:(struct CGPoint { double x0; double x1; })a0;
- (struct SBDragPreviewShadowParameters { double x0; double x1; struct CGSize { double x0; double x1; } x2; })initialDiffuseShadowParameters;
- (void)didUpdateFocusInContext:(id)a0 withAnimationCoordinator:(id)a1;
- (id)layer;
- (void)_updatePageViewContentViewClipping;
- (void)scrollViewWillEndDragging:(id)a0 withVelocity:(struct CGPoint { double x0; double x1; })a1 targetContentOffset:(inout struct CGPoint { double x0; double x1; } *)a2;
- (void)_handleSelectionHighlightGesture:(id)a0;
- (void)gestureRecognizerTransitionedToFailed:(id)a0;
- (void)appSwitcherPageView:(id)a0 pointerIsHoveringOverEdge:(unsigned long long)a1;
- (id)initialCornerRadiusConfiguration;
- (void)_updateAccessibilityIdentifier;
- (void)layoutSubviews;
- (void)_updateTransformForCurrentHighlight;
- (struct CGPoint { double x0; double x1; })_contentOffsetAtRest;
- (void)_returnKeyPressed:(id)a0;
- (void)_ensureSubviewOrder;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 appLayout:(id)a1 delegate:(id)a2 active:(BOOL)a3 windowScene:(id)a4;
- (void)scrollViewWillBeginDecelerating:(id)a0;
- (struct SBDragPreviewShadowParameters { double x0; double x1; struct CGSize { double x0; double x1; } x2; })initialRimShadowParameters;
- (id)initialDiffuseShadowFilters;
- (void)scrollViewWillBeginDragging:(id)a0;
- (void)_addPageView;
- (void)_handlePageViewPressDown:(id)a0;
- (id)_createScrollView;
- (void)scrollViewDidEndDragging:(id)a0 willDecelerate:(BOOL)a1;
- (void)_updateForPointerHoveringOverEdge:(unsigned long long)a0;
- (struct CGPoint { double x0; double x1; })_contentOffsetForKillingProgress:(double)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void).cxx_destruct;
- (struct CGSize { double x0; double x1; })_overlayViewSize;
- (void)_resetKillProgressScrollState;
- (double)_CGPointXOrYBasedOnKillAxis:(struct CGPoint { double x0; double x1; })a0;
- (void)setContentOverlay:(id)a0 animated:(BOOL)a1;

@end

@class UIKeyboardPinchGestureRecognizer, UIGestureKeyboardIntroduction, NSMutableArray, NSString, NSMutableSet, _UIKeyboardTypingSpeedLogger, UIKBResizingKeyplaneCoordinator, NSTimer, NSArray, NSMutableDictionary, UIKBRenderConfig, UIButton, UIKBTree, UIKBBackgroundView, UIView, UIKBKeyplaneView, NSLayoutConstraint, UISwipeGestureRecognizer, CADisplayLink, UIKBKeyViewAnimator, UIKeyboardPathEffectView, UIKeyboardEmojiKeyDisplayController, UISelectionFeedbackGenerator, UIKeyboardSplitTransitionView, UIImageView, UIDelayedAction, TUIKeyplaneView, NSDate, NSNumber;
@protocol UIKeyboardLayoutStarDelegate, UIKeyboardKeyplaneTransitionDelegate, UITextCursorAssertion;

@interface UIKeyboardLayoutStar : UIKeyboardLayout <UIKBEmojiHitTestResponder, UIKBResizingKeyplaneCoordinatorCoordinatorDelegate, UIKeyboardPinchGestureRecognizerDelegate, UIKeyboardTypingStyleEstimatorDelegate, UIKBKeyplaneViewDelegate, UIKeyboardKeyplaneTransitionDelegate> {
    long long _appearance;
    UIKBTree *_inactiveLanguageIndicator;
    UIKBKeyplaneView *_keyplaneView;
    UIKBBackgroundView *_backgroundView;
    UIKBKeyViewAnimator *_keyViewAnimator;
    double _prevTouchUpTime;
    double _prevTouchUpFinishedTime;
    double _prevTouchDownTime;
    unsigned long long _prevUpActions;
    NSMutableDictionary *_keyboards;
    NSMutableDictionary *_allKeyplaneViews;
    NSMutableSet *_allKeyplaneKeycaps;
    NSMutableSet *_validInputStrings;
    int _preferredTrackingChangeCount;
    int _shiftTrackingChangeCount;
    NSMutableSet *_accentInfo;
    NSMutableSet *_hasAccents;
    id _spaceTarget;
    SEL _spaceAction;
    SEL _spaceLongAction;
    id _returnTarget;
    SEL _returnAction;
    SEL _returnLongAction;
    id _deleteTarget;
    SEL _deleteAction;
    SEL _deleteLongAction;
    BOOL _settingShift;
    BOOL _holdingShift;
    BOOL _revertKeyplaneAfterTouch;
    BOOL _wasShifted;
    BOOL _swipeDetected;
    BOOL _suppressDeactivateKeys;
    BOOL _suppressShiftKeyplaneAnimation;
    BOOL _isTrackpadMode;
    BOOL _shiftLockReady;
    double _shiftLockFirstTapTime;
    UISwipeGestureRecognizer *_rightSwipeRecognizer;
    UISwipeGestureRecognizer *_leftSwipeRecognizer;
    UISwipeGestureRecognizer *_upSwipeRecognizer;
    UIKeyboardPinchGestureRecognizer *_pinchGestureRecognizer;
    UIKeyboardSplitTransitionView *_transitionView;
    double _initialSplitProgress;
    double _finalSplitProgress;
    double _autoSplitLastUpdate;
    double _autoSplitElapsedTime;
    CADisplayLink *_displayLink;
    BOOL _ghostKeysEnabled;
    UIDelayedAction *_delayedCentroidUpdate;
    BOOL _isRebuilding;
    long long _currentHandBias;
    BOOL _preRotateShift;
    NSString *_preRotateKeyplaneName;
    BOOL _preRotateTrackpadMode;
    UIDelayedAction *_multitapAction;
    BOOL _unshiftAfterMultitap;
    int _multitapCount;
    UIKBTree *_multitapKey;
    UIView *_flickPopupView;
    NSMutableDictionary *_compositeImages;
    NSTimer *_flickPopuptimer;
    id _touchInfo;
    UIView *_dimKeyboardImageView;
    BOOL _keyboardImageViewIsDim;
    BOOL _isOutOfBounds;
    BOOL _inDealloc;
    NSMutableSet *_keysUnderIndicator;
    _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;
    UIKBRenderConfig *_passcodeRenderConfig;
    long long _setKeyplaneViewCount;
    BOOL _inputTraitsPreventInitialReuse;
    BOOL _settingFloat;
    NSMutableSet *_leftKeySet;
    NSMutableSet *_rightKeySet;
    struct CGPoint { double x; double y; } _leftDriftOffset;
    struct CGPoint { double x; double y; } _rightDriftOffset;
    NSMutableArray *_leftSideReachability;
    NSMutableArray *_rightSideReachability;
    NSNumber *_homeRowHint;
    double _touchDownTimeSpan;
    NSDate *_prevTouchMoreKeyTime;
    NSDate *_prevProgressiveCandidateRequestTime;
    NSTimer *_progressiveCandidateUpdateTimer;
    NSString *_lastInputMode;
    BOOL _pendingDictationReload;
    BOOL _hasPeekedGestureKey;
    BOOL _lastInputIsGestureKey;
    UIGestureKeyboardIntroduction *_gestureKeyboardIntroduction;
    BOOL _dictationUsingServerManualEndpointing;
    BOOL _splitTransitionNeedsRebuild;
    NSMutableDictionary *_extendedTouchInfoMap;
    UIKBResizingKeyplaneCoordinator *_resizingKeyplaneCoordinator;
    UIButton *_biasEscapeButton;
    NSLayoutConstraint *_biasEscapeButtonLeftConstraint;
    NSLayoutConstraint *_biasEscapeButtonRightConstraint;
    NSMutableSet *_keyplaneTransformations;
    UIImageView *_pathEffectGlowView;
    UIKeyboardPathEffectView *_pathEffectView;
    NSArray *_pathEffectViewConstraints;
    BOOL _isContinuousPathUnderway;
    UIView *_keyplaneTransformationAreaView;
    BOOL _externalDictationAndInternationalKeys;
    BOOL _showsPunctuationKeysOnPrimaryKeyplane;
    TUIKeyplaneView *_liveKeyplaneView;
    BOOL _layoutSupportsCrescendo;
    NSArray *_liveKeyplaneConstraints;
}

@property (retain, nonatomic) UIKeyboardPathEffectView *pathEffectView;
@property (nonatomic) int playKeyClickSoundOn;
@property (nonatomic) BOOL muteNextKeyClickSound;
@property (retain, nonatomic) UISelectionFeedbackGenerator *slideBehaviour;
@property (retain, nonatomic) id<UITextCursorAssertion> blinkAssertion;
@property (weak, nonatomic) id<UIKeyboardKeyplaneTransitionDelegate> splitKeyplaneTransitionDelegate;
@property (nonatomic) id<UIKeyboardLayoutStarDelegate> delegate;
@property (readonly, nonatomic) UIKBTree *keyboard;
@property (readonly, nonatomic) UIKBTree *keyplane;
@property (readonly, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager;
@property (copy, nonatomic) NSString *keyboardName;
@property (copy, nonatomic) NSString *keyplaneName;
@property (readonly, nonatomic) NSString *localizedInputMode;
@property (copy, nonatomic) NSString *localizedInputKey;
@property (retain, nonatomic) UIKBTree *activeKey;
@property (nonatomic) BOOL shift;
@property (nonatomic) BOOL autoShift;
@property (nonatomic) BOOL didLongPress;
@property (readonly, nonatomic, getter=isRotating) BOOL rotating;
@property (readonly, nonatomic) BOOL showsInternationalKey;
@property (readonly, nonatomic) BOOL showsDictationKey;
@property (copy, nonatomic) NSString *preTouchKeyplaneName;
@property (retain, nonatomic) UIKBRenderConfig *renderConfig;
@property (retain, nonatomic) NSString *layoutTag;
@property (retain, nonatomic) UIView *modalDisplayView;
@property (nonatomic) double lastTwoFingerTapTimestamp;
@property (readonly, nonatomic) BOOL hasActiveKeys;
@property (nonatomic) BOOL preventPaddlesForPointerTouches;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)accessibilitySensitivityChanged;
+ (id)keyboardFromFactoryWithName:(id)a0 screenTraits:(id)a1;
+ (Class)_subclassForScreenTraits:(id)a0;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInputMode:(id)a0 screenTraits:(id)a1 keyboardType:(long long)a2;
+ (id)sharedPunctuationCharacterSet;
+ (id)sharedRivenKeyplaneGenerator;
+ (id)keyboardWithName:(id)a0 screenTraits:(id)a1;

- (BOOL)isLongPressedKey:(id)a0;
- (void)updateReturnKeysIfNeeded;
- (BOOL)shouldShowGestureKeyboardIntroduction;
- (void)updateLocalizedDisplayStringsForKeys:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)a0 onKeyplaneName:(id)a1;
- (void)setTwoFingerTapTimestamp:(double)a0;
- (void)annotateKeysWithDeveloperPunctuation;
- (BOOL)isResizing;
- (id)_keyboardLongPressInteractionRegions;
- (void)_gestureRecognizerFailed:(id)a0;
- (void)uninstallGestureRecognizers;
- (int)stateForKeyplaneSwitchKey:(id)a0;
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)a0 executionContext:(id)a1;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (void)playKeyFeedbackIfNecessaryForTouchDownOnKey:(id)a0 touchInfo:(id)a1;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (BOOL)shouldRetestTouchDraggedFromKey:(id)a0;
- (id)keyplaneFactory;
- (void)didClearInput;
- (BOOL)_shouldSwapGlobeAndMore;
- (void)mergeKeysIfNeeded;
- (void)prepareSliderBehaviorFeedback;
- (unsigned long long)downActionFlagsForKey:(id)a0;
- (unsigned char)getHandRestRecognizerState;
- (struct CGImage { } *)renderedKeyplaneWithToken:(id)a0 split:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_paddedKeyUnionFrame;
- (void)playKeyReleaseSoundForKey:(id)a0;
- (id)touchInfoForKey:(id)a0;
- (long long)currentHandBias;
- (BOOL)canAddRomanSwitchKey;
- (id)handRestRecognizerGetHomeRowHint;
- (void)clearAllTouchInfo;
- (void)refreshForDictationAvailablityDidChange;
- (BOOL)stretchKeyboardToFitKeyplane:(id)a0;
- (void)showMenu:(id)a0 forKey:(id)a1;
- (void)showKeyboardWithInputTraits:(id)a0 screenTraits:(id)a1 splitTraits:(id)a2;
- (BOOL)shouldRetestTouchUp:(id)a0;
- (void)updateLayoutTags;
- (BOOL)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)a0;
- (BOOL)touchPassesDragThreshold:(id)a0;
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)a0;
- (void)updateLocalizedKeysOnKeyplane:(id)a0;
- (void)didEndIndirectSelectionGesture:(BOOL)a0;
- (void)playKeyClickSoundOnDownForKey:(id)a0;
- (id)keyHitTest:(struct CGPoint { double x0; double x1; })a0;
- (int)stateForManipulationKey:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeyWithRepresentedString:(id)a0;
- (void)resetPanAlternativesForEndedTouch:(id)a0;
- (id)hostViewForResizingKeyplane:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)a0;
- (BOOL)performSpaceAction;
- (id)simulateTouchForCharacter:(id)a0 errorVector:(struct CGPoint { double x0; double x1; })a1 shouldTypeVariants:(BOOL)a2 baseKeyForVariants:(BOOL)a3;
- (BOOL)shouldAllowCurrentKeyplaneReload;
- (id)createKeyEventForStringAction:(id)a0 forKey:(id)a1 inputFlags:(int)a2;
- (BOOL)shouldIgnoreContinuousPathRequirements;
- (void)deactivateActiveKeys;
- (void)handleMultitapTimerFired;
- (struct CGSize { double x0; double x1; })stretchFactor;
- (id)keyWithRepresentedString:(id)a0;
- (BOOL)shouldMatchCaseForDomainKeys;
- (BOOL)canProduceString:(id)a0;
- (void)setPercentSignKeysForCurrentLocaleOnKeyplane:(id)a0;
- (void)setPreferredHeight:(double)a0;
- (void)populateFlickPopupsForKey:(id)a0;
- (id)splitNameForKeyplaneName:(id)a0;
- (id)flickPopupStringForKey:(id)a0 withString:(id)a1;
- (BOOL)usesAutoShift;
- (void)setLabel:(id)a0 forKey:(id)a1;
- (void)setKeyboardBias:(long long)a0;
- (void)finishSplitTransitionWithCompletion:(id /* block */)a0;
- (double)lastTouchDownTimestamp;
- (void)multitapExpired;
- (id)keyplaneNamed:(id)a0;
- (double)stretchFactorHeight;
- (BOOL)isDeadkeyInput:(id)a0;
- (BOOL)ignoreWriteboard;
- (id)_appendingSecondaryStringToVariantsTop:(id)a0 secondaryString:(id)a1 withDirection:(id)a2;
- (void)finishSliderBehaviorFeedback;
- (void)showPopupView:(long long)a0 withKey:(id)a1 popupInfo:(id)a2 force:(BOOL)a3;
- (BOOL)pinchDetected;
- (id)currentKeyplaneView;
- (BOOL)hasCandidateKeys;
- (void)_cleanUpBlinkAssertionIfNecessary;
- (id)generateInfoForTouch:(id)a0;
- (int)stateForKey:(id)a0;
- (BOOL)canReuseKeyplaneView;
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)a0 clearingDimming:(BOOL)a1;
- (BOOL)performReturnAction;
- (id)keyHitTestWithoutCharging:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)globeKeyDisplaysAsEmojiKey;
- (void)calculateReachabilityScoreWithKey:(id)a0 keyError:(struct CGPoint { double x0; double x1; })a1;
- (void)updateUndoKeyState;
- (void)preparePopupVariantsForKey:(id)a0 onKeyplane:(id)a1;
- (id)highlightedVariantListForStylingKey:(id)a0;
- (void)willBeginIndirectSelectionGesture:(BOOL)a0;
- (long long)defaultSelectedVariantIndexForKey:(id)a0 withActions:(unsigned long long)a1;
- (BOOL)supportsEmoji;
- (void)handlePopupView:(id)a0;
- (void)finishSplitTransitionWithProgress:(double)a0;
- (void)performHitTestForTouchInfo:(id)a0 touchStage:(int)a1 executionContextPassingUIKBTree:(id)a2;
- (id)getSortedKeysForDisplayRowHint:(int)a0;
- (void)updateKeyboardForKeyplane:(id)a0;
- (id)_variantsByAppendingDualStringKey:(id)a0 toVariants:(id)a1;
- (int)displayTypeHintForShiftKey;
- (id)activeMultitapCompleteKey;
- (void)setDisableInteraction:(BOOL)a0;
- (void)resizeKeyplaneAndRedraw:(BOOL)a0;
- (struct CGImage { } *)renderedImageWithToken:(id)a0;
- (void)updateAllKeyStates;
- (BOOL)shouldHitTestKey:(id)a0;
- (id)keyForKeyboardName:(id)a0 screenTraits:(id)a1;
- (BOOL)isShiftKeyPlaneChooser;
- (void)cancelMultitapTimer;
- (void)changeToKeyplane:(id)a0;
- (BOOL)hasActiveContinuousPathInput;
- (void)clearInfoForTouch:(id)a0;
- (void)clearContinuousPathView;
- (int)stateForStylingKey:(id)a0;
- (BOOL)shouldSendTouchUpToInputManager:(id)a0;
- (BOOL)canForceTouchUUIDCommit:(id)a0 inWindow:(id)a1;
- (BOOL)pinchCanBeginWithTouches:(id)a0 andScale:(double)a1;
- (id)currentRepresentedStringForDualDisplayKey:(id)a0;
- (void)relayoutForWriteboardKey;
- (void)installGestureRecognizers;
- (double)lastTouchUpTimestamp;
- (struct CGSize { double x0; double x1; })sizeForKeyplane:(id)a0;
- (BOOL)isEmojiKeyplane;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForLastKeyWithRepresentedString:(id)a0;
- (void)touchCancelled:(id)a0 executionContext:(id)a1;
- (void)setRenderConfig:(id)a0 updateKeyplane:(BOOL)a1;
- (BOOL)isHandwritingPlane;
- (void)prepareForSplitTransition;
- (BOOL)isGeometricShiftOrMoreKeyForTouch:(id)a0;
- (void)showKeyboardWithInputMode:(id)a0 renderConfig:(id)a1 inputTraits:(id)a2 screenTraits:(id)a3 splitTraits:(id)a4;
- (void)completeHitTestForTouchDown:(id)a0 executionContext:(id)a1;
- (id)activationIndicatorView;
- (void)removeFromSuperview;
- (BOOL)shouldMergeAssistantBarWithKeyboardLayout;
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)a0;
- (void)updateStateForKey:(id)a0;
- (void)touchDown:(id)a0 executionContext:(id)a1;
- (BOOL)handleFlick:(id)a0;
- (id)synthesizeTouchUpEventForKey:(id)a0;
- (id)defaultNameForKeyplaneName:(id)a0;
- (id)inputModeToMergeCapsLockKey;
- (void)updateAutolocalizedKeysForKeyplane:(id)a0;
- (unsigned long long)keyplaneShiftState;
- (struct CGPoint { double x0; double x1; })getCenterForKeyUnderRightIndexFinger;
- (void)clearInfoForTouch:(id)a0 forResting:(BOOL)a1;
- (void)didEndIndirectSelectionGesture;
- (BOOL)supportsContinuousPath;
- (void)finishContinuousPathView:(BOOL)a0;
- (void)fadeActivationIndicatorWithDuration:(double)a0 withDelay:(double)a1;
- (BOOL)_handleTouchForEmojiInputView;
- (void)showFlickView:(long long)a0 withKey:(id)a1 flickString:(id)a2;
- (BOOL)is10KeyRendering;
- (id)keyplaneNameForRevertAfterTouch;
- (id)keyHitTestContainingPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)cancelDelayedCentroidUpdate;
- (id)infoForTouchUUID:(id)a0;
- (id)keyViewHitTestForPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)initialKeyplaneNameWithKBStarName:(id)a0;
- (void)didTriggerDestructiveRenderConfigChange;
- (BOOL)_stringContainsCurrencyCharacters:(id)a0;
- (id)createKeyEventForStringAction:(id)a0 forKey:(id)a1 touchInfo:(id)a2 inputFlags:(int)a3;
- (void)willRotate;
- (BOOL)canMultitap;
- (void)restoreDefaultsForAllKeys;
- (void)setAction:(SEL)a0 forKey:(id)a1;
- (BOOL)shouldShowDictationKey;
- (void)updatePhysicalKeyboardEvent:(id)a0 withMarkedInput:(id)a1;
- (void)_didTapBiasEscapeButton:(id)a0;
- (BOOL)keyplaneSupportsResizingGesture;
- (void)willBeginTrackpadModeForServerSideDictation;
- (void)didRotate;
- (BOOL)isKeyScriptSwitchKey:(id)a0;
- (BOOL)shouldPreventInputManagerHitTestingForKey:(id)a0;
- (void)cancelTouchesForTwoFingerTapGesture:(id)a0;
- (id)cacheIdentifierForKeyplaneNamed:(id)a0;
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)a0;
- (void)dismissGestureKeyboardIntroduction;
- (void)setState:(int)a0 forKey:(id)a1;
- (void)addContinuousPathPoint:(struct CGPoint { double x0; double x1; })a0 withTimestamp:(double)a1;
- (void)setToInitialKeyplane;
- (int)stateForMultitapReverseKey:(id)a0;
- (void)restoreDefaultsForKey:(id)a0;
- (void)divideKeysIntoLeft:(id)a0 right:(id)a1;
- (id)keyplaneForKey:(id)a0;
- (id)infoForTouch:(id)a0;
- (BOOL)isDeveloperGestureKeybaord;
- (void)didMoveToWindow;
- (BOOL)keyplaneContainsEmojiKey;
- (void)multitapInterrupted;
- (int)stateForCandidateListKey:(id)a0;
- (void)completeRetestForTouchUp:(id)a0 timestamp:(double)a1 interval:(double)a2 executionContext:(id)a3;
- (id)splitNameForKeyplane:(id)a0;
- (unsigned long long)upActionFlagsForKey:(id)a0;
- (void)continueFromInternationalActionForTouchUp:(id)a0 withActions:(unsigned long long)a1 timestamp:(double)a2 interval:(double)a3 didLongPress:(BOOL)a4 prevActions:(unsigned long long)a5 executionContext:(id)a6;
- (BOOL)shouldSendStringForFlick:(id)a0;
- (BOOL)stretchKeyboardToFit;
- (BOOL)_continuousPathSpotlightEffectEnabled;
- (void)setKeyForTouchInfo:(id)a0 key:(id)a1;
- (void)pinchHandler:(id)a0;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (id)multitapCompleteKeys;
- (id)defaultKeyplaneForKeyplane:(id)a0;
- (void)setTarget:(id)a0 forKey:(id)a1;
- (BOOL)_pointAllowedInStaticHitBuffer:(struct CGPoint { double x0; double x1; })a0;
- (void)handRestRecognizerNotifyRestForBegin:(BOOL)a0 location:(struct CGPoint { double x0; double x1; })a1 timestamp:(double)a2 pathIndex:(int)a3 touchUUID:(id)a4 context:(id)a5;
- (BOOL)keyplaneUsesResizingOffset;
- (void)setReturnKeyEnabled:(BOOL)a0 withDisplayName:(id)a1 withType:(int)a2;
- (void)refreshForRivenPreferences;
- (BOOL)_allowContinuousPathUI;
- (BOOL)useCrescendoLayout;
- (BOOL)useDismissForMessagesWriteboard;
- (void)_updateSupplementaryKeys;
- (void)handleDismissFlickView;
- (void)updateShiftKeyState;
- (id)baseKeyForString:(id)a0;
- (void)endMultitapForKey:(id)a0;
- (void)deleteHandwritingStrokesAtIndexes:(id)a0;
- (void)accessibilitySensitivityChanged;
- (void)prepareForFloatingTransition:(BOOL)a0;
- (SEL)handlerForNotification:(id)a0;
- (BOOL)shouldUseDefaultShiftStateFromLayout;
- (struct CGPoint { double x0; double x1; })applyError:(struct CGPoint { double x0; double x1; })a0 toKey:(id)a1;
- (void)downActionShiftWithKey:(id)a0;
- (BOOL)ignoresShiftState;
- (BOOL)isTrackpadMode;
- (void)updateBackgroundCorners;
- (void)cleanupPreviousKeyboardWithNewInputTraits:(id)a0;
- (void)showPopupVariantsForKey:(id)a0;
- (void)updateSelectedVariantIndexForKey:(id)a0 withActions:(unsigned long long)a1 withPoint:(struct CGPoint { double x0; double x1; })a2;
- (void)didDetectPinchWithSeparation:(double)a0;
- (void)touchCancelled:(id)a0 forResting:(BOOL)a1 executionContext:(id)a2;
- (void)_autoSplit:(id)a0;
- (void)setKeyboardDim:(BOOL)a0 amount:(double)a1 withDuration:(double)a2;
- (void)traitCollectionDidChange;
- (void)transitionToPunctuationKeysVisible:(BOOL)a0;
- (void)fadeWithInvocation:(id)a0;
- (void)recenterMonolithKeyplaneSwitchKeys;
- (void)provideSliderBehaviorFeedback;
- (void)setTrackpadMode:(BOOL)a0 animated:(BOOL)a1;
- (double)biasedKeyboardWidthRatio;
- (void)_addExtraControlKeysIfNecessary;
- (struct CGImage { } *)cachedCompositeImageWithCacheKey:(id)a0;
- (id)keyHitTestClosestToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)refreshGhostKeyState;
- (void)deactivateActiveKey;
- (BOOL)shouldAllowSelectionGestures:(BOOL)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 toBegin:(BOOL)a2;
- (void)updateBackgroundIfNeeded;
- (id)multitapForwardKeys;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dragGestureRectInView:(id)a0;
- (void)setKeyboardName:(id)a0 appearance:(long long)a1;
- (void)updateInputModeLocalizedKeysForKeyplane:(id)a0;
- (void)touchChanged:(id)a0 executionContext:(id)a1;
- (BOOL)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint { double x0; double x1; })a0 finalPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)activeTouchInfoForShift;
- (void)playKeyClickSoundOnUpForKey:(id)a0;
- (void)switchKeyplane:(id)a0;
- (void)updateLocalizedKeys:(BOOL)a0;
- (BOOL)allKeyplanesHaveSameHeight;
- (void)setSplit:(BOOL)a0 animated:(BOOL)a1;
- (void)updateCurrencySymbolForKey:(id)a0 withCurrencyString:(id)a1;
- (BOOL)showGestureKeyboardIntroductionIfNeeded;
- (BOOL)_allowStartingContinuousPathForTouchInfo:(id)a0 alreadyActiveKeyExisting:(BOOL)a1;
- (void)setKeyboardDim:(BOOL)a0;
- (void)clearKeyAnnotationsIfNecessary;
- (void)touchDragged:(id)a0 executionContext:(id)a1;
- (BOOL)shouldSkipResponseToGlobeKey:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)keylistContainingKey:(id)a0;
- (BOOL)supportStylingWithKey:(id)a0;
- (void)setSplitProgress:(double)a0;
- (struct CGPoint { double x0; double x1; })getCenterForKeyUnderLeftIndexFinger;
- (int)stateForMultitapForwardKey:(id)a0;
- (BOOL)shouldDeactivateWithoutWindow;
- (void)playKeyClickSoundForKey:(id)a0;
- (void)handleDelayedCentroidUpdate;
- (struct CGImage { } *)renderedImageWithStateFallbacksForToken:(id)a0;
- (void)finishSplitTransition;
- (void)completeHitTestForTouchDragged:(id)a0 hitKey:(id)a1;
- (id)splitTransitionDelegate;
- (void)_setReturnKeyEnabled:(BOOL)a0 withDisplayName:(id)a1 withType:(int)a2;
- (void)updateCachedKeyplaneKeycaps;
- (void)updateLocalizedKeysForKeyplane:(id)a0 updateAllKeyplanes:(BOOL)a1;
- (BOOL)shouldShowInternationalMenuForKey:(id)a0;
- (void)swipeDetected:(id)a0;
- (void)incrementPunctuationIfNeeded:(id)a0;
- (void)clearTransientState;
- (void)setTextEditingTraits:(id)a0;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (BOOL)isMultitapKey:(id)a0;
- (void)setAutoshift:(BOOL)a0;
- (void)didEndTrackpadModeForServerSideDictation;
- (void)_transformFloatingKeyboardIfNecessary;
- (void)setLongPressAction:(SEL)a0 forKey:(id)a1;
- (void)updateState:(int)a0 forKey:(id)a1;
- (BOOL)isShiftKeyBeingHeld;
- (BOOL)_shouldInheritScreenScaleAsContentScaleFactor;
- (unsigned long long)textEditingKeyMask;
- (BOOL)shouldIgnoreDistantKey;
- (BOOL)shouldMergeKey:(id)a0;
- (void)nextToUseInputModeDidChange:(id)a0;
- (void)showSplitTransitionView:(BOOL)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_didChangeKeyplaneWithContext:(id)a0;
- (void)completeSendStringActionForTouchUp:(id)a0 withActions:(unsigned long long)a1 timestamp:(double)a2 interval:(double)a3 didLongPress:(BOOL)a4 prevActions:(unsigned long long)a5 executionContext:(id)a6;
- (void)transitionToModalContinuousPathKeyplane;
- (BOOL)_continuousPathModalPunctuationPlaneEnabled;
- (void)_recordKeystrokeStatisticForKeyPress;
- (id)_keyplaneVariantsKeyForString:(id)a0;
- (id)keyViewAnimator;
- (id)flickStringForInputKey:(id)a0 direction:(long long)a1;
- (void)touchDragged:(id)a0;
- (void)handlePopupView;
- (BOOL)keyHasAccentedVariants:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldReceiveTouch:(id)a1;
- (int)stateForDictationKey:(id)a0;
- (int)stateForShiftKey:(id)a0;
- (void)clearHandwritingStrokesIfNeededAndNotify:(BOOL)a0;
- (void)triggerSpaceKeyplaneSwitchIfNecessary;
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)a0 withInputMode:(id)a1;
- (id)_variantsOfCurrencyKey:(id)a0 language:(id)a1;
- (id)keyplaneView:(id)a0 containingViewForActiveKey:(id)a1;
- (void)setPasscodeOutlineAlpha:(double)a0;
- (void)upActionShift;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 forEvent:(struct __GSEvent { } *)a1;
- (BOOL)_allowPaddle;
- (BOOL)shouldRetestKey:(id)a0 slidOffKey:(id)a1 withKeyplane:(id)a2;
- (BOOL)_shouldAttemptToAddSupplementaryControlKeys;
- (void)cancelTouchIfNecessaryForInfo:(id)a0 forResting:(BOOL)a1;
- (void)removePathEffectViewConstraintsIfNeeded;
- (double)hitBuffer;
- (BOOL)diacriticForwardCompose;
- (void)clearUnusedObjects:(BOOL)a0;
- (id)unprocessedTouchEventsForTouchInfo:(id)a0 touchStage:(int)a1 forcedKeyCode:(int)a2;
- (void)annotateWriteboardDisplayTypeHintForKeyIfNeeded;
- (BOOL)shouldShowIndicator;
- (id)simulateTouch:(struct CGPoint { double x0; double x1; })a0;
- (int)visualStyleForKeyboardIfSplit:(BOOL)a0;
- (BOOL)hasAccentKey;
- (void)typingStyleEstimator:(id)a0 didChangeTypingStyleEstimate:(unsigned long long)a1;
- (void)setKeyboardAppearance:(long long)a0;
- (void)updateKeyCentroids;
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)a0 withActions:(unsigned long long)a1 executionContext:(id)a2;
- (void)didBeginContinuousPath;
- (void)resetHRRLayoutState;
- (void)updatePanAlternativesForTouchInfo:(id)a0;
- (void)showKeyboardWithInputMode:(id)a0 renderConfig:(id)a1 inputTraits:(id)a2 screenTraits:(id)a3 splitTraits:(id)a4 reload:(BOOL)a5;
- (BOOL)handRestRecognizerShouldNeverIgnoreTouchState:(id)a0 fromPoint:(struct CGPoint { double x0; double x1; })a1 toPoint:(struct CGPoint { double x0; double x1; })a2 forRestingState:(unsigned long long)a3 otherRestedTouchLocations:(id)a4;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplanePadding;
- (void)handleKeyboardMenusForTouch:(id)a0;
- (id)popupKeyViews;
- (void)flushKeyCache:(id)a0;
- (id)candidateList;
- (BOOL)useUndoForMessagesWriteboard;
- (void)logHandwritingData;
- (void)touchUp:(id)a0 executionContext:(id)a1;
- (void)setMultitapReverseKeyState;
- (id /* block */)handRestRecognizerSilenceNextTouchDown;
- (void)touchDownWithKey:(id)a0 withTouchInfo:(id)a1 atPoint:(struct CGPoint { double x0; double x1; })a2 executionContext:(id)a3;
- (void)touchMultitapTimer;
- (void)updateGlobeKeyDisplayString;
- (void)tearDownSplitTransitionView;
- (void)rebuildSplitTransitionView;
- (BOOL)isKanaPlane;
- (void)updateMoreAndInternationalKeys;
- (BOOL)isAlphabeticPlane;
- (int)keycodeForKey:(id)a0;
- (void)completeSendStringActionForTouchDownWithKey:(id)a0 withActions:(unsigned long long)a1 executionContext:(id)a2;
- (void)createLayoutFromName:(id)a0;
- (void)pinchDidConsumeTouch:(id)a0;
- (void)setHideKeysUnderIndicator:(BOOL)a0;
- (void)refreshDualStringKeys;
- (void)longPressAction;
- (void)setNeedsVirtualDriftUpdate;
- (void)presentModalDisplayForKey:(id)a0;
- (BOOL)pinchSplitGestureEnabled;
- (int)displayTypeHintForMoreKey;
- (void)willBeginIndirectSelectionGesture;
- (void)_transformCarPlayIfNecessary;
- (void)reloadKeyboardWithInputTraits:(id)a0 screenTraits:(id)a1 splitTraits:(id)a2;
- (id)keyHitTestClosestToPoint:(struct CGPoint { double x0; double x1; })a0 inKeys:(id)a1;
- (void)handleDismissFlickView:(id)a0;
- (void)_addResizeTransformationIfNecessary;
- (BOOL)keyplaneContainsDismissKey;
- (void)updateTransitionWithFlags:(unsigned long long)a0;
- (void)_transitionToContinuousPathState:(long long)a0 forTouchInfo:(id)a1;
- (void)_setBiasEscapeButtonVisible:(BOOL)a0;
- (BOOL)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (struct CGSize { double x0; double x1; })handRestRecognizerStandardKeyPixelSize;
- (BOOL)_handRestRecognizerCancelShouldBeEnd;
- (void)reloadCurrentKeyplane;
- (void)finishSplitWithCompletion:(id /* block */)a0;
- (id)cacheTokenForKeyplane:(id)a0 caseAlternates:(BOOL)a1;
- (id)viewForKey:(id)a0;
- (id)currentKeyplane;
- (void)willMoveToWindow:(id)a0;
- (id)_currentKeyplaneTransformationContext;
- (void)_swapGlobeAndMoreKeysIfNecessary;
- (BOOL)isResized;
- (void)dealloc;
- (void)layoutSubviews;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void).cxx_destruct;

@end

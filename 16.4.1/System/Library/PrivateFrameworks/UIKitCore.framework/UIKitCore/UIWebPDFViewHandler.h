@class NSMapTable, WebPDFNSNumberFormatter, NSDictionary, NSObject, UIDocumentPasswordView, UIView, _UIHighlightView, NSString, UIColor, UIWebPDFView, _UIRotatingAlertController, NSArray, UIWebPDFLabelView;
@protocol UIWebPDFViewHandlerDelegate;

@interface UIWebPDFViewHandler : NSObject <UIWebPDFViewPrivateDelegate, UIDocumentPasswordViewDelegate, _UIRotatingAlertControllerDelegate, UIWebPDFViewDelegate, _UIWebDoubleTapDelegate, _UIWebRotationDelegate> {
    UIWebPDFView *_pdfView;
    double _initialZoomScale;
    _UIHighlightView *_linkHighlightView;
    UIWebPDFLabelView *_pageLabelView;
    BOOL _showsShadowsForHTMLContent;
    BOOL _cachedScrollViewShadowsState;
    UIDocumentPasswordView *_passwordEntryView;
    NSMapTable *_searchControllers;
    WebPDFNSNumberFormatter *_labelViewFormatter;
    struct _PDFHistoryItem { BOOL restorePending; BOOL isInitialScale; double zoomScale; struct CGPoint { double x; double y; } contentOffset; } _pendingHistoryItemRestore;
    _UIRotatingAlertController *_linkActionSheet;
    NSDictionary *_linkActionInfo;
    NSArray *_linkActions;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _rectOfInterest;
    BOOL _rectOfInterestConsidersHeight;
}

@property (readonly, nonatomic) UIWebPDFView *pdfView;
@property (readonly, nonatomic) UIView *frontView;
@property (nonatomic) BOOL scalesPageToFit;
@property (nonatomic) BOOL showPageLabels;
@property (nonatomic) NSObject<UIWebPDFViewHandlerDelegate> *pdfHandlerDelegate;
@property (retain, nonatomic) UIColor *backgroundColorForUnRenderedContent;
@property (nonatomic) BOOL hideActivityIndicatorForUnRenderedContent;
@property (nonatomic) BOOL hidePageViewsUntilReadyToRender;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)enclosingScrollView;
- (void)_keyboardDidShow:(id)a0;
- (void)didReceiveMemoryWarning:(id)a0;
- (void)dealloc;
- (id)init;
- (id)contentView;
- (void)_postdidDetermineDocumentBounds;
- (void)_showLinkSheet:(id)a0;
- (void)didBeginEditingPassword:(id)a0 inView:(id)a1;
- (void)ensureCorrectPagesAreInstalled:(BOOL)a0;
- (id)_actionForType:(int)a0;
- (id)createPageLabel;
- (id)searchControllerForHighlighter:(id)a0;
- (id)_absoluteUrlRelativeToDocumentURL:(id)a0;
- (id)_actionForType:(int)a0 withActionInfo:(id)a1;
- (id)_actionsForInteractionInfo:(id)a0;
- (void)_adjustContentOffsetForKeyboardIfNeeded;
- (void)_adjustZoomScalesForScrollViewInternal:(id)a0;
- (void)_completeLinkClickWithURL:(id)a0;
- (void)_completeLinkClickWithURLString:(id)a0;
- (void)_createPDFViewIfNeeded:(id)a0;
- (void)_ensurePDFViewInHierarchyForWebDocView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForDocumentBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_getLabelViewFormatter;
- (id)_getPDFDocumentViewForWebView:(id)a0;
- (void)_notifyDelegateDidClickLink:(id)a0;
- (void)_notifyDelegateWillClickLink:(id)a0;
- (double)_pinValueForVerticalEdge:(unsigned long long)a0 inScrollView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectForPasswordView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_rectForPdfView:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_removePDFViewIfWebDocViewIsNotPDF:(id)a0;
- (void)_removePDFViewIfWebDocViewIsNotSamePDF:(id)a0;
- (void)_replacePDFViewIfPresentWithWebDocView:(id)a0;
- (void)_resultRects:(id)a0 andResultViews:(id)a1 forSearchResult:(id)a2 inViewCoordinates:(id)a3;
- (id)_scroller:(id)a0;
- (void)_setSearchControllerDocumentToSearch:(id)a0;
- (void)_showPasswordEntryViewForFile:(id)a0;
- (void)_showPasswordErrorAlert;
- (void)_updateViewHierarchyForDocumentView:(id)a0 ignoreIfSame:(BOOL)a1;
- (unsigned long long)_verticalEdgeForContentOffsetInScrollView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })activeRectForRectOfInterest:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)adjustZoomScalesForScrollView;
- (void)clearActionSheet;
- (void)clearAllViews;
- (void)clearLinkHighlight;
- (void)clearPageLabel;
- (void)clearSearchControllerForHighlighter:(id)a0;
- (BOOL)considerHeightForDoubleTap;
- (BOOL)considerHeightOfRectOfInterestForRotation;
- (id)createLinkHighlight;
- (double)currentDocumentScale;
- (void)didDetermineDocumentBounds:(id)a0;
- (void)didEndEditingPassword:(id)a0 inView:(id)a1;
- (void)didScroll:(id)a0;
- (struct { double x0; double x1; double x2; })doubleTapScalesForSize:(struct CGSize { double x0; double x1; })a0;
- (id)findOnPageHighlighter;
- (void)handleLinkClick:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)handleLongPressOnLink:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 contentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (void)handleScrollToAnchor:(id)a0;
- (double)heightToKeepVisible;
- (void)highlightRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)hostViewForSheet:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })initialPresentationRectInHostViewForSheet:(id)a0;
- (double)minimumScaleForSize:(struct CGSize { double x0; double x1; })a0;
- (double)minimumVerticalContentOffset;
- (id)passwordForPDFView:(id)a0;
- (void)pdfView:(id)a0 zoomToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 forPoint:(struct CGPoint { double x0; double x1; })a2 considerHeight:(BOOL)a3;
- (void)performAction:(id)a0 fromAlertController:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })presentationRectInHostViewForSheet:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectOfInterestForPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectOfInterestForRotation;
- (void)removeViewFromSuperview;
- (void)resetZoom:(id)a0;
- (void)restoreStateFromHistoryItem:(id)a0 forWebView:(id)a1;
- (void)restoreStateFromPendingHistoryItem;
- (void)revealSearchResult:(id)a0 andZoomIn:(BOOL)a1;
- (void)rotateEnclosingScrollViewToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)saveStateToHistoryItem:(id)a0 forWebView:(id)a1;
- (struct { double x0; double x1; double x2; })scalesForContainerSize:(struct CGSize { double x0; double x1; })a0;
- (void)scrollToPageNumber:(long long)a0 animate:(BOOL)a1;
- (void)updateBoundariesOfScrollView:(id)a0 withScales:(struct { double x0; double x1; double x2; })a1;
- (void)updatePageNumberLabelWithUserScrolling:(BOOL)a0 animated:(BOOL)a1;
- (void)updateViewHierarchyForDocumentViewLoadComplete:(id)a0;
- (void)updateViewHierarchyForDocumentViewNewLoad:(id)a0;
- (void)updateViewHierarchyForDocumentViewTabSwitch:(id)a0;
- (void)updateViewHierarchyForDocumentViewTabSwitch:(id)a0 restoringZoomScale:(double)a1 andScrollPt:(struct CGPoint { double x0; double x1; })a2;
- (void)updateViewHierarchyForFirstNonEmptyLayoutInFrame:(id)a0;
- (void)updateViewSettings;
- (void)userDidEnterPassword:(id)a0 forPasswordView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleContentRect;
- (double)zoomedDocumentScale;

@end

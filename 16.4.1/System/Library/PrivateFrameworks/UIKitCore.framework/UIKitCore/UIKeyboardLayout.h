@class NSUUID, NSMutableDictionary, _UIKBRTTouchVelocities, UIKeyboardTypingStyleEstimator, NSObject, UIKeyboardTaskQueue, UIEvent, _UIKBRTFingerDetection, UIKBScreenTraits, _UIKBRTTouchDrifting, NSString, UIKBTextEditingTraits, NSMutableArray, NSMutableSet, UITextInputTraits, _UIKBRTRecognizer, UIKBCadenceMonitor, _UIScreenEdgePanRecognizer;
@protocol OS_dispatch_queue, UIKeyboardLayoutSizeDelegate;

@interface UIKeyboardLayout : UIView <_UIKBRTRecognizerDelegate, _UIKBRTTouchDriftingDelegate, _UIViewRepresentingKeyboardLayout, _UIScreenEdgePanRecognizerDelegate> {
    UITextInputTraits *_inputTraits;
    UIKBTextEditingTraits *_textEditingTraits;
    NSMutableArray *_uncommittedTouchUUIDs;
    UIKeyboardTaskQueue *_taskQueue;
    UIKeyboardTypingStyleEstimator *_typingStyleEstimator;
    UIEvent *_currentTouchDownEvent;
}

@property (retain, nonatomic) _UIScreenEdgePanRecognizer *screenEdgePanRecognizer;
@property (retain, nonatomic) _UIKBRTRecognizer *handRestRecognizer;
@property (retain, nonatomic) _UIKBRTFingerDetection *fingerDetection;
@property (retain, nonatomic) _UIKBRTTouchDrifting *touchDrifting;
@property (retain, nonatomic) UIKBCadenceMonitor *cadenceMonitor;
@property (retain, nonatomic) _UIKBRTTouchVelocities *touchVelocities;
@property (copy, nonatomic) id /* block */ deferredTouchDownTask;
@property (copy, nonatomic) id /* block */ deferredTouchMovedTask;
@property (retain, nonatomic) NSMutableDictionary *deferredTouchTaskLists;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *deferredTouchTaskListsQueue;
@property (retain, nonatomic) NSMutableSet *touchIgnoredUUIDSet;
@property (nonatomic) BOOL isExecutingDeferredTouchTasks;
@property (nonatomic) double lastTouchUpTime;
@property (nonatomic) BOOL listeningForWillChange;
@property (nonatomic) BOOL listeningForDidChange;
@property (retain, nonatomic) UIKeyboardTaskQueue *taskQueue;
@property (retain, nonatomic) NSUUID *activeTouchUUID;
@property (retain, nonatomic) NSUUID *shiftKeyTouchUUID;
@property (readonly, nonatomic) long long orientation;
@property (readonly, nonatomic) long long idiom;
@property (readonly, nonatomic) BOOL isFloating;
@property (nonatomic) BOOL hideKeysUnderIndicator;
@property (retain, nonatomic) NSString *layoutTag;
@property (readonly, nonatomic) double timestampOfLastTouchesEnded;
@property (copy, nonatomic) id /* block */ deferredTaskForActiveTouch;
@property (readonly, nonatomic) UIKeyboardTypingStyleEstimator *typingStyleEstimator;
@property (readonly, nonatomic) UIEvent *currentTouchDownEvent;
@property (nonatomic) BOOL ignoringKeyplaneChange;
@property (weak, nonatomic) id<UIKeyboardLayoutSizeDelegate> sizeDelegate;
@property (retain, nonatomic) UIKBScreenTraits *screenTraits;
@property (nonatomic) unsigned long long cursorLocation;
@property (nonatomic) BOOL disableInteraction;
@property (nonatomic) double preferredHeight;
@property (readonly, nonatomic) BOOL hasPreferredHeight;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (Class)_subclassForScreenTraits:(id)a0;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInputMode:(id)a0 screenTraits:(id)a1 keyboardType:(long long)a2;
+ (BOOL)_showSmallDisplayKeyplane;

- (void)acceptRecentInputIfNecessary;
- (BOOL)_shouldAllowKeyboardHandlingForTouchesEndedOrCancelled:(id)a0 withEvent:(id)a1;
- (void)setRenderConfig:(id)a0;
- (void)setTwoFingerTapTimestamp:(double)a0;
- (void)recognizerBlockUntilTaskQueueReadyForceUsingDeferredTask:(BOOL)a0;
- (double)flickDistance;
- (BOOL)isResizing;
- (id)_keyboardLongPressInteractionRegions;
- (void)didCommitTouchState:(id)a0;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (void)didClearInput;
- (void)_updateTouchState:(id)a0 errorVector:(struct CGPoint { double x0; double x1; })a1 rowOffsetFromHomeRow:(long long)a2;
- (unsigned char)getHandRestRecognizerState;
- (void)updateTouchProcessingForKeyboardChange;
- (void)_addTouchToScreenEdgePanRecognizer:(id)a0;
- (BOOL)isPossibleToTypeFast;
- (long long)currentHandBias;
- (unsigned long long)_uikbrtTouchDrifting:(id)a0 fingerIDFortouchIdentifier:(id)a1;
- (void)showKeyboardWithInputTraits:(id)a0 screenTraits:(id)a1 splitTraits:(id)a2;
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)a0;
- (void)_enumerateDeferredTouchUUIDs:(id)a0 withBlock:(id /* block */)a1;
- (id /* block */)touchChangedTaskForTouchState:(id)a0;
- (void)recognizer:(id)a0 cancelTouchOnLayoutWithId:(id)a1 startPoint:(struct CGPoint { double x0; double x1; })a2 endPoint:(struct CGPoint { double x0; double x1; })a3 whenReady:(id /* block */)a4;
- (void)recognizer:(id)a0 continueTrackingIgnoredTouchWithId:(id)a1 currentPoint:(struct CGPoint { double x0; double x1; })a2 whenReady:(id /* block */)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)a0;
- (BOOL)performSpaceAction;
- (id)simulateTouchForCharacter:(id)a0 errorVector:(struct CGPoint { double x0; double x1; })a1 shouldTypeVariants:(BOOL)a2 baseKeyForVariants:(BOOL)a3;
- (void)_removeTouchesFromProcessing:(id)a0;
- (void)deactivateActiveKeys;
- (void)_uikbrtTouchDriftingStateChanged:(id)a0;
- (struct CGSize { double x0; double x1; })stretchFactor;
- (void)commitTouchUUIDs:(id)a0 cancelInsteadOfUp:(BOOL)a1;
- (BOOL)canProduceString:(id)a0;
- (struct CGPoint { double x0; double x1; })rightVirtualDriftOffset;
- (BOOL)usesAutoShift;
- (void)setLabel:(id)a0 forKey:(id)a1;
- (void)setKeyboardBias:(long long)a0;
- (id)keyplaneNamed:(id)a0;
- (id /* block */)touchUpTaskForTouchState:(id)a0;
- (BOOL)_shouldAllowKeyboardHandlingForTouchesMoved:(id)a0 withEvent:(id)a1;
- (id /* block */)touchDownTaskForTouchState:(id)a0;
- (void)touchesCancelled:(id)a0 withEvent:(id)a1;
- (id)_keyboardLayoutView;
- (BOOL)hasCandidateKeys;
- (id)activationIndicatorMask;
- (void)recognizer:(id)a0 restartTouchDownForTouchWithId:(id)a1 startingAt:(double)a2 atPoint:(struct CGPoint { double x0; double x1; })a3 currentPoint:(struct CGPoint { double x0; double x1; })a4 whenStateReady:(id /* block */)a5;
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)a0 clearingDimming:(BOOL)a1;
- (BOOL)performReturnAction;
- (BOOL)globeKeyDisplaysAsEmojiKey;
- (void)updateUndoKeyState;
- (void)preparePopupVariantsForKey:(id)a0 onKeyplane:(id)a1;
- (BOOL)supportsEmoji;
- (BOOL)isReachableDevice;
- (void)_ignoreTouchState:(id)a0;
- (BOOL)isShiftKeyPlaneChooser;
- (void)changeToKeyplane:(id)a0;
- (BOOL)hasActiveContinuousPathInput;
- (id)_uikbrtTouchDrifting:(id)a0 touchIdentifiersForFingerID:(unsigned long long)a1;
- (void)reloadKeyboardGestureRecognition;
- (BOOL)canForceTouchUUIDCommit:(id)a0 inWindow:(id)a1;
- (void)setRecentInputs:(id)a0;
- (void)recognizer:(id)a0 shouldContinueTrackingTouchWithId:(id)a1 startingAt:(double)a2 atPoint:(struct CGPoint { double x0; double x1; })a3 currentPoint:(struct CGPoint { double x0; double x1; })a4 forContinueState:(unsigned long long)a5 whenStateReady:(id /* block */)a6;
- (BOOL)isEmojiKeyplane;
- (void)touchCancelled:(id)a0 executionContext:(id)a1;
- (BOOL)_canAddTouchesToScreenGestureRecognizer:(id)a0;
- (BOOL)isHandwritingPlane;
- (BOOL)isGeometricShiftOrMoreKeyForTouch:(id)a0;
- (BOOL)supportsVirtualDrift;
- (id)activationIndicatorView;
- (BOOL)shouldMergeAssistantBarWithKeyboardLayout;
- (void)touchDown:(id)a0 executionContext:(id)a1;
- (struct CGPoint { double x0; double x1; })getCenterForKeyUnderRightIndexFinger;
- (void)didEndIndirectSelectionGesture;
- (void)fadeActivationIndicatorWithDuration:(double)a0 withDelay:(double)a1;
- (void)_setRequiresExclusiveTouch:(BOOL)a0;
- (void)_touchEndedProcessingForTouches:(id)a0;
- (id)touchUUIDsToCommitBeforeTouchUUID:(id)a0;
- (void)recognizer:(id)a0 beginTouchDownForTouchWithId:(id)a1 atPoint:(struct CGPoint { double x0; double x1; })a2 forBeginState:(unsigned long long)a3 whenStateReady:(id /* block */)a4;
- (BOOL)canMultitap;
- (void)touchDown:(id)a0;
- (void)restoreDefaultsForAllKeys;
- (void)setAction:(SEL)a0 forKey:(id)a1;
- (void)willBeginTrackpadModeForServerSideDictation;
- (void)cancelTouchesForTwoFingerTapGesture:(id)a0;
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)a0;
- (void)_executeDeferredTouchTasks;
- (void)recognizer:(id)a0 releaseTouchToLayoutWithId:(id)a1 startPoint:(struct CGPoint { double x0; double x1; })a2 endPoint:(struct CGPoint { double x0; double x1; })a3 whenReady:(id /* block */)a4;
- (void)commitTouchUUIDs:(id)a0;
- (void)restoreDefaultsForKey:(id)a0;
- (id)keyplaneForKey:(id)a0;
- (void)didMoveToWindow;
- (struct CGPoint { double x0; double x1; })_uikbrtTouchDrifting:(id)a0 touchCenterForFingerID:(unsigned long long)a1;
- (BOOL)keyplaneContainsEmojiKey;
- (id)getRomanAccentVariantsForString:(id)a0 inputMode:(id)a1 keyboardVariantIndludes:(int)a2;
- (BOOL)shouldFadeFromLayout;
- (void)touchesBegan:(id)a0 withEvent:(id)a1;
- (void)setTarget:(id)a0 forKey:(id)a1;
- (void)handRestRecognizerNotifyRestForBegin:(BOOL)a0 location:(struct CGPoint { double x0; double x1; })a1 timestamp:(double)a2 pathIndex:(int)a3 touchUUID:(id)a4 context:(id)a5;
- (void)setReturnKeyEnabled:(BOOL)a0 withDisplayName:(id)a1 withType:(int)a2;
- (BOOL)_allowContinuousPathUI;
- (id)baseKeyForString:(id)a0;
- (void)restoreFocusFromEntryPoint:(struct CGPoint { double x0; double x1; })a0;
- (id /* block */)touchCancelledTaskForTouchState:(id)a0 forResting:(BOOL)a1;
- (SEL)handlerForNotification:(id)a0;
- (BOOL)ignoresShiftState;
- (void)updateBackgroundCorners;
- (void)touchCancelled:(id)a0 forResting:(BOOL)a1 executionContext:(id)a2;
- (void)traitCollectionDidChange;
- (void)fadeWithInvocation:(id)a0;
- (BOOL)_shouldAllowKeyboardHandlingIfNecessaryForTouch:(id)a0 phase:(long long)a1 withTouchState:(id)a2 task:(id /* block */)a3;
- (double)biasedKeyboardWidthRatio;
- (BOOL)shouldAllowSelectionGestures:(BOOL)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 toBegin:(BOOL)a2;
- (id)_touchStateForTouch:(id)a0;
- (void)clearShiftIfNecessaryForEndedTouchState:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })dragGestureRectInView:(id)a0;
- (void)touchChanged:(id)a0 executionContext:(id)a1;
- (void)updateLocalizedKeys:(BOOL)a0;
- (void)_clearDeferredTouchTasks;
- (void)_resetFingerDetectionFromLayout;
- (void)touchDragged:(id)a0 executionContext:(id)a1;
- (struct CGPoint { double x0; double x1; })getCenterForKeyUnderLeftIndexFinger;
- (BOOL)_hasRelatedTouchesForTouchState:(id)a0;
- (void)setDisableTouchInput:(BOOL)a0;
- (BOOL)queryShouldNeverIgnoreTouchStateWithIdentifier:(id)a0 touchState:(id)a1 startPoint:(struct CGPoint { double x0; double x1; })a2 forRestingState:(unsigned long long)a3;
- (void)touchChanged:(id)a0;
- (void)setShift:(BOOL)a0;
- (BOOL)_shouldAllowKeyboardHandlingForTouchesBegan:(id)a0 withEvent:(id)a1;
- (void)clearTransientState;
- (void)setTextEditingTraits:(id)a0;
- (void)setAutoshift:(BOOL)a0;
- (void)didEndTrackpadModeForServerSideDictation;
- (void)setLongPressAction:(SEL)a0 forKey:(id)a1;
- (BOOL)isShiftKeyBeingHeld;
- (unsigned long long)textEditingKeyMask;
- (void)forceUpdatesForCommittedTouch;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)updateTouchProcessingForKeyplaneChange;
- (id /* block */)touchDraggedTaskForTouchState:(id)a0;
- (void)touchDragged:(id)a0;
- (void)commitTouches:(id)a0 executionContext:(id)a1;
- (void)triggerSpaceKeyplaneSwitchIfNecessary;
- (void)setPasscodeOutlineAlpha:(double)a0;
- (void)screenEdgePanRecognizerStateDidChange:(id)a0;
- (void)touchUp:(id)a0;
- (double)hitBuffer;
- (BOOL)diacriticForwardCompose;
- (void)clearUnusedObjects:(BOOL)a0;
- (BOOL)shouldShowIndicator;
- (id)simulateTouch:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)hasAccentKey;
- (BOOL)canHandleEvent:(id)a0;
- (void)resetHRRLayoutState;
- (BOOL)handRestRecognizerShouldNeverIgnoreTouchState:(id)a0 fromPoint:(struct CGPoint { double x0; double x1; })a1 toPoint:(struct CGPoint { double x0; double x1; })a2 forRestingState:(unsigned long long)a3 otherRestedTouchLocations:(id)a4;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplanePadding;
- (void)touchesEstimatedPropertiesUpdated:(id)a0;
- (id)candidateList;
- (void)touchUp:(id)a0 executionContext:(id)a1;
- (id /* block */)handRestRecognizerSilenceNextTouchDown;
- (BOOL)isKanaPlane;
- (BOOL)isAlphabeticPlane;
- (void)longPressAction;
- (void)setNeedsVirtualDriftUpdate;
- (void)recognizer:(id)a0 willIgnoreTouchWithId:(id)a1 startingAt:(double)a2 atPoint:(struct CGPoint { double x0; double x1; })a3 currentPoint:(struct CGPoint { double x0; double x1; })a4 whenReady:(id /* block */)a5;
- (void)willBeginIndirectSelectionGesture;
- (void)reloadKeyboardWithInputTraits:(id)a0 screenTraits:(id)a1 splitTraits:(id)a2;
- (BOOL)keyplaneContainsDismissKey;
- (BOOL)shouldFadeToLayout;
- (void)touchCancelled:(id)a0;
- (void)touchesMoved:(id)a0 withEvent:(id)a1;
- (BOOL)showsDedicatedEmojiKeyAlongsideGlobeButton;
- (struct CGSize { double x0; double x1; })handRestRecognizerStandardKeyPixelSize;
- (BOOL)_handRestRecognizerCancelShouldBeEnd;
- (void)resetTouchProcessingForKeyboardChange;
- (id)currentKeyplane;
- (void)assertSavedLocation:(struct CGPoint { double x0; double x1; })a0 onTouch:(id)a1 inWindow:(id)a2 resetPrevious:(BOOL)a3;
- (void)willMoveToWindow:(id)a0;
- (unsigned long long)fingerIDForTouchUUID:(id)a0;
- (BOOL)isResized;
- (struct CGPoint { double x0; double x1; })leftVirtualDriftOffset;
- (void)dealloc;
- (void)touchesEnded:(id)a0 withEvent:(id)a1;
- (void).cxx_destruct;

@end

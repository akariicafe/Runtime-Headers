@class NSDate, NSString, NSURL, BRMangledID, NSSet, NSData, NSDictionary, NSObject, NSNumber, NSPurgeableData;
@protocol OS_dispatch_queue;

@interface BRContainer : NSObject <NSSecureCoding> {
    BRMangledID *_mangledID;
    NSURL *_url;
    NSSet *_bundleIDs;
    NSDictionary *_bundleIDVersions;
    NSString *_localizedName;
    NSSet *_documentsTypes;
    NSSet *_exportedTypes;
    NSSet *_importedTypes;
    NSDictionary *_iconMetadata;
    NSDictionary *_iconURLs;
    NSNumber *_iconGeneratorVersion;
    BOOL _isObservingOverQuota;
    BOOL _isOverQuota;
    NSNumber *_isDocumentScopePublicAsNumber;
    BOOL _isObservingLastServerUpdate;
    NSDate *_lastServerUpdate;
    BOOL _isObservingCurrentStatus;
    unsigned int _currentStatus;
    NSData *_imageSandboxExtension;
    BOOL _shouldUsePurgeableData;
    NSData *_dataRepresentation;
    NSPurgeableData *_purgeableDataRepresentation;
    NSObject<OS_dispatch_queue> *_observationSetupQueueForDefaultConnection;
    NSObject<OS_dispatch_queue> *_observationSetupQueueForSecondaryConnection;
    NSString *_personaID;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly) NSDate *lastServerUpdate;
@property (readonly) unsigned int currentStatus;
@property (retain) NSDate *lastServerUpdate;
@property unsigned int currentStatus;
@property (readonly, getter=isOverQuota) BOOL overQuota;
@property (getter=isOverQuota) BOOL overQuota;
@property (nonatomic) BOOL isCloudSyncTCCDisabled;
@property (nonatomic) BOOL isInInitialState;
@property (nonatomic) BOOL isInCloudDocsZone;
@property (readonly, copy, nonatomic) NSSet *bundleIdentifiers;
@property (readonly, nonatomic) NSString *identifier;
@property (readonly, nonatomic) NSString *localizedName;
@property (readonly, nonatomic) BOOL isDocumentScopePublic;
@property (readonly, nonatomic) NSString *supportedFolderLevels;
@property (readonly, nonatomic) NSURL *url;
@property (readonly, nonatomic) NSURL *documentsURL;
@property (readonly, nonatomic) NSURL *trashURL;
@property (readonly, nonatomic) NSSet *documentsTypes;
@property (readonly, nonatomic) NSSet *exportedTypes;
@property (readonly, nonatomic) NSSet *importedTypes;

+ (void)initialize;
+ (id)containersRepositoryURL;
+ (id)localizedNameForDocumentsContainer;
+ (id)_importedTypesWithProperties:(id)a0;
+ (void)_generateiOSIconsForMangledID:(id)a0 usingBundle:(struct __CFBundle { } *)a1 generatedIcons:(id)a2;
+ (id)_isDocumentScopePublicAsNumberWithProperties:(id)a0 mangledID:(id)a1;
+ (void)unregisterCurrentProcessAsPriorityHint;
+ (id)_localizedNameWithProperties:(id)a0 mangledID:(id)a1;
+ (id)localizedNameForDefaultCloudDocsContainer;
+ (void)postContainerListUpdateNotification;
+ (id)containerInRepositoryURL:(id)a0 error:(id *)a1;
+ (id)classesForDecoding;
+ (BOOL)isDocumentScopePublicWithProperties:(id)a0 mangledID:(id)a1;
+ (id)_iconGeneratorVersionWithProperties:(id)a0;
+ (id)containerInRepositoryURL:(id)a0 createIfMissing:(BOOL)a1 error:(id *)a2;
+ (id)_bundleIDsWithProperties:(id)a0;
+ (void)postContainerStatusChangeNotificationWithID:(id)a0 key:(id)a1 value:(id)a2;
+ (id)propertiesForMangledID:(id)a0 usingBundle:(struct __CFBundle { } *)a1 minimumBundleVersion:(id)a2 bundleIcons:(id *)a3;
+ (id)allContainers;
+ (id)_containerRepositoryURLForMangledID:(id)a0;
+ (id)localizedNameForDesktopContainer;
+ (BOOL)canMoveFilesWithoutDownloadingFromContainer:(id)a0 toContainer:(id)a1;
+ (id)_localizedNameWithProperties:(id)a0 mangledID:(id)a1 preferredLanguages:(id)a2;
+ (id)_URLForPlistOfMangledID:(id)a0;
+ (id)bundlePropertyEnumerator:(id)a0 valuesOfClass:(Class)a1 forProperties:(id)a2;
+ (id)containerForItemAtURL:(id)a0 error:(id *)a1;
+ (id)documentContainers;
+ (id)documentsContainersInBackupHomeAtURL:(id)a0 error:(id *)a1;
+ (void)forceRefreshContainers:(id)a0 completion:(id /* block */)a1;
+ (id)_documentsTypesWithProperties:(id)a0;
+ (id)_bundleIDVersionsWithProperties:(id)a0 mangledID:(id)a1;
+ (id)containerForMangledID:(id)a0;
+ (id)_exportedTypesWithProperties:(id)a0;
+ (id)_iconURLsWithProperties:(id)a0 mangledID:(id)a1;
+ (void)forceRefreshAllContainersWithCompletion:(id /* block */)a0;
+ (id)allContainersByContainerID;
+ (id)allContainersBlockIfNeeded:(BOOL)a0;
+ (id)bundleIdentifiersEnumeratorForProperties:(id)a0;
+ (id)_iconMetadataWithProperties:(id)a0;
+ (id)_sanitizedContainerFallbackNameForMangledID:(id)a0;
+ (id)_pathForIconName:(id)a0 mangledID:(id)a1;
+ (BOOL)versionOfBundle:(id)a0 changedFromVersion:(id)a1;

- (void)forceRefreshWithCompletion:(id /* block */)a0;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)shortDescription;
- (id)description;
- (void).cxx_destruct;
- (id)iconMetadata;
- (id)iconURLs;
- (id)_containerRepositoryURL;
- (id)_imageDataForSize:(struct CGSize { double x0; double x1; })a0 scale:(long long)a1 isiOSIcon:(BOOL *)a2 shouldTransformToAppIcon:(BOOL *)a3;
- (id)_pathForIconName:(id)a0;
- (id)_pathForPlist;
- (void)_performWhileAccessingSecurityScopedContainer:(id /* block */)a0;
- (void)_replaceDataRepresentationWithData:(id)a0;
- (BOOL)_updateMetadataOnDiskWithProperties:(id)a0;
- (void)accessDataRepresentationInBlock:(id /* block */)a0;
- (void)accessPropertiesInBlock:(id /* block */)a0;
- (id)bestFittingImageDataForSize:(struct CGSize { double x0; double x1; })a0 shouldTransformToAppIcon:(BOOL *)a1;
- (id)bundleIDVersions;
- (id)computedProperties;
- (BOOL)containsExcludedDocumentsOnTheFSWithExcludedButPreservedFilename:(id)a0 excludedButPreservedExtensions:(id)a1 andStampUploadedAppWithXattr:(BOOL)a2;
- (id)copyDataRepresentation;
- (BOOL)deleteAllContentsOnClientAndServer:(id *)a0;
- (BOOL)deleteAllContentsOnClientAndServer:(BOOL)a0 error:(id *)a1;
- (BOOL)hasIconWithName:(id)a0;
- (id)iconGeneratorVersion;
- (id)imageDataForSize:(struct CGSize { double x0; double x1; })a0 scale:(long long)a1;
- (id)imageDataForSize:(struct CGSize { double x0; double x1; })a0 scale:(long long)a1 isiOSIcon:(BOOL *)a2;
- (id)imageDataForSize:(struct CGSize { double x0; double x1; })a0 scale:(long long)a1 shouldTransformToAppIcon:(BOOL *)a2;
- (id)imageRepresentationsAvailable;
- (id)initWithDocsOrDesktopContainerID:(id)a0;
- (id)initWithMangledID:(id)a0;
- (id)initWithMangledID:(id)a0 dataRepresentation:(id)a1;
- (id)localizedNameWithPreferredLanguages:(id)a0;
- (BOOL)registerCurrentProcessAsPriorityHintWithError:(id *)a0;
- (id)trashRestoreStringForURL:(id)a0;
- (BOOL)updateMetadataWithExtractorProperties:(id)a0 iconPaths:(id)a1 bundleID:(id)a2;
- (BOOL)updateMetadataWithRecordData:(id)a0 iconPaths:(id)a1;
- (id)versionNumberForBundleIdentifier:(id)a0;

@end

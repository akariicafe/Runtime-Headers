@class UIView, NSString, UIImage, _UILegibilitySettings, NSTimer, PBUIWallpaperPrototypeSettings, _UILegibilitySettingsProvider, PBUIWallpaperParallaxSettings, UIColor;
@protocol PBUIWallpaperViewDelegate, PBUILegibilitySettingsProviderDelegate, PBUIWallpaperViewInternalObserver;

@interface PBUIWallpaperView : UIView <PTSettingsKeyObserver, PBUILegibilitySettingsProvider> {
    PBUIWallpaperPrototypeSettings *_wallpaperSettings;
    UIView *_parallaxView;
    double _contentScaleFactor;
    _UILegibilitySettingsProvider *_legibilitySettingsProvider;
    _UILegibilitySettings *_legibilitySettings;
    UIColor *_lastAverageColor;
    NSTimer *_colorSampleTimer;
    BOOL _shouldGenerateBlurredImagesWhenVisible;
    BOOL _generatingBlurredImages;
    PBUIWallpaperParallaxSettings *_parallaxSettings;
    BOOL _wantsRasterization;
    long long _disallowRasterizationBlockCount;
}

@property (retain, nonatomic) UIImage *untreatedWallpaperImage;
@property (readonly, copy, nonatomic) NSString *cacheGroup;
@property (readonly, copy, nonatomic) NSString *variantCacheIdentifier;
@property (readonly, copy, nonatomic) NSString *cacheUniqueIdentifier;
@property (weak, nonatomic) id<PBUIWallpaperViewInternalObserver> internalObserver;
@property (readonly, nonatomic) BOOL needsImmediateLayoutBeforeRotation;
@property (retain, nonatomic) UIView *contentView;
@property (nonatomic) long long variant;
@property (readonly, nonatomic) long long wallpaperType;
@property (readonly, nonatomic) long long wallpaperMode;
@property (readonly, nonatomic) BOOL needsWallpaperDimmingTreatment;
@property (weak, nonatomic) id<PBUIWallpaperViewDelegate> wallpaperDelegate;
@property (readonly, nonatomic) UIImage *wallpaperImage;
@property (nonatomic) double zoomFactor;
@property (nonatomic) BOOL parallaxEnabled;
@property (nonatomic) double parallaxFactor;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } cropRect;
@property (readonly, nonatomic) double cropZoomScale;
@property (readonly, nonatomic) BOOL supportsCropping;
@property (nonatomic) BOOL continuousColorSamplingEnabled;
@property (nonatomic) BOOL wallpaperAnimationEnabled;
@property (nonatomic, getter=isRotating) BOOL rotating;
@property (readonly, copy, nonatomic) NSString *wallpaperName;
@property (readonly, nonatomic) BOOL hasVideo;
@property (readonly, nonatomic, getter=isContentStatic) BOOL contentStatic;
@property (readonly, nonatomic) BOOL handlesInactiveAppearanceTreatment;
@property (nonatomic) BOOL sharesContentsAcrossVariants;
@property (readonly, nonatomic) BOOL hasContentOutsideVisibleBounds;
@property (nonatomic) unsigned long long transformOptions;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) _UILegibilitySettings *legibilitySettings;
@property (weak, nonatomic) id<PBUILegibilitySettingsProviderDelegate> delegate;

+ (BOOL)allowsParallax;
+ (BOOL)_shouldScaleForParallax;
+ (Class)wallpaperViewClassForConfiguration:(id)a0;
+ (Class)wallpaperViewClassForWallpaperType:(long long)a0;
+ (BOOL)_allowsRasterization;

- (id)_generateImageFromImage:(id)a0 forBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a1 includeTint:(BOOL)a2 traitCollection:(id)a3;
- (id)_material_generateImageFromImage:(id)a0 forBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a1 traitCollection:(id)a2;
- (void)_updateScaleFactor;
- (void)setVariant:(long long)a0 withAnimationFactory:(id)a1;
- (void)setGeneratesBlurredImages:(BOOL)a0;
- (id)_computeAverageColor;
- (void)_setLegibilitySettings:(id)a0 notify:(BOOL)a1;
- (id)snapshotImage;
- (id)_blurredImageURL;
- (id)averageColorInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 withSmudgeRadius:(double)a1;
- (void)_updateParallax;
- (void)_endDisallowRasterizationBlock;
- (void)_beginDisallowRasterizationBlock;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 configuration:(id)a1 variant:(long long)a2 cacheGroup:(id)a3 delegate:(id)a4 options:(unsigned long long)a5;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 zoomScale:(double)a1;
- (double)_contrastInContentViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 contrastWithinBoxes:(double *)a1 contrastBetweenBoxes:(double *)a2;
- (id)_imageURLForBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a0 includeTint:(BOOL)a1 overrideTraitCollection:(id)a2;
- (void)_updateContentViewScale;
- (void)resetLegibilitySettingsForAverageColor:(id)a0;
- (id)blurredImage;
- (void)_handleVariantChange;
- (void)_addParallax;
- (id)_blurredImage;
- (double)contrastInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setLegibilitySettings:(id)a0;
- (void)_applyParallaxSettings;
- (double)contentScaleFactor;
- (id)imageForBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a0 includeTint:(BOOL)a1 overrideTraitCollection:(id)a2;
- (void)_notifyBlursInvalidated;
- (BOOL)_dontUseShadow;
- (void)preheatImageData;
- (double)contrast;
- (void)_startGeneratingBlurredImages;
- (id)_imageForBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a0 includeTint:(BOOL)a1 overrideTraitCollection:(id)a2;
- (void)updateLegibilitySettingsForAverageColor:(id)a0;
- (BOOL)isDisplayingWallpaperWithConfiguration:(id)a0 forVariant:(long long)a1;
- (id)_averageColorInContentViewRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 smudgeRadius:(double)a1;
- (void)didMoveToWindow;
- (void)prepareToDisappear;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_updateLegibilitySettingsForAverageColor:(id)a0 force:(BOOL)a1 notify:(BOOL)a2;
- (id)_primaryColorOverride;
- (id)_backdrop_generateImageFromImage:(id)a0 forBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a1 includeTint:(BOOL)a2 traitCollection:(id)a3;
- (id)snapshotImageURL;
- (void)legibilitySettingsDidChange;
- (id)_cacheKeyForParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a0 includingTint:(BOOL)a1 downsampleFactor:(double)a2 traitCollection:(id)a3;
- (BOOL)_isVisible;
- (BOOL)_needsFallbackImageForBackdropGeneratedImage:(id)a0;
- (double)contrastInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 contrastWithinBoxes:(double *)a1 contrastBetweenBoxes:(double *)a2;
- (void)prepareToAppear;
- (void)setZoomFactor:(double)a0 withAnimationFactory:(id)a1;
- (BOOL)_isParallaxEnabled;
- (id)_displayedImage;
- (void)_removeParallax;
- (void)_stopGeneratingBlurredImages;
- (void)setHidden:(BOOL)a0;
- (void)_updateRasterizationState;
- (id)imageURLForBackdropParameters:(struct { long long x0; long long x1; long long x2; double x3; double x4; double x5; double x6; long long x7; })a0 includeTint:(BOOL)a1 overrideTraitCollection:(id)a2;
- (void)_updateGeneratingBlurs;
- (BOOL)_isParallaxActive;
- (BOOL)wantsRasterization;
- (id)blurredImageURL;
- (void)_handleVisibilityChange;
- (id)_fallbackImageWithOriginalSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_isParallaxMotionEnabled;
- (void)dealloc;
- (void)settings:(id)a0 changedValueForKey:(id)a1;
- (void)layoutSubviews;
- (void)invalidate;
- (void).cxx_destruct;

@end

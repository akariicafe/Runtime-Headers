@protocol LMTrialDataSource;

@interface LMTrial : NSObject {
    struct map<std::string, std::optional<LM::TrialParameters>, std::less<std::string>, std::allocator<std::pair<const std::string, std::optional<LM::TrialParameters>>>> { struct __tree<std::__value_type<std::string, std::optional<LM::TrialParameters>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::optional<LM::TrialParameters>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::optional<LM::TrialParameters>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::optional<LM::TrialParameters>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::optional<LM::TrialParameters>>, std::less<std::string>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } trialParametersByLocaleIdentifier;
}

@property (readonly) id<LMTrialDataSource> dataSource;

+ (id)sharedInstance;
+ (id)encodeTrialParameters:(struct optional<LM::TrialParameters> { union { char x0; struct TrialParameters { struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x0; struct __short { char x0[23]; unsigned char x1[0]; unsigned char x2 : 7; unsigned char x3 : 1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; } x0; struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> { unsigned long long x0; } x2; } x0; } x1; } x1; } x0; BOOL x1; })a0;

- (id)encodedTrialParametersForLocale:(id)a0;
- (void)handleUpdatedTrialParameters:(struct optional<LM::TrialParameters> { union { char x0; struct TrialParameters { struct path { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x0; struct __short { char x0[23]; unsigned char x1[0]; unsigned char x2 : 7; unsigned char x3 : 1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; } x0; struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> { unsigned long long x0; } x2; } x0; } x1; } x1; } x0; BOOL x1; })a0 forLocaleIdentifier:(const void *)a1;
- (id).cxx_construct;
- (id)initWithDataSource:(id)a0;
- (id)init;
- (void)start;
- (void).cxx_destruct;

@end

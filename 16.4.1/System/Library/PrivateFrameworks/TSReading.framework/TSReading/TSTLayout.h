@class TSWPPadding, TSTLayoutSpaceBundle, TSTTableInfo, TSTMasterLayout, NSString, TSTEditingState, TSWPLayout, TSTLayoutHint, TSTTableModel;

@interface TSTLayout : TSWPTextHostLayout <TSKSearchTarget, TSWPColumnMetrics, TSWPLayoutParent, TSWPStorageObserver> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCanvasVisibleRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mPreviousVisibleStrokeFrame;
    BOOL mTabsVisible;
    BOOL mTableNameVisibilityIsValid;
    BOOL mTableNameVisible;
    struct { double tableNameHeight; struct CGSize { double width; double height; } scaleToFitParent; struct CGSize { double width; double height; } scaleToFitEnclosingTextColumn; } mCached;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mRenderingFrameForLayoutGeometryFromInfo;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mComputedEditingCellContentFrame;
    unsigned int mCachedVerticalAlignmentForEditingCell;
    struct CGSize { double width; double height; } mTableSizeWithoutStrokes;
    struct CGSize { double width; double height; } mStrokeDelta;
    struct CGSize { double width; double height; } mCapturedStrokeFrameSizeForInline;
    unsigned int mContainedTextEditorParagraphAlignment;
    BOOL mContainedTextEditorTextWraps;
    BOOL mContainedTextEditorSpills;
    struct CGSize { double width; double height; } mSpillingTextSize;
    int mCoordinatesChangedMaskForChrome;
}

@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSTTableModel *tableModel;
@property (retain, nonatomic) TSTMasterLayout *masterLayout;
@property (retain, nonatomic) TSTLayoutHint *layoutHint;
@property (retain, nonatomic) TSTLayoutSpaceBundle *spaceBundle;
@property (nonatomic) BOOL processChangesFiltering;
@property (readonly, nonatomic) TSTEditingState *editingState;
@property (nonatomic) BOOL newCanvasRevealedHorizontally;
@property (nonatomic) BOOL newCanvasRevealedVertically;
@property (readonly, nonatomic) BOOL layoutDirectionIsLeftToRight;
@property (nonatomic) struct CGSize { double x0; double x1; } scaleToFit;
@property (retain, nonatomic) TSWPLayout *containedTextEditingLayout;
@property (readonly, nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } paddingForEditingCell;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } computedEditingCellContentFrame;
@property (readonly, nonatomic) struct { struct { unsigned short row; unsigned char column; unsigned char reserved; } origin; struct { unsigned short numberOfColumns; unsigned short numberOfRows; } size; } editingSpillingTextRange;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } adjustedInsets;
@property (readonly, nonatomic) TSWPPadding *layoutMargins;
@property (readonly, nonatomic) unsigned long long columnCount;
@property (readonly, nonatomic) BOOL alwaysStartsNewTarget;
@property (readonly, nonatomic) BOOL shrinkTextToFit;
@property (readonly, nonatomic) BOOL columnsAreLeftToRight;
@property (readonly, nonatomic) double textScaleFactor;

- (void)validate;
- (id)initWithInfo:(id)a0;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })minimumSize;
- (void)setNeedsDisplay;
- (void)dealloc;
- (id)children;
- (void)invalidate;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(id)a0;
- (BOOL)supportsRotation;
- (BOOL)isBeingManipulated;
- (void)invalidateSize;
- (unsigned int)verticalAlignmentForTextLayout:(id)a0;
- (struct CGSize { double x0; double x1; })initialTextSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nonAutosizedFrameForTextLayout:(id)a0;
- (unsigned int)autosizeFlagsForTextLayout:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })autosizedFrameForTextLayout:(id)a0 textSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGPoint { double x0; double x1; })capturedInfoPositionForAttachment;
- (id)computeLayoutGeometry;
- (id)dependentsOfTextLayout:(id)a0;
- (double)gapForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1;
- (BOOL)inFindReplaceMode;
- (BOOL)inPrintPreviewMode;
- (void)invalidateForAutosizingTextLayout:(id)a0;
- (id)layoutGeometryFromInfo;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maskRectForTextLayout:(id)a0;
- (double)maxAutoGrowWidthForTextLayout:(id)a0;
- (unsigned int)naturalAlignmentForTextLayout:(id)a0;
- (double)positionForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1 outWidth:(double *)a2 outGap:(double *)a3;
- (Class)repClassForTextLayout:(id)a0;
- (BOOL)textIsVertical;
- (void)updateChildrenFromInfo;
- (double)widthForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1;
- (int)wrapFitType;
- (BOOL)isZoomedEditing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_computeSpillingTextFrameForLayout:(id)a0 textSize:(struct CGSize { double x0; double x1; })a1 editingSpillRange:(struct { struct { unsigned short x0; unsigned char x1; unsigned char x2; } x0; struct { unsigned short x0; unsigned short x1; } x1; } *)a2;
- (BOOL)p_getLayoutDirectionLeftToRight;
- (void)processChanges:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrameForProvidingGuidesInRoot;
- (void)bezierPathsForCellRegion:(id)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 viewScale:(double)a2 inset:(double)a3 block:(id /* block */)a4;
- (struct CGPoint { double x0; double x1; })calculatePointFromSearchReference:(id)a0;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (BOOL)canRotateChildLayout:(id)a0;
- (id)childSearchTargets;
- (id)dependentLayouts;
- (struct CGPoint { double x0; double x1; })infoGeometryPositionForCurrentAttachedLayoutGeometry;
- (id)initWithInfo:(id)a0 layoutHint:(id)a1;
- (id)initialInfoGeometry;
- (void)invalidateTableNameVisibility;
- (void)layoutSearchForAnnotationWithHitBlock:(id /* block */)a0;
- (void)layoutSearchForSpellingErrorsWithHitBlock:(id /* block */)a0 stop:(BOOL *)a1;
- (void)layoutSearchForString:(id)a0 options:(unsigned long long)a1 hitBlock:(id /* block */)a2;
- (void)offsetGeometryBy:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)orderedBefore:(id)a0;
- (unsigned int)p_defaultAlignmentForTableWritingDirection;
- (BOOL)p_layoutWhollyContainsGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned int)p_naturalAlignmentForCellID:(struct { unsigned short x0; unsigned char x1; unsigned char x2; })a0;
- (void)p_processChange:(id)a0 forChangeSource:(id)a1 actions:(id)a2;
- (void)p_processChangeActions:(id)a0;
- (struct CGSize { double x0; double x1; })p_rangeUpAndLeftOfIntersectionRangeOfGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)p_updateCachedStyleInformationFromCellID:(struct { unsigned short x0; unsigned char x1; unsigned char x2; })a0;
- (int)reapCoordinatesChangedMaskForChrome;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForPresentingAnnotationPopoverForSelection:(id)a0;
- (void)removeContainedTextEditingLayout;
- (BOOL)resizeMayChangeAspectRatio;
- (void)setupContainedTextEditingLayout:(struct { unsigned short x0; unsigned char x1; unsigned char x2; })a0;
- (void)storage:(id)a0 didChangeRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 delta:(long long)a2 broadcastKind:(int)a3;
- (void)validateTableNameVisibility;
- (void)willBeAddedToLayoutController:(id)a0;
- (void)willBeRemovedFromLayoutController:(id)a0;

@end

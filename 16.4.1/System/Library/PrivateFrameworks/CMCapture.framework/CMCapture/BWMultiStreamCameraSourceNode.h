@class BWFigVideoCaptureStream, NSMutableDictionary, NSObject, BWPixelBufferPool, BWFigCaptureStream, BWDeferredMetadataCache, BWStats, NSDictionary, BWMultiStreamCameraSourceNodeConfiguration, BWFigVideoCaptureDevice, NSString, BWDetectedFacesRingBuffer, BWDetectedObjectsInfoRingBuffer, BWMotionDataPreserver, BWFigCaptureISPProcessingSession, NSArray, BWNodeOutput;
@protocol OS_dispatch_queue, BWDetectedFacesFilterDelegate;

@interface BWMultiStreamCameraSourceNode : BWSourceNode <BWFigVideoCaptureDeviceZoomFactorChangedDelegate> {
    BWFigVideoCaptureDevice *_captureDevice;
    BWFigCaptureStream *_stream;
    NSArray *_supportedFormats;
    BOOL _supportsDecouplingPrimaryScalerOnly;
    float _pixelsPerMicron;
    float _telePixelsPerMicron;
    BOOL _deferMetadataCreation;
    BWDeferredMetadataCache *_deferredMetadataCache;
    NSObject<OS_dispatch_queue> *_preAllocationQueue;
    BOOL _isInfraredSourceNode;
    int _deviceType;
    int _devicePosition;
    int _resolvedFormatIndex;
    struct opaqueCMFormatDescription { } *_depthOutputFormatDescription;
    NSString *_depthEnginePrimaryOutputID;
    BOOL _hardwareDepthFilteringSupported;
    BOOL _strictDepthModeSupported;
    BOOL _RGBIRStereoFusionMinDepthThresholdSupported;
    BOOL _RGBIRStereoFusionMaxDepthThresholdSupported;
    BOOL _RGBIRStereoFusionFixedDepthThresholdSupported;
    NSArray *_supportedDepthPixelFormats;
    struct opaqueCMFormatDescription { } *_focusPixelDataFormatDescription;
    BOOL _shareStreamingBufferPools;
    BOOL _provideStillImageSensorRawOutputBuffers;
    struct BWStreamOutputStorage { int type; unsigned int flags; BOOL ready; BOOL enabled; BWNodeOutput *nodeOutput; struct opaqueCMSimpleQueue *simpleQueue; NSObject<OS_dispatch_queue> *bufferServicingQueue; void /* function */ *bufferServicingQueueCallback; struct opaqueCMFormatDescription *cachedFormatDescription; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastEmittedPTS; int retainedBufferCount; int streamRetainedBufferCount; BWPixelBufferPool *internalPixelBufferPool; BOOL bufferPoolOwnedByAnotherNode; int bytesPerRowAlignmentRequirement; int planeAlignmentRequirement; unsigned int sensorInterfaceRawPixelFormat; unsigned int sashimiRawPixelFormat; unsigned int sushiRawPixelFormat; struct { int width; int height; } outputDimensions; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cropRect; float lastISPAppliedZoomFactor; BWStats *ioSurfaceCompressionRatioStats; int pixelBufferCompressionType; unsigned long long totalCompressedDataSize; unsigned long long totalUncompressedDataSize; unsigned long long lumaCompressionHistogram[16]; unsigned long long chromaCompressionHistogram[16]; unsigned int universalCompressionNumberOfSamples; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastUniversalCompressionSamplePTS; BOOL pixelFormatIsTenBit; BOOL pixelFormatIs420; BOOL pixelFormatIsLossyCompression; BOOL prefetchEnabled; } _outputsStorage[10];
    struct { double centerx; double centery; BOOL lensCoefficientsValid; float lensCoefficients[5]; float gravityFactor; float pixelsPerMicron; BOOL isFrontCamera; } _cameraData;
    BOOL _usePinholeCameraFocalLengthInIntrinsicMatrixCalculation;
    BWMotionDataPreserver *_motionDataPreserver;
    NSMutableDictionary *_dutyCycleMetadataCache;
    float _overscanReservedInISPZoom;
    NSString *_previewStreamOutputID;
    struct CGSize { double width; double height; } _previewOutputOverscan;
    NSDictionary *_previewOutputColorInfo;
    NSString *_videoCaptureStreamOutputID;
    NSDictionary *_videoCaptureOutputColorInfo;
    NSString *_stillImageStreamOutputID;
    int _firmwareStillImageOutputRetainedBufferCountOverride;
    int _currentFirmwareStillImageOutputRetainedBufferCount;
    struct CGSize { double width; double height; } _onDemandStillOverscan;
    BOOL _stillImageOutputSushiRawAttachmentOptionEnabled;
    NSDictionary *_stillImageOutputColorInfo;
    NSString *_stillImageSensorRawStreamOutputID;
    struct CGSize { double width; double height; } _onDemandStillSensorRawOverscan;
    BWFigCaptureISPProcessingSession *_bayerProcessingSession;
    struct OpaqueFigSampleBufferProcessor { } *_qrmSampleBufferProcessor;
    struct opaqueCMFormatDescription { } *_quadraStillOutputFormatDescription;
    struct opaqueCMSimpleQueue { } *_quadraYUVBufferQueue;
    BOOL _deferBayerProcessingSessionMetadataCreation;
    BWDetectedFacesRingBuffer *_detectedFacesRingBuffer;
    BWDetectedObjectsInfoRingBuffer *_detectedObjectsInfoRingBuffer;
    struct OpaqueVTPixelTransferSession { } *_stillReflectionTransferSession;
    struct opaqueCMFormatDescription { } *_stillReflectionFormatDescription;
    struct OpaqueVTPixelTransferSession { } *_stillReflectionSecondaryTransferSession;
    struct opaqueCMFormatDescription { } *_stillReflectionSecondaryFormatDescription;
    int _previousInfraredCaptureID;
    struct CGPoint { double x; double y; } _previewShift;
    float _previewScaleFactor;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _previewShiftLock;
    BWStats *_ioSurfaceCompressionRatioStatsForRaw;
    unsigned long long _totalCompressedDataSizeForRaw;
    unsigned long long _totalUncompressedDataSizeForRaw;
    unsigned int _bufferHeightForRaw;
    BOOL _rawCompressionEnabled;
    struct opaqueCMFormatDescription { } *_visionDataFormatDescription;
    BOOL _discardOutputSampleBuffers;
    BOOL _streamingOutputsEnabled;
    BOOL _adjustOpticalCenterMetadataForSuperWideFullFOV;
    struct CGPoint { double x; double y; } _opticalCenterAdjustmentForSuperWideFullFOV;
    BOOL _systemPressured;
    BOOL _enforceFinalCropRectBasedOnGDC;
    unsigned int _previewFrameRate;
    struct OpaqueVTHDRMetadataGenerationSession { } *_hdrMetadataSession;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastFramePTS;
}

@property (nonatomic) BOOL keepISPStreamingWhenStopping;
@property (readonly) BWMultiStreamCameraSourceNodeConfiguration *configuration;
@property (readonly) NSString *portType;
@property (readonly) BWFigVideoCaptureStream *captureStream;
@property (readonly) BWNodeOutput *previewOutput;
@property (readonly) BWNodeOutput *videoCaptureOutput;
@property (readonly) BWNodeOutput *stillImageOutput;
@property (readonly) BWNodeOutput *stillImageSensorRawOutput;
@property (readonly) BWNodeOutput *detectedObjectsOutput;
@property (readonly) BWNodeOutput *depthOutput;
@property (readonly) BWNodeOutput *pointCloudOutput;
@property (readonly, nonatomic) BOOL hardwareDepthFilteringEnabled;
@property (readonly, nonatomic) float geometricDistortionCorrectionStrengthOnStreamingOutputs;
@property (readonly, nonatomic) unsigned long long infraredProjectorUptimeInUsForLowPowerSparse;
@property (readonly, nonatomic) unsigned long long infraredProjectorUptimeInUsForHighPowerSparse;
@property (readonly, nonatomic) int colorSpaceProperties;
@property (readonly, nonatomic) struct { int width; int height; } firmwareStillImageDimensionsAfterOverscanCropping;
@property (readonly, nonatomic) struct { int width; int height; } ultraHighResSensorRawStillImageOutputDimensions;
@property (nonatomic) id<BWDetectedFacesFilterDelegate> detectedFacesFilterDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;

- (id)colorInfoForOutput:(id)a0;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)makeOutputsLiveIfNeeded;
- (id)nodeSubType;
- (struct OpaqueCMClock { } *)clock;
- (BOOL)start:(id *)a0;
- (int)configure:(id)a0;
- (void)setPreviewShift:(struct CGPoint { double x0; double x1; })a0 previewScaleFactor:(float)a1;
- (void)updateFormatRequirementsFromSourceNode:(id)a0;
- (id)initWithCaptureDevice:(id)a0 captureStream:(id)a1;
- (int)allocateOrReuseBufferPoolsFromSourceNode:(id)a0;
- (int)prepareForStillImageCaptureWithFirmwareStillImageOutputRetainedBufferCountOverride:(int)a0 clientBracketCount:(int)a1 enableSushiRawAttachmentOption:(BOOL)a2;
- (void)updateZoomFactorsToNondisruptiveSwitchingFormatIndexMapping;
- (void)requestedZoomFactorChanged:(float)a0;
- (void)dealloc;
- (void)didSelectFormat:(id)a0 forOutput:(id)a1;
- (BOOL)stop:(id *)a0;

@end

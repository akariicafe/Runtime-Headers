@class NSString, NSArray, VKARCameraController, VKGlobeCameraController;
@protocol VKInteractiveMapDelegate;

@interface VKClassicGlobeCanvas : VKScreenCanvas <GEOResourceManifestTileGroupObserver, VKInteractiveMap> {
    double _contentScale;
    struct AltitudeDebugSettings { BOOL altitudePauseLoading; BOOL altitudeFreezeViewNode; BOOL altitudeTexturePaging; BOOL altitudeShowTileBounds; BOOL altitudeThreadDrawing; BOOL altitudeMipmapSatellite; BOOL altitudeMipmapFlyover; BOOL altitudeMipmapObjectTree; BOOL altitudeShowNightLight; float lodScale; float tileQualityThreshold; float hideMeshTime; float fadeSpeed; BOOL tourSpeedup; float tourSpeedupFactor; } _debugSettings;
    struct unique_ptr<md::GlobeAdapter, std::default_delete<md::GlobeAdapter>> { struct __compressed_pair<md::GlobeAdapter *, std::default_delete<md::GlobeAdapter>> { struct GlobeAdapter *__value_; } __ptr_; } _globeAdapter;
    void *_renderer;
    struct shared_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer *__ptr_; struct __shared_weak_count *__cntrl_; } _overlayContainer;
    struct shared_ptr<ggl::FlyoverLibrary> { struct FlyoverLibrary *__ptr_; struct __shared_weak_count *__cntrl_; } _flyoverLibrary;
    BOOL _initialized;
    struct shared_ptr<bool> { BOOL *__ptr_; struct __shared_weak_count *__cntrl_; } _isDead;
    BOOL _isLoading;
    BOOL _isDownloading;
    BOOL _coarseLoading;
    BOOL _tourIsDownloading;
    void *_loadingStatusTracker;
    double _currentZoomLevel;
    BOOL _arRoadDisabledState;
    struct CGSize { double width; double height; } _lastCanvasSize;
}

@property (copy, nonatomic) id /* block */ sceneDidLoadCallback;
@property (weak, nonatomic) id<VKInteractiveMapDelegate> delegate;
@property (nonatomic) int mapType;
@property (nonatomic) BOOL trafficEnabled;
@property (readonly, nonatomic) int flyoverMode;
@property (readonly, nonatomic) VKGlobeCameraController *globeCameraController;
@property (readonly, nonatomic) VKARCameraController *arCameraController;
@property (readonly, nonatomic) BOOL flyoverAvailable;
@property (nonatomic) BOOL disableRoads;
@property (nonatomic) BOOL disableLabels;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *overlays;
@property (readonly, nonatomic) NSArray *visibleTileSets;

+ (BOOL)supportsMapType:(int)a0 scale:(int)a1;

- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)a0;
- (void)willDealloc;
- (void)didBecomeActive;
- (id)detailedDescription;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; })a0;
- (void)setContentsScale:(double)a0;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)a0;
- (void)stopLoading;
- (void)transitionToTracking:(BOOL)a0 mapMode:(long long)a1 startLocation:(struct { double x0; double x1; })a2 startCourse:(double)a3 cameraController:(id)a4 pounceCompletionHandler:(id /* block */)a5;
- (void)stopSnappingAnimations;
- (id).cxx_construct;
- (void)pauseFlyoverTourAnimation;
- (void)stopAnimations;
- (void)updateWithTimestamp:(double)a0 withContext:(void *)a1;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x0; double x1; })a0 highlightTarget:(unsigned char)a1;
- (void)_update;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)transferStateFromCanvas:(id)a0;
- (struct { double x0; double x1; })convertPointToCoordinate:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })convertCoordinateToCameraModelPoint:(struct { double x0; double x1; })a0;
- (BOOL)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })a0;
- (void)didBecomeInActive;
- (void)insertOverlay:(id)a0 aboveOverlay:(id)a1;
- (void)dealloc;
- (id)attributionsForCurrentRegion;
- (void)resumeFlyoverTourAnimation;
- (id)consoleString:(BOOL)a0;
- (struct { double x0; double x1; })convertPointToMapPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)addOverlay:(id)a0;
- (void)setMapType:(int)a0 animated:(BOOL)a1;
- (id)initWithMapEngine:(void *)a0 inBackground:(BOOL)a1;
- (id /* block */)annotationCoordinateTest;
- (struct CGPoint { double x0; double x1; })convertCoordinateToPoint:(struct { double x0; double x1; })a0;
- (void)didPresent;
- (void).cxx_destruct;
- (void)removeOverlay:(id)a0;
- (void)insertOverlay:(id)a0 belowOverlay:(id)a1;
- (struct CGPoint { double x0; double x1; })convertMapPointToPoint:(struct { double x0; double x1; })a0;
- (id /* block */)annotationRectTest;
- (void)updateCameraForFrameResize;
- (struct GlobeOverlayContainer { struct GlobeView *x0; id x1; struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x0; } x2; double x3; } *)overlayContainer;
- (void)prepareFlyoverAnimation:(id)a0 completion:(id /* block */)a1;
- (void)stopFlyoverAnimation;
- (void)_setDefaultFov:(float)a0;
- (struct CGPoint { double x0; double x1; })_centerScreenPoint;
- (const void *)_clientStyleState;
- (void)_reloadStylesheet;
- (const void *)_styleManager;
- (void)_updateDebugSettings;
- (struct { double x0; double x1; })convertPointToCoordinateOnSphere:(struct CGPoint { double x0; double x1; })a0;
- (id)createFlyoverPreTourAnimation:(id)a0 duration:(double)a1;
- (void)didReceiveMemoryWarning:(BOOL)a0 beAggressive:(BOOL)a1;
- (void)disableFlyoverStatistics;
- (void)disableTileAnalytics;
- (void)enableFlyoverStatistics;
- (void)enableTileAnalytics;
- (void)enterARSessionAtCoordinate:(struct { double x0; double x1; })a0;
- (void)exitARSession;
- (id)flyoverStatistics;
- (void)resetFlyoverStatistics;
- (void)setupMapScene;
- (void)startFlyoverAnimation:(id)a0 animateToStart:(BOOL)a1 labelChanged:(id /* block */)a2 stateChange:(id /* block */)a3;
- (void)startFlyoverTourAnimation:(unsigned long long)a0 animateToStart:(BOOL)a1 labelChanged:(id /* block */)a2 stateChange:(id /* block */)a3;
- (BOOL)useNewRenderPath;
- (void)waitForLoading;

@end

@interface VKPolygonalItemGroup : NSObject {
    struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>> { BOOL _hasValue; union ValueUnion { unsigned char data[184]; struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> { struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned short, unsigned int> *, std::allocator<std::pair<unsigned short, unsigned int>>> { void *__value_; } __end_cap_; } _vertexAndIndexCounts; struct vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__value_; } __end_cap_; } _meshes; struct DataWrite<ggl::PolygonBase::CompressedVbo> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _vertexDataWrite; struct DataWrite<unsigned short> { struct BufferMemory { struct ResourceAccessor *_accessor; struct BufferData *_user; struct Range<unsigned long> { unsigned long long _min; unsigned long long _max; } _range; int _access; int _sync; char *_data; } _memory; } _indexDataWrite; unsigned char _meshIndex; unsigned short _meshVertexOffset; unsigned int _meshIndexOffset; struct MeshSetStorage *_storage; struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> { struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> { struct MeshSetStorage *__value_; } __ptr_; } _internalStorage; struct shared_ptr<md::MeshSetStorageClient> { struct MeshSetStorageClient *__ptr_; struct __shared_weak_count *__cntrl_; } _storageClient; } type; } _value; } _fillMeshInfo;
    struct vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> { void *__value_; } __end_cap_; } _fillMeshes;
    struct shared_ptr<md::MeshSetStorage> { struct MeshSetStorage *__ptr_; struct __shared_weak_count *__cntrl_; } _meshStorage;
    struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } __elems_[16]; } _fillCullingGroups;
    struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } __elems_[16]; } _strokeCullingGroups;
    struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } __elems_[16]; } _venueCullingGroups;
    struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } __elems_[16]; } _venueEndCapCullingGroups;
    struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } __elems_[16]; } _venueWallHorizontalStrokeCullingGroups;
    struct array<std::vector<std::vector<FeatureRange>>, 16UL> { struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<FeatureRange> *, std::allocator<std::vector<FeatureRange>>> { void *__value_; } __end_cap_; } __elems_[16]; } _venueWallVerticalStrokeCullingGroups;
    struct unordered_map<std::pair<const void *, unsigned long>, std::vector<md::Edge>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, std::allocator<std::pair<const std::pair<const void *, unsigned long>, std::vector<md::Edge>>>> { struct __hash_table<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, true>, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>, true>, std::allocator<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>, true>> { float __value_; } __p3_; } __table_; } _polygonEdges;
    struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *>, std::allocator<std::__hash_node<unsigned long long, void *>>> { struct __hash_node_base<std::__hash_node<unsigned long long, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<unsigned long long>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<unsigned long long>> { float __value_; } __p3_; } __table_; } _featureIds;
    struct Box<float, 3> { struct Matrix<float, 3, 1> { float _e[3]; } _minimum; struct Matrix<float, 3, 1> { float _e[3]; } _maximum; } _boundingBox;
    float _tileZoom;
    float _contentScale;
    BOOL _stylesUpToDate;
    BOOL _hasRouteAttributes;
    struct vector<ggl::Batcher, std::allocator<ggl::Batcher>> { struct Batcher *__begin_; struct Batcher *__end_; struct __compressed_pair<ggl::Batcher *, std::allocator<ggl::Batcher>> { struct Batcher *__value_; } __end_cap_; } _fillRenderItemBatchers;
    struct vector<ggl::Batcher, std::allocator<ggl::Batcher>> { struct Batcher *__begin_; struct Batcher *__end_; struct __compressed_pair<ggl::Batcher *, std::allocator<ggl::Batcher>> { struct Batcher *__value_; } __end_cap_; } _strokeRenderItemBatchers;
    struct FeatureStyleAttributesSet { struct set<std::shared_ptr<FeatureStyleAttributes>, FeatureStyleAttributesSet::FeatureStyleAttributesCompare, std::allocator<std::shared_ptr<FeatureStyleAttributes>>> { struct __tree<std::shared_ptr<FeatureStyleAttributes>, FeatureStyleAttributesSet::FeatureStyleAttributesCompare, std::allocator<std::shared_ptr<FeatureStyleAttributes>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::shared_ptr<FeatureStyleAttributes>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, FeatureStyleAttributesSet::FeatureStyleAttributesCompare> { unsigned long long __value_; } __pair3_; } __tree_; } _set; struct vector<std::shared_ptr<FeatureStyleAttributes>, geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<FeatureStyleAttributes> *, geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator>> { void *__value_; struct StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator> { struct Allocator *_allocator; } __value_; } __end_cap_; } _array; } _attributeSets;
    struct unordered_map<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>, (anonymous namespace)::StyleQueryOverrideHash, std::equal_to<StyleQueryOverride>, std::allocator<std::pair<const StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>> { struct __hash_table<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, std::__unordered_map_hasher<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, (anonymous namespace)::StyleQueryOverrideHash, std::equal_to<StyleQueryOverride>, true>, std::__unordered_map_equal<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, std::equal_to<StyleQueryOverride>, (anonymous namespace)::StyleQueryOverrideHash, true>, std::allocator<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, (anonymous namespace)::StyleQueryOverrideHash, std::equal_to<StyleQueryOverride>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, std::equal_to<StyleQueryOverride>, (anonymous namespace)::StyleQueryOverrideHash, true>> { float __value_; } __p3_; } __table_; } _styleQueries;
    struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _styleManager;
    struct PolygonRouteAttributes { unsigned int routeSignificance; unsigned char routeProximity; BOOL hasRouteSignificance; } _routeAttributes;
}

@property (readonly, nonatomic) BOOL isFixedSize;
@property (readonly, nonatomic) struct Matrix<float, 2, 1> { float _e[2]; } centroid;
@property (readonly, nonatomic) float tileZoom;
@property (readonly, nonatomic) const void *origin;
@property (readonly, nonatomic) const void *maxPoint;
@property (readonly, nonatomic) struct Matrix<float, 3, 1> { float x0[3]; } size;
@property (readonly, nonatomic) unsigned int cullingMask;
@property (readonly, nonatomic) void *fillMeshes;
@property (readonly, nonatomic) const void *featureIds;

- (void)willAddDataWithAccessor:(struct ResourceAccessor { void /* function */ **x0; } *)a0;
- (id)initWithStyleQuery:(void *)a0 tileZoom:(float)a1 fixedAroundCentroid:(const void *)a2 contentScale:(float)a3;
- (const void *)commitRangesToVenueWallEndCapRenderItemBatcher:(void *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (unsigned char)maxAttributeSetsPerGroup;
- (void)setRouteAttributes:(const struct PolygonRouteAttributes { unsigned int x0; unsigned char x1; BOOL x2; } *)a0;
- (unsigned char)indexForGeoFeatureAttributes:(const void *)a0;
- (void)clearRouteAttributes;
- (const void *)commitRangesToVerticalVenueWallStrokeRenderItemBatcher:(void *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (const void *)attributeSets;
- (void)updateCachedStyles;
- (void *)styleQueries:(const struct StyleQueryOverride { unsigned char x0; unsigned char x1; } *)a0;
- (const void *)commitRangesToVenueWallRenderItemBatcher:(void *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (id)initWithStyleQuery:(void *)a0 tileZoom:(float)a1 fixedAroundCentroid:(const void *)a2 contentScale:(float)a3 storage:(struct shared_ptr<md::MeshSetStorage> { struct MeshSetStorage *x0; struct __shared_weak_count *x1; })a4;
- (BOOL)hasFeatureId:(unsigned long long)a0;
- (BOOL)canAcceptPolygon:(void *)a0;
- (const void *)commitRangesToHorizontalVenueWallStrokeRenderItemBatcher:(void *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2;
- (void)didFinishAddingData;
- (const void *)commitRangesToStrokeRenderItemBatcher:(void *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; void *x1; } x0; })a3;
- (const void *)commitRangesToFillRenderItemBatcher:(void *)a0 forMeshAtIndex:(unsigned long long)a1 cullingMask:(unsigned int)a2 featureIdPredicate:(struct function<bool (unsigned long long)> { struct __value_func<bool (unsigned long long)> { struct type { unsigned char x0[24]; } x0; void *x1; } x0; })a3;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

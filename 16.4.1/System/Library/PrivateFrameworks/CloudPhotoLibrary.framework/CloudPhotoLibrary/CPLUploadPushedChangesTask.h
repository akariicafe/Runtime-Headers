@class CPLEngineScope, CPLRecordTargetMapping, NSMutableDictionary, NSDate, NSObject, CPLEngineScheduler, CPLEngineTransport, NSMutableArray, NSString, CPLBatchExtractionStrategy, CPLDerivativesFilter, CPLEngineStoreTransaction, CPLTransportScopeMapping, NSArray, CPLBeforeUploadCheckItems, CPLChangeBatch, CPLEngineScopeStorage, CPLEnginePushRepository;
@protocol CPLEngineTransportFetchRecordsTask, CPLEngineTransportUploadBatchTask, CPLEngineTransportGroup, CPLUploadPushedChangesTaskDelegate, OS_dispatch_queue, CPLBatchExtractionStrategyStorage;

@interface CPLUploadPushedChangesTask : CPLEngineScopedTask <CPLBeforeUploadCheckItemsProvider> {
    NSObject<OS_dispatch_queue> *_lock;
    NSString *_scopeIdentifier;
    CPLEngineScopeStorage *_scopes;
    CPLEngineTransport *_transport;
    CPLEngineScheduler *_scheduler;
    id<CPLBatchExtractionStrategyStorage> _batchStorage;
    CPLBatchExtractionStrategy *_currentStrategy;
    CPLChangeBatch *_diffedBatch;
    CPLChangeBatch *_batchToCommit;
    CPLDerivativesFilter *_derivativesFilter;
    NSArray *_uploadResourceTasks;
    CPLBeforeUploadCheckItems *_checkItems;
    CPLEngineStoreTransaction *_transactionDuringItemsPreparation;
    NSMutableArray *_preparedUploadResourceTasks;
    CPLRecordTargetMapping *_targetMapping;
    NSMutableDictionary *_invalidTransportScopes;
    id<CPLEngineTransportFetchRecordsTask> _fetchRecordsTask;
    id<CPLEngineTransportUploadBatchTask> _uploadTask;
    unsigned long long _lastReportedProgress;
    unsigned long long _countOfPushedChanges;
    double _startOfIteration;
    double _startOfDerivativesGeneration;
    BOOL _deferredCancel;
    BOOL _hasCachedShouldCheckResourcesAhead;
    BOOL _shouldCheckResourcesAhead;
    BOOL _shouldSetupEstimatedSize;
    id<CPLEngineTransportGroup> _transportGroup;
    long long _taskItem;
    BOOL _hasPushedSomeChanges;
    BOOL _isUsingOverQuotaStrategy;
    BOOL _resetStrategy;
    double _latestApproximativeUploadRate;
    NSString *_currentTaskKey;
    NSDate *_taskStartDate;
    unsigned long long _recordCount;
    BOOL _didExtractOneBatch;
    BOOL _wasBusy;
    BOOL _hasUploadedOneBatch;
}

@property (retain) id<CPLUploadPushedChangesTaskDelegate> delegate;
@property (readonly, nonatomic) id<CPLEngineTransportGroup> storedTransportGroup;
@property (readonly, nonatomic) CPLEngineScope *sharedScope;
@property (readonly, nonatomic) CPLTransportScopeMapping *transportScopeMapping;
@property (readonly, nonatomic) long long ruleGroup;
@property (readonly, nonatomic) BOOL highPriority;
@property (readonly, nonatomic) unsigned long long maxBatchSize;
@property (readonly, nonatomic) unsigned long long pushRepositoryPriority;
@property (readonly, nonatomic) CPLEnginePushRepository *pushRepository;
@property (readonly, nonatomic) BOOL didUseOverQuotaStrategy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id)taskIdentifier;
- (BOOL)isResourceDynamic:(id)a0;
- (void)cancel:(BOOL)a0;
- (void)cancel;
- (void)launch;
- (void).cxx_destruct;
- (BOOL)checkScopeIsValidInTransaction:(id)a0;
- (void)_checkForRecordExistence;
- (void)_clearUploadBatch;
- (void)_deleteGeneratedResourcesAfterError:(id)a0;
- (void)_didFinishTaskWithKey:(id)a0 error:(BOOL)a1 cancelled:(BOOL)a2;
- (void)_didStartTaskWithKey:(id)a0 recordCount:(unsigned long long)a1;
- (BOOL)_discardUploadedExtractedBatch:(id)a0 error:(id *)a1;
- (void)_excludeScopeFromMingling;
- (void)_extractAndUploadOneBatch;
- (void)_extractBatchWithTransaction:(id)a0 andStore:(id)a1;
- (void)_generateDerivativesForNextRecord:(id)a0 usingDerivativesCache:(id)a1 fetchCache:(id)a2;
- (void)_generateNeededDerivativesWithFetchCache:(id)a0;
- (BOOL)_markUploadedTasksDidFinishWithError:(id)a0 transaction:(id)a1 error:(id *)a2;
- (void)_noteSuccessfulUpdateInTransaction:(id)a0;
- (void)_popNextBatchAndContinue;
- (void)_prepareTransportGroupForOneBatch;
- (void)_prepareUploadBatch;
- (BOOL)_reenqueueExtractedBatchWithRejectedRecords:(id)a0 extractedBatch:(id)a1 error:(id *)a2;
- (BOOL)_shouldNotTrustCloudCacheAfterError:(id)a0;
- (BOOL)_shouldUploadBatchesWithDropReason:(id *)a0 shouldQuarantineRecords:(BOOL *)a1 inTransaction:(id)a2;
- (void)_updateQuotaStrategyAfterSuccessInTransaction:(id)a0;
- (void)_uploadBatchWithFetchCache:(id)a0;
- (void)_uploadTaskDidFinishWithError:(id)a0;
- (BOOL)_willNeedToAccessScopeWithIdentifier:(id)a0 primaryScope:(BOOL)a1 error:(id *)a2;
- (id)availableResourceTypesToUploadForChange:(id)a0;
- (id)initWithEngineLibrary:(id)a0 session:(id)a1 clientCacheIdentifier:(id)a2 scope:(id)a3 transportScope:(id)a4 storedTransportGroup:(id)a5 sharedScope:(id)a6 transportScopeMapping:(id)a7 ruleGroup:(long long)a8 highPriority:(BOOL)a9 maxBatchSize:(unsigned long long)a10 pushRepositoryPriority:(unsigned long long)a11 pushRepository:(id)a12;
- (BOOL)isCloudRecordWithScopedIdentifierShared:(id)a0;
- (id)knownCloudRecordWithScopedIdentifier:(id)a0;
- (BOOL)willNeedToAccessRecordWithScopedIdentifier:(id)a0 error:(id *)a1;
- (id)willUploadCloudResource:(id)a0 localResource:(id)a1 error:(id *)a2;

@end

@class ABPK2DDetectionResult;

@interface ABPK2DExtrapolationFiltering : NSObject {
    struct SkeletonJointFilter<float> { struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_values; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_speed; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } m_timestamps; float m_smoothing; float m_lowest_threshold; float m_low_threshold; float m_high_threshold; float m_highest_threshold; float m_temporal_smoothing; float m_prediction_factor; float m_min_smoothing; float m_up_slope; float m_down_slope; float m_temporal_slope; } _extrapolationFilter2D;
    double _extrapolationTime;
    struct SkeletonJointFilter<float> { struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_values; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } m_speed; struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } m_timestamps; float m_smoothing; float m_lowest_threshold; float m_low_threshold; float m_high_threshold; float m_highest_threshold; float m_temporal_smoothing; float m_prediction_factor; float m_min_smoothing; float m_up_slope; float m_down_slope; float m_temporal_slope; } _extrapolationFilter2DForLiftingData;
    struct Human { unsigned long long numberOfJoints; struct map<int, float __attribute__((ext_vector_type(2))), std::less<int>, std::allocator<std::pair<const int, float __attribute__((ext_vector_type(2)))>>> { struct __tree<std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::__map_value_compare<int, std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::less<int>, true>, std::allocator<std::__value_type<int, float __attribute__((ext_vector_type(2)))>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, float __attribute__((ext_vector_type(2)))>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } jointMap; struct map<int, float, std::less<int>, std::allocator<std::pair<const int, float>>> { struct __tree<std::__value_type<int, float>, std::__map_value_compare<int, std::__value_type<int, float>, std::less<int>, true>, std::allocator<std::__value_type<int, float>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, float>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, float>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } confidenceMap; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } rawArray; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } jointsTrackingState; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } keypoints; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } confidence; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingbox; BOOL missingJoints; } _rawTrackedHuman;
    struct Human { unsigned long long numberOfJoints; struct map<int, float __attribute__((ext_vector_type(2))), std::less<int>, std::allocator<std::pair<const int, float __attribute__((ext_vector_type(2)))>>> { struct __tree<std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::__map_value_compare<int, std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::less<int>, true>, std::allocator<std::__value_type<int, float __attribute__((ext_vector_type(2)))>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, float __attribute__((ext_vector_type(2)))>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } jointMap; struct map<int, float, std::less<int>, std::allocator<std::pair<const int, float>>> { struct __tree<std::__value_type<int, float>, std::__map_value_compare<int, std::__value_type<int, float>, std::less<int>, true>, std::allocator<std::__value_type<int, float>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, float>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, float>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } confidenceMap; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } rawArray; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } jointsTrackingState; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } keypoints; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } confidence; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingbox; BOOL missingJoints; } _trackedHuman;
    ABPK2DDetectionResult *_aligned3DSkeleton;
    BOOL _shouldPush3DSupportSkeleton;
    BOOL _use3DSupportSkeletonForExtrapolation;
    struct vector<Human, std::allocator<Human>> { struct Human *__begin_; struct Human *__end_; struct __compressed_pair<Human *, std::allocator<Human>> { struct Human *__value_; } __end_cap_; } _rawTrackedHumanVector;
    struct Human { unsigned long long numberOfJoints; struct map<int, float __attribute__((ext_vector_type(2))), std::less<int>, std::allocator<std::pair<const int, float __attribute__((ext_vector_type(2)))>>> { struct __tree<std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::__map_value_compare<int, std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::less<int>, true>, std::allocator<std::__value_type<int, float __attribute__((ext_vector_type(2)))>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, float __attribute__((ext_vector_type(2)))>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, float __attribute__((ext_vector_type(2)))>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } jointMap; struct map<int, float, std::less<int>, std::allocator<std::pair<const int, float>>> { struct __tree<std::__value_type<int, float>, std::__map_value_compare<int, std::__value_type<int, float>, std::less<int>, true>, std::allocator<std::__value_type<int, float>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, float>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, float>, std::less<int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } confidenceMap; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } rawArray; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } jointsTrackingState; struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> { void *__value_; } __end_cap_; } keypoints; struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } confidence; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingbox; BOOL missingJoints; } _trackedHumanForLifting;
    BOOL _rawTrackedHumanDeNormalized;
    BOOL _rawTrackedHumanVectorDeNormalized;
    BOOL _trackedHumanDeNormalized;
    BOOL _trackedHumanForLiftingDeNormalized;
    struct CGSize { double width; double height; } _mlImageSize;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (const void *)rawTrackedHuman;
- (id)aligned3DSkeleton;
- (id)initWithUse3DSkeletonForExtrapolation:(BOOL)a0 shouldPush3DSupportSkeleton:(BOOL)a1 withExtrapolationTime:(double)a2;
- (int)performExtrapolationOnHumans:(void *)a0 withImageResolution:(struct CGSize { double x0; double x1; })a1 atTimestamp:(double)a2 rotationNeeded:(long long)a3 previousSkeleton3D:(id)a4;
- (const void *)rawTrackedHumanVector;
- (const void *)trackedHuman;
- (const void *)trackedHumanForLifting;

@end

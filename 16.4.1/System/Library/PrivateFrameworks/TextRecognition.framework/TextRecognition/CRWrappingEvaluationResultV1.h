@class CRLineWrappingContext, NSString, CRTextFeature, CRLineWrapperV1Configuration;

@interface CRWrappingEvaluationResultV1 : NSObject <CRWrappingEvaluationResult>

@property BOOL matchingLocales;
@property (retain) NSString *paragraphText;
@property (retain) CRTextFeature *featureInTest;
@property (retain) CRLineWrapperV1Configuration *configuration;
@property (weak) CRLineWrappingContext *context;
@property float textHeightRatio;
@property float textWidthRatio;
@property float angleDiff;
@property BOOL isOversegmented;
@property BOOL leftAligned;
@property BOOL centerAligned;
@property BOOL continuesToNewColumn;
@property double verticalSpacing;
@property struct CGSize { double width; double height; } featureInTestSize;
@property struct CGSize { double width; double height; } lastFeatureSize;
@property float topDistanceLeft;
@property float topDistanceRight;
@property float topDistanceRightToBottomLeft;
@property float leftDistance;
@property float rightDistance;
@property float midDistance;
@property float newParagraphIndentDistanceRatio;
@property float horizontalOverlap;
@property float verticalOverlap;
@property float xSpace;
@property float ySpace;
@property BOOL midSentencePunctuated;
@property BOOL bothBeginWithDigits;
@property BOOL f2StartOfSentence;
@property BOOL oversegmentedListItem;
@property BOOL f2BeginsWithDD;
@property BOOL f1EndsWithDD;
@property BOOL f2FullyDD;
@property BOOL multilineDD;
@property (retain) NSString *sentencePuncStringToCheck;
@property BOOL lmScoreSet;
@property BOOL eosLMScoreSet;
@property double cachedLMScore;
@property double cachedEOSLMScore;
@property BOOL featureTokensSet;
@property struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } cachedFeatureTokens;
@property BOOL contextNoText;
@property BOOL featureInTestNoText;
@property (readonly) long long tokenCountDiff;
@property (readonly) struct CGSize { double width; double height; } imageSize;
@property (readonly) BOOL similarHeights;
@property (readonly) BOOL similarAngles;
@property (readonly) double widthGrowth;
@property (readonly) BOOL excessiveVerticalDistance;
@property (readonly) BOOL isHyphenatedPrefixOfWord;
@property (readonly) long long textBasedEvaluation;
@property (readonly) long long textContentWrappingScore;
@property (readonly) long long wordCountWrappingScore;
@property (readonly) double lmScore;
@property (readonly) double eosLMScore;
@property (readonly) struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *x0; unsigned int *x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *x0; } x2; } featureTokens;
@property (readonly) BOOL contributesToVerticalSpacing;
@property (readonly) double verticalSpacingToHeightRatio;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_computeCharLMScores;
- (void)_computeDDPropertiesWithContext:(id)a0;
- (void)_computeGeometricPropertiesWithImageSize:(struct CGSize { double x0; double x1; })a0;
- (void)_computeIsHyphenatedPrefixOfWord:(id)a0;
- (void)_computeLMScoreComputingEOS:(BOOL)a0;
- (void)_computeNoTextWithContext:(id)a0;
- (void)_setParagraphTextWithString:(id)a0 context:(id)a1;
- (id)_spaceSeparatedTokens:(id)a0;
- (long long)_tokenCountForString:(id)a0;
- (long long)caseWrappingScoreUsingCustomConfiguration:(BOOL)a0;
- (id)initWithTextFeature:(id)a0 context:(id)a1 imageSize:(struct CGSize { double x0; double x1; })a2 configuration:(id)a3;
- (id)initWithTextFeature:(id)a0 context:(id)a1 imageSize:(struct CGSize { double x0; double x1; })a2 configuration:(id)a3 skipTextComputation:(BOOL)a4;
- (long long)punctuationWrappingScoreUsingCustomConfiguration:(BOOL)a0;
- (id)resultByMerging:(id)a0;

@end

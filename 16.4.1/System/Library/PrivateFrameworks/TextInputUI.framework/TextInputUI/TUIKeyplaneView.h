@class NSMutableDictionary, TUIKey, UIKBRenderFactory, UIPinchGestureRecognizer, UIKBScreenTraits, UIButton, UIView, UILayoutGuide, NSString, NSLayoutConstraint, NSMutableArray, UIKBRenderingContext, UIKBRenderConfig, TUIKeyplane, UIKBTree;

@interface TUIKeyplaneView : UIView <TUIVariantSelectorDelegate>

@property (retain, nonatomic) TUIKeyplane *currentKeyplane;
@property (retain, nonatomic) NSMutableDictionary *storedKeyViews;
@property (retain, nonatomic) NSMutableDictionary *storedVariantViews;
@property (retain, nonatomic) NSMutableArray *activeVariantViews;
@property (nonatomic) BOOL layoutReadyForTreeUpdate;
@property (nonatomic) BOOL dismissingKeyboardMenu;
@property (retain, nonatomic) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (retain, nonatomic) NSLayoutConstraint *sizeRatioConstraint;
@property (retain, nonatomic) NSLayoutConstraint *heightConstraint;
@property (retain, nonatomic) NSLayoutConstraint *preferredWidthConstraint;
@property (retain, nonatomic) NSLayoutConstraint *trailingTieConstraint;
@property (retain, nonatomic) NSLayoutConstraint *scalingConstraint;
@property (retain, nonatomic) NSLayoutConstraint *topSpacing;
@property (retain, nonatomic) NSLayoutConstraint *leadingSpacing;
@property (retain, nonatomic) NSLayoutConstraint *trailingSpacing;
@property (retain, nonatomic) NSLayoutConstraint *bottomSpacing;
@property (retain, nonatomic) NSLayoutConstraint *splitSpacing;
@property (retain, nonatomic) NSLayoutConstraint *keySizeSpacer;
@property (retain, nonatomic) NSLayoutConstraint *leftSplitWidth;
@property (retain, nonatomic) NSLayoutConstraint *rightSplitWidth;
@property (retain, nonatomic) UIView *keyboardContentView;
@property (retain, nonatomic) UILayoutGuide *keySizeReferenceGuide;
@property (retain, nonatomic) UILayoutGuide *bottomRowSizingGuide;
@property (retain, nonatomic) NSLayoutConstraint *bottomRowSizingConstraint;
@property (nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } standardKeyInsets;
@property (retain, nonatomic) NSString *displayedType;
@property (retain, nonatomic) NSString *keyLayout;
@property (nonatomic) double startingWidthConstant;
@property (nonatomic) double maximumWidth;
@property (nonatomic) double previousWidth;
@property (nonatomic) struct CGSize { double width; double height; } preferredSize;
@property (nonatomic) struct CGSize { double width; double height; } preferredFloatingSize;
@property (nonatomic) struct CGSize { double width; double height; } unsplitSize;
@property (nonatomic) long long currentHandBias;
@property (retain, nonatomic) UIButton *biasEscapeButton;
@property (retain, nonatomic) NSLayoutConstraint *horizontalBiasButtonConstraint;
@property (nonatomic) BOOL allowsPaddles;
@property (nonatomic) BOOL movingFromFloating;
@property (nonatomic) BOOL movingToFloating;
@property (nonatomic) BOOL isFloating;
@property (nonatomic) BOOL isCurrentlySplit;
@property (nonatomic) BOOL isInSplitTransition;
@property (nonatomic) double transitionProgress;
@property (nonatomic) long long fullControlKeyType;
@property (nonatomic) long long floatingControlKeyType;
@property (retain, nonatomic) UIKBRenderingContext *renderingContext;
@property (retain, nonatomic) UIKBRenderConfig *renderConfig;
@property (retain, nonatomic) NSMutableDictionary *keyRowViews;
@property (retain, nonatomic) NSMutableDictionary *delayedDeactivationKeys;
@property (retain, nonatomic) NSMutableDictionary *splitTransitionLayoutGuides;
@property (retain, nonatomic) UIKBScreenTraits *screenTraits;
@property (retain, nonatomic) TUIKey *activeKey;
@property (retain, nonatomic) UIKBTree *keyplane;
@property (retain, nonatomic) UIKBRenderFactory *factory;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)dynamicKeyboardForName:(id)a0 size:(struct CGSize { double x0; double x1; })a1 isLandscape:(BOOL)a2;
+ (id)keyplaneViewForKeyboard:(id)a0 size:(struct CGSize { double x0; double x1; })a1 isLandscape:(BOOL)a2;
+ (id)keyplaneViewForKeyboard:(id)a0 size:(struct CGSize { double x0; double x1; })a1 isLandscape:(BOOL)a2 displayKeyplane:(unsigned long long)a3;
+ (id)keyplaneViewForLayout:(id)a0 size:(struct CGSize { double x0; double x1; })a1 isLandscape:(BOOL)a2;
+ (id)updateDynamicKeyboard:(id)a0 usingSize:(struct CGSize { double x0; double x1; })a1 isLandscape:(BOOL)a2;
+ (id)updateDynamicKeyplane:(id)a0 usingSize:(struct CGSize { double x0; double x1; })a1 isLandscape:(BOOL)a2;

- (void)prepareForDisplay;
- (BOOL)isSplit;
- (void)dimKeys:(id)a0;
- (BOOL)supportsSplit;
- (void)setKeyboardBias:(long long)a0;
- (BOOL)_shouldAllowKey:(id)a0;
- (int)stateForKey:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })updateFrameForKey:(id)a0;
- (id)cacheIdentifierForKey:(id)a0 withState:(int)a1;
- (void)deactivateKeys;
- (void)prepareForSplitTransition;
- (void)removeFromSuperview;
- (void)setState:(int)a0 forKey:(id)a1;
- (void)_generateFactoryIfNeeded;
- (void)addKeyToDelayedDeactivationSet:(id)a0;
- (void)finishSplitTransition;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (id)viewForKey:(id)a0;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(id)a0;
- (id)actualView;
- (void)removeKeyFromDelayedDeactivationSet:(id)a0;
- (void)deactivateKey:(id)a0 previousState:(int)a1;
- (void)setOverrideScreenTraits:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 keyplane:(id)a1;
- (void).cxx_destruct;
- (void)deactivateAdaptiveKey:(id)a0;
- (void)_generateRenderingContextIfNeeded;
- (void)changingSelectedVariantForKey:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)finishedSelectingVariantForKey:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
- (double)fullHeightForDockedKeyboard;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplaneInsets;
- (struct CGSize { double x0; double x1; })leftSplitSize;
- (struct CGSize { double x0; double x1; })rightSplitSize;
- (void)transitionToKeyplane:(id)a0;
- (void)transitionWillFinishWithProgress:(double)a0 completion:(id /* block */)a1;
- (void)updateSplitProgress:(double)a0;
- (void)updateToSize:(struct CGSize { double x0; double x1; })a0;
- (void)updateVariantSelectorFramesForKey:(id)a0;
- (id)keyViewForTree:(id)a0;
- (id)cachedVariantViewForTree:(id)a0 state:(int)a1;
- (id)viewForBaseKey:(id)a0;
- (void)_regenerateFactoryPreservingUpdates:(BOOL)a0;
- (void)_updateRenderingContext;
- (id)cachedVariantViewForTree:(id)a0;
- (void)compareKeyplane:(id)a0 toKeyplane:(id)a1;
- (void)createContentViewsIfNeeded;
- (void)createSplitLayoutIfNeeded;
- (void)didTapBiasEscapeButton;
- (void)finalLayoutForSplit:(BOOL)a0;
- (void)generateFactoryForKeyplane:(id)a0 landscape:(BOOL)a1;
- (long long)keyLayoutStyle;
- (id)keyViewForKey:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keycapInsets;
- (id)keyplaneFromTree:(id)a0 size:(struct CGSize { double x0; double x1; })a1 controlKeyType:(long long)a2;
- (id)keyplaneRenderConfig;
- (void)layoutKeysInRows:(id)a0;
- (void)layoutRows:(unsigned long long)a0;
- (void)presentSelectorView:(id)a0 fromBaseKey:(id)a1;
- (id)renderConfigForCurrentTraitCollection;
- (void)resetLayoutAndApplyKeyplane:(id)a0;
- (void)setKeyplaneForAutomation:(id)a0;
- (struct CGSize { double x0; double x1; })sizeFromScreenTraitsAndClass;
- (struct CGSize { double x0; double x1; })splitSizeForRightSide:(BOOL)a0;
- (void)tappedToDismissSelector;
- (void)updateAllTrees;
- (void)updateBiasEscapeButtonVisbility:(BOOL)a0;
- (void)updateBottomRowSizingGuide;
- (void)updateKeyplaneSpacing;
- (void)updateKeysForFloating:(BOOL)a0;
- (void)updateKeysForRow:(unsigned long long)a0 withKeys:(id)a1;
- (void)updateRowsForKeyplane:(id)a0;
- (void)updateToSpecifiedSize:(struct CGSize { double x0; double x1; })a0;
- (void)updateTreeForAutomation;
- (id)variantViewForKey:(id)a0 cacheID:(id)a1;

@end

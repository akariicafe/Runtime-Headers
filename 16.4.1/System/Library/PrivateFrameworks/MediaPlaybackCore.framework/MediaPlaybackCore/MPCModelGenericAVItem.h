@class NSDictionary, MPCDeferrableTask, ICMusicSubscriptionLeaseStatus, ICAVAssetDownloadURLSession, MPCModelGenericAVItemTimedMetadataResponse, MPCPlaybackRequestEnvironment, ICStoreRequestContext, NSString, ICMusicSubscriptionLeaseSession, ICURLRequest, MPGaplessInfo, MPCPlayerAudioFormat, MPCModelGenericAVItemTimedMetadataRequest, MPCAudioAssetTypeSelection, MPPropertySet, NSArray, MPModelGenericObject, MPMediaLibrary, NSObject, MPCSuzeLeaseSession, NSData, NSOperationQueue, MPCPlayerAudioRoute, MPCPlaybackEngineEventStream, ICContentKeySession, MPCAudioAssetTypeSelector, MPSubscriptionStatusPlaybackInformation, NSURL, NSNumber, MPCModelGenericAVItemUserIdentityPropertySet;
@protocol OS_dispatch_queue, MPCReportingIdentityPropertiesLoading, MPCModelPlaybackAssetCacheProviding;

@interface MPCModelGenericAVItem : MPAVItem <MPRTCReportingItemSessionCreating, AVAssetResourceLoaderDelegate, AVPlayerItemMetadataOutputPushDelegate, ICEnvironmentMonitorObserver> {
    NSObject<OS_dispatch_queue> *_accessQueue;
    BOOL _allowsAirPlayFromCloud;
    BOOL _hasLoadedSubscriptionLeaseSession;
    NSObject<OS_dispatch_queue> *_subscriptionLeaseSessionLoadQueue;
    ICMusicSubscriptionLeaseSession *_subscriptionLeaseSession;
    BOOL _hasLoadedSubscriptionPlaybackInformation;
    MPSubscriptionStatusPlaybackInformation *_subscriptionPlaybackInformation;
    NSObject<OS_dispatch_queue> *_subscriptionPlaybackInformationLoadQueue;
    BOOL _shouldAutomaticallyRefreshSubscriptionLease;
    BOOL _isSubscriptionPolicyContent;
    BOOL _lastPreparedForNonZeroRate;
    long long _subscriptionLeaseRequestCount;
    BOOL _didDeferPreventionStatusUpdate;
    MPCSuzeLeaseSession *_suzeLeaseSession;
    BOOL _isAutomaticallyRefreshingSuzeLeaseSession;
    id /* block */ _firstBecomeActivePlayerItemBlock;
    NSArray *_currentGlobalTimedMetadataGroups;
    MPModelGenericObject *_flattenedGenericObject;
    MPModelGenericObject *_flattenedMetadataGenericObject;
    MPModelGenericObject *_metadataGenericObject;
    MPPropertySet *_itemProperties;
    id<MPCReportingIdentityPropertiesLoading> _identityPropertiesLoader;
    MPCModelGenericAVItemTimedMetadataRequest *_timedMetadataRequest;
    MPCModelGenericAVItemTimedMetadataResponse *_timedMetadataResponse;
    NSOperationQueue *_timedMetadataOperationQueue;
    BOOL _isMusicCellularStreamingAllowed;
    BOOL _didReceiveHLSTimedMetadata;
    NSString *_hlsStreamIdentifier;
    BOOL _isiTunesStoreStream;
    ICStoreRequestContext *_storeRequestContext;
    NSURL *_streamingKeyCertificateURL;
    NSURL *_streamingKeyServerURL;
    NSString *_rtcReportingServiceIdentifier;
    MPCModelGenericAVItemUserIdentityPropertySet *_identityPropertySet;
    ICContentKeySession *_contentKeySession;
    ICAVAssetDownloadURLSession *_hlsDownloadURLSession;
    ICURLRequest *_hlsDownloadURLRequest;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _genericObjectLock;
    BOOL _mediaItemNeedsLoading;
    NSURL *_tempFileURLToCleanup;
    MPCDeferrableTask *_deferredLeaseAcquisitionTask;
    long long _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus *_leaseStatus;
}

@property (readonly, nonatomic) long long rtcReportingAssetType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) NSDictionary *audioFormatsDictionary;
@property (retain, nonatomic) NSArray *availableSortedFormats;
@property (retain, nonatomic) id<MPCModelPlaybackAssetCacheProviding> assetCacheProvider;
@property (copy, nonatomic) NSString *assetSourceStoreFrontID;
@property (nonatomic) long long equivalencySourceAdamID;
@property (retain, nonatomic) MPModelGenericObject *genericObject;
@property (readonly, copy, nonatomic) NSData *jingleTimedMetadata;
@property (retain, nonatomic) MPMediaLibrary *mediaLibrary;
@property (copy, nonatomic, getter=isSiriInitiated) NSNumber *siriInitiated;
@property (nonatomic, getter=isRadioPlayback) BOOL radioPlayback;
@property (nonatomic, getter=isRadioStreamPlayback) BOOL radioStreamPlayback;
@property (nonatomic, getter=isSubscriptionRequired) BOOL subscriptionRequired;
@property (readonly, nonatomic) BOOL hasVideo;
@property (readonly, nonatomic) BOOL shouldReportPlayEventsToStore;
@property (readonly, copy, nonatomic) MPCPlaybackRequestEnvironment *playbackRequestEnvironment;
@property (nonatomic) long long stationItemLikedState;
@property (retain, nonatomic) NSDictionary *trackInfo;
@property (readonly, nonatomic) NSData *trackInfoData;
@property (readonly, nonatomic) MPGaplessInfo *gaplessInfo;
@property (retain, nonatomic) NSString *playerID;
@property (weak, nonatomic) MPCPlaybackEngineEventStream *eventStream;
@property (retain, nonatomic) MPCPlayerAudioFormat *preferredFormat;
@property (retain, nonatomic) MPCPlayerAudioFormat *activeFormat;
@property (nonatomic) long long activeFormatJustification;
@property (retain, nonatomic) NSArray *alternateFormats;
@property (retain, nonatomic) MPCPlayerAudioRoute *audioRoute;
@property (copy, nonatomic) NSString *previousQueueItemID;
@property (retain, nonatomic) MPCAudioAssetTypeSelector *audioAssetTypeSelector;
@property (readonly, nonatomic) long long preferredAudioAssetType;
@property (readonly, nonatomic) MPCAudioAssetTypeSelection *preferredAudioAssetTypeSelection;
@property (readonly, nonatomic) long long loadedAudioAssetType;
@property (readonly, nonatomic, getter=isHLSAsset) BOOL hlsAsset;
@property (readonly, nonatomic, getter=isDownloadedAsset) BOOL downloadedAsset;
@property (nonatomic) BOOL prioritizeStartupOverQuality;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)_utilitySerialQueue;
+ (id)_downloadCompletionPendingItems;
+ (BOOL)_prefersHighQualityAudioContentForNetworkType:(long long)a0;
+ (BOOL)_prefersHighQualityVideoContentForNetworkType:(long long)a0;
+ (long long)_unwrapPlaybackError:(id)a0;

- (double)_startTime;
- (id)databaseID;
- (id)composer;
- (id)storeFrontIdentifier;
- (id)personID;
- (id)artist;
- (unsigned long long)cloudID;
- (id)explicitBadge;
- (BOOL)resourceLoader:(id)a0 shouldWaitForLoadingOfRequestedResource:(id)a1;
- (BOOL)hasTimeSyncedLyrics;
- (id)genre;
- (long long)lyricsAdamID;
- (id)cloudUniversalLibraryID;
- (long long)type;
- (id)cloudAlbumID;
- (unsigned long long)mediaType;
- (void)nowPlayingInfoCenter:(id)a0 lyricsForContentItem:(id)a1 completion:(id /* block */)a2;
- (id)album;
- (void)dealloc;
- (id)_storeRequestContext;
- (id)copyrightText;
- (BOOL)shouldShowComposer;
- (BOOL)allowsExternalPlayback;
- (long long)reportingAdamID;
- (BOOL)isAlwaysLive;
- (BOOL)supportsVocalAttenuation;
- (long long)albumYear;
- (void)environmentMonitorDidChangeNetworkType:(id)a0;
- (id)playbackInfo;
- (long long)artistStoreID;
- (void).cxx_destruct;
- (void)setRating:(float)a0;
- (long long)stationID;
- (BOOL)resourceLoader:(id)a0 shouldWaitForRenewalOfRequestedResource:(id)a1;
- (id)albumArtist;
- (id)stationName;
- (unsigned long long)albumPersistentID;
- (BOOL)isStreamable;
- (unsigned long long)persistentID;
- (float)userRating;
- (id)_stopTime;
- (void)metadataOutput:(id)a0 didOutputTimedMetadataGroups:(id)a1 fromPlayerItemTrack:(id)a2;
- (BOOL)isExplicitTrack;
- (BOOL)isValidPlayerSubstituteForItem:(id)a0;
- (BOOL)usesBookmarking;
- (unsigned long long)albumTrackCount;
- (BOOL)isAssetURLValid;
- (id)stationStringID;
- (void)_applyLoudnessInfo;
- (id)_bookmarkTime;
- (void)_currentPlaybackRateDidChange:(float)a0;
- (void)_didBecomeActivePlayerItem;
- (void)_didResignActivePlayerItem;
- (void)_handleUpdatedLikedState:(long long)a0 forUserIdentity:(id)a1 completion:(id /* block */)a2;
- (long long)_keyServerAdamID;
- (long long)_persistedLikedState;
- (id)_radioStation;
- (void)_updateAudioFormatInfoForContentItem:(id)a0;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (unsigned long long)albumArtistPersistentID;
- (long long)albumStoreID;
- (unsigned long long)albumTrackNumber;
- (BOOL)allowsAirPlayFromCloud;
- (BOOL)allowsEQ;
- (id)analyticsContentType;
- (id)analyticsFormatType;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(BOOL)a0;
- (unsigned long long)artistPersistentID;
- (id /* block */)artworkCatalogBlock;
- (id)artworkTimeMarkers;
- (id)bookmarkTime;
- (BOOL)canUseLoadedAsset;
- (id)chapterTimeMarkers;
- (unsigned long long)composerPersistentID;
- (id)containerUniqueID;
- (double)durationFromExternalMetadata;
- (id)externalContentIdentifier;
- (unsigned long long)genrePersistentID;
- (BOOL)hasStoreLyrics;
- (BOOL)isArtistUploadedContent;
- (BOOL)isLikedStateEnabled;
- (BOOL)isRadioItem;
- (long long)leasePlaybackPreventionState;
- (id)leaseStatus;
- (id)libraryLyrics;
- (void)loadAssetAndPlayerItem;
- (id)mainTitle;
- (id)mediaItem;
- (BOOL)mediaItemNeedsLoading;
- (id)modelGenericObject;
- (void)notePlaybackFinishedByHittingEnd;
- (void)pauseContentKeySession;
- (id)playbackError;
- (BOOL)prefersSeekOverSkip;
- (void)prepareForRate:(float)a0 completionHandler:(id /* block */)a1;
- (void)reevaluateType;
- (BOOL)requiresLoadedAssetForAirPlayProperties;
- (void)resolvePlaybackError:(id)a0 withCompletion:(id /* block */)a1;
- (void)resumeContentKeySession;
- (id)rtcReportingServiceIdentifier;
- (void)setupWithPlaybackInfo;
- (BOOL)shouldPreventPlayback;
- (id)stationHash;
- (long long)stationProviderID;
- (id)storeAccountID;
- (long long)storeAlbumArtistID;
- (long long)storeItemInt64ID;
- (long long)storePurchasedAdamID;
- (long long)storeSubscriptionAdamID;
- (BOOL)supportsLikedState;
- (void)updatePlayerItemMetadata;
- (id)urlTimeMarkers;
- (BOOL)useEmbeddedChapterData;
- (BOOL)usesSubscriptionLease;
- (void)_addToDownloadCompletionPendingItems;
- (void)_ageVerificationStateDidChangeNotification:(id)a0;
- (BOOL)_allowsAssetCaching;
- (void)_allowsHighQualityMusicStreamingOnCellularDidChangeNotification:(id)a0;
- (BOOL)_allowsStreamingPlayback;
- (void)_applyPreferredPeakBitRateToPlayerItem:(id)a0 withItemType:(long long)a1;
- (id)_assetLoadPropertiesWithUserIdentityProperties:(id)a0 delegatedUserIdentityProperties:(id)a1 subscriptionPlaybackInfo:(id)a2;
- (unsigned long long)_audioFormatPreference;
- (void)_checkDownloadErrorAndValidityOfDownloadedHLSAsset:(id)a0 downloadLocationURL:(id)a1 completion:(id /* block */)a2;
- (void)_contentTasteControllerDidChangeNotification:(id)a0;
- (id)_createOrUpdateDatabaseEntry:(id)a0 loadResult:(id)a1 urlBag:(id)a2 destinationURL:(id)a3 purgeable:(BOOL)a4;
- (id)_decorateAssetLoadResult:(id)a0 withURLBag:(id)a1;
- (id)_delegatedUserIdentityProperties:(id *)a0;
- (void)_downloadHLSAsset:(id)a0 destinationURL:(id)a1 sharedCacheURL:(id)a2 assetLoadProperties:(id)a3 loadResult:(id)a4 storeRequestContext:(id)a5 urlBag:(id)a6 fileUpgradeRecommendation:(long long)a7;
- (void)_downloadHLSAssetWhilePlaying:(id)a0 assetLoadProperties:(id)a1 assetLoadResult:(id)a2 destinationURL:(id)a3 sharedCacheURL:(id)a4 storeRequestContext:(id)a5 urlBag:(id)a6 fileUpgradeRecommendation:(long long)a7;
- (void)_emitAudioAssetTypeSelection:(id)a0;
- (void)_emitAudioFormatChangeEvent;
- (void)_emitNetworkOperationWithPerformanceMetrics:(id)a0 operationType:(long long)a1 reason:(id)a2 blocksPlayback:(BOOL)a3;
- (void)_getHLSServerDataForLoadResults:(id)a0 bag:(id)a1 keyCertificateURL:(id *)a2 keyServerURL:(id *)a3 keyServerAdamID:(id *)a4 keyServerProtocolType:(long long *)a5;
- (void)_getSubscriptionLeasePropertiesWithCompletion:(id /* block */)a0;
- (void)_getUnverifiedSubscriptionLeaseSessionWithCompletion:(id /* block */)a0;
- (id)_hlsDownloadOptionsDictionary:(id)a0;
- (id)_iTunesStorePurchasedMediaKind;
- (void)_invalidateContentItemForTimedMetadataChangesChangingRevisionID:(BOOL)a0;
- (BOOL)_isAssetLoadResultValidForPlayback:(id)a0 error:(id *)a1;
- (BOOL)_linkAssetIfNeededAtURL:(id)a0 toDestinationURL:(id)a1 shareCacheURL:(id)a2;
- (id)_loudnessInfoMediaKind;
- (id)_modelPlaybackPosition;
- (void)_postInvalidationNotifications;
- (BOOL)_prefersHighQualityContent;
- (void)_prepareAssetForHLSPlayback:(id)a0 loadResult:(id)a1 destinationURL:(id)a2 storeRequestContext:(id)a3 urlBag:(id)a4 identityProperties:(id)a5;
- (void)_prepareLeaseWithShouldRequireLeaseAcquisition:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_reloadTimedMetadataRequest;
- (void)_removeFromDownloadCompletionPendingItems;
- (id)_rtcReportingMediaIdentifierWithAssetLoadProperties:(id)a0;
- (id)_rtcReportingServiceIdentifierWithAssetURL:(id)a0;
- (BOOL)_shouldPreloadSubscriptionStatus;
- (id)_storeUbiquitousIdentifier;
- (void)_subscriptionLeaseStatusDidChangeNotification:(id)a0;
- (long long)_suzeLeaseMediaType;
- (void)_suzeLeaseSessionRenewDidFailNotification:(id)a0;
- (void)_timedMetadataResponseDidInvalidateNotification:(id)a0;
- (struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; })_timeoutValues;
- (void)_updateActiveFormatJustification:(long long)a0;
- (void)_updateAutomaticSubscriptionLeaseRefresh;
- (void)_updateJingleTimedMetadata;
- (void)_updatePreventionStatusWithLeaseSession:(id)a0;
- (float)_volumeAdjustment;
- (id)audioFormatForStableVariantID:(id)a0;
- (void)configureAVPlayerItemWithAudioFormat:(id)a0 forceSpatial:(BOOL)a1;
- (id)currentPlayerAudioFormat;
- (id)initWithGenericObject:(id)a0 itemProperties:(id)a1 playbackRequestEnvironment:(id)a2 identityPropertySet:(id)a3;
- (long long)mpcReporting_equivalencySourceAdamID;
- (id)mpcReporting_identityPropertiesLoader;
- (unsigned long long)mpcReporting_itemType;
- (id)mpcReporting_jingleTimedMetadata;
- (id)mpcReporting_requestingBundleIdentifier;
- (id)mpcReporting_requestingBundleVersion;
- (BOOL)mpcReporting_shouldReportPlayEventsToStore;
- (BOOL)mpcReporting_shouldUseRelativeTimePositions;
- (id)mpcReporting_siriInitiated;
- (id)mpcReporting_trackInfo;
- (BOOL)updateActiveFormat:(id)a0 justification:(long long)a1;
- (BOOL)updateAudioFormatsDictionary:(id)a0;
- (BOOL)updatePreferredFormat:(id)a0;

@end

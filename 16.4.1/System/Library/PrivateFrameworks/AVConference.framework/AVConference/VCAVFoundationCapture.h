@class AVCaptureDevice, NSObject, AVCaptureMetadataOutput, NSMutableArray, AVCaptureDeviceInput, VCViewpointCorrection, NSString, VCImageResizingConverter, VCImageMirroringConverter, AVCaptureVideoDataOutput, VCImageRotationConverter, AVCaptureSession, AVCaptureDepthDataOutput, AVCaptureDataOutputSynchronizer;
@protocol OS_dispatch_queue;

@interface VCAVFoundationCapture : VCVideoCapture <VCVideoSource, AVCaptureVideoDataOutputSampleBufferDelegate, VCEffectsManagerDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureDataOutputSynchronizerDelegate> {
    AVCaptureDeviceInput *_videoDeviceInput;
    AVCaptureVideoDataOutput *_videoCaptureOutput;
    NSObject<OS_dispatch_queue> *_captureSessionQueue;
    NSObject<OS_dispatch_queue> *_viewPointCorrectionQueue;
    AVCaptureSession *_captureSession;
    AVCaptureDataOutputSynchronizer *_outputSynchronizer;
    NSMutableArray *_outputSynchronizerOutputs;
    AVCaptureMetadataOutput *_metadataOutput;
    AVCaptureDevice *_captureDevice;
    BOOL _viewPointCorrectionEnabled;
    BOOL _cframingEnabled;
    BOOL _isCaptureSIFRPreferred;
    int _captureSIFRPreferredOverride;
    BOOL _captureFormatNonBinOnlyOverride;
    BOOL _deviceSupportCinematicFraming;
    BOOL _isBackgroundBlurActive;
    int _orientation;
    BOOL _supportPortraitResolution;
    BOOL _beginCommitConfigForFormatSwitch;
    int _activeWidth;
    int _activeHeight;
    int _activeFrameRate;
    int _lastClientRequestedFrameRate;
    int _processedFrameCount;
    struct CGSize { double width; double height; } _requestSize;
    struct CGSize { double width; double height; } _captureSize;
    BOOL _resize;
    BOOL _isPreviewing;
    BOOL _isCapturing;
    BOOL _forceMirrorCapture;
    BOOL _forceDynamicEffectsFramerate;
    BOOL _forcePearlCamera;
    BOOL _isServerProcess;
    BOOL _avCaptureDeviceInputLocked;
    int _frameCount;
    float _processTimeSum;
    float _depthFrameRateMultplier;
    float _viewpointProcessTime;
    NSMutableArray *_renderFrameTimes;
    NSMutableArray *_cachedDataArray;
    VCImageResizingConverter *_imageCopyingConverter;
    VCImageResizingConverter *_imageResizingConverter;
    VCImageRotationConverter *_imageRotationConverter;
    VCImageMirroringConverter *_imageMirroringConverter;
    VCViewpointCorrection *_viewpointCorrection;
    BOOL _useAVConferenced;
    BOOL _enableBufferStatsDump;
    struct tagVCVideoBufferStatistics { int x0; int x1; BOOL x2; double x3; double x4; double x5; double x6; double x7; } *_statsBuffer;
}

@property (readonly, nonatomic) AVCaptureDepthDataOutput *depthDataOutput;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property BOOL faceMeshTrackingEnabled;
@property BOOL effectsApplied;

+ (BOOL)isServerProcess;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateRegionOfInterest:(struct CGSize { double x0; double x1; })a0 requestSize:(struct CGSize { double x0; double x1; })a1;
+ (struct { long long x0; int x1; unsigned int x2; long long x3; })frameDurationForFrameRateRangeWithMinFrameRate:(double)a0 maxFrameRate:(double)a1 minFrameDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2 maxFrameDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3 desiredFrameRate:(int)a4;

- (void)setOrientation:(int)a0;
- (void)setCinematicFramingEnabled:(BOOL)a0;
- (void)captureOutput:(id)a0 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { } *)a1 fromConnection:(id)a2;
- (void)dealloc;
- (int)setFrameRate:(int)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (int)stop:(BOOL)a0;
- (void)setCameraZoomFactor:(double)a0;
- (int)invalidate;
- (int)startPreview;
- (BOOL)isPreviewRunning;
- (void)setCameraZoomFactor:(double)a0 withRate:(double)a1;
- (void)captureOutput:(id)a0 didOutputMetadataObjects:(id)a1 fromConnection:(id)a2;
- (void)dataOutputSynchronizer:(id)a0 didOutputSynchronizedDataCollection:(id)a1;
- (BOOL)isFrontCamera;
- (void)attachMetadata:(id)a0 toCVPixelBuffer:(struct __CVBuffer { } *)a1;
- (int)setVideoDeviceToSelectedDevice:(id)a0;
- (void)applyVideoRetainedBufferCountHint;
- (id)cameraFormatForWidth:(int)a0 height:(int)a1;
- (id)cameraFormatForWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (id)cameraFormatForWidthWithList:(int)a0 height:(int)a1 frameRate:(int)a2 formatList:(id)a3;
- (BOOL)cameraSupportsFormatWidth:(int)a0 height:(int)a1;
- (BOOL)cameraSupportsNoQueueFormatWidth:(int)a0 height:(int)a1;
- (void)captureSessionNotification:(id)a0;
- (long long)captureTierForEncodingSize:(struct CGSize { double x0; double x1; })a0;
- (void)configureCaptureDeviceDepthFormat;
- (int)configureCaptureWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0;
- (void)configureMetadataTypesForOutput:(id)a0;
- (int)copyColorInfo:(const struct __CFDictionary **)a0;
- (void)encodeProcessedPixelBuffer:(struct __CVBuffer { } *)a0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 imageData:(id)a2 processTime:(id)a3;
- (int)frameBecameAvailableCount:(int *)a0 figBufferQueueEmptyCount:(int *)a1 figBufferQueueErrorCount:(int *)a2;
- (int)frameCount:(BOOL)a0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })frameDurationForVideoDeviceFormat:(id)a0 frameRate:(int)a1;
- (id)getCaptureFormatList;
- (int)getFrameRate;
- (int)getMaxAllowedFrameRate:(int)a0;
- (struct CGSize { double x0; double x1; })getOptimizedCameraCaptureWidth:(int)a0 height:(int)a1;
- (void)getReportingStats:(struct __CFDictionary { } *)a0;
- (int)getSupportedMaxDeviceFrameRateWithFrameRateCap:(int)a0;
- (BOOL)hasRequiredAttributes:(id)a0;
- (id)initWithCaptureServer:(id)a0 width:(int)a1 height:(int)a2 frameRate:(int)a3 videoSourceToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a4 cinematicFramingEnabled:(BOOL)a5 videoOrientation:(int)a6;
- (void)initializeMetadataOutput;
- (void)initializeOutputs;
- (void)initializeSynchronizedOutputs;
- (void)initializeVideoCaptureOutput;
- (BOOL)isBackCamera;
- (BOOL)isFormatMaxFrameRateSupported:(id)a0 frameRate:(int)a1;
- (BOOL)isFrameRateActive:(int)a0 captureFormat:(id)a1;
- (BOOL)isPortraitResolutionCaptureActive;
- (BOOL)isVideoDeviceInputSupportCFraming:(id)a0;
- (void)lockAVCaptureDeviceInputForConfiguration;
- (struct opaqueCMSampleBuffer { } *)newResizedFrame:(struct opaqueCMSampleBuffer { } *)a0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)observeBackgroundBlurOnDevice:(id)a0 observe:(BOOL)a1;
- (void)prepareSynchronizedOutputs:(id)a0;
- (void)processMetadataObjects:(id)a0;
- (void)processSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 captureOutput:(id)a1;
- (void)processSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 depthData:(id)a1 faceData:(id)a2 captureDevice:(id)a3 clock:(struct OpaqueCMClock { } *)a4;
- (void)processViewPointCorrection:(struct opaqueCMSampleBuffer { } *)a0 shouldProcess:(BOOL)a1;
- (void)resetDepthDataOutput;
- (void)resetViewPointLogging;
- (void)sendImageDataForSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 depthData:(id)a1 faceData:(id)a2 captureDevice:(id)a3 originalSize:(struct CGSize { double x0; double x1; })a4;
- (void)setBufferStatsBuffer:(struct tagVCVideoBufferStatistics { int x0; int x1; BOOL x2; double x3; double x4; double x5; double x6; double x7; } *)a0;
- (int)setCamera:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0 width:(int)a1 height:(int)a2 frameRate:(int)a3;
- (int)setFrameRateInternal:(int)a0 forceSourceFrameRateDidChange:(BOOL)a1;
- (void)setMetaDataObjectsDelegate;
- (void)setVideoCaptureOutputDelegate;
- (int)setVideoDeviceToWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (void)setVideoOrientationAndMirroredForDevice:(id)a0;
- (void)setVideoStabilization:(BOOL)a0;
- (void)setViewPointCorrectionEnabled:(BOOL)a0;
- (int)setWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (BOOL)shouldAddDepthData;
- (BOOL)shouldAddTrackedFacesData;
- (BOOL)shouldAdjustCaptureWithOrientation:(int)a0;
- (BOOL)shouldResizeWithCaptureSize:(struct CGSize { double x0; double x1; })a0 requestSize:(struct CGSize { double x0; double x1; })a1;
- (BOOL)shouldUseCameraVideoStabilization;
- (BOOL)shouldUseViewpointCorrection;
- (int)startCaptureWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (BOOL)supportsPortraitResolution;
- (BOOL)supportsViewpointCorrection;
- (void)tearDownSynchronizer;
- (void)unlockAVCaptureDeviceInputForConfiguration;
- (void)updateCameraZoomCapability;
- (void)updateCenterStageRegionOfInterestWithLock:(BOOL)a0;
- (void)updateDepthFrameRate;
- (void)updatePortraitResolutionCapability;
- (void)updateRenderProcessFrameRate:(id)a0;
- (void)updateVideoCaptureServerWithSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 frontCamera:(BOOL)a2 shouldMirrorFrontPreview:(BOOL)a3 isFromEffects:(BOOL)a4;

@end

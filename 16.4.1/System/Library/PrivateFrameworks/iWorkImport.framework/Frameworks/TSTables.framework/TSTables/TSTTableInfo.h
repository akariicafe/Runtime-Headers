@class TSTGroupBy, TSTConditionalStyleSet, TSTTableSortOrder, NSDictionary, TSTConcurrentMutableCellUIDSet, TSTPencilAnnotationOwner, TSTTableModel, TSTCellWillChangeDistributor, TSDStroke, TSCEMutableUIDSet, TSTCellStyle, TSTCategoryOrder, TSTOwnerUidMapper, TSTArchivedLayoutEngineBundle, TSTLayoutHint, TSCECalculationEngine, TSDFill, TSTTableTranslator, TSWPShapeStyle, TSCECoordMapper, TSWPParagraphStyle, TSTCategoryOwner, TSTColumnRowUIDMap, TSDInfoGeometry, TSTPivotRowColumnOrder, TSTStructuredTextImportRecord, TSTTableGroupSortOrderUID, NSArray, TSTPivotOwner, TSTHiddenStates, TSTConditionalStyleFormulaOwner, TSTHiddenStatesOwner, TSTSortRuleReferenceTracker, NSString, TSTTablePartitioner, TSTLayoutEngine, NSObject, TSPObject, TSTSummaryModel, TSTTableStyle, TSTStrokeSidecar, NSUUID, NSSet, TSTTableStylePreset, TSTTableFilterSet;
@protocol TSDInfo, TSDOwningAttachment;

@interface TSTTableInfo : TSDDrawableInfo <TSSPropertySource, TSDReplaceableMediaContainer, TSDReducibleImageContainer, TSDCompatibilityAwareMediaContainer, TSDSelectableHintMediaContainer, TSCECalculationEngineRegistration, TSDContainerInfo, TSDMixing, TSKModel, TSKSearchable, TSSPresetSource, TSSStyleClient, TSCEColumnRowUIDMapping, TSTCompatibilityVersionProviding, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableHiddenRowColumnProviding, TSTAdditionalHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSTTableStrokeProviding, TSWPStorageParent, TSWPTextStatisticsTrackerProvider, TSKAnnotationParent> {
    TSTTableModel *_tableModel;
    TSTConditionalStyleSet *_noRuleConditionalStyleSet;
    BOOL _needsFilterSetUpdated;
    BOOL _resetGroupingsOnUpgrade;
}

@property (class, readonly, nonatomic) NSSet *presetKinds;

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) TSCEMutableUIDSet *rowUIDsWithPendingGroupingChanges;
@property (nonatomic) BOOL migratingStylesOnly;
@property (retain, nonatomic) TSCEMutableUIDSet *rowUIDsForImportedGroupingRows;
@property (nonatomic) BOOL documentIsClosing;
@property (nonatomic) struct TSKUIDStructTract { struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _colIdList; struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _rowIdList; } tableTranslatorBaseMapForPasteboard;
@property (nonatomic) struct TSKUIDStructTract { struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _colIdList; struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _rowIdList; } tableTranslatorViewMapForPasteboard;
@property (retain, nonatomic) TSTArchivedLayoutEngineBundle *archivedLayoutEngineBundle;
@property (nonatomic) BOOL cachedAllAnnotations;
@property (nonatomic) long long formulaCoordSpace;
@property (retain, nonatomic) NSDictionary *dragAndDropDetails;
@property (nonatomic) BOOL isCopyContainingCategoryColumn;
@property (nonatomic) BOOL hasReference;
@property (retain, nonatomic) TSTTablePartitioner *partitioner;
@property (retain, nonatomic) TSTLayoutHint *overrideLayoutHint;
@property (retain, nonatomic) TSTLayoutEngine *layoutEngine;
@property (readonly, nonatomic, getter=isCategorized) BOOL categorized;
@property (readonly, nonatomic) BOOL hasCategoryRules;
@property (readonly, nonatomic) BOOL isRegisteredWithCalcEngine;
@property (nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly, nonatomic) NSUUID *nsTableUID;
@property (readonly, nonatomic) NSUUID *nsFilteringTableUID;
@property (readonly, nonatomic) TSTSummaryModel *summaryModel;
@property (readonly, nonatomic) TSTColumnRowUIDMap *columnRowUIDMap;
@property (readonly, nonatomic) TSTCategoryOrder *categoryOrder;
@property (readonly, nonatomic) BOOL isAPivotTable;
@property (readonly, nonatomic) BOOL isEmptyPivot;
@property (readonly, nonatomic) unsigned long long pivotSizeClass;
@property (readonly, nonatomic) unsigned long long pivotDataModelSizeClass;
@property (readonly, nonatomic) TSTTableModel *pivotDataModel;
@property (readonly, nonatomic) TSTTableModel *filteringTableModel;
@property (readonly, nonatomic) TSTTableTranslator *filteringTableTranslator;
@property (readonly, nonatomic) TSTPivotRowColumnOrder *pivotOrder;
@property (readonly, nonatomic) TSTPivotOwner *pivotOwner;
@property (readonly, nonatomic) BOOL isGroupedForRows;
@property (readonly, nonatomic) BOOL isGroupedForColumns;
@property (readonly, nonatomic) TSTGroupBy *groupByForRows;
@property (readonly, nonatomic) TSTGroupBy *groupByForColumns;
@property (readonly, nonatomic) unsigned long long numberOfRowLevels;
@property (readonly, nonatomic) unsigned long long numberOfColumnLevels;
@property (readonly, nonatomic) unsigned char maxRowLevel;
@property (readonly, nonatomic) unsigned char maxColumnLevel;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } tableUID;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } fromTableUID;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } fromGroupByUID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } filteringTableUID;
@property (readonly, nonatomic) TSTOwnerUidMapper *ownerUIDMapper;
@property (readonly, nonatomic) TSTOwnerUidMapper *identityOwnerUIDMapper;
@property (nonatomic) BOOL wasCut;
@property (readonly, nonatomic) unsigned int numberOfRows;
@property (readonly, nonatomic) unsigned short numberOfColumns;
@property (nonatomic) unsigned int numberOfHeaderRows;
@property (nonatomic) unsigned int numberOfHeaderColumns;
@property (readonly, nonatomic) unsigned int numberOfGrandTotalColumns;
@property (nonatomic) unsigned int numberOfFooterRows;
@property (readonly, nonatomic) unsigned int numberOfFooterOrGrandTotalRows;
@property (readonly, nonatomic) unsigned int minNumberOfHeaderColumns;
@property (readonly, nonatomic) unsigned int maxNumberOfHeaderColumns;
@property (nonatomic) BOOL headerRowsFrozen;
@property (nonatomic) BOOL headerColumnsFrozen;
@property (nonatomic) double defaultRowHeight;
@property (nonatomic) double defaultColumnWidth;
@property (retain, nonatomic) NSString *tableName;
@property (nonatomic) BOOL tableNameEnabled;
@property (nonatomic) double tableNameHeight;
@property (nonatomic) BOOL tableNameBorderEnabled;
@property (readonly, nonatomic) TSDStroke *tableNameBorderStroke;
@property (nonatomic) BOOL repeatingHeaderRowsEnabled;
@property (nonatomic) BOOL repeatingHeaderColumnsEnabled;
@property (readonly, nonatomic) int tableWritingDirection;
@property (nonatomic) long long contentWritingDirection;
@property (readonly, nonatomic) BOOL hasTableBorder;
@property (readonly, nonatomic) BOOL hasAlternatingRows;
@property (nonatomic) BOOL styleApplyClearsAll;
@property (retain, nonatomic) TSTTableStylePreset *tableStylePreset;
@property (readonly, nonatomic) BOOL hasMigratableStylesInCells;
@property (readonly, nonatomic) TSDFill *backgroundFill;
@property (readonly, nonatomic) TSDFill *bodyFill;
@property (readonly, nonatomic) TSDFill *headerColumnsFill;
@property (readonly, nonatomic) TSDFill *headerRowsFill;
@property (readonly, nonatomic) TSDFill *footerRowsFill;
@property (readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateAfterRecalc;
@property (readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateNonoverflowingAfterRecalc;
@property (readonly, nonatomic) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } conditionalStyleFormulaOwnerUID;
@property (readonly, nonatomic) TSTCategoryOwner *categoryOwner;
@property (readonly, nonatomic) TSTHiddenStatesOwner *hiddenStatesOwner;
@property (retain, nonatomic) TSTHiddenStates *hiddenStates;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } pivotSourceTableUID;
@property (readonly, nonatomic) NSUUID *pivotSourceNSTableUID;
@property (readonly, nonatomic) NSString *pivotSourceTableName;
@property (readonly, nonatomic) TSTTableInfo *pivotSourceTableInfo;
@property (readonly, nonatomic) BOOL pivotTableCanBeRefreshed;
@property (readonly, nonatomic) BOOL pivotSourceIsRangeBased;
@property (readonly, nonatomic) NSString *pivotSourceRangeName;
@property (readonly, nonatomic) TSTPencilAnnotationOwner *pencilAnnotationOwner;
@property (copy, nonatomic) TSTTableFilterSet *filterSet;
@property (nonatomic) struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } hiddenStatesUid;
@property (nonatomic) TSTTableGroupSortOrderUID *groupSortOrder;
@property (copy, nonatomic) TSTTableSortOrder *sortOrder;
@property (readonly, nonatomic) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property (readonly, nonatomic) TSTStrokeSidecar *strokeSidecar;
@property (readonly, nonatomic) TSTCellWillChangeDistributor *cellWillChangeDistributor;
@property (nonatomic) BOOL presetNeedsStrongOwnership;
@property (nonatomic) BOOL wasUnarchivedFromAProvidedTable;
@property (retain, nonatomic) TSTTableTranslator *translator;
@property (retain, nonatomic) TSCECoordMapper *fromTableCoordMapperForPasteboard;
@property (retain, nonatomic) TSTStructuredTextImportRecord *textImportRecord;
@property (readonly, nonatomic, getter=isReimportable) BOOL reimportable;
@property (readonly, nonatomic, getter=isNewlyImported) BOOL newlyImported;
@property (readonly, nonatomic) BOOL hasImportWarnings;
@property (readonly, nonatomic) BOOL isValidForInteraction;
@property (readonly, nonatomic) unsigned long long tableSizeClass;
@property (readonly, nonatomic) NSArray *rowHeights;
@property (readonly, nonatomic) NSArray *columnWidths;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } range;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bodyRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bodyColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bodyRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } filteringRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } filteringBodyRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } filteringBodyRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } headerRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } footerRowRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } headerColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } actualHeaderColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } topCornerRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } bottomCornerRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } categoryColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } baseColumnRange;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } filteringBaseColumnRange;
@property (readonly, nonatomic) BOOL wasRemovedFromDocument;
@property (retain, nonatomic) TSTGroupBy *groupBy;
@property (readonly, nonatomic) struct TSUModelColumnIndex { unsigned short x0; } numberOfBaseColumns;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseRows;
@property (readonly, nonatomic) struct TSUModelColumnIndex { unsigned short x0; } numberOfBaseHeaderColumns;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseHeaderRows;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseFooterRows;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfBaseBodyRows;
@property (readonly, nonatomic) struct TSUChromeColumnIndex { unsigned short x0; } numberOfChromeColumns;
@property (readonly, nonatomic) struct TSUChromeRowIndex { unsigned int x0; } numberOfChromeRows;
@property (readonly, nonatomic) struct TSUChromeColumnIndex { unsigned short x0; } numberOfChromeHeaderColumns;
@property (readonly, nonatomic) struct TSUChromeRowIndex { unsigned int x0; } numberOfChromeHeaderRows;
@property (readonly, nonatomic) struct TSUChromeRowIndex { unsigned int x0; } numberOfChromeFooterRows;
@property (readonly, nonatomic) BOOL hasHeaderColumnForAggregateNames;
@property (readonly, nonatomic) BOOL hasHeaderRowForAggregateNames;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } baseTableUID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } groupByUid;
@property (nonatomic) double categoryColumnWidth;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *childInfos;
@property (readonly, nonatomic) BOOL isMaster;
@property (copy, nonatomic) TSDInfoGeometry *geometry;
@property (nonatomic) NSObject<TSDInfo> *parentInfo;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (readonly, nonatomic, getter=isFloatingAboveText) BOOL floatingAboveText;
@property (readonly, nonatomic, getter=isAnchoredToText) BOOL anchoredToText;
@property (readonly, nonatomic, getter=isInlineWithText) BOOL inlineWithText;
@property (readonly, nonatomic, getter=isInlineWithTextWithWrap) BOOL inlineWithTextWithWrap;
@property (readonly, nonatomic, getter=isAttachedToBodyText) BOOL attachedToBodyText;
@property (nonatomic) BOOL matchesObjectPlaceholderGeometry;
@property (readonly, nonatomic) NSSet *referencedStyles;
@property (readonly, nonatomic) unsigned long long archivingCompatibilityVersion;
@property (retain, nonatomic) TSTTableStyle *tableStyle;
@property (retain, nonatomic) TSTCellStyle *bodyCellStyle;
@property (retain, nonatomic) TSTCellStyle *headerRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *headerColumnCellStyle;
@property (retain, nonatomic) TSTCellStyle *footerRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel1CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel2CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel3CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel4CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel5CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel1CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel2CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel3CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel4CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel5CellStyle;
@property (retain, nonatomic) TSWPParagraphStyle *bodyTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *headerRowTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *headerColumnTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *footerRowTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel1TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel2TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel3TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel4TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel5TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel1TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel2TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel3TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel4TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel5TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *tableNameStyle;
@property (retain, nonatomic) TSWPShapeStyle *tableNameShapeStyle;
@property (retain, nonatomic) TSTCellStyle *pivotBodySummaryRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *pivotBodySummaryColumnCellStyle;
@property (retain, nonatomic) TSTCellStyle *pivotHeaderColumnSummaryCellStyle;
@property (readonly, nonatomic) TSDStroke *defaultHorizontalBorderStroke;
@property (readonly, nonatomic) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property (readonly, nonatomic) TSDStroke *defaultVerticalBorderStroke;
@property (readonly, nonatomic) TSDStroke *bodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *bodyRowStroke;
@property (readonly, nonatomic) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property (readonly, nonatomic) TSDStroke *headerColumnBorderStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBorderStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *headerRowSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBorderStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *footerRowSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5InteriorStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotGroupHorizontalStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotGroupVerticalStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotDeEmphasisHorizontalStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotEmphasisVerticalStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnPivotGroupHorizontalStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnPivotGroupDeEmphasisStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnPivotSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *headerRowPivotGroupVerticalStroke;
@property (readonly, nonatomic) TSDStroke *headerRowPivotGroupDeEmphasisStroke;
@property (readonly, nonatomic) TSDStroke *headerRowPivotTitleStroke;
@property (readonly, nonatomic) TSDStroke *footerRowPivotGroupVerticalStroke;
@property (readonly, nonatomic) BOOL autoListRecognition;
@property (readonly, nonatomic) BOOL autoListTermination;
@property (readonly, nonatomic) BOOL textIsLinked;
@property (readonly, nonatomic) BOOL preventsComments;
@property (readonly, nonatomic) BOOL preventsChangeTracking;
@property (readonly, nonatomic) BOOL supportsMultipleColumns;
@property (readonly, nonatomic) BOOL storageChangesInvalidateWrap;
@property (readonly, nonatomic) BOOL supportsVerticalTextLayoutInChildStorages;
@property (readonly, nonatomic) BOOL supportsDropCapsInChildStorages;

+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(unsigned long long)a2;
+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(unsigned long long)a2 reservedCount:(unsigned long long)a3;
+ (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForTableArea:(unsigned long long)a0 givenTableSize:(struct { unsigned int x0; unsigned int x1; })a1 numberOfHeaderRows:(unsigned int)a2 numberOfFooterRows:(unsigned int)a3 numberOfHeaderColumns:(unsigned int)a4;
+ (id)geometryForPrototypeIndex:(long long)a0 withCanvasPoint:(struct CGPoint { double x0; double x1; })a1;
+ (unsigned int)numberOfColumnsForProtoIndex:(unsigned long long)a0;
+ (unsigned int)numberOfRowsForProtoIndex:(unsigned long long)a0;
+ (unsigned long long)tableAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 inTableWithHeaderColumns:(unsigned int)a1 headerRows:(unsigned int)a2 footerRows:(unsigned int)a3 totalRows:(unsigned int)a4;
+ (BOOL)needsObjectUUID;
+ (BOOL)canPartitionInline;
+ (void)performRewritesForInsertedTableInfos:(id)a0;
+ (id)tableInfoForTableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 withCalcEngine:(id)a1;
+ (void)ensureAllTablesAreRegisteredInDocumentRoot:(id)a0;
+ (void)upgradeTablesIfNeeded:(unsigned long long)a0 forDocumentRoot:(id)a1;
+ (BOOL)canPartitionForPrinting;
+ (id)displayNameForColumnName:(id)a0;
+ (id)localizedDescriptionForProtoIndex:(unsigned long long)a0;
+ (id)pivotDetailTableNameFromSourcePivotTableInfo:(id)a0 pivotSourceCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
+ (id)pivotTableNameForSourceTable:(id)a0;
+ (id)tablePrototypeWithIndex:(long long)a0 context:(id)a1 geometry:(id)a2 stylePreset:(id)a3;
+ (id)tablePrototypeWithIndex:(long long)a0 context:(id)a1 geometry:(id)a2 stylePreset:(id)a3 forTableInsertOnly:(BOOL)a4;
+ (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 inTableWithHeaderColumns:(unsigned int)a1 headerRows:(unsigned int)a2 footerRows:(unsigned int)a3 totalRows:(unsigned int)a4;
+ (void)upgradeSubOwnerUidForMapperOnCalcEngine:(id)a0;
+ (BOOL)validateNewName:(id)a0 forTable:(id)a1;

- (void)validate;
- (id).cxx_construct;
- (id)objectForProperty:(int)a0;
- (void)acceptVisitor:(id)a0;
- (void)willClose;
- (BOOL)isSelectable;
- (id)typeName;
- (id)allAnnotations;
- (unsigned long long)numberOfCells;
- (void)dealloc;
- (unsigned int)elementKind;
- (BOOL)checkState;
- (void)setGeometry:(id)a0;
- (Class)layoutClass;
- (id)resolver;
- (void).cxx_destruct;
- (void)didCopy;
- (id)childEnumerator;
- (void)setCategoryOrder:(id)a0;
- (id)copyWithContext:(id)a0;
- (unsigned int)numberOfHiddenRows;
- (id)annotationWithUUID:(id)a0;
- (void)removeRowsAtIndexes:(id)a0;
- (BOOL)containsProperty:(int)a0;
- (float)floatValueForProperty:(int)a0;
- (id)initWithContext:(id)a0 geometry:(id)a1;
- (Class)repClass;
- (id)initWithContext:(id)a0 otherTableInfo:(id)a1;
- (void)adoptStylesheet:(id)a0 withMapper:(id)a1;
- (id)bandedFillObject;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (id)cellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForTableArea:(unsigned long long)a0;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)a0 animationFilter:(id)a1;
- (void)clearPartitioner;
- (id)componentRootObject;
- (void)didReplaceTextsInStoragesWithPlaceHolderString;
- (Class)editorClass;
- (BOOL)hasMergeRanges;
- (id)initForTestingWithContext:(id)a0 rows:(unsigned int)a1 columns:(unsigned int)a2;
- (BOOL)isSafeToConvertToAttributedString;
- (BOOL)isSafeToConvertToImage;
- (BOOL)isSafeToConvertToText;
- (void)mapTableStylesToStylesheet:(id)a0 withMapper:(id)a1;
- (id)mergedContainedStorages;
- (id)mergedGridIndicesForDimension:(long long)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })minPopulatedCellRange;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (unsigned int)numberOfHiddenColumns;
- (unsigned int)numberOfUserHiddenColumns;
- (unsigned int)numberOfUserHiddenRows;
- (unsigned int)numberOfVisibleBodyColumns;
- (unsigned int)numberOfVisibleBodyRows;
- (id)presetKind;
- (void)replaceReferencedStylesUsingBlock:(id /* block */)a0;
- (void)scaleInfoGeometry:(struct CGSize { double x0; double x1; })a0;
- (id)searchForAnnotationsWithHitBlock:(id /* block */)a0;
- (void)setDrawableIsBeingCopied:(BOOL)a0;
- (void)setInsertionCenterPosition:(struct CGPoint { double x0; double x1; })a0;
- (void)setStyleNetwork:(id)a0;
- (void)shiftGeometryToIncludeTableNameHeight;
- (BOOL)supportsAttachedComments;
- (BOOL)supportsHyperlinks;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct CGSize { double x0; double x1; })targetSizeForImageData:(id)a0 associatedHint:(id)a1;
- (BOOL)textIsVerticalAtCharIndex:(unsigned long long)a0;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)a0;
- (id)textureDeliveryStylesLocalized:(BOOL)a0 animationFilter:(id)a1;
- (void)upgradeFromPreUFF;
- (BOOL)useBandedFill;
- (void)willCopyWithOtherDrawables:(id)a0;
- (BOOL)prohibitsModificationToChildren;
- (BOOL)requiresStagesBuildingInReverse;
- (void)saveToArchiver:(id)a0;
- (id)allRichTextStorages;
- (BOOL)allowsCaption;
- (BOOL)allowsTitle;
- (id)baseTableModel;
- (id)childEnumeratorForUserFlags:(unsigned long long)a0;
- (void)chooseUniqueNameInContainer:(id)a0 forPaste:(BOOL)a1 needsNewName:(BOOL)a2 avoidNames:(id)a3;
- (id)infoForSelectionPath:(id)a0;
- (BOOL)isEquivalentForCrossDocumentPasteMasterComparison:(id)a0 objectComparisonBlock:(id /* block */)a1;
- (void)loadFromArchive:(const void *)a0 unarchiver:(id)a1;
- (void)loadFromUnarchiver:(id)a0;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (void)saveToArchive:(void *)a0 archiver:(id)a1;
- (void)setPrimitiveGeometry:(id)a0;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)a0;
- (BOOL)suppliesFinalTextures;
- (BOOL)contentsAreRightToLeft;
- (void)enumerateAllAnnotationsInModelWithHitBlock:(id /* block */)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })formulaOwnerUID;
- (id)indexesOfVisibleRowsInRowRange:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForColumnIndex:(unsigned short)a0;
- (BOOL)findChartableRangesFromTableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 getBodyRange:(out struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a1 headerColumnRange:(out struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a2 headerRowRange:(out struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a3;
- (id)formulaOwner;
- (BOOL)hasCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)indexesForNonSummaryBodyRows;
- (id)indexesForSummaryRows;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)a0;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 usingBlock:(id /* block */)a3;
- (void)iterateCellsInRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 usingBlock:(id /* block */)a3;
- (unsigned int)numberOfCategoryColumns;
- (unsigned long long)numberOfComments;
- (id)objectToArchiveInDependencyTracker;
- (unsigned short)ownerKind;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })referenceToHiddenStateFromColumn:(unsigned short)a0 toColumn:(unsigned short)a1;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })referenceToHiddenStateFromRow:(unsigned int)a0 toRow:(unsigned int)a1;
- (BOOL)registerLast;
- (void)registerWithCalcEngineForDocumentLoad:(id)a0 ownerKind:(unsigned short)a1;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowUIDForRowIndex:(unsigned int)a0;
- (void)unregisterFromCalcEngine:(id)a0;
- (int)setCellsWithCellMap:(id)a0 ignoreFormulas:(BOOL)a1 skipDirtyingNonFormulaCells:(BOOL)a2;
- (void)applyCellMap:(id)a0 outPrunedCellMap:(id)a1 outInverseCellMap:(id)a2 options:(unsigned long long)a3 stylesContainer:(id)a4;
- (BOOL)canCommentInCaptionOrTitle;
- (struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })cellUIDForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasDeferredImportActions;
- (void)iterateCellsWithFlags:(unsigned long long)a0 searchFlags:(unsigned long long)a1 usingBlock:(id /* block */)a2;
- (void)processDeferredImportActions;
- (void)reassignPasteboardCustomFormatKeys;
- (void)registerAllFormulasWithCalculationEngine:(id)a0;
- (BOOL)shouldCancelScrollingToSelectionPath:(id)a0 forChanges:(id)a1;
- (void)upgradeFormatsForCustomFormatListU2_0;
- (id)cellRangeName:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 usedSymbolicName:(out BOOL *)a1;
- (id)indexesForNonSummaryBodyColumns;
- (BOOL)isCategoryColumnUneditableCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)mergeCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1;
- (void)p_setFilterSet:(id)a0;
- (void)p_setupTableModelforStockSwatch;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })prunedColumnUIDsFromColumnUIDs:(const void *)a0;
- (void)resetPivotOrder;
- (const void *)rowUIDs;
- (void)setStroke:(id)a0 forBottomOfRow:(unsigned int)a1 order:(int)a2;
- (Class)tableModelClass;
- (id)allRowGroupUIDs;
- (void)enumerateCellStringsUsingBlock:(id /* block */)a0;
- (id)indexesOfHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)newCell;
- (void)p_setFormulaWithSymbolCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 andAttributeCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rowRangeUnderSummaryOrLabelRow:(unsigned int)a0;
- (id)strokeLayerForLeftSideOfColumn:(unsigned short)a0;
- (unsigned long long)tableAreaForDroppingRowAtIndex:(unsigned int)a0;
- (double)widthOfColumnAtIndex:(unsigned short)a0 isDefault:(out BOOL *)a1;
- (id)UIDSetForIndexes:(id)a0 isRows:(BOOL)a1;
- (void)_correctAndCheckStateSuppressingAssertions:(BOOL)a0;
- (id)_initWithContext:(id)a0 flatteningFromComplexInfo:(id)a1 cellRegion:(id)a2 waitForCalcEngine:(BOOL)a3 flatteningOptions:(long long)a4 isSnapshot:(BOOL)a5;
- (id)_initWithContext:(id)a0 fromSourceInfo:(id)a1 cellRegion:(id)a2 tableModel:(id)a3 waitForCalcEngine:(BOOL)a4 formulaCoordSpace:(long long)a5;
- (void)_setCellBordersFlatteningFromComplexInfo:(id)a0 sourceRegion:(id)a1;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (id)additionalObjectsToCopy;
- (unsigned char)aggregateTypeForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 atGroupLevel:(unsigned char)a1;
- (id)allBodyValuesAsPregArgDataListForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)allColumnGroupUIDs;
- (id)allColumnUIDsAtGroupLevel:(unsigned char)a0 withFilter:(id /* block */)a1;
- (id)allRowUIDsAtGroupLevel:(unsigned char)a0 withFilter:(id /* block */)a1;
- (BOOL)anyHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 forAction:(unsigned char)a1;
- (id)applyCellDiff:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 migrationMap:(id)a2 inverseCellDiff:(id)a3 defaultCellStyle:(id)a4 defaultTextStyle:(id)a5;
- (id)applyCellDiffMap:(id)a0 migrationHelper:(id)a1 updateProperties:(id)a2;
- (id)applyCollapseExpandState:(id)a0 outUndoState:(id *)a1;
- (id)applyConcurrentCellMapToBaseTable:(id)a0 options:(unsigned long long)a1 requestInverseMap:(BOOL)a2 requestPruneMap:(BOOL)a3 stylesContainer:(id)a4 migrationHelper:(id)a5;
- (void)applyGroupingColumns:(id)a0;
- (void)applyPivotWithColumns:(id)a0 rows:(id)a1 aggregates:(id)a2 flatteningDimension:(long long)a3 optionsMap:(id)a4 pivotRowColumnRuleChangeUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a5 pivotAggregateRuleChangeUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a6;
- (void)applyWritingDirection:(int)a0 toCell:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (void)assertCollaborationConvergence;
- (void)bakeFormulas;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })bodyRangeForLowestLevelGroupEnclosingCellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)canTranspose;
- (unsigned short)categoryColumnIndex;
- (id)categoryRefReferringToCellRef:(const void *)a0;
- (id)cellAfterApplyDiff:(id)a0 toCell:(id)a1 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a2 migrationMap:(id)a3 inverseCellDiff:(id)a4 concurrentStylesheet:(id)a5 defaultCellStyle:(id)a6 defaultTextStyle:(id)a7;
- (id)cellBorderAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)cellExistsAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDAboveCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDBelowCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDForCellContainingRichTextStorage:(id)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (BOOL)cellIDIsLegal:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDLeftOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })cellIDRightOfCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)cellIteratorWithFlags:(unsigned long long)a0 searchFlags:(unsigned long long)a1;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2;
- (id)cellIteratorWithRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2;
- (id)cellIteratorWithRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 clampingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a3;
- (id)cellMapForRegion:(id)a0 uidBased:(BOOL)a1 suppressMergeContent:(BOOL)a2 useCategoriesWildcards:(BOOL)a3;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForUIDRange:(const void *)a0;
- (id)cellRegionForTableStyleArea:(unsigned long long)a0;
- (id)cellRegionForUIDRange:(const void *)a0;
- (id)cellRegionFromCellUIDList:(id)a0;
- (id)cellRegionFromCellUIDList:(id)a0 includeLabelsWithSummaries:(BOOL)a1 didAddLabels:(BOOL *)a2;
- (id)cellRegionFromCellUIDLookupList:(id)a0;
- (id)cellRegionFromCellUIDLookupList:(id)a0 includeLabelsWithSummaries:(BOOL)a1 didAddLabels:(BOOL *)a2;
- (id)cellRegionFromCellUIDRegion:(id)a0;
- (id)cellStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfColumnAtIndex:(unsigned short)a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfRowAtIndex:(unsigned int)a0 isDefault:(out BOOL *)a1;
- (id)cellTractRefForUIDRectRef:(id)a0;
- (struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })cellUIDForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 useCategoriesWildcards:(BOOL)a1;
- (id)cellUIDListFromCellRegion:(id)a0;
- (id)cellUIDListFromCellRegion:(id)a0 useCategoriesWildcards:(BOOL)a1;
- (struct TSKUIDStructTract { struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; } x0; struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; } x1; })cellUIDRangeForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)cellUIDRegionFromCellRegion:(id)a0;
- (id)cellValueFromCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (unsigned char)cellValueTypeAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (unsigned char)cellValueTypeAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)cellValueViewStringAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (id)changeDescriptorsForReorganizingFromRowUids:(const void *)a0 toRowUids:(const void *)a1;
- (id)characterFillAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (BOOL)checkStateForArchiving:(BOOL)a0;
- (void)chooseUniqueNameInContainer:(id)a0 forPaste:(BOOL)a1;
- (void)chooseUniqueNameInContainer:(id)a0 forPaste:(BOOL)a1 needsNewName:(BOOL)a2;
- (id)chromeLabelForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)chromeLabelForColumn:(unsigned short)a0;
- (id)chromeLabelForRow:(unsigned int)a0;
- (void)clearCommentHostingMapForCommentStorage:(id)a0;
- (void)clearFromGroupByUID;
- (void)clearFromTableUID;
- (id)collapseSummaryGroupUIDs:(id)a0;
- (unsigned int)columnAggregateGroupSize;
- (id)columnDisplayNameForCategoryLevel:(unsigned char)a0;
- (unsigned short)columnIndexForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned short)columnIndexForGroupingColumn:(id)a0;
- (unsigned short)columnIndexForUUIDBytes:(unsigned char[16])a0;
- (id)columnIndexesForUIDs:(const void *)a0;
- (id)columnNameForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 restrictToBodyRange:(BOOL)a1;
- (id)columnNameForColumnIndex:(unsigned short)a0;
- (id)columnNameForColumnIndex:(unsigned short)a0 withFallbackFormat:(id)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })columnRangeForUIDs:(const void *)a0;
- (const void *)columnUIDs;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDsForColumnIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDsForColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)columnUuids;
- (id)commandForSettingTableDirection:(int)a0 icc:(id)a1;
- (id)commentHostingAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)commentHostingAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 forCommentStorage:(id)a1;
- (id)commentHostingAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 forCommentStorage:(id)a1 updateCommentMaps:(BOOL)a2;
- (void)commitPivotChanges;
- (id)compatibilityCheckerForData:(id)a0 associatedHint:(id)a1;
- (double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)a0;
- (void)computeDefaultRowHeight;
- (id)concurrentCellMapForRegion:(id)a0 suppressMergeContent:(BOOL)a1 gatherCellBorders:(BOOL)a2;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)convertCellUIDLookupList:(id)a0 toCellRangeVector:(void *)a1 prunedSummaryCellUIDs:(void *)a2;
- (void)convertFormulasToUidForm:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 preserveHostCell:(BOOL)a2;
- (id)createDetailTableForPivotTableCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (id)defaultCellStyleForTableStyleArea:(unsigned long long)a0;
- (void)defaultStyleHandlesForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 useSoftDefault:(BOOL)a1 styleDefaultsCache:(id)a2 outCellStyleHandle:(id *)a3 outTextStyleHandle:(id *)a4;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (id)defaultTextStyleForTableStyleArea:(unsigned long long)a0;
- (void)dirtyFilterState;
- (id)displayableDescriptiveName;
- (id)duplicateFilterSet;
- (id)duplicateFilterSetInUidForm;
- (void)enableFilterSet:(BOOL)a0;
- (void)enumerateCellStringsForRows:(unsigned int)a0 rowCount:(unsigned int)a1 usingBlock:(id /* block */)a2;
- (void)enumerateMergesIntersectingCellRegion:(id)a0 usingBlock:(id /* block */)a1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })expandCellRangeToCoverMergedCells:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)expandCellRegionToCoverMergedCells:(id)a0;
- (id)expandSummaryGroupUIDs:(id)a0;
- (id)fillForColumn:(unsigned short)a0;
- (id)fillForRow:(unsigned int)a0;
- (void)filterSetUpdated;
- (id)filteringColumnNameForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (id)filteringColumnNameForColumnIndex:(unsigned short)a0;
- (id)filteringDisplayColumnNameForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })firstUidFromUIDSet:(id)a0 isRows:(BOOL)a1;
- (void)flattenGroupValuesIfNeededForCell:(id)a0 viewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 summaryAndLabelRows:(id)a2 categoryColumns:(id)a3;
- (id)formulaAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)geometryForRTLTableWithGeometry:(id)a0;
- (int)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (int)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 holdingReadLockWithAccessController:(id)a2;
- (int)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 suppressCellBorder:(BOOL)a2;
- (int)getCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (int)getCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 suppressCellBorder:(BOOL)a2;
- (int)getDefaultCell:(out id)a0 forCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (int)getDefaultCell:(out id)a0 forCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (int)getDefaultCell:(id)a0 forTableStyleArea:(unsigned long long)a1;
- (void)getTextPropertiesWithCell:(id)a0 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 wraps:(BOOL *)a2 alignment:(long long *)a3 verticalAlignment:(int *)a4 padding:(id *)a5;
- (void)getUUIDBytes:(unsigned char[16])a0 forColumnIndex:(unsigned short)a1;
- (void)getUUIDBytes:(unsigned char[16])a0 forRowIndex:(unsigned int)a1;
- (int)getValue:(out struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (unsigned char)groupLevelAtLabelRow:(unsigned int)a0;
- (unsigned char)groupLevelAtRow:(unsigned int)a0;
- (unsigned char)groupLevelAtSummaryColumn:(unsigned short)a0;
- (unsigned char)groupLevelAtSummaryRow:(unsigned int)a0;
- (unsigned char)groupLevelForGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (long long)groupingArrowStateAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (unsigned long long)groupingColumnLevelCountForColumn:(unsigned short)a0;
- (BOOL)groupingTypesAreUniqueForColumn:(unsigned short)a0;
- (void)handlePivotSorting:(BOOL)a0;
- (BOOL)hasActiveFilters;
- (BOOL)hasCommentAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasFilterRulesAffectingInsertRows;
- (BOOL)hasFilterRulesInBaseColumns:(id)a0;
- (BOOL)hasFormulaAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasFormulaAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasFormulas;
- (BOOL)hasGroupingArrowAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasGroupingArrowInCellRegion:(id)a0;
- (BOOL)hasHiddenColumnAtIndex:(unsigned short)a0;
- (BOOL)hasHiddenColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (BOOL)hasHiddenColumnsOrRows;
- (BOOL)hasHiddenRowAtIndex:(unsigned int)a0;
- (BOOL)hasHiddenRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (BOOL)hasMergeFragmentAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasMergeRangeSpanningRowsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)hasMergeRangesIntersectingCellRegion:(id)a0;
- (BOOL)hasRangeSpanningRowsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)hasSummaryRowsInRegion:(id)a0;
- (BOOL)hasUntitledTableNameFormat;
- (BOOL)hasUsefulPivotSourceCellsInBodyRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (double)heightOfRowAtIndex:(unsigned int)a0 isDefault:(out BOOL *)a1;
- (BOOL)hideColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (BOOL)hideRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (unsigned char)hidingActionForColumnAtIndex:(unsigned short)a0;
- (unsigned char)hidingActionForRowAtIndex:(unsigned int)a0;
- (void)importDeferredRemoveGroupingRowsAtIndexes:(id)a0;
- (unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)a0;
- (unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)a0;
- (unsigned int)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowAfterRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned int)a0;
- (unsigned int)indexOfVisibleRowBeforeRowAtIndex:(unsigned int)a0;
- (id)indexesForBodyAndFooterRows;
- (id)indexesForBodyRowsInGroupWithRowAtIndex:(unsigned int)a0;
- (id)indexesForCategoryColumns;
- (id)indexesForCategoryColumnsInRegion:(id)a0;
- (id)indexesForColumnsContainedByGroupUIDs:(id)a0;
- (id)indexesForGrandTotalColumns;
- (id)indexesForGrandTotalRows;
- (id)indexesForGroupingColumns;
- (id)indexesForGroupingColumnsInRegion:(id)a0;
- (id)indexesForLabelRows;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)a0 inRegion:(id)a1;
- (id)indexesForLabelRowsInRegion:(id)a0;
- (id)indexesForLabelRowsUpToGroupLevel:(unsigned char)a0 omitGroupsWithUids:(const void *)a1;
- (id)indexesForLeadingColumns;
- (id)indexesForLeadingColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingColumnsInRegion:(id)a0;
- (id)indexesForLeadingRows;
- (id)indexesForLeadingRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingRowsInRegion:(id)a0;
- (id)indexesForLeadingSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingSummaryRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForRowsContainedByGroupUIDs:(id)a0;
- (id)indexesForSummaryAndLabelRows;
- (id)indexesForSummaryAndLabelRowsInRegion:(id)a0;
- (id)indexesForSummaryColumns;
- (id)indexesForSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForSummaryColumnsFromGroupLevel:(unsigned char)a0 toGroupLevel:(unsigned char)a1;
- (id)indexesForSummaryColumnsInRegion:(id)a0;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)a0 inRegion:(id)a1;
- (id)indexesForSummaryRowsFromGroupLevel:(unsigned char)a0 toGroupLevel:(unsigned char)a1;
- (id)indexesForSummaryRowsInRegion:(id)a0;
- (id)indexesForSummaryRowsUpToGroupLevel:(unsigned char)a0 omitGroupsWithUids:(const void *)a1;
- (id)indexesOfCollapsedRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfFilteredColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfFilteredRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfUserHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfUserHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfUserVisibleRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleColumnsInCellRegion:(id)a0;
- (id)indexesOfVisibleColumnsInColumnRange:(id)a0;
- (id)indexesOfVisibleRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)indexesOfVisibleRowsInCellRegion:(id)a0;
- (id)initAsDetailTableWithContext:(id)a0 sourcePivotTableInfo:(id)a1 pivotSourceCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (id)initPivotTableWithContext:(id)a0 sourceTableInfo:(id)a1;
- (id)initPivotTableWithContext:(id)a0 sourceTableInfo:(id)a1 sourceBodyRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2 sourceHeaderRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (id)initPivotTableWithContext:(id)a0 sourceTableInfo:(id)a1 sourceBodyRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a2 sourceHeaderRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 optionalDataModel:(id)a4;
- (id)initWithContext:(id)a0 fromSourceInfo:(id)a1 cellRegion:(id)a2 waitForCalcEngine:(BOOL)a3 flattenCategories:(long long)a4 isSnapshot:(BOOL)a5;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3 stylePreset:(id)a4;
- (id)initWithContext:(id)a0 geometry:(id)a1 rows:(unsigned int)a2 columns:(unsigned int)a3 stylePreset:(id)a4 styles:(id)a5;
- (void)insertColumnsAtIndex:(unsigned short)a0 count:(unsigned int)a1 addBefore:(BOOL)a2;
- (int)insertColumnsAtIndex:(unsigned short)a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (void)insertRowsAtIndex:(unsigned int)a0 count:(unsigned int)a1 addBefore:(BOOL)a2;
- (int)insertRowsAtIndex:(unsigned int)a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (int)insertRowsAtIndex:(unsigned int)a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3 unsetFilterHidingAction:(BOOL)a4;
- (BOOL)isCategoryAnyKindOfCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategoryColumn:(unsigned short)a0;
- (BOOL)isCategoryGroupValueCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategoryGroupValueLabelCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCategoryGroupingColumn:(unsigned short)a0;
- (BOOL)isCategoryLabelCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isCellRangeHidden:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)isGroupCollapsedAndVisible:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 dimension:(long long)a1;
- (BOOL)isGroupOrParentsCollapsed:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 dimension:(long long)a1;
- (BOOL)isGroupingColumnCollapsed:(unsigned short)a0;
- (BOOL)isGroupingColumnCollapsedAndVisible:(unsigned short)a0;
- (BOOL)isGroupingRowCollapsed:(unsigned int)a0;
- (BOOL)isGroupingRowCollapsedAndVisible:(unsigned int)a0;
- (BOOL)isLabelRow:(unsigned int)a0;
- (BOOL)isPivotAnyKindOfCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isPivotGrandTotalColumn:(unsigned short)a0;
- (BOOL)isPivotGrandTotalRow:(unsigned int)a0;
- (BOOL)isPivotLeadingColumn:(unsigned short)a0;
- (BOOL)isPivotLeadingRow:(unsigned int)a0;
- (BOOL)isPivotTrailingAligned:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isPivotUnwrapped:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isRegisteredWithCalcEngine:(id)a0;
- (BOOL)isSafeToConvertToImageForImagePaste;
- (BOOL)isSingleCellOrMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)isSummaryCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)isSummaryColumn:(unsigned short)a0;
- (BOOL)isSummaryOrLabelRow:(unsigned int)a0;
- (BOOL)isSummaryRow:(unsigned int)a0;
- (BOOL)isValidMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)iterateCellsInRegion:(id)a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 clampingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a3 usingBlock:(id /* block */)a4;
- (Class)iteratorClass;
- (double)labelRowHeightAtCategoryLevel:(unsigned char)a0;
- (id)labelValueViewStringAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (double)layoutEngineEffectiveTableNameHeight;
- (void)loadAllLazyReferences;
- (id)mappingForSortingColumns:(id)a0 withRules:(id)a1;
- (id)mappingForSortingRows:(id)a0 withRules:(id)a1;
- (id)mappingFromRowUids:(const void *)a0 toRowUids:(const void *)a1;
- (int)maxStrokeOrder;
- (long long)mediaCompatibilityTypeForData:(id)a0 associatedHint:(id)a1;
- (id)mergeActionForRegion:(id)a0;
- (id)mergeActionForRegion:(id)a0 nonOriginPartialsOnly:(BOOL)a1;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })mergeOriginForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })mergeRangeAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct vector<TSUCellRect, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; } x2; })mergeRangesAndCrumbsIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct vector<TSUCellRect, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; } x2; })mergeRangesIntersectingCellRegion:(id)a0;
- (struct vector<TSUCellRect, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; } x2; })mergeRangesIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRegion:(id)a0;
- (id)mergesIntersectingCellRegion:(id)a0;
- (id)mergesIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)modifiedTextPropertiesForCategoryOrPivotCellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 wraps:(BOOL *)a1 padding:(id *)a2 alignment:(long long *)a3;
- (void)moveColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(unsigned short)a1;
- (void)moveRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toRowIndex:(unsigned int)a1;
- (id)mutableColumnIndexesForUIDs:(const void *)a0;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1 notFoundUIDs:(id)a2;
- (id)mutableRowIndexesForUIDs:(const void *)a0;
- (BOOL)needsFilterFormulaRewriteForImport;
- (id)newCellWithLocale:(id)a0;
- (id)noRuleConditionalStyleSet;
- (void)notifyAboutStructuredTextImportState;
- (void)notifyTableOfNewResults;
- (unsigned int)numberOfCategoryLevels;
- (unsigned int)numberOfGroupLevelsShowingLabelsUnderGroupAtIndex:(unsigned int)a0;
- (unsigned int)numberOfHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned int)numberOfHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned long long)numberOfPopulatedCells;
- (unsigned int)numberOfUserHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (unsigned int)numberOfUserVisibleBodyRows;
- (unsigned int)numberOfVisibleBaseBodyRows;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })orderedColumnUidsFromUids:(const void *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })orderedRowUidsFromUids:(const void *)a0;
- (void)p_bakeMixedCellStrokesIntoTable:(id)a0 outgoingTable:(id)a1 incomingTable:(id)a2 fraction:(double)a3;
- (id)p_cellRegionFromWildcardCellUIDs:(struct vector<TSKUIDStructCoord, std::allocator<TSKUIDStructCoord>> { struct TSKUIDStructCoord *x0; struct TSKUIDStructCoord *x1; struct __compressed_pair<TSKUIDStructCoord *, std::allocator<TSKUIDStructCoord>> { struct TSKUIDStructCoord *x0; } x2; })a0 includeLabelsWithSummaries:(BOOL)a1 didAddLabels:(BOOL *)a2;
- (int)p_fillPropertyForStyle:(id)a0;
- (id)p_fillResourceWithFilename:(id)a0;
- (void)p_initializeDefaultHeight:(double)a0 andWidth:(double)a1;
- (void)p_iterateCellsAndTerminateWithIterator:(id)a0 usingBlock:(id /* block */)a1;
- (id)p_layoutEngineCreateIfNeeded:(BOOL)a0;
- (id)p_mappingForSortingRowsOrColumns:(id)a0 withRules:(id)a1 dimension:(long long)a2;
- (id)p_negativeImageFill;
- (void)p_performCommentStorageDOLC:(id)a0;
- (id)p_popupItemsForStrings:(id)a0;
- (id)p_positiveImageFill;
- (void)p_postCommentNotificationFromDiff:(id)a0 inverseDiff:(id)a1 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (void)p_setFillOnCell:(id)a0 positive:(BOOL)a1;
- (void)p_setFormula:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)p_setFormulaWithSymbolString:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)p_setPopupMenuOnCell:(id)a0 withItems:(id)a1 andSelectedIndex:(double)a2;
- (void)p_setupTableModelforNewForm;
- (void)p_setupTableModelforStockPrototype;
- (void)p_updateStorageParentInfoForModels;
- (int)parseNumberFromTableName:(id)a0;
- (id)peerCellRegionForCellRegion:(id)a0;
- (id)performActionReturningInverse:(id)a0 formulaReplacer:(id)a1;
- (void)performReadForOneOffFormulaEvaluation:(id)a0 forCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (id)pivotDataLocalizedColumnNameAtDataColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (id)pivotHeaderColumnDisplayNameAtIndex:(unsigned short)a0;
- (id)pivotHeaderRowDisplayNameAtIndex:(unsigned int)a0;
- (id)pivotLeadingColumnDisplayNameAtIndex:(unsigned short)a0;
- (id)pivotLeadingRowDisplayNameAtIndex:(unsigned int)a0;
- (id)populatedCategoryGroupLevelsInColumn:(unsigned short)a0;
- (void)postCommentNotificationForStorage:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 notificationKey:(id)a2;
- (void)prepareForPasteWithSourceOffset:(struct TSUColumnRowOffset { int x0; int x1; })a0 bakeFormulas:(BOOL)a1;
- (void)prepareToApplyConcurrentCellMap:(id)a0;
- (id)processRowsWithPendingGroupingChangesAndReturnAffectedCellRegion;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })prunedRowUIDsFromRowUIDs:(const void *)a0;
- (void)rearrangeWithMapping:(id)a0;
- (id)regionForValueOrCommentCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)regionSubtractingCategoryColumnsAndRows:(id)a0;
- (void)registerAllFormulasWithCalculationEngine:(id)a0 wasCrossDocumentPaste:(BOOL)a1 wasUndo:(BOOL)a2;
- (int)registerWithCalcEngine:(id)a0;
- (void)releaseLayoutEngine;
- (void)remapTableUIDsInFormulasWithMap:(const void *)a0 calcEngine:(id)a1 bakeForBadRefs:(BOOL)a2;
- (void)removeAnnotationsFromColumnsAtIndexes:(id)a0;
- (void)removeAnnotationsFromRowsAtIndexes:(id)a0;
- (void)removeColumnsAtIndex:(unsigned short)a0 count:(unsigned int)a1;
- (void)removeColumnsAtIndexes:(id)a0;
- (int)removeCommentStorageAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)removeReturningInverseForRegion:(id)a0;
- (void)removeRowsAtIndex:(unsigned int)a0 count:(unsigned int)a1;
- (void)resetCategoriesGroupByForOwnerRemapping;
- (void)resetCellsForNewPivotRules;
- (void)resetSortRuleReferenceTrackerForInsert;
- (void)resetViewMap;
- (unsigned int)rowAggregateGroupSize;
- (unsigned int)rowIndexForRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned int)rowIndexForUUIDBytes:(unsigned char[16])a0;
- (id)rowIndexesForUIDs:(const void *)a0;
- (id)rowNameForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 restrictToBodyRange:(BOOL)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rowRangeForUIDs:(const void *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDsForRowIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDsForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)rowUuids;
- (void)setAggregateType:(unsigned char)a0 forColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1 atGroupLevel:(unsigned char)a2;
- (int)setCell:(id)a0 atCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (int)setCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3;
- (int)setCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3 formulaReplacer:(id)a4;
- (int)setCellStyle:(id)a0 ofColumnAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (int)setCellStyle:(id)a0 ofRowAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)setColumnRowUIDMap:(id)a0;
- (int)setCommentStorage:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (void)setFilterSetType:(int)a0;
- (void)setFormulaOwnerUIDsWithMap:(id)a0 shouldStealReferences:(BOOL)a1;
- (void)setHeight:(double)a0 ofRowAtIndex:(unsigned int)a1;
- (void)setIsCategoryEnabled:(BOOL)a0;
- (void)setLabelRowHeight:(double)a0 atCategoryLevel:(unsigned char)a1;
- (void)setNeedsFilterFormulaRewriteForImport:(BOOL)a0;
- (void)setShouldUseWideRows:(BOOL)a0;
- (void)setStroke:(id)a0 forBottomOfRow:(unsigned int)a1 order:(int)a2 columnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forLeftOfColumn:(unsigned short)a1 order:(int)a2;
- (void)setStroke:(id)a0 forLeftOfColumn:(unsigned short)a1 order:(int)a2 rowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forRightOfColumn:(unsigned short)a1 order:(int)a2;
- (void)setStroke:(id)a0 forRightOfColumn:(unsigned short)a1 order:(int)a2 rowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forTopOfRow:(unsigned int)a1 order:(int)a2;
- (void)setStroke:(id)a0 forTopOfRow:(unsigned int)a1 order:(int)a2 columnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setSummaryModel:(id)a0;
- (void)setSummaryRowHeight:(double)a0 atCategoryLevel:(unsigned char)a1;
- (int)setTextStyle:(id)a0 ofColumnAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (int)setTextStyle:(id)a0 ofRowAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(unsigned short)a1;
- (void)setupTableModelForPrototypeIndex:(long long)a0 forTableInsertOnly:(BOOL)a1;
- (BOOL)shouldDisplaySummaryLabelRowAtGroupLevel:(unsigned char)a0;
- (BOOL)shouldTruncateSelectionPathAtInfoForCaptionCommand;
- (BOOL)shouldUseWideRows;
- (BOOL)showColumnAtIndex:(unsigned short)a0 forAction:(unsigned char)a1;
- (BOOL)showRowAtIndex:(unsigned int)a0 forAction:(unsigned char)a1;
- (id)shrinkReturningInverseForRegion:(id)a0;
- (id)sortTagsForSortingColumns:(id)a0 byRows:(const void *)a1;
- (id)sortTagsForSortingRows:(id)a0 byColumns:(const void *)a1;
- (void)startPivotChanges;
- (id)stringAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (id)strokeExporterReturningDefaultStrokes:(BOOL)a0;
- (id)strokeLayerForBottomOfRow:(unsigned int)a0;
- (id)strokeLayerForRightSideOfColumn:(unsigned short)a0;
- (id)strokeLayerForTopOfRow:(unsigned int)a0;
- (double)summaryRowHeightAtCategoryLevel:(unsigned char)a0;
- (BOOL)supportsRichTextUndoAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)swapRowAtIndex:(unsigned int)a0 withRowAtIndex:(unsigned int)a1;
- (unsigned long long)tableAreaForColumn:(unsigned short)a0;
- (unsigned long long)tableAreaForRow:(unsigned int)a0;
- (id)tableAreasForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })tableRangeCoordinate;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (unsigned long long)tableStyleAreaForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (unsigned long long)tableStyleAreaForRow:(unsigned int)a0;
- (id)textStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)textStyleForCellWithEmptyStyleAtCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfColumnAtIndex:(unsigned short)a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfRowAtIndex:(unsigned int)a0 isDefault:(out BOOL *)a1;
- (BOOL)unmergeCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)updateCalcEngineForTableSize;
- (void)updatePivotDataModel:(id)a0 pivotDataRefreshUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1 pivotDataRefreshTimestamp:(double)a2 uidBodyTract:(struct TSKUIDStructTract { struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; } x0; struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; } x1; })a3;
- (void)updateTableRowColumnStylesWithBlock:(id /* block */)a0;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)a0;
- (void)upgradeHiddenStates;
- (struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; })valueToUseForSummaryCellFormulaError;
- (BOOL)verifyPivotTableConnections;
- (BOOL)verifySubOwnerUIDsUsed;
- (void)willMakeGroupingChangesInRowUIDs:(id)a0;
- (BOOL)writeCellIDsInCellUIDList:(id)a0 toVector:(void *)a1 prunedCellUIDs:(void *)a2;
- (int)writingDirectionForCellwithTableDefault:(id)a0;

@end

@class TSTLayoutEngine, TSTLayoutSpaceBundle, TSTTableInfo, NSString, TSWPPadding, TSWPLayout, TSUPointerKeyDictionary, TSWPStorage, TSTLayoutHint;

@interface TSTLayout : TSWPTextHostLayout <TSWPStyleProviding, TSWPColumnMetrics, TSWPLayoutParent, TSWPStorageObserver> {
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCanvasVisibleRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCanvasSafeRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mPreviousVisibleStrokeFrame;
    BOOL mTabsVisible;
    BOOL mTableNameVisibilityIsValid;
    BOOL mTableNameVisible;
    struct { double tableNameHeight; struct CGSize { double width; double height; } scaleToFitParent; struct CGSize { double width; double height; } scaleToFitEnclosingTextColumn; } mCached;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mRenderingFrameForLayoutGeometryFromInfo;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mComputedEditingCellContentFrame;
    int mCachedVerticalAlignmentForEditingCell;
    struct CGSize { double width; double height; } mAdjustableTableSize;
    struct CGSize { double width; double height; } mFixedTableSize;
    struct CGSize { double width; double height; } mCapturedStrokeFrameSizeForInline;
    long long mContainedTextEditorParagraphAlignment;
    BOOL mRemovingContainedTextEditorLayout;
    struct CGSize { double width; double height; } mSpillingTextSize;
    int mCoordinatesChangedMaskForChrome;
    BOOL mShouldUpdateAttachmentChildren;
    unsigned long long mPageCount;
    unsigned long long mPageNumber;
}

@property (readonly) TSUPointerKeyDictionary *attachmentCellStorageToLayoutMap;
@property (weak, nonatomic) TSWPStorage *tableNameEditingStorage;
@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (retain, nonatomic) TSTLayoutEngine *layoutEngine;
@property (retain, nonatomic) TSTLayoutHint *layoutHint;
@property (retain, nonatomic) TSTLayoutSpaceBundle *spaceBundle;
@property (nonatomic) BOOL processChangesFiltering;
@property (nonatomic) BOOL newCanvasRevealedHorizontally;
@property (nonatomic) BOOL newCanvasRevealedVertically;
@property (readonly, nonatomic) BOOL layoutDirectionIsLeftToRight;
@property (nonatomic) struct CGSize { double x0; double x1; } scaleToFit;
@property (retain, nonatomic) TSWPLayout *containedTextEditingLayout;
@property (readonly, nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } paddingForEditingCell;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } computedEditingCellContentFrame;
@property (readonly, nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } editingSpillingTextRange;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } origin; struct { unsigned int numberOfColumns; unsigned int numberOfRows; } size; } prevEditingSpillingTextRange;
@property (readonly, nonatomic) BOOL containedTextEditorSpills;
@property (readonly, nonatomic) BOOL containedTextEditorWraps;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } scaleToFitParent;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } cellRangeVisibleRect;
@property (readonly, nonatomic) unsigned long long pageNumber;
@property (readonly, nonatomic) unsigned long long pageCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) TSWPPadding *layoutMargins;
@property (readonly, nonatomic) unsigned long long columnCount;
@property (readonly, nonatomic) BOOL alwaysStartsNewTarget;
@property (readonly, nonatomic) BOOL shrinkTextToFit;
@property (readonly, nonatomic) BOOL columnsAreLeftToRight;
@property (readonly, nonatomic) double textScaleFactor;

+ (id)findLayoutIfAvailableInSet:(id)a0 intersectingRow:(unsigned int)a1;

- (void)validate;
- (id)initWithInfo:(id)a0;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setNeedsDisplay;
- (void)dealloc;
- (BOOL)isDraggable;
- (void)invalidate;
- (void).cxx_destruct;
- (id)styleProvider;
- (BOOL)shouldShowCaption;
- (BOOL)supportsRotation;
- (BOOL)isBeingManipulated;
- (void)invalidateSize;
- (int)verticalAlignmentForTextLayout:(id)a0;
- (struct CGSize { double x0; double x1; })initialTextSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nonAutosizedFrameForTextLayout:(id)a0;
- (unsigned long long)autosizeFlagsForTextLayout:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })autosizedFrameForTextLayout:(id)a0 textSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGPoint { double x0; double x1; })capturedInfoPositionForAttachment;
- (id)computeLayoutGeometry;
- (id)dependentsOfTextLayout:(id)a0;
- (double)gapForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1;
- (BOOL)inFindReplaceMode;
- (BOOL)inPrintPreviewMode;
- (void)invalidateForAutosizingTextLayout:(id)a0;
- (void)invalidatePosition;
- (id)layoutGeometryFromInfo;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maskRectForTextLayout:(id)a0;
- (long long)naturalAlignmentForTextLayout:(id)a0;
- (Class)repClassForTextLayout:(id)a0;
- (BOOL)textIsVertical;
- (void)updateChildrenFromInfo;
- (double)widthForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1;
- (int)wrapFitType;
- (BOOL)p_getLayoutDirectionLeftToRight;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrame;
- (struct CGPoint { double x0; double x1; })calculatePointFromSearchReference:(id)a0;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (BOOL)canRotateChildLayout:(id)a0;
- (id)dependentLayouts;
- (id)initWithInfo:(id)a0 layoutHint:(id)a1;
- (id)initialInfoGeometry;
- (id)inspectorGeometry;
- (void)invalidateTableNameVisibility;
- (struct CGSize { double x0; double x1; })maximumFrameSizeForChild:(id)a0;
- (void)offsetGeometryBy:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)orderedBefore:(id)a0;
- (long long)p_defaultAlignmentForTableWritingDirection;
- (BOOL)p_layoutWhollyContainsGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })p_rangeUpAndLeftOfIntersectionRangeOfGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)p_updateCachedStyleInformationFromCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (int)reapCoordinatesChangedMaskForChrome;
- (void)removeContainedTextEditingLayout;
- (BOOL)resizeMayChangeAspectRatio;
- (void)setupContainedTextEditingLayout:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)validateTableNameVisibility;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forScrollingToSelectionPath:(id)a1 forZoom:(BOOL)a2;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })adjustedInsetsForTarget:(id)a0;
- (BOOL)descendersCannotClip;
- (BOOL)forceParentAutosizeFlagsForTextLayout:(id)a0;
- (BOOL)forceParentAutosizedFrameForTextLayout:(id)a0;
- (double)maxAutoGrowLineWidthForTextLayout:(id)a0;
- (double)positionForColumnIndex:(unsigned long long)a0 bodyWidth:(double)a1 target:(id)a2 outWidth:(double *)a3 outGap:(double *)a4;
- (id)styleProviderForTextLayout:(id)a0;
- (BOOL)wantsToProvideStylesForTextLayout:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })captionEdgeInsets;
- (id)childInfosForChildLayouts;
- (id)computeInfoGeometryFromPureLayoutGeometry:(id)a0;
- (double)viewScaleForZoomingToSelectionPath:(id)a0 targetPointSize:(double)a1;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2 usingBlock:(id /* block */)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForCaptionPositioning;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeFrameForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (BOOL)isStrokeEditing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_maskRectForTextEditingLayout:(id)a0;
- (BOOL)suppressFrozenHeadersForEditing;
- (double)tabsRowWidthAndOptionalLeftGap:(out double *)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })_floatingCellRangeAtRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inLayoutSpace:(id)a1 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleFrameForOverscrolledChildFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })activityLineUnscaledEndPointForSearchReference:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignedStrokeFrameForRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (id)alignedStrokeFramePathForGridRange:(struct { struct { unsigned int x0; unsigned int x1; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 frameType:(int)a1 viewScale:(double)a2 inset:(double)a3 reoriginToZero:(BOOL)a4 clipToVisibleRect:(BOOL)a5 cornerRadius:(double)a6 outMaskPath:(id *)a7;
- (id)alignedStrokeFramePathForRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 frameType:(int)a1 viewScale:(double)a2 inset:(double)a3 reoriginToZero:(BOOL)a4 clipToVisibleRect:(BOOL)a5 cornerRadius:(double)a6 outMaskPath:(id *)a7;
- (id)attachmentCellLayoutForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 optionalCell:(id)a1;
- (void)bezierPathsForCellRegion:(id)a0 selectionMask:(unsigned int)a1 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 viewScale:(double)a3 inset:(double)a4 clipToVisibleRect:(BOOL)a5 cornerRadius:(double)a6 block:(id /* block */)a7;
- (struct CGPoint { double x0; double x1; })calculatePointFromSearchReferenceWithoutValidation:(id)a0;
- (BOOL)canvasShouldScrollForSelectionPath:(id)a0;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 flags:(unsigned long long)a1 searchFlags:(unsigned long long)a2;
- (void)didEndTableNameEditing;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })extendedPartitionRangeSingleSpaceIntersectionWithCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })floatingHeaderColumnRangeAtRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })floatingHeaderRowRangeAtRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)inspectorGeometryIsAffectedByChangeRecord:(id)a0;
- (void)invalidateLayoutSpaceCoordinates;
- (void)invalidateLayoutSpaceCoordinatesAfterColumn:(unsigned short)a0;
- (void)invalidateLayoutSpaceCoordinatesAfterRow:(unsigned int)a0;
- (void)invalidateLayoutSpaceTableOffsets;
- (void)iterateCellsAndTerminateWithIterator:(id)a0 usingBlock:(id /* block */)a1;
- (struct CGPoint { double x0; double x1; })minimumPositionOffset;
- (long long)naturalAlignmentForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_autosizedFrameForRichTextLayout:(id)a0 textSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_autosizedFrameForTextEditingLayout:(id)a0 textSize:(struct CGSize { double x0; double x1; })a1;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })p_cellIDForWPLayout:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_computeSpillingTextFrameForEditingLayout:(id)a0 textSize:(struct CGSize { double x0; double x1; })a1 editingSpillRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } *)a2;
- (id)p_getStyleProvidingAncestorLayout;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_maskRectForRichTextLayout:(id)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_maximumSpillRangeForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_nonAutosizedFrameForRichTextLayout:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_nonAutosizedFrameForTextEditingLayout:(id)a0;
- (void)p_prepareAttachmentCellsIfNeeded;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_spillRangeForMaskingRichTextLayout:(id)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })p_spillRangeToRightForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_textFrameForWrappingCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 defaultRowHeight:(BOOL *)a1;
- (void)removeAttachmentCellLayouts;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionHighlightFrameFittingParentWidthForChildWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)unscaledCommentFlagAnchorInfoForSearchReference:(id)a0;
- (void)validatePageNumberCount;
- (void)willBeginTableNameEditingWithStorage:(id)a0;

@end

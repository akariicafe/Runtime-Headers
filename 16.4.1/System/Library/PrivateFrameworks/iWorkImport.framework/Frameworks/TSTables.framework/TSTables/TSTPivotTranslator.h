@class TSTPivotOwner, NSIndexSet, NSMapTable;

@interface TSTPivotTranslator : TSTCategoryTranslator

@property (readonly, nonatomic) TSTPivotOwner *pivotOwner;
@property (nonatomic) BOOL cachedPivotIndexSetsAreValid;
@property (nonatomic) struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } pivotCachedIndexesUnfairLock;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForSummaryColumns;
@property (retain, nonatomic) NSMapTable *cachedSummaryColumnIndexesAtLevels;
@property (retain, nonatomic) NSIndexSet *cachedIndexesForLeadingColumns;
@property (retain, nonatomic) NSMapTable *cachedLeadingColumnIndexesAtLevels;
@property (retain, nonatomic) NSMapTable *cachedLeadingSummaryColumnIndexesAtLevels;

- (void).cxx_destruct;
- (BOOL)isCategorized;
- (id)initWithTableInfo:(id)a0;
- (struct TSUViewColumnIndex { unsigned short x0; })numberOfHeaderColumns;
- (unsigned long long)aggregateIndexForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned long long)aggregateIndexForRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned char)columnGroupLevelAtColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0 outAggregateIndex:(unsigned long long *)a1;
- (id)groupBySet;
- (unsigned char)maxVisibleColumnLevel;
- (unsigned char)maxVisibleRowLevel;
- (struct TSUViewColumnIndex { unsigned short x0; })numberOfCategoryColumns;
- (unsigned long long)numberOfColumnLevels;
- (unsigned long long)numberOfRowLevels;
- (unsigned char)rowGroupLevelAtRow:(struct TSUViewRowIndex { unsigned int x0; })a0 outAggregateIndex:(unsigned long long *)a1;
- (id)allRowGroupUIDs;
- (double)widthOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)aggregateFormulaOwner;
- (id)allColumnGroupUIDs;
- (BOOL)cellExistsAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)cellRegionForTableStyleArea:(unsigned long long)a0;
- (id)cellStyleAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (unsigned char)cellValueTypeAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (unsigned int)columnAggregateGroupSize;
- (id)coordinateMapper;
- (id)defaultCellStyleForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (void)defaultStyleHandlesForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 styleDefaultsCache:(id)a2 outCellStyleHandle:(id *)a3 outTextStyleHandle:(id *)a4;
- (id)defaultTextStyleForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (void)flushCachedIndexSets;
- (int)getCell:(id)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 suppressCellBorder:(BOOL)a2;
- (int)getDefaultCell:(out id)a0 forCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (int)getValue:(out struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (id)groupByForColumns;
- (id)groupByForRows;
- (unsigned char)groupLevelAtLabelRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned char)groupLevelAtSummaryColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned char)groupLevelAtSummaryRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (double)heightOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (id)i_indexesForLeadingColumnsAtGroupLevel:(unsigned char)a0;
- (id)i_indexesForLeadingSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)i_indexesForSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)i_indexesForSummaryRowsAtGroupLevel:(unsigned char)a0;
- (void)i_populateIndexesForLeadingColumns;
- (void)i_populateIndexesForLeadingSummaryColumns;
- (void)i_populateIndexesForSummaryColumns;
- (void)i_populatePivotCachedIndexSetsIfNeeded;
- (id)indexesForColumnsContainedByGroupUIDs:(id)a0;
- (id)indexesForGrandTotalColumns;
- (id)indexesForGrandTotalRows;
- (id)indexesForLeadingColumns;
- (id)indexesForLeadingColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForRowsContainedByGroupUIDs:(id)a0;
- (id)indexesForSummaryColumns;
- (id)indexesForSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (BOOL)isGroupedForColumns;
- (BOOL)isGroupedForRows;
- (Class)iteratorClass;
- (unsigned char)maxColumnLevel;
- (unsigned int)maxNumberOfHeaderColumns;
- (unsigned char)maxRowLevel;
- (id)metadataForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned char)minColumnLevel;
- (unsigned int)minNumberOfHeaderColumns;
- (unsigned char)minRowLevel;
- (struct TSUViewRowIndex { unsigned int x0; })numberOfFooterOrGrandTotalRows;
- (struct TSUViewColumnIndex { unsigned short x0; })numberOfGrandTotalColumns;
- (int)p_applyViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 toSummaryUsingBlock:(id /* block */)a1 toBaseUsingBlock:(id /* block */)a2;
- (void)p_applyViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 toSummaryUsingBlock:(id /* block */)a1 toBaseUsingBlock:(id /* block */)a2 toBeyondBoundsUsingBlock:(id /* block */)a3;
- (void)p_applyViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 toSummaryUsingBlock:(id /* block */)a1 toBaseUsingBlock:(id /* block */)a2 toBeyondBoundsUsingBlock:(id /* block */)a3;
- (unsigned char)p_columnRowTypeForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned char)p_columnRowTypeForRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)peerCellRegionForCellRegion:(id)a0;
- (void)resetViewMap;
- (void)resetViewMapAndNotify;
- (unsigned int)rowAggregateGroupSize;
- (void)setHeight:(double)a0 ofRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (id)summaryCellVendor;
- (id)summaryModel;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (unsigned long long)tableStyleAreaForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (unsigned long long)tableStyleAreaForRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)textStyleAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;

@end

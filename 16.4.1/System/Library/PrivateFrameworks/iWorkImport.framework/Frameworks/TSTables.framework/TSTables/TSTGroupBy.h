@class TSTTableModel, TSTGroupByChangeDistributor, NSMutableArray, TSKCustomFormatWrapper, TSTGroupBySet, NSString, TSCECalculationEngine, TSTCategoryOwner, NSArray, TSTHiddenStates, TSULocale, TSTGroupNode, TSTTableInfo;
@protocol TSCEFormulaReplacing;

@interface TSTGroupBy : TSPObject <TSCEFormulaOwning, TSTGroupByChangeProtocol, TSTCompatibilityVersionProviding> {
    struct UUIDData<TSP::UUIDData> { union { unsigned char _uuid[16]; struct { unsigned char byte0; unsigned char byte1; unsigned char byte2; unsigned char byte3; unsigned char byte4; unsigned char byte5; unsigned char byte6; unsigned char byte7; unsigned char byte8; unsigned char byte9; unsigned char byte10; unsigned char byte11; unsigned char byte12; unsigned char byte13; unsigned char byte14; unsigned char byte15; } _cfuuid; struct { unsigned long long _lower; unsigned long long _upper; } ; } ; } _groupByUid;
    TSTGroupNode *_groupRoot;
    struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } _columnOrderChangedCoord;
    struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } _rowOrderChangedCoord;
    struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } _rowOrderChangedIgnoringRecalcCoord;
    struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } _hiddenStatesChangedCoord;
    struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } _nextAggFormulaCoord;
    struct TSUIndexSet { unsigned char _isEmpty : 1; unsigned char _hasSingleRange : 1; struct TSUIndexRange { long long _begin; long long _end; } _singleRange; struct *_multipleRanges; } _aggFormulaCoordsFreeList;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _aggValuesLock;
    struct unordered_map<TSUCellCoord, TSTAggNode *, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, TSTAggNode *>>> { struct __hash_table<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>, std::allocator<std::__hash_value_type<TSUCellCoord, TSTAggNode *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>> { float __value_; } __p3_; } __table_; } _aggNodesByFormulaCoord;
    struct unordered_map<TSKUIDStruct, TSTGroupNode *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSTGroupNode *>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTGroupNode *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float __value_; } __p3_; } __table_; } _groupNodesByGroupUid;
    unsigned long long _rebuildFormulasDeferredLevel;
    unsigned long long _deferGroupByChangeNotificationsLevel;
    NSMutableArray *_deferredGroupByChangeNotifications;
    NSMutableArray *_calcEngineGroupByChangeNotifications;
    BOOL _inCalcEngineMode;
    BOOL _groupingColumnHeadersChanged;
    struct TSCEUidLookupList { struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _uids; struct unordered_map<unsigned long, unsigned int, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int>>> { struct __hash_table<std::__hash_value_type<unsigned long, unsigned int>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, unsigned int>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, unsigned int>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, unsigned int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, unsigned int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, unsigned int>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, unsigned int>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> { float __value_; } __p3_; } __table_; } _uidHashToLookupKeyMap; struct unordered_map<unsigned long, std::unordered_set<unsigned int>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::unordered_set<unsigned int>>>> { struct __hash_table<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::unordered_set<unsigned int>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> { float __value_; } __p3_; } __table_; } _uidHashOverflowMap; } _rowUidLookupList;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (weak, nonatomic) TSTCategoryOwner *categoryOwner;
@property (weak, nonatomic) TSTGroupBySet *groupBySet;
@property (readonly, nonatomic) TSTTableModel *tableModel;
@property (readonly, nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly) NSArray *groupingColumns;
@property (readonly) unsigned char numberOfLevels;
@property (nonatomic) BOOL isEnabled;
@property (readonly, nonatomic) TSTGroupByChangeDistributor *groupByChangeDistributor;
@property (readonly, nonatomic) NSMutableArray *aggregators;
@property (readonly, nonatomic) NSArray *columnAggregates;
@property (readonly, nonatomic) TSULocale *locale;
@property (readonly, nonatomic) unsigned short ownerIndex;
@property (readonly, nonatomic) BOOL isForPivotTable;
@property (readonly, nonatomic) id<TSCEFormulaReplacing> minion;
@property (retain, nonatomic) TSTHiddenStates *hiddenStates;
@property (readonly, nonatomic) BOOL isCategorized;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } baseTableUID;
@property (nonatomic) BOOL isRegisteredWithCalcEngine;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } groupByUid;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } topLevelGroupUid;
@property (readonly, nonatomic) TSTGroupNode *topLevelGroupNode;
@property (readonly, nonatomic) struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } indirectAggTypeChangeFormulaCoord;
@property (readonly, nonatomic) struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } groupingColumnsFormulaCoord;
@property (readonly, nonatomic) struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } groupingColumnHeadersFormulaCoord;
@property (readonly, nonatomic) struct TSUCellCoord { unsigned int row; unsigned short column; BOOL _preserveRow; BOOL _preserveColumn; } allAggsInGroupRootFormulaCoord;
@property (readonly, nonatomic) struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } columnOrderChangedPrecedent;
@property (readonly, nonatomic) struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } rowOrderChangedPrecedent;
@property (readonly, nonatomic) struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } rowOrderChangedPrecedentIgnoringRecalc;
@property (readonly, nonatomic) struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } hiddenStatesChangedPrecedent;
@property (readonly, nonatomic) BOOL usesPrePivotAggregateTypesOnly;
@property (nonatomic) BOOL needsRebuildOfAggFormulas;
@property (readonly, nonatomic) TSKCustomFormatWrapper *customFormatForBlankGroup;
@property (readonly, nonatomic) TSKCustomFormatWrapper *customFormatForErrorGroup;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) unsigned long long archivingCompatibilityVersion;

+ (id)groupByForCategoryRef:(id)a0 withCalcEngine:(id)a1;
+ (id)groupByForUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 withCalcEngine:(id)a1;
+ (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })tableUIDForCategoryRef:(id)a0 withCalcEngine:(id)a1;
+ (unsigned char)aggregateTypeForAggregateLabel:(id)a0 locale:(id)a1;
+ (unsigned short)groupingComboForGroupingType:(long long)a0;
+ (BOOL)isRelativeAncestorGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
+ (id)localizedFalseStringForBooleanGroupWithString:(id)a0 documentLocale:(id)a1;
+ (id)localizedNameForBlankGroupForDocumentLocale:(id)a0;
+ (id)localizedNameForErrorGroupForDocumentLocale:(id)a0;
+ (id)localizedTrueStringForBooleanGroupWithString:(id)a0 documentLocale:(id)a1;
+ (id)p_dateBySettingUnit:(unsigned long long)a0 value:(long long)a1 ofDate:(id)a2 inCalendar:(id)a3;
+ (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })relativeAncestorGroupUid:(int)a0;
+ (int)relativeLevelOfAncestorGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
+ (BOOL)validateNumberOfGroupsForGroupingColumnList:(id)a0 pivotDataModel:(id)a1 limit:(unsigned long long)a2 groupNodeCount:(unsigned long long *)a3;
+ (BOOL)validateNumberOfGroupsForGroupingColumnList:(id)a0 sourceTableModel:(id)a1 sourceBodyTract:(id)a2 limit:(unsigned long long)a3 groupNodeCount:(unsigned long long *)a4;

- (id).cxx_construct;
- (void)teardown;
- (void)setAggregates:(id)a0;
- (BOOL)analyze;
- (void).cxx_destruct;
- (long long)evaluationMode;
- (void)willModify;
- (void)saveToArchiver:(id)a0;
- (void)didInitFromSOS;
- (void)loadFromArchive:(const void *)a0 unarchiver:(id)a1;
- (void)loadFromUnarchiver:(id)a0;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })captureAnyCategoryRefsForViewRegion:(id)a0 atLevel:(unsigned char)a1 asSpanning:(BOOL)a2;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })captureCategoryLabelRefsForViewRegion:(id)a0 atLevel:(unsigned char)a1 asSpanning:(BOOL)a2 forRows:(BOOL)a3;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })captureCategoryRefsForViewRegion:(id)a0 atLevel:(unsigned char)a1 asSpanning:(BOOL)a2;
- (unsigned long long)countOfValuesForCategoryRef:(id)a0;
- (void)enumerateGroupsAtLevel:(unsigned char)a0 withBlock:(id /* block */)a1;
- (struct TSCERecalculationState { unsigned char x0; })evaluateFormulaAt:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 withCalcEngine:(id)a1 recalcOptions:(struct TSCERecalculationState { unsigned char x0; })a2;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })expandSpanningCategoryRef:(id)a0;
- (id)groupNodeForGroupUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)invalidateForCalcEngine:(id)a0;
- (BOOL)isSpanningCategoryRef:(id)a0;
- (BOOL)isValidCategoryRef:(id)a0;
- (id)linkedResolver;
- (unsigned long long)numberOfGroupsAtLevel:(unsigned char)a0;
- (unsigned short)ownerKind;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })ownerUID;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })promoteSpanningReferences:(struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })a0;
- (void)writeResultsForCalcEngine:(id)a0;
- (unsigned char)aggregateTypeForAggregateLabel:(id)a0;
- (struct unordered_map<TSKUIDStruct, TSTPlanForGroupingCell, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSTPlanForGroupingCell>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSTPlanForGroupingCell>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float x0; } x3; } x0; })changesPerColumnMapToBeInGroup:(id)a0;
- (BOOL)containsRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)deferGroupByChangeNotifications;
- (void)didCreateGroup:(id)a0;
- (void)didRemoveGroup:(id)a0;
- (void)dropAggregator:(id)a0;
- (unsigned char)groupLevelForGroupingColumnUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)p_setCell:(id)a0 forMonthGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setupCustomFormatsWithLocale:(id)a0;
- (id)viewCellTractRefForCategoryRef:(id)a0;
- (void)_addAggregates:(id)a0 atLevel:(unsigned char)a1;
- (void)_removeAggregates:(id)a0;
- (void)addAggregator:(id)a0;
- (id)aggNodeForAggFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)aggregateLabelForCategoryRef:(id)a0;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })aggregateRangeRefForCategoryRef:(id)a0;
- (id)aggregateRefOnValue:(id)a0 forColumnUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 forType:(unsigned char)a2 atLevel:(unsigned char)a3;
- (unsigned char)aggregateTypeForCategoryRef:(id)a0;
- (unsigned char)aggregateTypeForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 atGroupLevel:(unsigned char)a1;
- (id)aggregatesOnLevel:(unsigned char)a0;
- (id)aggregatorForColumn:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)allGroupNodeUids;
- (unsigned char)anyAggregateTypeForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)anyAggregator;
- (void)beginDeferringRebuildFormulas;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })bodyRowUidsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 ordered:(BOOL)a2;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })captureCategoryRefsFromIterator:(id)a0 atLevel:(unsigned char)a1 asSpanning:(BOOL)a2;
- (id)categoryRefForAggregateRangeRef:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })categoryRefsForSpanningCategoryRef:(id)a0;
- (id)cellDiffForCell:(id)a0 applyingGroupCellValue:(id)a1 groupingType:(long long)a2 toBeInGroup:(id)a3;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct __compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; } x2; })cellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct __compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; } x2; })cellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 ordered:(BOOL)a2;
- (BOOL)changeCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 toBeInGroup:(id)a2;
- (id)changeCellDiffMapToMoveRows:(const void *)a0 toGroup:(id)a1 templateRowUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (id)changeForMovingBaseRows:(const void *)a0 toDestGroup:(id)a1;
- (id)changeForSettingGroupingColumnList:(id)a0;
- (id)changeForUpdatingGroupValueOnNode:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 toValue:(id)a1;
- (void)checkForFormulaCoordUpgrade;
- (id)childGroupUidsForGroupUids:(id)a0;
- (void)clearAggNode:(id)a0 forFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1;
- (void)clearValueForFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)columnAggregateListCopy;
- (id)columnAggregatesOnColumnUids:(const void *)a0;
- (id)columnNameForCategoryLevel:(unsigned char)a0 shortForm:(BOOL)a1;
- (id)columnNameForCategoryRef:(id)a0;
- (id)convertCategoryRefToRelativeAncestorUid:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 inHostTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })convertToRelativeAncestorUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)createAggregatorOnColumn:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)createAggregatorsIfMissingAndAssert:(BOOL)a0;
- (id)defaultDateForGrouping;
- (void)didAddGroupNode:(id)a0;
- (void)didAddRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 toGroup:(id)a1;
- (void)didChangeGroupByStructure;
- (void)didRemoveRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 fromGroup:(id)a1;
- (id)distinctValuesAtLevel:(unsigned char)a0;
- (void)dropAllAggregators;
- (void)encodeToArchive:(void *)a0 archiver:(id)a1 backwardCompatOptions:(unsigned long long)a2;
- (void)endDeferringRebuildFormulas;
- (void)endOfGroupingChangesBatch;
- (void)enterCalcEngineMode;
- (void)enumerateAggregates:(id /* block */)a0;
- (void)enumerateAggregatesAtLevel:(unsigned char)a0 withBlock:(id /* block */)a1;
- (void)enumerateAllGroupsWithBlock:(id /* block */)a0;
- (void)enumerateGroupingColumnsForColumn:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 withBlock:(id /* block */)a1;
- (void)enumerateGroupsBetweenLevel:(unsigned char)a0 andLevel:(unsigned char)a1 withBlock:(id /* block */)a2;
- (void)enumerateRowsUidsAtLevel:(unsigned char)a0 withBlock:(id /* block */)a1;
- (void)exitCalcEngineMode;
- (id)findGroupNodeForValue:(id)a0 atLevel:(unsigned char)a1 createIfMissing:(BOOL)a2;
- (unsigned int)findKeyForRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)freeAggFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })getNextAggFormulaCoord;
- (id)groupHierarchyTreeAsFiltered:(BOOL)a0 usingOrder:(id)a1 forDimension:(long long)a2;
- (unsigned char)groupLevelForGroupUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned char)groupLevelForGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 isBlank:(BOOL *)a1 isError:(BOOL *)a2;
- (id)groupNodeForGroupUuid:(id)a0;
- (id)groupNodeForGroupValueHierarchyFromSplitter:(id)a0 startAtComponent:(unsigned long long)a1 startAtWord:(unsigned long long)a2 preserveFlags:(struct TSUPreserveFlags { unsigned char x0; } *)a3;
- (id)groupNodeForRowUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 atLevel:(unsigned char)a1;
- (void *)groupNodesByGroupUid;
- (id)groupValueHierarchyRefOnValue:(id)a0 atLevel:(unsigned char)a1;
- (id)groupValueHierarchyStringForCategoryRef:(id)a0 forHostCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 namingContext:(id)a2;
- (id)groupValueRefOnValue:(id)a0 atLevel:(unsigned char)a1;
- (id)groupValueTupleForRowUid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 atLevel:(unsigned char)a1;
- (id)groupingColumnAtCategoryLevel:(unsigned char)a0;
- (struct vector<TSCECategoryLevel, std::allocator<TSCECategoryLevel>> { unsigned char *x0; unsigned char *x1; struct __compressed_pair<TSCECategoryLevel *, std::allocator<TSCECategoryLevel>> { unsigned char *x0; } x2; })groupingColumnLevelsForColumn:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)groupingColumnListCopy;
- (id)groupsAtLevel:(unsigned char)a0;
- (BOOL)inCalcEngineMode;
- (unsigned long long)indexOfGroupingColumn:(id)a0;
- (id)indexesOfGroupUidsInUids:(const void *)a0;
- (id)initWithArchive:(const void *)a0 forCategoryOwner:(id)a1 unarchiver:(id)a2;
- (id)initWithGroupings:(id)a0 categoryOwner:(id)a1;
- (id)initWithGroupings:(id)a0 categoryOwner:(id)a1 groupByUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 ownerIndex:(unsigned short)a3;
- (id)initWithGroupings:(id)a0 isEnabled:(BOOL)a1 categoryOwner:(id)a2 groupByUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a3 ownerIndex:(unsigned short)a4;
- (void)insertRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 atRowIndex:(unsigned int)a1 forGroupValue:(id)a2;
- (void)insertRowUids:(id)a0;
- (BOOL)isBlankGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)isDeferringGroupByChangeNotifications;
- (BOOL)isErrorGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)isGroupingColumn:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)isPrePivotV2Compatible;
- (BOOL)isRebuildFormulasDeferred;
- (id)labelForCategoryRef:(id)a0;
- (id)labelRowUIDSet;
- (id)labelRowUIDSetForCategoryLevel:(unsigned char)a0 labelRowVisibility:(unsigned long long)a1;
- (id)labelRowUidsForGroupUids:(id)a0;
- (unsigned int)lookupKeyForRowUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)mapGroupUidsForChange:(id)a0;
- (void)markAllAggregatesAsDirty;
- (void)markAllDependentsAsDirty;
- (void)markAllGroupNodesDirty;
- (unsigned long long)numberOfAggregatesAtLevel:(unsigned char)a0;
- (unsigned long long)numberOfGroupsUptoLevel:(unsigned char)a0;
- (id)p_cellDiffForFinishedCell:(id)a0;
- (id)p_columnNameForColumnUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })p_promoteSpanningReferences:(struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })a0 withCaptured:(id)a1 atLevel:(unsigned char)a2;
- (void)p_setCell:(id)a0 forDayGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forDayOfWeekGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forMonthOfYearGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forQuarterOfYearGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forUniqueGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forYearGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forYearQuarterGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (void)p_setCell:(id)a0 forYearWeekGroupingTypeWithGroupColumnValue:(id)a1 toBeInGroup:(id)a2;
- (BOOL)p_setCell:(id)a0 groupingCellPlan:(const void *)a1 groupValue:(id)a2 toGroup:(id)a3 templateCell:(id)a4;
- (void)p_setCell:(id)a0 groupingTypeCombo:(unsigned short)a1 groupingCellValue:(id)a2 toBeInGroup:(id)a3;
- (id)prettyStringForCategoryRef:(id)a0 forHostCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 namingContext:(id)a2;
- (void)rebuildAllAggFormulas;
- (void)remapTableUIDsInFormulasWithMap:(const void *)a0 calcEngine:(id)a1;
- (void)removeRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)removeRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 forGroupValue:(id)a1;
- (void)removeRowUids:(id)a0;
- (void)resetAllAggsFormula;
- (void)resetGroupBy;
- (void)resetGroupingColumnsFormula;
- (void)resetGroupings;
- (void)resetWithGroupings:(id)a0 categoryOwner:(id)a1 hiddenStates:(id)a2 groupBySet:(id)a3;
- (id)resolveCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 inHostTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })resolveRelativeAncestorUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)resumeGroupByChangeNotifications;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowUIDForLookupKey:(unsigned int)a0;
- (id)rowUIDSetForCategoryLevel:(unsigned char)a0;
- (id)rowUidsForGroupUids:(id)a0;
- (id)rowsForGroupValue:(id)a0 atLevel:(unsigned char)a1;
- (void)runChange:(id)a0 withAggregates:(id)a1;
- (void)sendDeferredNotifictions:(id)a0;
- (void)setAggNode:(id)a0 forFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1;
- (void)setAggregateType:(unsigned char)a0 forColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1 atGroupLevel:(unsigned char)a2;
- (void)setGroupingColumnList:(id)a0;
- (void)setValue:(id)a0 forFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1;
- (id)sortedValuesAtLevel:(unsigned char)a0;
- (void)startOfGroupingChangesBatch;
- (id)stringForCategoryRef:(id)a0 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)uidRectRefForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct __compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; } x2; })unorderedCellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)updateAggFormulaCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)updateWithDocumentRoot:(id)a0;
- (void)upgradeForNewAggregateTypes:(id)a0;
- (void)usedAggFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)valueForFormulaCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0;
- (id)valueGridForCategoryRef:(id)a0;
- (id)valueGridForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)valueGridForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hidingActionMask:(unsigned char)a2;
- (struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; })valuesForCategoryRef:(id)a0;
- (struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; })valuesForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; })valuesForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hidingActionMask:(unsigned char)a2;
- (BOOL)verifyConnectionsWithPivotDataModel:(id)a0;
- (id)viewCellTractRefForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)willMakeGroupingChangesInRowUIDs:(id)a0;
- (void)willRemoveGroup:(id)a0;
- (void)willRemoveGroupNode:(id)a0;

@end

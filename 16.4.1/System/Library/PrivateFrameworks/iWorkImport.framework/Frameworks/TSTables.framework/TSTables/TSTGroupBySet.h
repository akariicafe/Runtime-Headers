@class TSTHiddenStates, TSTTableFilterSet, __end_, TSCECalculationEngine, TSTGroupingColumnList, TSTGroupBy, __end_cap_, TSTColumnAggregateList, TSTTableModel;

@interface TSTGroupBySet : NSObject {
    struct vector<TSTGroupBy *, std::allocator<TSTGroupBy *>> { __end_ **__begin_; __end_cap_ **x0; struct __compressed_pair<TSTGroupBy *__strong *, std::allocator<TSTGroupBy *>> { id *__value_; } x1; } _inUseGroupBys;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _aggregateUidList;
    struct unordered_map<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<unsigned long, TSTColumnAggregate *>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float __value_; } __p3_; } __table_; } _aggregateUidMap;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _allColumnGroupUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _baseColumnGroupUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _summaryColumnGroupUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _allRowGroupUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _baseRowGroupUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _summaryRowGroupUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _allFlattenedUids;
    struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *__begin_; struct TSKUIDStruct *__end_; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *__value_; } __end_cap_; } _baseFlattenedUids;
    struct unordered_map<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStructVectorTemplate<TSKUIDStruct>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float __value_; } __p3_; } __table_; } _groupAggregateUidFlatteningMap;
    struct unordered_map<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::pair<TSKUIDStruct, unsigned long>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float __value_; } __p3_; } __table_; } _groupAggregateUidUnflatteningMap;
    struct vector<TSUIndexSet, std::allocator<TSUIndexSet>> { struct TSUIndexSet *__begin_; struct TSUIndexSet *__end_; struct __compressed_pair<TSUIndexSet *, std::allocator<TSUIndexSet>> { struct TSUIndexSet *__value_; } __end_cap_; } _assertedOnMissingCombinations;
}

@property (retain, nonatomic) TSTGroupingColumnList *bodyGroupingList;
@property (readonly, nonatomic) BOOL isRegisteredWithCalcEngine;
@property (nonatomic) struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } pivotTableUID;
@property (readonly, nonatomic) TSTTableModel *pivotDataTable;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } pivotDataTableUID;
@property (nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly, nonatomic) TSTGroupingColumnList *columnGroupings;
@property (readonly, nonatomic) TSTGroupingColumnList *rowGroupings;
@property (readonly, nonatomic) TSTColumnAggregateList *aggregates;
@property (readonly, nonatomic) long long flatteningDimension;
@property (readonly, nonatomic) BOOL hasRunningTotalAggregates;
@property (readonly, nonatomic) TSTGroupBy *groupByForColumnGroups;
@property (readonly, nonatomic) TSTGroupBy *groupByForRowGroups;
@property (readonly, nonatomic) long long activeFlatteningDimension;
@property (readonly, nonatomic) unsigned long long columnAggregateGroupSize;
@property (readonly, nonatomic) unsigned long long rowAggregateGroupSize;
@property (retain, nonatomic) TSTHiddenStates *hiddenStates;
@property (copy, nonatomic) TSTTableFilterSet *filterSet;

- (id).cxx_construct;
- (id)description;
- (void).cxx_destruct;
- (const void *)allRowGroupUids;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForGroupingColumnName:(id)a0;
- (id)groupByForColumnLevel:(unsigned char)a0 rowLevel:(unsigned char)a1;
- (unsigned short)maxGroupByIndex;
- (id)aggregateForUidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (unsigned short)aggregateIndexForAggName:(id)a0 locale:(id)a1;
- (unsigned long long)aggregateIndexForColumnUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (unsigned long long)aggregateIndexForRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (unsigned short)aggregateIndexForUidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (const void *)allColumnGroupUids;
- (const void *)allColumnUids;
- (struct vector<TSTGroupNode *, std::allocator<TSTGroupNode *>> { id *x0; id *x1; struct __compressed_pair<TSTGroupNode *__strong *, std::allocator<TSTGroupNode *>> { id *x0; } x2; })allGroupRoots;
- (const void *)allRowUids;
- (const void *)baseColumnGroupUids;
- (const void *)baseColumnUids;
- (const void *)baseRowGroupUids;
- (const void *)baseRowUids;
- (id)categoryRefForUidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 outShowAsType:(unsigned char *)a1;
- (void)clearMissingCombinations;
- (unsigned char)columnGroupLevelForColumnUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnGroupUidForColumnUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 outAggregateIndex:(unsigned long long *)a1;
- (id)columnNameForAggregateIndex:(unsigned long long)a0 allowDuplicateNames:(BOOL)a1;
- (const void *)columnUidsForColumnGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)compactDescriptionForAggregateIndex:(unsigned long long)a0 locale:(id)a1;
- (id)compactDescriptionForAggregateIndex:(unsigned long long)a0 useShortLabel:(BOOL)a1 allowDuplicateNames:(BOOL)a2 locale:(id)a3;
- (id)descriptionForAggregateIndex:(unsigned long long)a0 locale:(id)a1;
- (id)descriptionForAggregateIndex:(unsigned long long)a0 useShortLabel:(BOOL)a1 allowDuplicateNames:(BOOL)a2 locale:(id)a3;
- (id)descriptionForPivotBodyCellForUidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)descriptionForPivotGroupCellForColumnUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 upToLevel:(unsigned char)a1;
- (id)descriptionForPivotGroupCellForRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 upToLevel:(unsigned char)a1;
- (id)duplicateFilterSet;
- (id)expandGroupUidsForFlattening:(id)a0 forDimension:(long long)a1;
- (id)filteringCategoryRefAt:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 forDimension:(long long)a1;
- (id)findExistingGroupNodeInGroupBy:(id)a0 usingValues:(const void *)a1 upToLevel:(unsigned long long)a2 coerceForDateFields:(BOOL)a3;
- (id)firstAggregate;
- (void)getHidingIndexesForGrandTotalsForPivotTable:(id)a0 columns:(id)a1 rows:(id)a2;
- (id)getPivotDataBundleForUidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)getPivotDataBundleForUidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 upToLevel:(unsigned char)a1;
- (void)getPivotHidingIndexesForGroupingColumn:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 columns:(id)a1 rows:(id)a2 forHiding:(BOOL)a3 forPivotTable:(id)a4;
- (id)grandGrandTotalCategoryRefForAggregate:(id)a0;
- (id)grandTotalCategoryRefForColumn:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 forAggregate:(id)a1;
- (id)grandTotalCategoryRefForRow:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 forAggregate:(id)a1;
- (id)groupByForOwnerIndex:(unsigned short)a0 createIfMissing:(BOOL)a1;
- (id)groupByForUuidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *x0; unsigned long long *x1; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *x0; } x2; })groupColumnIndexesForOwnerIndex:(unsigned short)a0;
- (id)groupNodeForUuidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)groupValueTupleForUuidCoord:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 createIfMissing:(BOOL)a1;
- (id)groupingColumnForIndex:(unsigned long long)a0;
- (id)groupingColumnsForOwnerIndex:(unsigned short)a0;
- (long long)groupingIndexForColumnUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasUnfilteredAt:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 forDimension:(long long)a1;
- (BOOL)hasValidRunningTotalFieldForAggregate:(id)a0;
- (id)initWithPivotTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (int)linkToCalcEngine:(id)a0;
- (unsigned long long)numPracticalGroupBys;
- (unsigned short)ownerIndexForGroupingCombination:(const struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; } *)a0;
- (id)p_descriptionForPivotGroupValueTuple:(id)a0 upToLevel:(unsigned char)a1 locale:(id)a2;
- (void)p_resetAllGroupUids:(void *)a0 baseGroupUids:(void *)a1 summaryGroupUids:(void *)a2 forGroupBy:(id)a3 uptoLevel:(unsigned char)a4 isFlattening:(BOOL)a5;
- (id)percentParentDenominatorCategoryRefFor:(id)a0 inGroupBy:(id)a1 forAggregate:(id)a2 forShowAsType:(unsigned char)a3;
- (id)percentRunningDenominatorCategoryRefFor:(id)a0 inGroupBy:(id)a1 runningOnColumnUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 forAggregate:(id)a3;
- (struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; })pivotDataModelRowIndexesNeededForCell:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (int)registerWithCalcEngine:(id)a0 baseOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)resetGroupingList;
- (void)restoreFromPivotDataTable:(id)a0 columnGroupings:(id)a1 rowGroupings:(id)a2 aggregates:(id)a3 flatteningDimension:(long long)a4;
- (id)restrictColumnIndexes:(id)a0 forAggrIndexLevel:(unsigned short)a1 forPivotTable:(id)a2;
- (id)restrictColumnIndexes:(id)a0 toColumnGroupLevel:(unsigned char)a1 forPivotTable:(id)a2;
- (id)restrictRowIndexes:(id)a0 forAggrIndexLevel:(unsigned short)a1 forPivotTable:(id)a2;
- (id)restrictRowIndexes:(id)a0 toRowGroupLevel:(unsigned char)a1 forPivotTable:(id)a2;
- (unsigned char)rowGroupLevelForRowUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowGroupUidForRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 outAggregateIndex:(unsigned long long *)a1;
- (const void *)rowUidsForRowGroupUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)sawMissingCombination:(const struct TSUIndexSet { unsigned char x0 : 1; unsigned char x1 : 1; struct TSUIndexRange { long long x0; long long x1; } x2; struct *x3; } *)a0;
- (void)setPivotRulesWithPivotDataTable:(id)a0 columnGroupings:(id)a1 rowGroupings:(id)a2 aggregates:(id)a3 flatteningDimension:(long long)a4;
- (const void *)summaryColumnGroupUids;
- (const void *)summaryRowGroupUids;
- (void)unregisterFromCalcEngine;
- (BOOL)verifyConnectionsWithPivotDataModel:(id)a0 pivotTableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1;

@end

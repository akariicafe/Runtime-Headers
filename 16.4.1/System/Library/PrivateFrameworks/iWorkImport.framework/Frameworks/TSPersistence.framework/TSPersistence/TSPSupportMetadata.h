@class NSSet, NSObject;
@protocol OS_dispatch_queue;

@interface TSPSupportMetadata : TSPObject {
    NSObject<OS_dispatch_queue> *_accessQueue;
    struct DigestMap<TSP::DataCollaborationProperties> { struct __hash_table<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>, std::allocator<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>> { float __value_; } __p3_; } __table_; } _dataCollaborationPropertiesMap;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _archivingLock;
    BOOL _isInCollaborationModeForArchiving;
    struct DigestMap<TSP::DataCollaborationProperties> { struct __hash_table<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>, std::allocator<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>> { float __value_; } __p3_; } __table_; } _dataCollaborationPropertiesMapForArchiving;
    NSSet *_knownDataDigests;
}

- (id).cxx_construct;
- (void)commonInit;
- (id)initWithContext:(id)a0;
- (void).cxx_destruct;
- (id)packageLocator;
- (long long)tsp_identifier;
- (void)saveToArchiver:(id)a0;
- (void)loadFromUnarchiver:(id)a0;
- (struct DataCollaborationProperties { BOOL x0; BOOL x1; int x2; int x3; long long x4; BOOL x5; })collaborationPropertiesForData:(id)a0;
- (void)setKnownDataDigestsForAutosave:(id)a0;
- (void)collaborationPropertiesForData:(id)a0 usingBlock:(id /* block */)a1;
- (unsigned char)componentRequiredPackageIdentifier;
- (void)p_resetServerDataFlags;
- (void)setCollaborationPropertiesForData:(id)a0 usingBlock:(id /* block */)a1;
- (void)takeSnapshotWithCollaborationMode:(BOOL)a0;
- (void)validateDataCollaborationProperties:(struct DataCollaborationProperties { BOOL x0; BOOL x1; int x2; int x3; long long x4; BOOL x5; } *)a0 forData:(id)a1;

@end

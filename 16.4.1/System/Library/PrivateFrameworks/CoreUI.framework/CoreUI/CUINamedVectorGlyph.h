@class NSDictionary, CUICatalog, CUINamedLookup;

@interface CUINamedVectorGlyph : CUINamedLookup <NSCopying> {
    double _pointSize;
    double _lookedupScaleFactor;
    struct CGImage { } *_cgImageRef;
    double _fontMatchingScaleFactor;
    CUICatalog *_catalog;
    long long _layoutDirection;
    unsigned char _generatedImage : 1;
    unsigned char _flippable : 1;
    unsigned char _canUsePathConcatenation : 1;
    short _containsNamedColorStyles;
    long long _glyphSize;
    long long _glyphWeight;
    CUINamedLookup *_ultralightInterpolationSource;
    CUINamedLookup *_blackInterpolationSource;
    NSDictionary *_templatePaths;
    NSDictionary *_multicolorPaths;
    NSDictionary *_hierarchicalPaths;
}

@property (nonatomic) double fontMatchingScaleFactor;
@property (readonly, nonatomic) double baselineOffset;
@property (readonly, nonatomic) double capHeight;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentBounds;
@property (readonly, nonatomic) BOOL isFlippable;
@property (readonly, nonatomic) float templateVersion;
@property (readonly, nonatomic) double baselineOffsetUnrounded;
@property (readonly, nonatomic) double capHeightUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentBoundsUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } alignmentRectUnrounded;
@property (readonly, nonatomic) long long preferredRenderingMode;
@property double variableMinValue;
@property double variableMaxValue;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } interiorAlignmentRectUnrounded;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } interiorAlignmentRect;

+ (id)_knockoutStyleNames;
+ (id)_layerHierarchyStyleNames;
+ (id)_colorStyleNames;

- (double)pointSize;
- (void)drawInContext:(struct CGContext { } *)a0;
- (double)referencePointSize;
- (long long)layoutDirection;
- (BOOL)containsNamedColorStyle:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1;
- (id)debugDescription;
- (void)dealloc;
- (BOOL)isEqual:(id)a0;
- (BOOL)containsNamedColorStyles;
- (double)scale;
- (unsigned long long)hash;
- (struct CGImage { } *)image;
- (unsigned long long)numberOfHierarchyLayers;
- (id)_catalog;
- (void).cxx_destruct;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withColorResolver:(id /* block */)a2;
- (const struct CGPath { } *)CGPath;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColors:(id)a2;
- (void)_setScale:(double)a0;
- (void)drawHierarchyLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (void)drawInContext:(struct CGContext { } *)a0 withPaletteColors:(id)a1;
- (void)drawMulticolorLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (struct CGImage { } *)imageWithColorResolver:(id /* block */)a0;
- (struct CGImage { } *)imageWithHierarchyColorResolver:(id /* block */)a0;
- (struct CGImage { } *)imageWithPaletteColors:(id)a0;
- (unsigned long long)numberOfMulticolorLayers;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withHierarchyColorResolver:(id /* block */)a2;
- (id)hierarchyLayers;
- (void)drawPaletteLayerAtIndex:(unsigned long long)a0 inContext:(struct CGContext { } *)a1 withColorResolver:(id /* block */)a2;
- (long long)glyphSize;
- (long long)glyphWeight;
- (id)graphicVariantWithOptions:(id)a0;
- (id)hierarchicalLayerThresholds;
- (struct CGImage { } *)imageWithPaletteColorResolver:(id /* block */)a0;
- (BOOL)isKnockoutEnabledForHierarchicalLayerAtIndex:(long long)a0 opacity:(double *)a1;
- (BOOL)isKnockoutEnabledForMulticolorLayerAtIndex:(long long)a0 opacity:(double *)a1;
- (BOOL)isKnockoutEnabledForPaletteLayerAtIndex:(long long)a0 opacity:(double *)a1;
- (id)multicolorLayerThresholds;
- (unsigned long long)numberOfPaletteLayers;
- (unsigned long long)numberOfTemplateLayers;
- (id)paletteLayerThresholds;
- (id)paletteLevels;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 withPaletteColorResolver:(id /* block */)a2;
- (id)templateLayerThresholds;
- (id)hierarchyLevels;
- (id)_blackInterpolationSource;
- (BOOL)_canUsePathConcatenation;
- (struct CGColor { } *)_colorForVariableThreshold:(double)a0 inRangeColor:(struct CGColor { } *)a1 outOfRangeColor:(struct CGColor { } *)a2;
- (BOOL)_containsWideGamutColor;
- (void)_drawHierarchicalLayerNamed:(id)a0 inContext:(struct CGContext { } *)a1 colorResolver:(id /* block */)a2;
- (void)_drawHierarchicalLayersInContext:(struct CGContext { } *)a0 scaleFactor:(double)a1 targetSize:(struct CGSize { double x0; double x1; })a2 colorResolver:(id /* block */)a3;
- (void)_drawMulticolorLayerNamed:(id)a0 inContext:(struct CGContext { } *)a1 colorResolver:(id /* block */)a2;
- (void)_drawMulticolorLayersInContext:(struct CGContext { } *)a0 scaleFactor:(double)a1 targetSize:(struct CGSize { double x0; double x1; })a2 colorResolver:(id /* block */)a3;
- (void)_drawTemplateLayerNamed:(id)a0 inContext:(struct CGContext { } *)a1 scaleFactor:(double)a2 targetSize:(struct CGSize { double x0; double x1; })a3 primaryColor:(struct CGColor { } *)a4 tertiaryColor:(struct CGColor { } *)a5;
- (struct { double x0; double x1; double x2; double x3; })_interpolatedAlignmentRectInsetsWithWeight:(long long)a0 glyphSize:(long long)a1 fromUltralight:(struct { double x0; double x1; double x2; double x3; })a2 regular:(struct { double x0; double x1; double x2; double x3; })a3 black:(struct { double x0; double x1; double x2; double x3; })a4;
- (double)_interpolatedBaselineOffsetWithWeight:(long long)a0 glyphSize:(long long)a1 fromUltralight:(double)a2 regular:(double)a3 black:(double)a4;
- (struct CGSize { double x0; double x1; })_interpolatedCanvasSizeWithWeight:(long long)a0 glyphSize:(long long)a1 fromUltralight:(struct CGSize { double x0; double x1; })a2 regular:(struct CGSize { double x0; double x1; })a3 black:(struct CGSize { double x0; double x1; })a4;
- (double)_interpolatedCapHeightWithWeight:(long long)a0 glyphSize:(long long)a1 fromUltralight:(double)a2 regular:(double)a3 black:(double)a4;
- (struct CGPath { } *)_interpolatedPathWithWeight:(long long)a0 glyphSize:(long long)a1 fromUltralightSmall:(struct CGPath { } *)a2 regularSmall:(struct CGPath { } *)a3 blackSmall:(struct CGPath { } *)a4;
- (id)_layersForRenderingMode:(int)a0 inRendition:(id)a1;
- (void)_lookupCatalogImageForIdiom:(long long)a0;
- (id)_referencePathsForHierarchicalMode;
- (id)_referencePathsForMulticolorMode;
- (id)_referencePathsForTemplateMode;
- (double)_requestedPointSizeRatio;
- (void)_setBlackInterpolationSource:(id)a0;
- (void)_setCanUsePathConcatenation:(BOOL)a0;
- (void)_setCatalog:(id)a0;
- (void)_setContainsNamedColorStyles:(short)a0;
- (void)_setFlippable:(BOOL)a0;
- (void)_setGlyphSize:(long long)a0;
- (void)_setGlyphWeight:(long long)a0;
- (void)_setLayoutDirection:(long long)a0;
- (void)_setPointSize:(double)a0;
- (void)_setUltralightInterpolationSource:(id)a0;
- (id)_stylePrefixForRenderingMode:(int)a0;
- (id)_ultralightInterpolationSource;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentRectForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (BOOL)generatedImage;
- (struct CGImage { } *)imageWithHierarchicalPrimaryColor:(struct CGColor { } *)a0;
- (id)initWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 fromCatalog:(id)a4 usingRenditionKey:(id)a5 fromTheme:(unsigned long long)a6;
- (id)intWithName:(id)a0 scaleFactor:(double)a1 deviceIdiom:(long long)a2 pointSize:(double)a3 weight:(long long)a4 glyphSize:(long long)a5 interpolatedFromRegular:(id)a6 ultralight:(id)a7 black:(id)a8 fromCatalog:(id)a9 themeRef:(unsigned long long)a10;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })interiorAlignmentRectForTargetSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (id)knownAvailableVectorSizes;
- (id)makeLayerWithColorResolver:(id /* block */)a0;
- (id)multicolorColorNames;
- (id)multicolorLayerColorNames;
- (struct CGImage { } *)rasterizeImageUsingScaleFactor:(double)a0 forTargetSize:(struct CGSize { double x0; double x1; })a1 hierarchicalPrimaryColor:(struct CGColor { } *)a2;
- (struct CGSize { double x0; double x1; })referenceCanvasSize;
- (struct CGSVGDocument { } *)referenceGlyph;
- (void)setRepresentsOnDemandContent:(BOOL)a0;
- (id)templateLayersInRendition:(id)a0;

@end

@class PREditor, NSMutableDictionary, PREditingTitledButton, UIAction, BSUIVibrancyEffectView, CSProminentDisplayViewController, PREditingReticleView, UIButton, UIScrollView, UIView, PRComplicationSceneHostViewController, NSLayoutConstraint, UIPageControl, PREditorLookTransition, NSString, NSArray, UIMenu, PREditingBottomLegibilityView, PREditingStandaloneLabelView, PREditingCancelButton;
@protocol PRDateProviding;

@interface PREditorRootViewController : UIViewController <PRDateObserving, BSInvalidatable, UIScrollViewDelegate> {
    NSMutableDictionary *_timeViewControllersForLook;
}

@property (retain, nonatomic) UIScrollView *scrollView;
@property (retain, nonatomic) UIPageControl *pageControl;
@property (retain, nonatomic) UIButton *primaryActionButton;
@property (retain, nonatomic) UIButton *actionsMenuButton;
@property (retain, nonatomic) PREditingBottomLegibilityView *bottomLegibilityView;
@property (retain, nonatomic) PREditingCancelButton *cancelButton;
@property (retain, nonatomic) PREditingTitledButton *acceptButton;
@property (retain, nonatomic) NSLayoutConstraint *bottomControlsYConstraint;
@property (retain, nonatomic) NSLayoutConstraint *primaryActionButtonXConstraint;
@property (retain, nonatomic) NSLayoutConstraint *actionsMenuButtonXConstraint;
@property (retain, nonatomic) NSLayoutConstraint *cancelButtonXConstraint;
@property (retain, nonatomic) NSLayoutConstraint *cancelButtonYConstraint;
@property (retain, nonatomic) NSLayoutConstraint *acceptButtonXConstraint;
@property (retain, nonatomic) NSLayoutConstraint *acceptButtonYConstraint;
@property (retain, nonatomic) PREditingStandaloneLabelView *lookNameLabel;
@property (retain, nonatomic) CSProminentDisplayViewController *subtitleViewController;
@property (retain, nonatomic) BSUIVibrancyEffectView *reticleVibrancyView;
@property (retain, nonatomic) BSUIVibrancyEffectView *emptyVibrancyView;
@property (retain, nonatomic) PREditingReticleView *timeReticleView;
@property (retain, nonatomic) PREditingReticleView *inlineComplicationReticleView;
@property (retain, nonatomic) PREditingReticleView *graphicComplicationsReticleView;
@property (retain, nonatomic) BSUIVibrancyEffectView *graphicComplicationsEmptyView;
@property (retain, nonatomic) UIView *timeGestureView;
@property (retain, nonatomic) PRComplicationSceneHostViewController *complicationHostViewController;
@property (nonatomic, getter=isDisconnected) BOOL disconnected;
@property (retain, nonatomic) PREditorLookTransition *lookTransition;
@property (retain, nonatomic) UIView *presentationDismissalGestureView;
@property (retain, nonatomic) UIView *touchBlockingView;
@property (nonatomic) BOOL needsReticleUpdate;
@property (weak, nonatomic) PREditor *editor;
@property (retain, nonatomic) id<PRDateProviding> dateProvider;
@property (retain, nonatomic) UIView *backgroundContainerView;
@property (retain, nonatomic) UIView *foregroundContainerView;
@property (retain, nonatomic) UIView *floatingContainerView;
@property (retain, nonatomic) UIView *timeContainerView;
@property (retain, nonatomic) UIView *complicationsContainerView;
@property (retain, nonatomic) UIView *contentOverlayView;
@property (copy, nonatomic) NSArray *looks;
@property (copy, nonatomic) UIAction *primaryAction;
@property (copy, nonatomic) UIMenu *actionsMenu;
@property (nonatomic, getter=isSubtitleHidden) BOOL subtitleHidden;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } leadingTopButtonFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } trailingTopButtonFrame;
@property (nonatomic, getter=areTopButtonsHidden) BOOL topButtonsHidden;
@property (nonatomic, getter=isAllUserInteractionDisabledExceptForCancelButton) BOOL allUserInteractionDisabledExceptForCancelButton;
@property (nonatomic) BOOL usesEditingLayout;
@property (nonatomic, getter=areControlsHidden) BOOL controlsHidden;
@property (nonatomic, getter=isComplicationsRowConfigured) BOOL complicationsRowConfigured;
@property (nonatomic) long long focusedComplicationElement;
@property (nonatomic, getter=isTimeReticleActive) BOOL timeReticleActive;
@property (nonatomic, getter=isDepthEffectDisabled) BOOL depthEffectDisabled;
@property (nonatomic, getter=isPresentingModalViewController) BOOL presentingModalViewController;
@property (nonatomic) BOOL ignoresScrolling;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)viewDidMoveToWindow:(id)a0 shouldAppearOrDisappear:(BOOL)a1;
- (void)scrollViewDidEndScrolling:(id)a0;
- (void)disconnect;
- (void)appendDescriptionToFormatter:(id)a0;
- (void)pageControlCurrentPageDidChange:(id)a0;
- (id)extensionBundleURL;
- (void)reconnect;
- (void)scrollViewWillEndDragging:(id)a0 withVelocity:(struct CGPoint { double x0; double x1; })a1 targetContentOffset:(inout struct CGPoint { double x0; double x1; } *)a2;
- (id)configuredProperties;
- (void)scrollViewDidScroll:(id)a0 withContext:(struct { long long x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; })a1;
- (void)invalidate;
- (void).cxx_destruct;
- (void)viewDidLayoutSubviews;
- (void)loadView;
- (void)looksWillChange;
- (void)setLooks:(id)a0 forUpdatingProperties:(BOOL)a1;
- (void)timeViewTapped:(id)a0;
- (void)updateTimeControllersForLookMap;
- (void)_setVibrancyConfiguration:(id)a0;
- (void)_updateComplicationsRowEmptyViewVisibility;
- (void)_updateComplicationsVibrancyFromCurrentLook;
- (void)addLookContentScrollViewSubview:(id)a0 atLayer:(long long)a1;
- (unsigned long long)backgroundTypeForLook:(id)a0;
- (id)beginTransitionToLook:(id)a0 method:(long long)a1;
- (id)currentLook;
- (void)currentLookDidChange;
- (void)dateProvider:(id)a0 didUpdateDate:(id)a1;
- (id)defaultTitleStyleConfigurationForLook:(id)a0;
- (void)depthEffectEnablementDidChange;
- (void)didFinishTransitionToLook:(id)a0;
- (void)didTransitionToLook:(id)a0 method:(long long)a1 progress:(double)a2;
- (id)effectiveTitleStyleConfigurationForLook:(id)a0;
- (void)enumerateTimeViewControllersUsingBlock:(id /* block */)a0;
- (void)forciblyFinishLookTransition;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForPageAtLookIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForPageAtViewIndex:(unsigned long long)a0;
- (id)lookAtScrollContentOffset:(struct CGPoint { double x0; double x1; })a0;
- (id)lookAtScrollContentOffset:(struct CGPoint { double x0; double x1; })a0 fractionOfDistanceThroughLook:(double *)a1;
- (void)lookBackgroundTypesDidChange;
- (unsigned long long)lookIndexForViewIndex:(unsigned long long)a0;
- (void)lookPropertiesDidChange;
- (void)looksDidChange;
- (id)makeComplicationHostingSceneWithSpecification:(id)a0;
- (id)makeComplicationsHostingScene;
- (void)modalPresentationDismissGestureDidFire:(id)a0;
- (void)requireGestureRecognizerToFailForLooksScroll:(id)a0;
- (struct CGPoint { double x0; double x1; })scrollContentOffsetForLook:(id)a0;
- (struct CGPoint { double x0; double x1; })scrollContentOffsetForLookAtIndex:(unsigned long long)a0;
- (void)scrollToLook:(id)a0 animated:(BOOL)a1;
- (void)scrollToLookAtIndex:(unsigned long long)a0 animated:(BOOL)a1;
- (void)setLeadingTopButtonFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 trailingTopButtonFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)setNeedsReticleUpdate;
- (BOOL)shouldFixTimeBetweenTransitionFromTitleStyleConfiguration:(id)a0 toTitleStyleConfiguration:(id)a1 extensionBundleURL:(id)a2;
- (id)timeViewControllerForLook:(id)a0;
- (void)updatePageControlCurrentPage;
- (void)updateReticlesIfNeeded;
- (void)updateTopButtonAlpha;
- (unsigned long long)viewIndexForLookIndex:(unsigned long long)a0;

@end

@interface TransferSeqTagMLFHelper : NSObject

- (id)createDataWithFloatValue:(float)a0 count:(unsigned long long)a1;
- (id)getModelLayerWeights:(struct vector<void *, std::allocator<void *>> { void **x0; void **x1; struct __compressed_pair<void **, std::allocator<void *>> { void **x0; } x2; })a0 modelType:(int)a1;
- (id)createConvLayerFromData:(unsigned long long)a0 width:(unsigned long long)a1 inputChannels:(unsigned long long)a2 outputChannels:(unsigned long long)a3 strideInX:(unsigned long long)a4 strideInY:(unsigned long long)a5 kernelWeight:(id)a6 kernelBias:(id)a7;
- (id)createConvLayerWithKernelHeight:(unsigned long long)a0 width:(unsigned long long)a1 inputChannels:(unsigned long long)a2 outputChannels:(unsigned long long)a3 strideInX:(unsigned long long)a4 strideInY:(unsigned long long)a5;
- (id)createFullyConnectedLayer:(unsigned long long)a0 outputSize:(unsigned long long)a1;
- (id)createFullyConnectedLayerFromData:(unsigned long long)a0 outputSize:(unsigned long long)a1 weightData:(id)a2 biasData:(id)a3;
- (void)createGraphObjectAndLayersFromInputPlaceholders:(void *)a0 scalarWeights:(void *)a1 labelSize:(unsigned long long)a2 embeddingDimension:(long long)a3 graphObject:(id)a4 graphLayerList:(void *)a5 modelType:(int)a6;
- (id)createGraphObjectFromLayers:(void *)a0 graphObject:(id)a1 inputPlaceholders:(void *)a2 modelType:(int)a3;
- (id)createInferenceGraphFromGraphObject:(id)a0 inputPlaceholders:(void *)a1 scalarWeights:(void *)a2 finalLayerTensor:(id)a3 device:(id)a4;
- (void)createInferenceGraphWithLayers:(void *)a0 labelArray:(void *)a1 inferenceParams:(void *)a2 modelType:(int)a3 inputSentences:(void *)a4 inputPlaceholders:(void *)a5 inferenceGraph:(id *)a6;
- (id)createLSTM:(unsigned long long)a0 outputSize:(unsigned long long)a1 useBiLSTM:(BOOL)a2;
- (id)createLSTMFromWeights:(unsigned long long)a0 outputSize:(unsigned long long)a1 useBiLSTM:(BOOL)a2 inputWeights:(id)a3 hiddenWeights:(id)a4 biasTerms:(id)a5;
- (id)createNSDataWithFloatValue:(float)a0 count:(unsigned long long)a1;
- (id)createTrainingGraphFromGraphObject:(id)a0 inputPlaceholders:(void *)a1 scalarWeights:(void *)a2 targetLabels:(id)a3 targeLabelWeights:(id)a4 device:(id)a5;
- (void)doInferenceWithInferenceGraph:(id)a0 scalarParams:(void *)a1 labelArray:(void *)a2 inferenceParams:(void *)a3 elmoEmbeddingRef:(void *)a4 modelType:(int)a5 inputPlaceholders:(void *)a6 testSentences:(void *)a7 predictedLabels:(void *)a8;
- (const struct __CFDictionary { } *)doSeqTagTrainingAndEvalFromData:(void *)a0 batchedLabels:(void *)a1 batchedPaddedLabelDatasets:(void *)a2 trainingParams:(void *)a3 labelArray:(void *)a4 elmoEmbeddingRef:(void *)a5 modeLayerList:(void *)a6 modelType:(int)a7 trainingGraph:(id)a8 inferenceGraph:(id)a9 scalarParams:(void *)a10 inputPlaceholders:(void *)a11 targetLabelPlaceholders:(id)a12 targetLabelWeightsPlaceholders:(id)a13 trainingLogger:(id /* block */)a14;
- (float)evaluateInferenceGraphOnData:(void *)a0 batchedLabels:(void *)a1 inferenceGraph:(id)a2 elmoEmbeddingRef:(void *)a3 modelType:(int)a4 inputPlaceholders:(void *)a5 inferenceParams:(void *)a6 scalarParams:(void *)a7 labelArray:(void *)a8 dataTypeString:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x0; struct __short { char x0[23]; unsigned char x1[0]; unsigned char x2 : 7; unsigned char x3 : 1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; })a9 trainingLogger:(id /* block */)a10;
- (void)evaluateInferenceGraphWithInputTensorData:(void *)a0 batchedInputSentences:(void *)a1 batchedLabels:(void *)a2 inferenceGraph:(id)a3 modelType:(int)a4 inputPlaceholders:(void *)a5 inferenceParams:(void *)a6 scalarParams:(void *)a7 labelArray:(void *)a8 dataTypeString:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x0; struct __short { char x0[23]; unsigned char x1[0]; unsigned char x2 : 7; unsigned char x3 : 1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; })a9 trainingLogger:(id /* block */)a10 predictedLabels:(void *)a11;
- (float)evaluateMontrealModelOnData:(void *)a0 evalLabels:(void *)a1 evalEmbeddingsCache:(void *)a2 elmoEmbeddingRef:(void *)a3 montrealModel:(void *)a4 labelArray:(void *)a5 trainingLogger:(id /* block */)a6 dataTypeString:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x0; struct __short { char x0[23]; unsigned char x1[0]; unsigned char x2 : 7; unsigned char x3 : 1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; })a7 predictedLabels:(void *)a8;
- (void)executeInferenceGraph:(id)a0 inputsDictionary:(id)a1 batchSize:(int)a2 maxLength:(int)a3 labelSize:(int)a4 predictedLabels:(void *)a5;
- (id)findMaxIndexWithData:(id)a0 batchSize:(unsigned long long)a1 sequenceLength:(unsigned long long)a2 numClasses:(unsigned long long)a3;
- (void)flattenBatchOfOneHotSequences:(void *)a0 flattenedBatch:(void *)a1;
- (void)getElmoEmbeddingsForSequenceData:(void *)a0 batchSize:(int)a1 maxLength:(int)a2 embeddingRef:(void *)a3 inputTensorDataItems:(void *)a4 splitElmo:(BOOL)a5;
- (void)getInputEmbeddingsAndTargetTensorsForSequenceData:(void *)a0 seqLabels:(void *)a1 batchSize:(int)a2 maxLength:(int)a3 numClasses:(int)a4 embeddingRef:(void *)a5 modelType:(int)a6 inputTensorDataItems:(void *)a7 targetTensorData:(id *)a8 targetWeightTensorData:(id *)a9;
- (void)getMaxIndicesFromOneHotVectors:(void *)a0 maxIndicesBatch:(void *)a1;
- (void)getNSSequenceFromStdSequence:(void *)a0 nsSentences:(id)a1 nsSeqLengths:(id)a2 maxLength:(int)a3;
- (void)labelIdsToString:(void *)a0 labelArray:(void *)a1 labelStrings:(void *)a2;
- (BOOL)loadModelLayersFromWeights:(id)a0 labelSize:(unsigned long long)a1 embeddingDimension:(long long)a2 modelLayers:(void *)a3 modelType:(int)a4;
- (void)printLstmWeights:(id)a0;
- (void)removeBatchingFromDataAndLabels:(void *)a0 batchedLabels:(void *)a1 inputSentences:(void *)a2 inputLabels:(void *)a3 maxLength:(int)a4;
- (float)showF1ResultsMatrix:(void *)a0 labelCounts:(struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> { struct __tree<std::__value_type<int, int>, std::__map_value_compare<int, std::__value_type<int, int>, std::less<int>, true>, std::allocator<std::__value_type<int, int>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<int, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, int>, std::less<int>, true>> { unsigned long long x0; } x2; } x0; })a1 perLabelResults:(void *)a2 trainingLogger:(id /* block */)a3 dataTypeString:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long x2 : 63; unsigned char x3 : 1; } x0; struct __short { char x0[23]; unsigned char x1[0]; unsigned char x2 : 7; unsigned char x3 : 1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; })a4;
- (void)trainAndSaveSeqTagModelFromData:(void *)a0 batchedLabels:(void *)a1 trainingParams:(void *)a2 modelType:(int)a3 labelArray:(void *)a4 trainedModelDict:(struct __CFDictionary **)a5 trainingLogger:(id /* block */)a6;

@end

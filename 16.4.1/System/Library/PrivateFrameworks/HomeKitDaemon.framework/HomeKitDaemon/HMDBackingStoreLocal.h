@class NSString, NSMutableArray, NSMutableDictionary;

@interface HMDBackingStoreLocal : HMFObject <HMFLogging> {
    struct sqlite3 { } *context;
    void *sqlite3_cache;
    struct sqlite3_stmt { } *insertZone;
    struct sqlite3_stmt { } *deleteZone;
    struct sqlite3_stmt { } *selectZones;
    struct sqlite3_stmt { } *insertStore;
    struct sqlite3_stmt { } *selectStores;
    struct sqlite3_stmt { } *insertGroup;
    struct sqlite3_stmt { } *deleteGroup;
    struct sqlite3_stmt { } *selectGroups;
    struct sqlite3_stmt { } *updateGroupToken;
    struct sqlite3_stmt { } *updateGroupSubscription;
    struct sqlite3_stmt { } *insertShare;
    struct sqlite3_stmt { } *updateShareShare;
    struct sqlite3_stmt { } *updateShareUsers;
    struct sqlite3_stmt { } *deleteShare;
    struct sqlite3_stmt { } *selectShares;
    struct sqlite3_stmt { } *insertRecord;
    struct sqlite3_stmt { } *updateRecordSchema;
    struct sqlite3_stmt { } *selectRecordCountGroup;
    struct sqlite3_stmt { } *selectRecordGroupTypeSchema;
    struct sqlite3_stmt { } *selectRecordGroup;
    struct sqlite3_stmt { } *selectRecordGroupMap;
    struct sqlite3_stmt { } *selectRecordUUID;
    struct sqlite3_stmt { } *selectRecordParentUUID;
    struct sqlite3_stmt { } *selectRecordParent;
    struct sqlite3_stmt { } *selectRecordName;
    struct sqlite3_stmt { } *selectRecordUUIDNoShare;
    struct sqlite3_stmt { } *selectRecordParentNoShare;
    struct sqlite3_stmt { } *selectRecordNameNoShare;
    struct sqlite3_stmt { } *selectRecords;
    struct sqlite3_stmt { } *selectStoreRecords;
    struct sqlite3_stmt { } *deleteRecord;
    struct sqlite3_stmt { } *flushPushedXact;
    struct sqlite3_stmt { } *insertLog;
    struct sqlite3_stmt { } *updateLogToDiskCommited;
    struct sqlite3_stmt { } *updateLogXactID;
    struct sqlite3_stmt { } *selectLog;
    struct sqlite3_stmt { } *selectChangeExistsLog;
    struct sqlite3_stmt { } *selectAllLog;
    struct sqlite3_stmt { } *insertLogOptions;
    struct sqlite3_stmt { } *selectLogOptions;
    struct sqlite3_stmt { } *updateLog;
    struct sqlite3_stmt { } *deleteLog;
    struct sqlite3_stmt { } *insertArchive;
    struct sqlite3_stmt { } *selectArchive;
    struct sqlite3_stmt { } *commit;
    struct sqlite3_stmt { } *rollback;
    struct sqlite3_stmt { } *begin;
}

@property (readonly) BOOL isTransactionReplayFeatureEnabled;
@property (retain, nonatomic) NSMutableArray *zoneCache;
@property (retain, nonatomic) NSMutableDictionary *storeCache;
@property (readonly, nonatomic) NSString *datastoreFile;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)logCategory;
+ (void)cleanDatastoreFilesAt:(id)a0 everything:(BOOL)a1;

- (id)_begin;
- (id)initWithDatastore:(id)a0;
- (id)logIdentifier;
- (id)_commit;
- (id)flush:(BOOL)a0;
- (void)dealloc;
- (void).cxx_destruct;
- (void)_freeResources;
- (void)_rollback;
- (id)_fillStoreCache;
- (id)_createDatastoreTables:(id)a0;
- (id)_createNewDatastore:(id)a0;
- (id)_deleteGroupWithID:(long long)a0;
- (id)_deleteLog:(long long)a0;
- (id)_deleteRecordWithGroupID:(long long)a0 recordName:(id)a1;
- (id)_deleteZoneWithID:(long long)a0;
- (id)_dropUncommittedUnpushedTransactions;
- (id)_fetchGroupsForZone:(id)a0 withError:(id *)a1;
- (unsigned long long)_fetchIDForStore:(id)a0 error:(id *)a1;
- (void)_fetchRecordCountWithGroupID:(long long)a0 callback:(id /* block */)a1;
- (void)_fetchRecordMapWithGroupID:(long long)a0 callback:(id /* block */)a1;
- (void)_fetchRecordTypeSchemaWithGroupID:(long long)a0 callback:(id /* block */)a1;
- (id)_fetchRecordWithUUID:(id)a0 root:(id)a1 error:(id *)a2;
- (void)_fetchRecordsWithGroupID:(long long)a0 callback:(id /* block */)a1;
- (void)_fetchRecordsWithGroupID:(long long)a0 names:(id)a1 callback:(id /* block */)a2;
- (void)_fetchRecordsWithGroupID:(long long)a0 parent:(id)a1 type:(id)a2 callback:(id /* block */)a3;
- (void)_fetchRecordsWithGroupID:(long long)a0 parentUuids:(id)a1 callback:(id /* block */)a2;
- (void)_fetchRecordsWithGroupID:(long long)a0 uuids:(id)a1 callback:(id /* block */)a2;
- (id)_fetchUncommittedAndPushedTransactions;
- (id)_fetchZonesWithError:(id *)a0;
- (id)_fillZoneCache;
- (unsigned long long)_insertArchive:(id)a0 identifier:(id)a1 controllerUserName:(id)a2 error:(id *)a3;
- (long long)_insertGroupWithZoneID:(long long)a0 root:(id)a1 owner:(id)a2 subscription:(id)a3 error:(id *)a4;
- (id)_insertLogOptionsWithID:(long long)a0 options:(id)a1;
- (unsigned long long)_insertLogWithRoot:(id)a0 transaction:(id)a1 set:(long long)a2 error:(id *)a3;
- (long long)_insertZoneWithName:(id)a0 error:(id *)a1;
- (id)_instanceResources:(BOOL)a0 migrate:(BOOL)a1;
- (long long)_numUncommittedTransactions;
- (id)_runSQLite3:(const char *)a0 bind:(id)a1 error:(id *)a2;
- (void)_selectAllLog:(id /* block */)a0;
- (void)_selectAllRecords:(id /* block */)a0;
- (BOOL)_selectArchiveWithIdentifier:(id)a0 archive:(id *)a1 controllerUserName:(id *)a2 error:(id *)a3;
- (id)_selectLogOptionsWithID:(long long)a0;
- (void)_selectLogWithMask:(long long)a0 compare:(long long)a1 callback:(id /* block */)a2;
- (void)_selectLogWithRoot:(id)a0 after:(long long)a1 mask:(long long)a2 compare:(long long)a3 callback:(id /* block */)a4;
- (id)_updateGroupWithID:(long long)a0 serverChangeToken:(id)a1;
- (id)_updateGroupWithID:(long long)a0 subscription:(id)a1;
- (id)_updateLog:(long long)a0 mask:(long long)a1 set:(long long)a2;
- (id)_updateRecordWithGroupID:(long long)a0 name:(id)a1 schema:(id)a2;
- (id)_updateRecordWithGroupID:(long long)a0 store:(long long)a1 name:(id)a2 model:(id)a3;
- (id)_updateRecordWithGroupID:(long long)a0 store:(long long)a1 name:(id)a2 record:(id)a3 uuid:(id)a4 parentUUID:(id)a5 type:(id)a6 data:(id)a7 encoding:(long long)a8 schema:(id)a9;
- (id)_updateRecordWithGroupID:(long long)a0 store:(long long)a1 record:(id)a2;
- (id)_updateRecordWithGroupID:(long long)a0 store:(long long)a1 record:(id)a2 data:(id)a3 encoding:(long long)a4;
- (id)initWithDB:(id)a0 migrate:(BOOL)a1 error:(id *)a2;
- (id)initWithDB:(id)a0 migrate:(BOOL)a1 shouldEnableTransactionReplayMode:(BOOL)a2 error:(id *)a3;
- (id)initWithDatastore:(id)a0 shouldEnableTransactionReplayMode:(BOOL)a1;

@end

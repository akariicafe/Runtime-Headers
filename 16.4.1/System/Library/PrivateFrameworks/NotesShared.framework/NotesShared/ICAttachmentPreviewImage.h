@class ICAttachment, NSString, NSData, ICAccount, NSObject, NSDate;
@protocol OS_dispatch_queue, ICAttachmentPreviewImageCryptoStrategy;

@interface ICAttachmentPreviewImage : ICCloudSyncingObject <ICAttachmentPreviewImageUI>

@property (weak, nonatomic) ICAccount *placeholderAccount;
@property (nonatomic) unsigned long long imageID;
@property (readonly) NSObject<OS_dispatch_queue> *fileQueue;
@property (nonatomic) BOOL suppressesFileDeletion;
@property (readonly) id<ICAttachmentPreviewImageCryptoStrategy> cryptoStrategy;
@property (retain, nonatomic) NSData *encryptedMetadata;
@property (retain, nonatomic) NSData *cryptoMetadataInitializationVector;
@property (retain, nonatomic) NSData *cryptoMetadataTag;
@property (nonatomic) double width;
@property (nonatomic) double height;
@property (nonatomic) double scale;
@property (nonatomic) short appearanceType;
@property (nonatomic) short version;
@property (nonatomic) BOOL versionOutOfDate;
@property (retain, nonatomic) NSDate *modifiedDate;
@property (retain, nonatomic) ICAttachment *attachment;
@property (nonatomic) BOOL scaleWhenDrawing;
@property (retain, nonatomic) NSData *metadata;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)concurrentFileLoadLimitSemaphore;
+ (id)fileGlobalQueue;
+ (id)allAttachmentPreviewImagesInContext:(id)a0;
+ (id)attachmentPreviewImageIdentifiersForAccount:(id)a0;
+ (id)attachmentPreviewImageWithIdentifier:(id)a0 inContext:(id)a1;
+ (id)attachmentPreviewImagesMatchingPredicate:(id)a0 inContext:(id)a1;
+ (void)deleteStrandedAttachmentPreviewImagesInContext:(id)a0;
+ (void)enumerateAttachmentPreviewImagesInContext:(id)a0 batchSize:(unsigned long long)a1 saveAfterBatch:(BOOL)a2 usingBlock:(id /* block */)a3;
+ (id)fileQueueGroup;
+ (id)identifierForContentIdentifier:(id)a0 scale:(double)a1 width:(double)a2 height:(double)a3 appearanceType:(unsigned long long)a4;
+ (id)newAttachmentPreviewImageWithIdentifier:(id)a0 attachment:(id)a1;
+ (id)previewImageURLsForIdentifier:(id)a0 account:(id)a1;
+ (void)purgeAllAttachmentPreviewImagesInContext:(id)a0;
+ (void)purgePreviewImageFilesForIdentifiers:(id)a0 account:(id)a1;
+ (long long)updateFileWriteCounterBy:(long long)a0 identifier:(id)a1;
+ (void)waitUntilAllFileWritesAreFinished;

- (void)invalidateCache;
- (id)images;
- (void)prepareForDeletion;
- (void)setMetadata:(id)a0;
- (void)willTurnIntoFault;
- (id)metadata;
- (id)debugQuickLookObject;
- (id)initWithEntity:(id)a0 insertIntoManagedObjectContext:(id)a1;
- (void)removeItemAtURL:(id)a0;
- (struct CGSize { double x0; double x1; })size;
- (void).cxx_destruct;
- (BOOL)shouldSyncToCloud;
- (id)previewImageURL;
- (id)cloudAccount;
- (id)decryptedImageData;
- (void)invalidateOrientedImage;
- (BOOL)needsInitialFetchFromCloud;
- (BOOL)needsToBeFetchedFromCloud;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })orientedImageTransform;
- (id)orientedPreviewImageURL;
- (id)orientedPreviewImageURLWithoutCreating;
- (BOOL)setImageData:(id)a0 withSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2 appearanceType:(unsigned long long)a3;
- (void)invalidateImage;
- (id)primaryEncryptedDataFromRecord:(id)a0;
- (void)accountWillChangeToAccount:(id)a0;
- (id)containerAccount;
- (void)createOrientedPreviewIfNeeded;
- (id)cryptoStrategyProtocol;
- (void)deleteFromLocalDatabase;
- (id)encryptedPreviewImageURL;
- (BOOL)hasAnyPNGPreviewImageFiles;
- (id)ic_loggingValues;
- (BOOL)imageIsValid;
- (BOOL)imageIsWriting;
- (BOOL)makeSurePreviewImageDirectoryExists:(id *)a0;
- (long long)minimumSupportedNotesVersion;
- (BOOL)needsToBeDeletedFromCloud;
- (BOOL)needsToBePushedToCloud;
- (id)parentEncryptableObject;
- (id)previewImagePathExtension;
- (id)primaryEncryptedData;
- (void)saveAndClearDecryptedData;
- (BOOL)setScaledImageFromImageSrc:(struct CGImageSource { } *)a0 typeUTI:(struct __CFString { } *)a1;
- (void)suppressFileDeletion;
- (void)updateFlagToExcludeFromCloudBackup;

@end

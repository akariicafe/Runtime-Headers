@class NSURL, NSMutableDictionary, MobileCalDAVAccountRefreshActor, NSDictionary, MobileCalDAVPrincipal, DACoreDAVTaskManager, NSTimeZone, CalDAVPrincipalSearchPropertySet, NSMutableArray, NSString, NSSet, CalDAVServerVersion, CalDAVRefreshContext, NSMutableSet, CoreDAVDiscoveryTaskGroup, NSArray, DACoreDAVLogger;
@protocol CalDAVPrincipal;

@interface MobileCalDAVAccount : DAAccount <CDBAccountInfo, DACalDAVAccount> {
    int _wasMigrated;
    NSMutableSet *_mMovedItemURLStrings;
    NSMutableArray *_duplicateCalendars;
    NSString *_usernameForDiscovery;
    NSString *_hostForDiscovery;
    BOOL _syncInProgress;
}

@property (retain, nonatomic) CoreDAVDiscoveryTaskGroup *checkValidityTaskGroup;
@property (retain, nonatomic) MobileCalDAVAccountRefreshActor *actor;
@property (nonatomic) BOOL isSpinning;
@property (retain, nonatomic) NSMutableSet *searchTaskSet;
@property (retain, nonatomic) DACoreDAVLogger *coreDAVLogger;
@property (retain, nonatomic) NSMutableDictionary *mPrincipals;
@property (retain, nonatomic) NSMutableDictionary *mItemIDsToMoveActions;
@property (retain, nonatomic) NSMutableSet *mMovedItemURLStrings;
@property (retain, nonatomic) NSMutableSet *mCalendars;
@property (nonatomic) BOOL subscribedCalendarsChanged;
@property (retain, nonatomic) MobileCalDAVPrincipal<CalDAVPrincipal> *mainPrincipal;
@property (readonly, nonatomic) NSDictionary *principals;
@property (retain, nonatomic) NSDictionary *delegateUserInfos;
@property (readonly, nonatomic) DACoreDAVTaskManager *taskManager;
@property (retain, nonatomic) NSURL *collectionSetURL;
@property (retain, nonatomic) CalDAVPrincipalSearchPropertySet *searchPropertySet;
@property (retain, nonatomic) NSString *overriddenServer;
@property (retain, nonatomic) NSString *overriddenScheme;
@property (nonatomic) int overriddenPort;
@property (nonatomic) double refreshInterval;
@property (nonatomic) BOOL pushDisabled;
@property (nonatomic) BOOL isWritable;
@property (nonatomic) BOOL wasMigrated;
@property (nonatomic) BOOL needsAccountPropertyRefresh;
@property (nonatomic) BOOL isRefreshing;
@property (readonly, nonatomic) NSDictionary *itemIDsToMoveActions;
@property (readonly, nonatomic) NSSet *movedItemURLStrings;
@property (copy, nonatomic) NSString *calendarHomeSyncToken;
@property (retain, nonatomic) CalDAVServerVersion *serverVersion;
@property (nonatomic) int preferredEventDaysToSync;
@property (nonatomic) int preferredToDoDaysToSync;
@property (readonly, nonatomic) NSTimeZone *viewedTimeZone;
@property (readonly, nonatomic) BOOL shouldFilterEventSyncTimeRange;
@property (readonly, nonatomic) BOOL shouldFilterSyncTimeRangeForInbox;
@property (readonly, nonatomic) BOOL shouldUseCalendarHomeSyncReport;
@property (nonatomic) BOOL haveForcedDefaultCalendarRefetch;
@property (readonly, nonatomic) BOOL supportsReminders;
@property (readonly, nonatomic) BOOL supportsEvents;
@property (retain, nonatomic) CalDAVRefreshContext *refreshContext;
@property (readonly, nonatomic) NSURL *serverBaseURL;
@property (readonly, nonatomic) NSArray *wellKnownPaths;
@property (readonly, nonatomic) NSSet *calendars;
@property (retain, nonatomic) NSDictionary *subscribedCalendars;
@property (readonly, nonatomic) NSArray *duplicateCalendars;
@property (nonatomic) BOOL searchQueriesShouldCancel;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)defaultAlarmOffsetFromICSString:(id)a0;

- (id)emailAddresses;
- (void)task:(id)a0 didFinishWithError:(id)a1;
- (id)accountDescription;
- (id)logHandle;
- (void)updateDelegates;
- (void)setAccountDescription:(id)a0;
- (id)username;
- (id)host;
- (void)releasePowerAssertion;
- (BOOL)addressIsAccountOwner:(id)a0;
- (void)dealloc;
- (BOOL)isEqualToAccount:(id)a0;
- (id)init;
- (void).cxx_destruct;
- (id)principalPath;
- (void)setPrincipalPath:(id)a0;
- (id)preferredAddress;
- (void)removeCalendar:(id)a0;
- (BOOL)isCalDAVAccount;
- (id)localizedInvalidPasswordMessage;
- (void)_reallyCancelAllSearchQueries;
- (void)_reallyCancelSearchQuery:(id)a0;
- (void)_reallyPerformSearchQuery:(id)a0;
- (BOOL)_reallySearchQueriesRunning;
- (BOOL)accountHasSignificantPropertyChangesWithChangeInfo:(id)a0;
- (void)addToCoreDAVLoggingDelegates;
- (void)calendarsDataclassModified;
- (void)discoverInitialPropertiesWithConsumer:(id)a0;
- (void)ingestBackingAccountInfoProperties;
- (id)initWithBackingAccountInfo:(id)a0;
- (BOOL)isDelegateAccount;
- (id)localizedIdenticalAccountFailureMessage;
- (id)onBehalfOfBundleIdentifier;
- (void)removeFromCoreDAVLoggingDelegates;
- (BOOL)saveModifiedPropertiesOnBackingAccount;
- (void)setPrincipalURL:(id)a0;
- (id)spinnerIdentifiers;
- (BOOL)upgradeAccount;
- (void)retainPowerAssertion;
- (void)coreDAVLogTransmittedDataPartial:(id)a0;
- (void)coreDAVTransmittedDataFinished;
- (void)discoveryTask:(id)a0 gotAccountInfo:(id)a1 error:(id)a2;
- (void)noteHomeSetOnDifferentHost:(id)a0;
- (BOOL)shouldLogTransmittedData;
- (BOOL)_updateCalendarStoreProperties:(void *)a0;
- (void)reloadCalendars;
- (void)setUseKerberos:(BOOL)a0;
- (id)_calendarConstraintsName;
- (void)_clearOrphanedCalendarItemChangesOfType:(int)a0 withContext:(id)a1 goodCalendarIds:(id)a2;
- (void)_clearOrphanedChangesWithChangesCall:(void /* function */ *)a0 entityType:(int)a1 withContext:(id)a2;
- (void)_clearOrphanedChangesWithContext:(id)a0;
- (id)_collectActionsFromMoveDictionary:(struct __CFDictionary { } *)a0 forDataclass:(id)a1 outShouldSave:(BOOL *)a2;
- (void)_collectMoveActions;
- (void)_foundDuplicateCalendar:(id)a0 ofCalendar:(id)a1;
- (void)_foundDuplicateCalendars:(int)a0;
- (void)_logDuplicateCalendarDetails:(void *)a0;
- (id)_powerAssertionContext;
- (id)_powerAssertionGroupIdentifier;
- (BOOL)_saveModifiedPrincipalsOnBackingAccount;
- (BOOL)_saveModifiedSubscribedCalendarsOnBackingAccount;
- (void)_setParentAccount:(id)a0;
- (void)_setSpinning:(BOOL)a0;
- (void)_updateCalendarStore:(BOOL)a0;
- (BOOL)_updateCalendarStoreWithAlreadyOpenDBShouldCreate:(BOOL)a0 syncingThisAccount:(BOOL)a1;
- (void)addCalendar:(id)a0;
- (void)addPrincipal:(id)a0;
- (void)cancelRefreshWithCompletion:(id /* block */)a0;
- (id)childAccountWithIdentifier:(id)a0;
- (void *)copyCalStore;
- (id)delegatePrincipalPath;
- (void)dropPowerAssertions;
- (id)externalInfoDictionary;
- (id)httpPorts;
- (id)httpsPorts;
- (void)performDiscoveryWithHostname:(id)a0 username:(id)a1 consumer:(id)a2;
- (id)portListByInsertingUserEnteredPort:(id)a0;
- (void)reattainPowerAssertions;
- (void)refreshActor:(id)a0 didCompleteWithError:(id)a1;
- (void)refreshWithContext:(id)a0;
- (void)removeCalendarWithURL:(id)a0;
- (void)removePrincipal:(id)a0;
- (BOOL)retryDiscoveryTask:(id)a0;
- (void)setDelegatePrincipalPath:(id)a0;
- (void)setIsDelegateAccount:(BOOL)a0;
- (void)syncEndedWithError:(id)a0;
- (void)syncStarted;
- (BOOL)useKerberos;

@end

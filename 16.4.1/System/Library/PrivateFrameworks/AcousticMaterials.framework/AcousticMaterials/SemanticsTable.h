@interface SemanticsTable : NSObject

@property struct unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>> { struct __hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>> { float __value_; } __p3_; } __table_; } SemanticsMap;
@property struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>> { float __value_; } __p3_; } __table_; } MeshMaterialMap;
@property struct unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>> { struct __hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>> { float __value_; } __p3_; } __table_; } MeshClassificationMap;

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)getARMeshClassificationID:(id)a0 ARMeshClassificationID:(long long *)a1 error:(id *)a2;
- (BOOL)getARMeshMaterialID:(id)a0 ARMeshMaterialID:(long long *)a1 error:(id *)a2;
- (struct materialsForPair { id x0; id x1; id x2; } *)getMaterialsForPair:(const struct semantic_pair { long long x0; long long x1; unsigned long long x2; } *)a0 error:(id *)a1;
- (id)labelsForSemanticType:(id)a0 error:(id *)a1;
- (void)readTable:(id *)a0;

@end

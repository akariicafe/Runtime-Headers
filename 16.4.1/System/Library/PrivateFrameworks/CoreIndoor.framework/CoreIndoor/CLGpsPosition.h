@interface CLGpsPosition : NSObject <NSSecureCoding>

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, nonatomic) struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::ratio<1, 1000000000>>> { struct duration<long long, std::ratio<1, 1000000000>> { long long __rep_; } __d_; } expiry;
@property (readonly, nonatomic) struct { int suitability; struct { double latitude; double longitude; } coordinate; double horizontalAccuracy; double altitude; double verticalAccuracy; double speed; double speedAccuracy; double course; double courseAccuracy; double timestamp; int confidence; double lifespan; int type; struct { double latitude; double longitude; } rawCoordinate; double rawCourse; int floor; unsigned int integrity; int referenceFrame; int rawReferenceFrame; int signalEnvironmentType; double ellipsoidalAltitude; BOOL fromSimulationController; } gpsLocation;
@property (readonly, nonatomic) struct { double odometer; double deltaDistance; double deltaDistanceAccuracy; double timestampGps; double machtime; float horzUncSemiMaj; float horzUncSemiMin; float horzUncSemiMajAz; BOOL isFitnessMatch; int matchQuality; struct { double latitude; double longitude; } matchCoordinate; double matchCourse; int matchFormOfWay; int matchRoadClass; BOOL matchShifted; struct { double rawUnmodifiedCourse; double rawUnmodifiedCourseUnc; BOOL isStatic; BOOL isMounted; int estimatedLane; double estimatedLaneProbability; long long estimatedLaneFeatureID; double flowlineSnapLat; double flowlineSnapLon; double flowlineSnapCourse; } mapMatcherData; struct { struct { int lapCount; double currentLapStartTime; double currentLapDurationInSeconds; double currentLapDistanceInMeters; double previousLapDurationInSeconds; double previousLapDistanceInMeters; struct { double latitude; double longitude; } previousLapPositionAtCompletionInDegrees; double currentTrackRunSessionDurationInSeconds; double currentTrackRunSessionDistanceInMeters; } lapInformation; int laneNumber; unsigned long long trackId; int estimatedLaneNumber; int laneCount; int estimatedLaneConfidence; int trackProximity; double distanceToTrackMeters; BOOL odometerHasBeenCorrected; } trackRunData; struct { double value; double std; } pressure; int undulationModel; float undulation; struct { double latitude; double longitude; } specialCoordinate; double specialHorizontalAccuracy; double machContinuousTime; int originDevice; BOOL isMatcherPropagatedCoordinates; double slope; double maxAbsSlope; double groundAltitude; double groundAltitudeUncertainty; double rawHorizontalAccuracy; double rawAltitude; double rawVerticalAccuracy; double rawCourseAccuracy; BOOL isCoordinateFused; BOOL isCoordinateFusedWithVL; struct { double latitude; double longitude; } fusedCoordinate; double fusedHorizontalAccuracy; int fusedReferenceFrame; double fusedAltitude; double fusedVerticalAccuracy; double fusedCourse; double fusedCourseAccuracy; int positionContextState; double probabilityPositionContextStateIndoor; double probabilityPositionContextStateOutdoor; int batchedLocationFixType; } gpsLocationPrivate;

- (void)encodeWithCoder:(id)a0;
- (id).cxx_construct;
- (id)initWithCoder:(id)a0;
- (BOOL)isStaleFix:(struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::ratio<1, 1000000000>>> { struct duration<long long, std::ratio<1, 1000000000>> { long long x0; } x0; })a0;
- (id)init;
- (id)description;
- (id)initWithLocation:(const struct { int x0; struct { double x0; double x1; } x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; int x10; double x11; int x12; struct { double x0; double x1; } x13; double x14; int x15; unsigned int x16; int x17; int x18; int x19; double x20; BOOL x21; } *)a0 andPrivateLocation:(const struct { double x0; double x1; double x2; double x3; double x4; float x5; float x6; float x7; BOOL x8; int x9; struct { double x0; double x1; } x10; double x11; int x12; int x13; BOOL x14; struct { double x0; double x1; BOOL x2; BOOL x3; int x4; double x5; long long x6; double x7; double x8; double x9; } x15; struct { struct { int x0; double x1; double x2; double x3; double x4; double x5; struct { double x0; double x1; } x6; double x7; double x8; } x0; int x1; unsigned long long x2; int x3; int x4; int x5; int x6; double x7; BOOL x8; } x16; struct { double x0; double x1; } x17; int x18; float x19; struct { double x0; double x1; } x20; double x21; double x22; int x23; BOOL x24; double x25; double x26; double x27; double x28; double x29; double x30; double x31; double x32; BOOL x33; BOOL x34; struct { double x0; double x1; } x35; double x36; int x37; double x38; double x39; double x40; double x41; int x42; double x43; double x44; int x45; } *)a1;

@end

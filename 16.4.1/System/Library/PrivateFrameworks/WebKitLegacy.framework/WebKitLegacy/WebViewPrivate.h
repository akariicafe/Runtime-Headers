@class NSURL;
@protocol WebCaretChangeListener, WebFormDelegate, WebDeviceOrientationProvider, WebNotificationProvider, WebGeolocationProvider;

@interface WebViewPrivate : NSObject {
    struct Page { } *page;
    struct RefPtr<WebViewGroup, WTF::RawPtrTraits<WebViewGroup>, WTF::DefaultRefDerefTraits<WebViewGroup>> { struct WebViewGroup *m_ptr; } group;
    id UIDelegate;
    struct RetainPtr<id> { void *m_ptr; } UIDelegateForwarder;
    id resourceProgressDelegate;
    id downloadDelegate;
    id policyDelegate;
    struct RetainPtr<id> { void *m_ptr; } policyDelegateForwarder;
    id frameLoadDelegate;
    struct RetainPtr<id> { void *m_ptr; } frameLoadDelegateForwarder;
    id<WebFormDelegate> formDelegate;
    id editingDelegate;
    struct RetainPtr<id> { void *m_ptr; } editingDelegateForwarder;
    id scriptDebugDelegate;
    id historyDelegate;
    struct RetainPtr<id> { void *m_ptr; } resourceProgressDelegateForwarder;
    struct RetainPtr<id> { void *m_ptr; } formDelegateForwarder;
    struct RetainPtr<WebInspector> { void *m_ptr; } inspector;
    struct RetainPtr<WebNodeHighlight> { void *m_ptr; } currentNodeHighlight;
    struct RefPtr<WebCore::ValidationBubble, WTF::RawPtrTraits<WebCore::ValidationBubble>, WTF::DefaultRefDerefTraits<WebCore::ValidationBubble>> { struct ValidationBubble *m_ptr; } formValidationBubble;
    BOOL shouldMaintainInactiveSelection;
    BOOL allowsUndo;
    float zoomMultiplier;
    BOOL zoomsTextOnly;
    struct RetainPtr<NSString> { void *m_ptr; } applicationNameForUserAgent;
    struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } userAgent;
    BOOL userAgentOverridden;
    struct RetainPtr<WebPreferences> { void *m_ptr; } preferences;
    NSURL *userStyleSheetLocation;
    struct RetainPtr<WAKWindow> { void *m_ptr; } hostWindow;
    int programmaticFocusCount;
    struct WebResourceDelegateImplementationCache { void /* function */ *didReceiveAuthenticationChallengeFunc; void /* function */ *canAuthenticateAgainstProtectionSpaceFunc; void /* function */ *connectionPropertiesFunc; void /* function */ *webThreadDidFinishLoadingFromDataSourceFunc; void /* function */ *webThreadDidFailLoadingWithErrorFromDataSourceFunc; void /* function */ *webThreadIdentifierForRequestFunc; void /* function */ *webThreadDidLoadResourceFromMemoryCacheFunc; void /* function */ *webThreadWillSendRequestFunc; void /* function */ *webThreadDidReceiveResponseFunc; void /* function */ *webThreadDidReceiveContentLengthFunc; void /* function */ *webThreadWillCacheResponseFunc; void /* function */ *identifierForRequestFunc; void /* function */ *willSendRequestFunc; void /* function */ *didReceiveResponseFunc; void /* function */ *didReceiveContentLengthFunc; void /* function */ *didFinishLoadingFromDataSourceFunc; void /* function */ *didFailLoadingWithErrorFromDataSourceFunc; void /* function */ *didLoadResourceFromMemoryCacheFunc; void /* function */ *willCacheResponseFunc; void /* function */ *plugInFailedWithErrorFunc; void /* function */ *shouldUseCredentialStorageFunc; void /* function */ *shouldPaintBrokenImageForURLFunc; } resourceLoadDelegateImplementations;
    struct WebFrameLoadDelegateImplementationCache { void /* function */ *didCreateJavaScriptContextForFrameFunc; void /* function */ *didClearWindowObjectForFrameFunc; void /* function */ *didClearWindowObjectForFrameInScriptWorldFunc; void /* function */ *didClearInspectorWindowObjectForFrameFunc; void /* function */ *windowScriptObjectAvailableFunc; void /* function */ *didHandleOnloadEventsForFrameFunc; void /* function */ *didReceiveServerRedirectForProvisionalLoadForFrameFunc; void /* function */ *didCancelClientRedirectForFrameFunc; void /* function */ *willPerformClientRedirectToURLDelayFireDateForFrameFunc; void /* function */ *didChangeLocationWithinPageForFrameFunc; void /* function */ *didPushStateWithinPageForFrameFunc; void /* function */ *didReplaceStateWithinPageForFrameFunc; void /* function */ *didPopStateWithinPageForFrameFunc; void /* function */ *willCloseFrameFunc; void /* function */ *didStartProvisionalLoadForFrameFunc; void /* function */ *didReceiveTitleForFrameFunc; void /* function */ *didCommitLoadForFrameFunc; void /* function */ *didFailProvisionalLoadWithErrorForFrameFunc; void /* function */ *didFailLoadWithErrorForFrameFunc; void /* function */ *didFinishLoadForFrameFunc; void /* function */ *didFirstLayoutInFrameFunc; void /* function */ *didFirstVisuallyNonEmptyLayoutInFrameFunc; void /* function */ *didLayoutFunc; void /* function */ *didReceiveIconForFrameFunc; void /* function */ *didFinishDocumentLoadForFrameFunc; void /* function */ *didDisplayInsecureContentFunc; void /* function */ *didRunInsecureContentFunc; void /* function */ *didDetectXSSFunc; void /* function */ *didRemoveFrameFromHierarchyFunc; void /* function */ *webThreadDidLayoutFunc; } frameLoadDelegateImplementations;
    struct WebScriptDebugDelegateImplementationCache { BOOL didParseSourceExpectsBaseLineNumber; BOOL exceptionWasRaisedExpectsHasHandlerFlag; void /* function */ *didParseSourceFunc; void /* function */ *failedToParseSourceFunc; void /* function */ *exceptionWasRaisedFunc; } scriptDebugDelegateImplementations;
    struct WebHistoryDelegateImplementationCache { void /* function */ *navigatedFunc; void /* function */ *clientRedirectFunc; void /* function */ *serverRedirectFunc; void /* function */ *deprecatedSetTitleFunc; void /* function */ *setTitleFunc; void /* function */ *populateVisitedLinksFunc; } historyDelegateImplementations;
    BOOL closed;
    BOOL closing;
    unsigned long long deviceOrientation;
    BOOL shouldCloseWithWindow;
    BOOL mainFrameDocumentReady;
    BOOL drawsBackground;
    BOOL tabKeyCyclesThroughElementsChanged;
    BOOL becomingFirstResponder;
    BOOL becomingFirstResponderFromOutside;
    BOOL usesPageCache;
    struct RetainPtr<CGColor *> { void *m_ptr; } backgroundColor;
    struct RetainPtr<NSString> { void *m_ptr; } mediaStyle;
    BOOL hasSpellCheckerDocumentTag;
    long long spellCheckerDocumentTag;
    BOOL isStopping;
    id UIKitDelegate;
    struct RetainPtr<id> { void *m_ptr; } UIKitDelegateForwarder;
    id WebMailDelegate;
    BOOL allowsMessaging;
    struct RetainPtr<NSMutableSet> { void *m_ptr; } _caretChangeListeners;
    id<WebCaretChangeListener> _caretChangeListener;
    struct CGSize { double width; double height; } fixedLayoutSize;
    BOOL mainViewIsScrollingOrZooming;
    int didDrawTiles;
    struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { _Atomic unsigned char __a_value; } __a_; } value; } m_byte; } pendingFixedPositionLayoutRectMutex;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } pendingFixedPositionLayoutRect;
    struct RetainPtr<WebUITextIndicatorData> { void *m_ptr; } textIndicatorData;
    struct RetainPtr<WebUITextIndicatorData> { void *m_ptr; } dataOperationTextIndicator;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } dragPreviewFrameInRootViewCoordinates;
    unsigned long long dragSourceAction;
    struct RetainPtr<NSURL> { void *m_ptr; } draggedLinkURL;
    struct RetainPtr<NSString> { void *m_ptr; } draggedLinkTitle;
    struct HashMap<unsigned long, WTF::RetainPtr<id>, WTF::DefaultHash<unsigned long>, WTF::HashTraits<unsigned long>, WTF::HashTraits<WTF::RetainPtr<id>>, WTF::HashTableTraits> { struct HashTable<unsigned long, WTF::KeyValuePair<unsigned long, WTF::RetainPtr<id>>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long, WTF::RetainPtr<id>>>, WTF::DefaultHash<unsigned long>, WTF::HashMap<unsigned long, WTF::RetainPtr<id>>::KeyValuePairTraits, WTF::HashTraits<unsigned long>> { union { void *m_table; unsigned int *m_tableForLLDB; } ; } m_impl; } identifierMap;
    BOOL _keyboardUIModeAccessed;
    int _keyboardUIMode;
    BOOL shouldUpdateWhileOffscreen;
    BOOL needsOneShotDrawingSynchronization;
    BOOL postsAcceleratedCompositingNotifications;
    struct unique_ptr<WebViewRenderingUpdateScheduler, std::default_delete<WebViewRenderingUpdateScheduler>> { struct __compressed_pair<WebViewRenderingUpdateScheduler *, std::default_delete<WebViewRenderingUpdateScheduler>> { struct WebViewRenderingUpdateScheduler *__value_; } __ptr_; } renderingUpdateScheduler;
    struct CGSize { double width; double height; } lastLayoutSize;
    struct RetainPtr<WebVideoFullscreenController> { void *m_ptr; } fullscreenController;
    struct Vector<WTF::RetainPtr<WebVideoFullscreenController>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } fullscreenControllersExiting;
    struct RetainPtr<WebFullScreenController> { void *m_ptr; } newFullscreenController;
    struct RetainPtr<WebIndicateLayer> { void *m_ptr; } indicateLayer;
    id<WebGeolocationProvider> _geolocationProvider;
    id<WebDeviceOrientationProvider> m_deviceOrientationProvider;
    id<WebNotificationProvider> _notificationProvider;
    BOOL interactiveFormValidationEnabled;
    int validationMessageTimerMagnification;
    float customDeviceScaleFactor;
    struct RetainPtr<WebFixedPositionContent> { void *m_ptr; } _fixedPositionContent;
    struct unique_ptr<WebCore::AlternativeTextUIController, std::default_delete<WebCore::AlternativeTextUIController>> { struct __compressed_pair<WebCore::AlternativeTextUIController *, std::default_delete<WebCore::AlternativeTextUIController>> { struct AlternativeTextUIController *__value_; } __ptr_; } m_alternativeTextUIController;
    struct RetainPtr<NSData> { void *m_ptr; } sourceApplicationAuditData;
    BOOL _didPerformFirstNavigation;
}

+ (void)initialize;

- (id).cxx_construct;
- (void)dealloc;
- (id)init;
- (void).cxx_destruct;

@end

@class IntelligentDistortionCorrection_Utilities, FigMetalContext;
@protocol MTLComputePipelineState, MTLBuffer, MTLTexture;

@interface EdgeDrawingLineDetector : NSObject {
    FigMetalContext *_metalContext;
    IntelligentDistortionCorrection_Utilities *_idcUtilities;
    BOOL _haveShadersBeenCompiled;
    struct { unsigned int downscaledImageWidth; unsigned int downscaledImageHeight; unsigned int anchorScanInterval; unsigned int segmentationMaskWidth; unsigned int segmentationMaskHeight; unsigned int anchorGridWidth; unsigned int anchorGridHeight; unsigned int anchorMaxCount; } _maximumMemoryAllocationParameters;
    struct { unsigned int downscaledImageWidth; unsigned int downscaledImageHeight; unsigned int anchorScanInterval; unsigned int segmentationMaskWidth; unsigned int segmentationMaskHeight; unsigned int anchorGridWidth; unsigned int anchorGridHeight; unsigned int anchorMaxCount; } _currentMemoryAllocationParameters;
    struct { id<MTLBuffer> buffer; unsigned long long offset; unsigned long long size; BOOL resourcesAssigned; } _sharedMetalBuffer;
    struct { id<MTLComputePipelineState> convertToRgba; id<MTLComputePipelineState> convertToRgbaAndDownscale2To1; id<MTLComputePipelineState> convertToRgbaAndDownscale4To1; id<MTLComputePipelineState> computeGradients; id<MTLComputePipelineState> computeGradientsWithMask; id<MTLComputePipelineState> sparseAnchors; id<MTLComputePipelineState> findMaxOfAreaPass1; id<MTLComputePipelineState> gradientNormalize; } _kernels;
    struct { id<MTLTexture> scaledImage; id<MTLTexture> scaledUndistortedImage; id<MTLTexture> localMaxPass1; id<MTLTexture> gradientFlags; id<MTLTexture> gradientMagnitude; id<MTLTexture> dilatedSegmentationMask; } _textures;
    struct { unsigned long long anchors; unsigned long long gradientFlags; unsigned long long gradientMagnitude; } _offsets;
    struct { unsigned int gradientFlags; unsigned int gradientMagnitude; } _elemStride;
    BOOL _detectLinesPart1CompletedSuccessfully;
    struct { unsigned int curNum; struct { void /* unknown type, empty encoding */ ep0; void /* unknown type, empty encoding */ ep1; void *points; unsigned int numPoints; } array[4032]; } _lsrArray;
    struct { unsigned int forwardIndex; unsigned int backwardIndex; void /* unknown type, empty encoding */ array[8064]; } _anchorArray;
    struct { unsigned int curNum; unsigned int maxNum; id<MTLBuffer> buffer; unsigned long long offset; } _output;
}

+ (void)getDefaultConfigurationParameters:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0;

- (void)releaseResources;
- (void).cxx_destruct;
- (void)dealloc;
- (int)setSharedMetalBuffer:(id)a0 offset:(unsigned long long)a1 size:(unsigned long long)a2;
- (int)compileShaders:(BOOL)a0;
- (int)memoryAllocationHandler:(struct { unsigned long long x0; } *)a0 memoryAllocationParameters:(struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; })a1 sharedMemoryBuffer:(id)a2 sharedMetalBufferOffset:(unsigned long long)a3 sharedMetalBufferSize:(unsigned long long)a4;
- (int)processImage:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 inputImageTexture:(id)a1 inputSegmentationMaskTexture:(id)a2;
- (int)doEdgeDrawing:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 outputLineData:(void *)a1 sharedMemoryPtr:(char *)a2;
- (void)findCollinearLinesWithOutputLineData:(void *)a0;
- (void)runTraceForward:(SEL)a0 anchorPoint:(unsigned int)a1 initialGradDir:(unsigned int)a2 sharedMemoryPtr:(char *)a3;
- (void)runTraceBackward:(SEL)a0 anchorPoint:(unsigned int)a1 initialGradDir:(unsigned int)a2 sharedMemoryPtr:(char *)a3;
- (int)doLineFitting:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 outputLineData:(void *)a1;
- (unsigned int)runFullLsr:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 lsr:(struct { unsigned int *x0; } *)a1 points:(const void *)a2 numPointsLeft:(unsigned int)a3;
- (void)doLineMerging:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 outputLineData:(void *)a1;
- (void)rebuildLsr:(struct { unsigned int *x0; } *)a0 points:(const void *)a1 numPoints:(unsigned int)a2;
- (void)sort4Points:(void /* unknown type, empty encoding */[4])a0 onAxis:(int)a1;
- (int)computeSortedPointsWithLine:(id)a0 andLine:(SEL)a1 axis:(int)a2 intoPointArray:(void /* unknown type, empty encoding */[4])a3;
- (BOOL)linesAreCollinearWithSortedPoints:(void /* unknown type, empty encoding */[4])a0;
- (id)initWithFigMetalContext:(id)a0 idcUtilities:(id)a1;
- (int)determineWorkingBufferRequirements:(struct { unsigned long long x0; } *)a0 bundleConfiguration:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a1 maximumInputImageWidth:(unsigned int)a2 maximumInputImageHeight:(unsigned int)a3 maximumSegmentationMaskWidth:(unsigned int)a4 maximumSegmentationMaskHeight:(unsigned int)a5;
- (int)detectLinesPart1:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 inputImageTexture:(id)a1 inputSegmentationMaskTexture:(id)a2;
- (int)detectLinesPart2:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 results:(struct { unsigned int x0; unsigned int x1; unsigned long long x2; id x3; } *)a1;

@end

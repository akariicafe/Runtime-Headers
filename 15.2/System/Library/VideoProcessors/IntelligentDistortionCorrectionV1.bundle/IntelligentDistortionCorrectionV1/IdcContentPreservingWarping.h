@class IntelligentDistortionCorrection_Utilities, FigMetalContext, MPSMatrix, MPSMatrixDecompositionCholesky;
@protocol MTLComputePipelineState, MTLBuffer, MTLTexture;

@interface IdcContentPreservingWarping : NSObject {
    FigMetalContext *_metalContext;
    IntelligentDistortionCorrection_Utilities *_idcUtilities;
    struct { id<MTLComputePipelineState> generateEdStage1; id<MTLComputePipelineState> generateEdStage2; id<MTLComputePipelineState> generateEdStage3; id<MTLComputePipelineState> generateEdColumns; id<MTLComputePipelineState> generateEdBuildAtA_Atb; id<MTLComputePipelineState> generateEsPresetWeightArray; id<MTLComputePipelineState> generateEsBuildWeightArray; id<MTLComputePipelineState> generateEsStage1; id<MTLComputePipelineState> generateEsStage2; id<MTLComputePipelineState> generateEsStage3; id<MTLComputePipelineState> generateElStage1; id<MTLComputePipelineState> generateElStage2; id<MTLComputePipelineState> substitution; id<MTLComputePipelineState> generateExtendedMesh; id<MTLComputePipelineState> validateExtendedMesh; id<MTLComputePipelineState> invertMesh; } _kernels;
    struct { id<MTLBuffer> buffer; unsigned long long offset; unsigned long long size; BOOL resourcesAssigned; } _sharedMetalBuffer;
    struct { struct { unsigned long long arrayOfContainers; unsigned long long weights; unsigned long long numElementsPerContainer; } es; unsigned long long edPhatk; unsigned long long edPk; unsigned long long edNumSamplesPerCell; unsigned long long edRowSubSeqHeader; unsigned long long edRowSubSeqData; unsigned long long edColumnHeaders; unsigned long long edOffset; unsigned long long elFullMatrix; unsigned long long matrixAtA; unsigned long long vectorAtb; } _offsets;
    struct { id<MTLTexture> erodedSegmentationMask; } _textures;
    MPSMatrixDecompositionCholesky *_choleskyDecomposition;
    MPSMatrix *_AtA_matrix;
    struct { unsigned int numCells; unsigned int storageSizePerCell; unsigned int meshNumNodes; unsigned int aDimensions; unsigned int segmentationMaskWidth; unsigned int segmentationMaskHeight; } _maximumMemoryAllocationParameters;
    struct { unsigned int numCells; unsigned int storageSizePerCell; unsigned int meshNumNodes; unsigned int aDimensions; unsigned int segmentationMaskWidth; unsigned int segmentationMaskHeight; } _currentMemoryAllocationParameters;
    struct { float invPolynomial[6]; void /* unknown type, empty encoding */ imageToMaskConvCoef; float edWeight; float pareDownConstant; unsigned int meshNumNodes; unsigned int meshNodesPerRow; unsigned int meshNodesPerColumn; unsigned int numCells; unsigned int numCellsPerRow; unsigned int numCellsPerColumn; float cellWidthInPixels; float cellHeightInLines; unsigned int cellNumSubSamples; unsigned int cellNumSubSamplesPerRow; unsigned int cellNumSubSamplesPerColumn; void /* unknown type, empty encoding */ cellCenteringOffset; unsigned int storageSizePerCell; unsigned int aDimensions; struct { int x0; int y0; int width; int height; } sensor; } _edParameters;
}

+ (void)getDefaultConfigurationParameters:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0;

- (void)releaseResources;
- (void).cxx_destruct;
- (void)dealloc;
- (int)setSharedMetalBuffer:(id)a0 offset:(unsigned long long)a1 size:(unsigned long long)a2;
- (int)compileShaders:(BOOL)a0;
- (int)memoryAllocationHandler:(struct { unsigned long long x0; } *)a0 memoryAllocationParameters:(struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })a1 sharedMemoryBuffer:(id)a2 sharedMetalBufferOffset:(unsigned long long)a3 sharedMetalBufferSize:(unsigned long long)a4;
- (void)fillEdParameters:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0;
- (id)initWithMetalContext:(id)a0 idcUtilities:(id)a1;
- (int)computeSizeOfSharedMetalBuffer:(struct { unsigned long long x0; } *)a0 maximumSegmentationMaskWidth:(unsigned int)a1 maximumSegmentationMaskHeight:(unsigned int)a2;
- (int)process:(struct { float x0; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; BOOL x3; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; unsigned int x5; } x4; float x5[6]; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x1; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x2; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x3; } x6; struct { struct { int x0; int x1; int x2; int x3; int x4; int x5; } x0; } x7; struct { int x0; int x1; int x2; int x3; int x4; int x5; } x8; struct { unsigned int x0; float x1; unsigned int x2; unsigned int x3; unsigned int x4; float x5; float x6; float x7; unsigned int x8; unsigned int x9; } x9; struct { float x0; float x1; float x2; float x3; unsigned int x4; unsigned int x5; } x10; BOOL x11; unsigned int x12; struct { float x0[7]; } x13[10]; unsigned int x14; struct { BOOL x0; int x1; float x2; } x15[10]; float x16; float x17; } *)a0 segmentationMaskTex:(id)a1 extendedMeshTex:(id)a2 invertedMeshTex:(id)a3 detectedLines:(struct { unsigned int x0; unsigned int x1; unsigned long long x2; id x3; } *)a4 executionErrorInformation:(struct { id x0; unsigned int x1[4]; } *)a5;

@end

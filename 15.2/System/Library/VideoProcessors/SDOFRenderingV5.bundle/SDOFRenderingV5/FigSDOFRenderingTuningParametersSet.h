@class NSDictionary;

@interface FigSDOFRenderingTuningParametersSet : NSObject {
    struct dynamic_tuning_parameters { struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } disparityScalingFactor; struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } segmentationFusionSubtractiveMaxBlur; struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } segmentationFusionAdditiveMaxBlur; struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } hairSubtractiveMaxBlur; struct dynamic_tuning_param_config { float brightLightExposureLevel; float lowLightExposureLevel; float nearSubjectDistanceRatio; float farSubjectDistanceRatio; float brightLightNearValue; float brightLightFarValue; float lowLightNearValue; float lowLightFarValue; } hairAdditiveMaxBlur; } _dynamicParams;
    struct xhlrb_control_logic_params { int mode; float exposureScoreT0; float exposureScoreT1; float clippedPixelsT0; float clippedPixelsT1; float recoveryScoreT; int maxColourDiffusionIterations; float maxPreFilterGain; float maxWeightGain; float maxIntensityGain; float maxObscenePreFilterGain; float maxObsceneWeightGain; float maxObsceneIntensityGain; float maxBGBlur; float blurRadiusT0; float blurRadiusT1; float maxIntensityT0; float maxIntensityT1; float minIntensityT0; float minIntensityT1; } _xhlrbControlConfig;
    int _disparityRefinementVersion;
    struct disparity_refinement_params { int radius; float weightScaling; float maxReconstructionWeight; float innerSamplingRadius; float outerSamplingRadius; int nSamples; float lumaSigma; float chromaSigma; float segmentationSigma; float disparitySigma; float accumulatedWeightT0; float accumulatedWeightT1; float aaLumaSigma; float aaChromaSigma; float aaSegmentationSigma; float aaSpatialSigma; } _disparityRefinementConfig;
    struct crisp_hair_params { float trustedRegionAlphaThreshold; float trustedRegionErode; float expandingRadius; float compositeAlphaThresholdLow; float compositeAlphaThresholdHigh; } _crispHairConfig;
    struct simple_lens_model_params { float left; float top; float width; float height; float zeroShiftPercentile; float simulatedFocalLength; float simulatedAperture; float minimumSimulatedAperture; float maximumSimulatedAperture; float frameNormalizedFocalLength; float maxFGBlur; float maxBGBlur; float shiftDeadZone; float disparityScalingFactor; } _simpleLensModelConfig;
    struct face_mask_params { float maxBlur; float simulatedAperture; float defaultSimulatedAperture; void /* unknown type, empty encoding */ centreX; void /* unknown type, empty encoding */ centreY; void /* unknown type, empty encoding */ leftEyeX; void /* unknown type, empty encoding */ leftEyeY; void /* unknown type, empty encoding */ rightEyeX; void /* unknown type, empty encoding */ rightEyeY; void /* unknown type, empty encoding */ chinX; void /* unknown type, empty encoding */ chinY; float maxBlurOnEyes; float maxBlurDistFromFocus; float eyeToEyebrowRatio; float linearBlurGrowthM; float linearBlurGrowthC; float distToBlurScaling; float capMultip; float gainMultip; float chinThetaLimit; float chinThetaMultip; float chinVectorSnapping; float imageAspectRatio; } _faceMaskConfig;
    struct segmentation_fusion_params { float simulatedAperture; float defaultSimulatedAperture; float maxBlur; float subtractiveLowerAlpha; float subtractiveUpperAlpha; float subtractiveMaxBlur; float additiveLowerAlpha; float additiveUpperAlpha; float additiveMaxBlur; } _segmentationFusionConfig;
    NSDictionary *_noiseEstimationConfig;
    struct blurmap_smoothing_params { int nIterations; float originalBlurValueT0; float originalBlurValueT1; float localMinimumBlurValueT0; float localMinimumBlurValueT1; } _blurmapSmoothingConfig;
    struct blurmap_refinement_params { struct matte_image_shader_params { struct fusion_params { float subtractiveLowerAlpha; float subtractiveUpperAlpha; float subtractiveMaxBlur; float additiveLowerAlpha; float additiveUpperAlpha; float additiveMaxBlur; } fusion; int maxDistance; float thresholdValue; float maxBlur; } personParams; struct matte_image_shader_params { struct fusion_params { float subtractiveLowerAlpha; float subtractiveUpperAlpha; float subtractiveMaxBlur; float additiveLowerAlpha; float additiveUpperAlpha; float additiveMaxBlur; } fusion; int maxDistance; float thresholdValue; float maxBlur; } hairParams; float protectBodyStrength; float apertureScaling; float relativeApertureScalingStrength; float smoothstepMin; float smoothstepMax; float maxBlur; float distanceAdd; struct subject_distance { float minimumFocusDistance; float maximumFocusDistance; float scalingFactor; float offset; } subjectDistance; struct eyeProtection_params { int maxFaces; float faceWeightsSmoothStepMin; float faceWeightsSmoothStepMax; float ovalDimsDistanceScale; float ovalDimsDistanceOffset; float ovalDimsRadiusHorizontal; float ovalDimsRadiusVertical; float ovalFallOffSmoothStepMin; float ovalFallOffSmoothStepMax; float personMaskSmoothStepMin; float personMaskSmoothStepMax; float preventStrength; float subtractiveMaxBlur; float subtractiveApertureScaling; float maxMaskSmoothstepMin; float maxMaskSmoothstepMax; } eyeProtectionParams; float faceMask_additiveMaxBlur; float faceMask_subtractiveMaxBlur; float focusWindowLeft; float focusWindowTop; float focusWindowWidth; float focusWindowHeight; } _blurmapRefinementConfig;
    struct rendering_config_params { float simulatedAperture; float defaultSimulatedAperture; float preFilterBlurStrength; int preFilterRadius; float maxBlur; float sharpRadius; float softRadius; float lumaNoiseModelCoeff; float lumaNoiseAmplitude; float highlightBoostGain; int minNRings; int maxNRings; int nRings; float basePixelWeight; float antiAliasBlurStrength; int antiAliasRadius; float relativeWeightThreshold; float alphaEpsilon; float alphaGain; float shapeObstructionCoeff; float ringAmplitude; float ringSharpness; float blendingQuarterResAlphaGain; float blendingFullResAlphaGain; int xhlrbIterations; float xhlrbBlurRadiusT0; float xhlrbBlurRadiusT1; float xhlrbMaxIntensityT0; float xhlrbMaxIntensityT1; float xhlrbMinIntensityT0; float xhlrbMinIntensityT1; float xhlrbPreFilterGain; float xhlrbWeightGain; float xhlrbIntensityGain; float ohlbPreFilterGain; float ohlbWeightGain; float ohlbIntensityGain; int xhlrbTileSize; float gainMapHeadroom; float linearBoostGain; } _renderingConfig;
    struct { float zeroShiftPercentile; float preprocessingAlphaThreshold; float preprocessingAmplitude; float preprocessingExponent; float preprocessingGamma; float preprocessingMinFactor; float preprocessingMaxFactor; float radius; float subsampling; float epsilon; unsigned int iterations; float rgbWeight; } _mattingConfig;
    int _renderingMajorVersion;
}

- (void).cxx_destruct;
- (id)init;
- (struct disparity_refinement_params { int x0; float x1; float x2; float x3; float x4; int x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })disparityRefinementConfig;
- (struct simple_lens_model_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; })simpleLensModelConfig;
- (struct face_mask_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; })faceMaskConfig;
- (struct segmentation_fusion_params { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; })segmentationFusionConfig;
- (struct rendering_config_params { float x0; float x1; float x2; int x3; float x4; float x5; float x6; float x7; float x8; float x9; int x10; int x11; int x12; float x13; float x14; int x15; float x16; float x17; float x18; float x19; float x20; float x21; float x22; float x23; int x24; float x25; float x26; float x27; float x28; float x29; float x30; float x31; float x32; float x33; float x34; float x35; float x36; int x37; float x38; float x39; })renderingConfig;
- (struct blurmap_smoothing_params { int x0; float x1; float x2; float x3; float x4; })blurmapSmoothingConfig;
- (BOOL)readDisparityRefinementConfig:(id)a0;
- (BOOL)readSLMConfig:(id)a0;
- (BOOL)readBlurMapSmoothingConfig:(id)a0;
- (BOOL)readRenderingConfig:(id)a0;
- (struct xhlrb_control_logic_params { int x0; float x1; float x2; float x3; float x4; float x5; int x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; })xhlrbControlConfig;
- (id)noiseEstimationConfig;
- (BOOL)readMattingConfig:(id)a0;
- (id)initWithTuningDictionary:(id)a0 suffix:(id)a1;
- (struct dynamic_tuning_parameters { struct dynamic_tuning_param_config { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x0; struct dynamic_tuning_param_config { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x1; struct dynamic_tuning_param_config { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x2; struct dynamic_tuning_param_config { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x3; struct dynamic_tuning_param_config { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x4; })dynamicParams;
- (int)disparityRefinementVersion;
- (struct crisp_hair_params { float x0; float x1; float x2; float x3; float x4; })crispHairConfig;
- (struct blurmap_refinement_params { struct matte_image_shader_params { struct fusion_params { float x0; float x1; float x2; float x3; float x4; float x5; } x0; int x1; float x2; float x3; } x0; struct matte_image_shader_params { struct fusion_params { float x0; float x1; float x2; float x3; float x4; float x5; } x0; int x1; float x2; float x3; } x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; struct subject_distance { float x0; float x1; float x2; float x3; } x9; struct eyeProtection_params { int x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } x10; float x11; float x12; float x13; float x14; float x15; float x16; })blurmapRefinementConfig;
- (struct { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; unsigned int x10; float x11; })mattingConfig;
- (int)renderingMajorVersion;

@end

@class Texture2DWrapper, NSString, NSArray, FocalPlaneV2, NSMutableDictionary, NSDictionary, MPSImageSpatioTemporalGuidedFilter, NSMutableArray, FigMetalContext, ConstraintsGenerator, MattingV2TuningParameters;
@protocol MTLComputePipelineState;

@interface FigMatting : NSObject <ImageBufferProcessor> {
    FigMetalContext *_metalContext;
    Texture2DWrapper *_image;
    Texture2DWrapper *_inputDepth;
    Texture2DWrapper *_preprocessedDisparity;
    Texture2DWrapper *_preprocessedSkin;
    Texture2DWrapper *_refinedDisparityGuide;
    Texture2DWrapper *_rgbdGuide;
    NSMutableDictionary *_sourceTextures;
    NSMutableDictionary *_destinationTextures;
    NSMutableDictionary *_constraintsTextures;
    NSMutableArray *_preallocatedFaceNonSkinTextures;
    NSMutableDictionary *_faceNonSkinTextures;
    NSDictionary *_semanticConfigurations;
    ConstraintsGenerator *_constraintsGenerator;
    FocalPlaneV2 *_focalPlane;
    NSMutableArray *_semanticOutputCollections;
    MPSImageSpatioTemporalGuidedFilter *_refinedDisparityFilter;
    unsigned int _currentRefinementWidth;
    unsigned int _currentRefinementHeight;
    unsigned int _currentSegmentationWidth;
    unsigned int _currentSegmentationHeight;
    unsigned int _currentDisparityWidth;
    unsigned int _currentDisparityHeight;
    unsigned int _currentImageWidth;
    unsigned int _currentImageHeight;
    MattingV2TuningParameters *_disparityTuningParameters;
    int _disparityRefinementVersion;
    struct { float zeroShiftPercentile; float preprocessingAlphaThreshold; float preprocessingAmplitude; float preprocessingExponent; float preprocessingGamma; float preprocessingMinFactor; float preprocessingMaxFactor; float radius; float subsampling; float epsilon; unsigned int iterations; float rgbWeight; } _disparityRefinementConfig;
    unsigned long long _maximumNumberOfFacesToConsider;
    id<MTLComputePipelineState> _copyTextureKernel;
    id<MTLComputePipelineState> _bilinearScaleKernel;
    id<MTLComputePipelineState> _composeRGBAGuideKernel;
    id<MTLComputePipelineState> _addTexturesKernel;
    id<MTLComputePipelineState> _excludeNonSkinKernel;
    BOOL _isShaderHarvesting;
}

@property (nonatomic) struct __CVBuffer { } *imagePixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputSegmentationPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputDisparityPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputDepthPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputSemanticsHairPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputSemanticsSkinPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputSemanticsTeethPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputSemanticsGlassesPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *inputSemanticsSkyPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputRefinedDisparityPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputMattePixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputSemanticsHairPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputSemanticsSkinPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputSemanticsTeethPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputSemanticsGlassesPixelBuffer;
@property (nonatomic) struct __CVBuffer { } *outputSemanticsSkyPixelBuffer;
@property (retain, nonatomic) NSDictionary *options;
@property (nonatomic) struct { unsigned int inputImageWidth; unsigned int inputImageHeight; unsigned int inputDisparityWidth; unsigned int inputDisparityHeight; unsigned int segmentationWidth; unsigned int segmentationHeight; unsigned int enabledOutputs; int tuningConfiguration; } config;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } syntheticFocusRectangle;
@property (copy, nonatomic) NSArray *faceLandmarks;
@property (copy, nonatomic) NSArray *faceSegments;
@property (nonatomic) int exifOrientation;
@property (retain, nonatomic) NSDictionary *tuningParameters;
@property (retain, nonatomic) NSDictionary *cameraInfoByPortType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)FigMattingOutputToShortString:(unsigned int)a0;

- (int)prewarm;
- (int)resetState;
- (int)purgeResources;
- (int)prewarmWithTuningParameters:(id)a0;
- (int)process;
- (int)finishProcessing;
- (int)setup;
- (void).cxx_destruct;
- (id)init;
- (int)prepareToProcess:(unsigned int)a0;
- (void)dealloc;
- (id)initWithCommandQueue:(id)a0;
- (int)_compileShaders;
- (int)finishScheduling;
- (id)_createTextureOfSize:(struct CGSize { double x0; double x1; })a0 withFormat:(unsigned long long)a1;
- (void)isShaderHarvesting:(id)a0;
- (int)_prewarmMPSKernels;
- (int)_allocateResources;
- (BOOL)outputEnabled:(unsigned int)a0;
- (void)encodeComposeRGBAGuideToCommandBuffer:(id)a0 rgbTexture:(id)a1 alphaTexture:(id)a2 destinationTexture:(id)a3 rgbWeight:(float)a4;
- (int)validateAndBindInputsAndOutputs;
- (void)encodeComposeRGBAGuideToCommandBuffer:(id)a0 rgbTexture:(id)a1 alphaTexture:(id)a2 destinationTexture:(id)a3;
- (void)encodeAddTexturesToCommandBuffer:(id)a0 sourceTextureA:(id)a1 sourceTextureB:(id)a2 destinationTexture:(id)a3 thresholdBeginValue:(float)a4 thresholdEndValue:(float)a5;
- (void)encodePreprocessSkinToCommandBuffer:(id)a0 inputSkinTexture:(id)a1 faceNonSkinTextures:(id)a2 outputSkinTexture:(id)a3;
- (id)enabledOutputArray;
- (int)processFocalPlaneAndSolverOnly;

@end

@class GreenGhostCommon, FigMetalContext;
@protocol MTLComputePipelineState, MTLBuffer, SidecarWriter;

@interface GreenGhostBrightLightStage : NSObject {
    FigMetalContext *_metal;
    id<MTLComputePipelineState> _pipelineStates[6];
    GreenGhostCommon *_greenGhostCommon;
    int _detectionLvl;
    BOOL _syncComputeMaskSize;
    id<MTLBuffer> _sumLumaChromaMask;
    id<MTLBuffer> _patchDistances;
    id<MTLBuffer> _repairValues;
    struct FaceBodyBoundaries { unsigned int nFaces; void /* unknown type, empty encoding */ faceBoundaries[10]; unsigned int nBodies; void /* unknown type, empty encoding */ bodyBoundaries[10]; } _faceBodyBoundaries;
    struct ProcessingROIInfo { void /* unknown type, empty encoding */ roi; float sizeRatio; } _processingROIInfo;
}

@property (weak, nonatomic) id<SidecarWriter> sidecarWriter;

+ (int)prewarmShaders:(id)a0;

- (id)initWithMetalContext:(id)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (int)compileShaders;
- (id)functionNameForProgram:(int)a0;
- (int)cropLuma:(id)a0 chroma:(id)a1 outputLuma:(id)a2 outputChroma:(id)a3;
- (int)refineMask:(id)a0 outputMask:(id)a1 outputMaskBinary:(id)a2 params:(struct BrightLightRefinementTuning { float x0; float x1; float x2; float x3; })a3;
- (int)processRepairValues;
- (float)computeMaxMaskSizeWithWidth:(unsigned long long)a0 height:(unsigned long long)a1 params:(struct BrightLightRepairTuning { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; } *)a2;
- (int)computeRepairValuesWithLuma:(id)a0 chroma:(id)a1 mask:(id)a2 maskBinary:(id)a3 params:(struct BrightLightRepairTuning { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; })a4;
- (int)applyRepairWithLuma:(id)a0 chroma:(id)a1 lumaBase:(id)a2 chromaBase:(id)a3 mask:(id)a4 output:(id)a5 params:(struct BrightLightRepairTuning { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; })a6 gainMap:(id)a7;
- (int)scaleROI:(id)a0 fullResolutionSize:(SEL)a1 downScaledSize:(void /* unknown type, empty encoding */)a2;
- (int)detectionWithLuma:(id)a0 chroma:(id)a1 outputMask:(id)a2 outputMaskBinary:(id)a3 params:(struct BrightLightDetectionTuning { struct DetectionTuning { struct BrightnessTuning { float x0; float x1; float x2; } x0; struct BlobTuning { float x0; } x1; struct GreenTuning { float x0; float x1; float x2; } x2; } x0; struct BrightLightRefinementTuning { float x0; float x1; float x2; float x3; } x1; })a4;
- (int)unCropMaskCropped1:(id)a0 maskCropped2:(id)a1 maskOutput1:(id)a2 maskOutput2:(id)a3;
- (int)repairPyr:(id)a0 chroma:(id)a1 mask:(id)a2 maskBinary:(id)a3 output:(id)a4 params:(struct BrightLightRepairTuning { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; })a5 gainMap:(id)a6;
- (int)GhostMitigationWithPyr:(SEL)a0 outputImage:(id)a1 tuning:(id)a2 faceLandMarks:(id)a3 ev0FrameMetadata:(id)a4 roi:(const struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } *)a5 gainMap:(id)a6;

@end

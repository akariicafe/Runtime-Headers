@class NRFProgressiveBracketingParameters, NSMutableDictionary, NRFOutput, GlobalDistortionCorrectionByPortType, NSDictionary, NRFPlist, FigWiredMemory, FigMetalContext, NSString, RegWarpPP, DenoiseFusePipeline, FigM2MController, GlobalDistortionCorrectionPlist, NRFUBFusionOutput, LSCGainsPlist, NRFConfig, NRFDeepFusionOutput, RegWarpHelper;
@protocol IBPSemanticStyleProperties, MTLCommandQueue, MTLTexture, MTLBuffer, NRFProcessorDelegate;

@interface NRFProcessorV2 : NSObject <SidecarWriter, NRFProcessor> {
    BOOL _allocatorSetupComplete;
    struct { unsigned long long sharedMetalBufferSizeRequested; unsigned long long sharedRegWarpBufferSizeRequested; unsigned long long width; unsigned long long height; unsigned int pixelFormat; unsigned long long regwarpInputWidth; unsigned long long regwarpInputHeight; } _memoryRequirements;
    BOOL _regwarpHasBeenSetup;
    int _aggregateErr;
    id<MTLBuffer> _sharedMetalBuffer;
    BOOL _usingExternalSharedMetalBuffer;
    FigWiredMemory *_sharedRegWarpBuffer;
    BOOL _usingExternalSharedRegWarpBuffer;
    DenoiseFusePipeline *_denoiseFusePipeline;
    struct frameProperties_t { struct frameMetadata { int sensorID; BOOL isPreBracketedFrame; BOOL isEVMFrame; BOOL isLongFrame; long long averageFocusScore; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } exposureParams; BOOL metadataHasROI; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROI; int exifOrientation; BOOL metadataHasLtmCurves; struct ltmCurves { union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ltmLut; union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ccmLut; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } globalLtmLut; unsigned short globalLtmLutData[257]; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } gtcLut; unsigned short gtcLutData[257]; float ltmHardGain; } ltmCurves; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; BOOL isStationary; BOOL allowSpatialCCM; int facesCount; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; unsigned short roll; unsigned short yaw; } faces[10]; int bodiesCount; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; } bodies[10]; BOOL hasValidClippingData; struct LocalHistogramClippingDataGeneric { unsigned short version; unsigned int binCountPerTile; struct *dataV1; } clippingData; } meta; BOOL contentExtended; void /* unknown type, empty encoding */ extendedDimensions; BOOL registrationComplete; BOOL hasValidRegistration; struct { void /* unknown type, empty encoding */ columns[3]; } regHomography; int inputColorSpace; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrixFwd; struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrix; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionFwd; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionInv; float finalScaleFwd; float finalScale; BOOL outputToLinearYCbCr; BOOL clampNegativesToZero; BOOL applyColorCorrection; BOOL useGpuCSC; } colorSpaceConversionParameters; int toneCurve; BOOL motionScoreCalculationComplete; float motionScore; double focusScore; float gyroScore; BOOL isMissingMetadata; float cornerStrength; BOOL referenceFrameSelectionMetricsComputed; float blurryFrameWeight; BOOL blurryFrameWeightCalculationComplete; float blinkDetectionScore; BOOL denseRegistered; BOOL hybridRegistrationDone; BOOL greenGhostProcesssingDone; } _prebracketedProperties;
    int _preBracketFrameIndex;
    struct opaqueCMSampleBuffer { } *_ev0SampleBuffer;
    int _sifrFrameIndex;
    BOOL _processedSIFRandRefEV0;
    BOOL _inferenceInputGenerated;
    struct opaqueCMSampleBuffer *_bracketSampleBuffers[5];
    struct frameProperties_t { struct frameMetadata { int sensorID; BOOL isPreBracketedFrame; BOOL isEVMFrame; BOOL isLongFrame; long long averageFocusScore; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } exposureParams; BOOL metadataHasROI; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROI; int exifOrientation; BOOL metadataHasLtmCurves; struct ltmCurves { union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ltmLut; union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ccmLut; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } globalLtmLut; unsigned short globalLtmLutData[257]; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } gtcLut; unsigned short gtcLutData[257]; float ltmHardGain; } ltmCurves; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; BOOL isStationary; BOOL allowSpatialCCM; int facesCount; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; unsigned short roll; unsigned short yaw; } faces[10]; int bodiesCount; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; } bodies[10]; BOOL hasValidClippingData; struct LocalHistogramClippingDataGeneric { unsigned short version; unsigned int binCountPerTile; struct *dataV1; } clippingData; } meta; BOOL contentExtended; void /* unknown type, empty encoding */ extendedDimensions; BOOL registrationComplete; BOOL hasValidRegistration; struct { void /* unknown type, empty encoding */ columns[3]; } regHomography; int inputColorSpace; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrixFwd; struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrix; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionFwd; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionInv; float finalScaleFwd; float finalScale; BOOL outputToLinearYCbCr; BOOL clampNegativesToZero; BOOL applyColorCorrection; BOOL useGpuCSC; } colorSpaceConversionParameters; int toneCurve; BOOL motionScoreCalculationComplete; float motionScore; double focusScore; float gyroScore; BOOL isMissingMetadata; float cornerStrength; BOOL referenceFrameSelectionMetricsComputed; float blurryFrameWeight; BOOL blurryFrameWeightCalculationComplete; float blinkDetectionScore; BOOL denseRegistered; BOOL hybridRegistrationDone; BOOL greenGhostProcesssingDone; } _bracketProperties[5];
    int _nInputBrackets;
    int _nRegisteredFrames;
    int _curRegWarpTempIndex;
    struct FusionConfiguration { struct { void /* unknown type, empty encoding */ columns[3]; } xforms3x3[5]; BOOL preWarpEnabled; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrixFwd; struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrix; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionFwd; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionInv; float finalScaleFwd; float finalScale; BOOL outputToLinearYCbCr; BOOL clampNegativesToZero; BOOL applyColorCorrection; BOOL useGpuCSC; } colorSpaceConversionParameters[5]; int frameCount; int ltcFrameIndex; int evm; int ev0; int evp; int fusionRef; BOOL isToneMapped; BOOL doGTCCorrection; BOOL doRec709Correction; BOOL doHighlightRecovery; int hdrFusionMode; BOOL useCorrectedLumaForNoise; BOOL isStationary; BOOL denseForAll; } _fusionConf;
    BOOL _requestTuningParams;
    NRFPlist *_nrfPlist;
    struct __CVBuffer { } *_regWarpInput;
    RegWarpHelper *_regWarpHelper;
    FigM2MController *_regWarpM2M;
    struct { unsigned int numThreads; unsigned int numHorizontalBlocks; unsigned int numVerticalBlocks; unsigned int nccSearchRadius; unsigned int nccPatchRadius; unsigned int maxSearchRadius; unsigned int internalBorderSize; float ransacAdaptiveThresholdFactor; float ransacMinMatchingScoreAccepted; unsigned int maxNumberOfPyramidLevels; BOOL skipInitialDownsample; } _registrationPipelineRWPPConfig;
    RegWarpPP *_registrationPipelineRWPP;
    FigMetalContext *_metal;
    unsigned int _fusionOptions;
    LSCGainsPlist *_lscGainsPlist;
    GlobalDistortionCorrectionByPortType *_globalDistortionCorrectionByPortType;
    GlobalDistortionCorrectionPlist *_globalDistortionCorrectionPlist;
    BOOL _saveInputFramesToDisk;
    NSMutableDictionary *_sidecar;
    NRFConfig *_nrfConfig;
    NRFUBFusionOutput *_nrfFusionOutput;
    NRFDeepFusionOutput *_deepFusionOutput;
    float _outputGainMapHeadroom;
    float _deepFusionMotionScore;
    BOOL _processedSyntheticReference;
    BOOL _deepFusionSyntheticReferenceReferenceIsSIFR;
    BOOL _deepFusionPyramidBuilt[5];
    id<MTLTexture> _lscGainsTex;
    struct opaqueCMSampleBuffer { } *_referenceFrame;
    struct frameProperties_t { struct frameMetadata { int sensorID; BOOL isPreBracketedFrame; BOOL isEVMFrame; BOOL isLongFrame; long long averageFocusScore; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } exposureParams; BOOL metadataHasROI; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROI; int exifOrientation; BOOL metadataHasLtmCurves; struct ltmCurves { union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ltmLut; union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ccmLut; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } globalLtmLut; unsigned short globalLtmLutData[257]; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } gtcLut; unsigned short gtcLutData[257]; float ltmHardGain; } ltmCurves; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; BOOL isStationary; BOOL allowSpatialCCM; int facesCount; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; unsigned short roll; unsigned short yaw; } faces[10]; int bodiesCount; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; } bodies[10]; BOOL hasValidClippingData; struct LocalHistogramClippingDataGeneric { unsigned short version; unsigned int binCountPerTile; struct *dataV1; } clippingData; } meta; BOOL contentExtended; void /* unknown type, empty encoding */ extendedDimensions; BOOL registrationComplete; BOOL hasValidRegistration; struct { void /* unknown type, empty encoding */ columns[3]; } regHomography; int inputColorSpace; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrixFwd; struct { void /* unknown type, empty encoding */ columns[3]; } cscMatrix; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionFwd; struct TransferFunctionParameters { float linearScale; float linearThreshold; float nonLinearScale; float nonLinearBias; float nonLinearPower; } transferFunctionInv; float finalScaleFwd; float finalScale; BOOL outputToLinearYCbCr; BOOL clampNegativesToZero; BOOL applyColorCorrection; BOOL useGpuCSC; } colorSpaceConversionParameters; int toneCurve; BOOL motionScoreCalculationComplete; float motionScore; double focusScore; float gyroScore; BOOL isMissingMetadata; float cornerStrength; BOOL referenceFrameSelectionMetricsComputed; float blurryFrameWeight; BOOL blurryFrameWeightCalculationComplete; float blinkDetectionScore; BOOL denseRegistered; BOOL hybridRegistrationDone; BOOL greenGhostProcesssingDone; } _referenceFrameProperties;
    float _maxCornerScore;
    float _minGyroScore;
    double _maxFocusScore;
    float _maxBlinkDetectScore;
    BOOL _lowLightHybridRegistrationDone;
    struct { void /* unknown type, empty encoding */ columns[2]; } _evmGreenTintAdjustmentParams;
    id<MTLBuffer> _outputAsMTLBuffer;
}

@property (retain, nonatomic) NSMutableDictionary *tuningParams;
@property (retain, nonatomic) NSMutableDictionary *tuningParamsPlist;
@property (retain, nonatomic) NSMutableDictionary *defringingTuningByPortType;
@property (nonatomic) unsigned int processingType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) int referenceFrameIndex;
@property (nonatomic) BOOL doRedFaceFix;
@property (nonatomic) BOOL enableGreenGhostMitigation;
@property (nonatomic) BOOL referenceFrameHasEVMinus;
@property (nonatomic) BOOL srlEnabled;
@property (nonatomic) BOOL learnedNREnabled;
@property (retain, nonatomic) id<IBPSemanticStyleProperties> semanticStyleProperties;
@property (nonatomic) int fusionMode;
@property (retain, nonatomic) NRFOutput *output;
@property (retain, nonatomic) NRFProgressiveBracketingParameters *progressiveBracketingParameters;
@property (nonatomic) int progressiveBatchSize;
@property (weak, nonatomic) id<NRFProcessorDelegate> delegate;
@property (retain, nonatomic) id<MTLBuffer> sharedMetalBuffer;
@property (retain, nonatomic) FigWiredMemory *sharedRegWarpBuffer;
@property (readonly, nonatomic) int cntBracketSampleBuffers;
@property (readonly, nonatomic) int batchCount;
@property (retain, nonatomic) id<MTLCommandQueue> metalCommandQueue;
@property (retain, nonatomic) NSDictionary *tuningParameters;
@property (retain, nonatomic) NSDictionary *cameraInfoByPortType;

- (int)prewarm;
- (int)resetState;
- (int)purgeResources;
- (int)prewarmWithTuningParameters:(id)a0;
- (int)process;
- (int)finishProcessing;
- (int)setup;
- (void)applyOverrides;
- (void).cxx_destruct;
- (id)init;
- (int)prepareToProcess:(unsigned int)a0;
- (int)allocateResources:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; unsigned long long x5; unsigned long long x6; } *)a0;
- (void)dealloc;
- (id)initWithCommandQueue:(id)a0;
- (int)addFrame:(struct opaqueCMSampleBuffer { } *)a0;
- (int)prepareToProcess:(unsigned int)a0 prepareDescriptor:(id)a1;
- (int)determineWorkingBufferRequirementsWithOptions:(id)a0 memoryAllocationInfo:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; unsigned long long x5; unsigned long long x6; } *)a1;
- (int)setupWithOptions:(id)a0;
- (void)setLinearOutputMetadata:(id)a0;
- (void)finishScheduling;
- (int)_process:(BOOL)a0;
- (void)addToSidecar:(id)a0 forKey:(id)a1;
- (int)_appendFrames:(struct opaqueCMSampleBuffer { } *)a0 cfp:(struct frameProperties_t { struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } x0; BOOL x1; BOOL x2; BOOL x3; struct { void /* unknown type, empty encoding */ x0[3]; } x4; int x5; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x3; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x4; float x5; float x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; } x6; int x7; BOOL x8; float x9; double x10; float x11; BOOL x12; float x13; BOOL x14; float x15; BOOL x16; float x17; BOOL x18; BOOL x19; BOOL x20; } *)a1;
- (int)_perFrameProcessing:(id)a0 input:(struct opaqueCMSampleBuffer { } *)a1 cfp:(struct frameProperties_t { struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } x0; BOOL x1; BOOL x2; BOOL x3; struct { void /* unknown type, empty encoding */ x0[3]; } x4; int x5; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x3; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x4; float x5; float x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; } x6; int x7; BOOL x8; float x9; double x10; float x11; BOOL x12; float x13; BOOL x14; float x15; BOOL x16; float x17; BOOL x18; BOOL x19; BOOL x20; } *)a2;
- (void)injectReferenceIfNeeded;
- (int)_computeReferenceFrameIndex;
- (void)StartKTraceEventForProcess:(struct opaqueCMSampleBuffer { } *)a0;
- (int)_multiFrameProcessing:(BOOL)a0;
- (void)_prepareOutputMetadata;
- (int)resetInternalState;
- (void)EndKTraceEventForProcess:(struct opaqueCMSampleBuffer { } *)a0;
- (int)verifyIOSurfaceCompression:(struct __IOSurface { } *)a0;
- (int)initFrameProperties:(id)a0 cfp:(struct frameProperties_t { struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } x0; BOOL x1; BOOL x2; BOOL x3; struct { void /* unknown type, empty encoding */ x0[3]; } x4; int x5; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x3; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x4; float x5; float x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; } x6; int x7; BOOL x8; float x9; double x10; float x11; BOOL x12; float x13; BOOL x14; float x15; BOOL x16; float x17; BOOL x18; BOOL x19; BOOL x20; } *)a1 width:(unsigned long long)a2 height:(unsigned long long)a3;
- (void)StartKTraceEventForAddFrame:(struct frameProperties_t { struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } x0; BOOL x1; BOOL x2; BOOL x3; struct { void /* unknown type, empty encoding */ x0[3]; } x4; int x5; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x3; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x4; float x5; float x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; } x6; int x7; BOOL x8; float x9; double x10; float x11; BOOL x12; float x13; BOOL x14; float x15; BOOL x16; float x17; BOOL x18; BOOL x19; BOOL x20; } *)a0 timestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (id)getProcessingTypeKey:(struct frameProperties_t { struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } x0; BOOL x1; BOOL x2; BOOL x3; struct { void /* unknown type, empty encoding */ x0[3]; } x4; int x5; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x3; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x4; float x5; float x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; } x6; int x7; BOOL x8; float x9; double x10; float x11; BOOL x12; float x13; BOOL x14; float x15; BOOL x16; float x17; BOOL x18; BOOL x19; BOOL x20; } *)a0;
- (void)EndKTraceEventForAddFrame:(struct frameProperties_t { struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } x0; BOOL x1; BOOL x2; BOOL x3; struct { void /* unknown type, empty encoding */ x0[3]; } x4; int x5; struct ColorSpaceConversionParameters { struct { void /* unknown type, empty encoding */ x0[3]; } x0; struct { void /* unknown type, empty encoding */ x0[3]; } x1; struct { void /* unknown type, empty encoding */ x0[3]; } x2; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x3; struct TransferFunctionParameters { float x0; float x1; float x2; float x3; float x4; } x4; float x5; float x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; } x6; int x7; BOOL x8; float x9; double x10; float x11; BOOL x12; float x13; BOOL x14; float x15; BOOL x16; float x17; BOOL x18; BOOL x19; BOOL x20; } *)a0 timestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (int)updateEV0ReferenceFrameIfNecessary;
- (BOOL)_isMetadataConsistentWithFirstFrame;
- (BOOL)shouldDownsampleRWPPInputWithPixelFormat:(unsigned int)a0 processingType:(unsigned int)a1;
- (int)_processInferenceImage:(struct __CVBuffer { } *)a0 sourceFrameType:(int)a1 sourceFrameIndex:(int)a2 ltcFrameIndex:(int)a3 gtcFrameIndex:(int)a4 originalWidth:(unsigned long long)a5 originalHeight:(unsigned long long)a6;
- (int)_computeMetricsForReferenceFrameSelection:(int)a0;
- (int)_perFrameProcessingComputeReferenceFrameIndexIfReady;
- (int)_downsampleImageForRegistration:(struct __CVBuffer { } *)a0 outputImage:(struct __CVBuffer { } *)a1;
- (int)_registerImages:(BOOL)a0;
- (int)_lowLightMotionDetection;
- (int)_computeBlurryFrameWeight:(int)a0;
- (int)_processSIFRandRefEV0IfPossible:(int)a0;
- (int)_lowLightGreenGhostPerFrameProcessing;
- (BOOL)_isGainMapSupported;
- (BOOL)_isSemanticStylesSupported;
- (int)getOptions:(id)a0;
- (int)determineWorkingBufferRequirementsWithOptions:(id)a0 nrfConfig:(id)a1 memoryAllocationInfo:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; unsigned long long x5; unsigned long long x6; } *)a2;
- (int)determineWorkingBufferRequirementsToProcess:(unsigned int)a0 prepareDescriptor:(id)a1 nrfConfig:(id)a2 denoiseFusePipelineSize:(unsigned long long *)a3 rwppSize:(unsigned long long *)a4 rwppInputWidth:(unsigned long long *)a5 rwppInputHeight:(unsigned long long *)a6;
- (int)_bindRegWarpPPWithWidth:(unsigned long long)a0 height:(unsigned long long)a1 pixelFormat:(unsigned int)a2;
- (int)bindResourcesForProcessingType:(unsigned int)a0 prepareDescriptor:(id)a1;
- (void)releaseStoredReference;
- (int)_setupFusionConfig;
- (void)storeReferenceIfNeeded;
- (int)_nrfFuseImages:(BOOL)a0;
- (int)_deepFusion;
- (int)_doDeepFusionSytheticRefererenceAndProxy;
- (int)_populateDeepFusionMetadata:(id)a0;
- (int)_deepFusionSetWarpReferenceSIFR;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_downscaleRoiForRegistration:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)sanityCheckHomographyForBracketIndex:(int)a0;
- (void)_deepFusionResetWarpTransforms;
- (int)_deepFusionSetWarpReference:(int)a0;
- (void)_deepFusionInvalidatePyramids;
- (void)_deepFusionRevertWarpToDefault;
- (int)_computeCornersStrengthWithBracketIndex:(unsigned int)a0 totalCornerStrength:(float *)a1;
- (int)_getSharpestBracket:(int)a0 normGyroScores:(float *)a1 normCornerScores:(float *)a2 normFocusScores:(float *)a3 normBlinkScores:(float *)a4 useLongWeights:(unsigned char)a5 sharpFrameIndex:(int *)a6;
- (id)newMTLBufferWithLength:(unsigned long long)a0;

@end

@class PostEspressoShaders, FigMetalContext, DeepFusionLaplacianPyramid, NSMutableArray;

@interface DeepFusionPostEspressoStage : NSObject {
    FigMetalContext *_metal;
    PostEspressoShaders *_shaders;
    NSMutableArray *_yinfTextures[2];
    unsigned long long _width;
    unsigned long long _height;
    unsigned long long _pixelFormat;
    int _networkVersion;
    DeepFusionLaplacianPyramid *_laplacianPyram;
}

+ (int)prewarmShaders:(id)a0 networkVersion:(int)a1;

- (void)purgeResources;
- (void).cxx_destruct;
- (int)allocateTextures;
- (int)_validateInputsForTile:(struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } *)a0 espressoOutputTextureArray:(id)a1 inRefGaussianArray:(id)a2 inSLGaussianArray:(id)a3 inRefLaplacianArray:(id)a4 inSLLaplacianArray:(id)a5 inRefNoisePyramidLevel3:(id)a6 inSLNoisePyramidLevel3:(id)a7 slFusionMap:(id)a8 longFusionMap:(id)a9 prefusionWeightsTexture:(id)a10 skinMaskTexture:(id)a11 skyMaskTexture:(id)a12 finalOutputTexture:(id)a13 lscGains:(id)a14 refNoisePretuning:(id)a15;
- (int)_collapseWeightsOnTile:(id)a0 inoutTexNSArray:(id)a1;
- (int)_createUpsampledWithGaussianFilter:(id)a0 inTexPrevLevel:(id *)a1;
- (int)_deghostAndDenoise:(id)a0 uniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a1 inTexEspressoWeights:(id)a2 inTexEspressoWeightsUp:(id)a3 inRefLaplacian:(id)a4 inSynthLongLaplacian:(id)a5 inRefGaussian:(id)a6 inSynthLongGaussian:(id)a7 inRefNoisePyramidLevel3:(id)a8 inSynthLongNoisePyramidLevel3:(id)a9 refNoisePretuning:(id)a10 LSCGains:(id)a11 inTexPrevLevel:(id)a12 outDeghostedDenoised:(id)a13 lowLightMode:(BOOL)a14;
- (int)_computeTextureness:(id)a0 applyUniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a1 inputTexture:(id)a2 outputTexture:(id)a3 lscGainsTex:(id)a4;
- (int)_applyEspressoOutputLumaOnlyToLevel:(id)a0 uniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a1 inRefGaussian:(id)a2 slFusionMap:(id)a3 longFusionMap:(id)a4 prefusionWeightsTexture:(id)a5 inTexArray:(id)a6 inTexArrayUp:(id)a7 skinMaskTexture:(id)a8 skyMaskTexture:(id)a9 deghostedAndDenoisedAndTextureness:(id)a10 outTex:(id)a11 tile:(struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } *)a12;
- (int)_applyEspressoOutputToLevel:(id)a0 uniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a1 inRefGaussian:(id)a2 slFusionMap:(id)a3 longFusionMap:(id)a4 prefusionWeightsTexture:(id)a5 inTexArray:(id)a6 inTexArrayUp:(id)a7 skinMaskTexture:(id)a8 skyMaskTexture:(id)a9 deghostedAndDenoisedAndTextureness:(id)a10 outTex:(id)a11 tile:(struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } *)a12;
- (int)_addPreviousLevel:(SEL)a0 inoutTex:(id)a1 inTexPrevLevel:(id)a2 writeOffset:(id)a3 applyUniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a4 useUpsampledImage:(unsigned int)a5;
- (id)initWithMetalContext:(id)a0 networkVersion:(int)a1;
- (int)setWidth:(unsigned long long)a0 andHeight:(unsigned long long)a1 andPixelFormat:(unsigned long long)a2;
- (void)makeTextureAliasable;
- (int)applyWeightsOnTile:(id)a0 uniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a1 espressoOutputTextureArray:(id)a2 inRefGaussianArray:(id)a3 inSLGaussianArray:(id)a4 inRefLaplacianArray:(id)a5 inSLLaplacianArray:(id)a6 inRefNoisePyramidLevel3:(id)a7 inSLNoisePyramidLevel3:(id)a8 slFusionMap:(id)a9 longFusionMap:(id)a10 prefusionWeightsTexture:(id)a11 skinMaskTexture:(id)a12 skyMaskTexture:(id)a13 lscGains:(id)a14 refNoisePretuning:(id)a15 tile:(struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } *)a16 finalOutputTexture:(id)a17 lowLightMode:(BOOL)a18;
- (int)convert444to420:(id)a0 input444:(id)a1 outputLuma:(id)a2 outputChroma:(id)a3 outputOffset:(struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } *)a4;
- (int)createShaderUniforms:(SEL)a0 totalGain:(id)a1 EVM_EV0_motionScore:(float)a2 lscGainGreenMax:(float)a3 slQuantBounds:(float)a4 espressoModel:(struct NoiseDivisorQuantizationBoundaries { float x0; float x1; })a5 fullSize:(int)a6 uniforms:(struct DFApplyEspressoOutputUniforms { float x0; float x1; int x2; struct TileBounds { int x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; } x3; float x4; int x5; float x6; float x7; float x8; BOOL x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct NoiseDivisorQuantizationBoundaries { float x0; float x1; } x18; float x19; float x20; float x21; float x22; float x23; float x24; float x25; float x26; struct { void /* unknown type, empty encoding */ x0[3]; } x27; struct { void /* unknown type, empty encoding */ x0[3]; } x28; float x29; float x30; float x31; float x32; } *)a7 hasLong:(BOOL)a8 hasSIFR:(BOOL)a9 isStationary:(BOOL)a10 isSyntheticLongWithRealLong:(BOOL)a11 aeShutterTimeRatio:(float)a12 colorCorrection:(struct { void /* unknown type, empty encoding */ x0[3]; })a13 inverseColorCorrection:(struct { void /* unknown type, empty encoding */ x0[3]; })a14;
- (int)computeAMBNRDenoiseBoostMap:(id)a0 boostMap:(id)a1 longFusionMap:(id)a2 ev0FusionMap:(id)a3 ev0Metadata:(struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } *)a4 longMetadata:(struct frameMetadata { int x0; BOOL x1; BOOL x2; BOOL x3; long long x4; struct exposureParameters { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; BOOL x19; BOOL x20; BOOL x21; float x22; BOOL x23; float x24; float x25; float x26; } x5; BOOL x6; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x7; int x8; BOOL x9; struct ltmCurves { union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x0; union { unsigned short x0; char x1[18242]; char x2[110616]; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x3; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11[0]; } x4; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13[0]; } x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12[0]; } x6; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; short x11; struct { struct { short x0; short x1; short x2; } x0; struct { short x0; short x1; short x2; } x1; struct { short x0; short x1; short x2; } x2; struct { short x0; short x1; short x2; } x3; struct { short x0; short x1; short x2; } x4; struct { short x0; short x1; short x2; } x5; struct { short x0; short x1; short x2; } x6; struct { short x0; short x1; short x2; } x7; struct { short x0; short x1; short x2; } x8; } x12[0]; } x7; } x1; struct { unsigned short x0; unsigned short x1[0]; } x2; unsigned short x3[257]; struct { unsigned short x0; unsigned short x1[0]; } x4; unsigned short x5[257]; float x6; } x10; struct { void /* unknown type, empty encoding */ x0[3]; } x11; BOOL x12; BOOL x13; int x14; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; unsigned short x2; unsigned short x3; } x15[10]; int x16; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; unsigned short x1; } x17[10]; BOOL x18; struct LocalHistogramClippingDataGeneric { unsigned short x0; unsigned int x1; struct *x2; } x19; } *)a5 numEV0:(int)a6 ev0FusionTarget:(float)a7 longFusionTarget:(float)a8;

@end

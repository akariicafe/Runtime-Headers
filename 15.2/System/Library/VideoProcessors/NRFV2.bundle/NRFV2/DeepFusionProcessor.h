@class NSMutableDictionary, SemanticStylesStage, TextureUtils, NSDictionary, DeepFusionPreEspressoStage, RegDense, FigMetalContext, ColorCubeCorrectionStage, NSString, NRFProcessorInferenceResults, ToneMappingCurves, SyntheticLongStage, TiledFusionStage, OutliersRemovalStage, NSNumber, LSCGainsPlist, ColorConvertStage, ToneMappingStage, AMBNRStage;
@protocol IBPSemanticStyleProperties, MTLComputePipelineState, MTLTexture, IBPDeepFusionOutput, MTLCommandQueue;

@interface DeepFusionProcessor : NSObject <IBPDeepFusionProcessor> {
    NSMutableDictionary *_tuningParams;
    unsigned long long _allocatorForceSize;
    BOOL _allocatorWireMemory;
    int _compressionLevel;
    int _allocatorType;
    int _networkVersion;
    BOOL _allocatorSetupComplete;
    FigMetalContext *_metal;
    NSNumber *_sensorID;
    NSString *_portType;
    NSDictionary *_ev0MetadataDict;
    struct frameMetadata { int sensorID; BOOL isPreBracketedFrame; BOOL isEVMFrame; BOOL isLongFrame; long long averageFocusScore; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } exposureParams; BOOL metadataHasROI; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROI; int exifOrientation; BOOL metadataHasLtmCurves; struct ltmCurves { union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ltmLut; union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ccmLut; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } globalLtmLut; unsigned short globalLtmLutData[257]; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } gtcLut; unsigned short gtcLutData[257]; float ltmHardGain; } ltmCurves; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; BOOL isStationary; BOOL allowSpatialCCM; int facesCount; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; unsigned short roll; unsigned short yaw; } faces[10]; int bodiesCount; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; } bodies[10]; BOOL hasValidClippingData; struct LocalHistogramClippingDataGeneric { unsigned short version; unsigned int binCountPerTile; struct *dataV1; } clippingData; } _ev0Metadata;
    NSDictionary *_sifrMetadataDict;
    struct frameMetadata { int sensorID; BOOL isPreBracketedFrame; BOOL isEVMFrame; BOOL isLongFrame; long long averageFocusScore; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } exposureParams; BOOL metadataHasROI; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROI; int exifOrientation; BOOL metadataHasLtmCurves; struct ltmCurves { union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ltmLut; union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ccmLut; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } globalLtmLut; unsigned short globalLtmLutData[257]; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } gtcLut; unsigned short gtcLutData[257]; float ltmHardGain; } ltmCurves; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; BOOL isStationary; BOOL allowSpatialCCM; int facesCount; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; unsigned short roll; unsigned short yaw; } faces[10]; int bodiesCount; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; } bodies[10]; BOOL hasValidClippingData; struct LocalHistogramClippingDataGeneric { unsigned short version; unsigned int binCountPerTile; struct *dataV1; } clippingData; } _sifrMetadata;
    NSDictionary *_longMetadataDict;
    struct frameMetadata { int sensorID; BOOL isPreBracketedFrame; BOOL isEVMFrame; BOOL isLongFrame; long long averageFocusScore; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } exposureParams; BOOL metadataHasROI; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROI; int exifOrientation; BOOL metadataHasLtmCurves; struct ltmCurves { union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ltmLut; union { unsigned short version; char bytes[18242]; char bytesCCM[110616]; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v1; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsCurveEntryCount; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short lutsData[0]; } v2; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short ccmEntryCount; unsigned short lutsData[0]; } v3; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; unsigned short ltmCurveEntryCount; unsigned short lutsData[0]; } v4; struct { unsigned short version; unsigned short lutsCountX; unsigned short lutsCountY; unsigned short lutsBytesPerRow; unsigned short lutsBytesPerColumn; unsigned short topPadding; unsigned short bottomPadding; unsigned short leftPadding; unsigned short rightPadding; unsigned short tileWidth; unsigned short tileHeight; short ccmFixedPointBase; struct { struct { short shadows; short mid; short highlights; } RR; struct { short shadows; short mid; short highlights; } RG; struct { short shadows; short mid; short highlights; } RB; struct { short shadows; short mid; short highlights; } GR; struct { short shadows; short mid; short highlights; } GG; struct { short shadows; short mid; short highlights; } GB; struct { short shadows; short mid; short highlights; } BR; struct { short shadows; short mid; short highlights; } BG; struct { short shadows; short mid; short highlights; } BB; } lutsData[0]; } ccmV1; } ccmLut; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } globalLtmLut; unsigned short globalLtmLutData[257]; struct { unsigned short lutEntryCount; unsigned short lutData[0]; } gtcLut; unsigned short gtcLutData[257]; float ltmHardGain; } ltmCurves; struct { void /* unknown type, empty encoding */ columns[3]; } colorCorrectionMatrix; BOOL isStationary; BOOL allowSpatialCCM; int facesCount; struct FaceDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; unsigned short roll; unsigned short yaw; } faces[10]; int bodiesCount; struct BodyDetectionBuffer { struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } rect; unsigned short confidence; } bodies[10]; BOOL hasValidClippingData; struct LocalHistogramClippingDataGeneric { unsigned short version; unsigned int binCountPerTile; struct *dataV1; } clippingData; } _longMetadata;
    float _EVM_EV0_motionScore;
    int _SyntheticReferenceMode;
    NSDictionary *_nrfSyntheticLongIntermediateMetadataDict;
    NSDictionary *_nrfInfoDict;
    NSNumber *_nrfStatus;
    NSNumber *_nrfInputBracketCount;
    NSNumber *_nrfRegisteredBracketCount;
    NSMutableDictionary *_sidecar;
    LSCGainsPlist *_lscGainsPlist;
    int _applyColorCubeFixOverride;
    int _applyColorCube2FixOverride;
    unsigned long long _originalWidth;
    unsigned long long _originalHeight;
    unsigned long long _width;
    unsigned long long _height;
    struct __CVBuffer { } *_referenceBuffer;
    id<MTLTexture> _referenceLumaTex;
    id<MTLTexture> _referenceChromaTex;
    struct __CVBuffer { } *_longBuffer;
    id<MTLTexture> _longLumaTex;
    id<MTLTexture> _longChromaTex;
    id<MTLTexture> _referenceFusionMapTex;
    id<MTLTexture> _longFusionMapTex;
    id<MTLTexture> _longRealLongFusionMapTex;
    NRFProcessorInferenceResults *_inferenceResults;
    ToneMappingCurves *_toneMappingCurves;
    ToneMappingStage *_toneMappingStage;
    SemanticStylesStage *_semanticStylesStage;
    int _srlVersion;
    TextureUtils *_textureUtils;
    RegDense *_regDense;
    TiledFusionStage *_tiledFusionStage;
    struct DeepFusionFrameMeta { long long combo; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } refExposure; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } syntheticLongExposure; struct exposureParameters { float gain; float red_gain; float blue_gain; float red_combo_gain; float blue_combo_gain; float analog_gain; float isp_digital_gain; float hard_gain; float ltm_soft_gain; float hr_gain_down_ratio; float exposure_time; float average_focus_score; float normalized_snr; float exposure_bias; float read_noise_1x; float read_noise_8x; float conversion_gain; float sensor_black_level; float lsModulationWeight; BOOL is_long; BOOL ae_locked; BOOL hr_enabled; float luxLevel; BOOL ltm_locked; float AETargetGain; float face_exp_ratio; float CCT; } longExposure; } _preEspressoMetaData;
    DeepFusionPreEspressoStage *_preEspressoStage;
    AMBNRStage *_ambnrStage;
    OutliersRemovalStage *_outliersRemovalStage;
    SyntheticLongStage *_syntheticLongStage;
    ColorCubeCorrectionStage *_ColorCubeCorrectionStage;
    ColorConvertStage *_colorConvertStage;
    BOOL _isShaderHarvesting;
    struct IntermediateEncodingParameters { float syntheticReferenceLumaPedestal; float syntheticLongLumaPedestal; } _intermediateEncodingParameters;
    id<MTLComputePipelineState> _copyTextureKernel;
}

@property (retain, nonatomic) id<IBPSemanticStyleProperties> semanticStyleProperties;
@property (retain, nonatomic) id<IBPDeepFusionOutput> output;
@property (retain, nonatomic) id<MTLCommandQueue> metalCommandQueue;
@property (retain, nonatomic) NSDictionary *tuningParameters;
@property (retain, nonatomic) NSDictionary *cameraInfoByPortType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (int)prewarm;
- (int)resetState;
- (int)purgeResources;
- (int)prewarmWithTuningParameters:(id)a0;
- (int)process;
- (int)finishProcessing;
- (id)initWithContext:(id)a0;
- (int)setup;
- (int)applyOverrides;
- (void).cxx_destruct;
- (id)init;
- (int)prepareToProcess:(unsigned int)a0;
- (int)prepareToProcess:(unsigned int)a0 prepareDescriptor:(id)a1;
- (int)setupWithOptions:(id)a0;
- (int)addBuffer:(struct __CVBuffer { } *)a0 metadata:(id)a1 type:(int)a2;
- (int)addInferenceResults:(id)a0;
- (int)_commonInitWithContext:(id)a0;
- (int)getTuning:(id)a0;
- (BOOL)isIntermediateVersionCompatible;

@end

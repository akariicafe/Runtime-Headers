@class NSString, IDSAccountController, NSMutableDictionary, NSMutableArray, FaceTimePushHandler;

@interface FaceTimeServiceSession : IMDAppleServiceSession <FaceTimePushHandlerListener> {
    FaceTimePushHandler *_ftPushHandler;
    IDSAccountController *_callAccountController;
    NSString *_loggingCategory;
    NSMutableDictionary *_conferenceIDMap;
    NSMutableDictionary *_callTypeMap;
    NSMutableArray *_initiatedConferences;
    id _broadcasterACInvocationQueue;
    id _broadcasterVCInvocationQueue;
    id /* block */ _completionBlock;
    struct __SecKey { } *_privateKey;
    BOOL _privateIdentityLoaded;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;

- (id)regionID;
- (id)registeredURIs;
- (void)sessionWillBecomeInactiveWithAccount:(id)a0;
- (id)phoneNumber;
- (void)refreshRegistration;
- (id)initWithAccount:(id)a0 service:(id)a1;
- (void)handler:(id)a0 sessionCancelled:(id)a1 topic:(id)a2 peerID:(id)a3 reason:(id)a4 clientInfo:(id)a5 serviceData:(id)a6;
- (id)pushToken;
- (double)_messageTimeoutTimeForMessage:(id)a0;
- (void)cancelVCRequestWithPerson:(id)a0 properties:(id)a1 conference:(id)a2 reason:(id)a3;
- (void)_cancelVCRequestWithPerson:(id)a0 properties:(id)a1 conference:(id)a2 pairsToSkip:(id)a3 reason:(id)a4;
- (void)_setInitiatedConference:(id)a0;
- (id)userID;
- (void)relay:(id)a0 sendUpdate:(id)a1 toPerson:(id)a2;
- (void)handler:(id)a0 sessionRejected:(id)a1 topic:(id)a2 peerID:(id)a3 peerPushToken:(id)a4 reason:(id)a5 clientInfo:(id)a6 serviceData:(id)a7;
- (unsigned long long)capabilities;
- (BOOL)_checkBadPushToken:(id)a0;
- (id)callerCertForCallType:(int)a0;
- (void)handler:(id)a0 relayInitiated:(id)a1 topic:(id)a2 peerID:(id)a3 peerPushToken:(id)a4 relayType:(id)a5 relayConnectionID:(id)a6 relayTransactionIDAlloc:(id)a7 relayTokenAllocReq:(id)a8 relayCandidateID:(id)a9 myRelayIP:(id)a10 myRelayPort:(id)a11 peerRelayIP:(id)a12 peerRelayPort:(id)a13 clientInfo:(id)a14 serviceData:(id)a15;
- (id)_peerIDForDiplayID:(id)a0 conferenceID:(id)a1;
- (void)_setPurgeTimer;
- (void)_sendRejectToPeerID:(id)a0 peerToken:(id)a1 sessionToken:(id)a2 callType:(int)a3 reason:(long long)a4 clientInfo:(id)a5;
- (BOOL)_anyPeersForConferenceIDMayRequireBreakBeforeMake:(id)a0;
- (BOOL)_hasPeersForPeerID:(id)a0 conferenceID:(id)a1;
- (id)_peerInfoForDisplayID:(id)a0 conferenceID:(id)a1 skippingPairs:(id)a2;
- (void)handler:(id)a0 relayCancelled:(id)a1 topic:(id)a2 peerID:(id)a3 relayType:(id)a4 relayTokenAllocReq:(id)a5 relayConnectionID:(id)a6 relayTransactionIDAlloc:(id)a7 relayCandidateID:(id)a8 myRelayIP:(id)a9 myRelayPort:(id)a10 peerRelayIP:(id)a11 peerRelayPort:(id)a12 reason:(id)a13 clientInfo:(id)a14 serviceData:(id)a15;
- (id)idsAccountForCallType:(int)a0;
- (id)loggingName;
- (BOOL)_hasOutgoingRelayInitiateInFlight;
- (BOOL)_checkManagedProfileAndFailIfNecessaryAction:(long long)a0 callType:(int)a1 conferenceID:(id)a2 withPerson:(id)a3 properties:(id)a4;
- (void)_cancelOtherInvitesForPeerID:(id)a0 skipPairs:(id)a1 properties:(id)a2 conference:(id)a3 reason:(id)a4;
- (void)sendAVMessageToPerson:(id)a0 sessionID:(unsigned int)a1 type:(unsigned int)a2 userInfo:(id)a3 conference:(id)a4;
- (id)_mappedSessionTokenForConferenceID:(id)a0;
- (BOOL)_hasOutgoingInvitationInFlight;
- (void)_retargetPeerID:(id)a0 displayID:(id)a1 pushToken:(id)a2 conferenceID:(id)a3;
- (void)relay:(id)a0 sendInitateRequest:(id)a1 toPerson:(id)a2;
- (id)_pushTokenForPeerID:(id)a0 conferenceID:(id)a1;
- (id)idsAccounts;
- (BOOL)_checkRegistrationAndFailIfNecessaryAction:(long long)a0 callType:(int)a1 conferenceID:(id)a2 withPerson:(id)a3 properties:(id)a4;
- (void)_setAlternateDisplayID:(id)a0 forPeerID:(id)a1 conferenceID:(id)a2;
- (void)_setCallType:(int)a0 forConferenceID:(id)a1;
- (void)_logLocalInfo;
- (void)handler:(id)a0 sessionInitated:(id)a1 topic:(id)a2 myID:(id)a3 peerID:(id)a4 peerDisplayID:(id)a5 peerCN:(id)a6 peerPushToken:(id)a7 peerNATType:(id)a8 peerBlob:(id)a9 peerNatIP:(id)a10 clientInfo:(id)a11 serviceData:(id)a12;
- (id)_pushTokensForPeerID:(id)a0 conferenceID:(id)a1;
- (BOOL)_checkConferenceIDAndFailIfNecessaryWithAction:(long long)a0 callType:(int)a1 conferenceID:(id)a2 withPerson:(id)a3 properties:(id)a4;
- (void)_setPeerInfo:(id)a0 conferenceID:(id)a1;
- (void)handler:(id)a0 incomingMessage:(id)a1 topic:(id)a2 peerID:(id)a3 reason:(id)a4 clientInfo:(id)a5 serviceData:(id)a6;
- (BOOL)_checkAliasInfoAndFailIfNecessaryWithAction:(long long)a0 callType:(int)a1 conferenceID:(id)a2 withPerson:(id)a3 properties:(id)a4;
- (void)relay:(id)a0 sendCancel:(id)a1 toPerson:(id)a2;
- (id)regionBasePhoneNumber;
- (id)_peerIDPushTokenPairsForConferenceID:(id)a0;
- (struct __SecKey { } *)callerPrivateKey;
- (void)_setConferenceIDMap:(id)a0 forToken:(id)a1;
- (int)_callTypeForConferenceID:(id)a0;
- (void)refreshServiceCapabilities;
- (id)regionServerContext;
- (id)profileID;
- (void)handler:(id)a0 relayUpdated:(id)a1 topic:(id)a2 peerID:(id)a3 peerPushToken:(id)a4 relayType:(id)a5 relayConnectionID:(id)a6 relayTransactionIDChannelBind:(id)a7 relayTokenChannelBind:(id)a8 relayCandidateID:(id)a9 relayBlob:(id)a10 peerRelayNATIP:(id)a11 peerRelayNATPort:(id)a12 clientInfo:(id)a13 serviceData:(id)a14;
- (id)topicForCallType:(int)a0;
- (id)_peerIDPushTokensPairsForPeerID:(id)a0 conferenceID:(id)a1 skippingPairs:(id)a2;
- (void)requestVCWithPerson:(id)a0 properties:(id)a1 conference:(id)a2;
- (void)dealloc;
- (BOOL)_checkCanSendRequestsAndFailIfNecessaryAction:(long long)a0 callType:(int)a1 conferenceID:(id)a2 withPerson:(id)a3 properties:(id)a4;
- (BOOL)_validRegistrationStateToAcceptCalls;
- (void)handler:(id)a0 sessionAccepted:(id)a1 topic:(id)a2 peerID:(id)a3 peerCN:(id)a4 peerPushToken:(id)a5 peerNATType:(id)a6 peerBlob:(id)a7 peerNatIP:(id)a8 relayType:(id)a9 relayConnectionID:(id)a10 relayTransactionIDAlloc:(id)a11 relayTokenAllocReq:(id)a12 myRelayIP:(id)a13 myRelayPort:(id)a14 peerRelayIP:(id)a15 peerRelayPort:(id)a16 clientInfo:(id)a17 serviceData:(id)a18;
- (unsigned long long)queue:(id)a0 optionsForInvocation:(id)a1;
- (id)_peerIDsForDiplayID:(id)a0 conferenceID:(id)a1;
- (BOOL)_validRegistrationStateToMakeCalls;
- (BOOL)_checkForBadPeerIDWithAction:(long long)a0 callType:(int)a1 conferenceID:(id)a2 withPerson:(id)a3 properties:(id)a4 peerID:(id)a5;
- (void)_purgeMap;
- (id)_displayIDForPeerID:(id)a0 conferenceID:(id)a1;
- (BOOL)queue:(id)a0 shouldInvoke:(id)a1;
- (BOOL)_registrationSupportedForRegistration;
- (void)respondToVCInvitationWithPerson:(id)a0 properties:(id)a1 conference:(id)a2;

@end

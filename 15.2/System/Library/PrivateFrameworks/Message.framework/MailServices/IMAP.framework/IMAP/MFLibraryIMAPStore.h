@class EDServerMessagePersistence, NSString, NSLock, MFIMAPConnection, EFFuture, EFCancelationToken, NSObject;
@protocol OS_os_log;

@interface MFLibraryIMAPStore : MFLibraryStore <MFIMAPConnectionDelegate, MFIMAPSequenceIdentifierProvider, ECIMAPLocalActionReplayerDelegate, EFLoggable> {
    unsigned char _supportsCustomPermanentFlags : 1;
    unsigned char _supportsJunkFlag : 1;
    unsigned char _supportsDollarJunkFlag : 1;
    unsigned char _supportsNotJunkFlag : 1;
    unsigned char _supportsDollarNotJunkFlag : 1;
    unsigned char _supportsForwardedFlag : 1;
    unsigned char _supportsDollarForwardedFlag : 1;
    unsigned char _supportsFlagColorBitFlags : 1;
    unsigned char _updatingCache : 1;
    unsigned char _updateMetadata : 1;
    unsigned char _readyToDealloc : 1;
    unsigned char _didSynchronizeOldMessages : 1;
    unsigned char _recentsExist : 1;
    unsigned char _settingServerCount : 1;
    unsigned short _reserved : 15;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _activeFetchVsReplayLock;
    NSString *_mailboxName;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _serverCountLock;
    unsigned long long _serverMessageCount;
    unsigned long long _serverDeletedCount;
    unsigned long long _serverUidNext;
    unsigned long long _lastHighestModSequence;
    unsigned long long _highestModSequence;
    NSString *_selectedUID;
    unsigned int _currentFetchUid;
    NSString *_relativePath;
    MFIMAPConnection *_cachedConnection;
    NSLock *_cachedConnectionLock;
    EFFuture *_serverMessagePersistenceFuture;
    NSString *_loggingPrefix;
}

@property (class, readonly) NSObject<OS_os_log> *log;

@property BOOL shouldUseIDLE;
@property (retain, nonatomic) EFCancelationToken *cancelationToken;
@property (readonly, retain, nonatomic) EDServerMessagePersistence *serverMessagePersistence;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)copyRemoteIDForTemporaryUid:(unsigned int)a0;

- (void)setLibrary:(id)a0;
- (void)close;
- (void)connectionDidDisconnect:(id)a0;
- (id)relativePath;
- (void).cxx_destruct;
- (void)dealloc;
- (void)doCompact;
- (BOOL)moveSupportedFromMailboxURL:(id)a0 toURL:(id)a1;
- (id)messageDataForMessage:(id)a0;
- (id)replayAction:(id)a0;
- (id)mailboxName;
- (id)initWithMailboxUid:(id)a0 readOnly:(BOOL)a1;
- (void)_handleFlagsChangedForMessages:(id)a0 flags:(id)a1 oldFlagsByMessage:(id)a2;
- (BOOL)_fetchDataForMimePart:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 isComplete:(BOOL *)a2 consumer:(id)a3;
- (id)_fetchFullBodyDataForMessage:(id)a0 andHeaderDataIfReadilyAvailable:(id *)a1 downloadIfNecessary:(BOOL)a2 didDownload:(BOOL *)a3;
- (id)_fetchBodyDataForMessage:(id)a0 andHeaderDataIfReadilyAvailable:(id *)a1 downloadIfNecessary:(BOOL)a2 partial:(BOOL *)a3;
- (BOOL)canCompact;
- (unsigned long long)growFetchWindow;
- (BOOL)bodyFetchRequiresNetworkActivity;
- (id)_fetchHeaderDataForMessage:(id)a0 downloadIfNecessary:(BOOL)a1;
- (void)deleteMessagesOlderThanNumberOfDays:(int)a0 compact:(BOOL)a1;
- (void)setFlagsForAllMessagesFromDictionary:(id)a0;
- (BOOL)allowsAppend;
- (BOOL)canFetchMessageIDs;
- (long long)fetchMessagesWithMessageIDs:(id)a0 andSetFlags:(unsigned long long)a1;
- (unsigned long long)serverMessageCount;
- (id)storeSearchResultMatchingCriterion:(id)a0 limit:(unsigned int)a1 offset:(id)a2 error:(id *)a3;
- (long long)fetchNumMessages:(unsigned long long)a0 preservingUID:(id)a1 options:(unsigned long long)a2;
- (BOOL)canFetchSearchResults;
- (id)remoteIDsFromUniqueRemoteIDs:(id)a0;
- (long long)fetchMessagesWithRemoteIDs:(id)a0 andSetFlags:(unsigned long long)a1;
- (id)messageForRemoteID:(id)a0;
- (id)messageForRemoteID:(id)a0 inMailbox:(id)a1;
- (id)uniqueRemoteIDsForMessages:(id)a0;
- (void)updateServerUnreadCountClosingConnection:(BOOL)a0;
- (id)messageIdRollCall:(id)a0;
- (id)imapMailboxNameForMailboxURL:(id)a0;
- (id)flagsForIMAPUIDs:(id)a0 mailboxURL:(id)a1;
- (BOOL)checkUIDValidity:(unsigned int)a0 mailboxURL:(id)a1;
- (id)messageDataForRemoteID:(id)a0 mailboxURL:(id)a1;
- (BOOL)errorIsIMAPError:(id)a0;
- (id)offlineCache;
- (id)offlineCacheIfOffline;
- (void)reselectMailbox;
- (BOOL)connection:(id)a0 shouldHandleUntaggedResponse:(id)a1 forCommand:(id)a2;
- (void)connection:(id)a0 didReceiveResponse:(id)a1 forCommand:(id)a2;
- (void)willRemoveDelegation:(id)a0;
- (void)setServerMessageCount:(unsigned long long)a0;
- (void)setHighestModSequence:(unsigned long long)a0;
- (BOOL)shouldStartIdleForConnection:(id)a0;
- (id)sequenceIdentifierForUIDs:(id)a0;
- (void)setSequenceIdentifier:(id)a0 forUIDs:(id)a1;
- (BOOL)hasValidCacheFileForMessage:(id)a0;
- (id)_observeChangesInIdleConditions;
- (unsigned long long)fetchMessagesWithUIDs:(id)a0 connection:(id)a1 newCount:(unsigned long long)a2 flagsToSet:(unsigned long long)a3 queueClass:(Class)a4;
- (unsigned long long)syncMessagesWithUIDs:(id)a0 connection:(id)a1 serverMessages:(id)a2 flagSearchResults:(id)a3;
- (void)_updateSelectedUID:(unsigned long long *)a0;
- (id)_searchFlagsForUIDs:(id)a0 usingConnection:(id)a1;
- (void)_performActionsOnConnection:(id)a0 uidsToFetch:(id *)a1 uidsToSync:(id *)a2 messagesToCompact:(id *)a3 serverMessages:(id)a4 flagSearchResults:(id)a5 shouldForce:(BOOL)a6 newUIDsToFetch:(unsigned int *)a7;
- (BOOL)performOperationRequiringConnection:(BOOL)a0 withOptions:(int)a1 failedToSelectMailbox:(BOOL *)a2 operation:(id /* block */)a3;
- (void)updateDeletedCountWithNotDeletedCount:(unsigned long long)a0;
- (BOOL)_selectMailbox:(id)a0 withConnection:(id)a1;
- (BOOL)_shouldContinueToPreservedUID:(unsigned long long)a0;
- (unsigned long long)_fetchMessagesWithArguments:(id)a0 idRange:(id)a1 onConnection:(id)a2 synchronize:(BOOL)a3 limit:(unsigned long long)a4 topUIDToCompact:(unsigned long long)a5 topKnownUID:(unsigned long long)a6 success:(BOOL *)a7 examinedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a8 fetchableUIDsFound:(unsigned long long *)a9 preserveUID:(unsigned long long *)a10 numFetchedUIDs:(unsigned long long *)a11;
- (void)_fetchServerUnreadCountWithConnection:(id)a0;
- (void)_updateServerUnreadCount:(unsigned long long)a0;
- (id)_remoteBodySearchForCriterion:(id)a0;
- (id)_newSearchResponseQueueForConnection:(id)a0 limit:(unsigned int)a1;
- (void)_fetchMessagesMatchingCriterion:(id)a0 limit:(unsigned int)a1 withOptions:(int)a2 handler:(id /* block */)a3;
- (id)deletedMessages;
- (id)_fetchFullMessageDataForMessage:(id)a0 download:(id *)a1;
- (id)downloadCacheForConnection:(id)a0;
- (BOOL)_waitForDataFromDownload:(id)a0 uid:(unsigned int)a1 downloadCache:(id)a2 connection:(id)a3;
- (id)fetchPipelineForConnection:(id)a0;
- (id)_dataForMessage:(id)a0 readHeadersOnly:(BOOL)a1;
- (id)_downloadForMessageBodyData:(id)a0 usingDownloadCache:(id)a1;
- (id)_performBodyDataDownload:(id)a0 usingConnection:(id)a1 downloadCache:(id)a2 isPartial:(BOOL *)a3;
- (void)setMailboxUidValidity:(unsigned int)a0;
- (id)_idleConditionsObservable;
- (void)_scheduleIdleTransition:(BOOL)a0;
- (void)updateDeletedCount;
- (unsigned int)mailboxUidValidity;

@end

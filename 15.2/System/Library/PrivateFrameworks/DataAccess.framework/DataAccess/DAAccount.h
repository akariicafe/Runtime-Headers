@class NSMutableDictionary, NSURL, NSMapTable, NSDate, NSObject, DATrustHandler, ACAccount, NSMutableArray, NSString, DATaskManager, NSSet, NSArray, NSData, DAStatusReport;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface DAAccount : NSObject {
    BOOL _hasInitted;
    NSMapTable *_consumers;
    struct __CFURLStorageSession { } *_storageSession;
    NSString *_clientToken;
    NSObject<OS_xpc_object> *_xpcActivity;
    int _continueCount;
    BOOL _isFetchingAutomatically;
}

@property (retain, nonatomic) NSMutableDictionary *dataclassPropertyURLsByDataclass;
@property (retain, nonatomic) DAStatusReport *statusReport;
@property (retain, nonatomic) DATrustHandler *trustHandler;
@property (nonatomic) BOOL shouldUseOpportunisticSockets;
@property (nonatomic) BOOL wasUserInitiated;
@property (retain, nonatomic) NSMutableArray *pendingQueries;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *pendingQueryQueue;
@property (retain, nonatomic) NSDate *lastQueryStartedTime;
@property (readonly, nonatomic) NSString *accountID;
@property (nonatomic, setter=setDAAccountVersion:) int daAccountVersion;
@property (readonly, copy, nonatomic) NSString *persistentUUID;
@property (copy, nonatomic) NSString *accountDescription;
@property (readonly, nonatomic) NSString *publicDescription;
@property (copy, nonatomic) NSString *username;
@property (copy, nonatomic) NSString *user;
@property (copy, nonatomic) NSString *host;
@property (nonatomic) long long port;
@property (copy, nonatomic) NSString *password;
@property (nonatomic) BOOL useSSL;
@property (readonly, nonatomic) long long enabledDataclassesBitmask;
@property (readonly, nonatomic) BOOL isChildAccount;
@property (readonly, nonatomic) ACAccount *backingAccountInfo;
@property (readonly, nonatomic) DATaskManager *taskManager;
@property (readonly, nonatomic) NSString *changeTrackingID;
@property (readonly, nonatomic) int keychainAccessibilityType;
@property (readonly, nonatomic) NSString *scheduleIdentifier;
@property (retain, nonatomic) NSData *signingIdentityPersistentReference;
@property (retain, nonatomic) NSData *encryptionIdentityPersistentReference;
@property (nonatomic) BOOL shouldDoInitialAutodiscovery;
@property (readonly, nonatomic) BOOL shouldAutodiscoverAccountProperties;
@property (readonly, copy, nonatomic) NSString *scheme;
@property (copy, nonatomic) NSURL *principalURL;
@property (copy, nonatomic) NSString *principalPath;
@property (readonly, copy, nonatomic) NSString *clientToken;
@property (copy, nonatomic) NSString *emailAddress;
@property (copy, nonatomic) NSArray *emailAddresses;
@property (readonly, nonatomic) NSString *preferredAddress;
@property (readonly, nonatomic) NSArray *appIdsForPasswordPrompt;
@property (readonly, nonatomic) BOOL shouldFailAllTasks;
@property (readonly, copy, nonatomic) NSData *identityPersist;
@property (nonatomic) BOOL isValidating;
@property (readonly, nonatomic) NSString *userAgentHeader;
@property (readonly, nonatomic) NSSet *serverComplianceClasses;
@property (readonly, nonatomic) NSString *serverRoot;
@property (copy, nonatomic) NSString *sourceApplicationBundleIdentifier;

+ (id)daAccountSubclassWithBackingAccountInfo:(id)a0;
+ (BOOL)shouldCreateAccountForBackingAccountInfo:(id)a0;
+ (id)oneshotListOfAccountIDs;
+ (void)reacquireClientRestrictions:(id)a0;
+ (id)_leafAccountTypes;
+ (id)_leafAccountTypes;

- (id)stateString;
- (id)additionalHeaderValues;
- (id)displayName;
- (void)tearDown;
- (void)reload;
- (id)protocolVersion;
- (BOOL)isDisabled;
- (id)syncStoreIdentifier;
- (void)shutdown;
- (void)cancelCalendarAvailabilityRequestWithID:(id)a0;
- (void)setObject:(id)a0 forKeyedSubscript:(id)a1;
- (BOOL)isEnabledForDataclass:(id)a0;
- (id)accountTypeIdentifier;
- (void)setEnabled:(BOOL)a0 forDataclass:(id)a1;
- (id)description;
- (id)dataclassProperties;
- (void).cxx_destruct;
- (BOOL)isEqualToAccount:(id)a0;
- (id)accountPropertyForKey:(id)a0;
- (id)accountsProviderWithDBHelper:(id)a0;
- (void)cancelGrantedDelegatesListRequestWithID:(id)a0;
- (void)cancelCalendarDirectorySearchWithID:(id)a0;
- (id)redactedDescription;
- (void)dealloc;
- (id)getAppleIDSession;
- (id)objectForKeyedSubscript:(id)a0;
- (void)setAccountProperty:(id)a0 forKey:(id)a1;
- (void)removeAccountPropertyForKey:(id)a0;
- (id)oauth2Token;
- (id)inboxFolder;
- (id)sentItemsFolder;
- (id)deletedItemsFolder;
- (id)draftsFolder;
- (BOOL)accountBoolPropertyForKey:(id)a0;
- (BOOL)isHotmailAccount;
- (BOOL)enabledForDADataclass:(long long)a0;
- (int)supportsMailboxSearch;
- (int)supportsEmailFlagging;
- (BOOL)reattemptInvitationLinkageForMetaData:(id)a0 inFolderWithId:(id)a1;
- (id)unactionableICSRepresentationForMetaData:(id)a0 inFolderWithId:(id)a1 outSummary:(id *)a2;
- (void)performSearchQuery:(id)a0;
- (void)cancelSearchQuery:(id)a0;
- (void)removeXpcActivity;
- (void)_refreshCredential;
- (void)resetStatusReport;
- (void)_setPersistentUUID:(id)a0;
- (void)ingestBackingAccountInfoProperties;
- (void)performUsingAccountPersona:(id /* block */)a0;
- (id)initWithBackingAccountInfo:(id)a0;
- (int)accountIntPropertyForKey:(id)a0;
- (void)setAccountIntProperty:(int)a0 forKey:(id)a1;
- (void)setAccountBoolProperty:(BOOL)a0 forKey:(id)a1;
- (id)passwordWithExpected:(BOOL)a0;
- (id)urlFromDataclassPropertiesForDataclass:(id)a0;
- (void)checkValidityOnAccountStore:(id)a0 withConsumer:(id)a1 inQueue:(id)a2;
- (void)removeFromCoreDAVLoggingDelegates;
- (void)addToCoreDAVLoggingDelegates;
- (BOOL)shouldRemoveDBSyncDataOnAccountChange;
- (id)containerProviderWithDBHelper:(id)a0;
- (BOOL)accountHasSignificantPropertyChangesWithChangeInfo:(id)a0;
- (void)_handleSignificantPropertyChanges;
- (void)removeDBSyncData;
- (void)cleanupAccountFiles;
- (id)onBehalfOfBundleIdentifier;
- (BOOL)monitorFoldersWithIDs:(id)a0;
- (BOOL)_isIdentityManagedByProfile;
- (void)setIdentityCertificatePersistentID:(id)a0 managedByProfile:(BOOL)a1;
- (void)saveAccountPropertiesWithCompletionHandler:(id /* block */)a0;
- (void)saveAccountProperties;
- (BOOL)canSaveWithAccountProvider:(id /* block */)a0;
- (id)exceptionsDict;
- (struct __CFURLStorageSession { } *)copyStorageSession;
- (BOOL)resetCertWarnings;
- (BOOL)isDelegateAccount;
- (BOOL)upgradeAccount;
- (void)resetAccountID;
- (BOOL)enabledForAnyDADataclasses:(long long)a0;
- (void)setEnabled:(BOOL)a0 forDADataclass:(long long)a1;
- (id)spinnerIdentifiers;
- (void)resumeMonitoringFoldersWithIDs:(id)a0;
- (void)suspendMonitoringFoldersWithIDs:(id)a0;
- (void)stopMonitoringFolderWithID:(id)a0;
- (void)setConsumer:(id)a0 forTask:(id)a1;
- (id)consumerForTask:(id)a0;
- (void)removeConsumerForTask:(id)a0;
- (void)clientTokenRequestedByServer;
- (id)hostFromDataclassPropertiesForDataclass:(id)a0;
- (BOOL)useSSLFromDataclassPropertiesForDataclass:(id)a0;
- (long long)portFromDataclassPropertiesForDataclass:(id)a0;
- (id)usernameWithoutDomain;
- (id)domainOnly;
- (BOOL)accountContainsEmailAddress:(id)a0;
- (void)checkValidityOnAccountStore:(id)a0 withConsumer:(id)a1;
- (BOOL)saveModifiedPropertiesOnBackingAccount;
- (void)discoverInitialPropertiesWithConsumer:(id)a0;
- (BOOL)autodiscoverAccountConfigurationWithConsumer:(id)a0;
- (void)accountDidChangeWithChangeInfo:(id)a0;
- (BOOL)handleCertificateError:(id)a0;
- (id)customConnectionProperties;
- (id)oauthInfoProvider;
- (BOOL)monitorFolderWithID:(id)a0;
- (void)stopMonitoringFoldersWithIDs:(id)a0;
- (void)stopMonitoringFolders;
- (id)defaultContainerIdentifierForDADataclass:(long long)a0;
- (void)removeClientCertificateData;
- (void)updateExistingAccountProperties;
- (id)addUsernameToURL:(id)a0;
- (BOOL)preflightSaveWithAccountProvider:(id /* block */)a0;
- (struct __CFData { } *)exceptionsForDigest:(id)a0;
- (void)setExceptions:(struct __CFData { } *)a0 forDigest:(id)a1;
- (BOOL)isActiveSyncAccount;
- (BOOL)isLDAPAccount;
- (BOOL)isCalDAVAccount;
- (BOOL)isCardDAVAccount;
- (BOOL)isCalDAVChildAccount;
- (BOOL)isGoogleAccount;
- (BOOL)isSubscribedCalendarAccount;
- (BOOL)shouldCancelTaskDueToOnPowerFetchMode;
- (void)saveXpcActivity:(id)a0;
- (BOOL)hasXpcActivity;
- (void)incrementXpcActivityContinueCount;
- (void)decrementXpcActivityContinueCount;
- (void)saveFetchingAutomaticallyState:(BOOL)a0;
- (BOOL)getFetchingAutomaticallyState;
- (BOOL)handleTrustChallenge:(id)a0;
- (BOOL)handleTrustChallenge:(id)a0 completionHandler:(id /* block */)a1;
- (void)_webLoginRequestedAtURL:(id)a0 reasonString:(id)a1 inQueue:(id)a2 completionBlock:(id /* block */)a3;
- (void)dropAssertionsAndRenewCredentialsInQueue:(id)a0 withHandler:(id /* block */)a1;
- (id)localizedIdenticalAccountFailureMessage;
- (id)localizedInvalidPasswordMessage;
- (void)webLoginRequestedAtURL:(id)a0 reasonString:(id)a1 inQueue:(id)a2 completionBlock:(id /* block */)a3;
- (void)handleValidationError:(id)a0 completion:(id /* block */)a1;
- (BOOL)accountHasSignificantPropertyChangesFromOldAccountInfo:(id)a0;
- (void)accountDidChangeFromOldAccountInfo:(id)a0;
- (id)defaultEventsFolder;
- (id)eventsFolders;
- (void)synchronizeEventsFolder:(id)a0 previousTag:(id)a1 actions:(id)a2 highestIdContext:(id)a3 isInitialUberSync:(BOOL)a4 isResyncAfterConnectionFailed:(BOOL)a5 moreLocalChangesAvailable:(BOOL)a6 consumer:(id)a7;
- (BOOL)sendEmailsForCalEvents:(id)a0 consumer:(id)a1;
- (id)beginDownloadingAttachmentWithUUID:(id)a0 consumer:(id)a1;
- (void)cancelDownloadingInstance:(id)a0 error:(id)a1;
- (id)requestCalendarAvailabilityForStartDate:(id)a0 endDate:(id)a1 ignoredEventID:(id)a2 addresses:(id)a3 consumer:(id)a4;
- (id)requestGrantedDelegatesListWithConsumer:(id)a0;
- (id)updateGrantedDelegatePermission:(id)a0 consumer:(id)a1;
- (void)cancelUpdateGrantedDelegatePermissionRequestWithID:(id)a0;
- (id)performCalendarDirectorySearchForTerms:(id)a0 recordTypes:(id)a1 resultLimit:(unsigned long long)a2 consumer:(id)a3;
- (void)performGroupExpansionForPrincipalPath:(id)a0 consumer:(id)a1;
- (id)respondToShareRequestForCalendar:(id)a0 withResponse:(long long)a1 consumer:(id)a2;
- (id)reportShareRequestAsJunkForCalendar:(id)a0 consumer:(id)a1;
- (void)cancelShareResponseInstance:(id)a0 error:(id)a1;
- (id)fetchOfficeHoursWithConsumer:(id)a0 error:(id *)a1;
- (id)setOfficeHours:(id)a0 withConsumer:(id)a1 error:(id *)a2;
- (void)cancelOfficeHoursRequestWithID:(id)a0;
- (id)defaultContactsFolder;
- (id)contactsFolders;
- (void)synchronizeContactsFolder:(id)a0 previousTag:(id)a1 previousSyncToken:(id)a2 actions:(id)a3 highestIdContext:(id)a4 isInitialUberSync:(BOOL)a5 isResyncAfterConnectionFailed:(BOOL)a6 previousTagIsSuspect:(BOOL)a7 moreLocalChangesAvailable:(BOOL)a8 consumer:(id)a9;
- (void)updateOofSettingsWithParams:(id)a0 consumer:(id)a1;
- (void)retrieveOofSettingsForConsumer:(id)a0;
- (BOOL)isOofSupported;
- (id)getPendingQueryQueue;
- (void)_reallyPerformSearchQuery:(id)a0;
- (void)_dequeueQuery;
- (void)_reallyCancelSearchQuery:(id)a0;
- (void)_reallyCancelPendingSearchQuery:(id)a0;
- (void)_reallyCancelAllSearchQueries;
- (BOOL)_reallySearchQueriesRunning;
- (void)cancelAllSearchQueries;
- (BOOL)searchQueriesRunning;
- (id)defaultToDosFolder;
- (id)toDosFolders;
- (void)synchronizeToDosFolder:(id)a0 previousTag:(id)a1 actions:(id)a2 highestIdContext:(id)a3 isInitialUberSync:(BOOL)a4 isResyncAfterConnectionFailed:(BOOL)a5 moreLocalChangesAvailable:(BOOL)a6 consumer:(id)a7;
- (int)toDosNumberOfPastDaysToSync;
- (void)setToDosNumberOfPastDaysToSync:(int)a0;
- (id)defaultNotesFolder;
- (id)notesFolders;
- (void)synchronizeNotesFolder:(id)a0 noteContext:(id)a1 previousTag:(id)a2 actions:(id)a3 changeSet:(id)a4 notesToDeleteAfterSync:(id)a5 isInitialUberSync:(BOOL)a6 isResyncAfterConnectionFailed:(BOOL)a7 moreLocalChangesAvailable:(BOOL)a8 consumer:(id)a9;

@end

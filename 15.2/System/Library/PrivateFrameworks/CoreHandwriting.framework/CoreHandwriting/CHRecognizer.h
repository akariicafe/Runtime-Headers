@class NSMutableDictionary, NSURL, NSCharacterSet, CHPatternNetwork, CHCTCRecognitionModel, CHStrokeTransitionModel, NSObject, CHCutpointModel, NSDictionary, NSMutableIndexSet, CVNLPCTCTextDecoder, NSLocale, NSString, CHDrawing, CHRecognitionInsight, CHRecognizerConfiguration, CHSpellChecker, CHPostProcessingManager, CHRecognitionInsightRequest, NSArray;
@protocol OS_dispatch_queue;

@interface CHRecognizer : NSObject <CHRecognizing> {
    CHRecognitionInsightRequest *_nextRecognitionInsightRequest;
    CHRecognitionInsight *_activeRecognitionInsight;
    NSArray *_whitelistMecabraRareCharacters;
}

@property (readonly, nonatomic) CHRecognitionInsight *recordedInsightFromLastRequest;
@property (nonatomic) struct CHNeuralNetwork { void /* function */ *x0; BOOL x1; struct CHCodeMap *x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; id x7; id x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; } *engine;
@property (nonatomic) struct CHNeuralNetwork { void /* function */ *x0; BOOL x1; struct CHCodeMap *x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; id x7; id x8; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x9; } *freeformEngine;
@property (retain, nonatomic) CHStrokeTransitionModel *strokeTransitionModel;
@property (retain, nonatomic) CHCutpointModel *cutpointModel;
@property (retain, nonatomic) CHCTCRecognitionModel *recognitionModel;
@property (retain, nonatomic) CVNLPCTCTextDecoder *textDecoder;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *recognitionQueue;
@property (nonatomic) void *radicalClusterFST;
@property (nonatomic) void *formatGrammarFST;
@property (retain, nonatomic) CHPatternNetwork *patternFST;
@property (retain, nonatomic) CHPatternNetwork *postProcessingFST;
@property (retain, nonatomic, setter=_setConfiguration:) CHRecognizerConfiguration *configuration;
@property (nonatomic) void *languageModel;
@property (nonatomic) void *lmVocabulary;
@property (nonatomic) void *characterLanguageModel;
@property (nonatomic) struct __Mecabra { } *mecabra;
@property (nonatomic) void *cjkStaticLexicon;
@property (nonatomic) void *cjkDynamicLexicon;
@property (nonatomic) struct _LXLexicon { } *staticLexicon;
@property (nonatomic) struct _LXLexicon { } *phraseLexicon;
@property (nonatomic) struct _LXLexicon { } *customLexicon;
@property (nonatomic) struct _LXLexicon { } *customPhraseLexicon;
@property (retain, nonatomic) NSDictionary *textReplacements;
@property (retain, nonatomic) NSMutableDictionary *textReplacementLowercasedKeyMapping;
@property (retain, nonatomic) CHSpellChecker *spellChecker;
@property (nonatomic) struct _CFBurstTrie { } *ovsTrie;
@property (retain, nonatomic) NSURL *learningDictionaryURL;
@property (copy, nonatomic) CHDrawing *savedDrawing;
@property (copy, nonatomic) NSString *savedTop1CandidateString;
@property (nonatomic) BOOL saveDrawingUntilNextCandidateAccepted;
@property (copy, nonatomic) CHDrawing *cachedDrawing;
@property (nonatomic) struct map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>> { struct __tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } cachedResults;
@property (nonatomic) struct map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>> { struct __tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } characterIDMap;
@property (nonatomic) struct VariantMap { int *x0; int *x1; int *x2; int x3; int *x4; unsigned long long x5; } *transliterationVariantMap;
@property (nonatomic) void **icuTransliterator;
@property (nonatomic) unsigned long long lastCharacterSegmentCount;
@property (retain, nonatomic) NSMutableIndexSet *lastCharacterSegmentIndexes;
@property (retain, nonatomic) CHPostProcessingManager *postProcessor;
@property (retain, nonatomic) CHPostProcessingManager *ovsCleanupPostProcessor;
@property (nonatomic) int recognitionMode;
@property (copy, nonatomic) NSLocale *locale;
@property (nonatomic) int recognitionType;
@property (nonatomic) BOOL enableCachingIfAvailable;
@property (nonatomic) BOOL enableGen2ModelIfAvailable;
@property (nonatomic) BOOL enableGen2CharacterLMIfAvailable;
@property (nonatomic) int contentType;
@property (nonatomic) int autoCapitalizationMode;
@property (nonatomic) int autoCorrectionMode;
@property (nonatomic) unsigned long long maxRecognitionResultCount;
@property (retain, nonatomic) NSCharacterSet *activeCharacterSet;
@property (nonatomic) struct CGSize { double width; double height; } minimumDrawingSize;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)isLocaleSupported:(id)a0 withMode:(int)a1;
+ (unsigned long long)_encodeTempDelayedSegmentID:(unsigned long long)a0;
+ (double)_computeEditPenalizationFromString:(id)a0 toReferenceString:(id)a1 withSuffix:(id)a2 withCaseSensitivity:(BOOL)a3 withFirstLetterCaseSensitivity:(BOOL)a4 withDiacriticSensitivity:(BOOL)a5 withDiacriticsCharSet:(id)a6 withConsumableStrokesCharSet:(id)a7 outputSuffix:(id *)a8 lexiconExtraCharacters:(id *)a9 firstLetterCaseFlipped:(BOOL *)a10;
+ (unsigned long long)_decodeTempDelayedSegmentID:(unsigned long long)a0;
+ (void)_updatePrecedingAndTrailingSeparatorsForTopCandidate:(id)a0 history:(id)a1 textAfter:(id)a2 locale:(id)a3 outTrailingSeparator:(id *)a4 inFirstTokenHasPrecedingSpace:(BOOL)a5 outFirstTokenHasPrecedingSpace:(BOOL *)a6;

- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (id)obfuscateString:(id)a0;
- (id)initWithMode:(int)a0 locale:(id)a1;
- (id)characterSetForStrings:(id)a0;
- (id)recognitionResultsForDrawing:(id)a0 options:(id)a1;
- (id)supportedCharacterSet;
- (void)updateMecabraWithRegionalOTAAssets:(id)a0 nonRegionalOTAAssets:(id)a1;
- (id)initWithMode:(int)a0 locale:(id)a1 learningDictionaryURL:(id)a2 recognizerOptions:(id)a3;
- (void)_reloadEngineAndResources;
- (id)initWithType:(int)a0 mode:(int)a1 locale:(struct __CFLocale { } *)a2 learningDictionaryURL:(id)a3;
- (id)_defaultPunctuationStringsOutputScores:(id *)a0 maxCandidateCount:(long long)a1;
- (BOOL)_isInappropriateString:(id)a0;
- (BOOL)_isInappropriateLexiconEntry:(struct _LXEntry { } *)a0;
- (BOOL)_isInappropriateString:(id)a0 withLexicon:(struct _LXLexicon { } *)a1;
- (BOOL)_isInappropriateString:(id)a0 withTrie:(struct _CFBurstTrie { } *)a1;
- (id)_transliterationVariantsForString:(id)a0;
- (id)_alternativeInterpretationsForString:(id)a0;
- (void)_unloadEngineAndResources;
- (id)whitelistMecabraRareCharacters;
- (void)_initializeTextDecoder;
- (void)_initializePostProcessor;
- (void)_loadMecabraIfNeeded;
- (void)logCandidateIfAppropriate:(void *)a0;
- (id)initWithType:(int)a0 mode:(int)a1 locale:(struct __CFLocale { } *)a2;
- (id)sketchDescriptionForCode:(int)a0;
- (id)sketchCodeForDescription:(id)a0;
- (unsigned long long)_effectiveMaxRecognitionResultCount;
- (id)chatBubbleCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1 rejectionResult:(id *)a2;
- (id)ellipseCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)rectangleCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)triangleCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)starCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)lineCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)heartCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)pentagonCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)outlineArrowCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1;
- (id)manhattanLineCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1 rejectionResult:(id *)a2;
- (id)cloudCandidateResultForDrawing:(id)a0 candidate:(struct CHCandidateResult { unsigned int x0; float x1; } *)a1 rejectionResult:(id *)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_initialContextRectFromRecognizerOptions:(id)a0;
- (void)_refineChineseCharacterCandidates:(void *)a0 drawing:(id)a1;
- (void)_rescoreCandidatesWithLanguageModel:(void *)a0 history:(id)a1;
- (void)_applyTransliterationAndSyntheticCandidates:(void *)a0;
- (BOOL)isRareChineseEntry:(id)a0;
- (id)_resolvedStrokeIndexes:(id)a0 segmentGroup:(id)a1 segmentOffset:(long long)a2 substrokeCount:(long long *)a3;
- (id)mecabraRareWordIndexes:(id)a0 wordRanges:(id)a1;
- (id)_textReplacementResultForLegacyRecognitionResult:(id)a0;
- (void)_removeOVSResults:(id)a0 withHistory:(id)a1;
- (double)_calculateJointWordLMScoreForString:(id)a0 wordRanges:(id)a1 wordIDs:(id)a2 patternEntries:(id)a3 history:(unsigned int *)a4 historyLength:(unsigned long long)a5;
- (id)_tokensUsingLMTokenizerForString:(id)a0 wordRanges:(id)a1 nonWordPatterns:(id)a2 outTokenIDs:(id *)a3;
- (id)tokenizedTextResultForRomanLatticePaths:(const void *)a0 history:(id)a1 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 isMultiWordsPath:(BOOL)a3 isNoSpacePath:(BOOL)a4 maximumPathCount:(unsigned long long)a5 startNode:(long long)a6 segmentGroup:(id)a7 precedingSpaceBehavior:(long long)a8 totalStrokeCount:(long long)a9 totalSubstrokeCount:(long long)a10;
- (id)tokenizedTextResultForChineseLatticePaths:(const void *)a0 maximumPathCount:(unsigned long long)a1 network:(void *)a2 mecabraIDs:(void *)a3 startNode:(long long)a4 endNode:(long long)a5 segmentGroup:(id)a6;
- (id)tokenizedTextResultForRomanNoSpaceLatticePaths:(const void *)a0 maximumResultCount:(unsigned long long)a1 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 precedingSpaceBehavior:(long long)a3 totalStrokeCount:(long long)a4 totalSubstrokeCount:(long long)a5;
- (id)tokenizedTextResultForRomanMultiWordsLatticePaths:(const void *)a0 maximumResultCount:(unsigned long long)a1 history:(id)a2 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 startNode:(long long)a4 segmentGroup:(id)a5 precedingSpaceBehavior:(long long)a6;
- (id)tokenizedTextResultForRomanSingleWordLatticePaths:(const void *)a0 history:(id)a1 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 startNode:(long long)a3 segmentGroup:(id)a4;
- (id)_lexiconCorrectionsForToken:(id)a0 withLexicon:(struct _LXLexicon { } *)a1 textReplacements:(id)a2 consumableStrokesSet:(id)a3 minimumTokenScore:(double)a4 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a5 outBestTokenScore:(double *)a6 shouldCapitalizeWord:(BOOL)a7 shouldSkipEntryCorrection:(BOOL)a8 allowFullCapsCorrections:(BOOL)a9 minimalLengthForLowConfidenceCorrections:(long long)a10 lowConfidenceThreshold:(double)a11 minimalLengthForCustomCapitalizationCorrections:(long long)a12 outBestTokenIndex:(long long *)a13 outFoundTokenInLexicon:(BOOL *)a14 outFoundCaseMatchingTokenInLexicon:(BOOL *)a15 outCorrectionFromOutOfContextEntry:(BOOL *)a16;
- (id)_applySentenceTransliterationCandidates:(unsigned short *)a0 codesLen:(int)a1 codesMax:(int)a2;
- (id)_tokenizedTextResultFromResults:(id)a0 segmentGroup:(id)a1 offsetSegment:(long long)a2 decodedStrokeSets:(BOOL)a3 spaceBehavior:(long long)a4;
- (unsigned int)_tokenIDForString:(id)a0 withLexicon:(struct _LXLexicon { } *)a1 outIsInappropriate:(BOOL *)a2;
- (id)_spellCheckerCorrectionsForToken:(id)a0;
- (BOOL)_shouldCapitalizeGivenHistory:(id)a0;
- (BOOL)_updateResults:(id)a0 string:(id)a1 score:(double)a2 recognitionScore:(double)a3 lexicalEntry:(BOOL)a4 patternEntry:(BOOL)a5 isInappropriateWord:(BOOL)a6 wordID:(unsigned int)a7 wordStrokeSet:(id)a8;
- (void)_filterNonHumanFriendlyCandidates:(id)a0;
- (void)_adjustResultsForConfusableCharacters:(id)a0;
- (id)_historyStringFromRecognizerOptions:(id)a0;
- (long long)_precedingSpaceBehaviorFromRecognizerOptions:(id)a0;
- (id)recognitionResultsForSingleCharacterDrawing:(id)a0 segmentGroup:(id)a1 options:(id)a2 history:(id)a3;
- (void)_cachingWithMatchingStrokeRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 drawing:(id)a1;
- (struct vector<long, std::allocator<long>> { long long *x0; long long *x1; struct __compressed_pair<long *, std::allocator<long>> { long long *x0; } x2; })_sortedIndexesForSegmentGroup:(id)a0 drawing:(id)a1;
- (struct Network { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; } x0; unsigned long long x1; struct vector<NetworkNode, std::allocator<NetworkNode>> { struct NetworkNode *x0; struct NetworkNode *x1; struct __compressed_pair<NetworkNode *, std::allocator<NetworkNode>> { struct NetworkNode *x0; } x2; } x2; struct set<unsigned long, std::less<unsigned long>, std::allocator<unsigned long>> { struct __tree<unsigned long, std::less<unsigned long>, std::allocator<unsigned long>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned long, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<unsigned long>> { unsigned long long x0; } x2; } x0; } x3; struct vector<NetworkEdge, std::allocator<NetworkEdge>> { struct NetworkEdge *x0; struct NetworkEdge *x1; struct __compressed_pair<NetworkEdge *, std::allocator<NetworkEdge>> { struct NetworkEdge *x0; } x2; } x4; struct vector<const NetworkEdge *, std::allocator<const NetworkEdge *>> { struct NetworkEdge **x0; struct NetworkEdge **x1; struct __compressed_pair<const NetworkEdge **, std::allocator<const NetworkEdge *>> { struct NetworkEdge **x0; } x2; } x5; struct SymbolMap { void /* function */ **x0; struct vector<std::string, std::allocator<std::string>> { void *x0; void *x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void *x0; } x2; } x1; struct map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<const std::string, unsigned long>>> { struct __tree<std::__value_type<std::string, unsigned long>, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned long>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, unsigned long>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, unsigned long>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned long>, std::less<std::string>, true>> { unsigned long long x0; } x2; } x0; } x2; } x6; BOOL x7; struct map<unsigned long, std::map<unsigned long, unsigned long>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::map<unsigned long, unsigned long>>>> { struct __tree<std::__value_type<unsigned long, std::map<unsigned long, unsigned long>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::map<unsigned long, unsigned long>>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, std::map<unsigned long, unsigned long>>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::map<unsigned long, unsigned long>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::map<unsigned long, unsigned long>>, std::less<unsigned long>, true>> { unsigned long long x0; } x2; } x0; } x8; struct set<NetworkEdgeIdentifier, std::less<NetworkEdgeIdentifier>, std::allocator<NetworkEdgeIdentifier>> { struct __tree<NetworkEdgeIdentifier, std::less<NetworkEdgeIdentifier>, std::allocator<NetworkEdgeIdentifier>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<NetworkEdgeIdentifier, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<NetworkEdgeIdentifier>> { unsigned long long x0; } x2; } x0; } x9; unsigned int *x10; unsigned long long x11; })_candidateNetworkFromSegmentationNetwork:(void *)a0 segmentGroup:(id)a1 drawing:(id)a2 boundsAtNode:(void *)a3 matchingStrokeRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 sortedSegmentIndexes:(struct vector<long, std::allocator<long>> { long long *x0; long long *x1; struct __compressed_pair<long *, std::allocator<long>> { long long *x0; } x2; })a5 shouldCancel:(id /* block */)a6;
- (id)_textResultWithNetworkComposeFromCandidateNetwork:(void *)a0 segmentGroup:(id)a1 drawing:(id)a2 maxRecognitionResultCount:(unsigned long long)a3 history:(id)a4 totalStrokeCount:(long long)a5 totalSubstrokeCount:(long long)a6;
- (id)_textResultWithLexiconExpansionFromCandidateNetwork:(void *)a0 history:(id)a1 prefix:(id)a2 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 rootStaticCursor:(struct _LXCursor { } *)a4 rootCustomCursor:(struct _LXCursor { } *)a5 rootPatternCursor:(id)a6 segmentGroup:(id)a7 maxRecognitionResultCount:(unsigned long long)a8 precedingSpaceBehavior:(long long)a9 shouldPerformNoSpaceRecognition:(BOOL)a10 inLatticePaths:(void *)a11 outLatticePaths:(void *)a12 totalStrokeCount:(long long)a13 totalSubstrokeCount:(long long)a14 shouldCancel:(id /* block */)a15;
- (void)_calculateBestTranscriptionPaths:(id *)a0 scores:(id *)a1 fromTokenizedResult:(id)a2 pathCount:(long long)a3 history:(id)a4 skipLMRescoring:(BOOL)a5;
- (id)_addAlternativeCandidatesForTokenizedResult:(id)a0;
- (id)_contextTokenIDsFromHistory:(id)a0 maxCharacterLength:(unsigned long long)a1 maxTokenCount:(unsigned long long)a2;
- (unsigned int *)_createNetworkTruncatedPrefixStringUsingPrefix:(id)a0 fullHistoryStringLength:(long long)a1 hasLexiconCursor:(BOOL)a2 prefixStringLength:(unsigned long long *)a3 hasComplexChars:(BOOL *)a4 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a5;
- (unsigned long long)_mininmumPathCount;
- (id)bestPathsFromNetwork:(void *)a0 pathCount:(unsigned long long)a1 staticLexiconCursor:(struct _LXCursor { } *)a2 customLexiconCursor:(struct _LXCursor { } *)a3 patternCursor:(id)a4 history:(id)a5 activeHistoryRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a6 mecabraIDs:(void *)a7 segmentGroup:(id)a8 precedingSpaceBehavior:(long long)a9 effectiveContentType:(int)a10 shouldAllowSpaceInsertion:(BOOL)a11 inLatticePaths:(void *)a12 outLatticePaths:(void *)a13 totalStrokeCount:(long long)a14 totalSubstrokeCount:(long long)a15;
- (void)_adjustCandidatesForConfusableCharacters:(void *)a0;
- (void)_adjustCandidatesForChinesePunctuation:(void *)a0 segmentDrawing:(id)a1 completeDrawing:(id)a2;
- (void)_adjustCandidatesForRomanPunctuation:(void *)a0 segmentDrawing:(id)a1;
- (void)_addEdgesFromCandidates:(struct vector<CHCandidateResult, std::allocator<CHCandidateResult>> { struct CHCandidateResult *x0; struct CHCandidateResult *x1; struct __compressed_pair<CHCandidateResult *, std::allocator<CHCandidateResult>> { struct CHCandidateResult *x0; } x2; })a0 toEdges:(void *)a1 referenceEdge:(const void *)a2 network:(void *)a3 consumedSegmentCount:(long long)a4 delayedSegmentIDs:(struct vector<long, std::allocator<long>> { long long *x0; long long *x1; struct __compressed_pair<long *, std::allocator<long>> { long long *x0; } x2; })a5 numSubstrokes:(long long)a6;
- (double)_candidateLatticePruningThresholdForEdgeType:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_computeLocalFrameWithLeftBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 rightBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 delayedStrokeDrawingsLocalBounds:(void *)a2 delayedStrokeDrawings:(id)a3;
- (long long)_classifyEdgeDrawingsFromContexts:(id)a0 allEdges:(void *)a1 segmentationNetwork:(void *)a2 candidateNetwork:(void *)a3 cachedEdgeSet:(void *)a4 completeDrawing:(id)a5 allowSmallerFinalBatch:(BOOL)a6 shouldCancel:(id /* block */)a7;
- (struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *x0; unsigned long long x1; unsigned long long x2; } x0; struct __short { char x0[23]; struct { unsigned char x0; } x1; } x1; struct __raw { unsigned long long x0[3]; } x2; } x0; } x0; } x0; })_stringForCode:(unsigned int)a0;
- (double)_calculateJointWordLMScoreForTokenPath:(id)a0 tokenizedResult:(id)a1 history:(unsigned int *)a2 historyLength:(unsigned long long)a3 pathTranscription:(id *)a4;
- (double)_lmRescoringWeightForPath:(id)a0;
- (id)_tokenFromLegacyResult:(id)a0 wordIndex:(unsigned long long)a1 strokeSet:(id)a2 substrokeCount:(long long)a3;
- (id)_inferenceCacheFromRecognizerOptions:(id)a0;
- (id)_activationMatrixFromInferenceCache:(id)a0 forDrawing:(id)a1 outStrokeEndings:(void *)a2;
- (struct CGPoint { double x0; double x1; })_drawingAnchorPointFromRecognizerOptions:(id)a0;
- (id)recognitionEngineCachingKey;
- (id)_tokenizedTextResultFromTextDecodingResult:(id)a0 options:(id)a1 strokeEndings:(struct vector<long, std::allocator<long>> { long long *x0; long long *x1; struct __compressed_pair<long *, std::allocator<long>> { long long *x0; } x2; })a2 drawing:(id)a3;
- (id)_textAfterFromRecognizerOptions:(id)a0;
- (struct set<long, std::less<long>, std::allocator<long>> { struct __tree<long, std::less<long>, std::allocator<long>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::less<long>> { unsigned long long x0; } x2; } x0; })_correctedDelayedStrokeIDs:(const void *)a0 inDrawing:(id)a1 segmentationPoints:(id)a2 correctedSegmentationPoints:(id *)a3;
- (id)_segmentWordRangesForSegments:(id)a0;
- (id)_recognitionResultsForMultipleCharacterDrawing:(id)a0 segmentGroups:(id)a1 options:(id)a2 shouldCancel:(id /* block */)a3;
- (id)_resultUsingNextGenerationPipelineWithDrawing:(id)a0 options:(id)a1;
- (id)_resultUsingSegmentAndDecodePipelineWithDrawing:(id)a0 insight:(id)a1 options:(id)a2 shouldCancel:(id /* block */)a3;
- (void)_initializeOVSCleanupPostProcessor;
- (void)_setupRecognitionInsightRecording;
- (BOOL)_shouldReturnDefaultResultsForDrawing:(id)a0;
- (id)_defaultPunctuationResultWithStrokeCount:(unsigned long long)a0;
- (id)_tokenizedTextRecognitionResultForDrawing:(id)a0 options:(id)a1 shouldCancel:(id /* block */)a2;
- (id)_defaultLegacyPunctuationResultsWithStrokeCount:(unsigned long long)a0;
- (id)recognitionResultsForSketchDrawing:(id)a0 options:(id)a1;
- (id)_legacyTextRecognitionResultsForDrawing:(id)a0 options:(id)a1 shouldCancel:(id /* block */)a2;
- (id)recognitionResultsForDrawing:(id)a0 options:(id)a1 shouldCancel:(id /* block */)a2;
- (void)_refineCandidates:(void *)a0 withAllowedCandidateCodes:(const void *)a1;
- (void)_penalizeCandidatesForRomanPunctuation:(void *)a0 punctuationStrokeCount:(long long)a1;
- (unsigned int)_tokenIDForUNKCharacterString:(id)a0;
- (id)initWithMode:(int)a0 locale:(id)a1 recognizerOptions:(id)a2;
- (id)initWithMode:(int)a0 locale:(id)a1 learningDictionaryURL:(id)a2;
- (id)initWithType:(int)a0 mode:(int)a1 learningDictionaryURL:(id)a2;
- (BOOL)isOVSString:(id)a0;
- (id)transliterationVariantsForString:(id)a0;
- (BOOL)_isLocaleSupported:(id)a0;
- (void)updateAddressBookLexicon:(id)a0;
- (void)updateUserDictionaryLexicon:(id)a0;
- (void)setCustomLexicon:(struct _LXLexicon { } *)a0 customVocabulary:(void *)a1;
- (void)_updateLanguageModel:(void *)a0;
- (void)candidatesCleared;
- (void)candidateAccepted:(void *)a0;
- (struct vector<const void *, std::allocator<const void *>> { void **x0; void **x1; struct __compressed_pair<const void **, std::allocator<const void *>> { void **x0; } x2; })completionsForCandidate:(id)a0 prefix:(id)a1 option:(unsigned long long)a2;
- (struct vector<const void *, std::allocator<const void *>> { void **x0; void **x1; struct __compressed_pair<const void **, std::allocator<const void *>> { void **x0; } x2; })completionsForCandidate:(id)a0 candidateContext:(id)a1 prefix:(id)a2 option:(unsigned long long)a3;
- (id)strokeIndexesForLastCharacter;
- (id)initWithType:(int)a0 mode:(int)a1;
- (id)supportedStrings;
- (void)endpointsForDrawing:(id)a0 startLocation:(struct CGPoint { double x0; double x1; } *)a1 endLocation:(struct CGPoint { double x0; double x1; } *)a2;
- (id)bestTranscriptionPathsForTokenizedResult:(id)a0 scores:(id *)a1 history:(id)a2;
- (id)_ovsCleanupRecognitionResult:(id)a0 options:(id)a1;
- (id)segmentationPointsForDrawing:(id)a0;
- (id)textRecognitionResultForDrawing:(id)a0 options:(id)a1 shouldCancel:(id /* block */)a2;
- (void)recordInsightWithRequest:(id)a0;

@end

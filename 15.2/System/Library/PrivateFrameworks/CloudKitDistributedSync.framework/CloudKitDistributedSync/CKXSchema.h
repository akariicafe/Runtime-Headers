@interface CKXSchema : NSObject {
    struct vector<unsigned long, std::allocator<unsigned long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> { unsigned long long *__value_; } __end_cap_; } structTokens;
    struct unordered_map<unsigned long, CKXStructProperties, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, CKXStructProperties>>> { struct __hash_table<std::__hash_value_type<unsigned long, CKXStructProperties>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CKXStructProperties>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CKXStructProperties>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, CKXStructProperties>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXStructProperties>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CKXStructProperties>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CKXStructProperties>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> { float __value_; } __p3_; } __table_; } structTokenToStructProperties;
    struct unordered_map<unsigned long, std::vector<unsigned long>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<unsigned long>>>> { struct __hash_table<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<unsigned long>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<unsigned long>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::vector<unsigned long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<unsigned long>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<unsigned long>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<unsigned long>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> { float __value_; } __p3_; } __table_; } structTokenToFieldTokens;
    struct unordered_map<unsigned long, CKXFieldProperties, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, CKXFieldProperties>>> { struct __hash_table<std::__hash_value_type<unsigned long, CKXFieldProperties>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CKXFieldProperties>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CKXFieldProperties>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, CKXFieldProperties>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CKXFieldProperties>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CKXFieldProperties>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CKXFieldProperties>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> { float __value_; } __p3_; } __table_; } fieldTokenToFieldProperties;
}

@property (nonatomic) unsigned long long nextIdentifier;

- (unsigned long long)valueSizeForField:(unsigned long long)a0;
- (unsigned long long)defineFieldForStruct:(unsigned long long)a0 withEncoding:(const char *)a1 optional:(BOOL)a2;
- (BOOL)valueFieldIsOptional:(unsigned long long)a0;
- (unsigned long long)referencedStructCountForStructToken:(unsigned long long)a0;
- (BOOL)fieldExists:(unsigned long long)a0;
- (unsigned long long)defineTopLevelContainerStruct;
- (long long)newIdentifier;
- (BOOL)structIsTopLevelContainer:(unsigned long long)a0;
- (unsigned long long)structForListReference:(unsigned long long)a0;
- (unsigned long long)defineStruct;
- (unsigned long long)fieldTokenAtIndex:(unsigned long long)a0 forStructToken:(unsigned long long)a1;
- (void).cxx_destruct;
- (id)init;
- (unsigned long long)structContainingField:(unsigned long long)a0;
- (unsigned long long)defineListReferenceOfType:(long long)a0 forStruct:(unsigned long long)a1;
- (long long)fieldTypeForField:(unsigned long long)a0;
- (unsigned long long)structForStructReference:(unsigned long long)a0;
- (unsigned long long)fieldTokenCountForStructToken:(unsigned long long)a0;
- (unsigned long long)referencedStructAtIndex:(unsigned long long)a0 forStructToken:(unsigned long long)a1;
- (long long)listTypeForField:(unsigned long long)a0;
- (unsigned long long)defineStructReferenceToType:(unsigned long long)a0 forStruct:(unsigned long long)a1;
- (id).cxx_construct;
- (long long)valueTypeForField:(unsigned long long)a0;
- (unsigned long long)defineListReferenceToStructType:(unsigned long long)a0 forStruct:(unsigned long long)a1;

@end

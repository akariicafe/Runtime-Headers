@class NSString, NSArray, NSMutableDictionary, NSObject, NSMutableArray;
@protocol TTSSpeechSynthesizerDelegate, OS_dispatch_queue;

@interface TTSSpeechSynthesizer : NSObject <TTSSpeechConnectionDelegate> {
    long long _footprint;
    id<TTSSpeechSynthesizerDelegate> _delegate;
    BOOL _useSharedSession;
    BOOL _audioSessionIDIsValid;
    BOOL _useMonarchStyleRate;
    NSMutableDictionary *_channels;
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableArray *_currentRequestOwners;
    NSMutableArray *_speechRequests;
    struct { unsigned char delegateStartWithRequest : 1; unsigned char delegateFinishWithRequest : 1; unsigned char delegateFinishWithPhonemesSpokenWithRequest : 1; unsigned char delegatePauseWithRequest : 1; unsigned char delegateContinueWithRequest : 1; unsigned char delegateWillSpeakWithRequest : 1; unsigned char delegateSynthesizedSilentlyURL : 1; unsigned char willUseInput : 1; } _synthesizerFlags;
    unsigned long long _synthesizerInstanceID;
    NSArray *_outputChannels;
    NSMutableDictionary *_testingLastRuleConversion;
}

@property (weak, nonatomic) id<TTSSpeechSynthesizerDelegate> delegate;
@property (nonatomic) float rate;
@property (nonatomic) float pitch;
@property (nonatomic) float volume;
@property (retain, nonatomic) NSString *voiceIdentifier;
@property (retain, nonatomic) NSString *bundleIdentifier;
@property (readonly, nonatomic) NSString *resolvedVoiceIdentifier;
@property (nonatomic) unsigned long long requestClientIdentifier;
@property (nonatomic) void *speakingRequestClientContext;
@property (nonatomic) BOOL supportsAccurateWordCallbacks;
@property (nonatomic) BOOL skipLuthorRules;
@property (nonatomic) unsigned int audioQueueFlags;
@property (readonly, nonatomic) unsigned int audioSessionID;
@property (copy, nonatomic) NSArray *userSubstitutions;
@property (copy, nonatomic) NSArray *phonemeSubstitutions;
@property (copy, nonatomic) id /* block */ audioBufferCallback;
@property (retain, nonatomic) NSArray *outputChannels;
@property (nonatomic) BOOL ignoreSubstitutions;
@property (nonatomic) BOOL synthesizeSilently;

+ (void)initialize;
+ (id)voiceAssetsForTesting;
+ (id)speechMarkupStringForType:(long long)a0 forIdentifier:(id)a1 string:(id)a2;
+ (id)audioFileSettingsForVoice:(id)a0;
+ (void)testingSetAllVoices:(id)a0;
+ (id)allAvailableVoices;
+ (id)_speechVoiceForIdentifier:(id)a0 language:(id)a1 footprint:(long long)a2;
+ (id)supportedIPAPhonemeLanguages;
+ (id)voiceForIdentifier:(id)a0;
+ (id)availableLanguageCodes;
+ (void)setSpeechJobStartedUnitTestBlock:(id /* block */)a0;
+ (void)_initializeServers;
+ (id)_speechVoiceForIdentifier:(id)a0 language:(id)a1 footprint:(long long)a2 useFallbackDefault:(BOOL)a3;
+ (id)voiceAccessQueue;
+ (id)availableVoices;
+ (void)setVoiceAssetsForTesting:(id)a0;
+ (BOOL)employSpeechMarkupForType:(long long)a0 identifier:(id)a1 withLanguage:(id)a2;
+ (id)refreshAllAvailableVoices:(BOOL)a0;
+ (id)refreshAllAvailableVoices;
+ (void)setTestingAvailableVoicesForLanguageCode:(id)a0;
+ (void)setSpeechJobFinishedUnitTestBlock:(id /* block */)a0;
+ (id)availableVoicesForLanguageCode:(id)a0 queryingMobileAssets:(BOOL)a1;
+ (id)synthesizerForSynthesizerID:(unsigned long long)a0;
+ (BOOL)isSystemVoice:(id)a0;
+ (id)remapVoiceIdentifier:(id)a0;

- (long long)footprint;
- (void)_setDelegate:(id)a0;
- (void)connection:(id)a0 speechRequest:(id)a1 didStopAtEnd:(BOOL)a2 phonemesSpoken:(id)a3 error:(id)a4;
- (id)speechString;
- (void)useSpecificAudioSession:(unsigned int)a0;
- (BOOL)stopSpeakingAtNextBoundary:(long long)a0 synchronously:(BOOL)a1 error:(id *)a2;
- (void)setFootprint:(long long)a0;
- (BOOL)isSpeaking;
- (void)connection:(id)a0 speechRequest:(id)a1 willSpeakMark:(long long)a2 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3;
- (void)setDelegate:(id)a0;
- (void)connection:(id)a0 speechRequestDidPause:(id)a1;
- (BOOL)pauseSpeakingAtNextBoundary:(long long)a0 synchronously:(BOOL)a1 error:(id *)a2;
- (float)minimumRate;
- (void).cxx_destruct;
- (void)connection:(id)a0 speechRequestDidStart:(id)a1;
- (id)init;
- (float)maximumRate;
- (id)delegate;
- (void)connection:(id)a0 speechRequestDidContinue:(id)a1;
- (BOOL)continueSpeakingWithError:(id *)a0;
- (void)dealloc;
- (BOOL)useMonarchStyleRate;
- (void)setUseMonarchStyleRate:(BOOL)a0;
- (unsigned long long)synthesizerInstanceID;
- (void)_mediaServicesDied;
- (BOOL)_stopSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 synchronously:(BOOL)a2 error:(id *)a3;
- (BOOL)_substitutionLanguageMatchesSpecialCase:(id)a0 withLanguage:(id)a1;
- (BOOL)_skipSubstition:(id)a0 language:(id)a1 bundleIdentifier:(id)a2 voice:(id)a3;
- (id)_determineSubstitution:(id)a0 text:(id)a1 wordRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 request:(id)a3;
- (id)_preprocessText:(id)a0 languageCode:(id)a1;
- (void)_processUserSubstitutions:(id)a0 toText:(id)a1 request:(id)a2 bundleIdentifier:(id)a3 voice:(id)a4;
- (BOOL)startSpeakingString:(id)a0 toURL:(id)a1 withLanguageCode:(id)a2 error:(id *)a3;
- (BOOL)_startSpeakingString:(id)a0 orAttributedString:(id)a1 toURL:(id)a2 withLanguageCode:(id)a3 request:(id *)a4 error:(id *)a5;
- (BOOL)_pauseSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 synchronously:(BOOL)a2 error:(id *)a3;
- (BOOL)_continueSpeakingRequest:(id)a0 withError:(id *)a1;
- (void)connection:(id)a0 speechRequest:(id)a1 didSynthesizeSilentlyToURL:(id)a2;
- (id)testingLastRuleConversion;
- (void)testingSetLastRuleConversion:(id)a0 replacement:(id)a1;
- (id)resolvedVoiceIdentifierForLanguageCode:(id)a0;
- (BOOL)startSpeakingString:(id)a0 error:(id *)a1;
- (BOOL)startSpeakingString:(id)a0 toURL:(id)a1 error:(id *)a2;
- (BOOL)startSpeakingString:(id)a0 withLanguageCode:(id)a1 error:(id *)a2;
- (BOOL)stopSpeakingAtNextBoundary:(long long)a0 error:(id *)a1;
- (BOOL)pauseSpeakingAtNextBoundary:(long long)a0 error:(id *)a1;
- (void)useAudioQueueFlags:(unsigned int)a0;
- (BOOL)startSpeakingString:(id)a0 request:(id *)a1 error:(id *)a2;
- (BOOL)startSpeakingString:(id)a0 withLanguageCode:(id)a1 request:(id *)a2 error:(id *)a3;
- (BOOL)startSpeakingString:(id)a0 toURL:(id)a1 withLanguageCode:(id)a2 request:(id *)a3 error:(id *)a4;
- (BOOL)stopSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 error:(id *)a2;
- (BOOL)stopSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 synchronously:(BOOL)a2 error:(id *)a3;
- (BOOL)pauseSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 error:(id *)a2;
- (BOOL)pauseSpeakingRequest:(id)a0 atNextBoundary:(long long)a1 synchronously:(BOOL)a2 error:(id *)a3;
- (BOOL)continueSpeakingRequest:(id)a0 withError:(id *)a1;

@end

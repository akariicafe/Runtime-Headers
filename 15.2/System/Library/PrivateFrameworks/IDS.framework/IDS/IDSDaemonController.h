@class NSString, IMRemoteObject, NSProtocolChecker, IDSDaemonControllerForwarder, NSMutableDictionary, NSSet, IDSDaemonListener, NSObject, IMLocalObject, NSMutableSet;
@protocol OS_dispatch_queue, OS_dispatch_group, IDSDaemonProtocol;

@interface IDSDaemonController : NSObject <IDSDaemonProtocol> {
    IDSDaemonControllerForwarder *_forwarder;
    IMLocalObject *_localObject;
    NSProtocolChecker *_protocol;
    NSObject<OS_dispatch_queue> *_ivarQueue;
    NSObject<OS_dispatch_group> *_daemonConnectedGroup;
    unsigned long long _connectionID;
    NSMutableDictionary *_listenerServices;
    NSSet *_services;
    NSSet *_cachedServices;
    NSMutableDictionary *_listenerCommands;
    NSSet *_commands;
    NSSet *_cachedCommands;
    NSMutableDictionary *_listenerCapabilities;
    unsigned int _cachedCapabilities;
    unsigned int _lastUpdateCaps;
    BOOL _hasCheckedForDaemon;
    BOOL _preventReconnect;
    BOOL _acquiringDaemonConnection;
    BOOL _hasBeenSuspended;
    BOOL _fatalErrorOccured;
    NSMutableSet *_notificationServices;
}

@property (setter=_setAutoReconnect:) BOOL _autoReconnect;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *_remoteMessageQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *connectingQueue;
@property (weak, nonatomic) id delegate;
@property (readonly, nonatomic) BOOL isConnecting;
@property (retain, nonatomic) IMRemoteObject<IDSDaemonProtocol> *remoteObject;
@property (readonly, nonatomic) NSString *listenerID;
@property (readonly, nonatomic) IDSDaemonListener *listener;
@property (nonatomic) int curXPCMessagePriority;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedInstance;
+ (void)_blockUntilSendQueueIsEmpty;
+ (void)_setApplicationWillTerminate;
+ (BOOL)_applicationWillTerminate;

- (void)_performBlock:(id /* block */)a0;
- (unsigned int)capabilitiesForListenerID:(id)a0;
- (void)_localObjectCleanup;
- (void)_blockUntilSendQueueIsEmpty;
- (void)_remoteObjectCleanup;
- (void)setQueryContext:(id)a0;
- (void)_disconnectFromDaemonWithForce:(BOOL)a0;
- (BOOL)_makeConnectionWithLaunch:(BOOL)a0 completionBlock:(id /* block */)a1;
- (void)systemApplicationDidResume;
- (void)remoteObjectDiedNotification:(id)a0;
- (void)_handleDaemonException:(id)a0;
- (void)systemApplicationDidEnterBackground;
- (void)systemApplicationDidSuspend;
- (BOOL)remoteObjectExists;
- (void)_agentDidLaunchNotification:(id)a0;
- (BOOL)hasListenerForID:(id)a0;
- (void)disconnectFromDaemon;
- (void)removeListenerID:(id)a0;
- (BOOL)_setCapabilities:(unsigned int)a0;
- (void)blockUntilConnected;
- (BOOL)connectToDaemonWithLaunch:(BOOL)a0;
- (void)unsetQueryContext:(id)a0;
- (void)_noteSetupComplete;
- (BOOL)localObjectExists;
- (void)systemApplicationWillEnterForeground;
- (BOOL)connectToDaemon;
- (void)_listenerSetUpdated;
- (void)localObjectDiedNotification:(id)a0;
- (unsigned int)capabilities;
- (BOOL)consumeQueryContext:(id)a0;
- (void)sendQueryWithReply:(BOOL)a0 query:(id /* block */)a1;
- (void)_setServices:(id)a0 commands:(id)a1 capabilities:(unsigned int)a2;
- (id)forwardingTargetForSelector:(SEL)a0;
- (id)servicesForListenerID:(id)a0;
- (BOOL)_setCommands:(id)a0;
- (void)addedDelegateForService:(id)a0 withCompletion:(id /* block */)a1;
- (void)_connectToDaemonWithLaunch:(BOOL)a0 services:(id)a1 commands:(id)a2 capabilities:(unsigned int)a3;
- (void)_noteDisconnected;
- (BOOL)setServices:(id)a0 forListenerID:(id)a1;
- (void).cxx_destruct;
- (id)commands;
- (id)init;
- (BOOL)_setServices:(id)a0;
- (BOOL)setCapabilities:(unsigned int)a0 forListenerID:(id)a1 shouldLog:(BOOL)a2;
- (BOOL)addListenerID:(id)a0 services:(id)a1 commands:(id)a2;
- (BOOL)addListenerID:(id)a0 services:(id)a1;
- (id)forwarderWithCompletion:(id /* block */)a0;
- (BOOL)isConnected;
- (id)services;
- (BOOL)connectToDaemonWithLaunch:(BOOL)a0 services:(id)a1 commands:(id)a2 capabilities:(unsigned int)a3;
- (void)dealloc;
- (void)_performBlock:(id /* block */)a0 wait:(BOOL)a1;
- (BOOL)setCommands:(id)a0 forListenerID:(id)a1;
- (id)commandsForListenerID:(id)a0;
- (id)localObject;
- (void)sendXPCObject:(id)a0 objectContext:(id)a1;

@end

@class HMDHAPAccessory, HMDAccessoryFirmwareUpdateManager, HMDAccessoryFirmwareUpdateConcurrencyLogEventManager, UARPAssetID, HMFTimer, NSString, UARPAccessory, NSObject, HMDAccessoryFirmwareUpdateScheduler, HMFSoftwareVersion, HMFUnfairLock;
@protocol OS_dispatch_queue, HMDAccessoryFirmwareUpdateSessionWingman, HMDDataStreamSocket;

@interface HMDAccessoryFirmwareUpdateSession : HMFObject <HMDDataStreamSocketDelegate, HMFTimerDelegate, UARPControllerDelegateProtocol, HMFLogging>

@property (readonly, weak) HMDAccessoryFirmwareUpdateManager *accessoryFirmwareUpdateManager;
@property (readonly, weak) HMDAccessoryFirmwareUpdateConcurrencyLogEventManager *logEventManager;
@property (readonly) id<HMDAccessoryFirmwareUpdateSessionWingman> wingman;
@property (readonly) UARPAccessory *uarpAccessory;
@property (retain) UARPAssetID *assetID;
@property (readonly) NSObject<OS_dispatch_queue> *workQueue;
@property (retain, nonatomic) id<HMDDataStreamSocket> dataStreamSocket;
@property (nonatomic) BOOL dataStreamOpenInProgress;
@property (readonly) HMFUnfairLock *lock;
@property (nonatomic) unsigned long long internalState;
@property (retain, nonatomic) HMDAccessoryFirmwareUpdateScheduler *updateScheduler;
@property (retain, nonatomic) HMFTimer *allowedApplyDurationTimer;
@property (retain, nonatomic) HMFTimer *expectedApplyDurationTimer;
@property (retain, nonatomic) HMFTimer *queryFirmwareUpdateResultDurationTimer;
@property (retain, nonatomic) HMFTimer *registerFailureRetryTimer;
@property (retain, nonatomic) HMFTimer *socketIdleTimer;
@property BOOL sessionEnded;
@property BOOL assetOfferedForCurrentDataStream;
@property (readonly, getter=isFirmwareVersionUpToDate) BOOL firmwareVersionUpToDate;
@property (readonly, getter=isCurrentUpdateLatest) BOOL currentUpdateLatest;
@property (readonly, getter=isCurrentlyStaging) BOOL currentlyStaging;
@property (nonatomic) unsigned long long currentAutomaticApplyRetriesCount;
@property (nonatomic) unsigned long long currentCommunicationErrorCount;
@property (retain, nonatomic) HMFSoftwareVersion *lastStagedVersion;
@property (readonly, nonatomic) HMFSoftwareVersion *accessoryVersion;
@property (readonly, nonatomic) unsigned long long sessionState;
@property (readonly, nonatomic, getter=isUserInitiatedStaging) BOOL userInitiatedStaging;
@property (readonly, nonatomic, getter=isUserInitiatedInstall) BOOL userInitiatedInstall;
@property (retain, nonatomic) NSString *documentationPath;
@property (nonatomic) unsigned long long applyHDSRetryCount;
@property (readonly, nonatomic) double expectedApplyDuration;
@property (readonly, nonatomic) double allowedApplyDuration;
@property (nonatomic) unsigned long long currentRegisterFailureCount;
@property (copy) id /* block */ registerFailureRetryTimerFactory;
@property (readonly, weak, nonatomic) HMDHAPAccessory *hapAccessory;
@property (readonly, getter=isReadyForStaging) BOOL readyForStaging;
@property (readonly, getter=isReadyToApplyUpdate) BOOL readyToApplyUpdate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)logCategory;
+ (id)__calculateDigestDataFromFile:(id)a0 maxDataSize:(unsigned long long)a1 error:(id *)a2;

- (void)_endSession;
- (void)configure;
- (void)_register;
- (void)timerDidFire:(id)a0;
- (void)firmwareStagingProgress:(id)a0 assetID:(id)a1 bytesSent:(unsigned long long)a2 bytesTotal:(unsigned long long)a3;
- (void)firmwareUpdateResult:(id)a0 vendorSpecificStatus:(unsigned int)a1 error:(id)a2;
- (id)privateDescription;
- (id)logIdentifier;
- (void)_schedule;
- (void).cxx_destruct;
- (id)init;
- (void)pause;
- (void)firmwareStagingComplete:(id)a0 assetID:(id)a1 withStatus:(unsigned long long)a2;
- (void)socketDidClose:(id)a0;
- (void)dealloc;
- (void)assetAvailablityUpdateForAccessoryID:(id)a0 assetID:(id)a1;
- (void)stagedFirmwareRescindComplete:(id)a0 withStatus:(unsigned long long)a1;
- (BOOL)documentationAvailable;
- (BOOL)startManualUpdate:(id)a0 error:(id *)a1;
- (void)socketDidReceiveData:(id)a0;
- (void)socket:(id)a0 didFailWithError:(id)a1;
- (void)_logDebugStates:(const char *)a0;
- (void)updateAvailableSoftwareUpdateState:(long long)a0;
- (BOOL)sendMessageToAccessory:(id)a0 uarpMsg:(id)a1 error:(id *)a2;
- (id)initWithHAPAccessory:(id)a0 uarpAccessory:(id)a1 accessoryFirmwareUpdateManager:(id)a2 logEventManager:(id)a3;
- (id)initWithHAPAccessory:(id)a0 uarpAccessory:(id)a1 accessoryFirmwareUpdateManager:(id)a2 logEventManager:(id)a3 wingman:(id)a4;
- (void)setUserInitiatedStaging:(BOOL)a0;
- (void)setUserInitiatedInstall:(BOOL)a0;
- (void)resumeWithState:(unsigned long long)a0;
- (void)_startSocketIdleTimer;
- (void)_resetSocketIdleTimer;
- (void)_cancelSocketIdleTimer;
- (void)_handleSocketTimeout;
- (void)_cancelQueryFirmwareUpdateResultTimer;
- (void)_handleQueryFirmwareUpdateResultTimeout;
- (void)_cancelRegisterFailureRetryTimer;
- (void)_handleRegisterFailureRetryTimeout;
- (void)_withOpenSocketDoBlock:(id /* block */)a0 error:(id /* block */)a1;
- (void)_syncStateWithAccessoryOnResume;
- (void)_evaluateHDSRetryForApplyFirmware;
- (BOOL)isStagedFirmwareVersionUpToDate;
- (BOOL)isCurrentlyApplying;
- (unsigned long long)nextStateToSchedule;
- (void)stageFirmware;
- (void)stagingComplete;
- (void)applyFirmware;
- (void)_applyFirmware;
- (double)_allowedApplyDuration;
- (double)_expectedApplyDuration;
- (void)_handleAutomaticUpdateEnabledChanged:(id)a0;
- (void)_automaticUpdateEnabledChanged:(BOOL)a0;
- (void)_stagingFailed;
- (void)_applyFailed;
- (void)_cancelApplyTimer;
- (void)handleAccessoryFirmwareVersionChangedNotification:(id)a0;
- (void)updateAccessoryFirmwareVersion;
- (void)handleStagedFirmwareVersionChangedNotification:(id)a0;
- (void)updateAccessoryStagedFirmwareVersion;
- (void)handleFirmwareUpdateStateChangedNotification:(id)a0;
- (void)handleNotReadyReasonsChanged:(id)a0;
- (void)_updateSoftwareUpdateNotReadyReasons;
- (void)updateAvailableSoftwareUpdate;
- (void)_updateAvailableSoftwareUpdate;
- (void)_resetAvailableSoftwareUpdate;
- (void)_updateAvailableSoftwareUpdateState:(long long)a0;
- (void)_updateAvailableSoftwareUpdateDocumentation;
- (id)newSoftwareUpdateWithState:(long long)a0;
- (id)newDocumentationMetadata;
- (void)registerAccessory;
- (void)unregisterAccessory;
- (void)_logApplyEventWithStatus:(long long)a0;
- (void)_verifyUpdateComplete;
- (void)_handleApplyTimerFired;
- (void)logDebugStates;
- (void)rescindStagedAsset:(id /* block */)a0;

@end

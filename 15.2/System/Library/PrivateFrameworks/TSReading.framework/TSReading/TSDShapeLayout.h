@class TSDInfoGeometry, TSDPathSource, TSDBezierPath, TSDMutableStroke, TSDFill, TSDEditableBezierPathSource;

@interface TSDShapeLayout : TSDStyledLayout {
    struct { unsigned char path : 1; unsigned char pathBounds : 1; unsigned char pathBoundsWithoutStroke : 1; unsigned char pathIsOpen : 1; unsigned char pathIsLineSegment : 1; unsigned char alignmentFrame : 1; unsigned char headAndTail : 1; unsigned char headLineEnd : 1; unsigned char tailLineEnd : 1; unsigned char clippedPath : 1; } mShapeInvalidFlags;
    TSDBezierPath *mCachedPath;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCachedPathBounds;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCachedPathBoundsWithoutStroke;
    BOOL mCachedPathIsOpen;
    BOOL mCachedPathIsLineSegment;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } mCachedAlignmentFrame;
    struct CGPoint { double x; double y; } mHeadPoint;
    struct CGPoint { double x; double y; } mTailPoint;
    struct CGPoint { double x; double y; } mHeadLineEndPoint;
    struct CGPoint { double x; double y; } mTailLineEndPoint;
    double mHeadLineEndAngle;
    double mTailLineEndAngle;
    long long mHeadCutSegment;
    long long mTailCutSegment;
    double mHeadCutT;
    double mTailCutT;
    TSDBezierPath *mCachedClippedPath;
    TSDPathSource *mShrunkenPathSource;
    TSDEditableBezierPathSource *mCachedEditableBezierPathSource;
    TSDPathSource *mCachedPathSource;
    TSDPathSource *mResizePathSource;
    TSDInfoGeometry *mResizeInfoGeometry;
    TSDInfoGeometry *mInitialInfoGeometry;
    TSDPathSource *mProvidedPathSource;
    TSDMutableStroke *mDynamicStroke;
}

@property (readonly, nonatomic) TSDFill *fill;
@property (retain, nonatomic) TSDFill *dynamicFill;

- (id)initWithInfo:(id)a0;
- (id)stroke;
- (BOOL)isInvisible;
- (struct CGSize { double x0; double x1; })minimumSize;
- (void)invalidatePath;
- (id)path;
- (void)dealloc;
- (void)setGeometry:(id)a0;
- (BOOL)supportsRotation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pathBounds;
- (void)invalidateFrame;
- (id)computeLayoutGeometry;
- (id)layoutGeometryFromInfo;
- (id)i_computeWrapPath;
- (void)processChangedProperty:(int)a0;
- (BOOL)isBeingManipulated;
- (id)i_computeWrapPathClosed:(BOOL)a0;
- (id)clippedPathForLineEnds;
- (id)strokeHeadLineEnd;
- (id)strokeTailLineEnd;
- (struct CGPoint { double x0; double x1; })headLineEndPoint;
- (struct CGPoint { double x0; double x1; })tailLineEndPoint;
- (double)headLineEndAngle;
- (double)tailLineEndAngle;
- (double)lineEndScale;
- (void)p_validateHeadLineEnd;
- (void)p_validateTailLineEnd;
- (void)p_invalidateClippedPath;
- (void)p_validateHeadAndTail;
- (void)p_computeAngle:(double *)a0 point:(struct CGPoint { double x0; double x1; } *)a1 cutSegment:(long long *)a2 cutT:(double *)a3 forLineEndAtHead:(BOOL)a4;
- (void)p_invalidateHead;
- (void)p_invalidateTail;
- (void)beginDynamicOperation;
- (void)endDynamicOperation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForStandardKnobs;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrame;
- (BOOL)shouldBeDisplayedInShowMode;
- (BOOL)isStrokeBeingManipulated;
- (void)dynamicStrokeWidthChangeDidBegin;
- (void)dynamicStrokeWidthUpdateToValue:(double)a0;
- (void)dynamicStrokeWidthChangeDidEnd;
- (id)initialInfoGeometry;
- (struct CGPoint { double x0; double x1; })centerForConnecting;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })alignmentFrameInRoot;
- (BOOL)supportsResize;
- (void)setControlKnobPosition:(unsigned long long)a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
- (struct CGPoint { double x0; double x1; })getControlKnobPosition:(unsigned long long)a0;
- (unsigned long long)numberOfControlKnobs;
- (id)pathSource;
- (id)shapeInfo;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })shapeFrameWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0;
- (void)aliasPathForScale:(double)a0 adjustedStroke:(id *)a1 adjustedPath:(id *)a2 startDelta:(struct CGPoint { double x0; double x1; } *)a3 endDelta:(struct CGPoint { double x0; double x1; } *)a4;
- (BOOL)pathIsOpen;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })pathBoundsWithoutStroke;
- (BOOL)pathIsLineSegment;
- (struct CGPoint { double x0; double x1; })headPoint;
- (struct CGPoint { double x0; double x1; })tailPoint;
- (id)editablePathSource;
- (void)invalidatePathBounds;
- (id)layoutInfoGeometry;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })computeLayoutTransform;
- (id)p_cachedPath;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_cachedPathBounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_cachedPathBoundsWithoutStroke;
- (BOOL)p_cachedPathIsOpen;
- (BOOL)p_cachedPathIsLineSegment;
- (id)p_createClippedPath;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_boundsOfLineEndForHead:(BOOL)a0 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1;
- (BOOL)isInvisibleAutosizingShape;
- (void)aliasPathForScale:(double)a0 originalStroke:(id)a1 adjustedStroke:(id *)a2 adjustedPath:(id *)a3 startDelta:(struct CGPoint { double x0; double x1; } *)a4 endDelta:(struct CGPoint { double x0; double x1; } *)a5;
- (id)p_unitePath:(id)a0 withLineEndForHead:(BOOL)a1 stroke:(id)a2;
- (id)smartPathSource;
- (BOOL)isTailEndOnLeft;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })aliasedAlignmentFrameForScale:(double)a0;
- (BOOL)canBeIntersected;
- (BOOL)canResetTextAndObjectHandles;
- (struct CGPoint { double x0; double x1; })unclippedHeadPoint;
- (struct CGPoint { double x0; double x1; })unclippedTailPoint;
- (void)p_updateResizeInfoGeometryFromResizePathSource;

@end

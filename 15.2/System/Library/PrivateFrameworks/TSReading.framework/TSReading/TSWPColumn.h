@class NSString, TSWPStorage;
@protocol TSWPStyleProvider;

@interface TSWPColumn : NSObject <TSWPOffscreenColumn> {
    struct shared_ptr<TSWPLineFragmentArray> { struct TSWPLineFragmentArray *__ptr_; struct __shared_weak_count *__cntrl_; } _lineFragmentArray;
    void *_paragraphAdornments;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } wpBounds;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transformFromWP;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformToWP;
@property (nonatomic) unsigned long long startCharIndex;
@property (nonatomic) unsigned long long characterCount;
@property (nonatomic) unsigned long long startAnchoredCharIndex;
@property (nonatomic) unsigned long long anchoredCharCount;
@property (nonatomic) unsigned long long nextWidowPullsDownFromCharIndex;
@property (nonatomic) double contentBottom;
@property (nonatomic) double erasableContentBottom;
@property (nonatomic) int layoutResultFlags;
@property (nonatomic) unsigned long long columnIndex;
@property (nonatomic) unsigned long long pageNumber;
@property (nonatomic) unsigned long long scaleTextPercent;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } anchoredRange;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } range;
@property (retain, nonatomic) id<TSWPStyleProvider> styleProvider;
@property (nonatomic) BOOL textIsVertical;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frameBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } typographicBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } typographicBoundsForCell;
@property (readonly, nonatomic) TSWPStorage *storage;
@property (readonly, nonatomic) unsigned long long countLines;
@property (readonly, nonatomic) double textBottom;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(id)a0 withColumns:(id)a1;
+ (id)closestColumnInColumnsArray:(id)a0 forPoint:(struct CGPoint { double x0; double x1; })a1 ignoreEmptyColumns:(BOOL)a2 ignoreDrawableOnlyColumns:(BOOL)a3;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForInsertionPoint:(id)a0 withColumns:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(id)a0 withColumns:(id)a1 useParagraphModeRects:(BOOL)a2;
+ (id)columnForCharIndex:(unsigned long long)a0 eol:(BOOL)a1 withColumns:(id)a2;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inColumnsArray:(id)a1 allowPastBreak:(BOOL)a2 allowNotFound:(BOOL)a3 pastCenterGoesToNextChar:(BOOL)a4 isAtEndOfLine:(BOOL *)a5 leadingEdge:(BOOL *)a6;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inColumnsArray:(id)a1 allowPastBreak:(BOOL)a2 allowNotFound:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 leadingEdge:(BOOL *)a5;
+ (unsigned long long)charIndexForTopicDragAtPoint:(struct CGPoint { double x0; double x1; })a0 inColumnsArray:(id)a1;
+ (id)smartFieldWithAttributeKind:(unsigned int)a0 inColumnArray:(id)a1 atPoint:(struct CGPoint { double x0; double x1; })a2;
+ (id)footnoteMarkAttachmentInColumnArray:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
+ (id)footnoteReferenceAttachmentInColumnArray:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
+ (id)pathForHighlightWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 columnArray:(id)a1 pathStyle:(int)a2;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsRectForSelection:(id)a0 columnArray:(id)a1 includeRuby:(BOOL)a2;
+ (struct CGColor { } *)computeSingleColorWithColumns:(id)a0;

- (struct CGSize { double x0; double x1; })maxSize;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (double)textHeight;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsOfLineFragmentAtIndex:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfLineFragmentAtIndex:(unsigned long long)a0;
- (id)rectsForSelection:(id)a0;
- (unsigned long long)lineIndexForCharIndex:(unsigned long long)a0 eol:(BOOL)a1;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })glyphRectForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 includingLabel:(BOOL)a1;
- (double)topOfLineAtCharIndex:(unsigned long long)a0;
- (struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; double x1; double x2; double x3; double x4; })lineMetricsAtCharIndex:(unsigned long long)a0 allowEndOfLine:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })columnRectForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setStorage:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (unsigned long long)charIndexForSelectionFromPoint:(struct CGPoint { double x0; double x1; })a0 isTail:(BOOL)a1;
- (const void *)lineFragmentForCharIndex:(unsigned long long)a0 knobTag:(unsigned long long)a1 selectionType:(int)a2;
- (const void *)lineFragmentClosestToPoint:(struct CGPoint { double x0; double x1; })a0 knobTag:(unsigned long long)a1;
- (double)baselineOfLineFragmentAtCharIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })erasableBounds:(unsigned int)a0;
- (void)trimFromCharIndex:(unsigned long long)a0 inTarget:(id)a1 layoutChore:(void *)a2;
- (double)trimToCharIndex:(unsigned long long)a0 inTarget:(id)a1;
- (const void *)lineFragmentArray;
- (id)initWithStorage:(id)a0 frameBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (const void *)lineFragmentAtIndex:(unsigned long long)a0;
- (void)trimToCharIndex:(unsigned long long)a0 inTarget:(id)a1 removeAutoNumberFootnoteCount:(unsigned long long)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForSelection:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForSelection:(id)a0 includeSpaceAfter:(BOOL)a1 includeSpaceBefore:(BOOL)a2 includeLeading:(BOOL)a3;
- (id)rectsForSelection:(id)a0 ranges:(id *)a1;
- (void)renderWithRenderer:(id)a0 currentSelection:(id)a1 limitSelection:(id)a2 listRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 rubyGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 isCanvasInteractive:(BOOL)a5 spellChecker:(id)a6 suppressedMisspellingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a7 blackAndWhite:(BOOL)a8 dictationInterpretations:(const void *)a9 autocorrections:(const void *)a10 markedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a11 markedText:(id)a12 renderMode:(int)a13 pageCount:(unsigned long long)a14 suppressInvisibles:(BOOL)a15 currentCanvasSelection:(id)a16;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 pastCenterGoesToNextChar:(BOOL)a2 allowNotFound:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 leadingEdge:(BOOL *)a5;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 pastCenterGoesToNextChar:(BOOL)a2 allowNotFound:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 outFragment:(const struct TSWPLineFragment **)a5 leadingEdge:(BOOL *)a6;
- (id)smartFieldAtCharIndex:(unsigned long long)a0 attributeKind:(unsigned int)a1;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1 forParagraphMode:(BOOL)a2 includeRuby:(BOOL)a3;
- (void)clearAdornments;
- (double)logicalBoundsTop;
- (void)offsetLineFragmentsByPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)pMutableRectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1 includeSpaceAfter:(BOOL)a2 includeSpaceBefore:(BOOL)a3 includeLeading:(BOOL)a4 forParagraphMode:(BOOL)a5 includeRuby:(BOOL)a6 inranges:(id)a7 outranges:(id *)a8;
- (const void *)pColumnEndingPartitionedLineFragmentInSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1 forParagraphMode:(BOOL)a2;
- (unsigned long long)charIndexFromWPPoint:(struct CGPoint { double x0; double x1; })a0 pastCenterGoesToNextChar:(BOOL)a1 allowNotFound:(BOOL)a2 outFragment:(const struct TSWPLineFragment **)a3 leadingEdge:(BOOL *)a4;
- (double)logicalBoundsBottom;
- (void)incrementRanges:(long long)a0;
- (double)minimumHeightForLayoutOnPage;
- (BOOL)requiresGlyphVectorsForHeightMeasurement;
- (void)addAdornmentRect:(const struct TSWPAdornmentRect { int x0; id x1; id x2; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x3; } *)a0;
- (unsigned long long)logicalLineCount;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })lineFragmentRangeForLogicalLineIndex:(unsigned long long)a0;
- (double)topOfCapForLogicalLineIndex:(unsigned long long)a0;
- (void)setLineFragmentArray:(const void *)a0;
- (void)normalizeLineFragmentOrigins:(struct CGPoint { double x0; double x1; })a0;
- (unsigned long long)lineFragmentCountForBaseline:(double)a0;
- (void)makeEmpty:(unsigned long long)a0 layoutResultFlags:(int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })typographicBoundsOfLineFragmentAtIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })labelBoundsOfLineFragmentAtIndex:(unsigned long long)a0;
- (double)typographicGlyphExtentOfLineFragmentAtIndex:(unsigned long long)a0;
- (BOOL)isTruncatedLineFragmentAtIndex:(unsigned long long)a0;
- (BOOL)isEmptyLineFragmentAtIndex:(unsigned long long)a0;
- (BOOL)isDropCapFragmentAtIndex:(unsigned long long)a0;
- (unsigned long long)truncatedCharIndexForLineFragmentAtIndex:(unsigned long long)a0;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; })heightInfoOfLineFragmentAtIndex:(unsigned long long)a0;
- (double)baselineOfLineFragmentAtIndex:(unsigned long long)a0;
- (double)horizontalOffsetForCharIndex:(unsigned long long)a0 lineFragmentIndex:(unsigned long long)a1 bumpPastHyphen:(BOOL)a2 allowPastLineBounds:(BOOL)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })glyphRectForRubyFieldAtCharIndex:(unsigned long long)a0 glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (unsigned long long)glyphCountForRubyFieldAtCharIndex:(unsigned long long)a0;
- (id)lineSelectionsForSelection:(id)a0;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)rectsForSelectionRanges:(id)a0 selectionType:(int)a1;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1 includeSpaceAfter:(BOOL)a2 includeSpaceBefore:(BOOL)a3 includeLeading:(BOOL)a4 forParagraphMode:(BOOL)a5 includeRuby:(BOOL)a6;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })erasableRectForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)drawableIntersectionRectsForSelection:(id)a0 inTarget:(id)a1;
- (struct _TSWPCharIndexAndPosition { unsigned long long x0; int x1; double x2; int x3; double x4; })calcAttachmentPositionForDrawable:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 inTextLayoutTarget:(id)a2 tlBoundsInfluencingWrap:(struct CGPoint { double x0; double x1; })a3 wrapOutset:(struct CGSize { double x0; double x1; })a4 wrapMargin:(double)a5 makeInline:(BOOL)a6;
- (void)renderWithRenderer:(id)a0 pageCount:(unsigned long long)a1;
- (id)partitionedLayoutForInfo:(id)a0;
- (id)singleLinePartitionedInfoAtStart:(BOOL)a0;
- (BOOL)onlyHasAnchoredDrawable;

@end

@class UIView, NSString, UITextInputPasswordRules, UITextRange, NSDictionary, UIResponder, NSObject, UITextPosition, TSDTextInputTokenizer, TSDTextPosition;
@protocol TSDTextInput, UITextInputDelegate, UITextInputTokenizer;

@interface TSDTextInputResponder : UIResponder <UITextInput, UIResponderStandardEditActions, _UITextInputRevealSupport> {
    TSDTextInputTokenizer *_tokenizer;
    BOOL _isResigning;
    int _respondingToUITextInput;
    BOOL _isSettingSelectedTextRange;
    TSDTextPosition *_referencePosition;
    long long _referenceOffset;
    TSDTextPosition *_cachedPosition;
    BOOL _pendingEditorChange;
    NSObject<TSDTextInput> *_pendingEditor;
    BOOL _pendingFirstResponderChange;
    id<TSDTextInput> _pendingFirstResponderObject;
    BOOL _inDynamicOperation;
    UIResponder *_nextResponder;
    BOOL _editorRespondsToRawArrowKeySelectors;
    int _ignoreKeyboardInputCount;
}

@property (retain, nonatomic) NSObject<TSDTextInput> *editor;
@property (readonly, nonatomic, getter=isResigning) BOOL resigning;
@property (nonatomic) float preferredStartPosition;
@property (nonatomic) float preferredEndPosition;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) id<UITextInputDelegate> inputDelegate;
@property (readonly, nonatomic) id<UITextInputTokenizer> tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)toggleBoldface:(id)a0;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionRectsForRange:(id)a0;
- (long long)_indexForTextPosition:(id)a0;
- (id)characterRangeByExtendingPosition:(id)a0 inDirection:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)a0;
- (void)teardown;
- (id)_selectableText;
- (BOOL)_disableAutomaticKeyboardUI;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_nsrangeForTextRange:(id)a0;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (id)textStylingAtPosition:(id)a0 inDirection:(long long)a1;
- (id)nextResponder;
- (id)positionWithinRange:(id)a0 farthestInDirection:(long long)a1;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (void)toggleItalics:(id)a0;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1;
- (id)inputAccessoryView;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0 withinRange:(id)a1;
- (id)positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2;
- (BOOL)canResignFirstResponder;
- (void)setBaseWritingDirection:(long long)a0 forRange:(id)a1;
- (id)superview;
- (void)deleteBackward;
- (id)keyCommands;
- (void)replaceRange:(id)a0 withText:(id)a1;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)insertText:(id)a0;
- (id)methodSignatureForSelector:(SEL)a0;
- (id)textRangeFromPosition:(id)a0 toPosition:(id)a1;
- (void)unmarkText;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (id)textInRange:(id)a0;
- (id)p_ICC;
- (long long)comparePosition:(id)a0 toPosition:(id)a1;
- (id)_textRangeFromNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)positionFromPosition:(id)a0 offset:(long long)a1;
- (long long)baseWritingDirectionForPosition:(id)a0 inDirection:(long long)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_selectedNSRange;
- (void)deleteForward;
- (void)acceptAutocorrection;
- (BOOL)canBecomeFirstResponder;
- (BOOL)resignFirstResponder;
- (id)inputView;
- (void)forwardInvocation:(id)a0;
- (void)delete:(id)a0;
- (void)selectAll:(id)a0;
- (BOOL)becomeFirstResponder;
- (void)dealloc;
- (void)toggleUnderline:(id)a0;
- (void)insertDictationResult:(id)a0;
- (void)editorDidChangeSelection:(id)a0;
- (void)p_willShowPopoverNotification:(id)a0;
- (void)forceDelayedResponderChange;
- (id)initWithNextResponder:(id)a0;
- (void)clearEditorAndResignFirstResponder;
- (void)customAction6:(id)a0;
- (void)customAction7:(id)a0;
- (void)customAction8:(id)a0;
- (void)cancelDelayedResponderChange;
- (void)canvasWillScroll;
- (void)canvasWillZoom;
- (void)editorDidChangeSelection:(id)a0 withFlags:(unsigned long long)a1;
- (void)resumeEditing;
- (void)p_editorSelectionWasForciblyChangedNotification:(id)a0;
- (void)p_editorWillClearSelectionNotification:(id)a0;
- (void)p_editorWillStyleTextNotification:(id)a0;
- (void)p_editorWillHandleTapNotification:(id)a0;
- (void)p_editorDidInsertTextNotification:(id)a0;
- (void)p_willUndoChangeNotification:(id)a0;
- (void)p_didUndoRedoChangeNotification:(id)a0;
- (void)p_startDynamicOperation:(id)a0;
- (void)p_finishDynamicOperation:(id)a0;
- (BOOL)p_isExecutingUITextInput;
- (void)p_textChanged;
- (void)p_setFirstResponder:(id)a0;
- (BOOL)p_requiresFirstResponderChangeForEditor:(id)a0;
- (BOOL)p_resignFirstResponder;
- (void)p_setEditor:(id)a0;
- (void)p_setFirstResponderAndEditor:(id)a0;
- (void)p_setFirstResponderAndEditorAfterDelay;
- (void)p_setFirstResponderAfterDelay;
- (id)editingTextReps;
- (BOOL)p_wantRawArrowKeys;
- (BOOL)p_didEnterUITextInput;
- (void)p_setSelectedTextRange:(id)a0;
- (void)p_willExitUITextInput;
- (void)p_unmarkText;
- (BOOL)p_currentEditorIsNotOnMyCanvas;
- (void)beginIgnoringKeyboardInput;
- (void)endIgnoringKeyboardInput;
- (id)editingTextRep;
- (void)canvasWillRotate;
- (id)rectsForRange:(id)a0;

@end

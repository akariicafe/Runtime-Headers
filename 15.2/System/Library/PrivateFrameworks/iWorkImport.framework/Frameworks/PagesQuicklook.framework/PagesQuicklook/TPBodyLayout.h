@class NSObject, NSString, NSMutableSet, NSMutableArray, TSWPStorage, TPFootnoteHeightMeasurer, TSPObject, TSDCanvas;
@protocol TSWPFootnoteHeightMeasurer, TSWPOffscreenColumn, TSWPTopicNumberHints, TSWPFootnoteMarkProvider, TSDHint;

@interface TPBodyLayout : TSDLayout <TSWPLayoutTarget, TPAttachmentLayoutParent, TPFootnotePageDelegate> {
    TPFootnoteHeightMeasurer *_footnoteHeightMeasurer;
    NSMutableSet *_inlineDrawableLayouts;
    NSMutableSet *_markedHiddenInlineDrawableLayouts;
}

@property (readonly, nonatomic) NSMutableArray *columns;
@property (readonly, nonatomic) id<TSWPOffscreenColumn> previousTargetLastColumn;
@property (readonly, nonatomic) id<TSWPOffscreenColumn> nextTargetFirstColumn;
@property (readonly, nonatomic) NSObject<TSWPTopicNumberHints> *nextTargetTopicNumberHints;
@property (readonly, nonatomic) id<TSWPFootnoteHeightMeasurer> footnoteHeightMeasurer;
@property (readonly, nonatomic) id<TSWPFootnoteMarkProvider> footnoteMarkProvider;
@property (readonly, nonatomic) TSPObject<TSDHint> *nextTargetFirstChildHint;
@property (readonly, nonatomic) TSWPStorage *storage;
@property (readonly, nonatomic) BOOL isInstructional;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } minSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } maxSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } currentSize;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } position;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } anchorPoint;
@property (readonly, nonatomic) unsigned long long autosizeFlags;
@property (readonly, nonatomic) int verticalAlignment;
@property (readonly, nonatomic) int naturalAlignment;
@property (readonly, nonatomic) int naturalDirection;
@property (readonly, nonatomic) BOOL wantsLineFragments;
@property (readonly, nonatomic) unsigned long long pageNumber;
@property (readonly, nonatomic) unsigned long long pageCount;
@property (readonly, nonatomic) BOOL textIsVertical;
@property (readonly, nonatomic) BOOL layoutIsValid;
@property (readonly, nonatomic) BOOL shouldWrapAroundExternalDrawables;
@property (readonly, nonatomic) double maxAnchorInBlockDirection;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } maskRect;
@property (retain, nonatomic) NSMutableArray *anchoredDrawablesForRelayout;
@property (readonly, nonatomic) TSDCanvas *canvas;
@property (readonly, nonatomic) BOOL shouldHyphenate;
@property (readonly, nonatomic) struct __CFLocale { } *hyphenationLocale;
@property (readonly, nonatomic) BOOL shouldIgnoreAnchoredAttachments;
@property (readonly, nonatomic) BOOL repShouldPreventCaret;
@property (readonly, nonatomic) BOOL isLinked;
@property (readonly, nonatomic) BOOL marginsAreMirrored;
@property (readonly, nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } restrictedLayoutCharRange;
@property (readonly, nonatomic) BOOL supportsPageNumbers;
@property (readonly, nonatomic) Class inlineTableOfContentsLayoutClass;
@property (readonly, nonatomic) BOOL alwaysIncludesSpaceBefore;
@property (readonly, nonatomic) BOOL alwaysIncludesSpaceAfter;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGSize { double x0; double x1; })minimumBodySize;

- (void)setChildren:(id)a0;
- (void)validate;
- (id)pageController;
- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(id)a0;
- (void)insertChild:(id)a0 atIndex:(unsigned long long)a1;
- (id)computeLayoutGeometry;
- (void)invalidateSize;
- (void)addAttachmentLayout:(id)a0;
- (id)currentInlineDrawableLayouts;
- (id)currentAnchoredDrawableLayouts;
- (id)validatedLayoutForAnchoredDrawable:(id)a0;
- (id)layoutForInlineDrawable:(id)a0;
- (BOOL)isLayoutOffscreen;
- (id)columnMetricsForCharIndex:(unsigned long long)a0 outRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (BOOL)isLastTarget;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGPoint { double x0; double x1; })layoutPositionFromAnchoredAttachmentPosition:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })anchoredAttachmentPositionFromLayoutPosition:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)invalidateForPageCountChange;
- (id)interiorClippingPath;
- (struct CGPoint { double x0; double x1; })capturedInfoPositionForAttachment;
- (BOOL)shouldProvideSizingGuides;
- (void)replaceChild:(id)a0 with:(id)a1;
- (void)parentWillChangeTo:(id)a0;
- (struct CGSize { double x0; double x1; })maximumFrameSizeForChild:(id)a0;
- (struct CGPoint { double x0; double x1; })calculatePointFromSearchReference:(id)a0;
- (void)unregisterFromLayoutController;
- (void)willBeRemovedFromLayoutController:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_rectForSelection:(id)a0 useParagraphModeRects:(BOOL)a1;
- (id)textColorOverride;
- (BOOL)descendersCannotClip;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForSelectionPath:(id)a0;
- (BOOL)selectionMustBeEntirelyOnscreenToCountAsVisibleInSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForPresentingAnnotationPopoverForSelectionPath:(id)a0;
- (void)p_killDrawableLayouts:(id)a0;
- (BOOL)needsInflation;
- (BOOL)shouldInvalidateSizeWhenInvalidateSizeOfReliedOnLayout:(id)a0;
- (void)p_addLayoutIfAttached:(id)a0;
- (void)resetFootnoteHeightMeasurer;
- (id)existingAttachmentLayoutForInfo:(id)a0;
- (id)p_layoutForDrawable:(id)a0 inContainingLayout:(id)a1;
- (void)setNeedsInflation;
- (void)clearHiddenInlineDrawableLayoutMarks;
- (void)markHiddenInlineDrawableLayout:(id)a0;
- (id)addPartitionableAttachmentLayout:(id)a0;
- (double)textScaleForChild:(id)a0;
- (BOOL)containsStartOfRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)parentLayoutForPartitionableAttachment:(id)a0 atPosition:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)isFootnoteContainerOnSamePageAsTarget:(id)a0;
- (BOOL)canHaveFootnotesFromPreviousTarget:(id)a0;
- (double)viewScaleForZoomingToSelectionPath:(id)a0 targetPointSize:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootOfAutoZoomContextOfSelectionPath:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectInRootForPresentingAnnotationPopoverForSelectionPath:(id)a0;
- (id)containedPencilAnnotations;
- (id)unscaledContentRectsToAvoidPencilAnnotationOverlap;
- (BOOL)containsStartOfPencilAnnotation:(id)a0;
- (void)updateStartCharIndexWithDirtyRanges:(id)a0;
- (BOOL)processWidowAndInflation;
- (double)contentBlockHeight;
- (BOOL)childLayoutIsCurrentlyHiddenWhileManipulating:(id)a0;
- (void)willInflate;
- (struct CGPoint { double x0; double x1; })activityLineUnscaledEndPointForSearchReference:(id)a0;
- (id)unscaledCommentFlagAnchorInfoForSearchReference:(id)a0;
- (BOOL)excludeFromNearestVisibleRectSearchForSelectionPath:(id)a0;

@end

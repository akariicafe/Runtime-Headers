@class TSDImageDataHelper, NSString, NSArray, TSUBezierPath, NSSet, TSDMediaStyle, TSDMaskInfo, TSDInfoGeometry, TSDImageAdjustments, TSPData, NSObject, TSPObject;
@protocol TSDInfo, TSDOwningAttachment;

@interface TSDImageInfo : TSDMediaInfo <TSDReducibleImageContainer, TSDContainerInfo, TSDMixing, TSSPresetSource, TSKTransformableObject, TSDCompatibilityAwareMediaContainer, TSDAttachmentAwareContainerInfo> {
    TSUBezierPath *mInstantAlphaPath;
    struct CGSize { double width; double height; } mNaturalSize;
    TSDImageDataHelper *mImageDataHelper;
    TSPData *mThumbnailImageData;
    TSPData *mThumbnailAdjustedImageData;
    TSDImageDataHelper *mAdjustedImageDataHelper;
    TSPData *mEnhancedImageData;
    TSDMediaStyle *mStyle;
    TSUBezierPath *mTracedPath;
    BOOL mShouldTracePDFData;
    BOOL mCurrentlyInDocument;
    double mDescentForInlineLayout;
    BOOL mDescentForInlineLayoutValid;
}

@property (class, readonly, nonatomic) NSSet *presetKinds;

@property (readonly, retain, nonatomic) TSPData *imageData;
@property (retain, nonatomic) TSPData *imageDataNonnull;
@property (retain, nonatomic) TSPData *thumbnailImageData;
@property (retain, nonatomic) TSPData *originalImageData;
@property (readonly, nonatomic) TSPData *imageDataForExport;
@property (readonly, nonatomic) TSDMediaStyle *imageStyle;
@property (retain, nonatomic) TSDMaskInfo *maskInfo;
@property (retain, nonatomic) TSUBezierPath *instantAlphaPath;
@property (readonly, nonatomic) BOOL canBeMasked;
@property (readonly, nonatomic) TSUBezierPath *instantAlphaPathIgnoringNaturalSize;
@property (copy, nonatomic) TSDImageAdjustments *imageAdjustments;
@property (retain, nonatomic) TSPData *adjustedImageData;
@property (retain, nonatomic) TSPData *thumbnailAdjustedImageData;
@property (retain, nonatomic) TSPData *enhancedImageData;
@property (readonly, nonatomic) BOOL canAdjustImage;
@property (readonly, nonatomic) unsigned long long estimatedDataSizeForNewAdjustmentSentToServer;
@property (readonly, nonatomic) TSUBezierPath *tracedPath;
@property (nonatomic) BOOL shouldTracePDFData;
@property (nonatomic) struct CGSize { double x0; double x1; } naturalSize;
@property (readonly, nonatomic) BOOL shouldGenerateThumbnails;
@property (readonly, nonatomic) double descentForInlineLayout;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *childInfos;
@property (readonly, nonatomic) BOOL isMaster;
@property (copy, nonatomic) TSDInfoGeometry *geometry;
@property (nonatomic) NSObject<TSDInfo> *parentInfo;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (readonly, nonatomic, getter=isFloatingAboveText) BOOL floatingAboveText;
@property (readonly, nonatomic, getter=isAnchoredToText) BOOL anchoredToText;
@property (readonly, nonatomic, getter=isInlineWithText) BOOL inlineWithText;
@property (readonly, nonatomic, getter=isInlineWithTextWithWrap) BOOL inlineWithTextWithWrap;
@property (readonly, nonatomic, getter=isAttachedToBodyText) BOOL attachedToBodyText;
@property (nonatomic) BOOL matchesObjectPlaceholderGeometry;
@property (readonly, nonatomic) NSSet *infosToObserveForAttachedInfo;

+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(unsigned long long)a2;
+ (void)adjustIncomingImageGeometry:(id)a0 maskGeometry:(id)a1 forImageData:(id)a2 maskedWithInstantAlphaPath:(id)a3 withNaturalSize:(struct CGSize { double x0; double x1; })a4 forTargetImageGeometry:(id)a5 withTargetMaskGeometry:(id)a6;
+ (void)bootstrapPresetsOfKind:(id)a0 inTheme:(id)a1 alternate:(unsigned long long)a2 reservedCount:(unsigned long long)a3;
+ (id)bootstrapPropertyMapForPresetIndex:(unsigned long long)a0 inTheme:(id)a1 alternate:(unsigned long long)a2;

- (id)style;
- (id)typeName;
- (BOOL)isPDF;
- (id)mediaFileType;
- (struct CGSize { double x0; double x1; })originalSize;
- (id)objectForProperty:(int)a0;
- (void)setStyle:(id)a0;
- (void).cxx_destruct;
- (BOOL)needsDownload;
- (void)acceptVisitor:(id)a0;
- (void)dealloc;
- (Class)repClass;
- (id)copyWithContext:(id)a0;
- (Class)layoutClass;
- (void)setExteriorTextWrap:(id)a0;
- (BOOL)allowsTitle;
- (BOOL)isMasked;
- (id)presetKind;
- (void)willBeRemovedFromDocumentRoot:(id)a0;
- (void)wasRemovedFromDocumentRoot:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })computeFullTransform;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (struct CGSize { double x0; double x1; })targetSizeForImageData:(id)a0 associatedHint:(id)a1;
- (Class)styleClass;
- (struct CGSize { double x0; double x1; })defaultOriginalSize;
- (id)copyWithContext:(id)a0 style:(id)a1;
- (id)geometryWithMask;
- (id)defaultMaskInfoWithContext:(id)a0;
- (id)defaultMaskInfo;
- (id)initWithContext:(id)a0 geometry:(id)a1 style:(id)a2 imageData:(id)a3 originalImageData:(id)a4;
- (id)mediaDisplayName;
- (struct CGSize { double x0; double x1; })rawDataSize;
- (BOOL)maskCanBeReset;
- (struct CGPoint { double x0; double x1; })centerForReplacingWithNewMedia;
- (void)updateGeometryToReplaceMediaInfo:(id)a0;
- (BOOL)canResetMediaSize;
- (id)styleIdentifierTemplateForNewPreset;
- (void)willBeAddedToDocumentRoot:(id)a0 dolcContext:(id)a1;
- (void)wasAddedToDocumentRoot:(id)a0 dolcContext:(id)a1;
- (void)loadFromArchive:(const void *)a0 unarchiver:(id)a1;
- (void)saveToArchive:(void *)a0 archiver:(id)a1;
- (id)infoForSelectionPath:(id)a0;
- (void)loadFromUnarchiver:(id)a0;
- (void)saveToArchiver:(id)a0;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (BOOL)allowsCaption;
- (void)scaleDownSizeToFitWithinSize:(struct CGSize { double x0; double x1; })a0;
- (id)typesToPromiseWhenCopyingSingleDrawable;
- (id)promisedDataForType:(id)a0;
- (BOOL)p_canCopy:(id)a0;
- (BOOL)canCopyData;
- (long long)mediaCompatibilityTypeForData:(id)a0 associatedHint:(id)a1;
- (BOOL)allowsParentGroupToBeResizedWithoutAspectRatioLock;
- (void)setImageData:(id)a0 thumbnailData:(id)a1;
- (void)setAdjustedImageData:(id)a0 thumbnailData:(id)a1;
- (BOOL)p_aspectRatioUnlockedResizeWouldCauseSkew;
- (void)p_setImageData:(id)a0 thumbnailData:(id)a1;
- (BOOL)hasPDFDataForCopy;
- (id)initWithContext:(id)a0 geometry:(id)a1 style:(id)a2 imageData:(id)a3 thumbnailImageData:(id)a4 originalImageData:(id)a5 imageAdjustments:(id)a6 adjustedImageData:(id)a7 thumbnailAdjustedImageData:(id)a8;
- (void)i_forciblyRegenerateThumbnail;
- (id)propertyNameForFlagsCommand;
- (id)propertyNameForOriginalSizeCommand;
- (unsigned short)propertyIdForFlagsCommand;
- (unsigned short)propertyIdForOriginalSizeCommand;
- (id)mediaDataForDragging;
- (void)p_upgradeImageGeometry;
- (void)p_upgradeImageThumbnail;

@end

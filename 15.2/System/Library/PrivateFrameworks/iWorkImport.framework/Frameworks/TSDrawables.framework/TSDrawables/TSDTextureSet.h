@class TSDRep, NSArray, TSDTextureDescription, CALayer, NSDictionary, NSMutableArray, NSMapTable, TSDBitmapRenderingQualityInfo;

@interface TSDTextureSet : NSObject <NSCopying> {
    NSMutableArray *_titleAndCaptionTextures;
    NSMutableArray *_animatableTextures;
    NSDictionary *_bakedAttributes;
    NSMapTable *_eventIndexToViewLayerMap;
    NSMutableArray *_finalTextures;
    NSMapTable *_textureToStageIndexMap;
    NSMapTable *_flattenKeyToFlattenedTextureMap;
    NSMapTable *_origBoundingRectForStageMap;
}

@property (readonly, nonatomic) long long maxStageIndex;
@property (readonly, nonatomic) NSArray *visibleTextures;
@property (readonly, nonatomic) NSArray *visibleTexturesIncludingCaptions;
@property (readonly, nonatomic) NSMutableArray *allTextures;
@property (readonly, nonatomic) NSArray *titleAndCaptionTextures;
@property (nonatomic) struct CGPoint { double x; double y; } center;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } boundingRect;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (readonly, nonatomic) CALayer *layer;
@property (retain, nonatomic) CALayer *alternateLayer;
@property (nonatomic) BOOL isMagicMove;
@property (nonatomic) double textureAngle;
@property (nonatomic) long long textureZOrder;
@property (nonatomic) double textureOpacity;
@property (nonatomic) double textureAnimationPercent;
@property (nonatomic) long long objectType;
@property (nonatomic) BOOL isBackground;
@property (nonatomic) BOOL isBaked;
@property (nonatomic) BOOL shouldIncludeFinalTexturesInVisibleSet;
@property (nonatomic) BOOL shouldTransformUsingTextureCenter;
@property (weak, nonatomic) TSDRep *rep;
@property (copy, nonatomic) TSDTextureDescription *textureDescription;
@property (copy, nonatomic) NSMapTable *boundingRectForStageMap;
@property (nonatomic) struct CGPoint { double x; double y; } originalPosition;
@property (nonatomic) struct CGColorSpace { } *colorSpace;
@property (readonly, nonatomic) BOOL isRenderable;
@property (readonly, nonatomic) BOOL isImageSource;
@property (nonatomic) BOOL isFlippedHorizontally;
@property (readonly, nonatomic) BOOL isFlippedVertically;
@property (nonatomic) TSDBitmapRenderingQualityInfo *bitmapRenderingQualityInfo;
@property (readonly, nonatomic) BOOL containsFinalTextures;
@property (nonatomic) BOOL containsContentBuildTextures;

+ (id)newFlattenedTextureFromTextures:(id)a0 newRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;

- (void)teardown;
- (id)description;
- (void).cxx_destruct;
- (id)init;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)dealloc;
- (void)setBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)addRenderable:(id)a0;
- (BOOL)isBackgroundTexture:(id)a0;
- (void)renderLayerContentsIfNeeded;
- (long long)stageIndexForTexture:(id)a0;
- (void)addRenderable:(id)a0 forStage:(long long)a1;
- (void)setBoundingRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forStage:(long long)a1;
- (void)releaseSingleTextures;
- (void)removeRenderable:(id)a0;
- (id)firstVisibleTextureForTextureType:(long long)a0;
- (void)addPerspectiveLayerToTexture:(id)a0 withShowSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForStage:(long long)a0 isBuildIn:(BOOL)a1 isContentBuild:(BOOL)a2;
- (id)viewLayerAtEventIndex:(unsigned long long)a0;
- (void)hideLayersOfFinalTexturesAtEventIndex:(unsigned long long)a0;
- (id)finalTexturesForStage:(long long)a0;
- (BOOL)hasTexture:(id)a0 beenFlattenedForKey:(id)a1;
- (void)setLayerGeometryAtEventIndex:(unsigned long long)a0;
- (void)applyActionEffect:(id)a0 viewScale:(double)a1 isMagicMove:(BOOL)a2 shouldBake:(BOOL)a3 applyScaleOnly:(BOOL)a4 ignoreScale:(BOOL)a5 shouldCheckActionKeys:(BOOL)a6 eventIndex:(unsigned long long)a7;
- (void)adjustAnchorPointRelativeToCenterOfRotationAtEventIndex:(unsigned long long)a0;
- (void)resetToOriginalSourceAtEventIndex:(unsigned long long)a0;
- (void)resetAnchorPointAtEventIndex:(unsigned long long)a0;
- (id)visibleTexturesForStage:(long long)a0 isBuildIn:(BOOL)a1 isContentBuild:(BOOL)a2 shouldFlatten:(BOOL)a3 flattenKey:(id)a4 shouldIncludeCaptions:(BOOL)a5;
- (id)visibleTexturesForStage:(long long)a0 isBuildIn:(BOOL)a1 isContentBuild:(BOOL)a2 shouldFlatten:(BOOL)a3 flattenKey:(id)a4;
- (void)removeAllPerspectiveLayers;
- (void)setLayerGeometry;
- (void)renderIntoContext:(struct CGContext { } *)a0 eventIndex:(unsigned long long)a1 requiresTransparentBackground:(BOOL)a2;
- (void)addFinalTexture:(id)a0 forStage:(long long)a1;
- (BOOL)canReuseMetalTexturesWith:(id)a0;
- (void)evictRenderedResources;
- (void)drawFrameWithMetalContext:(id)a0;
- (void)p_addRenderable:(id)a0 forStage:(long long)a1 shouldAdjustBounds:(BOOL)a2;
- (id)p_insertNewFlattenedTextureWithArray:(id)a0 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 stage:(long long)a2 insertAfter:(id)a3 flattenKey:(id)a4;
- (void)p_setLayerGeometryWithLayer:(id)a0;
- (void)p_getComponentsOpacity:(double *)a0 scale:(double *)a1 angle:(double *)a2 fromAttributes:(id)a3 shouldApplyOpacity:(BOOL *)a4 shouldApplyAngle:(BOOL *)a5 shouldApplyScale:(BOOL *)a6;
- (void)p_applyPositionFromAttributes:(id)a0 viewScale:(double)a1 eventIndex:(unsigned long long)a2;
- (BOOL)p_areAttributes:(id)a0 equalToAttributes:(id)a1;
- (void)p_resetAttributesWithViewScale:(double)a0 eventIndex:(unsigned long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })p_frameAtEventIndex:(unsigned long long)a0;
- (void)addRenderable:(id)a0 shouldAdjustBounds:(BOOL)a1;
- (void)flattenToFinalTexturesForMagicMove;
- (id)visibleTexturesBeforeStage:(long long)a0 isBuildIn:(BOOL)a1 isContentBuild:(BOOL)a2 shouldFlatten:(BOOL)a3 flattenKey:(id)a4;
- (BOOL)shouldAnimateBackgroundTexturesWithStage:(long long)a0 isBuildIn:(BOOL)a1;
- (id)visibleTexturesWithTextureType:(long long)a0;
- (void)resetLayers;

@end

@class TSTCategoryOwner, TSTTableInfo, TSDStroke, TSTStrokeSidecar, TSTConcurrentMutableCellUIDSet, TSTHiddenStateFormulaOwner, NSString, TSTTableDataStore, TSTHiddenStatesOwner, TSCEHauntedOwner, TSCECalculationEngine, TSTPivotOwner, TSTTableSortOrder, NSArray, TSWPParagraphStyle, TSTSortRuleReferenceTracker, TSWPShapeStyle, TSTConditionalStyleFormulaOwner, TSTCellDictionary, TSTCellStyle, TSTStructuredTextImportRecord, TSTCellWillChangeDistributor, TSTTableStyle, TSTMergeOwner, TSWPStorage, TSTColumnRowUIDMap, NSUUID, TSTPencilAnnotationOwner, TSTTableTranslator, TSTTableFilterSet, NSMapTable, TSCEOwnerUidMapper, TSTTableStylePreset;

@interface TSTTableModel : TSPObject <TSCEReferenceResolving, TSCEColumnRowUIDMapping, TSCECalculationEngineRegistration, TSCEFormulaOwning, TSDMixing, TSTCompatibilityVersionProviding, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableStrokeProviding, TSTTableTileCreating> {
    TSTHiddenStateFormulaOwner *_hiddenStateFormulaOwnerForRows;
    TSTHiddenStateFormulaOwner *_hiddenStateFormulaOwnerForColumns;
    TSTStrokeSidecar *_strokeSidecar;
    struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _coordsForOwnerUid; } _clearErrorCells;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _clearErrorLock;
    BOOL _isRegisteredWithCalcEngine;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) TSTColumnRowUIDMap *columnRowUIDMap;
@property (retain, nonatomic) TSTTableDataStore *dataStore;
@property (nonatomic) unsigned long long presetIDForUpgrade;
@property (retain, nonatomic) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property (retain, nonatomic) TSWPStorage *deprecatedProvider;
@property (readonly, nonatomic) NSMapTable *commentHostingMap;
@property (readonly, nonatomic) unsigned long long lastArchivedAppVersion;
@property (readonly, nonatomic) struct vector<TSTCellValueType, std::allocator<TSTCellValueType>> { unsigned char *__begin_; unsigned char *__end_; struct __compressed_pair<TSTCellValueType *, std::allocator<TSTCellValueType>> { unsigned char *__value_; } __end_cap_; } pivotValueTypesByColumn;
@property (readonly, nonatomic) struct map<unsigned long, TSTGroupingType, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, TSTGroupingType>>> { struct __tree<std::__value_type<unsigned long, TSTGroupingType>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, TSTGroupingType>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, TSTGroupingType>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long, TSTGroupingType>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, TSTGroupingType>, std::less<unsigned long>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } pivotDateGroupingTypesByColumn;
@property (nonatomic) TSTTableInfo *tableInfo;
@property (readonly, nonatomic) TSTTableTranslator *identityTranslator;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } upgradeHiddenFormulaOwnerForColumnsUID;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } upgradeHiddenFormulaOwnerForRowsUID;
@property (readonly, nonatomic) BOOL upgradeNeedsToUpdateFilterSetForImport;
@property (retain, nonatomic) TSTTableFilterSet *prePivotRowFilterSet;
@property (nonatomic) TSCECalculationEngine *calcEngine;
@property (readonly, nonatomic) BOOL isRegisteredWithCalcEngine;
@property (nonatomic) BOOL wasCut;
@property (nonatomic) struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } tableUID;
@property (nonatomic) struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } fromTableUID;
@property (nonatomic) struct TSKUIDStruct { unsigned long long _lower; unsigned long long _upper; } fromGroupByUID;
@property (nonatomic) unsigned short localOwnerID;
@property (readonly, nonatomic) TSCEOwnerUidMapper *ownerUIDMapper;
@property (readonly, nonatomic) TSCEOwnerUidMapper *identityOwnerUIDMapper;
@property (readonly, nonatomic) TSCEOwnerUidMapper *upgradeToSubOwnerUIDMapper;
@property (readonly, nonatomic) NSUUID *nsTableUID;
@property (retain, nonatomic) NSString *tableName;
@property (nonatomic) BOOL tableNameEnabled;
@property (nonatomic) double tableNameHeight;
@property (nonatomic) BOOL tableNameBorderEnabled;
@property (readonly, nonatomic) TSDStroke *tableNameBorderStroke;
@property (nonatomic) BOOL repeatingHeaderRowsEnabled;
@property (nonatomic) BOOL repeatingHeaderColumnsEnabled;
@property (readonly, nonatomic) int tableWritingDirection;
@property (readonly, nonatomic) BOOL hasTableBorder;
@property (readonly, nonatomic) BOOL hasAlternatingRows;
@property (readonly, nonatomic) struct TSUModelRowIndex { unsigned int x0; } numberOfRows;
@property (readonly, nonatomic) struct TSUModelColumnIndex { unsigned short x0; } numberOfColumns;
@property (nonatomic) struct TSUModelRowIndex { unsigned int _row; } numberOfHeaderRows;
@property (nonatomic) struct TSUModelRowIndex { unsigned int _row; } numberOfFooterRows;
@property (nonatomic) struct TSUModelColumnIndex { unsigned short _column; } numberOfHeaderColumns;
@property (nonatomic) BOOL headerRowsFrozen;
@property (nonatomic) BOOL headerColumnsFrozen;
@property (nonatomic) BOOL styleApplyClearsAll;
@property (retain, nonatomic) TSTTableStylePreset *tableStylePreset;
@property (readonly, nonatomic) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property (readonly, nonatomic) TSTMergeOwner *mergeOwner;
@property (readonly, nonatomic) TSTCategoryOwner *categoryOwner;
@property (readonly, nonatomic) TSTHiddenStatesOwner *hiddenStatesOwner;
@property (readonly, nonatomic) TSTPencilAnnotationOwner *pencilAnnotationOwner;
@property (readonly, nonatomic) TSTPivotOwner *pivotOwner;
@property (readonly, nonatomic) TSCEHauntedOwner *hauntedOwner;
@property (readonly, nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } conditionalStyleFormulaOwnerUID;
@property (readonly, nonatomic) TSTCellDictionary *cellsPendingWrite;
@property (readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateAfterRecalc;
@property (readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateNonoverflowingAfterRecalc;
@property (copy, nonatomic) TSTTableSortOrder *sortOrder;
@property (retain, nonatomic) TSTStrokeSidecar *strokeSidecar;
@property (readonly, nonatomic) TSTCellWillChangeDistributor *cellWillChangeDistributor;
@property (nonatomic) BOOL presetNeedsStrongOwnership;
@property (nonatomic) BOOL wasUnarchivedFromAProvidedTable;
@property (retain, nonatomic) TSTStructuredTextImportRecord *textImportRecord;
@property (readonly, nonatomic) unsigned long long tableSizeClass;
@property (nonatomic) BOOL shouldUseWideRows;
@property (readonly, nonatomic) BOOL hasMigratableStylesInCells;
@property (nonatomic) double defaultRowHeight;
@property (nonatomic) double defaultColumnWidth;
@property (readonly, nonatomic) NSArray *rowHeights;
@property (readonly, nonatomic) NSArray *columnWidths;
@property (readonly, nonatomic) unsigned long long archivingCompatibilityVersion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (retain, nonatomic) TSTTableStyle *tableStyle;
@property (retain, nonatomic) TSTCellStyle *bodyCellStyle;
@property (retain, nonatomic) TSTCellStyle *headerRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *headerColumnCellStyle;
@property (retain, nonatomic) TSTCellStyle *footerRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel1CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel2CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel3CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel4CellStyle;
@property (retain, nonatomic) TSTCellStyle *categoryLevel5CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel1CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel2CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel3CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel4CellStyle;
@property (retain, nonatomic) TSTCellStyle *labelLevel5CellStyle;
@property (retain, nonatomic) TSWPParagraphStyle *bodyTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *headerRowTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *headerColumnTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *footerRowTextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel1TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel2TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel3TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel4TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *categoryLevel5TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel1TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel2TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel3TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel4TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *labelLevel5TextStyle;
@property (retain, nonatomic) TSWPParagraphStyle *tableNameStyle;
@property (retain, nonatomic) TSWPShapeStyle *tableNameShapeStyle;
@property (retain, nonatomic) TSTCellStyle *pivotBodySummaryRowCellStyle;
@property (retain, nonatomic) TSTCellStyle *pivotBodySummaryColumnCellStyle;
@property (retain, nonatomic) TSTCellStyle *pivotHeaderColumnSummaryCellStyle;
@property (readonly, nonatomic) TSDStroke *defaultHorizontalBorderStroke;
@property (readonly, nonatomic) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property (readonly, nonatomic) TSDStroke *defaultVerticalBorderStroke;
@property (readonly, nonatomic) TSDStroke *bodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *bodyRowStroke;
@property (readonly, nonatomic) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property (readonly, nonatomic) TSDStroke *headerColumnBorderStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBorderStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *headerRowBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *headerRowSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBorderStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBodyColumnStroke;
@property (readonly, nonatomic) TSDStroke *footerRowBodyRowStroke;
@property (readonly, nonatomic) TSDStroke *footerRowSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5TopStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5LabelSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5BottomStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel1InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel2InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel3InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel4InteriorStroke;
@property (readonly, nonatomic) TSDStroke *categoryLevel5InteriorStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotGroupHorizontalStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotGroupVerticalStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotDeEmphasisHorizontalStroke;
@property (readonly, nonatomic) TSDStroke *bodyPivotEmphasisVerticalStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnPivotGroupHorizontalStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnPivotGroupDeEmphasisStroke;
@property (readonly, nonatomic) TSDStroke *headerColumnPivotSeparatorStroke;
@property (readonly, nonatomic) TSDStroke *headerRowPivotGroupVerticalStroke;
@property (readonly, nonatomic) TSDStroke *headerRowPivotGroupDeEmphasisStroke;
@property (readonly, nonatomic) TSDStroke *headerRowPivotTitleStroke;
@property (readonly, nonatomic) TSDStroke *footerRowPivotGroupVerticalStroke;

+ (BOOL)needsObjectUUID;
+ (id)tableModelForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 withCalcEngine:(id)a1;
+ (long long)dateGroupingTypeForMinMaxDatePair:(id)a0;

- (void)willClose;
- (void)validate;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })range;
- (void)setColumnWidths:(id)a0;
- (void).cxx_destruct;
- (void)clearErrors;
- (void)dealloc;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyRange;
- (id).cxx_construct;
- (void)setRowHeights:(id)a0;
- (long long)evaluationMode;
- (id)sheetName;
- (void)adoptStylesheet:(id)a0 withMapper:(id)a1;
- (id)mixedObjectWithFraction:(double)a0 ofObject:(id)a1;
- (id)drawableInfo;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyRowRange;
- (id)unnamedTableString;
- (void)setStorageParentToInfo:(id)a0;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })headerRowRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })footerRowRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })headerColumnRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyColumnRange;
- (void)mapTableStylesToStylesheet:(id)a0 withMapper:(id)a1;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })cellRangeForTableArea:(unsigned long long)a0;
- (void)setHeight:(double)a0 ofRow:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (void)setWidth:(double)a0 ofColumn:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (void)upgradeFromPreUFF;
- (void)setStyleNetwork:(id)a0;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)a0;
- (void)loadFromUnarchiver:(id)a0;
- (void)saveToArchiver:(id)a0;
- (id)allRichTextStorages;
- (long long)mixingTypeWithObject:(id)a0 context:(id)a1;
- (void)registerWithCalcEngineForDocumentLoad:(id)a0 ownerKind:(unsigned short)a1;
- (void)unregisterFromCalcEngine:(id)a0;
- (id)formulaOwner;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })formulaOwnerUID;
- (id)objectToArchiveInDependencyTracker;
- (BOOL)registerLast;
- (unsigned short)ownerKind;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })ownerUID;
- (id)linkedResolver;
- (void)writeResultsForCalcEngine:(id)a0;
- (void)invalidateForCalcEngine:(id)a0;
- (struct TSCERecalculationState { unsigned char x0; })evaluateFormulaAt:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 withCalcEngine:(id)a1 recalcOptions:(struct TSCERecalculationState { unsigned char x0; })a2;
- (BOOL)hasCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForColumnIndex:(unsigned short)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowUIDForRowIndex:(unsigned int)a0;
- (unsigned long long)numberOfComments;
- (void)documentLocaleDidChange;
- (void)upgradeFormatsForCustomFormatListU2_0;
- (id)newCell;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })resolverUID;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })UIDsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isRows:(BOOL)a1;
- (unsigned int)rowIndexForRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)verifySubOwnerUIDsUsed;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })groupByUID;
- (id)mutableIndexesForUIDs:(const void *)a0 isRows:(BOOL)a1;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })UIDsForIndexes:(id)a0 isRows:(BOOL)a1;
- (id)mutableColumnIndexesForUIDs:(const void *)a0;
- (id)mutableRowIndexesForUIDs:(const void *)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })UIDForIndex:(unsigned int)a0 isRows:(BOOL)a1;
- (void)setIsRegisteredWithCalcEngine:(BOOL)a0;
- (unsigned short)columnIndexForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDsForColumnIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDsForRowIndexes:(id)a0;
- (id)UIDSetForIndexes:(id)a0 isRows:(BOOL)a1;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })tableRangeCoordinate;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDsForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDsForColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)rowIndexesForUIDs:(const void *)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })firstUidFromUIDSet:(id)a0 isRows:(BOOL)a1;
- (void)p_clearDefaultStyles;
- (void)validateTableStylesInSameStylesheetExpectingDocSS:(BOOL)a0;
- (id)initWithContext:(id)a0 tableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1 columnRowUIDMap:(id)a2 styles:(id)a3 stylePreset:(id)a4 tableInfo:(id)a5;
- (id)initWithContext:(id)a0 fromSourceModel:(id)a1 region:(id)a2 tableInfo:(id)a3 waitForCalcEngine:(BOOL)a4 formulaCoordSpace:(long long)a5;
- (id)initWithContext:(id)a0 rowUids:(const void *)a1 columnUids:(const void *)a2 styles:(id)a3 stylePreset:(id)a4 tableInfo:(id)a5;
- (double)heightOfRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (void)setHeight:(double)a0 ofRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (double)widthOfColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (unsigned long long)tableAreaForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)p_iterateDataStoreCellsInRegion:(id)a0 searchFlags:(unsigned long long)a1 usingBlock:(id /* block */)a2;
- (void)setStroke:(id)a0 forTopOfRow:(unsigned int)a1 order:(int)a2 columnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forBottomOfRow:(unsigned int)a1 order:(int)a2 columnRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forLeftOfColumn:(unsigned short)a1 order:(int)a2 rowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)setStroke:(id)a0 forRightOfColumn:(unsigned short)a1 order:(int)a2 rowRange:(struct TSTSimpleRange { long long x0; unsigned long long x1; })a3;
- (void)p_updateMergesAndCellsAsPivotDataWithSourceModel:(id)a0 sourceRegion:(id)a1 sourceBodyRegion:(id)a2;
- (void)updateTableRowColumnStylesWithBlock:(id /* block */)a0;
- (void)updateCalcEngineForTableSize;
- (void)removeRowsAtBaseIndexes:(id)a0;
- (int)setCellsWithBaseCellMap:(id)a0 ignoreFormulas:(BOOL)a1 skipDirtyingNonFormulaCells:(BOOL)a2;
- (BOOL)auditTilesForRowOverlapAndExtensionPastTableBounds:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 result:(id *)a1;
- (void)logTableTileAuditStatus:(BOOL)a0 withVersion:(unsigned long long)a1;
- (BOOL)p_auditTilesForRowOverlapAndExtensionPastTableBoundsWithVersion:(unsigned long long)a0;
- (BOOL)auditDatalistDuplicationReturningResult:(id *)a0;
- (BOOL)auditColumnRowCellCountsReturningResult:(id *)a0 hasUndercounts:(BOOL *)a1;
- (BOOL)confirmRefCountsReturningResult:(id *)a0;
- (BOOL)p_auditTableHealthUpgradingFromVersion:(unsigned long long)a0;
- (void)p_rebuildTheTable:(id)a0;
- (void)p_upgradeDefaultCellStylesForStrokeSidecar;
- (id)cellStyleForCellWithEmptyStyleAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)defaultCellStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)textStyleForCellWithEmptyStyleAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)defaultTextStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)prepareToApplyConcurrentCellMap:(id)a0;
- (void)accumulateCurrentCellsConcurrently:(id)a0 suppressCellBorder:(BOOL)a1;
- (void)setCellsConcurrently:(id)a0 ignoreFormula:(BOOL)a1 clearImportWarnings:(BOOL)a2 formulaReplacer:(id)a3;
- (void)didApplyConcurrentCellMap:(id)a0;
- (id)defaultCellStyleForTableStyleArea:(unsigned long long)a0;
- (id)defaultTextStyleForTableStyleArea:(unsigned long long)a0;
- (void)p_upgradeMerges;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })actualHeaderColumnRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })topCornerRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bottomCornerRange;
- (unsigned long long)tableStyleAreaForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)getDefaultCell:(out id)a0 forTableStyleArea:(unsigned long long)a1;
- (id)cellBorderAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (int)getCell:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 suppressCellBorder:(BOOL)a2;
- (BOOL)cellExistsAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)getCell:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (unsigned long long)numberOfPopulatedCells;
- (int)p_shouldAllowSetCell:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (int)setCell:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3 calcEngine:(id)a4;
- (int)p_shouldAllowApplyBaseCellMap:(id)a0;
- (id)textStyleAtModelCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (BOOL)hasCommentAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)commentHostingAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 forCommentStorage:(id)a1;
- (void)postCommentNotificationForStorage:(id)a0 baseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 notificationKey:(id)a2;
- (int)setCell:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3;
- (void)clearCommentHostingMapForCommentStorage:(id)a0;
- (int)setCellStyle:(id)a0 ofRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (int)setTextStyle:(id)a0 ofRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (int)setCellStyle:(id)a0 ofColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (int)setTextStyle:(id)a0 ofColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (id)defaultCellStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (id)defaultTextStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)a0;
- (struct { unsigned int x0; unsigned int x1; })p_tableSize;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })mergedRangeForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)removeRowsAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 count:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (void)removeColumnsAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 count:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (void)_removeAnnotationsFromDeleteRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (void)moveBaseRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (void)moveBaseColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a1;
- (void)swapRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 withRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a1;
- (unsigned char)headerInfo_hidingActionForRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (unsigned char)headerInfo_hidingActionForColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (id)columnNameForCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 restrictToBodyRange:(BOOL)a1;
- (id)displayNameForColumnAtIndex:(unsigned short)a0 derivation:(out long long *)a1;
- (id)cellStyleOfRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned short)a0;
- (id)strokeLayerForRightSideOfColumn:(unsigned short)a0;
- (id)strokeLayerForTopOfRow:(unsigned int)a0;
- (id)strokeLayerForBottomOfRow:(unsigned int)a0;
- (int)getValue:(out struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (int)getValue:(out struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2 skipPendingWrites:(BOOL)a3;
- (id)mapReassigningPasteboardCustomFormatKeys:(id)a0;
- (void)makePasteboardCustomFormatList;
- (void)updateCalculationEngineForFormula:(id)a0 inBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 usingCalcEngine:(id)a2;
- (void)assertListTilesAndRows;
- (id)initWithContext:(id)a0 fromSourceModel:(id)a1 region:(id)a2 tableInfo:(id)a3 waitForCalcEngine:(BOOL)a4;
- (BOOL)auditRowInfoCellCountsReturningResult:(id *)a0;
- (void)enumerateCellsForSOSSerializationWithBlock:(id /* block */)a0;
- (id)initWithContext:(id)a0 rows:(unsigned int)a1 columns:(unsigned int)a2 styles:(id)a3 stylePreset:(id)a4 tableInfo:(id)a5;
- (id)initAsPivotDataWithContext:(id)a0 tableInfo:(id)a1 sourceModel:(id)a2 sourceBody:(id)a3 sourceHeader:(id)a4;
- (void)resetForPivotingWithRowUids:(const void *)a0 columnUids:(const void *)a1 numberOfHeaderRows:(struct TSUModelRowIndex { unsigned int x0; })a2 numberOfHeaderColumns:(struct TSUModelColumnIndex { unsigned short x0; })a3;
- (void)updateMergesAndCellsAsPivotDataWithSourceModel:(id)a0;
- (BOOL)hasUsefulPivotDataInSourceBodyTract:(id)a0;
- (void)copyPivotDetailDataFromSourceModel:(id)a0 inSourceRegion:(id)a1 columnMapping:(id)a2 rowMapping:(id)a3;
- (unsigned char)pivotDataCellValueTypeForColumn:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)a0 tableInfo:(id)a1;
- (id)createPivotOwner;
- (void)clearPivotOwner;
- (void)setlabelLevel1CellStyle:(id)a0;
- (void)setlabelLevel2CellStyle:(id)a0;
- (void)setlabelLevel3CellStyle:(id)a0;
- (void)setlabelLevel4CellStyle:(id)a0;
- (void)setlabelLevel5CellStyle:(id)a0;
- (void)setlabelLevel1TextStyle:(id)a0;
- (void)setlabelLevel2TextStyle:(id)a0;
- (void)setlabelLevel3TextStyle:(id)a0;
- (void)setlabelLevel4TextStyle:(id)a0;
- (void)setlabelLevel5TextStyle:(id)a0;
- (id)metadataForRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 hidingAction:(unsigned char)a1;
- (id)metadataForColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 hidingAction:(unsigned char)a1;
- (void)resetSortRuleReferenceTrackerForInsert;
- (void)clearFromTableUID;
- (void)clearFromGroupByUID;
- (unsigned long long)tableAreaForRow:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (unsigned long long)tableAreaForColumn:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (unsigned long long)tableStyleAreaForRow:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (id)tableAreasForBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (int)getDefaultCell:(out id)a0 forBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (id)cellAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (BOOL)hasFormulaAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)formulaSyntaxErrorAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)formulaAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)formulaSpecAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)formatForCalcEngineAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 formatIsExplicitOut:(BOOL *)a1;
- (unsigned char)cellValueTypeAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)textStyleForCalcEngineAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (BOOL)hasCommentStorageAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)commentHostingAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)setCommentStorage:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (int)removeCommentStorageAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)textStyleOfRowAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleAtModelCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)conditionalStyleSetAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)computeDefaultRowHeight;
- (BOOL)hasNamesInHeaders;
- (int)insertRowsInBaseRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 uids:(const void *)a1 metadata:(id)a2 unsetFilterHidingAction:(BOOL)a3;
- (int)insertColumnsAtIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (int)insertRowsAtIndex:(struct TSUModelRowIndex { unsigned int x0; })a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3 unsetFilterHidingAction:(BOOL)a4;
- (void)removeColumnsAtBaseIndexes:(id)a0;
- (void)removeAnnotationsFromRowsAtBaseIndexes:(id)a0;
- (void)removeAnnotationsFromColumnsAtBaseIndexes:(id)a0;
- (void)upgradeHiddenStates;
- (id)hiddenStateFormulaOwnerForRows;
- (id)hiddenStateFormulaOwnerForColumns;
- (void)setHidingState:(unsigned char)a0 atRowIndex:(const struct TSUModelRowIndex { unsigned int x0; } *)a1;
- (void)setHidingState:(unsigned char)a0 atColumnIndex:(const struct TSUModelColumnIndex { unsigned short x0; } *)a1;
- (id)stringAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 optionalCell:(id)a1;
- (id)regionForValueOrCommentCellsInBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)displayNameForColumnAtIndex:(unsigned short)a0;
- (id)fillForRow:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (int)maxStrokeOrder;
- (void)setStroke:(id)a0 forTopOfRow:(unsigned int)a1 order:(int)a2;
- (void)setStroke:(id)a0 forBottomOfRow:(unsigned int)a1 order:(int)a2;
- (void)setStroke:(id)a0 forLeftOfColumn:(unsigned short)a1 order:(int)a2;
- (void)setStroke:(id)a0 forRightOfColumn:(unsigned short)a1 order:(int)a2;
- (id)cellValueFromCell:(id)a0 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (id)cellValueAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (void)setFormulaOwnerUIDsWithMap:(id)a0 shouldStealReferences:(BOOL)a1;
- (void)remapTableUIDsInFormulasWithMap:(const void *)a0 calcEngine:(id)a1 bakeForBadRefs:(BOOL)a2;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (void)copyPasteboardCustomFormatsFromTableModel:(id)a0;
- (void)registerAllFormulasWithCalculationEngine:(id)a0 wasCrossDocumentPaste:(BOOL)a1 infoIsCategorized:(BOOL)a2 wasUndo:(BOOL)a3;
- (void)prepareForPasteWithCalculationEngine:(id)a0 sourceOffset:(struct TSUColumnRowOffset { int x0; int x1; })a1 bakeFormulas:(BOOL)a2;
- (BOOL)hasFormulas;
- (struct TSCECellCoordSet { struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>> { unsigned long long x0; } x2; } x0; } x0; })cellsModifiedInCurrentRecalcCycle;
- (void)addCellRefToClearError:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)allDataAsString;
- (void)assertCollaborationConvergence;
- (BOOL)hasImportWarnings;
- (BOOL)hasControls;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForCellContainingRichTextStorage:(id)a0;
- (int)shouldAllowApplyConcurrentCellMap:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDs;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDs;
- (BOOL)isRegisteredWithCalcEngine:(id)a0;
- (int)registerWithCalcEngine:(id)a0 ownerKind:(unsigned short)a1;
- (int)linkToCalcEngine:(id)a0 ownerKind:(unsigned short)a1;
- (void)performReadForOneOffFormulaEvaluation:(id)a0 forCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })orderedRowUidsFromUids:(const void *)a0;
- (id)columnIndexesForUIDs:(const void *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })orderedColumnUidsFromUids:(const void *)a0;
- (void)getUUIDBytes:(unsigned char[16])a0 forRowIndex:(unsigned int)a1;
- (void)getUUIDBytes:(unsigned char[16])a0 forColumnIndex:(unsigned short)a1;
- (unsigned int)rowIndexForUUIDBytes:(unsigned char[16])a0;
- (unsigned short)columnIndexForUUIDBytes:(unsigned char[16])a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })prunedColumnUIDsFromColumnUIDs:(const void *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })prunedRowUIDsFromRowUIDs:(const void *)a0;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1;
- (id)mutableIndexesForUIDSet:(id)a0 isRows:(BOOL)a1 notFoundUIDs:(id)a2;
- (id)rowUuids;
- (id)columnUuids;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rowRangeForUIDs:(const void *)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })columnRangeForUIDs:(const void *)a0;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })cellRangeForUIDRange:(const void *)a0;
- (struct TSKUIDStructTract { struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; } x0; struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; } x1; })cellUIDRangeForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)notifyTableOfNewResults;
- (void)resetDependenciesForCell:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)UIDSetForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isRows:(BOOL)a1;
- (int)registerWithCalcEngine:(id)a0 ownerKind:(unsigned short)a1 linkOnly:(BOOL)a2;

@end

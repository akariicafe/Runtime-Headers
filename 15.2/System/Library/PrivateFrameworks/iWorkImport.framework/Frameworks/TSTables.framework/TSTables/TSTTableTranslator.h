@class NSString, NSArray, TSTTableInfo, TSTGroupBy, TSCECoordMapper, TSTColumnRowUIDMap, TSTTableGroupSortOrderUID, TSTTableModel;

@interface TSTTableTranslator : NSObject <TSCETableTranslatorProtocol> {
    TSCECoordMapper *_coordMapper;
}

@property (nonatomic) TSTTableInfo *tableInfo;
@property (nonatomic) BOOL wasCut;
@property (readonly, nonatomic) struct TSUViewRowIndex { unsigned int x0; } numberOfRows;
@property (readonly, nonatomic) struct TSUViewColumnIndex { unsigned short x0; } numberOfColumns;
@property (readonly, nonatomic) struct TSUViewColumnIndex { unsigned short x0; } numberOfCategoryColumns;
@property (readonly, nonatomic) struct TSUViewColumnIndex { unsigned short x0; } numberOfGrandTotalColumns;
@property (nonatomic) struct TSUViewRowIndex { unsigned int x0; } numberOfHeaderRows;
@property (nonatomic) struct TSUViewColumnIndex { unsigned short x0; } numberOfHeaderColumns;
@property (nonatomic) struct TSUViewRowIndex { unsigned int x0; } numberOfFooterRows;
@property (readonly, nonatomic) struct TSUViewRowIndex { unsigned int x0; } numberOfFooterOrGrandTotalRows;
@property (readonly, nonatomic) unsigned int minNumberOfHeaderColumns;
@property (readonly, nonatomic) unsigned int maxNumberOfHeaderColumns;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } range;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } bodyRange;
@property (readonly, nonatomic) BOOL isCategorized;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } bodyColumnRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } bodyRowRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } headerRowRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } footerRowRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } headerColumnRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } actualHeaderColumnRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } topCornerRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } bottomCornerRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } categoryColumnRange;
@property (readonly, nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; } baseColumnRange;
@property (readonly, nonatomic) TSTTableModel *baseTableModel;
@property (readonly, nonatomic) TSTColumnRowUIDMap *baseMap;
@property (readonly, nonatomic) TSTColumnRowUIDMap *summaryMap;
@property (readonly, nonatomic) TSTColumnRowUIDMap *viewMap;
@property (readonly, nonatomic) BOOL isGroupedForRows;
@property (readonly, nonatomic) BOOL isGroupedForColumns;
@property (readonly, nonatomic) TSTGroupBy *groupByForRows;
@property (readonly, nonatomic) TSTGroupBy *groupByForColumns;
@property (readonly, nonatomic) unsigned long long numberOfRowLevels;
@property (readonly, nonatomic) unsigned long long numberOfColumnLevels;
@property (readonly, nonatomic) unsigned char minRowLevel;
@property (readonly, nonatomic) unsigned char minColumnLevel;
@property (readonly, nonatomic) unsigned char maxRowLevel;
@property (readonly, nonatomic) unsigned char maxColumnLevel;
@property (readonly, nonatomic) unsigned char maxVisibleRowLevel;
@property (readonly, nonatomic) unsigned char maxVisibleColumnLevel;
@property (readonly, nonatomic) unsigned long long numberOfPopulatedCells;
@property (readonly, nonatomic) unsigned long long numberOfComments;
@property (nonatomic) TSTTableGroupSortOrderUID *groupSortOrder;
@property (readonly, retain, nonatomic) NSArray *rowHeights;
@property (readonly, retain, nonatomic) NSArray *columnWidths;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)teardown;
- (void).cxx_destruct;
- (id)init;
- (double)widthOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)documentRoot;
- (void)removeRowsAtIndexes:(id)a0;
- (unsigned long long)tableAreaForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })cellRangeForTableArea:(unsigned long long)a0;
- (BOOL)hasMergeRanges;
- (id)initWithTableInfo:(id)a0;
- (id)mergedGridIndicesForDimension:(long long)a0;
- (id)objectLocale;
- (id)baseCellRegionForViewCellRegion:(id)a0;
- (unsigned char)rowGroupLevelAtRow:(struct TSUViewRowIndex { unsigned int x0; })a0 outAggregateIndex:(unsigned long long *)a1;
- (unsigned char)columnGroupLevelAtColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0 outAggregateIndex:(unsigned long long *)a1;
- (unsigned long long)aggregateIndexForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned long long)aggregateIndexForRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)viewTractRefForBaseTractRef:(id)a0;
- (struct TSUModelRowIndex { unsigned int x0; })baseRowIndexForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)chromeTractRefForBaseTractRef:(id)a0;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForChromeCellCoord:(struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewColumnIndex { unsigned short x0; })viewColumnIndexForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (struct TSUViewColumnIndex { unsigned short x0; })viewColumnIndexForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSUModelColumnIndex { unsigned short x0; })baseColumnIndexForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)viewCellRegionForBaseCellRegion:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowUIDForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (id)baseTractRefForViewTractRef:(id)a0;
- (id)indexesForSummaryRows;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)a0;
- (id)viewCellRegionForBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (int)setCellsWithCellMap:(id)a0 ignoreFormulas:(BOOL)a1 skipDirtyingNonFormulaCells:(BOOL)a2;
- (int)getCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (struct TSUViewColumnIndex { unsigned short x0; })viewColumnIndexForChromeColumnIndex:(struct TSUChromeColumnIndex { unsigned short x0; })a0;
- (struct TSUViewRowIndex { unsigned int x0; })viewRowIndexForChromeRowIndex:(struct TSUChromeRowIndex { unsigned int x0; })a0;
- (struct TSUChromeColumnIndex { unsigned short x0; })chromeColumnIndexForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (struct TSUViewRowIndex { unsigned int x0; })viewRowIndexForBaseRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (struct TSUChromeRowIndex { unsigned int x0; })chromeRowIndexForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)viewColumnIndexesForBaseColumnIndexes:(id)a0;
- (struct TSUModelColumnIndex { unsigned short x0; })baseColumnIndexForChromeColumnIndex:(struct TSUChromeColumnIndex { unsigned short x0; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })baseRowIndexForChromeRowIndex:(struct TSUChromeRowIndex { unsigned int x0; })a0;
- (struct TSUChromeColumnIndex { unsigned short x0; })chromeColumnIndexForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (struct TSUChromeRowIndex { unsigned int x0; })chromeRowIndexForBaseRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (struct TSUModelColumnIndex { unsigned short x0; })summaryColumnIndexForViewColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })summaryRowIndexForViewRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })chromeCellCoordForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })chromeCellCoordForViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForChromeCellCoord:(struct TSUChromeCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)viewTractRefForChromeTractRef:(id)a0;
- (id)baseColumnIndexesForViewColumnIndexes:(id)a0;
- (id)baseRowIndexesForViewRowIndexes:(id)a0;
- (id)chromeTractRefForViewTractRef:(id)a0;
- (id)chromeColumnIndexesForViewColumnIndexes:(id)a0;
- (id)chromeRowIndexesForViewRowIndexes:(id)a0;
- (id)viewRowIndexesForBaseRowIndexes:(id)a0;
- (id)viewColumnIndexesForChromeColumnIndexes:(id)a0;
- (id)viewRowIndexesForChromeRowIndexes:(id)a0;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })summaryCellCoordForViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })viewCellCoordForSummaryCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct RefTypeHolder<TSCECellRef, 0> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })baseCellRefForViewCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCECellRef, 2> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })chromeCellRefForBaseCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCECellRef, 2> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })chromeCellRefForViewCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCECellRef, 1> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })viewCellRefForBaseCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCECellRef, 1> { struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })viewCellRefForChromeCellRef:(const void *)a0;
- (struct RefTypeHolder<TSCERangeRef, 2> { struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })chromeRangeRefForViewRangeRef:(const void *)a0;
- (struct RefTypeHolder<TSCERangeRef, 1> { struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; })viewRangeRefForChromeRangeRef:(const void *)a0;
- (id)baseTractRefForChromeTractRef:(id)a0;
- (id)baseShuffleMapForViewShuffleMap:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })rowUIDForBaseRowIndex:(struct TSUModelRowIndex { unsigned int x0; })a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })columnUIDForBaseColumnIndex:(struct TSUModelColumnIndex { unsigned short x0; })a0;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })expandCellRangeToCoverMergedCells:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })mergeOriginForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)indexesForSummaryColumns;
- (id)indexesForSummaryAndLabelRows;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })mergeRangeAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)getCell:(id)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (struct vector<TSUViewCellRect, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; struct TSUViewCellRect *x1; struct __compressed_pair<TSUViewCellRect *, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; } x2; })mergeRangesIntersectingRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)initWithBaseTableModel:(id)a0;
- (double)heightOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (void)setHeight:(double)a0 ofRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (double)widthOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (id)coordinateMapper;
- (id)defaultCellStyleForTableStyleArea:(unsigned long long)a0;
- (id)defaultTextStyleForTableStyleArea:(unsigned long long)a0;
- (int)getDefaultCell:(out id)a0 forTableStyleArea:(unsigned long long)a1;
- (BOOL)cellExistsAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (BOOL)hasFormulaAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)formulaAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)conditionalStyleSetAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (double)heightOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)a0;
- (void)removeColumnsAtIndexes:(id)a0;
- (void)removeRowsAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 count:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (void)removeColumnsAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 count:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (void)swapRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 withRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (id)cellStyleOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (void)addReceiverToGroupBy:(id)a0;
- (unsigned long long)tableAreaForRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned long long)tableAreaForColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned long long)tableStyleAreaForRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)textStyleOfRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (id)textStyleOfColumnAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 isDefault:(out BOOL *)a1;
- (int)insertColumnsAtIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3;
- (int)insertRowsAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0 uids:(const void *)a1 metadatas:(id)a2 tableArea:(unsigned long long)a3 unsetFilterHidingAction:(BOOL)a4;
- (id)expandCellRegionToCoverMergedCells:(id)a0;
- (int)setCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3;
- (unsigned char)groupLevelAtSummaryRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned char)groupLevelAtSummaryColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (unsigned int)columnAggregateGroupSize;
- (unsigned int)rowAggregateGroupSize;
- (id)defaultCellStyleForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (id)defaultTextStyleForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 useSoftDefault:(BOOL)a1 outSource:(out unsigned long long *)a2;
- (void)removeAnnotationsFromRowsAtIndexes:(id)a0;
- (void)removeAnnotationsFromColumnsAtIndexes:(id)a0;
- (BOOL)hasCommentAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)setCommentStorage:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (int)removeCommentStorageAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)postCommentNotificationForStorage:(id)a0 atViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 notificationKey:(id)a2;
- (id)commentHostingAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 forCommentStorage:(id)a1;
- (id)commentHostingAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)textStyleAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellStyleAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 isDefault:(out BOOL *)a1;
- (id)cellRegionForTableStyleArea:(unsigned long long)a0;
- (unsigned long long)tableAreaForDroppingRowAtIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (unsigned long long)tableStyleAreaForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (int)getDefaultCell:(out id)a0 forCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (int)getCell:(id)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 suppressCellBorder:(BOOL)a2;
- (BOOL)hasFormulaAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (int)setCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 ignoreFormula:(BOOL)a2 clearImportWarnings:(BOOL)a3 formulaReplacer:(id)a4;
- (id)mergeActionForRegion:(id)a0;
- (unsigned char)cellValueTypeAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (unsigned char)cellValueTypeAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (int)setCellStyle:(id)a0 ofRowAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (int)setTextStyle:(id)a0 ofRowAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (int)setCellStyle:(id)a0 ofColumnAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (int)setTextStyle:(id)a0 ofColumnAtUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)cellStyleAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)textStyleAtCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 isDefault:(out BOOL *)a1;
- (id)translatedCellRangeName:(const void *)a0 usedSymbolicName:(out BOOL *)a1;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyRangeForLowestLevelGroupEnclosingCellAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)moveRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a1;
- (void)moveColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a1;
- (id)stringAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 optionalCell:(id)a1;
- (id)characterFillAtCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0 optionalCell:(id)a1;
- (BOOL)mergeCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)unmergeCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)mergeRangesPartiallyIntersectCellRegion:(id)a0;
- (BOOL)hasMergeRangeSpanningRowsForCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)hasMergeRangesIntersectingCellRegion:(id)a0;
- (id)regionForValueOrCommentCellsInRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)hasRangeSpanningRowsForCellRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)shrinkReturningInverseForRegion:(id)a0;
- (id)removeReturningInverseForRegion:(id)a0;
- (id)mergeActionForRegion:(id)a0 nonOriginPartialsOnly:(BOOL)a1;
- (void)enumerateMergesIntersectingCellRegion:(id)a0 usingBlock:(id /* block */)a1;
- (struct vector<TSUViewCellRect, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; struct TSUViewCellRect *x1; struct __compressed_pair<TSUViewCellRect *, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; } x2; })mergeRangesIntersectingCellRegion:(id)a0;
- (struct vector<TSUViewCellRect, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; struct TSUViewCellRect *x1; struct __compressed_pair<TSUViewCellRect *, std::allocator<TSUViewCellRect>> { struct TSUViewCellRect *x0; } x2; })mergeRangesAndCrumbsIntersectingRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (BOOL)isValidMergeRange:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (int)getValue:(out struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1 fetchRichTextAttributesIfPlainText:(BOOL)a2;
- (id)cellValueFromCell:(id)a0 atCellID:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a1;
- (struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })cellIDForCellContainingRichTextStorage:(id)a0;
- (id)indexesForLabelRows;
- (unsigned char)groupLevelAtLabelRow:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)a0;
- (int)getDefaultCell:(out id)a0 forCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (int)getCell:(id)a0 atCellUID:(const struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1 suppressCellBorder:(BOOL)a2;
- (BOOL)checkMapsAndAssert:(BOOL)a0;
- (void)resetViewMap;
- (id)populatedCategoryGroupLevelsInColumn:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (id)indexesForGrandTotalRows;
- (id)indexesForGrandTotalColumns;
- (id)indexesForLeadingRows;
- (id)indexesForLeadingColumns;
- (id)allRowGroupUIDs;
- (id)allColumnGroupUIDs;
- (id)indexesForRowsContainedByGroupUIDs:(id)a0;
- (id)indexesForColumnsContainedByGroupUIDs:(id)a0;
- (id)indexesForSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingSummaryRowsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingColumnsAtGroupLevel:(unsigned char)a0;
- (id)indexesForLeadingSummaryColumnsAtGroupLevel:(unsigned char)a0;
- (id)peerCellRegionForCellRegion:(id)a0;
- (void)didMakeGroupingChangesInRowUIDs:(id)a0;
- (Class)iteratorClass;
- (id)viewColumnIndexesForUIDs:(const void *)a0;
- (id)viewRowIndexesForUIDs:(const void *)a0;
- (void)flushCachedIndexSets;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })baseCellCoordForCellUID:(struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
- (struct TSUViewRowIndex { unsigned int x0; })viewRowIndexForRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)metadataForColumnIndex:(struct TSUViewColumnIndex { unsigned short x0; })a0;
- (struct TSUModelRowIndex { unsigned int x0; })baseRowIndexForRowUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSUModelColumnIndex { unsigned short x0; })baseColumnIndexForColumnUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)areMapsStale;
- (id)mutableBaseRowIndexesForUIDs:(const void *)a0;
- (id)mutableBaseColumnIndexesForUIDs:(const void *)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDsForBaseColumnIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDsForBaseRowIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })columnUIDsForViewColumnIndexes:(id)a0;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })rowUIDsForViewRowIndexes:(id)a0;
- (id)baseColumnIndexesForUIDs:(const void *)a0;
- (id)baseRowIndexesForUIDs:(const void *)a0;
- (id)viewColumnGridIndexesForBaseColumnGridIndexes:(id)a0;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })bodyBoundingRangeForBaseLevel;
- (id)metadataForRowIndex:(struct TSUViewRowIndex { unsigned int x0; })a0;
- (struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })cellUIDforBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (struct TSKUIDStructCoord { struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })cellUIDForSummaryCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; })a0;
- (id)baseCellRegionForUIDRange:(const void *)a0;
- (id)baseCellRegionForViewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; })a0;
- (id)cellAtGroupLevel:(unsigned char)a0 columnUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)forceGroupingChangeReset;
- (void)resetViewMapAndNotify;

@end

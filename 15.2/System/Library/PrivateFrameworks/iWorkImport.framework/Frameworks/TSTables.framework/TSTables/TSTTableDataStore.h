@class TSKCustomFormatList, TSTTableTileStorage, TSPLazyReference, NSMutableDictionary, TSTTableDataList, TSTTableHeaderStorage, NSObject, TSTMergeRegionMap;
@protocol TSDContainerInfo, TSWPStorageParent;

@interface TSTTableDataStore : TSPContainedObject <TSTCompatibilityVersionProviding> {
    _Atomic int _iteratorRunningCount;
    struct vector<TSUCellRect, std::allocator<TSUCellRect>> { struct TSUCellRect *__begin_; struct TSUCellRect *__end_; struct __compressed_pair<TSUCellRect *, std::allocator<TSUCellRect>> { struct TSUCellRect *__value_; } __end_cap_; } _mergedRects;
    TSTTableDataList *_styleDataList;
    TSTTableDataList *_conditionalStyleSetDataList;
    TSTTableDataList *_stringDataList;
    TSTTableDataList *_formulaDataList;
    TSTTableDataList *_controlCellSpecDataList;
    TSTTableDataList *_formulaErrorDataList;
    TSTTableDataList *_richTextDataList;
    TSTTableDataList *_formatDataList;
    TSTTableDataList *_commentStorageDataList;
    TSTTableDataList *_importWarningSetDataList;
    TSTTableDataList *_preBNCFormatDataList;
    BOOL _foundABadDatalistKey;
}

@property (retain, nonatomic) TSTTableTileStorage *tileStorage;
@property (retain, nonatomic) TSTTableHeaderStorage *rowHeaderStorage;
@property (retain, nonatomic) TSTTableHeaderStorage *columnHeaderStorage;
@property (retain, nonatomic) TSPLazyReference *styleTableReference;
@property (retain, nonatomic) TSPLazyReference *conditionalStyleSetTableReference;
@property (retain, nonatomic) TSPLazyReference *stringTableReference;
@property (retain, nonatomic) TSPLazyReference *formulaTableReference;
@property (retain, nonatomic) TSPLazyReference *controlCellSpecTableReference;
@property (retain, nonatomic) TSPLazyReference *formulaErrorTableReference;
@property (retain, nonatomic) TSPLazyReference *richTextTableReference;
@property (retain, nonatomic) TSPLazyReference *formatTableReference;
@property (retain, nonatomic) TSPLazyReference *commentStorageTableReference;
@property (retain, nonatomic) TSPLazyReference *importWarningSetTableReference;
@property (retain, nonatomic) TSPLazyReference *preBNCFormatTableReference;
@property (readonly, nonatomic) TSTTableDataList *multipleChoiceListFormatDataList;
@property (weak, nonatomic) NSObject<TSDContainerInfo, TSWPStorageParent> *richTextParentInfo;
@property (retain, nonatomic) TSKCustomFormatList *pasteboardCustomFormatList;
@property (retain, nonatomic) NSMutableDictionary *pasteboardCustomFormatMap;
@property (retain, nonatomic) TSTMergeRegionMap *mergedCellRanges;
@property (nonatomic) unsigned int cellCount;
@property (nonatomic) BOOL cellCountValid;
@property (nonatomic) unsigned char storageVersionPreBNC;
@property (nonatomic) BOOL missingPostBNCDatalists;
@property (readonly, nonatomic) BOOL hasMigratableStylesInCells;
@property (readonly, nonatomic) unsigned int numberOfPopulatedCells;
@property (readonly, nonatomic) unsigned int numberOfConditionalStyles;
@property (readonly, nonatomic) unsigned long long numberOfComments;
@property (readonly, nonatomic) BOOL hasPasteboardCustomFormats;
@property (nonatomic) BOOL upgrading;
@property (nonatomic) BOOL shouldUseWideRows;
@property (readonly, nonatomic) unsigned long long archivingCompatibilityVersion;

- (void).cxx_destruct;
- (id)initWithOwner:(id)a0;
- (id).cxx_construct;
- (double)widthOfColumnAtIndex:(unsigned short)a0;
- (void)setStorageParentToInfo:(id)a0;
- (id)initWithArchive:(const void *)a0 unarchiver:(id)a1 owner:(id)a2;
- (id)allRichTextStorages;
- (void)removeColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)removeRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)getCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)setHeight:(double)a0 ofRowAtIndex:(unsigned int)a1;
- (void)setWidth:(double)a0 ofColumnAtIndex:(unsigned short)a1;
- (BOOL)hasPasteboardCustomFormats;
- (void)copyPasteboardCustomFormatsFromDataStore:(id)a0;
- (void)setCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 calculationEngine:(id)a3 conditionalStyleOwner:(id)a4 ignoreFormula:(BOOL)a5 clearImportWarnings:(BOOL)a6 doRichTextDOLC:(BOOL)a7;
- (void)resetAlmostEverything;
- (void)resetAllColumnRowSizes;
- (void)enumerateCellStoragesRowByRowToMaxID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 getPreBNC:(BOOL)a1 withBlock:(id /* block */)a2;
- (BOOL)auditTilesForRowOverlapAndExtensionPastTableBounds:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 result:(id *)a1;
- (BOOL)auditDatalistDuplicationReturningResult:(id *)a0;
- (BOOL)auditColumnRowCellCountsReturningResult:(id *)a0 hasUndercounts:(BOOL *)a1;
- (BOOL)confirmRefCountsReturningResult:(id *)a0;
- (void)upgradeDataStoreCellStorageIfNeededWithTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0 conditionalStyleOwner:(id)a1;
- (BOOL)repairStyleDatalistStylesheetIfNecessary;
- (void)upgradeConditionalStylesToLinkedRefWithTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)embiggenTableForUpgrade;
- (void)forceLoadHeaderStorages;
- (void)prepareToApplyConcurrentCellMap:(id)a0;
- (void)didApplyConcurrentCellMap:(id)a0;
- (void)saveToArchive:(void *)a0 archiver:(id)a1 isInTheDocument:(BOOL)a2;
- (id)metadataForRowIndex:(unsigned int)a0 hidingAction:(unsigned char)a1 uuid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a2;
- (id)metadataForColumnIndex:(unsigned short)a0 hidingAction:(unsigned char)a1 uuid:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a2 defaultColumnWidth:(double)a3;
- (BOOL)cellExistsAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (BOOL)hasFormulaAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)setCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 calculationEngine:(id)a3 conditionalStyleOwner:(id)a4 ignoreFormula:(BOOL)a5 clearImportWarnings:(BOOL)a6;
- (id)formulaSyntaxErrorAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)formulaAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)formulaSpecAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)setCellMap:(id)a0 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 calculationEngine:(id)a2 conditionalStyleOwner:(id)a3 ignoreFormulas:(BOOL)a4 skipDirtyingNonFormulaCells:(BOOL)a5 doRichTextDOLC:(BOOL)a6;
- (id)formatForCalcEngineAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 formatIsExplicitOut:(BOOL *)a1 refIfAvailable:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a2;
- (struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)cellStorageRefAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (unsigned char)valueTypeAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)commentStorageAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)setCellStyle:(id)a0 ofRowAtIndex:(unsigned int)a1;
- (void)setTextStyle:(id)a0 ofRowAtIndex:(unsigned int)a1;
- (id)cellStyleOfRowAtIndex:(unsigned int)a0;
- (id)textStyleOfRowAtIndex:(unsigned int)a0;
- (void)setCellStyle:(id)a0 ofColumnAtIndex:(unsigned short)a1;
- (void)setTextStyle:(id)a0 ofColumnAtIndex:(unsigned short)a1;
- (id)cellStyleOfColumnAtIndex:(unsigned short)a0;
- (id)textStyleOfColumnAtIndex:(unsigned short)a0;
- (id)cellStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)textStyleAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (double)heightOfRowAtIndex:(unsigned int)a0;
- (void)insertRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)updateRowHeaderAtIndex:(unsigned int)a0 fromMetadata:(id)a1;
- (void)insertColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)updateColumnHeaderAtIndex:(unsigned short)a0 fromMetadata:(id)a1;
- (void)moveRowIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toIndex:(unsigned int)a1;
- (void)moveColumnIndexRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 toIndex:(unsigned short)a1;
- (void)swapRowAtIndex:(unsigned int)a0 withRowAtIndex:(unsigned int)a1;
- (unsigned char)hidingStateOfRowAtIndex:(unsigned int)a0;
- (unsigned char)hidingStateOfColumnAtIndex:(unsigned short)a0;
- (void)setHidingState:(unsigned char)a0 ofRowAtIndex:(unsigned int)a1;
- (void)setHidingState:(unsigned char)a0 ofColumnAtIndex:(unsigned short)a1;
- (id)stringAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; })tsceValueFromCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (void)tsceValueForCellStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 cellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 outValue:(struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a3;
- (void)replaceFormulasUsingBlock:(id /* block */)a0;
- (void)replaceConditionalStyleSetsUsingBlock:(id /* block */)a0;
- (id)addPasteboardCustomFormat:(id)a0 toDocument:(id)a1 updatingPasteboardFormat:(BOOL)a2;
- (void)clearPasteboardCustomFormatMap;
- (id)mapReassigningPasteboardCustomFormatKeys:(id)a0;
- (void)makePasteboardCustomFormatList;
- (BOOL)containsFormulas;
- (void)updateHeaderStorageStylesWithBlock:(id /* block */)a0;
- (void)assertListTilesAndRows;
- (void)upgradeCellFormatsU2_0;
- (struct vector<TSUCellRect, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; struct TSUCellRect *x1; struct __compressed_pair<TSUCellRect *, std::allocator<TSUCellRect>> { struct TSUCellRect *x0; } x2; })mergedRects;
- (BOOL)containsImportWarnings;
- (BOOL)containsControlCellSpecs;
- (BOOL)auditRowInfoCellCountsReturningResult:(id *)a0;
- (struct vector<TSTCell *, std::allocator<TSTCell *>> { id *x0; id *x1; struct __compressed_pair<TSTCell *__strong *, std::allocator<TSTCell *>> { id *x0; } x2; })accumulateCurrentCellsConcurrentlyInRow:(struct TSUModelRowIndex { unsigned int x0; })a0 rowInfo:(id)a1 atColumns:(void *)a2 usingCellCreationBlock:(id /* block */)a3;
- (void)updateDataListsConcurrentlyWithConcurrentCellMap:(id)a0 clearImportWarnings:(BOOL)a1;
- (void)setCellsConcurrently:(id)a0 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 calculationEngine:(id)a2 conditionalStyleOwner:(id)a3 ignoreFormula:(BOOL)a4 clearImportWarnings:(BOOL)a5;
- (void)resolveDataListKeysForPreBNCCell:(id)a0 suppressTransmutation:(BOOL)a1 sourceStorageVersion:(unsigned char)a2;
- (void)enumerateCellStoragesInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0 withBlock:(id /* block */)a1;
- (id)formulaSpecForStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0;
- (id)i_tileStartingAtOrBeforeRowIndex:(unsigned int)a0 outTileRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)i_tileStartingAtOrAfterRowIndex:(unsigned int)a0 outTileRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)i_rowInfoAtIndex:(unsigned int)a0;
- (void)resolveDataListKeysForCell:(id)a0 suppressTransmutation:(BOOL)a1 sourceStorageVersion:(unsigned char)a2;
- (id)styleDataList;
- (id)richTextDataList;
- (id)formulaErrorDataList;
- (void)decrementColumnCellCount:(unsigned short)a0 byAmount:(unsigned long long)a1;
- (void)p_updateNumberOfPopulatedCells;
- (id)conditionalStyleSetDataList;
- (id)commentStorageDataList;
- (id)stringDataList;
- (id)formatDataList;
- (id)populatedCustomFormat:(id)a0 value:(double)a1;
- (id)formulaDataList;
- (id)importWarningSetDataList;
- (id)controlCellSpecDataList;
- (id)preBNCFormatDataList;
- (void)_setCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 tableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 calculationEngine:(id)a3 conditionalStyleOwner:(id)a4 ignoreFormula:(BOOL)a5 clearImportWarnings:(BOOL)a6 richTextDOLCHint:(BOOL *)a7;
- (void)assertIsNotIterating;
- (struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned short x9; })p_preBNCKeysForCell:(id)a0 atCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)incrementCellCountsAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)decrementCellCountsAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned short x9; })p_preBNCKeysForCell:(id)a0 oldPreBNCStorageRef:(struct { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned short x5 : 16; unsigned short x6 : 16; } x0; unsigned char x1[0]; } *)a1 callWillModify:(BOOL)a2;
- (struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned short x9; })p_updatePreBNCDataListsForCurrentFormat:(id)a0 numberFormat:(id)a1 currencyFormat:(id)a2 dateFormat:(id)a3 durationFormat:(id)a4 baseFormat:(id)a5 customFormat:(id)a6 stepperSliderFormat:(id)a7 mcListFormat:(id)a8 oldPreBNCStorageRef:(struct { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned short x5 : 16; unsigned short x6 : 16; } x0; unsigned char x1[0]; } *)a9 callWillModify:(BOOL)a10;
- (void)p_stashBadKey:(unsigned long long)a0 forList:(id)a1;
- (id)p_preBNCpopulatedCustomFormat:(id)a0 value:(double)a1;
- (id)p_populatedMultipleChoiceListFormat:(id)a0;
- (void)p_clearDataListEntriesForStorageRef:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a0 cellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1;
- (void)p_clearDataListEntriesInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct { unsigned int x0; unsigned int x1; } x1; })a0;
- (void)p_loadDatalist:(id *)a0 forLazyReference:(id)a1 completionBlock:(id /* block */)a2;
- (void)p_loadDatalist:(id *)a0 forLazyReference:(id)a1;
- (id)p_makeALazyDatalistOfType:(int)a0 isNewForBNC:(BOOL)a1;
- (id)p_makeALazyDatalistOfType:(int)a0;
- (id)p_pasteboardCustomFormatList;
- (id)p_pasteboardCustomFormatMap;
- (BOOL)_needToUpgradeCellStorage;
- (id)p_cellMapForUpgradingToBraveNewCell;
- (id)stringForCalcEngineAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 refIfAvailable:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a1;
- (id)richTextStorageForCalcEngineAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0 refIfAvailable:(struct TSTCellStorage { struct { unsigned char x0; unsigned char x1 : 8; unsigned short x2 : 16; unsigned short x3 : 16; unsigned short x4 : 16; unsigned int x5 : 32; } x0; unsigned char x1[0]; } *)a1;
- (unsigned long long)cellCountOfRowAtIndex:(unsigned int)a0;
- (unsigned long long)cellCountOfColumnAtIndex:(unsigned short)a0;
- (BOOL)hasFormulaSyntaxErrorAtCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a0;
- (void)addPasteboardCustomFormatFromCell:(id)a0;
- (id)setupEmptyPasteboardCustomFormatList;
- (void)beginIteration;
- (void)endIteration;
- (id)copyWithOwner:(id)a0;

@end

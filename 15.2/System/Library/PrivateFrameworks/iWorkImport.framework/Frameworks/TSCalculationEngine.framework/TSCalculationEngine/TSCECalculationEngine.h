@class NSDate, TSCERewritingMinion, TSCERewriteTableUIDInfo, TSCENamedReferenceManager, TSKAccessController, TSCERemoteDataStore, NSTimeZone, NSString, TSCETablesByName, TSKChangeNotifier, TSCETablesByNameDistributor, TSCETransaction, TSULocale;
@protocol TSCERefNamingProtocol, TSCERefParsingProtocol, TSKMultiTableRemapping, TSCEHeaderNameProtocol, TSCEFormulaReplacing;

@interface TSCECalculationEngine : TSPObject <TSCEFormulaReplacing> {
    BOOL _isUnarchiving;
    BOOL _calculationWillShutDown;
}

@property (nonatomic) void *cppCalcEngine;
@property (weak, nonatomic) TSKAccessController *accessController;
@property (weak, nonatomic) TSKChangeNotifier *changeNotifier;
@property (retain) NSDate *currentDate;
@property (retain) NSTimeZone *currentTimeZone;
@property (retain) TSULocale *locale;
@property int XLImportDateMode;
@property (readonly) NSString *previousLocaleIdentifier;
@property (nonatomic) unsigned long long loadFromFileVersion;
@property (readonly, nonatomic) id<TSCEFormulaReplacing> upgradingFormulasMinion;
@property (nonatomic) BOOL needsSubOwnerIDUpgrade;
@property (readonly) TSCETablesByName *tablesByName;
@property (readonly) TSCETablesByNameDistributor *tableNameChangeDistributor;
@property (readonly) TSCETransaction *currentTransaction;
@property (retain, nonatomic) TSCERewritingMinion *rewritingMinion;
@property (readonly, nonatomic) BOOL shouldSendSetNowCommand;
@property (readonly) BOOL shouldAbortRecalculation;
@property (readonly) TSCERemoteDataStore *remoteDataStore;
@property (readonly, retain, nonatomic) id<TSCERefNamingProtocol> namer;
@property (readonly, retain, nonatomic) id<TSCERefParsingProtocol> refParser;
@property (readonly, retain, nonatomic) id<TSCEHeaderNameProtocol> headerNameMgr;
@property (readonly, nonatomic) TSCENamedReferenceManager *namedReferenceManager;
@property unsigned long long documentRandomSeed;
@property (readonly) TSCERewriteTableUIDInfo *tableUIDHistory;
@property (retain) id<TSKMultiTableRemapping> currentTableIdRemapper;
@property (nonatomic) BOOL duringRollback;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)localVariablesEnabled;
+ (void)pauseEvaluationForPotentialTermination;
+ (void)confirmTermination;
+ (void)resumeEvaluationIfNotTerminated;
+ (BOOL)isPotentiallyTerminating;
+ (unsigned long long)generateRandomSeed;
+ (unsigned long long)randomSeedFromRandomLo:(int)a0 hi:(int)a1;
+ (void)splitRandomSeed:(unsigned long long)a0 intoLo:(int *)a1 hi:(int *)a2;

- (void)applicationWillResignActive:(id)a0;
- (void)willClose;
- (void)applicationDidBecomeActive:(id)a0;
- (id)initWithContext:(id)a0;
- (void).cxx_destruct;
- (void)dealloc;
- (id)openTransaction;
- (id)documentRoot;
- (void)documentDidLoad;
- (id)packageLocator;
- (void)willModify;
- (BOOL)shouldDelayArchiving;
- (unsigned int)delayedArchivingPriority;
- (id)resolverMatchingName:(id)a0 contextResolver:(id)a1;
- (void)loadFromUnarchiver:(id)a0;
- (void)saveToArchiver:(id)a0;
- (id)documentLocale;
- (void)markIndirectCallsAsDirty;
- (void)pauseRecalculation;
- (void)resumeRecalculation;
- (struct TSKUIDStructVectorTemplate<TSKUIDStruct> { struct TSKUIDStruct *x0; struct TSKUIDStruct *x1; struct __compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>> { struct TSKUIDStruct *x0; } x2; })allRefResolverOwnerUIDs;
- (void)setOwnerUIDForLegacyGlobalID:(id)a0 ownerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (BOOL)ownerIsRegistered:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)emptyReferenceSetWrapper;
- (void)removeAllFormulasFromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)replaceFormulaAt:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 precedents:(id)a2 replaceOptions:(const struct TSCEReplaceFormulaOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x4; id x5; } *)a3;
- (void)removeFormulaAt:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (int)registerOwnerWithOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 owner:(id)a1 referenceResolver:(id)a2 baseOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a3 ownerKind:(unsigned short)a4;
- (void)markOwnerAsDirty:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)unregisterOwner:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSCETableResolver { void /* function */ **x0; } *)tableResolverForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)calcEngine;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct __compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; } x2; })formulaCoordsReferringToRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 fromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (id)valueGridForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hidingActionMask:(unsigned char)a2 error:(id *)a3;
- (BOOL)recalculationIsPaused;
- (void)clearLegacyGlobalIDs;
- (void)resumeRecalculationForBlock:(id /* block */)a0;
- (BOOL)allCellsAreClean;
- (BOOL)isRecalculationStarted;
- (void)blockUntilRecalcIsCompleteWithTimeout:(double)a0;
- (void)documentLocaleDidChange;
- (void)markDateTimeVolatileFunctionsAsDirtyForCurrentDateTime;
- (void)clearPreviousLocaleIdentifier;
- (void)pauseRecalculationSometimeSoon;
- (void)markLocaleVolatileFunctionsAsDirty;
- (long long)dirtyCellCount;
- (BOOL)isInCollaborationMode;
- (BOOL)rangeIsWithinTable:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCETableResolver { void /* function */ **x0; } *)tableOrLinkedResolverForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)replaceFormula:(id)a0 atCellCoord:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a1 inOwner:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a2;
- (void)replaceFormula:(id)a0 atCellCoord:(const struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } *)a1 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 replaceOptions:(struct TSCEReplaceFormulaOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x4; id x5; })a3;
- (void)removeFormulasAt:(const void *)a0;
- (void)resetFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)markCellRefAsDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)markRangeRefAsDirty:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)resolverForTableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (int)forwardRegisterOwnerWithOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 legacyGlobalID:(id)a1;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })ownerUIDForLegacyGlobalID:(id)a0 registeringIfNeeded:(BOOL)a1;
- (void *)dependencyTracker;
- (void)beginBatchingGroupCellDirtying;
- (void)endBatchingGroupCellDirtying;
- (struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> { id *x0; id *x1; struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> { id *x0; } x2; })categoryRefsForSpanningCategoryRef:(id)a0;
- (struct TSCECellRefSet { struct map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>> { struct __tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>> { unsigned long long x0; } x2; } x0; } x0; })cellDependentsOfCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (id)currentTimeZoneCalendar;
- (BOOL)referenceIsValid:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (unsigned char)aggregateTypeForCategoryRef:(id)a0;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct __compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; } x2; })cellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; })valuesForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 hidingActionMask:(unsigned char)a2 error:(id *)a3;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })uuidForTableUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 andIndex:(unsigned int)a1 direction:(BOOL)a2;
- (unsigned short)ownerKindForOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)cellIsInACycle:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })aggregateRangeRefForCategoryRef:(id)a0;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })mapOwnerUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)endTrackingNamesInTableForLegacyNRM:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (struct TSCEInternalCellRefSet { struct unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>> { struct __hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>> { float x0; } x3; } x0; } x0; })corruptCellRefs;
- (struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })formulaOwnerUIDForInternalFormulaOwnerID:(unsigned short)a0;
- (unsigned short)ownerKindForOwnerID:(unsigned short)a0;
- (void)resetCorruptCellRefs:(const void *)a0;
- (void)p_addApplicationNotification;
- (void)p_removeApplicationNotification;
- (id)referencesToDirty;
- (void)pauseRecalculationForBlock:(id /* block */)a0;
- (id)legacyGlobalIDStringToOwnerUIDMap;
- (void)setCurrentDate:(id)a0 timeZone:(id)a1 markVolatilesDirty:(BOOL)a2;
- (void)recalculateWithTimeout:(double)a0;
- (void)dirtyCellsForUpgrade;
- (void)beginUpgradingFormulasMode;
- (void)scheduleRepairingSpanningFormulasInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)setTableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 bodyRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a1 forTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
- (BOOL)verifyTableAndBodyRangesForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)ownerForOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)ownerForUUIDBytes:(unsigned char[16])a0;
- (BOOL)allOwnersRegistered;
- (BOOL)shouldForceRegisterAllTables;
- (void)enumerateFormulaOwnersUsingBlock:(id /* block */)a0;
- (unsigned long long)cellDependMemoryUseEstimate;
- (void)addSubOwnerAliasesForUpgrade:(id)a0;
- (void)upgradeToSubOwnerUIDForOwners:(id)a0;
- (BOOL)duringSubOwnerUIDUpgrade;
- (id)resolverForCellRef:(id)a0;
- (id)anyResolver;
- (id)resolverForTableID:(unsigned short)a0;
- (struct TSCETableResolver { void /* function */ **x0; } *)tableResolverForTableID:(unsigned short)a0;
- (struct TSCETableResolver { void /* function */ **x0; } *)tableResolverForRefResolver:(id)a0;
- (unsigned short)internalFormulaOwnerIDForFormulaOwnerUID:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (id)resolverContainerMatchingName:(id)a0;
- (id)resolverMatchingNameWithContextContainer:(id)a0 contextContainerName:(id)a1;
- (void)closeTransaction:(id)a0;
- (struct TSCERecalculationState { unsigned char x0; })updateCalculatedPrecedents:(void *)a0 forFormula:(id)a1 atCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a2 withState:(struct TSCERecalculationState { unsigned char x0; })a3;
- (void)removeFormulasFromRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)setError:(id)a0 forCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (void)clearErrorForCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)clearErrorForCells:(const void *)a0;
- (struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })rootCauseForErrorInCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 atRootCell:(BOOL *)a1;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct __compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; } x2; })formulaCoordsReferringToRange:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0 fromOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 skipSpanning:(BOOL)a2;
- (struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; struct TSUCellCoord *x1; struct __compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>> { struct TSUCellCoord *x0; } x2; })formulaCoordsInRange:(const struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (struct TSCECellCoordSet { struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>> { unsigned long long x0; } x2; } x0; } x0; })allFormulaCoordsInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasFormulaAt:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (BOOL)hasFormulaCellsUsingNowTodayRandom;
- (unsigned long long)dirtyCellCountInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)allCellsAreCleanNonBlocking;
- (struct TSCECellCoordSet { struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>> { unsigned long long x0; } x2; } x0; } x0; })cellsInACycleInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)cellWillBeModifiedInCurrentRecalcCycle:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)referenceWasGuaranteedCleanAtRecalcCycleStart:(const struct TSCEAnyRef { unsigned short x0; struct TSCESpanningRangeRef { struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } x0; unsigned char x1; } x1; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x2; BOOL x3; id x4; } *)a0;
- (id)extendTableUIDHistoryWithRewrite:(id)a0;
- (void)rollbackTableUIDHistoryWithRewriteInfo:(id)a0;
- (void)markCellRefsAsDirty:(id)a0;
- (void)markCoordsDirty:(const void *)a0 inOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)headerStateOfTableChanged:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0 changedRows:(BOOL)a1;
- (void)headerStateOfTableChanged:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)dirtyCellsForColumnRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForRowRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForRemovalOfColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForRemovalOfRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 fromTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2;
- (void)dirtyCellsForInsertionOfColumns:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2 headerRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a3;
- (void)dirtyCellsForInsertionOfRows:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 tableRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2 headerRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a3;
- (void)dirtyCellsForMergingRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a0 forTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 headerRowRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a2 headerColumnRange:(struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; })a3;
- (void)markAllExternalGroupByRefsDirty:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)markAllFunctionsAsDirty;
- (void)markOnlyDependentsDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)scheduleDetectAndRepairConsistencyViolations;
- (BOOL)hasDateTimeVolatileFunctions;
- (BOOL)hasRemoteDataFunctions;
- (void)markDateTimeVolatileFunctionsAsDirty;
- (id)rewriteSpecStack;
- (void)pushRewriteSpec:(id)a0;
- (void)popRewriteSpec:(id)a0;
- (void)markRandomVolatileFunctionsAsDirty;
- (void)markGeometryVolatileFunctionsAsDirtyInOwner:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
- (void)markRemoteDataVolatileFunctionsAsDirty;
- (void)markAllVolatileFunctionsAsDirty;
- (BOOL)cellContainsAFormula:(const struct TSCEInternalCellReference { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; unsigned short x1; unsigned short x2; } *)a0;
- (BOOL)isCellReferenceDirty:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (void)p_blockUntilRecalcIsCompleteOnNewThreadWithTimeout:(id)a0;
- (void)debugFlushAllDirtyReferences;
- (void)beginSuppressingWillModifyCalls;
- (void)endSuppressingWillModifyCalls;
- (void)startRecalculation;
- (BOOL)isRecalculationRunning;
- (void)startRecalcTaskIfNecessary;
- (void)superWillModify;
- (void)executeBlockWhileCalculationEngineIsNotWriting:(id /* block */)a0;
- (struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; })evaluateSynchedWithCalcEngineWithFormula:(id)a0 evalContext:(void *)a1;
- (BOOL)hasRunRecalculationALongTime;
- (double)recalcTimeInSecs;
- (void)clearRecalculationTimer;
- (void)assertAt:(id)a0 nonCalcEngineException:(id)a1 evaluatingFormula:(id)a2;
- (void)setRemoteDataStore:(id)a0;
- (void)replaceRemoteDataKeysInterestedIn:(id)a0 forCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a1;
- (void)markRemoteDataVolatileFunctionsAsDirtyForKeys:(id)a0;
- (void)beginTrackingNamesInTableForLegacyNRM:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)setDisallowHeaderIndexingForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (void)clearDisallowHeaderIndexingForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasDisallowedHeaderIndexingForTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)cellHasPrecedents:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCEReferenceSet { void /* function */ **x0; struct TSCEDependencyTracker *x1; struct unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float x0; } x3; } x0; } x2; struct map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { struct __tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>> { unsigned long long x0; } x2; } x0; } x3; void *x4; void *x5; void *x6; void *x7; void *x8; id x9; void *x10; })precedentsOfCell:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; } *)a0;
- (struct TSCEReferenceSet { void /* function */ **x0; struct TSCEDependencyTracker *x1; struct unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct __hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>> { float x0; } x3; } x0; } x2; struct map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { struct __tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>> { unsigned long long x0; } x2; } x0; } x3; void *x4; void *x5; void *x6; void *x7; void *x8; id x9; void *x10; })emptyReferenceSet;
- (struct vector<TSCECellRef, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; struct TSCECellRef *x1; struct __compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>> { struct TSCECellRef *x0; } x2; })unorderedCellRefsForCategoryRef:(id)a0 atRowUid:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
- (void)addCalculationStateObserver:(id)a0;
- (void)removeCalculationStateObserver:(id)a0;
- (void)addAllFormulasCleanObserver:(id)a0;
- (void)removeAllFormulasCleanObserver:(id)a0;
- (unsigned long long)numberOfCellsWithFormulas;
- (unsigned long long)numFormulaCellsInOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)hasMaxNumFormulas;
- (void)assertDirtyPrecedentsCountConsistency;
- (void)detectAndRepairDirtyCellsAreOnLeafQueue;
- (id)allFormulaOwnersAsString;
- (id)allCellDependenciesAsString;
- (id)cellDependenciesAsStringForOwner:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (id)allRangeDependenciesAsString;
- (id)allSpanningDependenciesAsString;
- (BOOL)verifyAllOwnersAreKnown;
- (struct TSCECellCoordSet { struct map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>> { struct __tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>> { void *x0; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>> { unsigned long long x0; } x2; } x0; } x0; })cellCoordinatesNeedingExcelImportForTable:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a0;
- (BOOL)foundConsistencyIssues;

@end

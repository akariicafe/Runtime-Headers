@class TSCEWrappedRangeRef, NSString, NSArray, TSCEAnyReference, NSMutableDictionary, NSNumber;

@interface TSCEError : NSObject <NSCopying> {
    NSMutableDictionary *_errorDictionary;
}

@property (nonatomic) long long errorType;
@property (readonly, nonatomic) NSString *errorTypeKey;
@property (retain, nonatomic) NSString *functionName;
@property (retain, nonatomic) NSNumber *argIndex;
@property (retain, nonatomic) NSNumber *argIndex1;
@property (retain, nonatomic) NSNumber *argIndex2;
@property (retain, nonatomic) NSString *extraInfoString;
@property (retain, nonatomic) NSNumber *extraInfoNumber;
@property (retain, nonatomic) NSNumber *dateAsTimeInterval;
@property (retain, nonatomic) NSNumber *lowerBound;
@property (retain, nonatomic) NSNumber *upperBound;
@property (nonatomic) BOOL lowerBoundInclusive;
@property (nonatomic) BOOL upperBoundInclusive;
@property (retain, nonatomic) NSString *valueToMatch;
@property (nonatomic) BOOL afterMatch;
@property (retain, nonatomic) NSNumber *occurrence;
@property (retain, nonatomic) NSNumber *matchesFound;
@property (retain, nonatomic) NSString *previousMatch;
@property (nonatomic) BOOL previousValueIsRegex;
@property (nonatomic) BOOL argsAscending;
@property (nonatomic) BOOL equalityPermitted;
@property (retain, nonatomic) NSString *problemExpressionString;
@property (retain, nonatomic) NSString *problemMode;
@property (nonatomic) BOOL problemNodeIsCellReference;
@property (nonatomic) struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } ownerUID;
@property (retain, nonatomic) TSCEWrappedRangeRef *wrappedRangeRef;
@property (nonatomic) BOOL attachmentErrorRaisedInTextCell;
@property (nonatomic) BOOL invalidReferenceToMerge;
@property (nonatomic) BOOL referenceEndCellInvalid;
@property (retain, nonatomic) NSString *unitName;
@property (retain, nonatomic) NSNumber *chooseIndex;
@property (retain, nonatomic) NSArray *referenceArray;
@property (retain, nonatomic) TSCEAnyReference *anyReference;
@property (retain, nonatomic) NSNumber *maxArgsAllowed;
@property (retain, nonatomic) NSNumber *providedArgs;

+ (id)notReadyError;
+ (void)raiseInvalidArgumentPairingsErrorForFunctionName:(id)a0 hasInitialUnrelatedArgument:(BOOL)a1;
+ (void)raiseErrorForInvalidReference;
+ (void)raiseRangeSizeMismatchErrorForFunctionName:(id)a0;
+ (void)raiseMixedTypeManipulationErrorForFunctionName:(id)a0;
+ (id)errorForErrorType:(long long)a0;
+ (void)raiseNumberError;
+ (void)raiseUnsupportedFeatureError;
+ (void)raiseUnknownFunctionErrorForString:(id)a0;
+ (void)raiseInvalidTokenInFormulaError;
+ (id)referenceToNonexistentTableError:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a0;
+ (id)durationNotAllowedError:(id)a0 argumentNumber:(int)a1;
+ (void)raiseInvalidDateManipulationError;
+ (void)raiseComparisonTypeExceptionForLeftType:(char)a0 rightType:(char)a1;
+ (void)raiseArgumentSetUsedOutOfContextError;
+ (void)raiseTypeExceptionForValue:(struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; })a0 functionSpec:(id)a1 argumentIndex:(int)a2 locale:(id)a3;
+ (id)typeErrorForValue:(struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; })a0 functionSpec:(id)a1 argumentIndex:(int)a2 locale:(id)a3;
+ (void)raiseInvalidCurrencyComparisonError;
+ (void)raiseInvalidComparisonError;
+ (void)raiseMismatchedCurrenciesErrorForFunctionName:(id)a0;
+ (void)raiseDivideByZeroError;
+ (void)raiseZeroToPowerOfZeroError;
+ (void)raiseDurationNotAllowedError:(id)a0 argumentNumber:(int)a1;
+ (void)raiseValueErrorForFunctionName:(id)a0;
+ (void)raiseAbortError;
+ (id)invalidReferenceError;
+ (id)errorForErrorType:(long long)a0 functionName:(id)a1;
+ (void)raiseErrorForError:(id)a0;
+ (BOOL)p_DictionaryRepresentsInvalidMergeReference:(id)a0;
+ (id)abortError;
+ (void)raiseErrorForInvalidReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 orString:(id)a1 contextEntityUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2 invalidMergeReference:(BOOL)a3 disqualifiedFromEndCell:(BOOL)a4;
+ (void)raiseOutOfBoundsArgumentErrorForArgument:(int)a0 functionName:(id)a1 lowerBound:(double)a2 lowerBoundInclusive:(BOOL)a3 upperBound:(double)a4 upperBoundInclusive:(BOOL)a5;
+ (id)errorForErrorType:(long long)a0 functionName:(id)a1 argIndex:(int)a2;
+ (void)raiseMatchNotFoundErrorForValue:(id)a0 isRegex:(BOOL)a1 afterMatch:(BOOL)a2 previousValueToMatch:(id)a3 previousValueIsRegex:(BOOL)a4 occurrence:(int)a5 matchesFound:(int)a6 functionName:(id)a7;
+ (id)indirectErrorForRangeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
+ (void)raiseMismatchedUnitsErrorForFunctionName:(id)a0 argumentNumberString:(id)a1;
+ (id)invalidLiveStockAttributeError;
+ (id)notAReferenceToAFormulaError;
+ (id)invalidReferenceNameAttributeError;
+ (id)invalidHistoricalStockAttributeError;
+ (id)invalidLiveCurrencyAttributeError;
+ (id)invalidHistoricalCurrencyAttributeError;
+ (id)invalidHistoricalDateError;
+ (id)remoteDataUnavailableErrorWithAttribute:(id)a0;
+ (id)autoNumberAttachmentError;
+ (id)attachmentError;
+ (id)errorWithDictionary:(id)a0;
+ (id)errorForToken:(id)a0;
+ (id)syntaxError;
+ (BOOL)exceptionIsFromCalcEngine:(id)a0;
+ (BOOL)exceptionIsCircularReferenceError:(id)a0;
+ (BOOL)exceptionIsRangeUsageError:(id)a0;
+ (id)circularReferenceError;
+ (id)missingRunningTotalInFieldError;
+ (id)missingPivotTableErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidAggregateColumnErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)invalidGroupingColumnErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (BOOL)exceptionIsInvalidMergeReference:(id)a0;
+ (void)raiseInvalidArrayContentsError;
+ (void)raiseNotReadyError;
+ (void)raiseDisallowedStockModeError:(id)a0;
+ (void)raiseNumberErrorForFunctionName:(id)a0;
+ (void)raiseAutoNumberAttachmentErrorInTextCell:(BOOL)a0;
+ (void)raiseAttachmentErrorInTextCell:(BOOL)a0;
+ (void)raiseValueNotAvailableErrorForFunctionName:(id)a0;
+ (void)raiseErrorForInvalidReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 orString:(id)a1 contextEntityUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a2;
+ (id)invalidMergeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 contextEntityUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
+ (void)raiseOutOfBoundsArgumentErrorForArgument:(int)a0 functionName:(id)a1 lowerBound:(double)a2 lowerBoundInclusive:(BOOL)a3;
+ (void)raiseOutOfBoundsArgumentErrorForArgument:(int)a0 functionName:(id)a1 upperBound:(double)a2 upperBoundInclusive:(BOOL)a3;
+ (void)raiseMatchNotFoundErrorForValue:(id)a0 isRegex:(BOOL)a1 functionName:(id)a2;
+ (void)raiseStartNumberExceedsStringLengthErrorForFunctionName:(id)a0;
+ (void)raiseDifferentNumberOfDataPointsErrorForFunctionName:(id)a0;
+ (id)invalidDateManipulationError;
+ (void)raiseInvalidArgumentsErrorForFunctionName:(id)a0 argumentIndex:(int)a1;
+ (void)raiseIndirectErrorForRangeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1;
+ (void)raiseNoModeError;
+ (void)raiseEmptyArgumentError;
+ (void)raiseEmptyArgumentSpecificErrorForArgumentNumber:(int)a0;
+ (void)raiseInvalidRangeUsageErrorForReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a0;
+ (void)raiseInvalidHyperlinkError;
+ (void)raiseDifferentNumberOfElementsErrorForFunctionName:(id)a0;
+ (void)raiseUnionInsideIntersectionError;
+ (void)raiseCircularReferenceErrorWithReference:(id)a0;
+ (void)raiseNotAReferenceErrorForFunctionName:(id)a0;
+ (void)raiseNoSuitableArgumentsFoundErrorForFunctionName:(id)a0 requiredType:(char)a1;
+ (void)raiseInvalidArgumentRelationshipErrorForFunctionName:(id)a0 argIndex1:(int)a1 argIndex2:(int)a2 argsAscending:(BOOL)a3 equalityPermitted:(BOOL)a4;
+ (void)raiseInvalidArgumentEqualityRelationshipErrorForFunctionName:(id)a0 argIndex1:(int)a1 argIndex2:(int)a2;
+ (void)raiseInvalidIndexForChooseError:(int)a0;
+ (void)raiseNonEmptyStringRequiredErrorForFunctionName:(id)a0;
+ (void)raiseStringDoesNotRepresentNumberErrorForFunctionName:(id)a0 string:(id)a1;
+ (void)raiseStringDoesNotRepresentDateErrorForFunctionName:(id)a0 string:(id)a1;
+ (void)raiseSignsMustMatchErrorForFunctionName:(id)a0;
+ (void)raiseRangeDoesNotSumToOneForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raiseUnsupportedR1C1StyleError;
+ (void)raiseInvalidDateError;
+ (void)raiseInvalidTimeError;
+ (void)raiseNotAVectorError;
+ (void)raiseInvalidProbabilityErrorForFunctionName:(id)a0;
+ (void)raiseNumberSmallerThanZeroError;
+ (void)raiseArgumentEqualsToZeroErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raisePositionLargerThanArrayErrorForFunctionName:(id)a0;
+ (void)raiseInvalidFrequencyErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raiseInvalidTypeErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raiseInvalidTailErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raiseInvalidSubtotalFunctionNumberError;
+ (void)raiseNumberDoesNotConvergeErrorForFunctionName:(id)a0;
+ (void)raiseNumberDoesNotConvergeWithEstimateErrorForFunctionName:(id)a0;
+ (void)raiseTooFewDataPointsErrorForFunctionName:(id)a0;
+ (void)raiseDateEarlierThanStartingDateErrorForFunctionName:(id)a0;
+ (void)raiseOnlyPositiveOrNegativeErrorForFunctionName:(id)a0;
+ (void)raiseReferenceToEmptyCellErrorForFunctionName:(id)a0 rangeReference:(struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })a1;
+ (void)raiseNumberMinusDateError;
+ (void)raiseWrongNumberOfArgumentsErrorForFunctionName:(id)a0 provided:(int)a1;
+ (void)raiseTooManyArguments:(id)a0 maximum:(int)a1 provided:(int)a2;
+ (void)raiseMismatchedUnitsErrorForFunctionName:(id)a0;
+ (void)raiseUnitsNotAllowedErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raiseCurrencyNotAllowedErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (id)sumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:(id)a0;
+ (void)raiseSumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:(id)a0;
+ (void)raiseNotEnoughInputsErrorForFunctionName:(id)a0 argumentNumber:(int)a1 required:(int)a2;
+ (void)raiseInvalidIntersectionError:(struct vector<TSCEReferenceValue, std::allocator<TSCEReferenceValue>> { struct TSCEReferenceValue *x0; struct TSCEReferenceValue *x1; struct __compressed_pair<TSCEReferenceValue *, std::allocator<TSCEReferenceValue>> { struct TSCEReferenceValue *x0; } x2; })a0 hostTableUID:(const struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } *)a1 calcEngine:(id)a2;
+ (void)raiseEmptyArrayError;
+ (void)raiseInvalidBaseCharacterErrorForCharacter:(unsigned short)a0 base:(short)a1;
+ (void)raiseInvalidUnitStringError:(id)a0;
+ (void)raiseDifferentDimensionsErrorForFunctionName:(id)a0;
+ (void)raiseNonMetricUnitPrefixErrorForUnitString:(id)a0;
+ (void)raiseConvertOriginUnitMismatchError;
+ (void)raiseArrayElementNoDataError;
+ (void)raiseDataInvalidDimensionsError;
+ (void)raiseDataInvalidLengthError;
+ (void)raiseDataInvalidWidthError;
+ (void)raiseNegativeReceivedAmountError;
+ (void)raiseInvalidMatchModeError;
+ (void)raiseMismatchedMaxUnitsError;
+ (void)raiseVectorValueNotNumberErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raiseCharInputOutOfBoundsError;
+ (void)raiseDurationDisallowedForNormdistPDFError;
+ (void)raiseLinestHighlyCorrelatedVariableError;
+ (void)raiseMultipleDurationsErrorForFunctionName:(id)a0;
+ (void)raiseLinestMatrixUnderdeterminedError;
+ (void)raiseNegativeVectorValueErrorForFunctionName:(id)a0 argumentNumber:(int)a1;
+ (void)raisePercentRankInputOutOfRangeError;
+ (void)raisePercentRankExcInputOutOfRangeError;
+ (void)raiseLocationServicesNotEnabledError;
+ (void)raiseLocationHeadingUnknownError;
+ (void)raiseLocationUnknownError;
+ (void)raiseLocationUserDeniedError;
+ (void)raiseLocationNetworkError;
+ (void)raiseLocationHeadingFailureError;
+ (void)raiseInvalidLatitudeLongitudeError;
+ (void)raiseInvalidAltitudeError;
+ (void)raiseInvalidHeadingError;
+ (void)raiseInvalidRegexError:(id)a0;
+ (void)raiseStringTooLongError;
+ (void)raiseUnsupportedFunctionError;
+ (void)raiseNoConditionIsTrueErrorForFunctionName:(id)a0;
+ (void)raiseInvalidLiveStockAttributeError;
+ (void)raiseNotAReferenceToAFormulaError;
+ (void)raiseInvalidReferenceNameAttributeError;
+ (void)raiseInvalidHistoricalStockAttributeError;
+ (void)raiseInvalidLiveCurrencyAttributeError;
+ (void)raiseInvalidHistoricalCurrencyAttributeError;
+ (void)raiseInvalidHistoricalDateError;
+ (void)raiseRemoteDataUnavailableErrorWithAttribute:(id)a0;
+ (id)noTradingInformationErrorWithNextAvailableDate:(id)a0;
+ (id)invalidStockCodeError:(id)a0;
+ (id)invalidCurrencyPairError;
+ (id)remoteDataServerError;
+ (BOOL)errorForRichTextStorage:(id)a0 outValue:(struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; } *)a1;

- (id)string;
- (id)stringValue;
- (BOOL)boolean;
- (double)doubleValue;
- (void)setObject:(id)a0 forKey:(id)a1;
- (struct TSCEReferenceValue { void /* function */ **x0; id x1; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x2; struct TSUPreserveFlags { unsigned char x0; } x3; BOOL x4; BOOL x5; } *)referenceValue;
- (id)tokenString;
- (struct TSCEGrid { void /* function */ **x0; id x1; struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 5; unsigned char x2 : 5; unsigned char x3 : 2; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } x2; } *)vector;
- (id)date;
- (id)dateValue;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)a0;
- (id)objectForKey:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 5; unsigned char x2 : 5; unsigned char x3 : 2; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } x2; unsigned short x3; BOOL x4; } *)number;
- (id)error;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x0; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x1; } x0; struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; } x1; })rangeRef;
- (id)displayStringWithCalculationEngine:(id)a0 forTable:(struct TSKUIDStruct { unsigned long long x0; unsigned long long x1; })a1 andCellID:(struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; })a2;
- (BOOL)isAbortedError;
- (void)raiseException;
- (char)nativeType;
- (id)initWithErrorType:(long long)a0;
- (id)errorDictionary;
- (BOOL)isFromCalcEngine;
- (BOOL)isCircularReferenceError;
- (BOOL)isMismatchedUnitsError;
- (BOOL)errorIsRangeUsageError;
- (BOOL)isInvalidMergeReference;
- (BOOL)isNotReadyError;
- (BOOL)isUnsupportedFunctionError;
- (BOOL)isUnsupportedFeatureError;
- (BOOL)isErrorReferenceError;
- (BOOL)isInvalidReferenceError;
- (char)deepType;
- (struct TSCENumberValue { void /* function */ **x0; struct TSUDecimal { struct { unsigned long long x0[2]; } x0; } x1; struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 5; unsigned char x2 : 5; unsigned char x3 : 2; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } x2; unsigned short x3; BOOL x4; } *)numberForFunction:(id)a0 argumentIndex:(int)a1 warningReportingContext:(struct TSCEWarningReportingContext { BOOL x0; BOOL x1; id x2; } *)a2;
- (id)dateForFunction:(id)a0 argumentIndex:(int)a1 warningReportingContext:(struct TSCEWarningReportingContext { BOOL x0; BOOL x1; id x2; } *)a2;
- (id)stringForFunction:(id)a0 argumentIndex:(int)a1 warningReportingContext:(struct TSCEWarningReportingContext { BOOL x0; BOOL x1; id x2; } *)a2;
- (BOOL)booleanForFunction:(id)a0 argumentIndex:(int)a1 warningReportingContext:(struct TSCEWarningReportingContext { BOOL x0; BOOL x1; id x2; } *)a2;
- (struct TSCEGrid { void /* function */ **x0; id x1; struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 5; unsigned char x2 : 5; unsigned char x3 : 2; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } x2; })formattedGridForFunction:(id)a0 argumentIndex:(int)a1 context:(struct TSCEEvaluationContext { } *)a2 format:(const struct TSCEFormat { id x0; unsigned int x1; unsigned char x2; struct TSCEDurationFormat { unsigned char x0 : 1; unsigned char x1 : 5; unsigned char x2 : 5; unsigned char x3 : 2; } x3; struct TSCEBaseFormat { unsigned char x0; unsigned char x1; BOOL x2; } x4; struct TSCEFractionFormat { char x0; } x5; struct TSCENumberFormat { unsigned char x0; unsigned char x1 : 3; unsigned char x2 : 1; unsigned char x3 : 1; unsigned short x4; } x6; } *)a3;
- (struct TSCEReferenceValue { void /* function */ **x0; id x1; struct TSUCellCoord { unsigned int x0; unsigned short x1; BOOL x2; BOOL x3; } x2; struct TSUPreserveFlags { unsigned char x0; } x3; BOOL x4; BOOL x5; } *)referenceValueForFunction:(id)a0 argumentIndex:(int)a1 warningReportingContext:(struct TSCEWarningReportingContext { BOOL x0; BOOL x1; id x2; } *)a2;
- (BOOL)isNativelyEqual:(struct TSCEValue { union { struct { struct { unsigned long long x0[2]; } x0; unsigned char x1[24]; unsigned short x2; BOOL x3; } x0; unsigned long long x1[9]; } x0; unsigned char x1; })a0;
- (id)bakedString;

@end

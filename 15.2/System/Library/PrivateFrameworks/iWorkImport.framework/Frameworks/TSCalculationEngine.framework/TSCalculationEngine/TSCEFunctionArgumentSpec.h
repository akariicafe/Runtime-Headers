@class TSCEFunctionSpec;

@interface TSCEFunctionArgumentSpec : NSObject {
    struct TSCEFunctionArgSpec { char _argumentType; int _accessorMode; unsigned char _rangeContext; int _argumentContext; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float __value_; } __p3_; } __table_; } _disallowedTypes; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *__begin_; struct TSCEValue *__end_; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *__value_; } __end_cap_; } _modeValues; short _defaultModeIndex; TSCEFunctionSpec *_functionSpec; double _minValue; double _maxValue; short _index; BOOL _minInclusive; BOOL _maxInclusive; BOOL _disallowDuration; BOOL _disallowCurrency; BOOL _isInteger; BOOL _forceArrayMode; BOOL _referenceForGeometryOnly; } _argSpec;
}

+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2;
+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2 minValue:(double)a3 minInclusive:(BOOL)a4 maxValue:(double)a5 maxInclusive:(BOOL)a6 disallowedTypes:(const void *)a7 disallowDuration:(BOOL)a8 disallowCurrency:(BOOL)a9;
+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2 argumentContext:(int)a3 minValue:(double)a4 minInclusive:(BOOL)a5 maxValue:(double)a6 maxInclusive:(BOOL)a7 isInteger:(BOOL)a8 disallowedTypes:(const void *)a9 disallowDuration:(BOOL)a10 disallowCurrency:(BOOL)a11 modeValues:(const void *)a12 defaultModeIndex:(short)a13 referenceForGeometryOnly:(BOOL)a14 forceArrayMode:(BOOL)a15;
+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2 disallowedTypes:(const void *)a3 disallowDuration:(BOOL)a4 disallowCurrency:(BOOL)a5;
+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2 modeValues:(const void *)a3 defaultModeIndex:(short)a4;
+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2 argumentContext:(int)a3;
+ (struct TSCEFunctionArgSpec { char x0; int x1; unsigned char x2; int x3; struct unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct __hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>> { void **x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>> { struct __hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> { void *x0; } x0; } x1; struct __compressed_pair<unsigned long, std::hash<TSCEArgumentType>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::equal_to<TSCEArgumentType>> { float x0; } x3; } x0; } x4; struct vector<TSCEValue, std::allocator<TSCEValue>> { struct TSCEValue *x0; struct TSCEValue *x1; struct __compressed_pair<TSCEValue *, std::allocator<TSCEValue>> { struct TSCEValue *x0; } x2; } x5; short x6; id x7; double x8; double x9; short x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })argSpecWithType:(char)a0 accessorMode:(int)a1 rangeContext:(unsigned char)a2 argumentContext:(int)a3 disallowedTypes:(const void *)a4 referenceForGeometryOnly:(BOOL)a5;

- (void).cxx_destruct;
- (id).cxx_construct;

@end

@class NSString, TSWPStorage, NSMutableArray;
@protocol TSWPStyleProvider;

@interface TSWPColumn : NSObject <TSWPOffscreenColumn> {
    struct _NSRange { unsigned long long location; unsigned long long length; } _anchoredAttachmentRange;
    struct shared_ptr<TSWPLineFragmentArray> { struct TSWPLineFragmentArray *__ptr_; struct __shared_weak_count *__cntrl_; } _lineFragmentArray;
    NSMutableArray *_paragraphAdornments;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } wpBounds;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transformFromWP;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } transformToWP;
@property (nonatomic) unsigned long long startCharIndex;
@property (nonatomic) unsigned long long characterCount;
@property (nonatomic) unsigned long long nextWidowPullsDownFromCharIndex;
@property (nonatomic) double contentBlockBottom;
@property (nonatomic) double nextLinePosition;
@property (nonatomic) double erasableContentBottom;
@property (nonatomic) unsigned long long layoutResultFlags;
@property (nonatomic) unsigned long long columnIndex;
@property (nonatomic) unsigned long long pageNumber;
@property (nonatomic) unsigned long long scaleTextPercent;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } anchoredRange;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } range;
@property (weak, nonatomic) id<TSWPStyleProvider> styleProvider;
@property (nonatomic) BOOL textIsVertical;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frameBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } typographicBounds;
@property (readonly, nonatomic) TSWPStorage *storage;
@property (readonly, nonatomic) unsigned long long lineCount;
@property (readonly, nonatomic) double textBlockBottom;
@property (nonatomic) unsigned long long storageChangeCount;
@property (readonly, nonatomic) BOOL lastLineIsEmptyAndHasListLabel;
@property (readonly, nonatomic) BOOL terminatedByBreak;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(id)a0 withColumns:(id)a1;
+ (id)closestColumnInColumnsArray:(id)a0 forPoint:(struct CGPoint { double x0; double x1; })a1 ignoreEmptyColumns:(BOOL)a2 ignoreDrawableOnlyColumns:(BOOL)a3;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForInsertionPoint:(id)a0 withColumns:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForSelection:(id)a0 withColumns:(id)a1 useParagraphModeRects:(BOOL)a2;
+ (id)smartFieldWithAttributeKind:(unsigned long long)a0 inColumnArray:(id)a1 atPoint:(struct CGPoint { double x0; double x1; })a2;
+ (id)footnoteMarkAttachmentInColumnArray:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
+ (id)footnoteReferenceAttachmentInColumnArray:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1;
+ (id)pathForHighlightWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 columnArray:(id)a1 pathStyle:(int)a2;
+ (struct CGPoint { double x0; double x1; })p_pinPoint:(struct CGPoint { double x0; double x1; })a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })columnRectForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withColumns:(id)a1;
+ (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfColumns:(id)a0;
+ (id)contentRectsToAvoidPencilAnnotationOverlapWithColumns:(id)a0;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsRectForSelection:(id)a0 columnArray:(id)a1 includeRuby:(BOOL)a2 includePaginatedAttachments:(BOOL)a3;
+ (id)columnForCharIndex:(unsigned long long)a0 allowEndOfColumn:(BOOL)a1 withColumns:(id)a2;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inColumnsArray:(id)a1 allowPastBreak:(BOOL)a2 allowNotFound:(BOOL)a3 pastCenterGoesToNextChar:(BOOL)a4 constrainToAscentAndDescent:(BOOL)a5 ignoreEmptyColumns:(BOOL)a6 isAtEndOfLine:(BOOL *)a7 leadingEdge:(BOOL *)a8;
+ (struct CGPoint { double x0; double x1; })pinToNaturalBounds:(struct CGPoint { double x0; double x1; })a0 andLastLineFragment:(BOOL)a1 inLayoutTarget:(id)a2;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 constrainToAscentAndDescent:(BOOL)a2 isAtEndOfLine:(BOOL *)a3 inLayoutTarget:(id)a4;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 allowNotFound:(BOOL)a2 constrainToAscentAndDescent:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 leadingEdge:(BOOL *)a5 inLayoutTarget:(id)a6;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 allowNotFound:(BOOL)a2 pastCenterGoesToNextChar:(BOOL)a3 constrainToAscentAndDescent:(BOOL)a4 isAtEndOfLine:(BOOL *)a5 leadingEdge:(BOOL *)a6 inLayoutTarget:(id)a7;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 allowNotFound:(BOOL)a2 pastCenterGoesToNextChar:(BOOL)a3 constrainToAscentAndDescent:(BOOL)a4 isAtEndOfLine:(BOOL *)a5 leadingEdge:(BOOL *)a6 ignoreEmptyColumns:(BOOL)a7 inLayoutTarget:(id)a8;
+ (id)pencilAnnotationRectsForSelection:(id)a0 withColumns:(id)a1 outRanges:(id *)a2;
+ (struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; double x1; struct TSWPFontHeightInfo { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; } x2; double x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; double x5; struct TSWPFontHeightInfo { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; } x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })pencilAnnotationLineMetricsAtCharIndex:(unsigned long long)a0 withColumns:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameBoundsOfColumns:(id)a0;
+ (id)selectionRectsforColumns:(id)a0 forSelection:(id)a1;
+ (id)commentKnobBaseOriginForHighlightAtTextRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withColumns:(id)a1 positionForRTL:(BOOL)a2;
+ (struct CGPoint { double x0; double x1; })connectionLinePointForChangeRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withColumns:(id)a1 layoutTarget:(id)a2;
+ (struct _NSRange { unsigned long long x0; unsigned long long x1; })charRangeForPencilAnnotationStartPoint:(struct CGPoint { double x0; double x1; })a0 toEndPoint:(struct CGPoint { double x0; double x1; })a1 inLayoutTarget:(id)a2 onSingleLineFragment:(BOOL)a3;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inColumnsArray:(id)a1 allowPastBreak:(BOOL)a2 allowNotFound:(BOOL)a3 ignoreEmptyColumns:(BOOL)a4 isAtEndOfLine:(BOOL *)a5 leadingEdge:(BOOL *)a6;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x0; double x1; })a0 inColumnsArray:(id)a1 allowPastBreak:(BOOL)a2 allowNotFound:(BOOL)a3 pastCenterGoesToNextChar:(BOOL)a4 ignoreEmptyColumns:(BOOL)a5 isAtEndOfLine:(BOOL *)a6 leadingEdge:(BOOL *)a7;
+ (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x0; double x1; })a0 inLayoutTarget:(id)a1;
+ (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x0; double x1; })a0 isTail:(BOOL)a1 selectionType:(int)a2 inLayoutTarget:(id)a3;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 isAtEndOfLine:(BOOL *)a2 inLayoutTarget:(id)a3;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 allowNotFound:(BOOL)a2 isAtEndOfLine:(BOOL *)a3 leadingEdge:(BOOL *)a4 inLayoutTarget:(id)a5;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 allowNotFound:(BOOL)a2 pastCenterGoesToNextChar:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 leadingEdge:(BOOL *)a5 inLayoutTarget:(id)a6;
+ (struct CGSize { double x0; double x1; })layoutSizeForParagraphEnumerator:(const struct TSWPParagraphEnumerator { id x0; id x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; BOOL x6; struct _NSRange { unsigned long long x0; unsigned long long x1; } x7; } *)a0 inColumns:(id)a1 lineCount:(out unsigned long long *)a2 nextLineOffset:(out double *)a3;
+ (struct CGPoint { double x0; double x1; })pinPoint:(struct CGPoint { double x0; double x1; })a0 toBottomOfLineFragmentInColumns:(id)a1;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })labelRectForCharIndex:(unsigned long long)a0 withColumns:(id)a1;
+ (BOOL)partitionedAttachmentStartsAtCharIndex:(unsigned long long)a0 withColumns:(id)a1;

- (struct CGSize { double x0; double x1; })maxSize;
- (void).cxx_destruct;
- (void)dealloc;
- (id).cxx_construct;
- (double)textHeight;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsOfLineFragmentAtIndex:(unsigned long long)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfLineFragmentAtIndex:(unsigned long long)a0;
- (unsigned long long)lineIndexForCharIndex:(unsigned long long)a0 eol:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })glyphRectForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 includingLabel:(BOOL)a1;
- (struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; double x1; struct TSWPFontHeightInfo { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; } x2; double x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; double x5; struct TSWPFontHeightInfo { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; } x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })lineMetricsAtCharIndex:(unsigned long long)a0 allowEndOfLine:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })columnRectForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned long long)charIndexForSelectionFromPoint:(struct CGPoint { double x0; double x1; })a0 isTail:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })erasableBounds:(unsigned long long)a0;
- (const void *)lineFragmentArray;
- (id)initWithStorage:(id)a0 frameBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (const void *)lineFragmentAtIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForSelection:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForSelection:(id)a0 includeSpaceAfter:(BOOL)a1 includeSpaceBefore:(BOOL)a2 includeLeading:(BOOL)a3;
- (id)rectsForSelection:(id)a0 ranges:(id *)a1;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 pastCenterGoesToNextChar:(BOOL)a2 allowNotFound:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 leadingEdge:(BOOL *)a5;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 pastCenterGoesToNextChar:(BOOL)a2 allowNotFound:(BOOL)a3 isAtEndOfLine:(BOOL *)a4 outFragment:(const struct TSWPLineFragment **)a5 leadingEdge:(BOOL *)a6;
- (id)smartFieldAtCharIndex:(unsigned long long)a0 attributeKind:(unsigned long long)a1;
- (void)clearAdornments;
- (double)logicalBoundsTop;
- (const void *)pColumnEndingPartitionedLineFragmentInSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (unsigned long long)startAnchoredCharIndex;
- (double)logicalBoundsBottom;
- (double)minimumHeightForLayoutOnPage;
- (BOOL)requiresGlyphVectorsForHeightMeasurement;
- (void)addAdornmentRect:(id)a0;
- (void)setLineFragmentArray:(const void *)a0;
- (unsigned long long)lineFragmentCountForBaseline:(double)a0;
- (double)baselineOfLineFragmentAtIndex:(unsigned long long)a0;
- (double)horizontalOffsetForCharIndex:(unsigned long long)a0 lineFragmentIndex:(unsigned long long)a1 bumpPastHyphen:(BOOL)a2 allowPastLineBounds:(BOOL)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })glyphRectForRubyFieldAtCharIndex:(unsigned long long)a0 glyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (unsigned long long)glyphCountForRubyFieldAtCharIndex:(unsigned long long)a0;
- (id)lineSelectionsForSelection:(id)a0;
- (id)rectsForSelectionRanges:(id)a0 selectionType:(int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })erasableRectForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)drawableIntersectionRectsForSelection:(id)a0 inTarget:(id)a1;
- (id)partitionedLayoutForInfo:(id)a0;
- (id)singleLinePartitionedInfoAtStart:(BOOL)a0;
- (BOOL)onlyHasAnchoredDrawable;
- (unsigned long long)anchoredCharCount;
- (unsigned int)fontTraitsForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 includingLabel:(BOOL)a1;
- (void)incrementRanges:(long long)a0 startingAt:(unsigned long long)a1;
- (void)trimToCharIndex:(unsigned long long)a0 inTarget:(id)a1 removeFootnoteReferenceCount:(unsigned long long)a2 removeAutoNumberFootnoteCount:(unsigned long long)a3;
- (BOOL)onlyHasPartitionedAttachments;
- (BOOL)hasPartitionedAttachmentAtStart:(BOOL)a0;
- (id)partitionedLayoutOfLineFragmentAtIndex:(unsigned long long)a0;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1 forParagraphMode:(BOOL)a2 includeRuby:(BOOL)a3 includePaginatedAttachments:(BOOL)a4;
- (id)rectsForSelection:(id)a0 ranges:(id *)a1 includePaginatedAttachments:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsIncludingDropCapRectsForSelectionType:(int)a0;
- (unsigned long long)p_charIndexWithTextClosestToWPPoint:(struct CGPoint { double x0; double x1; })a0 pastCenterGoesToNextChar:(BOOL)a1 outFragment:(const struct TSWPLineFragment **)a2 leadingEdge:(BOOL *)a3;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 pastCenterGoesToNextChar:(BOOL)a2 allowNotFound:(BOOL)a3 constrainToAscentAndDescent:(BOOL)a4 isAtEndOfLine:(BOOL *)a5 leadingEdge:(BOOL *)a6;
- (unsigned long long)pRemapCharIndex:(unsigned long long)a0 outIsAfterBreak:(out BOOL *)a1 outWithTextSource:(out id *)a2;
- (void)pInfoForCharIndex:(unsigned long long)a0 isAtStart:(out BOOL *)a1 isAtEnd:(out BOOL *)a2;
- (BOOL)p_isFirstPartitionForCharIndex:(unsigned long long)a0;
- (id)pMutableRectsForSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 selectionType:(int)a1 includeSpaceAfter:(BOOL)a2 includeSpaceBefore:(BOOL)a3 includeLeading:(BOOL)a4 forParagraphMode:(BOOL)a5 includeRuby:(BOOL)a6 includePaginatedAttachments:(BOOL)a7 inranges:(id)a8 outranges:(id *)a9;
- (id)pTransformReturnRects:(id)a0;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 allowPastBreak:(BOOL)a1 pastCenterGoesToNextChar:(BOOL)a2 allowNotFound:(BOOL)a3 constrainToAscentAndDescent:(BOOL)a4 isAtEndOfLine:(BOOL *)a5 outFragment:(const struct TSWPLineFragment **)a6 leadingEdge:(BOOL *)a7;
- (unsigned long long)charIndexFromWPPoint:(struct CGPoint { double x0; double x1; })a0 pastCenterGoesToNextChar:(BOOL)a1 allowNotFound:(BOOL)a2 constrainToAscentAndDescent:(BOOL)a3 outFragment:(const struct TSWPLineFragment **)a4 leadingEdge:(BOOL *)a5;
- (BOOL)p_pencilAnnotationsShouldSkipLineFragment:(const void *)a0;
- (id)initForTestingWithStorage:(id)a0 frameBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })changeBarRectForLineFragment:(const void *)a0 layoutTarget:(id)a1;
- (const void *)lineFragmentArrayForUnitTests;
- (void)offsetLineFragmentsBy:(struct CGSize { double x0; double x1; })a0;
- (void)makeEmpty:(unsigned long long)a0 anchoredRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 layoutResultFlags:(unsigned long long)a2;
- (id)textAdornmentOfLineFragmentAtIndex:(unsigned long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rawGlyphRectOfRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct TSWPFontHeightInfo { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; })fontHeightInfoAtCharIndex:(unsigned long long)a0;
- (unsigned int)hyphenCharOfLineFragmentAtIndex:(unsigned long long)a0;
- (const void *)nearestLineFragmentWithSameVerticalPositionAs:(unsigned long long)a0 xPos:(double)a1;
- (struct _TSWPCharIndexAndPosition { unsigned long long x0; int x1; double x2; int x3; double x4; })calcAttachmentPositionForDrawable:(id)a0 atPoint:(struct CGPoint { double x0; double x1; })a1 inTextLayoutTarget:(id)a2 startOfBoundsInfluencingWrap:(struct CGPoint { double x0; double x1; })a3 wrapOutset:(struct CGSize { double x0; double x1; })a4 wrapMargin:(double)a5 makeInline:(BOOL)a6;
- (void)renderWithRenderer:(id)a0 currentSelection:(id)a1 limitSelection:(id)a2 listRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a3 rubyGlyphRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a4 isCanvasInteractive:(BOOL)a5 isInDrawingMode:(BOOL)a6 suppressedMisspellingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a7 blackAndWhite:(BOOL)a8 dictationInterpretations:(id)a9 autocorrections:(id)a10 markedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a11 markedText:(id)a12 renderMode:(unsigned long long)a13 pageCount:(unsigned long long)a14 suppressInvisibles:(BOOL)a15 currentCanvasSelection:(id)a16;
- (BOOL)isLastLineFragmentPartitioned;
- (id)layoutsForInlineDrawables:(id)a0;
- (void)enumerateParagraphAdornmentsUsingBlock:(id /* block */)a0;

@end

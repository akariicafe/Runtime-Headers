@class NSString;

@interface CKTransactionalComponentDataSourceUpdateStateModification : NSObject <CKTransactionalComponentDataSourceStateModifying> {
    struct unordered_map<int, std::unordered_multimap<int, id (^)(id)>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, std::unordered_multimap<int, id (^)(id)>>>> { struct __hash_table<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::hash<int>, std::equal_to<int>, true>, std::__unordered_map_equal<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::equal_to<int>, std::hash<int>, true>, std::allocator<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::hash<int>, std::equal_to<int>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::equal_to<int>, std::hash<int>, true>> { float __value_; } __p3_; } __table_; } _stateUpdates;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

@end

@class CKComponentScopeHandle;

@interface CKComponentScopeFrame : NSObject {
    struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::hash<_CKStateScopeKey>, std::equal_to<_CKStateScopeKey>, std::allocator<std::pair<const _CKStateScopeKey, CKComponentScopeFrame *>>> { struct __hash_table<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__unordered_map_hasher<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::hash<_CKStateScopeKey>, std::equal_to<_CKStateScopeKey>, true>, std::__unordered_map_equal<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::equal_to<_CKStateScopeKey>, std::hash<_CKStateScopeKey>, true>, std::allocator<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::hash<_CKStateScopeKey>, std::equal_to<_CKStateScopeKey>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::equal_to<_CKStateScopeKey>, std::hash<_CKStateScopeKey>, true>> { float __value_; } __p3_; } __table_; } _children;
}

@property (readonly, nonatomic) CKComponentScopeHandle *handle;

+ (struct CKComponentScopeFramePair { id x0; id x1; })childPairForPair:(const struct CKComponentScopeFramePair { id x0; id x1; } *)a0 newRoot:(id)a1 componentClass:(Class)a2 identifier:(id)a3 initialStateCreator:(id /* block */)a4 stateUpdates:(const void *)a5;

- (id)initWithHandle:(id)a0;
- (void).cxx_destruct;
- (id).cxx_construct;

@end

@class NSFileHandle, CSEndpointerMetrics, CSSpeechController, AFClientConfiguration, CSAudioRecordDeviceInfo, NSString, AFWatchdogTimer, NSArray, NSMutableDictionary, CSSiriAudioFileWriter, AFSpeechSynthesisRecord, CSEndpointDelayReporter, CSSiriAudioPlaybackService, NSObject, CSSiriSpeechRecordingContext, CSSiriAudioActivationInfo, CSAudioSessionController, AFExperimentContext, NSUUID, NSXPCConnection, AFBluetoothWirelessSplitterSessionStateObserver, CSSiriAcousticFingerprinter;
@protocol OS_dispatch_group, CSSiriSpeechCapturingDelegate, OS_dispatch_source, OS_dispatch_queue, CSEndpointAnalyzer;

@interface CSSiriSpeechRecorder : NSObject <CSSiriAcousticFingerprinterDelegate, CSSpeechControllerDelegate, CSEndpointAnalyzerDelegate, CSLanguageDetectorDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionControllerDelegate, CSSiriSpeechCapturing> {
    id<CSSiriSpeechCapturingDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_queue;
    BOOL _isSpeechControllerInitialized;
    CSSpeechController *_speechController;
    CSAudioSessionController *_audioSessionController;
    CSSiriAudioPlaybackService *_audioPlaybackService;
    long long _packetCount;
    long long _speechCapturingMode;
    long long _recordingAlertsConfiguration;
    NSObject<OS_dispatch_source> *_extendedEndpointTimer;
    id<CSEndpointAnalyzer> _endpointAnalyzer;
    CSSiriSpeechRecordingContext *_context;
    CSSiriAudioActivationInfo *_currentActivationInfo;
    CSSiriAudioActivationInfo *_pendingActivationInfo;
    CSAudioRecordDeviceInfo *_currentRecordDeviceInfo;
    NSString *_currentPlaybackRoute;
    BOOL _fingerprintingEnabled;
    CSSiriAcousticFingerprinter *_fingerprinter;
    long long _audioFileType;
    BOOL _needsAVVCLPCMCallbacks;
    BOOL _hasReceivedEmptyLPCMRecordBuffer;
    NSFileHandle *_audioFileHandle;
    CSSiriAudioFileWriter *_audioFileWriter;
    CSSiriAudioFileWriter *_audioLogggingFileWriter;
    long long _startEvent;
    long long _recordingState;
    long long _endpointerOperationMode;
    BOOL _didReceiveFirstBuffer;
    BOOL _didReceiveLastBuffer;
    BOOL _didDetectStartpoint;
    BOOL _didDetectEndpoint;
    BOOL _didEnterTwoShotMode;
    BOOL _didFakeTwoShotWithAlert;
    NSUUID *_fakeTwoShotTTSPromptUUID;
    BOOL _serverDidRecognizeSpeech;
    BOOL _fingerprintWasRecognized;
    BOOL _serverDidEndpoint;
    BOOL _didTimeout;
    BOOL _wasCanceled;
    BOOL _suppressRecordingStoppedAlert;
    BOOL _isRecordingUsingBTRoute;
    double _twoShotStartTime;
    BOOL _didPerformTwoShotPrompt;
    BOOL _forceSuccessAlertOnStop;
    BOOL _isDriving;
    double _startRecordingTimestamp;
    double _firstBufferTimestamp;
    unsigned long long _firstBufferHostTime;
    unsigned long long _estimatedSpeechEndHostTime;
    double _lastPrepareTimestamp;
    double _accumulatedBufferDuration;
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;
    struct OpaqueAudioConverter { } *_decoder;
    double _expectedFirstBufferTimestamp;
    BOOL _isOpus;
    NSString *_recordDevice;
    BOOL _audioDuckingEnabled;
    NSXPCConnection *_speechRecordingEventListenerConnection;
    AFWatchdogTimer *_fakeTwoShotTTSPromptWatchdogTimer;
    unsigned long long _lastAudioRecordBufferStartTime;
    unsigned long long _lastAudioRecordBufferReceiptTime;
    CSEndpointerMetrics *_lastEndpointerMetrics;
    CSEndpointDelayReporter *_endpointDelayReporter;
    double _lastEndpointHintDuration;
    NSArray *_lastEndpointHintFeatures;
    id /* block */ _lastEndpointHintCompletion;
    AFSpeechSynthesisRecord *_mostRecentSpeechSynthesisRecord;
    AFClientConfiguration *_currentClientConfiguration;
    NSObject<OS_dispatch_group> *_alertPlaybackGroup;
    NSMutableDictionary *_numberOfAVVCAlertPlaybacksByType;
    AFBluetoothWirelessSplitterSessionStateObserver *_bluetoothWirelessSplitterSessionStateObserver;
    AFExperimentContext *_experimentContext;
    NSUUID *_mhUUID;
}

@property (nonatomic) BOOL suppressInterruptionEndedNotifications;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)eagerlyInitializeAudioRecording;
- (void)speechControllerLPCMRecordBufferAvailable:(id)a0 buffer:(id)a1;
- (void)speechControllerRequestsOperation:(unsigned long long)a0 forReason:(unsigned long long)a1;
- (void)setClientConfiguration:(id)a0;
- (void)speechControllerDidDeliverLastBuffer:(id)a0 forReason:(long long)a1 estimatedSpeechEndHostTime:(unsigned long long)a2;
- (void)preheat;
- (void)setEARLanguageDetectorSpeechRequestId:(id)a0;
- (void)_setAlertsIfNeeded;
- (id)_speechControllerWithError:(id *)a0;
- (void)setAudioFileType:(long long)a0;
- (void)setAudioFileHandle:(id)a0;
- (void)speechController:(id)a0 didSetAudioSessionActive:(BOOL)a1;
- (void)updateServerEndpointFeatures:(id)a0;
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange { double x0; double x1; })a0;
- (void)_logAudioMetrics:(id)a0 mhUUID:(id)a1;
- (void)setSpeechRecognizedContext:(id)a0;
- (void)speechControllerDidStopRecording:(id)a0 audioDeviceInfo:(id)a1 forReason:(long long)a2 estimatedSpeechEndHostTime:(unsigned long long)a3;
- (void)languageDetectorDidDetectLanguageWithConfidence:(id)a0 confidence:(id)a1 isConfident:(BOOL)a2;
- (void)cancelSpeechCaptureSuppressingAlert:(BOOL)a0;
- (void)updateSpeechSynthesisRecord:(id)a0;
- (id)getAudioRouteInstrumentationWithRecordingInfo:(id)a0;
- (void)_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:(unsigned long long)a0 atHostTime:(unsigned long long)a1 mhUUID:(id)a2;
- (void)setEndpointerThreshold:(double)a0;
- (void)setEndpointerDelayedTrigger:(BOOL)a0;
- (id)recordingInfoForPreheatWithEvent:(long long)a0;
- (void)speakerIdentificationDidDetectSpeakerWithScores:(id)a0;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:(id)a1;
- (id)currentVTSatScore;
- (void)_setLanguageDetectorDelegateIfRequired;
- (void)getLastStartpointTimestampAndCurrentTime:(id /* block */)a0;
- (void)speechControllerDidStartRecording:(id)a0 audioDeviceInfo:(id)a1 successfully:(BOOL)a2 error:(id)a3;
- (void)_logBluetoothStateWithMHUUID:(id)a0;
- (void)_setDictationAudioModeEnabled:(BOOL)a0;
- (void)_cancelExtendedEndpointTimer;
- (void)setFingerprintWasRecognized;
- (BOOL)_shouldEmitInstrumentation;
- (void)speechControllerRecordHardwareConfigurationDidChange:(id)a0 toConfiguration:(long long)a1;
- (void)_disableEndpointer;
- (int)_mapInstrumentationEndpointTypeFromStopRecordingReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })a0;
- (void)speechControllerBeginRecordInterruption:(id)a0 withContext:(id)a1;
- (void)setFingerprintingEnabled:(BOOL)a0;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)a0 atTime:(double)a1;
- (unsigned int)_audioDeviceID;
- (id)_getFanInfoArray;
- (void)_speechControllerDidReceiveLastAudioRecordBuffer:(id)a0 forReason:(long long)a1 estimatedSpeechEndHostTime:(unsigned long long)a2 isRecordingStopped:(BOOL)a3;
- (void)suppressUtteranceGradingIfRequired;
- (id)_currentRecordRoute;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)a0 atTime:(double)a1 wantsAudibleFeedback:(BOOL)a2;
- (id)_currentPlaybackRoute;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionInterruptionNotificationWithUserInfo:(id)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionRouteChangeNotificationWithUserInfo:(id)a1;
- (void)setDelegate:(id)a0;
- (void)_handleFakeTwoShotPromptCallbackWithUUID:(id)a0 timestamp:(double)a1 duration:(double)a2 error:(id)a3;
- (void)_playPhaticWithCompletion:(id /* block */)a0;
- (void)releaseAudioSession;
- (id)_speechRecordingEventListener;
- (id)convertVirtualAudioSubTypeToString:(unsigned int)a0;
- (BOOL)_prepareSpeechControllerWithOptions:(unsigned long long)a0 error:(id *)a1;
- (void)forceSuccessAudioAlertOnStop;
- (BOOL)_updateAudioContextWithPendingInfoForReason:(id)a0;
- (void)_setupAudioFileWritingForSpeechController:(id)a0 info:(id)a1 context:(id)a2;
- (void)_enforceEndpointHint;
- (void)_setAudioDuckingEnabled:(BOOL)a0;
- (void)setSpeechRequestOptions:(id)a0;
- (void)endpointer:(id)a0 didDetectStartpointAtTime:(double)a1;
- (id)_currentRecordDeviceInfo;
- (void)speechController:(id)a0 willSetAudioSessionActive:(BOOL)a1;
- (void)speechControllerRecordBufferAvailable:(id)a0 buffers:(id)a1 durationInSec:(float)a2 recordedAt:(unsigned long long)a3 audioDeviceInfo:(id)a4;
- (id)fetchRecordingInfo;
- (void).cxx_destruct;
- (void)playRecordingStartAlert;
- (void)acousticFingerprinter:(id)a0 hasFingerprint:(id)a1 duration:(double)a2;
- (void)setIsDriving:(BOOL)a0;
- (void)_stopRecordingForEndpointReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })a0;
- (void)endpointer:(id)a0 didDetectHardEndpointAtTime:(double)a1 withMetrics:(id)a2;
- (id)initWithQueue:(id)a0 speechController:(id)a1 audioSessionController:(id)a2 audioPlaybackService:(id)a3 experimentContext:(id)a4;
- (void)updateEndpointHintForDuration:(double)a0 completion:(id /* block */)a1;
- (void)_handleFakeTwoShotPromptTimeoutWithUUID:(id)a0;
- (void)_logVoiceTriggerInfo:(id)a0 withMHUUID:(id)a1;
- (void)_setEndpointStyle:(long long)a0;
- (void)_updateAudioContextWithInfo:(id)a0 reason:(id)a1;
- (void)prepareForMode:(long long)a0;
- (BOOL)prepareSpeechCaptureWithOptions:(unsigned long long)a0 error:(id *)a1;
- (void)performBlockAfterAlerts:(id /* block */)a0 timeout:(double)a1;
- (id)_currentMHUUID:(BOOL)a0;
- (void)_performTwoShotPromptForType:(long long)a0 atTime:(double)a1;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionOwnerResetNotification:(id)a1;
- (void)_playAudioAlert:(long long)a0;
- (void)_speechControllerRequestsOperation:(unsigned long long)a0 forReason:(unsigned long long)a1 completion:(id /* block */)a2;
- (id)_fingerprinter;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionOwnerLostNotification:(id)a1;
- (void)_setSpeechCapturingMode:(long long)a0;
- (void)_updateRecordDeviceInfoAndPlaybackRouteForReason:(id)a0 audioDeviceInfo:(id)a1 forcesUpdate:(BOOL)a2;
- (unsigned int)fetchAudioSessionID;
- (void)setSpeechWasRecognizedForElapsedTime:(double)a0 isFinal:(BOOL)a1;
- (BOOL)_checkAudioLoggingLimits:(id)a0;
- (void)setSpeechRecordingEventListeningEndpoint:(id)a0;
- (void)speechControllerEndRecordInterruption:(id)a0;
- (void)_hardEndpointWasDetectedWithMetrics:(id)a0 atTime:(double)a1;
- (void)speechControllerRequestsOperation:(unsigned long long)a0 forReason:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)_speechControllerDidStopRecording:(id)a0 audioDeviceInfo:(id)a1 forReason:(long long)a2 estimatedSpeechEndHostTime:(unsigned long long)a3 errorCodeOverride:(long long)a4 underlyingError:(id)a5;
- (BOOL)_startAudioPlaybackRequest:(id)a0 options:(unsigned long long)a1 completion:(id /* block */)a2;
- (void)_speechControllerDidStartRecording:(id)a0 successfully:(BOOL)a1 error:(id)a2;
- (void)_logFanState;
- (unsigned int)_audioSessionID;
- (void)speechControllerDidFinishAlertPlayback:(id)a0 ofType:(long long)a1 error:(id)a2;
- (void)speechControllerDidUpdateSmartSiriVolume:(id)a0 forReason:(unsigned long long)a1;
- (void)stopSpeechCaptureForEvent:(long long)a0 suppressAlert:(BOOL)a1 hostTime:(unsigned long long)a2;
- (BOOL)_setAudioContextWithInfo:(id)a0 forReason:(id)a1;
- (id)_recordingInfoForEvent:(long long)a0 audioAlertStyle:(long long)a1 includeBTInfo:(BOOL)a2 includeRecordDeviceInfo:(BOOL)a3;
- (void)dealloc;
- (id)_currentRecordingInfo;
- (void)_resetSpeechController;
- (void)enforcePreviousEndpointHint;
- (void)_stopRecordingWithReason:(union { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; })a0 hostTime:(unsigned long long)a1;
- (void)_scheduleExtendedEndpointTimer;
- (BOOL)startSpeechCaptureWithContext:(id)a0 willStartHandler:(id /* block */)a1 error:(id *)a2;
- (void)_setEndpointerOperationMode:(long long)a0 forceUpdate:(BOOL)a1;
- (void)_playStopAlertIfNecessaryForReason:(long long)a0 endpointMode:(long long)a1 error:(id)a2;
- (void)_updateRecordBufferDuration;
- (BOOL)_updateAudioContextToPostVoiceForReason:(id)a0;
- (void)_checkIfLastEndpointHintShouldBeAccepted;
- (void)_clearEndpointHint;
- (void)audioSessionController:(id)a0 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)a1;
- (id)_speechController;

@end

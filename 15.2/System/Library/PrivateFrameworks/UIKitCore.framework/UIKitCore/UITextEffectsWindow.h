@class UIWindowScene, NSString, NSDictionary, UIEditingOverlayViewController, NSLayoutConstraint;

@interface UITextEffectsWindow : UIAutoRotatingWindow <_UICanvasBasedObject> {
    BOOL _inDealloc;
    unsigned long long _activeEffectsCount;
    NSDictionary *_perCanvasOptions;
    UIWindowScene *__intendedWindowScene;
    unsigned long long _activeRemoteViewCount;
    unsigned long long _windowLevelCount;
    double _windowLevelStack[5];
    BOOL _manualHostingOverride;
    NSLayoutConstraint *_bottomConstraint;
}

@property (readonly) UIWindowScene *_intendedCanvas;
@property (readonly) NSDictionary *_options;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIEditingOverlayViewController *editingOverlayViewController;
@property (readonly) unsigned int contextID;
@property (readonly, nonatomic) BOOL isFullscreen;
@property (readonly, nonatomic) BOOL isForViewService;
@property (nonatomic) double defaultWindowLevel;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } keyboardScreenReferenceSize;
@property (readonly, nonatomic) double keyboardWidthForCurrentDevice;
@property (nonatomic) struct CGPoint { double x; double y; } hostedWindowOffset;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } hostedFrame;
@property (nonatomic) struct CGSize { double width; double height; } hostedSceneSize;
@property (nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } hostedSafeInsets;

+ (id)activeTextEffectsWindowForWindowScene:(id)a0;
+ (BOOL)_shouldSoftAssertOnSetScreen;
+ (BOOL)_isSecure;
+ (id)activeTextEffectsWindowForScreen:(id)a0;
+ (void)raiseTextEffectsWindowsForShowNotificationCenter;
+ (id)activeTextEffectsWindowForCanvas:(id)a0;
+ (id)sharedTextEffectsWindowForWindowScene:(id)a0 forViewService:(BOOL)a1;
+ (id)sharedTextEffectsWindowForScreen:(id)a0;
+ (id)_canvasForScreen:(id)a0;
+ (id)sharedTextEffectsWindowForWindowScene:(id)a0;
+ (id)sharedTextEffectsWindowForCanvas:(id)a0;
+ (id)_sharedTextEffectsWindowforWindowScene:(id)a0 allowHosted:(BOOL)a1 forViewService:(BOOL)a2 matchesStatusBarOrientationOnAccess:(BOOL)a3 shouldCreateIfNecessary:(BOOL)a4;
+ (id)sharedTextEffectsWindowAboveStatusBar;
+ (id)activeTextEffectsWindowForWindowScene:(id)a0 forViewService:(BOOL)a1;
+ (id)sharedTextEffectsWindow;
+ (void)releaseSharedInstances;
+ (void)lowerTextEffectsWindowsForHideNotificationCenter;

- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toView:(id)a1;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromView:(id)a1;
- (void)updateForOrientation:(long long)a0;
- (long long)actualSceneOrientation;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 attached:(BOOL)a1;
- (void)_commonInitWithOptions:(id)a0;
- (void)handleStatusBarChangeFromHeight:(double)a0 toHeight:(double)a1;
- (void)_createSystemGestureGateGestureRecognizerIfNeeded;
- (void)_commonTextEffectsInit;
- (BOOL)_isTextEffectsWindow;
- (void)updateEditingOverlayContainer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sceneBounds;
- (BOOL)_shouldInstallRootPresentationController;
- (BOOL)_canAffectStatusBarAppearance;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromWindow:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_sceneReferenceBounds;
- (void)resetTransform;
- (id)_initBasicWithCanvas:(id)a0 options:(id)a1;
- (BOOL)_canActAsKeyWindowForScreen:(id)a0;
- (void)bringSubviewToFront:(id)a0;
- (id)aboveStatusBarWindow;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_isFullscreen;
- (void)_didRemoveSubview:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_forHostedProcessConvertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forWindow:(id)a1 wasFromWindow:(BOOL)a2;
- (void)_willSnapshot;
- (void)_sceneBoundsDidChange;
- (void)setEnableRemoteHosting:(BOOL)a0;
- (void)addBottomPadding:(double)a0;
- (void)_sortSubviewsOfView:(id)a0;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 debugName:(id)a1 windowScene:(id)a2;
- (void)sortSubviews;
- (id)_initWithCanvas:(id)a0 options:(id)a1;
- (void)_matchDeviceOrientation;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toWindow:(id)a1;
- (void)_updateRootViewConstraintsForInterfaceOrientationAndStatusBarHeight;
- (void)delayHideWindow;
- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toWindow:(id)a1;
- (void)didAddSubview:(id)a0;
- (BOOL)isInternalWindow;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneBounds;
- (void)updateForOrientation:(long long)a0 forceResetTransform:(BOOL)a1;
- (BOOL)_shouldTextEffectsWindowBeHostedForView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromWindow:(id)a1;
- (double)slideOverWindowVerticalOffset;
- (BOOL)_isRemoteKeyboardWindow;
- (BOOL)_matchingOptions:(id)a0;
- (void)becomeKeyWindow;
- (id)_inputWindowController;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneBoundsForLandscape:(BOOL)a0;
- (void)_setWindowLevel:(double)a0;
- (BOOL)_shouldAutorotateToInterfaceOrientation:(long long)a0;
- (BOOL)_extendsScreenSceneLifetime;
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_usableSceneBounds;
- (void)updateSubviewOrdering;
- (BOOL)enableRemoteHosting;
- (void)_configureContextOptions:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneFrame;
- (void)_restoreWindowLevel;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })actualSceneFrameForOrientation:(long long)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toView:(id)a1;
- (void)sendSubviewToBack:(id)a0;
- (BOOL)_shouldResizeWithScene;
- (struct CGPoint { double x0; double x1; })_forHostedProcessConvertPoint:(struct CGPoint { double x0; double x1; })a0 forWindow:(id)a1 wasFromWindow:(BOOL)a2;
- (void)_updateTransformLayer;
- (void)_didSnapshot;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromView:(id)a1;
- (long long)interfaceOrientation;

@end

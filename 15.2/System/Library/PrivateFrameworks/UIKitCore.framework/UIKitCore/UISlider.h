@class UIColor, UISliderDataModel, NSArray, _UIModulationFeedbackGenerator, UIImage, _UIEdgeFeedbackGenerator, UIView;
@protocol _UISliderVisualElement;

@interface UISlider : UIControl <NSCoding> {
    UIView<_UISliderVisualElement> *_visualElement;
    UISliderDataModel *_data;
    NSArray *_dummyViews;
    unsigned long long _preferredBehavioralStyle;
}

@property (nonatomic, setter=_setTrackEnabled:) BOOL _trackEnabled;
@property (retain, nonatomic, getter=_edgeFeedbackGenerator, setter=_setEdgeFeedbackGenerator:) _UIEdgeFeedbackGenerator *edgeFeedbackGenerator;
@property (retain, nonatomic, getter=_modulationFeedbackGenerator, setter=_setModulationFeedbackGenerator:) _UIModulationFeedbackGenerator *modulationFeedbackGenerator;
@property (retain, nonatomic, getter=_edgeFeedbackBehavior, setter=_setEdgeFeedbackBehavior:) _UIEdgeFeedbackGenerator *edgeFeedbackBehavior;
@property (readonly, nonatomic) unsigned long long behavioralStyle;
@property (nonatomic) unsigned long long preferredBehavioralStyle;
@property (nonatomic) float value;
@property (nonatomic) float minimumValue;
@property (nonatomic) float maximumValue;
@property (retain, nonatomic) UIImage *minimumValueImage;
@property (retain, nonatomic) UIImage *maximumValueImage;
@property (nonatomic, getter=isContinuous) BOOL continuous;
@property (retain, nonatomic) UIColor *minimumTrackTintColor;
@property (retain, nonatomic) UIColor *maximumTrackTintColor;
@property (retain, nonatomic) UIColor *thumbTintColor;
@property (readonly, nonatomic) UIImage *currentThumbImage;
@property (readonly, nonatomic) UIImage *currentMinimumTrackImage;
@property (readonly, nonatomic) UIImage *currentMaximumTrackImage;

+ (void)_setAllowsUnsupportedMacIdiomBehavior:(BOOL)a0;
+ (BOOL)_allowActionsToQueue;
+ (BOOL)_allowsUnsupportedMacIdiomBehavior;

- (void)setThumbImage:(id)a0 forStates:(unsigned long long)a1;
- (BOOL)cancelTouchTracking;
- (void)layoutSubviews;
- (void)setMaximumTrackImage:(id)a0 forState:(unsigned long long)a1;
- (void)setMaximumTrackImage:(id)a0 forStates:(unsigned long long)a1;
- (void)setEnabled:(BOOL)a0;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 trackRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 value:(float)a2;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)a0;
- (void)setValue:(float)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)maximumTrackImageForState:(unsigned long long)a0;
- (id)createThumbView;
- (BOOL)isAnimatingValueChange;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (id)minimumTrackImageForState:(unsigned long long)a0;
- (BOOL)cancelMouseTracking;
- (void)encodeWithCoder:(id)a0;
- (void)setHighlighted:(BOOL)a0;
- (void)endTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (BOOL)isTracking;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setTracking:(BOOL)a0;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (void)_controlTouchEnded:(id)a0 withEvent:(id)a1;
- (unsigned long long)_controlEventsForActionTriggered;
- (float)value;
- (void)_controlTouchMoved:(id)a0 withEvent:(id)a1;
- (void)setMaximumValue:(float)a0;
- (BOOL)continueTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (id)description;
- (void)setMinimumValue:(float)a0;
- (id)_thumbView;
- (BOOL)isAccessibilityElementByDefault;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })valueTextRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_installVisualElement;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })trackRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_thumbHitEdgeInsets;
- (BOOL)_isThumbEnabled;
- (void)_populateArchivedSubviews:(id)a0;
- (void)_installVisualElement:(id)a0;
- (void)setSelected:(BOOL)a0;
- (void)_setUseLookNeue:(BOOL)a0;
- (BOOL)beginTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (void)setSemanticContentAttribute:(long long)a0;
- (void)_setMinimumTrackVisible:(BOOL)a0 withDuration:(double)a1;
- (void).cxx_destruct;
- (void)setThumbImage:(id)a0 forState:(unsigned long long)a1;
- (BOOL)_alwaysHandleScrollerMouseEvent;
- (void)traitCollectionDidChange:(id)a0;
- (id)init;
- (void)setMinimumTrackImage:(id)a0 forStates:(unsigned long long)a1;
- (id)thumbImageForState:(unsigned long long)a0;
- (id)initWithCoder:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (void)_setMaxValue:(float)a0;
- (void)_setMinValue:(float)a0;
- (id)_minTrackView;
- (id)_maxTrackView;
- (id)_minValueView;
- (id)_maxValueView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (float)minimumValue;
- (void)setValue:(float)a0 animated:(BOOL)a1;
- (void)setShowValue:(BOOL)a0;
- (id)_thumbViewNeue;
- (float)maximumValue;
- (void)_setThumbEnabled:(BOOL)a0;
- (void)_controlTouchBegan:(id)a0 withEvent:(id)a1;
- (void)setMinimumTrackImage:(id)a0 forState:(unsigned long long)a1;

@end

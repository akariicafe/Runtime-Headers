@class DOMHTMLElement, _UISupplementalLexicon, DOMNode, NSDictionary, UIInputContextHistory, UIAutoscroll, UITapGestureRecognizer, UIWebTextPlaceholder, UIPanGestureRecognizer, UITextRange, CALayer, UIDragInteraction, NSIndexSet, _UIWebViewportHandler, _UIWebHighlightLongPressGestureRecognizer, UIDropInteraction, UIColor, UIWebFileUploadPanel, UILongPressGestureRecognizer, PKScribbleInteraction, WebHistoryItem, UIWebRotatingAlertController, WebThreadSafeUndoManager, NSURL, _UITextDragCaretView, UITextPosition, UITextInteractionAssistant, _UITextServiceSession, UIView, NSArray, interactionSheet, UIPreviewItemController, NSString, UIWebPlaybackTargetPicker, UITextChecker, NSTimer, UITextInputTraits, WebView, RTIInputSystemSourceSession, UITextInputPasswordRules, DOMRange, UIImage;
@protocol UITextInputDelegate, UITextInputSuggestionDelegate, UITextInputTokenizer, UIWebDraggingDelegate;

@interface UIWebDocumentView : UIWebTiledView <DDDetectionControllerInteractionDelegate, UIDragInteractionDelegate, UIDropInteractionDelegate, UIPreviewItemDelegate, _UIRotatingAlertControllerDelegate, UITextAutoscrolling, UIAutoscrollContainer, UIGestureRecognizerDelegate, UIKeyboardInput, UITextInputPrivate, UIKeyInput, UITextInputTokenizer, UITextInputMultiDocument, _UIWebDoubleTapDelegate, UIWebFileUploadPanelDelegate, WebEditingDelegate, WebFrameLoadDelegate> {
    WebView *_webView;
    id m_parentTextView;
    id _delegate;
    id _textSuggestionDelegate;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _doubleTapRect;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _mainDocumentDoubleTapRect;
    struct CGPoint { double x; double y; } _scrollPoint;
    struct CGPoint { double x; double y; } _doubleTapStartPosition;
    double _doubleTapStartTime;
    struct CGSize { double width; double height; } _pendingSize;
    long long _orientation;
    DOMHTMLElement *_standaloneEditingElement;
    struct CGPoint { double x; double y; } _mouseDownPoint;
    double _mouseDownTime;
    UIAutoscroll *_autoscroll;
    struct __CFDictionary { } *_plugInViews;
    long long m_selectionGranularity;
    CALayer *_contentLayersHostingLayer;
    CALayer *_flattenedRotatingContentLayer;
    NSArray *_additionalSubviews;
    UITextInputTraits *_traits;
    id<UITextInputDelegate> _inputDelegate;
    UITapGestureRecognizer *_singleTapGestureRecognizer;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    UITapGestureRecognizer *_twoFingerDoubleTapGestureRecognizer;
    _UIWebHighlightLongPressGestureRecognizer *_highlightLongPressGestureRecognizer;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    UIPanGestureRecognizer *_twoFingerPanGestureRecognizer;
    UILongPressGestureRecognizer *_previewGestureRecognizer;
    UILongPressGestureRecognizer *_previewSecondaryGestureRecognizer;
    BOOL _panGestureWasEnabled;
    BOOL _pinchGestureWasEnabled;
    UIPreviewItemController *_previewItemController;
    struct { NSTimer *timer; struct CGPoint { double x; double y; } location; long long modifierFlags; BOOL isBlocked; BOOL isCancelled; BOOL isOnWebThread; BOOL isDisplayingHighlight; BOOL isWriting; BOOL attemptedClick; struct CGPoint { double x; double y; } lastPanTranslation; DOMNode *element; interactionSheet *delegate; UIWebRotatingAlertController *x0; BOOL allowsImageSheet; BOOL allowsDataDetectorsSheet; BOOL allowsLinkSheet; BOOL acceptsFirstResponder; double documentScale; NSArray *previewHintRects; UIImage *previewHintImage; } _interaction;
    _UIWebViewportHandler *_viewportHandler;
    int _documentType;
    float _documentScale;
    float _previousDocumentScale;
    struct CGSize { double width; double height; } _fixedLayoutOriginRoundingDelta;
    struct CGSize { double width; double height; } _fixedLayoutSizeRoundingDelta;
    unsigned int _mouseDownCount;
    unsigned int _printModeCount;
    unsigned long long _dataDetectorTypes;
    unsigned char _webCoreNeedsSetNeedsDisplay : 1;
    unsigned char _webCoreNeedsDraw : 1;
    unsigned char _ignoresFocusingMouse : 1;
    unsigned char _ignoresKeyEvents : 1;
    unsigned char _autoresizes : 1;
    unsigned char _ignoresViewportOverflowWhenAutoresizing : 1;
    unsigned char _shouldIgnoreCustomViewport : 1;
    unsigned char _updatingSize : 1;
    unsigned char _scalesToFit : 1;
    unsigned char _alwaysConstrainsScale : 1;
    unsigned char _updatesScrollView : 1;
    unsigned char _hasCustomScale : 1;
    unsigned char _shouldRestoreScrollPosition : 1;
    unsigned char _pageNeedsReset : 1;
    unsigned char _hasScrollPoint : 1;
    unsigned char _gesturesDisabled : 1;
    unsigned char _doubleTapRectIsReplaced : 1;
    unsigned char _standaloneEditableView : 1;
    unsigned char _widgetEditingView : 1;
    unsigned char _mouseDragged : 1;
    unsigned char _mouseReentrancyGuard : 1;
    unsigned char _isShowingFullScreenPlugIn : 1;
    unsigned char _isSettingRedrawFrame : 1;
    unsigned char _needsScrollNotifications : 1;
    unsigned char _loadsSynchronously : 1;
    unsigned char _mouseDown : 1;
    unsigned char _geolocationDialogAllowed : 1;
    unsigned char _usingMinimalTilesDuringLoading : 1;
    unsigned char _sheetsCount : 2;
    unsigned char _didFirstVisuallyNonEmptyLayout : 1;
    unsigned char _loadInProgress : 1;
    unsigned char _uiwdvIsResigningFirstResponder : 1;
    unsigned char _sizeUpdatesSuspended : 1;
    unsigned char _sizeUpdateOccurredWhileSuspended : 1;
    unsigned char _shouldOnlyRecognizeGesturesOnActiveElements : 1;
    unsigned char _ignoresFocusEventFromFirstResponderChange : 1;
    unsigned char _shouldCloseWebViewAtDealloc : 1;
    unsigned char _shouldRemoveUserStyleSheet : 1;
    unsigned char _hasDrawnTiles : 1;
    unsigned char _showingTextStyleOptions : 1;
    unsigned char _subviewCachesNeedUpdate : 1;
    unsigned char _avoidFixedPositionUpdateViaDidScroll : 1;
    unsigned char _inspectorSearchingForNode : 1;
    unsigned char _previousScrollWasScrollToTop : 1;
    unsigned char _pageIsLoadedFromPageCache : 1;
    unsigned char _shouldSendWillShowInteractionHighlight : 1;
    WebThreadSafeUndoManager *_undoManager;
    UITextInteractionAssistant *_textSelectionAssistant;
    UITextChecker *_textChecker;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _caretInsets;
    UIWebFileUploadPanel *_fileUploadPanel;
    int _selectionAffinity;
    UIWebTextPlaceholder *_textPlaceholder;
    id _textPlaceholderRemovalObserver;
    UIWebPlaybackTargetPicker *_playbackTargetPicker;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _currentDragCaretRect;
    _UITextDragCaretView *_textDragCaretView;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _currentDragBoundingRect;
    BOOL _isPerformingDrop;
    BOOL _didEndDropSession;
    BOOL _didCreateDropPreview;
    PKScribbleInteraction *_scribbleInteraction;
    struct _UIWebViewportConfiguration { struct CGSize { double width; double height; } size; float initialScale; float minimumScale; float maximumScale; BOOL allowsUserScaling; BOOL allowsShrinkToFit; BOOL avoidsUnsafeArea; } _defaultViewportConfigurations[5];
    _UITextServiceSession *_definitionSession;
    _UITextServiceSession *_learnSession;
    _UITextServiceSession *_shareSession;
    _UITextServiceSession *_lookupSession;
    _UITextServiceSession *_translateSession;
    WebHistoryItem *_latestCommittedPageLoadHistoryItem;
}

@property (getter=_acceptsFirstResponder, setter=_setAcceptsFirstResponder:) BOOL _acceptsFirstResponder;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) int selectionState;
@property (nonatomic) struct CGPoint { double x0; double x1; } autoscrollContentOffset;
@property (nonatomic) BOOL shouldAutoscroll;
@property (retain, nonatomic) DOMRange *rangeToRestoreAfterDictation;
@property (nonatomic, getter=isDoubleTapEnabled) BOOL doubleTapEnabled;
@property (nonatomic) BOOL shouldIgnoreCustomViewport;
@property (nonatomic) BOOL shouldOnlyRecognizeGesturesOnActiveElements;
@property (nonatomic) BOOL sizeUpdatesSuspended;
@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay;
@property (nonatomic) BOOL suppressesIncrementalRendering;
@property (nonatomic) BOOL alwaysConstrainsScale;
@property (retain, nonatomic) UIDragInteraction *dragInteraction;
@property (retain, nonatomic) UIDropInteraction *dropInteraction;
@property (nonatomic) id<UIWebDraggingDelegate> webDraggingDelegate;
@property (nonatomic) struct CGPoint { double x; double y; } lastGlobalPosition;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentDragCaretRect;
@property (retain, nonatomic) NSString *draggedLinkTitle;
@property (retain, nonatomic) NSURL *draggedLinkURL;
@property (nonatomic) unsigned long long currentDragSourceAction;
@property (retain, nonatomic) UIView *initialDropSnapshotView;
@property (nonatomic) struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } exposedScrollViewRect;
@property (readonly, nonatomic) BOOL wantsMinimalUI;
@property (readonly, nonatomic) unsigned long long renderTreeSize;
@property (nonatomic) unsigned long long renderTreeSizeThresholdForReset;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) long long cursorBehavior;
@property (readonly, nonatomic) id<UITextInputSuggestionDelegate> textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) id<UITextInputDelegate> inputDelegate;
@property (readonly, nonatomic) id<UITextInputTokenizer> tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet { } *textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic, getter=isDevicePasscodeEntry) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;

+ (void)initialize;
+ (id)_createDefaultHighlightView;
+ (double)getTimestamp;
+ (BOOL)hasLandscapeOrientation;
+ (id)_sharedHighlightView;
+ (id)standardTextViewPreferences;
+ (Class)layerClass;

- (void)toggleBoldface:(id)a0;
- (BOOL)keyboardInput:(id)a0 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)keyboardInputShouldDelete:(id)a0;
- (id)textColorForCaretSelection;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0;
- (id)selectionRectsForRange:(id)a0;
- (void)increaseSize:(id)a0;
- (void)selectAll;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)insertDictationResult:(id)a0 withCorrectionIdentifier:(id)a1;
- (id)characterRangeByExtendingPosition:(id)a0 inDirection:(long long)a1;
- (void)scrollSelectionToVisible:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleFrame;
- (void)setSelectedDOMRange:(id)a0 affinityDownstream:(BOOL)a1;
- (void)keyboardInputChangedSelection:(id)a0;
- (void)_doubleTapRecognized:(id)a0;
- (void)_showImageSheet;
- (id)_textSelectingContainer;
- (void)_share:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)a0;
- (void)takeTraitsFrom:(id)a0;
- (id)selectionView;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (void)removeDictationResultPlaceholder:(id)a0 willInsertResult:(BOOL)a1;
- (void)replace:(id)a0;
- (void)_transliterateChinese:(id)a0;
- (id)_positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2 withAffinityDownstream:(BOOL)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)a0;
- (void)_interactionStartedFromPreviewItemController:(id)a0;
- (BOOL)keyboardInputChanged:(id)a0;
- (void)_promptForReplace:(id)a0;
- (void)select:(id)a0;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (id)textStylingAtPosition:(id)a0 inDirection:(long long)a1;
- (BOOL)setRangedSelectionExtentPoint:(struct CGPoint { double x0; double x1; })a0 baseIsStart:(BOOL)a1;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })a0;
- (id)_responderForBecomeFirstResponder;
- (BOOL)requiresKeyEvents;
- (id)positionWithinRange:(id)a0 farthestInDirection:(long long)a1;
- (void)endSelectionChange;
- (void)_longPressRecognized:(id)a0;
- (void)clearSelection;
- (BOOL)hasMarkedText;
- (BOOL)cancelTouchTracking;
- (void)_define:(id)a0;
- (id)_presentedViewControllerForPreviewItemController:(id)a0;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectedDOMRange;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (BOOL)keyboardInput:(id)a0 shouldInsertText:(id)a1 isMarkedText:(BOOL)a2;
- (void)_showTextStyleOptions:(id)a0;
- (void)removeTextPlaceholder:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 canBePreventedByGestureRecognizer:(id)a1;
- (void)setDrawsBackground:(BOOL)a0;
- (BOOL)isPreviewing;
- (id)metadataDictionariesForDictationResults;
- (id)_presentationRectsForPreviewItemController:(id)a0;
- (id)_beginPrintModeForHTMLView:(id)a0 withSize:(struct CGSize { double x0; double x1; })a1 startOffset:(double)a2 minimumLayoutWidth:(double)a3 maximumLayoutWidth:(double)a4 tileClippedContent:(BOOL)a5;
- (id)webView;
- (id)supportedPasteboardTypesForCurrentSelection;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)layoutSubviews;
- (id)insertionPointColor;
- (void)dropInteraction:(id)a0 sessionDidEnd:(id)a1;
- (void)pasteAndMatchStyle:(id)a0;
- (void)_previewItemController:(id)a0 commitPreview:(id)a1;
- (BOOL)isPosition:(id)a0 withinTextUnit:(long long)a1 inDirection:(long long)a2;
- (void)_registerPreview;
- (void)fileUploadPanelDidDismiss:(id)a0;
- (BOOL)_interactionShouldBeginFromPreviewItemController:(id)a0 forPosition:(struct CGPoint { double x0; double x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (void)toggleItalics:(id)a0;
- (void)cancelAutoscroll;
- (void)_twoFingerDoubleTapRecognized:(id)a0;
- (id)_dataForPreviewItemController:(id)a0 atPosition:(struct CGPoint { double x0; double x1; })a1 type:(long long *)a2;
- (void)setDataDetectorTypes:(unsigned long long)a0;
- (id)fontForCaretSelection;
- (void)paste:(id)a0;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)a0 replacementText:(id)a1;
- (void)decreaseSize:(id)a0;
- (void)_interactionStoppedFromPreviewItemController:(id)a0;
- (BOOL)hasSelection;
- (void)_addShortcut:(id)a0;
- (id)automaticallySelectedOverlay;
- (id)dragInteraction:(id)a0 previewForLiftingItem:(id)a1 session:(id)a2;
- (void)_cancelLongPressGestureRecognizer;
- (void)_unregisterPreview;
- (void)_translate:(id)a0;
- (id)beginPrintModeForFrame:(id)a0 withSize:(struct CGSize { double x0; double x1; })a1 startOffset:(double)a2 minimumLayoutWidth:(double)a3 maximumLayoutWidth:(double)a4 tileClippedContent:(BOOL)a5;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0 withinRange:(id)a1;
- (id)positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2;
- (void)beginSelectionChange;
- (id)beginPrintModeWithSize:(struct CGSize { double x0; double x1; })a0 startOffset:(double)a1 minimumLayoutWidth:(double)a2 maximumLayoutWidth:(double)a3 tileClippedContent:(BOOL)a4;
- (float)maximumScale;
- (id)_beginPrintModeForPDFView:(id)a0 withSize:(struct CGSize { double x0; double x1; })a1 startOffset:(double)a2 minimumLayoutWidth:(double)a3 maximumLayoutWidth:(double)a4;
- (id)asText;
- (void)dragInteraction:(id)a0 session:(id)a1 didEndWithOperation:(unsigned long long)a2;
- (id)subviews;
- (void)willMoveToSuperview:(id)a0;
- (void)cut:(id)a0;
- (id)beginPrintModeWithWidth:(double)a0 height:(double)a1 startOffset:(double)a2 shrinkToFit:(BOOL)a3 tileClippedContent:(BOOL)a4 forFrame:(id)a5;
- (id)beginPrintModeForFrame:(id)a0 withWidth:(double)a1 height:(double)a2 startOffset:(double)a3 shrinkToFit:(BOOL)a4 tileClippedContent:(BOOL)a5;
- (id)selectionRects;
- (void)copy:(id)a0;
- (BOOL)canResignFirstResponder;
- (void)endPrintMode;
- (void)confirmMarkedText:(id)a0;
- (void)selectionChanged;
- (void)setRangedSelectionExtentPoint:(struct CGPoint { double x0; double x1; })a0 baseIsStart:(BOOL)a1 allowFlipping:(BOOL)a2;
- (void)setBaseWritingDirection:(long long)a0 forRange:(id)a1;
- (void)endFloatingCursor;
- (void)_showLinkSheet;
- (void)deleteFromInput;
- (void)_scribbleInteraction:(id)a0 focusElement:(id)a1 initialFocusSelectionReferencePoint:(struct CGPoint { double x0; double x1; })a2 completion:(id /* block */)a3;
- (void)clearRangedSelectionInitialExtent;
- (unsigned long long)dataDetectorTypes;
- (void)setSelectionWithFirstPoint:(struct CGPoint { double x0; double x1; })a0 secondPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)didZoom;
- (BOOL)cancelMouseTracking;
- (void)didMoveToSuperview;
- (void)cancelInteraction;
- (void)_scribbleInteraction:(id)a0 willBeginWritingInElement:(id)a1;
- (void)deleteBackward;
- (id)dropInteraction:(id)a0 previewForDroppingItem:(id)a1 withDefault:(id)a2;
- (void)_endPrintMode;
- (void)_drawPDFPagesForPage:(unsigned long long)a0 withPaginationInfo:(id)a1;
- (BOOL)isInPrintMode;
- (void)releasePrintMode;
- (void)replaceRange:(id)a0 withText:(id)a1;
- (long long)_dropInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (id)_doubleTapGestureRecognizer;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)interactionDelegate;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (float)minimumScale;
- (void)_didMoveFromWindow:(id)a0 toWindow:(id)a1;
- (id)rectsForNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)insertText:(id)a0;
- (void)setRangedSelectionBaseToCurrentSelection;
- (void)replaceCurrentWordWithText:(id)a0;
- (unsigned short)characterInRelationToCaretSelection:(int)a0;
- (unsigned short)characterAfterCaretSelection;
- (int)wordOffsetInRange:(id)a0;
- (void)setLoadsSynchronously:(BOOL)a0;
- (BOOL)selectionAtDocumentStart;
- (BOOL)selectionAtWordStart;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertCaretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initWithWebView:(id)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)beginPrintModeWithWidth:(double)a0 height:(double)a1 startOffset:(double)a2 shrinkToFit:(BOOL)a3 forFrame:(id)a4;
- (void)drawPage:(unsigned long long)a0 withPaginationInfo:(id)a1;
- (id)rangeByMovingCurrentSelection:(int)a0;
- (id)rangeByExtendingCurrentSelection:(int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_shortcutPresentationRect;
- (void)_insertAttributedTextWithoutClosingTyping:(id)a0;
- (void)extendCurrentSelection:(int)a0;
- (BOOL)becomesEditableWithGestures;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 animated:(BOOL)a1;
- (void)setBecomesEditableWithGestures:(BOOL)a0;
- (id)textFormElement;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })doubleTapRect;
- (Class)_printFormatterClass;
- (void)setInteractionDelegate:(id)a0;
- (void)resetSelectionAssistant;
- (void)dropInteraction:(id)a0 concludeDrop:(id)a1;
- (void)_updateFixedPositioningObjectsLayoutDuringScroll;
- (void)_updateFixedPositionContent;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_updateFixedPositioningObjectsLayoutAfterScroll;
- (void)sendScrollEventIfNecessary;
- (void)_updateFixedPositioningObjectsLayoutAfterVisibleGeometryChange;
- (void)assistFormNode:(id)a0;
- (id)_groupName;
- (id)methodSignatureForSelector:(SEL)a0;
- (void)_focusAndAssistFormNode:(id)a0;
- (id)superviewForSheet;
- (void)webView:(id)a0 didFinishLoadForFrame:(id)a1;
- (void)webView:(id)a0 didFailLoadWithError:(id)a1 forFrame:(id)a2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_flattenAndSwapContentLayersInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (double)zoomedDocumentScale;
- (void)setSelectedDOMRange:(id)a0 affinity:(unsigned long long)a1;
- (BOOL)_dataDetectionIsActivated;
- (void)updateSelection;
- (void)webView:(id)a0 didFirstVisuallyNonEmptyLayoutInFrame:(id)a1;
- (float)minimumScaleForMinimumSize:(struct CGSize { double x0; double x1; })a0;
- (void)redrawScaledDocument;
- (BOOL)considerHeightForDoubleTap;
- (id)textRangeFromPosition:(id)a0 toPosition:(id)a1;
- (void)_setSubviewCachesNeedUpdate:(BOOL)a0;
- (double)_zoomedDocumentScale;
- (void)unmarkText;
- (id)textInputTraits;
- (void)webViewDidCommitCompositingLayerChanges:(id)a0;
- (id)enclosingScrollView;
- (double)currentDocumentScale;
- (double)minimumScaleForSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (BOOL)_dragInteraction:(id)a0 sessionSupportsSystemDrag:(id)a1;
- (void)_resetFormDataForFrame:(id)a0;
- (void)setRangedSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)textInRange:(id)a0;
- (void)webViewDidPreventDefaultForEvent:(id)a0;
- (void)setRangedSelectionBaseToCurrentSelectionStart;
- (void)_clearAllConsoleMessages;
- (id)_collectAdditionalSubviews;
- (long long)comparePosition:(id)a0 toPosition:(id)a1;
- (BOOL)isEditable;
- (BOOL)playsNicelyWithGestures;
- (BOOL)_isInspectorSearchingForNode;
- (id)dropInteraction:(id)a0 sessionDidUpdate:(id)a1;
- (void)setContinuousSpellCheckingEnabled:(BOOL)a0;
- (void)setBottomBufferHeight:(double)a0;
- (void)dropInteraction:(id)a0 sessionDidEnter:(id)a1;
- (void)didEndZoom;
- (BOOL)isClassicViewportMode;
- (void)_resetShowingTextStyle:(id)a0;
- (void)setDelegate:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRect;
- (void)_cleanupSheet;
- (BOOL)dragInteractionEnabled;
- (id)positionFromPosition:(id)a0 offset:(long long)a1;
- (BOOL)_presentViewController:(id)a0 animated:(BOOL)a1 completion:(id /* block */)a2;
- (void)setSelectionWithPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)hasRangedSelection;
- (void)setInitialScale:(float)a0 forDocumentTypes:(int)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })webViewFrameForUIFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setMinimumScale:(float)a0 forDocumentTypes:(int)a1;
- (void)setMaximumScale:(float)a0 forDocumentTypes:(int)a1;
- (void)setAllowsUserScaling:(BOOL)a0 forDocumentTypes:(int)a1;
- (void)setAllowsShrinkToFit:(BOOL)a0 forDocumentTypes:(int)a1;
- (void)setAvoidsUnsafeArea:(BOOL)a0 forDocumentTypes:(int)a1;
- (void)setViewportSize:(struct CGSize { double x0; double x1; })a0 forDocumentTypes:(int)a1;
- (void)_restoreViewportSettingsWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)selectionChanged:(id)a0;
- (void)dropInteraction:(id)a0 sessionDidExit:(id)a1;
- (void)sendOrientationEventForOrientation:(long long)a0;
- (void)_inspectorDidStartSearchingForNode:(id)a0;
- (void)_inspectorDidStopSearchingForNode:(id)a0;
- (void)stopLoading:(id)a0;
- (void)cancelInteractionWithImmediateDisplay:(BOOL)a0;
- (void)_clearPreviewRevealInformation;
- (void)setBaseWritingDirection:(long long)a0;
- (void)_removeDefinitionController:(BOOL)a0;
- (void)_removeShareController:(BOOL)a0;
- (void)completeInteraction;
- (void)_updateScrollViewBoundaryZoomScales;
- (void)_runLoadBlock:(id /* block */)a0;
- (void)_cleanUpFrameStateAndLoad:(id /* block */)a0;
- (void)_scribbleInteraction:(id)a0 requestElementsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 completion:(id /* block */)a2;
- (void)loadData:(id)a0 MIMEType:(id)a1 textEncodingName:(id)a2 baseURL:(id)a3;
- (void)forceLayout;
- (void)_updateWebKitExposedScrollViewRect;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })caretInsets;
- (void)_notifyContentHostingLayersOfScaleChange;
- (void)_notifyPlugInViewsOfScaleChange;
- (void)setText:(id)a0;
- (void)_setDocumentScale:(float)a0;
- (void)handleKeyWebEvent:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })initialPresentationRectInHostViewForSheet:(id)a0;
- (void)_updateFixedPositionedObjectsLayoutRectUsingWebThread:(BOOL)a0 synchronize:(BOOL)a1;
- (void)_setTextColor:(id)a0;
- (void)_applyViewportArguments:(id)a0;
- (void)_setDocumentType:(int)a0 overrideCustomConfigurations:(BOOL)a1 viewportArguments:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })presentationRectInHostViewForSheet:(id)a0;
- (void)dropInteraction:(id)a0 performDrop:(id)a1;
- (void)_setDocumentType:(int)a0;
- (void)setSelectedTextRange:(id)a0 withAffinityDownstream:(BOOL)a1;
- (void)sendScrollEventIfNecessaryWasUserScroll:(BOOL)a0;
- (void)setMinimumSize:(struct CGSize { double x0; double x1; })a0;
- (void)setTilingArea:(int)a0;
- (void)resetTilingAfterLoadComplete;
- (void)_selectionLayoutChangedByScrolling:(BOOL)a0;
- (void)_editableSelectionLayoutChangedByScrolling:(BOOL)a0;
- (void)_clearDoubleTapRect;
- (BOOL)isPosition:(id)a0 atBoundary:(long long)a1 inDirection:(long long)a2;
- (void)_WAKViewSizeDidChange:(id)a0;
- (void)setMinimumSize:(struct CGSize { double x0; double x1; })a0 updateCurrentViewportConfigurationSize:(BOOL)a1;
- (void)_restoreScrollPointForce:(BOOL)a0;
- (void)_showPendingContentLayers;
- (void)_saveStateToHistoryItem:(id)a0;
- (id)_targetURL;
- (BOOL)_shouldResetForNewPage;
- (void)_resetForNewPage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_documentViewVisibleRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_layoutRectForFixedPositionObjects;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedLayoutRectForFixedPositionObjects;
- (BOOL)isInsideRichlyEditableTextWidget;
- (BOOL)hasRichlyEditableSelection;
- (BOOL)fragmentContainsRichContent:(id)a0;
- (void)_updateSubviewCaches;
- (void)addInputString:(id)a0 withFlags:(unsigned long long)a1;
- (BOOL)_insertFragmentWithoutPreservingStyle:(id)a0 atDestination:(id)a1 smartReplace:(BOOL)a2 collapseToEnd:(BOOL)a3;
- (id)_supportedPasteboardTypesForCurrentSelection;
- (void)_reshapePlugInViews;
- (BOOL)_shouldUpdateSubviewCachesForPlugins;
- (void)webViewDidDrawTiles:(id)a0;
- (void)_restoreFlattenedContentLayers;
- (void)updateInteractionElements;
- (void)_removeShortcutController:(BOOL)a0;
- (long long)baseWritingDirectionForPosition:(id)a0 inDirection:(long long)a1;
- (void)setInteractionAssistantGestureRecognizers;
- (void)_undoManagerDidUndo:(id)a0;
- (void)_undoManagerDidRedo:(id)a0;
- (BOOL)isCaretInEmptyParagraph;
- (BOOL)isEditingSingleLineElement;
- (id)dictationResultMetadataForRange:(id)a0;
- (id)_insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0;
- (void)_removeTextPlaceholder:(id)a0 willInsertResult:(BOOL)a1;
- (void)dropInteraction:(id)a0 item:(id)a1 willAnimateDropWithAnimator:(id)a2;
- (float)initialScale;
- (struct CGSize { double x0; double x1; })_sizeForDictationResultPlaceholder;
- (BOOL)_textPlaceholderHasBeenRemoved;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectFromSelectedFrameCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setRangedSelectionInitialExtentToCurrentSelectionStart;
- (void)_finishedUsingTextPlaceholder;
- (void)clearMarkedText;
- (void)setCaretChangeListener:(id)a0;
- (long long)_dragInteraction:(id)a0 dataOwnerForAddingToSession:(id)a1 withTouchAtPoint:(struct CGPoint { double x0; double x1; })a2;
- (void)deferredBecomeFirstResponder;
- (void)setPaused:(BOOL)a0 withEvents:(BOOL)a1;
- (BOOL)isShowingFullScreenPlugInUI;
- (void)_shareText:(id)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void *)_createIOSurfaceFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)undoManager;
- (struct CGImage { } *)newSnapshotWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)selectionBaseWritingDirection;
- (void)_notifyPlugInViewsOfWillBeginZooming;
- (void)_notifyPlugInViewsOfDidZoom;
- (BOOL)hasBodyElement;
- (void)_notifyPlugInViewsOfDidEndZooming;
- (BOOL)_shouldFlattenContentLayersForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (unsigned int)_contentSizeInExposedRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 topLayer:(id)a1 visibleLayerCount:(int *)a2;
- (id)webVisiblePositionForPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)hasDrawnTiles;
- (double)maximumDoubleTapScale;
- (void)setUserStyleSheet:(id)a0;
- (void)setPaused:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectOfInterestForPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_didChangeDragCaretRectFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (struct { double x0; double x1; double x2; })doubleTapScalesForSize:(struct CGSize { double x0; double x1; })a0;
- (void)setAutoresizes:(BOOL)a0;
- (void)willZoomToMinimumScale;
- (void)willZoomToLocation:(struct CGPoint { double x0; double x1; })a0 atScale:(double)a1 forDuration:(double)a2;
- (void)setSmoothsFonts:(BOOL)a0;
- (BOOL)shouldSelectionAssistantReceiveDoubleTapAtPoint:(struct CGPoint { double x0; double x1; })a0 forScale:(double)a1;
- (BOOL)detectsPhoneNumbers;
- (BOOL)loadsSynchronously;
- (void)setDetectsPhoneNumbers:(BOOL)a0;
- (void)webView:(id)a0 didCommitLoadForFrame:(id)a1;
- (void)willStartZoom;
- (void)webView:(id)a0 didChangeLocationWithinPageForFrame:(id)a1;
- (BOOL)didFirstVisuallyNonEmptyLayout;
- (void)willStartScroll;
- (void)setDragInteractionEnabled:(BOOL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_scribbleInteraction:(id)a0 frameForElement:(id)a1;
- (void)_dismissViewControllerAnimated:(BOOL)a0 completion:(id /* block */)a1;
- (void)viewportHandlerDidChangeScales:(id)a0;
- (void)viewportHandler:(id)a0 didChangeViewportSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 fromFrame:(id)a1;
- (void)viewportHandler:(id)a0 didChangeAvoidsUnsafeArea:(BOOL)a1;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toFrame:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toFrame:(id)a1;
- (void)didEndScroll;
- (void)setUpdatesScrollView:(BOOL)a0;
- (BOOL)_isDisplayingLookupViewController;
- (void)webView:(id)a0 didReceiveViewportArguments:(id)a1;
- (void)webView:(id)a0 needsScrollNotifications:(id)a1 forFrame:(id)a2;
- (BOOL)needsScrollNotifications;
- (void)webThreadWebViewDidLayout:(id)a0 byScrolling:(BOOL)a1;
- (void)webViewDidStartOverflowScroll:(id)a0;
- (void)webViewDidEndOverflowScroll:(id)a0;
- (BOOL)updatesScrollView;
- (void)webView:(id)a0 runOpenPanelForFileButtonWithResultListener:(id)a1 configuration:(id)a2;
- (id)_documentUrl;
- (void)webViewDidRestoreFromPageCache:(id)a0;
- (void)webViewDidReceiveMobileDocType:(id)a0;
- (void)setIgnoresViewportOverflowWhenAutoresizing:(BOOL)a0;
- (void)saveStateToCurrentHistoryItem;
- (void)webView:(id)a0 saveStateToHistoryItem:(id)a1 forFrame:(id)a2;
- (BOOL)webView:(id)a0 shouldScrollToPoint:(struct CGPoint { double x0; double x1; })a1 forFrame:(id)a2;
- (void)webView:(id)a0 restoreStateFromHistoryItem:(id)a1 forFrame:(id)a2 force:(BOOL)a3;
- (void)setIgnoresKeyEvents:(BOOL)a0;
- (BOOL)handleKeyAppCommandForCurrentEvent;
- (BOOL)_isSubviewOfPlugInView:(id)a0;
- (void)writeDataToPasteboard:(id)a0;
- (long long)getPasteboardItemsCount;
- (BOOL)performTwoStepDrop:(id)a0 atDestination:(id)a1 isMove:(BOOL)a2;
- (BOOL)performsTwoStepPaste:(id)a0;
- (id)readDataFromPasteboard:(id)a0 withIndex:(long long)a1;
- (long long)getPasteboardChangeCount;
- (void)showPlaybackTargetPicker:(BOOL)a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)shouldSuppressPasswordEcho;
- (BOOL)hasPlugInSubviews;
- (void)revealedSelectionByScrollingWebFrame:(id)a0;
- (void)_webthread_webView:(id)a0 attachRootLayer:(id)a1;
- (void)_renderUnbufferedInContext:(struct CGContext { } *)a0;
- (id)checkSpellingOfString:(id)a0;
- (void)willRotateInteractionSheet;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_presentationRectForSheetGivenPoint:(struct CGPoint { double x0; double x1; })a0 inHostView:(id)a1;
- (void)didRotateInteractionSheet;
- (void)_handleDoubleTapAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_handleSingleTapZoomPreClickAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)doubleTapRectIsReplaced;
- (void)_handleSingleTapZoomPostClickAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_handleTwoFingerDoubleTapAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)setIsStandaloneEditableView:(BOOL)a0;
- (BOOL)isStandaloneEditableView;
- (id)standaloneEditingElement;
- (void)_previewItemController:(id)a0 didDismissPreview:(id)a1 committing:(BOOL)a2;
- (void)setStandaloneEditingElement:(id)a0;
- (void)setIsWidgetEditingView:(BOOL)a0;
- (BOOL)isWidgetEditingView;
- (BOOL)updateKeyboardStateOnResponderChanges;
- (id)dictationInterpretations;
- (id)delegate;
- (void)replaceSelectionWithWebArchive:(id)a0 selectReplacement:(BOOL)a1 smartReplace:(BOOL)a2;
- (id)implementationWebView;
- (id)webView:(id)a0 plugInViewWithArguments:(id)a1 fromPlugInPackage:(id)a2;
- (void)webView:(id)a0 willShowFullScreenForPlugInView:(id)a1;
- (void)didRemovePlugInView:(id)a0;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (void)webView:(id)a0 didHideFullScreenForPlugInView:(id)a1;
- (void)webView:(id)a0 willAddPlugInView:(id)a1;
- (int)documentType;
- (void)_shareElement:(id)a0 withURL:(id)a1;
- (BOOL)_isDisplayingTranslateViewController;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleContentFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })autoscrollDragFrame;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })autoscrollContentFrame;
- (void)useSelectionAssistantWithMode:(int)a0;
- (void)willStartScrollToTop;
- (void)scrollViewWasRemoved;
- (void)setTileUpdatesDisabled:(BOOL)a0;
- (id)rangeOfEnclosingWord:(id)a0;
- (id)dragInteraction:(id)a0 previewForCancellingItem:(id)a1 withDefault:(id)a2;
- (BOOL)canBecomeFirstResponder;
- (void)_previewItemController:(id)a0 willPresentPreview:(id)a1 forPosition:(struct CGPoint { double x0; double x1; })a2 inSourceView:(id)a3;
- (BOOL)resignFirstResponder;
- (void)_setFont:(id)a0;
- (void)_scribbleInteraction:(id)a0 didFinishWritingInElement:(id)a1;
- (id)rangeEnclosingPosition:(id)a0 withGranularity:(long long)a1 inDirection:(long long)a2;
- (void)dragInteraction:(id)a0 sessionWillBegin:(id)a1;
- (void)deleteFromInputWithFlags:(unsigned long long)a0;
- (void)forwardInvocation:(id)a0;
- (id)text;
- (id)_parentTextView;
- (BOOL)handleKeyTextCommandForCurrentEvent;
- (BOOL)gestureRecognizer:(id)a0 canPreventGestureRecognizer:(id)a1;
- (void)_didScroll;
- (void)attemptClick:(id)a0;
- (BOOL)_previewAllowedForPosition:(struct CGPoint { double x0; double x1; })a0;
- (id)newMouseEvent:(int)a0;
- (void)hideTapHighlight;
- (void)resetInteraction;
- (id)_presentationSnapshotForPreview;
- (id)_presentationRectsForPreview;
- (id)wordAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_collectPreviewRevealInformationIfNeeded;
- (void)clearInteractionTimer;
- (void)deferInteraction;
- (void)highlightApproximateNodeInverted:(BOOL)a0;
- (void)_resetInteractionWithLocation:(struct CGPoint { double x0; double x1; })a0 modifierFlags:(long long)a1;
- (void)_showDataDetectorsSheet;
- (void)_twoFingerPanRecognized:(id)a0;
- (SEL)_actionForLongPressOnElement:(id)a0;
- (BOOL)supportsTwoFingerScrollingAtTouchLocation:(struct CGPoint { double x0; double x1; })a0 andLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)sendScrollWheelEvents;
- (void)_syntheticMouseEventNotHandledAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)performClick:(id)a0;
- (id)deepestNodeAtViewportLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_sendMouseMoveAndAttemptClick:(id)a0;
- (void)performInteractionSelector:(SEL)a0 afterDelay:(double)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })computeRectForElement:(id)a0 withHighligh:(id)a1 isInverted:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRectWithDocumentScale:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)targetedDragPreviewFromCurrentTextIndicatorData;
- (void)resetCurrentDragInformation;
- (void)webView:(id)a0 didObserveDeferredContentChange:(int)a1 forFrame:(id)a2;
- (void)highlightApproximateNodeAndDisplayInfoSheet;
- (void)_didDismissElementSheet;
- (void)setAllowsImageSheet:(BOOL)a0;
- (void)setAllowsLinkSheet:(BOOL)a0;
- (void)action:(id)a0 didDismissAlertController:(id)a1;
- (void)setIgnoresFocusingMouse:(BOOL)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldReceiveTouch:(id)a1;
- (void)_appendOpenActionsForURL:(id)a0 actions:(id)a1;
- (void)_createSheetWithElementActions:(id)a0 showLinkTitle:(BOOL)a1;
- (void)actionDidFinish;
- (void)computeClientAndGlobalPointsForSession:(id)a0 outClientPoint:(struct CGPoint { double x0; double x1; } *)a1 outGlobalPoint:(struct CGPoint { double x0; double x1; } *)a2;
- (void)willMoveToWindow:(id)a0;
- (void)updateDragCaretIfPossible;
- (void)_transitionDragPreviewToImageIfNecessary:(id)a0;
- (id)textInDOMRange:(id)a0;
- (id)editDragPreviewForTextIndicator:(id)a0;
- (id)fallbackDropPreviewForUninsertedContent:(id)a0;
- (id)positionFromPosition:(id)a0 toBoundary:(long long)a1 inDirection:(long long)a2;
- (id)initSimpleHTMLDocumentWithStyle:(id)a0 frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 preferences:(id)a2 groupName:(id)a3;
- (void)_setParentTextView:(id)a0;
- (struct CGPoint { double x0; double x1; })convertPointToSelectedFrameCoordinates:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)mouseEventsChangeSelection;
- (BOOL)inPopover;
- (void)ensureSelection;
- (BOOL)makeWKFirstResponder;
- (BOOL)clearWKFirstResponder;
- (void)setSelectionToEnd;
- (void)_selectPositionAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForVisiblePosition:(id)a0;
- (BOOL)shouldRevealCurrentSelectionAfterInsertion;
- (id)undoManagerForWebView:(id)a0;
- (void)_updateSize;
- (id)selectionRectsForDOMRange:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })a0;
- (unsigned long long)offsetInMarkedTextForSelection:(id)a0;
- (struct CGPoint { double x0; double x1; })constrainedPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_lastRectForRange:(id)a0;
- (void)setCaretInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)selectAll:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })documentBounds;
- (id)_focusedOrMainFrame;
- (void)toggleBaseWritingDirection;
- (void)smartExtendRangedSelection:(int)a0;
- (void)setOpaque:(BOOL)a0;
- (id)positionAtStartOrEndOfWord:(id)a0;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)setAllowsDataDetectorsSheet:(BOOL)a0;
- (void)_singleTapRecognized:(id)a0;
- (unsigned long long)effectiveDataDetectorTypes;
- (void)tapInteractionWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)startActionSheet;
- (id)formElement;
- (void)startInteractionWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)continueInteractionWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)validateInteractionWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)isInInteraction;
- (BOOL)willInteractWithLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)collapseSelection;
- (void)dragInteraction:(id)a0 willAnimateLiftWithAnimator:(id)a1 session:(id)a2;
- (BOOL)isEditing;
- (void)selectWord;
- (void)setRangedSelectionBaseToCurrentSelectionEnd;
- (void)installGestureRecognizers;
- (void)makeTextWritingDirectionNatural:(id)a0;
- (BOOL)_isDisplayingShortcutViewController;
- (BOOL)becomeFirstResponder;
- (void)setSelectionToStart;
- (void)dealloc;
- (struct CGPoint { double x0; double x1; })interactionLocation;
- (id)interactionElement;
- (void)_highlightLongPressRecognized:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleBounds;
- (void)setRangedSelectionInitialExtentToCurrentSelectionEnd;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleContentRect;
- (BOOL)hasEditableSelection;
- (void)toggleUnderline:(id)a0;
- (void)addInputString:(id)a0;
- (id)_presentationSnapshotForPreviewItemController:(id)a0;
- (id)dragInteraction:(id)a0 itemsForBeginningSession:(id)a1;
- (void)disableClearsOnInsertion;
- (void)loadRequest:(id)a0;
- (id)approximateNodeAtViewportLocation:(struct CGPoint { double x0; double x1; } *)a0;
- (BOOL)_shouldPaste;
- (BOOL)hasContent;
- (int)deviceOrientation;
- (BOOL)_isDisplayingShareViewController;
- (float)_documentScale;
- (id)hostViewForSheet:(id)a0;
- (long long)_dragInteraction:(id)a0 dataOwnerForSession:(id)a1;
- (void)loadHTMLString:(id)a0 baseURL:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromFrame:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentFrameForView:(id)a0;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0 velocity:(struct CGPoint { double x0; double x1; })a1;
- (BOOL)_restoreFirstResponder;
- (id)contentView;

@end

@class NSString, NSMutableDictionary, NSMutableArray;

@interface UIKBTree : NSObject <NSCopying>

@property (retain, nonatomic) NSString *effectiveLayoutTag;
@property (nonatomic) int type;
@property (retain, nonatomic) NSString *name;
@property (retain, nonatomic) NSMutableDictionary *properties;
@property (retain, nonatomic) NSMutableArray *subtrees;
@property (retain, nonatomic) NSMutableDictionary *cache;
@property (retain, nonatomic) NSString *layoutTag;
@property (nonatomic) BOOL isFloating;

+ (id)uniqueName;
+ (BOOL)shouldSkipCacheString:(id)a0;
+ (id)key;
+ (id)mergeStringForKeyName:(id)a0;
+ (id)treeOfType:(int)a0;
+ (id)stringForType:(int)a0;
+ (id)keyboard;
+ (BOOL)typeIsPersistent:(int)a0;
+ (id)shapesForControlKeyShapes:(id)a0 options:(int)a1;

- (id)shape;
- (void)setShape:(id)a0;
- (id)gestureKeyplaneName;
- (void)setSecondaryDisplayStrings:(id)a0;
- (void)setFlickDirection:(long long)a0;
- (BOOL)isLeafType;
- (void)setDisabled:(BOOL)a0;
- (id)geometriesList;
- (BOOL)shouldSkipCandidateSelection;
- (BOOL)isRightToLeftSensitive;
- (BOOL)ghost;
- (BOOL)looksLike:(id)a0;
- (BOOL)disabled;
- (void)zipOnlyGeometrySet;
- (id)keysByKeyName:(id)a0;
- (unsigned long long)numberOfRows;
- (id)secondaryRepresentedStrings;
- (int)dragThreshold;
- (void)replaceKey:(id)a0 withKey:(id)a1;
- (void)setDisplayType:(int)a0;
- (id)keyForString:(id)a0;
- (id)variantPopupBias;
- (double)resizingOffset;
- (BOOL)supportsContinuousPath;
- (BOOL)isDuplicateOfTree:(id)a0;
- (BOOL)notUseCandidateSelection;
- (void)mergeReturnKey:(id)a0 withReturnKey:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)listShapes;
- (struct { unsigned char x0 : 6; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 8; unsigned char x4 : 8; unsigned char x5 : 8; })visualStyling;
- (BOOL)_renderAsStringKey;
- (void)updateFlickKeycapOnKeys;
- (void)setDisplayString:(id)a0;
- (id)recursiveDescription;
- (void)setState:(int)a0;
- (id)selectedVariantIndices;
- (struct CGPoint { double x0; double x1; })navigationPointOfKey;
- (id)firstCachedKeyWithName:(id)a0;
- (void)removeKey:(id)a0;
- (id)geometriesOrderedByPosition;
- (id)subtreeWithType:(int)a0;
- (id)_horizontallyCoincidentKeysWithKey:(id)a0;
- (void)setVisible:(BOOL)a0;
- (void)setGestureKey:(id)a0;
- (id)shiftAlternateKeyplaneName;
- (void)setVisualStyle:(int)a0;
- (BOOL)addMessagesWriteboardKeyOrRomanSwitchIfDismissKey:(BOOL)a0;
- (void)addkeyToCachedKeyList:(id)a0;
- (id)geometry;
- (void)setRendering:(int)a0;
- (id)activeShapesFromOutputShapes:(id)a0 inputShapes:(id)a1;
- (id)gestureKey;
- (id)shapesForKeys:(id)a0;
- (void)setTextAlignment:(long long)a0;
- (BOOL)avoidAutoDeactivation;
- (BOOL)containsKeyThatIgnoresHandBias;
- (int)_variantType;
- (int)displayTypeHint;
- (id)displayString;
- (void)clearManualAddedKey;
- (int)splitMode;
- (void)setMergeAsMoreKey:(BOOL)a0;
- (void)_addKeylayoutKeys:(id)a0;
- (void)updateDictationKeyOnNumberPads:(BOOL)a0;
- (id)shapeFromFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 leftPadding:(double)a1 rightPadding:(double)a2;
- (int)visualStyle;
- (void)setActiveGeometriesList:(id)a0;
- (BOOL)isAlphabeticPlane;
- (BOOL)isGenerated;
- (id)subtreeWithName:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_keyplaneFrame;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setIsGenerated:(BOOL)a0;
- (id)nameFromAttributes;
- (void)setVariantType:(int)a0;
- (void)setVisualStyling:(struct { unsigned char x0 : 6; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 8; unsigned char x4 : 8; unsigned char x5 : 8; })a0;
- (BOOL)usesAutoShift;
- (id)variantDisplayString;
- (id)keysForDisplayRowAtIndex:(unsigned long long)a0;
- (long long)selectedVariantIndex;
- (id)rightSpaceKey;
- (id)keys;
- (id)keysetCanContainWriteboardKey;
- (id)alternateKeyplaneName;
- (BOOL)hasLayoutTag:(id)a0;
- (void)setPopupDirection:(long long)a0;
- (id)supplementaryKeyList;
- (void)elaborateLayoutWithSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1;
- (BOOL)isHashed;
- (BOOL)supportsType:(long long)a0;
- (id)objectForProperty:(id)a0;
- (id)overrideDisplayString;
- (double)primaryKeylayoutWidthRatio;
- (void)setDisplayTypeHint:(int)a0;
- (id)cachedKeysByKeyName:(id)a0;
- (long long)intForProperty:(id)a0;
- (id)keysOrderedByPositionWithoutZip;
- (id)autolocalizedKeyCacheIterator;
- (id)localizationKey;
- (BOOL)containsDividerVariant;
- (void)elaborateLayoutWithSize:(struct CGSize { double x0; double x1; })a0 scale:(double)a1 origin:(struct CGPoint { double x0; double x1; })a2;
- (BOOL)disablesEdgeSwipe;
- (void)cacheNativeIdiomIfNecessaryForScreenTraits:(id)a0;
- (id)geometries;
- (void)setRepresentedString:(id)a0;
- (int)state;
- (int)variantType;
- (id)description;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keyUnionFramePadded:(BOOL)a0;
- (void)setDisplayRowHint:(int)a0;
- (void)shiftRowAndResizeLeadingControlKey:(id)a0 toSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2;
- (BOOL)shouldSuppressDragRetest;
- (void)removeKeyFromAllCachedLists:(id)a0;
- (void)setParentKey:(id)a0;
- (BOOL)usesAdaptiveKeys;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForKeylayoutName:(id)a0;
- (id)keysExcludingEmptyKeys;
- (id)stringForProperty:(id)a0;
- (long long)flickDirection;
- (void)setAttributes:(id)a0;
- (BOOL)isSplit;
- (void)setClipCorners:(unsigned long long)a0;
- (id)keyplaneSwitchKeysWithoutCurrentKeyplane:(id)a0;
- (void)repositionKeys:(id)a0 withOffset:(struct CGPoint { double x0; double x1; })a1 scale:(double)a2;
- (void)setCachedGestureLayout:(id)a0;
- (void)precacheLayoutName:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })originalFrame;
- (void)insetKeys:(id)a0 withInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1 scale:(double)a2;
- (BOOL)dynamicDisplayTypeHint;
- (BOOL)diacriticForwardCompose;
- (void)setGroupNeighbor:(unsigned long long)a0;
- (BOOL)preventPaddle;
- (void)setSelectedVariantIndex:(long long)a0;
- (void)addRomanSwitchToCachedKeyListWithShape:(id)a0 rendering:(int)a1;
- (BOOL)behavesAsShiftKey;
- (void)centerHorizontallyWhilePreservingLayoutWithKeys:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 scale:(double)a2;
- (double)primaryKeylayoutOffset;
- (id)attributeSet:(BOOL)a0;
- (void)centerKeyplaneInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 scale:(double)a1;
- (id)subtreeWithName:(id)a0 rows:(id)a1;
- (id)keysOrderedByPositionRTL;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keyUnionPaddedFrame;
- (BOOL)subtreesAreOrdered;
- (BOOL)shouldSkipCandidateSelectionForVariants;
- (void)setVariantPopupBias:(id)a0;
- (void)centerKeys:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 scale:(double)a2;
- (unsigned long long)groupNeighbor;
- (void)addWriteboardKeyToCachedKeyListWithShape:(id)a0 rendering:(int)a1;
- (id)keySet;
- (void)setLayoutTag:(id)a0 passingKeyTest:(id /* block */)a1;
- (void)insertKey:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 andShiftKeys:(id)a2 scale:(double)a3;
- (void)setSecondaryRepresentedStrings:(id)a0;
- (void)setSplitMode:(int)a0;
- (void)orderVariantKeys:(BOOL)a0;
- (BOOL)isSameAsTree:(id)a0;
- (id)representedString;
- (id)subtreesWithProperty:(id)a0 value:(id)a1;
- (BOOL)noLanguageIndicator;
- (id)mergeKeyNames:(id)a0;
- (long long)nativeIdiom;
- (id)componentName;
- (BOOL)mergeAsMoreKey;
- (void)setInteractionType:(int)a0;
- (BOOL)visible;
- (BOOL)isShiftKeyplane;
- (BOOL)isKanaPlane;
- (int)displayRowHint;
- (id)_cacheRootNameForKey:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)updateVariantTypeForActions:(unsigned int)a0;
- (id)cacheDisplayString;
- (void)zipAttributes;
- (id)fullRepresentedString;
- (id)layoutName;
- (void)subsumeDisappearingKeyName:(id)a0 intoKeyName:(id)a1 factors:(id)a2;
- (BOOL)isLetters;
- (id)initWithType:(int)a0;
- (void)setPreventPaddle:(BOOL)a0;
- (BOOL)renderKeyInKeyplane:(id)a0;
- (id)keyplaneForKey:(id)a0;
- (id)geometrySet:(BOOL)a0;
- (BOOL)addMessagesWriteboardKeyOrRomanSwitch:(BOOL)a0;
- (void)setOverrideDisplayString:(id)a0;
- (id)numberForProperty:(id)a0;
- (void)clearTransientCaches;
- (int)interactionType;
- (long long)_keyCountOnNamedRow:(id)a0;
- (BOOL)addMessagesWriteboardKeyOrRomanSwitchIfNoDismissKey:(BOOL)a0;
- (void)scaleKeys:(id)a0 withFactor:(struct CGSize { double x0; double x1; })a1 scale:(double)a2;
- (BOOL)allowsDelayedTapForContinuousPathDisambiguation;
- (id)keysForMergeConditions;
- (id)cachedGestureLayout;
- (void)centerWhilePreservingLayoutWithKeys:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 scale:(double)a2;
- (void)resizeKeys:(id)a0 withOffset:(struct CGPoint { double x0; double x1; })a1 scale:(double)a2;
- (void)setResizingOffset:(double)a0;
- (BOOL)shouldCacheKey;
- (BOOL)looksExactlyLikeShiftAlternate;
- (id)parentKey;
- (void)removeKey:(id)a0 andShiftKeys:(id)a1 scale:(double)a2;
- (void)setForceMultitap:(BOOL)a0;
- (id)keysOrderedByPosition;
- (id)firstKeyplaneSwitchKey;
- (id)activeGeometriesList;
- (void)setPaddedFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)forceMultitap;
- (void)setLocalizationKey:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })paddedFrame;
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })keyUnionFrame;
- (void)cacheKey:(id)a0;
- (long long)highlightedVariantIndex;
- (BOOL)isExemptFromInputManagerLayout;
- (void)setGeometriesList:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_originalKeyplaneFrame;
- (id)keyAttributes;
- (struct { unsigned char x0 : 6; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 8; unsigned char x4 : 8; unsigned char x5 : 8; })stylingFromVisualStyle;
- (int)indexOfSubtree:(id)a0;
- (void)setSelectedVariantIndices:(id)a0;
- (void)setGhost:(BOOL)a0;
- (void)zipGeometries:(BOOL)a0 attributes:(BOOL)a1;
- (unsigned long long)clipCorners;
- (struct { unsigned char x0 : 6; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 8; unsigned char x4 : 8; unsigned char x5 : 8; })visualStylingForScreenTraits:(id)a0;
- (void)centerVerticallyWhilePreservingLayoutWithKeys:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 scale:(double)a2;
- (id)secondaryDisplayStrings;
- (id)keysWithString:(id)a0;
- (BOOL)isExemptFromInputManagerHitTesting;
- (BOOL)setObject:(id)a0 forProperty:(id)a1;
- (BOOL)usesKeyCharging;
- (id)cacheSecondaryDisplayString;
- (id)keyplaneSwitchKeys;
- (BOOL)isShiftKeyPlaneChooser;
- (void)zipGeometrySet;
- (id)findLeftMoreKey;
- (void)setGeometry:(id)a0;
- (BOOL)_needsScaling;
- (id)scriptSwitchKey;
- (BOOL)boolForProperty:(id)a0;
- (BOOL)modifiesKeyplane;
- (id)unhashedName;
- (void)updateMoreAndInternationalKeysWithOptions:(int)a0;
- (void)setHighlightedVariantsList:(id)a0;
- (BOOL)avoidsLanguageIndicator;
- (long long)popupDirection;
- (id)highlightedVariantsList;
- (int)displayType;
- (void)removeKeyFromCachedKeyList:(id)a0;
- (void)_mutateKeys:(id)a0 scale:(double)a1 withShapeOperation:(id /* block */)a2;
- (long long)textAlignment;
- (BOOL)allowRetestAfterCommittingDownActions;
- (BOOL)isEqualToTree:(id)a0;
- (BOOL)looksLikeShiftAlternate;
- (BOOL)allowsStartingContinuousPath;
- (id)initWithType:(int)a0 withName:(id)a1 withProperties:(id)a2 withSubtrees:(id)a3 withCache:(id)a4;
- (int)rendering;

@end

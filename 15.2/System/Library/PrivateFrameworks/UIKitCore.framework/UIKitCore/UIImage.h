@class NSString, NSArray, UITraitCollection, UIImageAsset, _UIImageContent, UIGraphicsImageRendererFormat, CIImage, UIImageConfiguration, UIImageSymbolConfiguration, NSMapTable;

@interface UIImage : NSObject <NSItemProviderReading, NSItemProviderWriting, UIItemProviderPresentationSizeProviding, UIItemProviderReading, UIItemProviderWriting, _UIMenuImageOrName, NSCopying, NSSecureCoding> {
    NSMapTable *_siblingImages;
    UIImageConfiguration *_configuration;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _contentInsets;
    struct CGSize { double width; double height; } _sizeInPixels;
    double _baselineOffsetFromBottom;
    double _capHeight;
    struct { unsigned char named : 1; unsigned char asksContentForImageOrientation : 1; unsigned char imageOrientation : 3; unsigned char cached : 1; unsigned char hasPattern : 1; unsigned char isCIImage : 1; unsigned char renderingMode : 2; unsigned char suppressesAccessibilityHairlineThickening : 1; unsigned char isSymbolConfiguration : 1; unsigned char hasBaseline : 1; unsigned char isBaselineExplicit : 1; unsigned char areContentInsetsExplicit : 1; unsigned char areAlignmentRectInsetsExplicit : 1; unsigned char flipsForRightToLeftLayoutDirection : 1; unsigned char hasCapHeight : 1; } _imageFlags;
    _UIImageContent *_content;
}

@property (class, readonly) UIImage *actionsImage;
@property (class, readonly) UIImage *addImage;
@property (class, readonly) UIImage *removeImage;
@property (class, readonly) UIImage *checkmarkImage;
@property (class, readonly) UIImage *strokedCheckmarkImage;
@property (class, readonly, copy, nonatomic) NSArray *readableTypeIdentifiersForItemProvider;
@property (class, readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (class, readonly, copy, nonatomic) NSArray *readableTypeIdentifiersForItemProvider;
@property (class, readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly, nonatomic) long long leftCapWidth;
@property (readonly, nonatomic) long long topCapHeight;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } preferredPresentationSizeForItemProvider;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (readonly, nonatomic, getter=isFromStatusBarImageProvider) BOOL fromStatusBarImageProvider;
@property (readonly, nonatomic) UIImage *_asMenuElementImage;
@property (readonly, nonatomic) NSString *_asMenuElementImageName;
@property (nonatomic, setter=_setSubimageInsets:) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _subimageInsets;
@property (retain, nonatomic, setter=_setImageAsset:) UIImageAsset *imageAsset;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _contentInsets;
@property (readonly, nonatomic) BOOL _hasContentInsets;
@property (readonly, nonatomic) double _capHeight;
@property (readonly, nonatomic, getter=_CGPDFPage) struct CGPDFPage { } *CGPDFPage;
@property (readonly, nonatomic, getter=_CGSVGDocument) struct CGSVGDocument { } *CGSVGDocument;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } size;
@property (readonly, nonatomic) struct CGImage { } *CGImage;
@property (readonly, nonatomic) CIImage *CIImage;
@property (readonly, nonatomic) long long imageOrientation;
@property (readonly, nonatomic) double scale;
@property (readonly, nonatomic, getter=isSymbolImage) BOOL symbolImage;
@property (readonly, nonatomic) NSArray *images;
@property (readonly, nonatomic) double duration;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } capInsets;
@property (readonly, nonatomic) long long resizingMode;
@property (readonly, nonatomic) struct UIEdgeInsets { double top; double left; double bottom; double right; } alignmentRectInsets;
@property (readonly, nonatomic) long long renderingMode;
@property (readonly, nonatomic) UIGraphicsImageRendererFormat *imageRendererFormat;
@property (readonly, copy, nonatomic) UITraitCollection *traitCollection;
@property (readonly, nonatomic) BOOL flipsForRightToLeftLayoutDirection;
@property (readonly, nonatomic) double baselineOffsetFromBottom;
@property (readonly, nonatomic) BOOL hasBaseline;
@property (readonly, copy, nonatomic) UIImageConfiguration *configuration;
@property (readonly, copy, nonatomic) UIImageSymbolConfiguration *symbolConfiguration;

+ (id)imageNamed:(id)a0;
+ (void)initialize;
+ (id)_animatedResizableImageNamed:(id)a0 inBundle:(id)a1 compatibleWithTraitCollection:(id)a2 capInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a3 resizingMode:(long long)a4 duration:(double)a5;
+ (id)_generateCompositedSymbolImageForAsset:(id)a0 usingLayers:(id)a1 configuration:(id)a2 alignUsingBaselines:(BOOL)a3;
+ (id)preferredSymbolImageNamed:(id)a0 size:(long long)a1 compatibleWithTextStyle:(id)a2 traitCollection:(id)a3 inBundle:(id)a4;
+ (id)symbolImageNamed:(id)a0 size:(long long)a1 weight:(long long)a2 compatibleWithFontSize:(double)a3 traitCollection:(id)a4 inBundle:(id)a5;
+ (id)objectWithItemProviderData:(id)a0 typeIdentifier:(id)a1 error:(id *)a2;
+ (id)_animatedImageNamed:(id)a0 inBundle:(id)a1 compatibleWithTraitCollection:(id)a2 duration:(double)a3;
+ (id)_tintedImageForSize:(struct CGSize { double x0; double x1; })a0 withTint:(id)a1 maskImage:(id)a2 effectsImage:(id)a3 style:(int)a4 edgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a5;
+ (id)_tintedImageForSize:(struct CGSize { double x0; double x1; })a0 withTint:(id)a1 effectsImage:(id)a2 maskImage:(id)a3 style:(int)a4;
+ (id)symbolImageNamed:(id)a0 size:(long long)a1 compatibleWithFont:(id)a2 traitCollection:(id)a3 inBundle:(id)a4;
+ (id)imageWithData:(id)a0;
+ (id)animatedResizableImageNamed:(id)a0 capInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1 resizingMode:(long long)a2 duration:(double)a3;
+ (id)imageWithContentsOfFile:(id)a0;
+ (id)_systemRemoveImageWithColor:(id)a0;
+ (id)_applicationIconImageForBundleIdentifier:(id)a0 format:(int)a1 scale:(double)a2;
+ (void)_flushSharedImageCache;
+ (id)_systemCameraImage;
+ (int)_iconVariantForUIApplicationIconFormat:(int)a0 idiom:(long long)a1 scale:(double *)a2;
+ (int)_iconVariantForUIApplicationIconFormat:(int)a0 scale:(double *)a1;
+ (id)_iconForResourceProxy:(id)a0 variant:(int)a1 variantsScale:(double)a2;
+ (id)_iconForResourceProxy:(id)a0 variant:(int)a1 options:(int)a2 variantsScale:(double)a3;
+ (id)_iconForResourceProxy:(id)a0 format:(int)a1 options:(unsigned long long)a2;
+ (id)_systemCloseImage;
+ (id)_systemAddImage;
+ (id)_applicationIconImageForBundleIdentifier:(id)a0 format:(int)a1;
+ (id)_iconForResourceProxy:(id)a0 format:(int)a1;
+ (id)removeImageWithConfiguration:(id)a0;
+ (id)_systemCloseImageWithConfiguration:(id)a0;
+ (id)imageNamed:(id)a0 inBundle:(id)a1;
+ (id)_systemCameraImageWithConfiguration:(id)a0;
+ (id)_systemRemoveImage;
+ (id)_systemAddImageWithConfiguration:(id)a0;
+ (id)_systemAddImageWithColor:(id)a0;
+ (id)_systemRemoveImageWithConfiguration:(id)a0;
+ (id)_systemActionsImage;
+ (id)_systemActionsImageWithConfiguration:(id)a0;
+ (id)actionsImageWithConfiguration:(id)a0;
+ (id)checkmarkImageWithConfiguration:(id)a0;
+ (id)_systemImageNamed:(id)a0 variant:(unsigned long long)a1;
+ (id)strokedCheckmarkImageWithConfiguration:(id)a0;
+ (id)_systemCloseImageCompatibleWithTraitCollection:(id)a0;
+ (id)_systemImageNamed:(id)a0 shape:(long long)a1;
+ (id)_systemImageNamed:(id)a0 variant:(unsigned long long)a1 withConfiguration:(id)a2;
+ (id)_systemImageNamed:(id)a0 shape:(long long)a1 fill:(long long)a2;
+ (id)_systemImageNamed:(id)a0 shape:(long long)a1 fill:(long long)a2 withConfiguration:(id)a3;
+ (id)_systemImageNamed:(id)a0 fallback:(id)a1 withConfiguration:(id)a2;
+ (id)imageWithData:(id)a0 scale:(double)a1;
+ (id)_tintedImageForSize:(struct CGSize { double x0; double x1; })a0 withTint:(id)a1 maskImage:(id)a2 effectsImage:(id)a3 style:(int)a4;
+ (id)imageWithCGImage:(struct CGImage { } *)a0 scale:(double)a1 orientation:(long long)a2;
+ (struct CGSize { double x0; double x1; })_legibilityImageSizeForSize:(struct CGSize { double x0; double x1; })a0 style:(long long)a1;
+ (void)_dropResourceReferencesForURL:(id)a0;
+ (id)_systemImageNamed:(id)a0;
+ (id)systemImageNamed:(id)a0;
+ (id)_noiseImage;
+ (id)kitImageNamed:(id)a0;
+ (id)systemImageNamed:(id)a0 withConfiguration:(id)a1;
+ (id)systemImageNamed:(id)a0 compatibleWithTraitCollection:(id)a1;
+ (void)_flushCache:(id)a0;
+ (id)imageAtPath:(id)a0;
+ (id)_kitImageNamed:(id)a0 withTrait:(id)a1;
+ (id)_systemImageNamed:(id)a0 fallback:(id)a1;
+ (id)animatedImageWithImages:(id)a0 duration:(double)a1;
+ (id)imageNamed:(id)a0 inBundle:(id)a1 withConfiguration:(id)a2;
+ (id)_systemImageNamed:(id)a0 withConfiguration:(id)a1;
+ (id)_systemImageNamed:(id)a0 withConfiguration:(id)a1 allowPrivate:(BOOL)a2;
+ (struct CGSize { double x0; double x1; })_applyOrientation:(long long)a0 toContentSizeInPixels:(struct CGSize { double x0; double x1; })a1;
+ (id)_cachedImageForKey:(id)a0 fromBlock:(id /* block */)a1;
+ (id)imageNamed:(id)a0 inBundle:(id)a1 compatibleWithTraitCollection:(id)a2;
+ (long long)_mirroredImageOrientationForOrientation:(long long)a0;
+ (BOOL)_isCGImageAlphaMask:(struct CGImage { } *)a0;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_edgeInsetsForStylePresetNames:(id)a0 scale:(double)a1 traitCollection:(id)a2;
+ (id)symbolImageNamed:(id)a0;
+ (id)__systemImageNamed:(id)a0;
+ (id)_backgroundGradientWithStartColor:(id)a0 andEndColor:(id)a1;
+ (id)imageWithCIImage:(id)a0;
+ (id)imageNamed:(id)a0 withConfiguration:(id)a1;
+ (id)_imageNamed:(id)a0 withTrait:(id)a1;
+ (id)__systemImageNamedSwift:(id)a0;
+ (id)__systemImageNamed:(id)a0 compatibleWithTraitCollection:(id)a1;
+ (id)__systemImageNamed:(id)a0 withConfiguration:(id)a1;
+ (id)_imageWithCGPDFPage:(struct CGPDFPage { } *)a0;
+ (id)imageWithCIImage:(id)a0 scale:(double)a1 orientation:(long long)a2;
+ (void)_loadImageFromURL:(id)a0 completionHandler:(id /* block */)a1;
+ (id)_imageWithCGPDFPage:(struct CGPDFPage { } *)a0 scale:(double)a1 orientation:(long long)a2;
+ (void)_clearAssetCaches;
+ (id)_imageWithCGSVGDocument:(struct CGSVGDocument { } *)a0;
+ (id)animatedImageNamed:(id)a0 duration:(double)a1;
+ (id)_imageWithCGSVGDocument:(struct CGSVGDocument { } *)a0 scale:(double)a1 orientation:(long long)a2;
+ (id)animatedResizableImageNamed:(id)a0 capInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1 duration:(double)a2;
+ (id)symbolImageNamed:(id)a0 size:(long long)a1 weight:(long long)a2 compatibleWithFontSize:(double)a3;
+ (id)preferredSymbolImageNamed:(id)a0;
+ (id)_defaultBackgroundGradient;
+ (id)preferredSymbolImageNamed:(id)a0 size:(long long)a1 compatibleWithTextStyle:(id)a2;
+ (id)symbolImageNamed:(id)a0 size:(long long)a1 compatibleWithFont:(id)a2;
+ (id)imageFromAlbumArtData:(id)a0 height:(int)a1 width:(int)a2 bytesPerRow:(int)a3 cache:(BOOL)a4;
+ (id)imageWithContentsOfCPBitmapFile:(id)a0 flags:(int)a1;
+ (id)_deviceSpecificImageNamed:(id)a0;
+ (id)_deviceSpecificImageNamed:(id)a0 inBundle:(id)a1;
+ (id)imageWithCGImage:(struct CGImage { } *)a0;
+ (unsigned long long)_scaleDefinedByPath:(id)a0;
+ (id)addImageWithConfiguration:(id)a0;
+ (long long)_idiomDefinedByPath:(id)a0;

- (void)_setConfiguration:(id)a0;
- (id)initWithIOSurface:(struct __IOSurface { } *)a0;
- (id)loadDataWithTypeIdentifier:(id)a0 forItemProviderCompletionHandler:(id /* block */)a1;
- (id)_doubleBezeledImageWithExteriorShadowRed:(double)a0 green:(double)a1 blue:(double)a2 alpha:(double)a3 interiorShadowRed:(double)a4 green:(double)a5 blue:(double)a6 alpha:(double)a7 fillRed:(double)a8 green:(double)a9 blue:(double)a10 alpha:(double)a11;
- (id)_bezeledImageWithShadowRed:(double)a0 green:(double)a1 blue:(double)a2 alpha:(double)a3 fillRed:(double)a4 green:(double)a5 blue:(double)a6 alpha:(double)a7 drawShadow:(BOOL)a8;
- (id)_applyBackdropViewStyle:(long long)a0 includeTints:(BOOL)a1 includeBlur:(BOOL)a2 graphicsQuality:(long long)a3 allowImageResizing:(BOOL)a4;
- (struct CGSize { double x0; double x1; })_sizeWithHairlineThickening:(BOOL)a0 renderingEffects:(unsigned long long)a1 forTraitCollection:(id)a2;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (id)_applyBackdropViewSettings:(id)a0 includeTints:(BOOL)a1 includeBlur:(BOOL)a2 allowImageResizing:(BOOL)a3;
- (void)_configureImage:(id)a0 assumePreconfigured:(BOOL)a1;
- (BOOL)_isTiledWhenStretchedToSize:(struct CGSize { double x0; double x1; })a0;
- (id)_initWithData:(id)a0 immediateLoadWithMaxSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2 renderingIntent:(unsigned long long)a3 cache:(BOOL)a4;
- (id)_applyBackdropViewStyle:(long long)a0 includeTints:(BOOL)a1 includeBlur:(BOOL)a2 graphicsQuality:(long long)a3;
- (BOOL)_isSubimage;
- (id)_initWithFilledSystemImageNamed:(id)a0 fillColor:(id)a1 symbolColor:(id)a2 withName:(id)a3;
- (long long)_imageOrientationConsideringRTLForUserInterfaceLayoutDirection:(long long)a0;
- (id)_initWithCompositedSymbolImageLayers:(id)a0 name:(id)a1 alignUsingBaselines:(BOOL)a2;
- (id)_imageTintedWithColor:(id)a0 flatten:(BOOL)a1 renderingMode:(long long)a2 withUpdatedCGImage:(BOOL)a3;
- (void)encodeWithCoder:(id)a0;
- (id)_imageThatSuppressesAccessibilityHairlineThickening;
- (double)_baselineOffsetFromBottom;
- (id)_imageScaledToProportion:(double)a0 interpolationQuality:(int)a1;
- (id)_serializedData;
- (id)initWithCGImage:(struct CGImage { } *)a0;
- (BOOL)_isNamed;
- (id)stretchableImageWithLeftCapWidth:(long long)a0 topCapHeight:(long long)a1;
- (id)initWithContentsOfFile:(id)a0;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fraction:(double)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentRectInPixels;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(int)a2 fraction:(double)a3;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fraction:(double)a1;
- (struct CGImage { } *)imageRef;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fraction:(double)a1 operation:(int)a2;
- (BOOL)_probeIsSeeThrough;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x0; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x1; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x2; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)draw3PartImageWithSliceRects:(struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (id)_applicationIconImageForFormat:(int)a0 precomposed:(BOOL)a1 scale:(double)a2;
- (id)_applicationIconImageForFormat:(int)a0 precomposed:(BOOL)a1 idiom:(long long)a2 scale:(double)a3;
- (id)_applicationIconImageForFormat:(int)a0 precomposed:(BOOL)a1;
- (id)initWithItemProviderData:(id)a0 typeIdentifier:(id)a1 error:(id *)a2;
- (id)_initWithData:(id)a0 immediateLoadWithMaxSize:(struct CGSize { double x0; double x1; })a1 scale:(double)a2 renderingIntent:(unsigned long long)a3;
- (id)_imageByApplyingVariant:(unsigned long long)a0 allowNone:(BOOL)a1;
- (id)_applyBackdropViewSettings:(id)a0;
- (id)_applyBackdropViewSettings:(id)a0 allowImageResizing:(BOOL)a1;
- (id)_applyBackdropViewSettings:(id)a0 includeTints:(BOOL)a1 includeBlur:(BOOL)a2;
- (id)_applyBackdropViewStyle:(long long)a0 includeTints:(BOOL)a1 includeBlur:(BOOL)a2;
- (void)compositeToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(int)a2 fraction:(double)a3;
- (id)initWithData:(id)a0;
- (id)imageFlippedForRightToLeftLayoutDirection;
- (unsigned long long)_numberOfHierarchyLayers;
- (id)resizableImageWithCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0 resizingMode:(long long)a1;
- (BOOL)_hasVisibleContentInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 atScale:(double)a1;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })contentInsets;
- (BOOL)_isCached;
- (BOOL)_suppressesAccessibilityHairlineThickening;
- (void)setFlipsForRightToLeftLayoutDirection:(BOOL)a0;
- (id)imageWithConfiguration:(id)a0;
- (id)_imageForLegibilitySettings:(id)a0 strength:(double)a1;
- (id)_imageForLegibilitySettings:(id)a0 strength:(double)a1 alphaOnly:(BOOL)a2;
- (void)_drawImageForLegibilitySettings:(id)a0 strength:(double)a1 size:(struct CGSize { double x0; double x1; })a2 alphaOnly:(BOOL)a3;
- (void)_drawImageForLegibilitySettings:(id)a0 strength:(double)a1 size:(struct CGSize { double x0; double x1; })a2;
- (id)_imageForLegibilityStyle:(long long)a0;
- (void)_drawImageForLegibilityStyle:(long long)a0 size:(struct CGSize { double x0; double x1; })a1;
- (id)_imageWithBrightnessModifiedForLegibilityStyle:(long long)a0;
- (id)imageWithTintColor:(id)a0;
- (id)_primitiveImageAsset;
- (struct __IOSurface { } *)ioSurface;
- (void)_setAlwaysStretches:(BOOL)a0;
- (BOOL)_isSymbolImage;
- (id)imageByPreparingThumbnailOfSize:(struct CGSize { double x0; double x1; })a0;
- (void)_setNamed:(BOOL)a0;
- (BOOL)hasMidline;
- (BOOL)hasPadding;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentStretchInPixels;
- (id)_initWithOtherImage:(id)a0;
- (id)_resizableImageWithCapMask:(int)a0;
- (void).cxx_destruct;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)isEqual:(id)a0;
- (id)init;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_isInvisibleAndGetIsTranslucent:(BOOL *)a0;
- (BOOL)_isResizable;
- (BOOL)_hasBaseline;
- (id)initWithCoder:(id)a0;
- (BOOL)_isRTLImage;
- (void)_setCached:(BOOL)a0;
- (id)imageWithHorizontallyFlippedOrientation;
- (id)imageWithTintColor:(id)a0 renderingMode:(long long)a1;
- (void)_setCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)initWithData:(id)a0 scale:(double)a1;
- (void)_preheatBitmapData;
- (BOOL)_isPDFVector;
- (BOOL)_isSVGVector;
- (id)patternColor;
- (id)_outlinePath;
- (BOOL)_isAlphaMask;
- (struct CGColor { } *)_tiledPatternColor;
- (void)_setCapHeight:(double)a0;
- (id)_identityDescription;
- (id)_initWithData:(id)a0 preserveScale:(BOOL)a1;
- (struct CGSize { double x0; double x1; })_sizeInPixels;
- (id)_imageWithContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)drawAtPoint:(struct CGPoint { double x0; double x1; })a0 blendMode:(int)a1 alpha:(double)a2;
- (id)_flatImageWithWhite:(double)a0 alpha:(double)a1;
- (id)resizableImageWithCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_encodePropertiesWithCoder:(id)a0;
- (BOOL)_canEncodeWithName:(id)a0 coder:(id)a1;
- (void)dealloc;
- (double)_scaleFromPDF;
- (id)_rasterizedImage;
- (id)imageWithAlignmentRectInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_encodeDataWithCoder:(id)a0 imageName:(id)a1;
- (void)_setIsFlippedInRightToLeft;
- (void)_flipImageOrientationHorizontally;
- (id)initWithCIImage:(id)a0;
- (id)_imageWithStylePresets:(id)a0 tintColor:(id)a1 traitCollection:(id)a2;
- (BOOL)_hasExplicitContentInsets;
- (void)_setRenderingMode:(long long)a0;
- (id)content;
- (void)_setContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_setColorForFlattening:(id)a0;
- (void)_setBaselineOffsetFromBottom:(double)a0;
- (id)_initWithCGPDFPage:(struct CGPDFPage { } *)a0;
- (id)initWithCIImage:(id)a0 scale:(double)a1 orientation:(long long)a2;
- (id)_defaultConfiguration;
- (id)initWithContentsOfFile:(id)a0 cache:(BOOL)a1;
- (id)_initWithCGSVGDocument:(struct CGSVGDocument { } *)a0;
- (id)_initWithData:(id)a0 preserveScale:(BOOL)a1 cache:(BOOL)a2;
- (BOOL)_hasExplicitBaseline;
- (id)_initWithData:(id)a0 preserveScale:(BOOL)a1 cache:(BOOL)a2 scale:(double)a3;
- (void)_removeBaseline;
- (id)_stretchableImageWithCapInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (BOOL)_hasExplicitAlignmentRectInsets;
- (id)_colorForFlattening;
- (void)_setSuppressesAccessibilityHairlineThickening:(BOOL)a0;
- (id)_initWithCGPDFPage:(struct CGPDFPage { } *)a0 scale:(double)a1 orientation:(long long)a2;
- (id)_initWithCGSVGDocument:(struct CGSVGDocument { } *)a0 scale:(double)a1 orientation:(long long)a2;
- (BOOL)hasContentInsets;
- (BOOL)_isMultiColorSymbolImage;
- (BOOL)_isHierarchicalColorSymbolImage;
- (void)_setAlignmentRectInsetsExplicitly:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (double)midlineOffsetFromCenter;
- (void)_setBaselineOffsetFromBottomExplicitly:(double)a0;
- (id)_imageWithContent:(id)a0;
- (void)_removeBaselineExplicitly;
- (void)_setContentInsetsExplicitly:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_setSymbolMetricsFromNamedVectorGlyph:(id)a0;
- (id)_metricsDescription;
- (id)_imageWithContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0 withUpdatedCGImage:(BOOL)a1;
- (BOOL)_isCGImageOnly;
- (id)_initWithIOSurface:(struct __IOSurface { } *)a0 scale:(double)a1 orientation:(long long)a2;
- (id)_initWithIOSurface:(struct __IOSurface { } *)a0 imageOrientation:(long long)a1;
- (struct CGSize { double x0; double x1; })_sizeInPixelsFromPDF;
- (id)_flatImageWithColor:(id)a0;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })_calculateStatisticsOfEdge:(BOOL)a0;
- (id)_imageWithSize:(struct CGSize { double x0; double x1; })a0 content:(id)a1;
- (void)_setMidlineOffsetFromCenter:(double)a0;
- (id)imageByPreparingForDisplay;
- (id)imageWithRenderingMode:(long long)a0;
- (void)prepareForDisplayWithCompletionHandler:(id /* block */)a0;
- (id)_imagePreparedForScreen:(id)a0;
- (id)imageWithoutBaseline;
- (BOOL)_isColoredSymbolImage;
- (id)_imageWithSize:(struct CGSize { double x0; double x1; })a0;
- (id)_swizzleContent:(id)a0;
- (struct CGSize { double x0; double x1; })_CGSVGDocumentSize;
- (long long)_imageOrientationConsideringRTL;
- (id)imageWithoutMidline;
- (id)_initWithFilledSystemImageNamed:(id)a0 fillColor:(id)a1;
- (id)initWithCGImage:(struct CGImage { } *)a0 scale:(double)a1 orientation:(long long)a2;
- (id)_initWithFilledSystemImageNamed:(id)a0 fillColor:(id)a1 symbolColor:(id)a2;
- (id)_initWithCompositedSymbolImageLayers:(id)a0 name:(id)a1;
- (long long)_effectiveRenderingModeWithSymbolConfiguration:(id)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_inverseAlignmentRectInsets;
- (double)__baselineOffsetFromBottom;
- (id)imageWithBaselineOffsetFromBottom:(double)a0;
- (id)imageWithContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (id)_imageWithSymbolMetricsFromNamedVectorGlyph:(id)a0;
- (id)imageWithMidlineOffsetFromCenter:(double)a0;
- (id)flattenedImageWithColor:(id)a0;
- (id)imageWithSymbolConfiguration:(id)a0;
- (id)imageByAddingContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (id)imageByApplyingSymbolConfiguration:(id)a0;
- (id)imageWithPadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (id)_flattenedImageWithTintColor:(id)a0;
- (id)imageByAddingPadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)drawAsPatternInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_imageWithImageAsset:(id)a0;
- (id)_imageWithImageAsset:(id)a0 configuration:(id)a1;
- (id)_initWithData:(id)a0 scale:(double)a1;
- (BOOL)_representsLayeredImage;
- (id)_initWithContentsOfLCRFile:(id)a0;
- (BOOL)_representsCIImageWhichSupportsIOSurfaceRendering;
- (id)initWithCGImage:(struct CGImage { } *)a0 imageOrientation:(long long)a1;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })_calculateStatistics;
- (BOOL)writeToCPBitmapFile:(id)a0 flags:(int)a1;
- (struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; })_calculateEdgeStatistics;
- (struct CGSize { double x0; double x1; })_CGPDFPageSize;
- (struct __IOSurface { } *)_copyIOSurface;
- (id)_resizableImageWithSubimageInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0 resizeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (id)_imagePaddedByInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (id)_imageByResizingToSize:(struct CGSize { double x0; double x1; })a0;
- (void)prepareThumbnailOfSize:(struct CGSize { double x0; double x1; })a0 completionHandler:(id /* block */)a1;
- (void)_prepareForScreen:(id)a0 completionHandler:(id /* block */)a1;
- (id)_imageWithBitmapRepresentation;
- (void)_imageByCreatingBitmapRepresentationWithCompletionHandler:(id /* block */)a0;
- (BOOL)_isDecompressing;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 operation:(int)a1;
- (void)_setAlignmentRectInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 blendMode:(int)a1 alpha:(double)a2;
- (id)initWithData:(id)a0 cache:(BOOL)a1;
- (id)_initWithContent:(id)a0 orientation:(long long)a1;
- (void)draw1PartImageInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 operation:(int)a1 fraction:(double)a2;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x0; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x1; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x2; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 fraction:(double)a2;
- (void)draw9PartImageWithSliceRects:(struct { struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x0; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x1; struct { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; } x2; })a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(int)a2 fraction:(double)a3;
- (void)compositeToPoint:(struct CGPoint { double x0; double x1; })a0 fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 operation:(int)a2 fraction:(double)a3;

@end

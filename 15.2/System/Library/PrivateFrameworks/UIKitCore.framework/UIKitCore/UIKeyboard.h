@class UITapGestureRecognizer, NSString, UITextInputTraits, NSMutableDictionary, UIView, _UIKeyboardPasscodeObscuringInteraction, UITextCursorAssertionController;

@interface UIKeyboard : UIView <UIKBFocusGuideDelegate, UIKeyboardImplGeometryDelegate> {
    UIView *m_snapshot;
    UITextInputTraits *m_defaultTraits;
    UITextInputTraits *m_overrideTraits;
    BOOL m_typingDisabled;
    BOOL m_minimized;
    BOOL m_respondingToImplGeometryChange;
    long long m_orientation;
    BOOL m_hasExplicitOrientation;
    BOOL m_disableTouchInput;
    BOOL m_useRecentsAlert;
    NSMutableDictionary *m_focusGuides;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } m_unfocusedFocusGuideOutsets;
    _UIKeyboardPasscodeObscuringInteraction *_passcodeObscuringInteraction;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _forcedFrame;
    UITapGestureRecognizer *_variantsMenuGesture;
}

@property (class, nonatomic) unsigned long long serviceRole;

@property (nonatomic) BOOL hasImpendingCursorLocation;
@property (nonatomic) unsigned long long impendingCursorLocation;
@property (nonatomic) unsigned long long requestedInteractionModel;
@property (nonatomic) BOOL caretBlinks;
@property (nonatomic) BOOL caretVisible;
@property (readonly, nonatomic) UITextCursorAssertionController *_activeAssertionController;
@property (nonatomic) long long keyboardIdiom;
@property (nonatomic) BOOL shouldUpdateLayoutAutomatically;
@property (nonatomic) BOOL typingEnabled;
@property (nonatomic, getter=isMinimized) BOOL minimized;
@property (nonatomic) BOOL showsCandidatesInline;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGSize { double x0; double x1; })defaultSizeForInterfaceOrientation:(long long)a0;
+ (BOOL)isOnScreen;
+ (BOOL)isInHardwareKeyboardMode;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)a0 ignoreInputView:(BOOL)a1;
+ (id)activeKeyboard;
+ (BOOL)isSpotlight;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })defaultFrameForInterfaceOrientation:(long long)a0;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })keyplanePadding;
+ (void)clearActiveForScreen:(id)a0;
+ (void)makeKeyboardActive:(id)a0 forScreen:(id)a1;
+ (void)_clearActiveKeyboard;
+ (struct CGSize { double x0; double x1; })keyboardSizeForInterfaceOrientation:(long long)a0;
+ (void)initImplementationNow;
+ (BOOL)respondsToProxGesture;
+ (BOOL)splitKeyboardEnabled;
+ (BOOL)shouldMinimizeForHardwareKeyboard;
+ (void)setSuppressionPolicyDelegate:(id)a0;
+ (BOOL)shouldSuppressSoftwareKeyboardForResponder:(id)a0;
+ (BOOL)hasInputOrAssistantViewsOnScreen;
+ (BOOL)platformSupportsKeyboardServiceRole:(unsigned long long)a0;
+ (id)activeKeyboardForScreen:(id)a0;
+ (id)homeGestureExclusionZones;
+ (BOOL)candidateDisplayIsExtended;
+ (double)predictionViewHeightForCurrentInputMode;
+ (struct CGSize { double x0; double x1; })defaultSize;
+ (id)snapshotViewForPredictionViewTransition;
+ (BOOL)predictionViewPrewarmsPredictiveCandidates;
+ (void)setPredictionViewPrewarmsPredictiveCandidates:(BOOL)a0;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_keyboardFocusGuideMargins;
+ (void)removeAllDynamicDictionaries;
+ (struct CGSize { double x0; double x1; })sizeForInterfaceOrientation:(long long)a0;
+ (id)suppressionPolicyDelegate;

- (void)removeAutocorrectPrompt;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (void)_setRenderConfig:(id)a0;
- (void)layoutSubviews;
- (void)geometryChangeDone:(BOOL)a0;
- (void)setCorrectionLearningAllowed:(BOOL)a0;
- (void)updateLayout;
- (void)maximize;
- (void)_setAutocorrects:(BOOL)a0;
- (void)_showAutofillExtras;
- (void)prepareForGeometryChange;
- (void)displayLayer:(id)a0;
- (void)minimize;
- (long long)_positionInCandidateList:(id)a0;
- (BOOL)shouldUpdateFocusInContext:(id)a0;
- (BOOL)_isAutomaticKeyboard;
- (void)pressesCancelled:(id)a0 withEvent:(id)a1;
- (unsigned long long)cursorLocation;
- (void)syncMinimizedStateToHardwareKeyboardAttachedState;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)setReturnKeyEnabled:(BOOL)a0;
- (BOOL)canDismiss;
- (void)touchesEnded:(id)a0 withEvent:(id)a1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)canBecomeFocused;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_disableTouchInput;
- (void)prepareForImplBoundsHeightChange:(double)a0 suppressNotification:(BOOL)a1;
- (void)touchesMoved:(id)a0 withEvent:(id)a1;
- (void)setDefaultTextInputTraits:(id)a0;
- (void)takeSnapshot;
- (void)_setInputMode:(id)a0;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (BOOL)isActive;
- (BOOL)_mayRemainFocused;
- (BOOL)_touchesInsideShouldHideCalloutBar;
- (void)pressesChanged:(id)a0 withEvent:(id)a1;
- (BOOL)_hasCandidates;
- (id)_getAutocorrection;
- (void)_didChangeKeyplaneWithContext:(id)a0;
- (id)defaultTextInputTraits;
- (id)initLazily;
- (long long)_focusedSound;
- (void)acceptAutocorrection;
- (void)_setSplit:(BOOL)a0;
- (id)_keyplaneNamed:(id)a0;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 lazily:(BOOL)a1;
- (BOOL)isActivePerScreen;
- (void)clearActivePerScreenIfNeeded;
- (void)clearSnapshot;
- (void)setupKeyFocusGuides;
- (void)activate;
- (void)autoAdjustOrientation;
- (void)activateIfNeeded;
- (void)setOrientation:(long long)a0;
- (void)implBoundsHeightChangeDone:(double)a0 suppressNotification:(BOOL)a1;
- (void)updateFocusMarginsUpToView:(id)a0;
- (void)updateKeyFocusGuides;
- (BOOL)allowExternalChangeForFocusHeading:(unsigned long long)a0 cursorLocation:(unsigned long long)a1;
- (void)_wheelChangedWithEvent:(id)a0;
- (struct UIPeripheralAnimationGeometry { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; })geometryForMinimize:(BOOL)a0;
- (void)keyboardMinMaximized:(BOOL)a0;
- (struct UIPeripheralAnimationGeometry { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x3; double x4; })geometryForImplHeightDelta:(double)a0;
- (void)_toggleVariantsMenuGesture:(BOOL)a0;
- (BOOL)hasAutocorrectPrompt;
- (void)didFocusGuideWithHeading:(unsigned long long)a0;
- (BOOL)shouldSaveMinimizationState;
- (id)initWithRequestedInteractionModel:(unsigned long long)a0;
- (id)_overrideTextInputTraits;
- (void)set_overrideTextInputTraits:(id)a0;
- (void)_didChangeCursorLocation;
- (void)_setPreferredHeight:(double)a0;
- (BOOL)showPredictionBar;
- (void)textInputTraitsDidChange;
- (void)_setPasscodeOutlineAlpha:(double)a0;
- (void)_setDisableUpdateMaskForSecureTextEntry:(BOOL)a0;
- (void)_didChangeCandidateList;
- (BOOL)disableInteraction;
- (id)_keyplaneForKey:(id)a0;
- (id)delegate;
- (void)manualKeyboardWasOrderedIn;
- (void)manualKeyboardWillBeOrderedIn;
- (void)manualKeyboardWillBeOrderedOut;
- (void)manualKeyboardWasOrderedOut;
- (id)_baseKeyForRepresentedString:(id)a0;
- (void)_changeToKeyplane:(id)a0;
- (void)_acceptCurrentCandidate;
- (id)_typeCharacter:(id)a0 withError:(struct CGPoint { double x0; double x1; })a1 shouldTypeVariants:(BOOL)a2 baseKeyForVariants:(BOOL)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_floatingKeyboardDraggableRect;
- (BOOL)canHandleEvent:(id)a0;
- (int)textEffectsVisibilityLevel;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })a0 forEvent:(struct __GSEvent { } *)a1;
- (id)_getLocalizedInputMode;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_globalFocusCastingFrameForHeading:(unsigned long long)a0;
- (BOOL)returnKeyEnabled;
- (void)touchesCancelled:(id)a0 withEvent:(id)a1;
- (void)willMoveToWindow:(id)a0;
- (id)initWithDefaultSize;
- (void)setCursorLocation:(unsigned long long)a0;
- (void)pressesEnded:(id)a0 withEvent:(id)a1;
- (void)deactivate;
- (id)_systemDefaultFocusGroupIdentifier;
- (void)setNeedsDisplay;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (id)targetWindow;
- (id)_touchPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)createPathEffectViewIfNecessary;
- (void)dealloc;
- (BOOL)isAutomatic;
- (void)pressesBegan:(id)a0 withEvent:(id)a1;
- (void)didMoveToWindow;
- (void)_setDisableTouchInput:(BOOL)a0;
- (void)touchesBegan:(id)a0 withEvent:(id)a1;
- (void)didUpdateFocusInContext:(id)a0 withAnimationCoordinator:(id)a1;
- (void)remoteControlReceivedWithEvent:(id)a0;
- (void)setUnfocusedFocusGuideOutsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })unfocusedFocusGuideOutsets;
- (void)_setUndocked:(BOOL)a0;
- (void)setUnfocusedFocusGuideOutsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0 fromView:(id)a1;
- (void)responseContextDidChange;
- (void)setDisableInteraction:(BOOL)a0;
- (void)_setUseRecentsAlert:(BOOL)a0;
- (BOOL)_useRecentsAlert;
- (id)_getCurrentKeyplaneName;
- (id)_getCurrentKeyboardName;
- (long long)_focusTouchSensitivityStyle;
- (void)_deactivateForBackgrounding;
- (long long)interfaceOrientation;

@end

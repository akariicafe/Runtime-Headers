@class DOMDocument, NSString, NSArray, WebScriptObject, WebFramePrivate, WebView, JSContext, DOMHTMLElement, WebDataSource, WebFrameView;

@interface WebFrame : NSObject {
    WebFramePrivate *_private;
}

@property (nonatomic) struct CGColor { } *caretColor;
@property (readonly, nonatomic) BOOL hasRichlyEditableDragCaret;
@property (readonly, copy, nonatomic) NSString *name;
@property (readonly, nonatomic) WebView *webView;
@property (readonly, nonatomic) WebFrameView *frameView;
@property (readonly, nonatomic) DOMDocument *DOMDocument;
@property (readonly, nonatomic) DOMHTMLElement *frameElement;
@property (readonly, nonatomic) WebDataSource *dataSource;
@property (readonly, nonatomic) WebDataSource *provisionalDataSource;
@property (readonly, nonatomic) WebFrame *parentFrame;
@property (readonly, copy, nonatomic) NSArray *childFrames;
@property (readonly, nonatomic) WebScriptObject *windowObject;
@property (readonly, nonatomic) struct OpaqueJSContext { } *globalContext;
@property (readonly, nonatomic) JSContext *javaScriptContext;

+ (struct Ref<WebCore::Frame, WTF::RawPtrTraits<WebCore::Frame>> { struct Frame *x0; })_createSubframeWithOwnerElement:(void *)a0 frameName:(const void *)a1 frameView:(id)a2;
+ (struct Ref<WebCore::Frame, WTF::RawPtrTraits<WebCore::Frame>> { struct Frame *x0; })_createFrameWithPage:(void *)a0 frameName:(const void *)a1 frameView:(id)a2 ownerElement:(void *)a3;
+ (void)_createMainFrameWithPage:(void *)a0 frameName:(const void *)a1 frameView:(id)a2;
+ (void)_createMainFrameWithSimpleHTMLDocumentWithPage:(void *)a0 frameView:(id)a1 style:(id)a2;
+ (id)stringWithData:(id)a0 textEncodingName:(id)a1;

- (void)setIsActive:(BOOL)a0;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionRectsForRange:(id)a0;
- (void)reloadFromOrigin;
- (void)_selectAll;
- (void)clearSelection;
- (id)selectedDOMRange;
- (unsigned long long)selectionAffinity;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (void)updateLayout;
- (id)wordRangeContainingCaretSelection;
- (BOOL)hasSelection;
- (void)reload;
- (id)selectionRects;
- (void)confirmMarkedText:(id)a0;
- (BOOL)setRangedSelectionExtentPoint:(struct CGPoint { double x0; double x1; })a0 baseIsStart:(BOOL)a1 allowFlipping:(BOOL)a2;
- (void)setSelectionGranularity:(int)a0;
- (void)clearRangedSelectionInitialExtent;
- (void)setSelectionWithFirstPoint:(struct CGPoint { double x0; double x1; })a0 secondPoint:(struct CGPoint { double x0; double x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })renderRectForPoint:(struct CGPoint { double x0; double x1; })a0 isReplaced:(BOOL *)a1 fontSize:(float *)a2;
- (void)recursiveSetUpdateAppearanceEnabled:(BOOL)a0;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)setRangedSelectionBaseToCurrentSelection;
- (unsigned short)characterInRelationToCaretSelection:(int)a0;
- (unsigned short)characterAfterCaretSelection;
- (int)wordOffsetInRange:(id)a0;
- (BOOL)selectionAtDocumentStart;
- (BOOL)selectionAtWordStart;
- (id)rangeByMovingCurrentSelection:(int)a0;
- (id)rangeByExtendingCurrentSelection:(int)a0;
- (void)loadAlternateHTMLString:(id)a0 baseURL:(id)a1 forUnreachableURL:(id)a2;
- (BOOL)_isDescendantOfFrame:(id)a0;
- (void)_handleKeyEvent:(id)a0;
- (void)setRangedSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setRangedSelectionBaseToCurrentSelectionStart;
- (int)_loadType;
- (id)_dataSource;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRect;
- (id)elementAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (int)selectionState;
- (void)setBaseWritingDirection:(int)a0;
- (void)loadData:(id)a0 MIMEType:(id)a1 textEncodingName:(id)a2 baseURL:(id)a3;
- (void)_setLoadsSynchronously:(BOOL)a0;
- (void)resetTextAutosizingBeforeLayout;
- (void)sendScrollEvent;
- (void)_userScrolled;
- (BOOL)_isVisuallyNonEmpty;
- (BOOL)hasRichlyEditableSelection;
- (void)_replaceSelectionWithFragment:(id)a0 selectReplacement:(BOOL)a1 smartReplace:(BOOL)a2 matchStyle:(BOOL)a3;
- (void)removeUnchangeableStyles;
- (void)deviceOrientationChanged;
- (void)setNeedsLayout;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_selectedNSRange;
- (id)stringForRange:(id)a0;
- (void)getDictationResultRanges:(id *)a0 andMetadatas:(id *)a1;
- (id)dictationResultMetadataForRange:(id)a0;
- (void)forceLayoutAdjustingViewSize:(BOOL)a0;
- (void)setRangedSelectionInitialExtentToCurrentSelectionStart;
- (id)interpretationsForCurrentRoot;
- (void)selectWithoutClosingTypingNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setTimeoutsPaused:(BOOL)a0;
- (void)expandSelectionToWordContainingCaretSelection;
- (struct __CTFont { } *)fontForSelection:(BOOL *)a0;
- (void)_replaceSelectionWithWebArchive:(id)a0 selectReplacement:(BOOL)a1 smartReplace:(BOOL)a2;
- (void)prepareForPause;
- (id)_unreachableURL;
- (void)expandSelectionToElementContainingCaretSelection;
- (BOOL)focusedNodeHasContent;
- (void)setPluginsPaused:(BOOL)a0;
- (void)resumeFromPause;
- (int)selectionBaseWritingDirection;
- (id)markedTextDOMRange;
- (id)webVisiblePositionForPoint:(struct CGPoint { double x0; double x1; })a0;
- (unsigned short)characterBeforeCaretSelection;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_convertToNSRange:(const void *)a0;
- (struct optional<WebCore::SimpleRange> { union { char x0; struct SimpleRange { struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; } x0; struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; } x1; } x1; } x0; BOOL x1; })_convertToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (id)init;
- (BOOL)_loadsSynchronously;
- (struct CGColor { } *)_bodyBackgroundColor;
- (int)innerLineHeight:(id)a0;
- (BOOL)needsLayout;
- (void)_setProhibitsScrolling:(BOOL)a0;
- (id)elementRangeContainingCaretSelection;
- (void)moveSelectionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)revealSelectionAtExtent:(BOOL)a0;
- (id)documentView;
- (id)wordAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stopLoading;
- (BOOL)_needsLayout;
- (id)deepestNodeAtViewportLocation:(struct CGPoint { double x0; double x1; })a0;
- (id)scrollableNodeAtViewportLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_setSelectionFromNone;
- (void)setSelectionChangeCallbacksDisabled:(BOOL)a0;
- (id)endPosition;
- (void)setSelectedDOMRange:(id)a0 affinity:(unsigned long long)a1 closeTyping:(BOOL)a2 userTriggered:(BOOL)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForScrollToVisible;
- (id)convertNSRangeToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectAtNode:(id)a0 offset:(int)a1 affinity:(unsigned long long)a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })convertDOMRangeToNSRange:(id)a0;
- (void)toggleBaseWritingDirection;
- (void)moveSelectionToEnd;
- (void)smartExtendRangedSelection:(int)a0;
- (void)moveSelectionToStart;
- (void)setText:(id)a0 asChildOfElement:(id)a1;
- (void)setSelectedDOMRange:(id)a0 affinity:(unsigned long long)a1 closeTyping:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForDOMRange:(id)a0;
- (int)preferredHeight;
- (void)collapseSelection;
- (void)setRangedSelectionBaseToCurrentSelectionEnd;
- (void)dealloc;
- (void)aggressivelyExpandSelectionToWordContainingCaretSelection;
- (void)setRangedSelectionInitialExtentToCurrentSelectionEnd;
- (id)_rectsForRange:(id)a0;
- (BOOL)hasEditableSelection;
- (BOOL)_isCommitting;
- (void)loadRequest:(id)a0;
- (id)approximateNodeAtViewportLocation:(struct CGPoint { double x0; double x1; } *)a0;
- (id)startPosition;
- (void)loadHTMLString:(id)a0 baseURL:(id)a1;
- (void)_setTextAutosizingWidth:(double)a0;
- (void)loadArchive:(id)a0;
- (unsigned char)_selectionGranularity;
- (void)resetSelection;
- (BOOL)_hasSelection;
- (id)findFrameNamed:(id)a0;
- (id)_stringByEvaluatingJavaScriptFromString:(id)a0;
- (void)_clearCoreFrame;
- (void)_updateBackgroundAndUpdatesWhileOffscreen;
- (void)_detachScriptDebugger;
- (void)_attachScriptDebugger;
- (id)_documentFragmentWithMarkupString:(id)a0 baseURLString:(id)a1;
- (BOOL)_isIncludedInWebKitStatistics;
- (void *)coreFrame;
- (id)_initWithWebFrameView:(id)a0 webView:(id)a1;
- (id)_findFrameWithSelection;
- (void)_clearSelection;
- (id)_webHTMLDocumentView;
- (struct OptionSet<WebCore::PaintBehavior> { unsigned short x0; })_paintBehaviorForDestinationContext:(struct CGContext { } *)a0;
- (id)_stringByEvaluatingJavaScriptFromString:(id)a0 forceUserGesture:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_firstRectForDOMRange:(id)a0;
- (struct optional<WebCore::SimpleRange> { union { char x0; struct SimpleRange { struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; } x0; struct BoundaryPoint { struct Ref<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; } x1; } x1; } x0; BOOL x1; })_convertToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 rangeIsRelativeTo:(unsigned char)a1;
- (BOOL)_canProvideDocumentSource;
- (void)_setInternalLoadDelegate:(id)a0;
- (id)_internalLoadDelegate;
- (void)_unmarkAllBadGrammar;
- (void)_unmarkAllMisspellings;
- (void)_clearSelectionInOtherFrames;
- (void)_setIsCommitting:(BOOL)a0;
- (id)_selectedString;
- (id)_stringForRange:(id)a0;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 contentsOnly:(BOOL)a1;
- (BOOL)_getVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_caretRectAtPosition:(const void *)a0 affinity:(unsigned long long)a1;
- (void)_scrollDOMRangeToVisible:(id)a0;
- (void)_scrollDOMRangeToVisible:(id)a0 withInset:(double)a1;
- (id)_convertNSRangeToDOMRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_convertDOMRangeToNSRange:(id)a0;
- (id)_markDOMRange;
- (id)_documentFragmentWithNodesAsParagraphs:(id)a0;
- (void)_replaceSelectionWithNode:(id)a0 selectReplacement:(BOOL)a1 smartReplace:(BOOL)a2 matchStyle:(BOOL)a3;
- (void)_insertParagraphSeparatorInQuotedContent;
- (struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; unsigned char x2 : 3; unsigned char x3 : 1; } x0; BOOL x1; })_visiblePositionForPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_typingStyle;
- (void)_setTypingStyle:(id)a0 withUndoAction:(unsigned char)a1;
- (BOOL)_canSaveAsWebArchive;
- (void)_commitData:(id)a0;
- (void)_selectNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct OpaqueJSContext { } *)_globalContextForScriptWorld:(id)a0;
- (void)_setShouldCreateRenderers:(BOOL)a0;
- (BOOL)_isFrameSet;
- (BOOL)_firstLayoutDone;
- (id)_selectionRangeForFirstPoint:(struct CGPoint { double x0; double x1; })a0 secondPoint:(struct CGPoint { double x0; double x1; })a1;
- (id)_selectionRangeForPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_isDisplayingStandaloneImage;
- (unsigned int)_pendingFrameUnloadEventCount;
- (void)selectNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectedNSRange;
- (void)_restoreViewState;
- (void)_saveViewState;
- (struct CGSize { double x0; double x1; })renderedSizeOfNode:(id)a0 constrainedToWidth:(float)a1;
- (int)layoutCount;
- (BOOL)isTelephoneNumberParsingAllowed;
- (BOOL)isTelephoneNumberParsingEnabled;
- (void)expandSelectionToStartOfWordContainingCaretSelection;
- (id)wordInRange:(id)a0;
- (BOOL)spaceFollowsWordInRange:(id)a0;
- (id)wordsInCurrentParagraph;
- (BOOL)selectionAtSentenceStart;
- (void)selectNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 onElement:(id)a1;
- (void)setMarkedText:(id)a0 forCandidates:(BOOL)a1;
- (void)setDictationPhrases:(id)a0 metadata:(id)a1 asChildOfElement:(id)a2;
- (id)stringByEvaluatingJavaScriptFromString:(id)a0 forceUserGesture:(BOOL)a1;
- (void)_replaceSelectionWithText:(id)a0 selectReplacement:(BOOL)a1 smartReplace:(BOOL)a2 matchStyle:(BOOL)a3;
- (void)_setVisibleSize:(struct CGSize { double x0; double x1; })a0;
- (void)_replaceSelectionWithText:(id)a0 selectReplacement:(BOOL)a1 smartReplace:(BOOL)a2;
- (void)_replaceSelectionWithMarkupString:(id)a0 baseURLString:(id)a1 selectReplacement:(BOOL)a2 smartReplace:(BOOL)a3;
- (id)_cacheabilityDictionary;
- (BOOL)_allowsFollowingLink:(id)a0;
- (id)_stringByEvaluatingJavaScriptFromString:(id)a0 withGlobalObject:(struct OpaqueJSValue { } *)a1 inScriptWorld:(id)a2;
- (id)_javaScriptContextForScriptWorld:(id)a0;
- (void)setAccessibleName:(id)a0;
- (BOOL)enhancedAccessibilityEnabled;
- (void)setEnhancedAccessibility:(BOOL)a0;
- (id)_layerTreeAsText;
- (id)accessibilityRoot;
- (void)_clearOpener;
- (id)_computePageRectsWithPrintScaleFactor:(float)a0 pageSize:(struct CGSize { double x0; double x1; })a1;
- (id)_documentFragmentForText:(id)a0;
- (id)_documentFragmentForWebArchive:(id)a0;
- (id)_documentFragmentForImageData:(id)a0 withRelativeURLPart:(id)a1 andMIMEType:(id)a2;
- (void)_dispatchDidReceiveTitle:(id)a0;
- (struct OpaqueJSValue { } *)jsWrapperForNode:(id)a0 inScriptWorld:(id)a1;
- (void)_loadData:(id)a0 MIMEType:(id)a1 textEncodingName:(id)a2 baseURL:(id)a3 unreachableURL:(id)a4;
- (void)_loadHTMLString:(id)a0 baseURL:(id)a1 unreachableURL:(id)a2;
- (id)initWithName:(id)a0 webFrameView:(id)a1 webView:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })elementRectAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)renderTreeAsExternalRepresentationForPrinting;
- (id)renderTreeAsExternalRepresentationWithOptions:(unsigned long long)a0;
- (int)numberOfPagesWithPageWidth:(float)a0 pageHeight:(float)a1;
- (void)printToCGContext:(struct CGContext { } *)a0 pageWidth:(float)a1 pageHeight:(float)a2;
- (struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; unsigned char x2 : 3; unsigned char x3 : 1; } x0; BOOL x1; })visiblePositionForPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionRectsForCoreRange:(const void *)a0;
- (BOOL)setSelectionWithBasePoint:(struct CGPoint { double x0; double x1; })a0 extentPoint:(struct CGPoint { double x0; double x1; })a1 baseIsStart:(BOOL)a2 allowFlipping:(BOOL)a3;
- (struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; unsigned char x2 : 3; unsigned char x3 : 1; } x0; BOOL x1; })closestWordBoundary:(struct VisiblePosition { struct Position { struct RefPtr<WebCore::Node, WTF::RawPtrTraits<WebCore::Node>, WTF::DefaultRefDerefTraits<WebCore::Node>> { struct Node *x0; } x0; unsigned int x1; unsigned char x2 : 3; unsigned char x3 : 1; } x0; BOOL x1; })a0;
- (void)extendSelection:(BOOL)a0;
- (BOOL)setSelectionWithBasePoint:(struct CGPoint { double x0; double x1; })a0 extentPoint:(struct CGPoint { double x0; double x1; })a1 baseIsStart:(BOOL)a2;
- (void)ensureRangedSelectionContainsInitialStartPoint:(struct CGPoint { double x0; double x1; })a0 initialEndPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)expandSelectionToSentence;
- (BOOL)renderedCharactersExceed:(unsigned long long)a0;

@end

@class NSUUID, NSString, NSURL, NSArray, NSMutableDictionary, NSDictionary, PKPaperList, NSNumber;

@interface PKPrinter : NSObject <NSSecureCoding> {
    NSDictionary *printInfoSupported;
    struct _http_s { } *job_http;
    NSMutableDictionary *privateData;
    NSMutableDictionary *specialFeedOrientation;
    NSArray *printScalingSupported;
    NSArray *mandatoryJobAttributes;
    NSString *quotaManagementURL;
    int maxPDFKBytes;
    int maxJPEGKBytes;
    int maxJPEGXDimension;
    int maxJPEGYDimension;
    int maxCopies;
    int maxDocumentPasswordLength;
    int preferred_landscape;
    int printerStateReasons;
    int recentRssiValues[5];
    BOOL connectionShouldNotBeTrusted;
    long long identifyActionsSupported;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property long long accessState;
@property (retain) NSDictionary *TXTRecord;
@property (retain) NSString *hostname;
@property (retain) NSNumber *port;
@property (readonly, retain) NSString *scheme;
@property (readonly) BOOL _isAlwaysAvailable;
@property (retain) PKPaperList *paperList;
@property long long jobAccountIDSupport;
@property (retain) NSString *name;
@property (retain) NSArray *trays;
@property (retain) NSArray *jpegFeaturesSupported;
@property (retain) NSDictionary *translations;
@property (retain) NSUUID *btleUUID;
@property long long btleMeasuredPower;
@property long long proximity;
@property (readonly) NSURL *printerURL;
@property (readonly) long long kind;
@property (readonly) long long identifyActionsSupported;
@property (readonly) long long jobTypesSupported;
@property (readonly) long long type;
@property (readonly) long long accessState;
@property (readonly) BOOL hasPrintInfoSupported;
@property (readonly) NSDictionary *printInfoSupported;
@property (readonly) BOOL isAdobeRGBSupported;
@property BOOL isLocal;
@property BOOL isFromMCProfile;
@property (readonly) BOOL isIPPS;
@property (readonly) NSString *uuid;
@property (readonly) BOOL hasIdentifyPrinterOp;
@property (readonly) BOOL needsSetup;
@property (readonly) BOOL setupSupportsPasswordScope;
@property (readonly) NSArray *localizedNamesOfEmptyTrays;

+ (id)printerWithName:(id)a0;
+ (BOOL)printerLookupWithName:(id)a0 andTimeout:(double)a1;
+ (id)printerWithName:(id)a0 discoveryTimeout:(double)a1;
+ (id)_ipp_to_data:(struct _ipp_s { } *)a0;
+ (struct _ipp_s { } *)_data_to_ipp:(id)a0;
+ (BOOL)uriMatchesMCProfileAdded:(id)a0;
+ (BOOL)mcProfilePrintersOnlyAllowed;
+ (id)defaultPrinter;
+ (BOOL)ippsIsRequired;
+ (struct _ipp_s { } *)getAttributes:(const char **)a0 count:(int)a1 fromURI:(id)a2;
+ (id)requiredPDL;
+ (id)hardcodedURIs;
+ (void)listenForPrinterNotifications;
+ (id)nameForHardcodedURI:(id)a0;
+ (BOOL)urfIsOptional;
+ (struct http_addrlist_s { struct http_addrlist_s *x0; union _http_addr_u { struct sockaddr { unsigned char x0; unsigned char x1; char x2[14]; } x0; struct sockaddr_in { unsigned char x0; unsigned char x1; unsigned short x2; struct in_addr { unsigned int x0; } x3; char x4[8]; } x1; struct sockaddr_in6 { unsigned char x0; unsigned char x1; unsigned short x2; unsigned int x3; struct in6_addr { union { unsigned char x0[16]; unsigned short x1[8]; unsigned int x2[4]; } x0; } x4; unsigned int x5; } x2; struct sockaddr_un { unsigned char x0; unsigned char x1; char x2[104]; } x3; char x4[256]; } x1; } *)_createAddrList:(const char *)a0 hostName:(const char *)a1 port:(int)a2;

- (BOOL)resolve;
- (id)displayName;
- (id)hostname;
- (void)updateType;
- (void)encodeWithCoder:(id)a0;
- (void)setAccessState:(long long)a0;
- (id)description;
- (void)pollForPrinterStatusQueue:(id)a0 completionHandler:(id /* block */)a1;
- (void)cancelUnlock;
- (void)unlockWithCompletionHandler:(id /* block */)a0;
- (void)setupWithOptions:(id)a0 completionHandler:(id /* block */)a1;
- (id)localName;
- (void)setHostname:(id)a0;
- (void)showPassCodeForSetupWithCompletionHandler:(id /* block */)a0;
- (void)validatePassCode:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)getSupplyLevels:(id /* block */)a0;
- (void)removeCredentialsFromKeychain;
- (BOOL)isEqual:(id)a0;
- (BOOL)hasPrintInfoSupported;
- (void)_checkAvailable:(double)a0 queue:(id)a1 completionHandler:(id /* block */)a2;
- (id)availableRollPapersPreferBorderless:(BOOL)a0;
- (long long)startJob:(id)a0 ofType:(id)a1;
- (BOOL)knowsReadyPaperList;
- (void)finishJobCompletionHandler:(id /* block */)a0;
- (id)initWithCoder:(id)a0;
- (id)matchedPaper:(id)a0 preferBorderless:(BOOL)a1 withDuplexMode:(id)a2 didMatch:(BOOL *)a3;
- (void)abortJobCompletionHandler:(id /* block */)a0;
- (void)printURL:(id)a0 ofType:(id)a1 printSettings:(id)a2 completionHandler:(id /* block */)a3;
- (long long)sendData:(const char *)a0 ofLength:(long long)a1;
- (id)uuid;
- (id)papersForPhotoWithSize:(struct CGSize { double x0; double x1; })a0;
- (id)papersForDocumentWithSize:(struct CGSize { double x0; double x1; })a0 andDuplex:(BOOL)a1;
- (id)papersForDocumentWithSize:(struct CGSize { double x0; double x1; })a0 scaleUpOnRoll:(BOOL)a1 andDuplex:(BOOL)a2;
- (id)port;
- (void)dealloc;
- (void)identifySelf;
- (id)makeAndModel;
- (BOOL)resolveWithTimeout:(int)a0;
- (void)setPort:(id)a0;
- (BOOL)isPaperReady:(id)a0;
- (BOOL)isIPPS;
- (BOOL)supportsJobAccountID;
- (id)location;
- (id)TXTRecord;
- (void)setTXTRecord:(id)a0;
- (id)paperListForDuplexMode:(id)a0;
- (id)rollReadyPaperListWithContentSize:(struct CGSize { double x0; double x1; })a0 forPhoto:(BOOL)a1;
- (id)initWithName:(id)a0 TXT:(id)a1;
- (void)setAccessStateFromTXT;
- (id)TXTRecordWithTimeout:(int)a0;
- (id)txtRecordObjectForKey:(id)a0;
- (BOOL)resolveIfNeeded;
- (BOOL)isBonjour;
- (void)reconfirmWithForce:(BOOL)a0;
- (id)privateObjectForKey:(id)a0;
- (struct _ipp_s { } *)getAttributes:(const char **)a0 count:(int)a1;
- (void)handlePrinterStateReasonsFromResponse:(struct _ipp_s { } *)a0;
- (id)localizedNamesOfEmptyTrays;
- (struct _pk_proxy_s { } *)_httpConnectViaSelfHost:(int)a0 msTimeout:(int)a1;
- (struct _ipp_s { } *)getPrinterAttributes;
- (void)doMedia2:(struct _ipp_s { } *)a0;
- (id)loadTranslations;
- (void)checkOperations:(struct _ipp_s { } *)a0;
- (struct _ipp_s { } *)getSupplyLevelAttributes;
- (long long)finalizeJob:(int)a0;
- (void)finalizeJob:(int)a0 completionHandler:(id /* block */)a1;
- (struct _ipp_s { } *)createRequest:(id)a0 ofType:(id)a1 url:(id)a2;
- (void)setPrivateObject:(id)a0 forKey:(id)a1;
- (id)localizedPrinterWarnings;
- (long long)feedOrientation:(id)a0;
- (BOOL)isAdobeRGBSupported;
- (id)rollReadyPaperListWithContentSize:(struct CGSize { double x0; double x1; })a0;
- (long long)abortJob;
- (long long)finishJob;
- (long long)printURL:(id)a0 ofType:(id)a1 printSettings:(id)a2;
- (id)initWithName:(id)a0 TXTRecord:(id)a1;
- (void)addRSSIValue:(id)a0;

@end

@class VMVoicemailCapabilities, NSString, NSArray, NSOrderedSet, NSMutableSet, NSObject, NSProgress, VMClientWrapper;
@protocol OS_dispatch_queue, VMServerXPCProtocol;

@interface VMVoicemailManager : NSObject <VMClientXPCProtocol>

@property (readonly, nonatomic, getter=isTranscriptionEnabled) BOOL transcriptionEnabled;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } accessorLock;
@property (nonatomic, getter=isOnline) BOOL online;
@property (nonatomic, getter=isSubscribed) BOOL subscribed;
@property (nonatomic, getter=isMessageWaiting) BOOL messageWaiting;
@property (nonatomic, getter=isSyncInProgress) BOOL syncInProgress;
@property (nonatomic, getter=isTranscribing) BOOL transcribing;
@property (copy, nonatomic) NSArray *accounts;
@property (copy, nonatomic) NSOrderedSet *voicemails;
@property (retain, nonatomic) NSMutableSet *trashedMessages;
@property (nonatomic) unsigned long long storageUsage;
@property (nonatomic) int token;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *completionQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *serialDispatchQueue;
@property (retain, nonatomic) VMVoicemailCapabilities *capabilities;
@property (retain, nonatomic) VMClientWrapper *client;
@property (readonly, nonatomic) id<VMServerXPCProtocol> serverConnection;
@property (readonly, nonatomic) BOOL canChangePassword;
@property (readonly, nonatomic) BOOL canChangeGreeting;
@property (readonly, nonatomic) BOOL mailboxRequiresSetup;
@property (readonly, nonatomic) NSArray *allVoicemails;
@property (readonly, nonatomic) long long unreadCount;
@property (readonly, nonatomic, getter=isTranscriptionEnabled) BOOL transcriptionEnabled;
@property (readonly, nonatomic) NSProgress *transcriptionProgress;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)obliterate;
- (long long)messageCountForMailboxType:(long long)a0 read:(BOOL)a1 error:(id *)a2;
- (id)initWithClient:(id)a0;
- (id)removeVoicemailsFromTrash:(id)a0;
- (void)messageCountForMailboxType:(long long)a0 read:(BOOL)a1 completion:(id /* block */)a2;
- (id)synchronousServerConnectionWithErrorHandler:(id /* block */)a0;
- (long long)maximumPasscodeLengthForAccountUUID:(id)a0;
- (id)fetchAccounts;
- (id)voicemailWithIdentifier:(unsigned long long)a0;
- (id)deleteVoicemail:(id)a0;
- (id)trashVoicemail:(id)a0;
- (void)setGreeting:(id)a0 forAccountUUID:(id)a1 completion:(id /* block */)a2;
- (void)greetingForAccountUUID:(id)a0 completion:(id /* block */)a1;
- (id)removeVoicemailFromTrash:(id)a0;
- (void)performSynchronousBlock:(id /* block */)a0;
- (void)retrieveDataForVoicemail:(id)a0;
- (id)uniqueIdentifierForVoiceMail:(id)a0;
- (void)requestInitialStateIfNecessaryAndSendNotifications:(BOOL)a0;
- (long long)messageCountForMailboxType:(long long)a0 error:(id *)a1;
- (void)reportTranscriptionProblemForVoicemail:(id)a0;
- (double)maximumGreetingDurationForAccountUUID:(id)a0;
- (id)markVoicemailAsRead:(id)a0;
- (void).cxx_destruct;
- (void)performAtomicAccessorBlock:(id /* block */)a0;
- (id)init;
- (void)updateAccounts:(id)a0;
- (void)messageCountForMailboxType:(long long)a0 completion:(id /* block */)a1;
- (id)voicemailsPassingTest:(id /* block */)a0;
- (long long)minimumPasscodeLengthForAccountUUID:(id)a0;
- (id)asynchronousServerConnectionWithErrorHandler:(id /* block */)a0;
- (void)saveGreeting:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)changePassword:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)remapAccount:(id)a0 toAccount:(id)a1;
- (void)setPasscode:(id)a0 forAccountUUID:(id)a1 completion:(id /* block */)a2;
- (id)trashVoicemails:(id)a0;
- (void)reportTranscriptionRatedAccurate:(BOOL)a0 forVoicemail:(id)a1;
- (void)synchronize;
- (id)markVoicemailsAsRead:(id)a0;
- (id)messagesForMailboxType:(long long)a0 read:(BOOL)a1 limit:(long long)a2 offset:(long long)a3 error:(id *)a4;
- (void)voicemailsUpdated:(id)a0;
- (void)_requestInitialStateIfNecessaryAndSendNotifications:(BOOL)a0;
- (void)dealloc;
- (id)deleteVoicemails:(id)a0;
- (unsigned long long)countOfVoicemailsPassingTest:(id /* block */)a0;
- (BOOL)isPasscodeChangeSupportedForAccountUUID:(id)a0;
- (id)dataForVoicemailWithIdentifier:(unsigned long long)a0;
- (id)messagesForMailboxType:(long long)a0 limit:(long long)a1 offset:(long long)a2 error:(id *)a3;
- (BOOL)isGreetingChangeSupportedForAccountUUID:(id)a0;

@end

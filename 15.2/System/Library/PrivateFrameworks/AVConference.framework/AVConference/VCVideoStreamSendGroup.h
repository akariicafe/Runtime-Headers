@class NSString, NSMutableDictionary, VCVideoRule, NSMutableSet, VCMoments, VCRedundancyControllerVideo, NSMutableArray, VCSessionUplinkVideoStreamController;

@interface VCVideoStreamSendGroup : VCMediaStreamSendGroup <VCMediaStreamDelegate, VCSessionUplinkVideoStreamControllerDelegate, VCRedundancyControllerDelegate, VCMediaCaptureController, VCVideoSink, VCVideoCaptureClient, VCMediaStreamSendSyncSourceDelegate> {
    int _captureSource;
    _Atomic unsigned char _videoPriority;
    unsigned char _lastVideoPriority;
    BOOL _videoPriorityEnabled;
    long long _maxSupportedMultiwayVideoResolution;
    struct CGSize { double width; double height; } _maxScreenCaptureSize;
    int _maxSupportedCaptureFrameRate;
    NSMutableSet *_videoPayloadTypes;
    VCSessionUplinkVideoStreamController *_uplinkVideoStreamController;
    struct tagVCMemoryPool { struct { void *x0; long long x1; } x0; unsigned long long x1; } *_videoRedundancyPool;
    struct opaqueCMSimpleQueue { } *_videoRedundancyChangeEventQueue;
    VCRedundancyControllerVideo *_redundancyController;
    VCMoments *_moments;
    double _fecRatio;
    VCVideoRule *_captureVideoRule;
    NSMutableDictionary *_pendingActiveUplinkStreams;
    NSMutableArray *_temporalStreamsIDs;
    id _clientCaptureController;
    unsigned int _activeTemporalTierBitmap;
}

@property (nonatomic) int captureFrameRate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)vcMediaStreamDidRTCPTimeOut:(id)a0;
- (void)vcMediaStreamDidRTPTimeOut:(id)a0;
- (id)stopCapture;
- (id)startCapture;
- (void)sourceFrameRateDidChange:(unsigned int)a0;
- (BOOL)onVideoFrame:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 attribute:(struct { BOOL x0; BOOL x1; int x2; BOOL x3; BOOL x4; int x5; unsigned char x6; })a2;
- (void)dealloc;
- (id)initWithConfig:(id)a0;
- (void)collectAndLogChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; } *)a0;
- (id)willStart;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)redundancyController:(id)a0 redundancyVectorDidChange:(struct { unsigned short x0; struct { unsigned char x0; unsigned char x1; } x1[32]; })a1;
- (void)controller:(id)a0 didChangeActiveVideoStreams:(id)a1;
- (BOOL)generateKeyFrameWithStreamID:(id)a0;
- (void)vcMediaStreamDidDecryptionTimeOut:(id)a0;
- (void)redundancyController:(id)a0 redundancyIntervalDidChange:(double)a1;
- (id)setupRedundancyController;
- (void)updateActiveMediaStreamIDs:(id)a0 withTargetBitrate:(unsigned int)a1 mediaBitrates:(id)a2;
- (id)activeStreamKeys;
- (void)thermalLevelDidChange:(int)a0;
- (id)clientCaptureRule;
- (void)avConferencePreviewError:(id)a0;
- (void)cameraAvailabilityDidChange:(BOOL)a0;
- (void)frameRateIsBeingThrottled:(int)a0 thermalLevelDidChange:(BOOL)a1 powerLevelDidChange:(BOOL)a2;
- (void)setUplinkBitrateCapWifi:(unsigned int)a0;
- (void)setUplinkBitrateCapCell:(unsigned int)a0;
- (long long)maxCaptureResolution;
- (int)maxCaptureCameraFrameRate;
- (BOOL)enableRedundancy:(BOOL)a0;
- (void)registerForVideoCapture:(int)a0;
- (void)deregisterForVideoCapture;
- (void)setActiveConnection:(id)a0 uplinkBitrateCap:(unsigned int)a1;
- (BOOL)shouldCompoundListIgnoreStream:(id)a0 streamConfig:(id)a1 activeStreamIds:(id)a2;
- (BOOL)shouldSubscribeToStreamID:(id)a0 peerSubscribedStreams:(id)a1;
- (id)streamDescriptionForMultiwayConfig:(id)a0;
- (BOOL)updateUplinkStreamsForPeerSubscribedStreams:(id)a0;
- (void)setupVideoPriority;
- (BOOL)setupRedundancySettings;
- (int)maxCaptureFrameRate;
- (BOOL)setupUplinkVideoStreamController;
- (void)setupPayloadTypes;
- (void)registerConfigForScreenShare;
- (void)cleanupRedundancySettings;
- (void)flushVideoRedundancyEventQueue;
- (unsigned long long)maxStreamFrameRate;
- (struct CGSize { double x0; double x1; })getCaptureEncodingSize;
- (void)computeMaxScreenCaptureSize;
- (unsigned int)getPixelFormat;
- (void)registerClientForScreenShare;
- (id)registerForScreenCapture;
- (void)deregisterClientForScreenShare;
- (void)deregisterForScreenCapture;
- (id)captureConfigForScreenShare;
- (void)processVideoEventQueue;
- (void)updateVideoStreamAndProcessFrame:(id)a0 sampleBuffer:(struct opaqueCMSampleBuffer { } *)a1 lastSentAudioHostTime:(double)a2 lastSentAudioSampleTime:(unsigned int)a3 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a4 attribute:(struct { BOOL x0; BOOL x1; int x2; BOOL x3; BOOL x4; int x5; unsigned char x6; })a5;
- (void)processVideoPriority;
- (void)updateSendSampleRTPTimestamp:(unsigned int)a0 sampleRate:(double)a1 systemTime:(double)a2;

@end

@class VCMediaStreamConfig, VCNetworkFeedbackController, VCCallInfoBlob, AVCBasebandCongestionDetector, NSObject, NSMutableArray, VCTransportSession, AVCRateControlFeedbackController, NSString, VCWeakObjectHolder, AVCStatisticsCollector, VCDatagramChannelIDS, VCMediaStreamTransport, NSArray, NSError, VCMediaKeyIndex;
@protocol OS_nw_connection, VCMediaStreamNotification, RTCPReportProvider, VCMomentsCollectorDelegate, OS_dispatch_source, VCMediaStreamDelegate, OS_dispatch_queue;

@interface VCMediaStream : VCObject <VCMediaStreamProtocol, RTCPReportProvider, VCSecurityEventHandler, VCConnectionChangedHandler> {
    NSObject<OS_dispatch_queue> *_delegateNotificationQueue;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _streamLock;
    VCDatagramChannelIDS *_datagramChannel;
    NSString *_idsDestination;
    id<VCMediaStreamDelegate> _delegate;
    NSString *_callID;
    BOOL _isSRTPInitialized;
    BOOL _useRandomTS;
    BOOL _isReportingAgentOwner;
    double _rtpTimeoutEnabledTime;
    double _rtcpTimeoutEnabledTime;
    double _decryptionTimeoutEnabledTime;
    NSObject<OS_dispatch_source> *_rtcpSendHeartbeat;
    NSObject<OS_dispatch_source> *_timeoutHeartbeat;
    double _lastRTPTimeoutReportTime;
    double _lastRTCPTimeoutReportTime;
    double _lastDecryptionTimeoutReportTime;
    double _lastDecryptionMKMRecoveryTime;
    double _decryptionErrorStartTime;
    unsigned int _transportSessionID;
    int _clientPID;
    VCWeakObjectHolder *_notificationDelegate;
    VCWeakObjectHolder *_rtcpReportProvider;
    struct _VCMediaStreamTransportSetupInfo { unsigned char setupType; union { struct { int rtpSocket; int rtcpSocket; } socketInfo; struct { struct tagIPPORT { int iFlags; char szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } srcIPPORT; struct tagIPPORT { int iFlags; char szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } srcRTPIPPort; } ipInfo; struct { void *context; void /* function */ *creationCallback; BOOL isReceiveExternallyScheduled; } transportStreamInfo; NSObject<OS_nw_connection> *nwConnection; } ; unsigned int sourceRate; unsigned int datagramChannelToken; BOOL isSessionIDValid; } _transportSetupInfo;
    void /* function */ *_vcMediaCallback;
    VCMediaKeyIndex *_lastReceivedMKI;
    VCCallInfoBlob *_remoteEndpointInfo;
    VCTransportSession *_transportSession;
    NSError *_cachedError;
    void /* function */ *_notificationHandler;
    void /* function */ *_packetEventHandler;
    struct tagVCNWConnectionMonitor { } *_nwMonitor;
    void *_oneToOneControlInfoGenerator;
    AVCRateControlFeedbackController *_oneToOneFeedbackController;
    BOOL _mediaControlInfoCallbacksRegistered;
    void /* function */ *_statisticsHandler;
    BOOL _isWRMinitialized;
    BOOL _isNWMonitorSignalEnabled;
    BOOL _isRTTBasedFIRThrottlingEnabled;
    BOOL _areStatisticsRegistered;
    AVCStatisticsCollector *_statisticsCollector;
    int _nwMonitorHandlerIndex;
    int _rttMonitorHandlerIndex;
}

@property (readonly, nonatomic) long long streamToken;
@property (readonly, nonatomic) int state;
@property (nonatomic) id<VCMediaStreamDelegate> delegate;
@property (nonatomic) id<VCMomentsCollectorDelegate> momentsCollectorDelegate;
@property (readonly, nonatomic) unsigned int localSSRC;
@property (nonatomic) id<VCMediaStreamNotification> notificationDelegate;
@property (nonatomic) id<RTCPReportProvider> rtcpReportProvider;
@property (readonly, nonatomic) double rtcpHeartbeatLeeway;
@property (readonly, nonatomic) double lastReceivedRTPPacketTime;
@property (readonly, nonatomic) double lastReceivedRTCPPacketTime;
@property (retain, nonatomic) AVCBasebandCongestionDetector *basebandCongestionDetector;
@property (nonatomic) int operatingMode;
@property (nonatomic) struct tagVCMediaQueue { } *mediaQueue;
@property (readonly, nonatomic) VCMediaStreamTransport *defaultTransport;
@property (readonly, nonatomic) NSMutableArray *transportArray;
@property (readonly, nonatomic) VCMediaStreamConfig *defaultStreamConfig;
@property (readonly, nonatomic) VCMediaStreamConfig *oneToOneStreamConfig;
@property (readonly, nonatomic) BOOL isSendingMedia;
@property (readonly, retain, nonatomic) AVCRateControlFeedbackController *feedbackController;
@property (readonly, nonatomic) void *mediaControlInfoGenerator;
@property (readonly, nonatomic) unsigned int mediaControlInfoGeneratorType;
@property (retain, nonatomic) VCNetworkFeedbackController *networkFeedbackController;
@property (copy) NSArray *compoundStreamIDs;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)isSameSRTPKey:(id)a0 newKey:(id)a1;

- (id)setPause:(BOOL)a0;
- (void)unlock;
- (void)setState:(int)a0;
- (void)lock;
- (id)start;
- (id)init;
- (void)startWithCompletionHandler:(id /* block */)a0;
- (void)dealloc;
- (id)stop;
- (void)setRtpTimeOutEnabled:(BOOL)a0;
- (void)setRtcpTimeOutEnabled:(BOOL)a0;
- (void)setRtcpEnabled:(BOOL)a0;
- (void)setRtcpSendInterval:(double)a0;
- (void)setRtpTimeOutInterval:(double)a0;
- (void)setRtcpTimeOutInterval:(double)a0;
- (id)supportedPayloads;
- (void)destroyNWMonitorInternal;
- (void)createNWMonitor;
- (void)destroyNWMonitor;
- (void)collectTxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; } *)a0;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; } *)a0;
- (id)createTransportWithStreamConfig:(id)a0 ssrc:(unsigned int)a1;
- (void)sendControlPacketWithParameters:(struct _RTCP_SEND_CONTROL_PARAMETERS { unsigned int x0; int x1; char *x2; unsigned long long x3; unsigned char x4; unsigned short *x5; int x6; unsigned short x7; unsigned short x8; unsigned int x9; struct _RTCP_RECEPTION_REPORT *x10; unsigned char x11; struct tagRTCP_CUSTOM_RATE_CONTROL_INFO *x12; unsigned short x13[12]; unsigned char x14; BOOL x15; unsigned long long x16; } *)a0;
- (void)onCallIDChanged;
- (BOOL)onConfigureStreamWithConfiguration:(id)a0 error:(id *)a1;
- (void)onStartWithCompletionHandler:(id /* block */)a0;
- (void)onStopWithCompletionHandler:(id /* block */)a0;
- (void)onPauseWithCompletionHandler:(id /* block */)a0;
- (void)onResumeWithCompletionHandler:(id /* block */)a0;
- (void)onSendRTCPPacket;
- (void)onRTPTimeout;
- (void)onRTCPTimeout;
- (void)handleActiveConnectionChange:(id)a0;
- (id)initWithTransportSessionID:(unsigned int)a0;
- (id)initWithTransportSessionID:(unsigned int)a0 localSSRC:(unsigned int)a1;
- (id)setLocalParticipantInfo:(id)a0 networkSockets:(id)a1 withError:(id *)a2;
- (void)initializeWRMUsingRtpHandle:(struct tagHANDLE { int x0; } *)a0;
- (BOOL)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned char x8; } *)a0 reportCount:(char *)a1;
- (void)setStreamDirection:(long long)a0;
- (struct tagHANDLE { int x0; } *)createRTPHandleWithStreamConfig:(id)a0 payloadType:(int)a1 localSSRC:(unsigned int)a2;
- (BOOL)isRTPTimeoutEnabled;
- (BOOL)isRTCPTimeoutEnabled;
- (void)registerMediaControlInfoGeneratorWithConfigs:(id)a0;
- (void)unregisterMediaControlInfoGenerator;
- (void)registerStatistics:(id)a0;
- (void)willExitState:(int)a0 newState:(int)a1;
- (void)didEnterState:(int)a0 oldState:(int)a1;
- (void)setStreamIDs:(id)a0 repairStreamIDs:(id)a1;
- (void)collectRxChannelMetrics:(struct { unsigned int x0; unsigned int x1[5]; unsigned int x2; double x3; struct CGSize { double x0; double x1; } x4; double x5; unsigned int x6; double x7; unsigned int x8; } *)a0 interval:(float)a1;
- (void)checkForDecryptionTimeout;
- (BOOL)setStreamConfig:(id)a0 withError:(id *)a1;
- (id)setupRTPForIDS;
- (void)unregisterStatistics;
- (BOOL)handleEncryptionInfoChange:(id)a0;
- (void)resetDecryptionTimeout;
- (unsigned int)getRTCPReportNTPTimeMiddle32ForReportId:(unsigned char)a0;
- (unsigned int)getExtendedSequenceNumberForSequenceNumber:(unsigned short)a0;
- (void)didEncryptionKeyRollTimeout;
- (BOOL)initializeTransportSessionWithSocketDictionary:(id)a0 error:(id *)a1;
- (void)initializeTransportSetupInfoWithSocketDictionary:(id)a0;
- (void)handleTransportSessionEvent:(unsigned int)a0 info:(id)a1;
- (void)handleStartDidSucceed:(BOOL)a0 withError:(id)a1;
- (BOOL)initializeTransportSetupInfoWithTransportSession:(id *)a0;
- (void)initializeTransportSetupInfoWithRTPSocket:(int)a0 RTCPSocket:(int)a1;
- (void)cleanupNWConnection:(id *)a0;
- (BOOL)initializeTransportSessionWithNWConnectionID:(id)a0 error:(id *)a1;
- (BOOL)setupNWConnectionWithID:(id)a0;
- (void)dupNWConnectionBackingSocket:(int *)a0;
- (id)setupRTPWithNWConnectionID:(id)a0 error:(id *)a1;
- (id)setupRTPWithIDSDestination:(id)a0 error:(id *)a1;
- (id)setupRTPWithIPInfo:(id)a0 error:(id *)a1;
- (BOOL)initializeTransportSessionWithIDSDestination:(id)a0 error:(id *)a1;
- (BOOL)initializeTransportSetupInfoWithIDSDestination:(id)a0 error:(id *)a1;
- (void)setupMediaStream;
- (void)unregisterWRMCallback;
- (int)registerStatisticsHandler:(id)a0 statisticType:(int)a1;
- (id)getMediaStreamConfigForControlInfoGenerator:(id)a0;
- (void)createLocalMediaControlInfoGeneratorWithType:(unsigned int)a0 version:(unsigned char)a1;
- (void)registerCallbacksForMediaControlInfoGenerator:(void *)a0 forDirection:(long long)a1 options:(unsigned int)a2;
- (void)decryptionStatusChanged:(BOOL)a0;
- (BOOL)updateRemoteAddressWithConfig:(id)a0 error:(id *)a1;
- (BOOL)startMediaTransportsWithError:(id *)a0;
- (char *)streamStateToString:(int)a0;
- (void)startRTCPSendHeartbeat;
- (void)startTimeoutHeartbeat;
- (void)stopInternalWithHandler:(id /* block */)a0;
- (id)copyDelegate;
- (void)stopMediaTransports;
- (void)stopRTCPSendHeartbeat;
- (void)stopTimeoutHeartbeat;
- (void)setPause:(BOOL)a0 withCompletionHandler:(id /* block */)a1;
- (id)getInvalidParamErrorForSetPause:(BOOL)a0 didSucceed:(BOOL)a1;
- (id)setupRTPWithSocketDictionary:(id)a0 error:(id *)a1;
- (id)setupRTPWithLocalParticipantInfo:(id)a0 error:(id *)a1;
- (long long)streamDirection;
- (BOOL)isDecryptionTimeoutEnabled;
- (BOOL)isRTCPSendEnabled;
- (void)processRTPTimeoutSettingChange;
- (void)processRTCPTimeoutSettingChange;
- (void)processDecryptionTimeoutSettingChange;
- (void)resetRTCPSendHeartbeatTimer:(unsigned long long)a0;
- (void)rtcpSendHeartbeat;
- (void)setupCallbacksWithNWConnectionMonitor:(struct tagVCNWConnectionMonitor { } *)a0;
- (void)resetTimeoutHeartbeatTimer:(unsigned long long)a0;
- (void)checkDecryptionTimeoutAgainstTime:(double)a0 decryptionErrorStartTime:(double)a1;
- (void)checkDecryptionTimeoutForMKMRecoveryAgainstTime:(double)a0 decryptionErrorStartTime:(double)a1;
- (void)checkRTPPacketTimeoutAgainstTime:(double)a0 lastReceivedPacketTime:(double)a1;
- (double)computeNextTimoutWithEnabledTime:(double)a0 timeoutInterval:(double)a1 lastReceivedPacketTime:(double)a2 currentTime:(double)a3 lastTimeoutReportTime:(double)a4;
- (void)checkRTCPPacketTimeoutAgainstTime:(double)a0 lastReceivedPacketTime:(double)a1;
- (void)resetTimeoutHeartbeatWithRTPTimeout:(double)a0 rtcpTimeout:(double)a1 decryptionTimeout:(double)a2 currentTime:(double)a3;
- (void)timeoutHeartbeat;
- (void)notifyDelegateDidReceiveRTCPPackets:(struct _RTCPPacketList { union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; unsigned char x1; struct tagRTCPPACKET *x2[10]; struct OpaqueCMBlockBuffer *x3; char *x4; unsigned long long x5; unsigned int x6; unsigned char x7[1472]; unsigned short x8[12]; unsigned char x9; struct { struct _RTCPPacketList *x0; } x10; } *)a0;
- (void)setDecryptionTimeOutEnabled:(BOOL)a0;
- (void)setDecryptionTimeOutInterval:(double)a0;
- (int)handleMediaCallbackNotification:(int)a0 inData:(void *)a1 outData:(void *)a2;

@end

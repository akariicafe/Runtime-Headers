@class VideoAttributes, NSString, VCVideoSourceTokenManager, VCImageQueue, NSMutableDictionary, VCImageRotationConverter, NSObject, NSMutableArray;
@protocol AVConferencePreviewDelegate, OS_dispatch_source, OS_dispatch_queue, VCVideoSource;

@interface VCVideoCaptureServer : NSObject <VCVideoCaptureServer> {
    int currentWidth;
    int currentHeight;
    int currentFrameRate;
    int _screenConfiguredFrameRate;
    int _screenCurrentFrameRate;
    int _maxFrameRate;
    int _encodingWidth;
    int _encodingHeight;
    int previewFrameCount;
    int captureFrameCount;
    NSObject<OS_dispatch_source> *cameraHealthMonitor;
    NSObject<OS_dispatch_source> *screenHealthMonitor;
    int pendingWidth;
    int pendingHeight;
    int pendingFrameRate;
    VCVideoSourceTokenManager *_tokenManager;
    BOOL _firstPreviewFrameReceived;
    int snapshotRequestCount;
    NSMutableArray *cameraVideoSinks;
    NSMutableArray *screenCaptureClients;
    NSMutableDictionary *_cameraPreviewClients;
    VideoAttributes *localVideoAttributes;
    struct CGSize { double width; double height; } localScreenPortraitAspectRatio;
    struct CGSize { double width; double height; } localScreenLandscapeAspectRatio;
    struct CGSize { double width; double height; } localExpectedPortraitAspectRatio;
    struct CGSize { double width; double height; } localExpectedLandscapeAspectRatio;
    struct CGSize { double width; double height; } _defaultPortraitAspectRatio;
    struct CGSize { double width; double height; } _defaultLandscapeAspectRatio;
    NSObject<OS_dispatch_queue> *captureServerQueue;
    NSObject<OS_dispatch_queue> *captureClientQueue;
    NSObject<OS_dispatch_queue> *captureCameraQueue;
    NSObject<OS_dispatch_queue> *_cameraPreviewClientMonitorQueue;
    NSObject<OS_dispatch_queue> *_xpcCommandQueue;
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;
    NSObject<OS_dispatch_queue> *variablesQueue;
    NSObject<OS_dispatch_queue> *snapshotQueue;
    BOOL _useAVCaptureSession;
    NSObject<VCVideoSource> *avCapture;
    NSObject<VCVideoSource> *_screenCapture;
    NSMutableDictionary *_screenShareCaptureConfig;
    struct OpaqueVTPixelTransferSession { } *transferSession;
    struct __CVPixelBufferPool { } *bufferPool;
    BOOL resize;
    double falteredRenderingtimeStamp;
    VCImageQueue *frontQueue;
    VCImageQueue *backQueue;
    int _thermalNotificationToken;
    int _thermalLevel;
    int _newThermalLevel;
    int _peakPowerNotificationToken;
    int _peakPowerLevel;
    int _newPeakPowerLevel;
    BOOL _viewPointCorrectionEnabledByThermal;
    BOOL _viewPointCorrectionEnabledByClient;
    BOOL _isPreviewRunning;
    BOOL _isScreenCaptureRunning;
    BOOL _forceDisableThermal;
    BOOL _isCapturing;
    BOOL _cinematicFramingEnabled;
    VCImageRotationConverter *_imageRotationConverter;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } _enqueueLock;
    NSMutableDictionary *_streamInputCaptureSources;
    NSMutableDictionary *_streamInputs;
}

@property (readonly, nonatomic) struct _VCVideoSourceToken { union { struct { unsigned int identifier : 24; unsigned char type : 8; } ; unsigned int bits; } ; } currentVideoSourceToken;
@property (retain, nonatomic) NSObject<AVConferencePreviewDelegate> *appDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)VCVideoCaptureServerSingleton;

- (BOOL)setUpScreenVideoCaptureSource:(id)a0;
- (void)dispatchedSetCaptureCameraWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0;
- (BOOL)enqueueFrameToQueueFront:(BOOL)a0 frame:(struct __CVBuffer { } *)a1 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2;
- (struct __CVBuffer { } *)createResizedFrame:(struct __CVBuffer { } *)a0;
- (void)sendBiomeEventIsStarting:(BOOL)a0;
- (long long)streamInputIDForCaptureSourceID:(int)a0;
- (void)setCaptureWidth:(int)a0 height:(int)a1 rate:(int)a2;
- (void)handleAVCaptureError:(int)a0 domain:(id)a1;
- (BOOL)internalUnregisterStreamInput:(id)a0;
- (void)unregisterStreamInput:(id)a0;
- (void)setCameraZoomAvailable:(BOOL)a0 currentZoomFactor:(double)a1 maxZoomFactor:(double)a2;
- (void)handleCaptureSourcePositionDidChange:(BOOL)a0;
- (void)startPreview;
- (id)copyLocalVideoAttributes;
- (void)handleCaptureEvent:(id)a0 subType:(id)a1;
- (void)cleanupStreamInputCaptureSources;
- (BOOL)registerForVideoFramesFromSource:(int)a0 withClient:(id)a1 width:(int)a2 height:(int)a3 frameRate:(int)a4;
- (void)onCaptureScreenFrame:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 orientation:(int)a2;
- (void)beginPIPToPreviewAnimation;
- (void)tearDownImageRotationConverter;
- (BOOL)deregisterForVideoFramesFromSource:(int)a0 withClient:(id)a1;
- (int)getFrameRateForPeakPowerLevel:(int)a0;
- (unsigned long long)retainCount;
- (BOOL)registerStreamInput:(id)a0;
- (struct CGSize { double x0; double x1; })localExpectedRatioForScreenOrientation:(int)a0;
- (void)registerVideoSink:(id)a0 withCaptureSource:(int)a1;
- (void)setCinematicFramingEnabled:(BOOL)a0;
- (void)centerStageEnabledDidChange:(BOOL)a0;
- (void)setCaptureWidth:(int)a0 height:(int)a1 rate:(int)a2 forced:(BOOL)a3;
- (void)notifyCameraDidChangeAvailability:(id)a0 available:(BOOL)a1;
- (void)updateLocalAspectRatios:(int)a0 localScreenAspectRatio:(struct CGSize { double x0; double x1; })a1;
- (BOOL)internalRegisterStreamInput:(id)a0;
- (void)stopCapture;
- (void)onCaptureVideoFrame:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 switching:(BOOL)a2 camera:(int)a3 videoMirrored:(BOOL)a4;
- (BOOL)setLocalVideoAttributes:(id)a0;
- (void)processPreviewSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 camera:(int)a2 cameraStatusBits:(unsigned char)a3;
- (void)dispatchedSetCaptureFrameRate:(int)a0;
- (BOOL)isValidStreamInput:(id)a0;
- (id)retain;
- (void)processCaptureSampleBuffer:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 camera:(int)a2 cameraStatusBits:(unsigned char)a3;
- (int)createVideoCaptureWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2 useBackFacingCamera:(BOOL)a3;
- (struct opaqueCMFormatDescription { } *)newFormatDescriptionForCaptureSource:(int)a0;
- (BOOL)setLocalScreenAttributes:(id)a0;
- (void)deregisterCaptureConfigForSource:(int)a0;
- (struct __CFDictionary { } *)copyCameraColorInfo;
- (BOOL)registerForVideoFramesFromSource:(int)a0 sourceConfig:(id)a1;
- (struct CGSize { double x0; double x1; })localScreenRatioForScreenOrientation:(int)a0;
- (void)setUpImageRotationConverter;
- (void)pausePreview;
- (int)registerStreamInputCaptureSourceWithConfiguration:(id)a0;
- (struct __CFDictionary { } *)copyStatsDictionary;
- (id)allocWithZone:(struct _NSZone { } *)a0;
- (id)autorelease;
- (void)handleCaptureEvent:(id)a0;
- (void)endPreviewToPIPAnimation;
- (unsigned int)setLocalVideoDestination:(id)a0 facing:(BOOL)a1;
- (void)sourceFrameRateDidChange:(unsigned int)a0;
- (void)updateViewPointCorrectionStatus;
- (void)setScreenCaptureFrameRate:(int)a0;
- (void)setCameraZoomFactor:(double)a0 withRate:(double)a1;
- (BOOL)stopScreenShareCapture;
- (id)init;
- (int)findNextAvailableCaptureSourceID;
- (void)startCaptureWithWidth:(int)a0 height:(int)a1 frameRate:(int)a2;
- (void)setCurrentFrameRate:(int)a0;
- (int)getScreenFrameRateForThermalLevel:(int)a0;
- (BOOL)cameraSupportsWidth:(int)a0 height:(int)a1;
- (void)portraitBlurEnabledDidChange:(BOOL)a0;
- (BOOL)setCaptureCameraWithToken:(struct _VCVideoSourceToken { union { struct { unsigned int x0 : 24; unsigned char x1 : 8; } x0; unsigned int x1; } x0; })a0;
- (int)getFrameRateForThermalLevel:(int)a0 peakPowerPressure:(int)a1;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)setCFAvailabilityChange:(BOOL)a0;
- (void)registerBlocksForServer;
- (void)setUpDefaultAspectRatios;
- (BOOL)registerForFrames:(id)a0;
- (void)setCaptureFrameRate:(int)a0;
- (void)setCameraZoomFactor:(double)a0;
- (void)stopPreview;
- (void)setPauseCapture:(BOOL)a0;
- (BOOL)captureVideoWidth:(int *)a0 height:(int *)a1 frameRate:(int *)a2;
- (void)notifyThermalChangeForClients:(id)a0;
- (id)copyLocalScreenAttributesForVideoAttributes:(id)a0;
- (void)handleAVCaptureError:(int)a0 error:(id)a1;
- (BOOL)unregisterStreamInputCaptureSourceWithCaptureSourceID:(int)a0;
- (BOOL)onVideoFrame:(struct opaqueCMSampleBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 attribute:(struct { BOOL x0; BOOL x1; int x2; BOOL x3; BOOL x4; int x5; unsigned char x6; })a2;
- (void)resetCameraToPreviewSettingsForced:(BOOL)a0;
- (void)beginPreviewToPIPAnimation;
- (id)localScreenAttributesForVideoAttributes:(id)a0;
- (BOOL)startScreenShareCapture:(id)a0;
- (void)unregisterVideoSink:(id)a0 withCaptureSource:(int)a1;
- (void)cleanupStreamInputs;
- (void)applyPressureLevelChanges;
- (void)updateImageQueueFrameRate:(int)a0;
- (BOOL)setupScreenCaptureForSource:(int)a0 config:(id)a1;
- (id)localVideoAttributes;
- (void)dealloc;
- (void)registerCaptureConfig:(id)a0 forSource:(int)a1;
- (void)endPIPToPreviewAnimation;
- (int)getCaptureFrameRateForSource:(int)a0;
- (void)deregisterCaptureClientForScreenShare:(id)a0;
- (BOOL)setupStreamInputs;
- (void)processFrameSizeChange:(struct __CVBuffer { } *)a0 cameraStatusBits:(unsigned char)a1;
- (void)registerCaptureClientForScreenShare:(id)a0;
- (oneway void)release;
- (void)dispatchedSetCaptureWidth:(int)a0 height:(int)a1 rate:(int)a2;
- (void)reconnectClientLayerFront:(BOOL)a0;
- (void)changeCameraToPendingSettingsWithReset:(BOOL)a0;
- (BOOL)canStopPreview;
- (BOOL)setupStreamInputCaptureSources;
- (int)getFrameRateForThermalLevel:(int)a0;
- (BOOL)isClientRegisteredForVideoFrames:(id)a0 fromSource:(int)a1;
- (BOOL)shouldSendVideoAttributeCallback:(id)a0;
- (void)updatePreviewState;
- (void)previewVideoWidth:(int *)a0 height:(int *)a1 frameRate:(int *)a2;
- (void)sendSnapshotFromFrame:(struct __CVBuffer { } *)a0;
- (void)notifyFrameRateBeingThrottledForClients:(id)a0 newFrameRate:(int)a1 thermalLevelDidChange:(BOOL)a2 powerLevelDidChange:(BOOL)a3;
- (BOOL)supportsPortraitResolution;
- (void)setViewPointCorrectionEnabled:(BOOL)a0;
- (void)didReceiveFirstPreviewFrame;

@end

@class NSDictionary, VCAudioTransmitter, VCRedundancyControllerVideo, NSMutableArray, VideoAttributes, VCBitrateArbiter, VCImageAttributeRules, VCControlChannel, VCConnectionManager, GKRingBuffer, AVTelephonyInterface, NSData, VCSwitchManager, VCWCMClient, TimingCollection, AVCRateController, VCControlChannelMultiWay, VCTransportSession, NSNumber, VCVideoRule, VCCaptionsReceiver, VCMediaNegotiator, NSArray, VCDisplayLink, NSMutableDictionary, NSString, VCCapabilities, NSObject, VCAudioPayload, VCRateControlMediaController, VCCallInfo, WRMClient, VCSessionMessaging, VCSecureDataChannel, VCCallLinkCongestionDetector;
@protocol VCConnectionProtocol, VCCallSessionDelegate, VideoConferenceChannelQualityDelegate, OS_dispatch_source, OS_dispatch_queue;

@interface VCCallSession : NSObject <VCSecureDataChannelDelegate, AVTelephonyInterfaceDelegate, VCCaptionsReceiverDelegate, VCTransportSessionLegacyDelegate, AVCRateControllerDelegate, VCAudioIOSink, VCRedundancyControllerDelegate> {
    VCCallInfo *remoteCallInfo;
    long long packetMultiplexMode;
    struct tagHANDLE { int x0; } *rtpVideo;
    void *videoMediaControlInfoGenerator;
    void *audioMediaControlInfoGenerator;
    id<VCConnectionProtocol> toBeChangedPrimaryConnection;
    VCMediaNegotiator *_mediaNegotiator;
    VCSwitchManager *_switchManager;
    NSObject<OS_dispatch_queue> *connectionChangeQueue;
    NSMutableArray *negotiatedAudioPayloads;
    VCAudioPayload *currentAudioPayload;
    VCAudioPayload *currentDTXPayload;
    int _currentRedPayloadType;
    VCVideoRule *_currentEncodeRule;
    BOOL _isRedEnabled;
    long long screenPayload;
    struct tagHANDLE { int x0; } *hSIP;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } mutex;
    int iRemoteRTPPort;
    int iRemoteRTCPPort;
    VCCapabilities *caps;
    AVCRateController *_rateController;
    VCRateControlMediaController *_mediaController;
    BOOL useSBR;
    NSDictionary *_allPayloadsLocalFeaturesString;
    NSMutableDictionary *featureListStringDict;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } pauseLock;
    NSObject<OS_dispatch_queue> *videoQueue;
    NSObject<OS_dispatch_queue> *videoAsyncQueue;
    NSObject<OS_dispatch_queue> *audioQueue;
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;
    BOOL allowAudioRecording;
    int aacBlockSize;
    BOOL _isUseCaseWatchContinuity;
    int carrierBitrateCap;
    struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } format; unsigned int samplesPerFrame; } _vpioFormat;
    BOOL allowAudioSwitching;
    BOOL shouldUpdateLastReceivedPacketTimestamp;
    double lastReceivedPacketTimestamp;
    unsigned int _mediaStallCount;
    double _mediaStallTotalTime;
    double _maxMediaStallTime;
    double _lastMediaStallStartTime;
    BOOL _isRemoteMediaStalledShort;
    int packetsSinceStall;
    int packetsSinceShortMediaStall;
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
    TimingCollection *perfTimers;
    double timeLastCheckedNetworkConditions;
    double packetLossRateAccum;
    double packetLossRateCount;
    double timeLastPLR5Secs;
    double timeLastKnowGoodNetworkPLR;
    double timeLastKnowGoodNetworkRTT;
    int abnormalOWRDCount;
    int sampleLogCount;
    double timeSinceLastReportedNoPackets;
    double noRemotePacketsTimeout;
    double _remoteMediaStallTimeout;
    BOOL previousNoRemoteInProgress;
    BOOL didAttemptSIPInvite;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } qualityDelegateLock;
    NSObject<OS_dispatch_queue> *qualityQueue;
    struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } srtpLock;
    BOOL didPrepareSRTP;
    BOOL useAFRC;
    BOOL useVCRC;
    VCCallLinkCongestionDetector *congestionDetector;
    BOOL isGKVoiceChat;
    BOOL bBWEstOperatingModeInitialized;
    BOOL bBWEstNewBWEstModeEnabled;
    BOOL bBWEstFakeLargeFrameModeEnabled;
    BOOL bBWEstActiveProbingSenderLog;
    struct CGSize { double width; double height; } remoteScreenPortraitAspectRatio;
    struct CGSize { double width; double height; } remoteScreenLandscapeAspectRatio;
    struct CGSize { double width; double height; } remoteExpectedPortraitAspectRatio;
    struct CGSize { double width; double height; } remoteExpectedLandscapeAspectRatio;
    BOOL isInitiator;
    BOOL sentClientSuccessfulDidStart;
    double videoThrottlingTimeout;
    unsigned int awdCallNonce;
    VCSessionMessaging *messaging;
    VCControlChannel *controlChannel;
    VCControlChannelMultiWay *secureControlChannel;
    BOOL isCurrentNetworkBad;
    unsigned int callSessionBitrate;
    NSObject<OS_dispatch_queue> *cellTechQueue;
    NSObject<OS_dispatch_source> *cellTechChangeSource;
    TimingCollection *cameraTimers;
    VCBitrateArbiter *callSessionBitrateArbiter;
    NSObject<OS_dispatch_source> *connectionTimeoutSource;
    NSObject<OS_dispatch_source> *firstRemoteFrameTimemoutSource;
    long long initialSentBytes;
    long long initialReceivedBytes;
    VCAudioTransmitter *audioTransmitter;
    VCCaptionsReceiver *_captionsReceiver;
    struct tagHANDLE { int x0; } *hVideoReceiver;
    struct tagHANDLE { int x0; } *hVideoTransmitter;
    VCDisplayLink *_displayLink;
    VCRedundancyControllerVideo *_videoRedundancyController;
    BOOL remoteSupportsVisibleRect;
    BOOL remoteSupportsExpectedAspectRatio;
    BOOL canLocalResizePIP;
    BOOL canRemoteResizePIP;
    BOOL receivedFirstRemoteFrame;
    int fecMode;
    NSObject<OS_dispatch_source> *sessionHealthMonitor;
    double lastVideoQualityNotificationUpdate;
    double lastVideoCallAlarmTime;
    VCWCMClient *vcWCMClient;
    WRMClient *vcWRMClient;
    BOOL iRATSuggestionEnabled;
    struct OpaqueVTPixelTransferSession { } *hdTransferSession;
    struct __CVPixelBufferPool { } *hdBufferPool;
    struct CGSize { double width; double height; } expectedDecodeSize;
    struct opaqueRTCReporting { } *reportingAgent;
    int reportingModuleID;
    BOOL didReportNoRemotePackets;
    BOOL didReportLongConnectionTime;
    BOOL didReportAudioStall;
    BOOL enableRateControlDump;
    unsigned int _targetBitrate;
    unsigned int _rateChangeCounter;
    unsigned int awdTime;
    struct SKEStateOpaque { } *skeState;
    struct __CFData { } *secretKey;
    VCSecureDataChannel *secureDataChannel;
    AVTelephonyInterface *telephonyInterface;
    unsigned int dwRTT_ice;
    NSObject<OS_dispatch_queue> *timestampQueue;
    BOOL shouldSendBlackFrame;
    unsigned int _peerProtocolVersion;
    struct tagWRMMetricsInfo { BOOL x0; struct tagHANDLE *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; void /* function */ *x18; struct { void *x0; void /* function */ *x1; void /* function */ *x2; } x19; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned long long x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; } *wrmInfo;
    BOOL _shouldReportWRMMetrics;
    BOOL _inviteDataRequested;
    unsigned int _transportType;
    VCTransportSession *_transportSession;
    BOOL _cleanupDone;
    BOOL _isLocalCellular_LowestConnectionQuality;
    BOOL _isRemoteCellular_LowestConnectionQuality;
    BOOL _isConnectedOnIPv6_LowestConnectionQuality;
    void *_callLogFile;
    BOOL _isWRMNotificationPending;
    struct { int applicationType; int linkTypeSuggestion; unsigned long long linkTypeChangeReasonCode; char linkTypeChangeReasonString[128]; unsigned long long linkBandwidthMin; unsigned long long linkBandwidthMax; } _savedWRMNotification;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property long long connectionChangeState;
@property (retain) VCConnectionManager *connectionManager;
@property (readonly) VCCallInfo *localCallInfo;
@property (nonatomic) double packetLossRate5Secs;
@property double lastDecodedFrameTime;
@property (copy, nonatomic) NSString *peerCN;
@property (readonly) struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x0; struct tagVCAudioReceiverStream { struct tagHANDLE *x0; unsigned short x1; BOOL x2; BOOL x3; struct tagVCCryptor *x4; int x5; BOOL x6; struct tagVCAudioReceiver *x7; void *x8; void *x9; } x1[4]; void *x2; unsigned int x3; int x4; int x5; int x6; BOOL x7; struct opaqueRTCReporting *x8; int x9; BOOL x10; struct __CFString *x11; struct __CFString *x12; unsigned short x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; int x18; void *x19; void /* function */ *x20; void /* function */ *x21; void /* function */ *x22; struct tagVCJBTargetEstimatorSynchronizer *x23; void *x24; void *x25; unsigned int x26; } x0; void *x1; struct opaqueVCJitterBuffer *x2; BOOL x3; struct tagVCAudioFrameFormat { struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x0; unsigned int x1; } x4; double x5; struct { long long x0; int x1; unsigned int x2; long long x3; } x6; struct tagVCRealTimeThread *x7; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting *x0; int x1; struct tagHANDLE *x2; } x8; BOOL x9; BOOL x10; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x11; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x12; struct tagVCAudioDecoderList { struct tagDecoderSettings *x0; unsigned int x1; } x13; unsigned int x14; struct tagVCAudioReceiverStatistics { _Atomic unsigned int x0; } x15; struct tagWRMMetricsInfo *x16; void /* function */ *x17; struct tagVCAudioReceiverCallbackContext { void *x0; void /* function */ *x1; void /* function */ *x2; } x18; void /* function */ *x19; struct tagVCAudioReceiverCallbackContext { void *x0; void /* function */ *x1; void /* function */ *x2; } x20; unsigned int x21; struct _RTCPPacketList { union tagNTP { unsigned long long x0; struct { unsigned int x0; unsigned int x1; } x1; } x0; unsigned char x1; struct tagRTCPPACKET *x2[10]; struct OpaqueCMBlockBuffer *x3; char *x4; unsigned long long x5; unsigned int x6; unsigned char x7[1472]; unsigned short x8[12]; unsigned char x9; struct { struct _RTCPPacketList *x0; } x10; } x22[2]; double x23; unsigned int x24; struct tagPacketHistoryInfo { unsigned int x0; unsigned short x1; unsigned int x2; BOOL x3; BOOL x4; } x25[300]; unsigned short x26; unsigned short x27; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x28; struct tagVCAudioReceiverStream *x29; unsigned short x30; unsigned short x31; double x32; BOOL x33; unsigned short x34; unsigned short x35; BOOL x36; unsigned short x37; unsigned short x38; unsigned short x39; unsigned int x40; BOOL x41; BOOL x42; unsigned long long x43; BOOL x44; void *x45; void /* function */ *x46; void /* function */ *x47; void /* function */ *x48; struct tagVCJBTargetEstimatorSynchronizer *x49; struct tagVCJitterBufferWRMReportingMetrics { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned long long x4; unsigned long long x5; unsigned int x6; unsigned int x7; } x50; void *x51; BOOL x52; double x53; int x54; double x55; double x56; unsigned int x57; double x58; } *audioReceiver;
@property (readonly) BOOL isCurrentPayloadTypeValid;
@property (readonly, nonatomic) BOOL isCaller;
@property (copy, nonatomic) NSString *sessionID;
@property (nonatomic) BOOL isStarted;
@property (retain, nonatomic) VCImageAttributeRules *imageAttributeRules;
@property (nonatomic) BOOL shouldSendAudio;
@property (nonatomic) double roundTripTime;
@property (nonatomic) BOOL useRateControl;
@property (nonatomic) BOOL isRTCPFBEnabled;
@property (nonatomic) double packetLossRate;
@property (nonatomic) float packetLateAndMissingRatio;
@property (readonly) double networkQuality;
@property (nonatomic) double networkConditionsTimeoutInSeconds;
@property (nonatomic) int signalStrengthBars;
@property (nonatomic) int signalStrengthDisplayBars;
@property (nonatomic) int signalStrengthMaxDisplayBars;
@property (readonly) unsigned int lastSentAudioSampleTime;
@property (nonatomic) int natType;
@property (nonatomic) BOOL requiresWifi;
@property (nonatomic) BOOL useCompressedConnectionData;
@property (retain) NSObject<VCCallSessionDelegate> *delegate;
@property struct tagHANDLE { int x0; } *rtpHandle;
@property (readonly) int numBufferBytesAvailable;
@property unsigned short maxPacketLength;
@property long long state;
@property long long sipState;
@property BOOL didSend200OK;
@property long long videoPayload;
@property long long sampleRate;
@property (readonly) BOOL isAudioRunning;
@property (readonly) BOOL isVideoRunning;
@property (readonly) BOOL videoIsPaused;
@property (readonly) BOOL audioIsPaused;
@property BOOL isGKVoiceChat;
@property BOOL isWaitingForICEResult;
@property BOOL receivedSIPInvite;
@property struct tagHANDLE { int x0; } *hMediaQueue;
@property struct tagHANDLE { int x0; } *hAFRC;
@property (retain, nonatomic) GKRingBuffer *ringBuf;
@property unsigned int lastReceived;
@property (readonly) int bundledPackets;
@property int packetsPerBundle;
@property int preferredAudioCodec;
@property BOOL useControlByte;
@property BOOL useUEP;
@property unsigned char inputMeter;
@property int bandwidthUpstream;
@property int bandwidthDownstream;
@property (retain, nonatomic) NSArray *mutedPeers;
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
@property BOOL shouldTimeoutPackets;
@property (retain) NSData *srtpKeyBytes;
@property (retain, nonatomic) VideoAttributes *remoteVideoAttributes;
@property unsigned int remoteFrameWidth;
@property unsigned int remoteFrameHeight;
@property (nonatomic) int operatingMode;
@property (readonly) BOOL isSKEOptimizationEnabled;
@property (readonly) BOOL isRemoteMediaStalled;
@property (retain) VCCapabilities *capabilities;
@property int deviceRole;
@property (copy, nonatomic) NSString *peerReportingID;
@property (retain, nonatomic) NSNumber *basebandCodecSampleRate;
@property (copy, nonatomic) NSString *basebandCodecType;
@property (readonly, nonatomic) int audioTierNetworkBitrate;
@property (readonly, nonatomic) int audioTierAudioCodecBitrate;
@property (readonly, nonatomic) int audioTierPacketsPerBundle;
@property (readonly, nonatomic) int audioTierRedNumPayloads;
@property (readonly, nonatomic) int audioTierPayload;
@property (readonly, nonatomic) NSDictionary *dtxMetrics;
@property (readonly, nonatomic) struct opaqueRTCReporting { } *reportingAgent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)keyPathsForValuesAffectingNetworkQuality;
+ (int)setRxPayloadList:(struct tagHANDLE { int x0; } *)a0 withPayloadTypes:(id)a1 isRedEnabled:(BOOL)a2;
+ (int)setRxPayloadList:(struct tagHANDLE { int x0; } *)a0 withPayloadTypes:(id)a1;
+ (id)getDecodePayloadTypes:(int)a0 secondaryPayloadTypes:(id)a1;
+ (void)stopSecureControlChannel:(id)a0;

- (unsigned int)callID;
- (void)resetState;
- (void)unlock;
- (BOOL)cancel:(id)a0;
- (void)lock;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { } *)a0;
- (id)localParticipantID;
- (id)remoteParticipantID;
- (id)init;
- (void)dealloc;
- (void)startAudioIOWithCompletionHandler:(id /* block */)a0;
- (id)callMetadata;
- (unsigned char)mediaControlInfoFECFeedbackVersion;
- (int)learntBitrateForSegment:(id)a0 defaultValue:(int)a1;
- (void)rateController:(id)a0 targetBitrateDidChange:(unsigned int)a1 rateChangeCounter:(unsigned int)a2;
- (void)sendARPLData:(id)a0 toCallID:(unsigned int)a1;
- (void)processRemoteIPChange:(id)a0 callID:(unsigned int)a1;
- (void)triggerInterfaceChange;
- (void)redundancyController:(id)a0 redundancyPercentageDidChange:(unsigned int)a1;
- (void)redundancyController:(id)a0 redundancyVectorDidChange:(struct { unsigned short x0; struct { unsigned char x0; unsigned char x1; } x1[32]; })a1;
- (void)gatherRealtimeStats:(struct __CFDictionary { } *)a0;
- (id)addAudioPayload:(int)a0;
- (void)startAudioWithCompletionHandler:(id /* block */)a0;
- (void)stopAudioWithCompletionHandler:(id /* block */)a0;
- (unsigned int)audioRTPID;
- (unsigned int)videoRTPID;
- (void)mediaController:(void *)a0 mediaSuggestionDidChange:(struct VCRateControlMediaSuggestion { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; })a1;
- (void)redundancyController:(id)a0 redundancyIntervalDidChange:(double)a1;
- (void)handleCellularMTUChanged:(unsigned short)a0;
- (void)cleanUpDisplayLink;
- (void)setWRMNotification:(struct { int x0; int x1; unsigned long long x2; char x3[128]; unsigned long long x4; unsigned long long x5; } *)a0;
- (void)setPreWarmState:(BOOL)a0;
- (void)requestWRMNotification;
- (void)setupWCMClient;
- (void)cleanupWRMClient;
- (void)cleanupWCMClient;
- (void)wcmSetCallConfig:(unsigned int)a0 interferenceLevel:(unsigned int)a1;
- (void)wcmGetCallConfig:(unsigned int *)a0 targetBitrate:(unsigned int *)a1;
- (void)setWRMMetricConfig:(struct { unsigned long long x0; } *)a0;
- (void)setWRMCoexMetrics:(id)a0;
- (void)reportImmediateWRMMetric:(int)a0 value:(unsigned long long)a1;
- (void)reportWRMMetrics:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; unsigned long long x23; unsigned long long x24; unsigned long long x25; unsigned long long x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; unsigned long long x31; unsigned long long x32; unsigned long long x33; unsigned long long x34; unsigned long long x35; unsigned long long x36; unsigned long long x37; } *)a0;
- (struct CGSize { double x0; double x1; })computeVisibleAspectRatioWithRemoteScreenAspectRatio:(struct CGSize { double x0; double x1; })a0 remoteExpectedAspectRatio:(struct CGSize { double x0; double x1; })a1 encodeWidth:(int)a2 encodeHeight:(int)a3;
- (id)initWithDeviceRole:(int)a0 transportType:(unsigned int)a1 isGKVoiceChat:(BOOL)a2 reportingHierarchyToken:(id)a3;
- (int)mapPacketMultiplexModeToSIPMode:(long long)a0;
- (double)sessionReceivingBitrate;
- (double)sessionTransmittingBitrate;
- (BOOL)evaluateEnableRRx:(int *)a0;
- (void)configureRateController;
- (void)resetVideoRulesForInterface:(int)a0 videoReportingDictionary:(id)a1;
- (BOOL)stopVideoSend:(BOOL)a0 error:(id *)a1;
- (BOOL)startVideoSend:(BOOL)a0 error:(id *)a1;
- (BOOL)isCallOngoing;
- (void)reportHandoverResultsWithDictionary:(id)a0 localBitrateCap:(int)a1 remoteBitrateCap:(int)a2;
- (unsigned int)currentAudioCap;
- (void)updateMaxPktLength;
- (id)newRemoteScreenAttributesForOrientation:(int)a0;
- (int)Conference_SetBWEstMode:(BOOL)a0 bFakeLargeFrameMode:(BOOL)a1;
- (BOOL)chooseVideoPayload:(id)a0 operatingMode:(int)a1 isLocalOnCellular:(BOOL)a2 isRemoteOnCellular:(BOOL)a3;
- (BOOL)disconnect:(id)a0 didRemoteCancel:(BOOL)a1;
- (BOOL)getVideoSettings:(int)a0 forInterface:(int)a1 payload:(int)a2 width:(int *)a3 height:(int *)a4 framerate:(int *)a5 bitRate:(int *)a6;
- (BOOL)chooseVideoPayloadForInterface:(int)a0;
- (id)getVideoRuleForVideoMode:(unsigned long long)a0 interface:(int)a1 sessionBitrate:(int *)a2;
- (id)getFeatureListStringForPayload:(int)a0;
- (int)applyFeatureListStringForPayload:(int)a0;
- (void)setCurrentEncodeRule:(id)a0;
- (void)primaryConnectionDidChangeTo:(id)a0 oldConnection:(id)a1;
- (void)updateCachedConnectionState;
- (void)notifyDelegateActiveConnectionDidChange;
- (int)getAudioTxBitrate;
- (void)updateRemoteMediaStallStateReporting:(double)a0;
- (void)disconnectWithNoRemotePackets:(long long)a0;
- (void)checkAbnormalOWRDAndResetLagReference;
- (void)logDetailedNetworkInformation;
- (void)updateNetworkCheckHint:(double)a0;
- (void)updateRemoteMediaStallState:(double)a0;
- (void)updateLastReceivedPacketWithTimestamp:(double)a0 packetType:(int)a1;
- (void)sendTimings;
- (BOOL)isSIPEnabled;
- (BOOL)isSecureMessagingRequired;
- (void)setupConnectionTimeoutTimerWithErrorCode:(int)a0 detailedCode:(int)a1 description:(id)a2 reason:(id)a3;
- (void)cancelConnectionTimeoutTimer;
- (void)cancelFirstRemoteFrameTimer;
- (void)updateVCRateControlWRMMetrics:(struct tagWRMMetricsInfo { BOOL x0; struct tagHANDLE *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned long long x14; unsigned long long x15; unsigned long long x16; int x17; void /* function */ *x18; struct { void *x0; void /* function */ *x1; void /* function */ *x2; } x19; struct _opaque_pthread_mutex_t { long long x0; char x1[56]; } x20; unsigned int x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned long long x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; } *)a0;
- (void)setupPeerInfo:(id)a0 usingInviteData:(id)a1 isCaller:(BOOL)a2 capabilities:(id)a3;
- (void)applyNegotiatedFaceTimeSettings;
- (void)setupABTesting;
- (unsigned int)vcrcServerBagProfileNumber;
- (BOOL)setupIDSConnectionForCallID:(unsigned int)a0 destination:(id)a1 socket:(int)a2 error:(id *)a3;
- (void)handleReceivedPiggybackBlobIDS:(id)a0;
- (BOOL)configureLegacyTransportWithInviteInfo:(id)a0 error:(id *)a1;
- (void)handleReceivedPiggybackBlobLegacy:(id)a0;
- (void)handleNewConnectionSetup:(id)a0 isInitialConnection:(BOOL)a1;
- (void)handlePrimaryConnectionChanged:(id)a0 oldPrimaryConnection:(id)a1;
- (void)handleDuplicationEnabled:(BOOL)a0 activeConnection:(id)a1;
- (void)handleCellTechChange:(int)a0;
- (int)setSKEBlobOnTransportSession;
- (void)handleKeyExchangeCompleted;
- (BOOL)disconnectInternal:(BOOL)a0 disconnectError:(id)a1 didRemoteCancel:(BOOL)a2;
- (id)newMediaNegotiatorAudioConfigurationWithAllowAudioSwitching:(BOOL)a0 useSBR:(BOOL)a1 aacBlockSize:(unsigned int)a2;
- (unsigned char)defaultMediaControlInfoFECFeedbackVersion;
- (void)initWithRelevantStorebagEntries;
- (void)reportOperatingMode;
- (id)newSKEBlobWithRemoteSKEBlob:(id)a0;
- (BOOL)isLowBitrateCodecPreferred:(id)a0;
- (id)newMediaBlobWithRemoteMediaBlob:(id)a0 localCallID:(unsigned int)a1 isLowBitrateCodecPreferred:(BOOL)a2;
- (void)addLocalCallInfoToInviteDictionary:(id)a0;
- (void)stopPausedHeartbeat;
- (void)startPausedHeartbeat;
- (BOOL)setPauseAudio:(BOOL)a0 force:(BOOL)a1 error:(id *)a2;
- (BOOL)startVideo:(BOOL)a0 error:(id *)a1;
- (BOOL)stopVideo:(BOOL)a0 error:(id *)a1;
- (BOOL)setPauseVideo:(BOOL)a0 force:(BOOL)a1 error:(id *)a2;
- (void)logPerfTimings;
- (void)sendData:(id)a0 messageType:(unsigned int)a1 encrypted:(BOOL)a2;
- (void)getFrontCaptureTime:(float *)a0 backCaptureTime:(float *)a1;
- (unsigned int)primaryConnectionType;
- (void)sendCallingModeMessage;
- (void)enableAudio:(BOOL)a0;
- (void)updateDeviceRole:(int)a0;
- (void)reportingMomentsWithRequest:(id)a0;
- (void)schedulePrimaryConnectionChange:(id)a0 oldConnection:(id)a1;
- (void)handleFirstConnectionSetup:(id)a0;
- (BOOL)startMediaWithPreNegotiatedSettings:(id *)a0;
- (void)sipConnectThreadProc:(id)a0;
- (void)setupCalleeSIPStartTimeout:(float)a0;
- (void)logConnectionSuccess;
- (void)setupSecureDataChannel;
- (void)startAWDStats;
- (void)updateVideoQualityStatusWithTime:(double)a0 isRemote:(BOOL)a1;
- (BOOL)isBetterForSIPInviteWithSourceDestinationInfo:(struct tagVCSourceDestinationInfo { int x0; union { struct { struct tagIPPORT { int x0; char x1[16]; union { unsigned int x0; unsigned char x1[16]; } x2; unsigned short x3; } x0; struct tagIPPORT { int x0; char x1[16]; union { unsigned int x0; unsigned char x1[16]; } x2; unsigned short x3; } x1; struct { BOOL x0; unsigned short x1; } x2; } x0; struct { int x0; int x1; struct tagIPPORT { int x0; char x1[16]; union { unsigned int x0; unsigned char x1[16]; } x2; unsigned short x3; } x2; int x3; } x1; struct { unsigned int x0; struct { char x0; unsigned short x1; unsigned char x2; unsigned short x3; unsigned char x4; } x1; } x2; struct { id x0; } x3; } x1; struct tagVCSourceDestinationInfo *x2; void *x3; } *)a0 thanSession:(id)a1;
- (void)thermalLevelDidChange:(int)a0;
- (void)remoteCellTechStateUpdate:(int)a0 maxRemoteBitrate:(unsigned int)a1;
- (void)handlePendingPrimaryConnectionChange;
- (void)updateLastReceivedAudioTime;
- (void)updateLastReceivedPacket:(BOOL)a0 packetType:(int)a1;
- (BOOL)isFECGeneratorEnabled;
- (id)activeControlChannel;
- (void)timeoutUnfinishedConnection;
- (void)setUpFirstRemoteFrameTimer;
- (BOOL)isLocalOrRemoteOnCellular;
- (BOOL)startConnectionWithParticipantID:(id)a0 callID:(unsigned int)a1 usingInviteData:(id)a2 isCaller:(BOOL)a3 capabilities:(id)a4 idsSocket:(int)a5 destination:(id)a6 error:(id *)a7;
- (void)setupWRMClient;
- (void)sendWRMStatusUpdate:(const struct { int x0; int x1; int x2; unsigned int x3; } *)a0;
- (id)inviteDataForParticipantID:(id)a0 callID:(unsigned int *)a1 remoteInviteData:(id)a2 nonCellularCandidateTimeout:(double)a3 error:(id *)a4;
- (void)setRemoteCallInfoFromInviteDictionary:(id)a0;
- (void)setSuspendAudio;
- (void)setResumeAudio;
- (BOOL)setPauseAudio:(BOOL)a0 error:(id *)a1;
- (void)setSuspendVideo;
- (void)setResumeVideo;
- (BOOL)setPauseVideo:(BOOL)a0 error:(id *)a1;
- (BOOL)stillWantsToRelay;
- (void)processRelayRequestResponseDict:(id)a0 didOriginateRequest:(BOOL)a1;
- (void)processRelayUpdateDict:(id)a0 didOriginateRequest:(BOOL)a1;
- (void)processCancelRelayRequest:(id)a0 didOriginateRequest:(BOOL)a1;
- (void)rcvdFirstRemoteFrame;
- (void)localCameraSwitchedFrom:(int)a0 to:(int)a1;
- (int)negotiatedReceivingFramerate;
- (BOOL)pullAudioSamples:(struct opaqueVCAudioBufferList { } *)a0 rtpTimestamp:(unsigned int *)a1 lastReceivedAudioTime:(double *)a2 padding:(char *)a3 paddingLength:(char *)a4 silence:(int *)a5;
- (void)setSessionConferenceState:(unsigned int)a0 callID:(unsigned int)a1;
- (void)setSessionConferenceVisualRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 callID:(unsigned int)a1;
- (void)setPeerProtocolVersion:(unsigned int)a0;
- (void)messageVCMomentsRequest:(id)a0;
- (void)reportSymptom:(unsigned int)a0;
- (void)vcSecureDataChannel:(id)a0 messageType:(unsigned int)a1 receivedData:(id)a2;
- (void)sendBasebandCodecMessage;
- (void)avTelephonyInterface:(id)a0 vocoderInfoChangedToType:(id)a1 sampleRate:(id)a2;
- (void)didReceiveCaptions:(id)a0;
- (int)handleIncomingWithCallID:(unsigned int)a0 msgIn:(const char *)a1 msgOut:(char *)a2 optional:(void *)a3 confIndex:(int *)a4 error:(id *)a5;
- (int)setupEncryptionWithKey:(const struct __CFData **)a0 confIndex:(int *)a1;
- (BOOL)startMediaQueue:(id *)a0;
- (void)processSIPMessage:(char *)a0 msgOut:(char *)a1 optional:(void *)a2 confIndex:(int *)a3;
- (BOOL)shouldNotifyDelegateDidStartBeforeAudioSetup;
- (void)notifyDelegateSessionStarted;
- (void)enableSessionHealthMonitor;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)a0 withReason:(const char *)a1;
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)a0;
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)a0;
- (int)flushBasebandQueueWithPayloads:(id)a0 flushCount:(unsigned int *)a1;
- (int)sipCallback:(int)a0 callID:(unsigned int)a1 msgIn:(const char *)a2 msgOut:(char *)a3 optional:(void *)a4 confIndex:(int *)a5;
- (struct __SecIdentity { } *)retrieveIdentity;
- (void)setupDTLSDefaults;
- (void)setLocalIdentityForKeyExchange;
- (void)setupMessaging;
- (void)logIdentity:(struct __SecIdentity { } *)a0;
- (long long)calculateSIPEndAction:(BOOL)a0 currentState:(long long)a1 error:(id)a2;
- (void)doSipEndAction:(int)a0 callID:(unsigned int)a1 error:(id)a2;
- (void)disableSessionHealthMonitor;
- (void)disconnectWithNoRemotePackets:(long long)a0 timeoutUsed:(double)a1;
- (BOOL)treatAsCellular;
- (void)negotiateMediaMaxBandwidth;
- (BOOL)setupAudioCodecWithPayload:(int)a0;
- (id)negotiatedAudioPayloadTypes;
- (BOOL)setRTPPayloads:(id)a0 withError:(id *)a1;
- (BOOL)createRTPHandles:(id *)a0;
- (BOOL)prepareSRTPWithError:(id *)a0;
- (BOOL)createMediaQueueHandle:(id *)a0;
- (void)applyNegotiatedSettings;
- (BOOL)applyNegotiatedAudioSettings:(id *)a0;
- (BOOL)applyNegotiatedVideoSettings:(id *)a0;
- (void)applyNegotiatedCaptionsSettings;
- (void)applyNegotiatedMomentsSettings;
- (BOOL)setMediaQueueStreamSettings;
- (BOOL)startRateControl:(id *)a0;
- (BOOL)createAudioTransmitter:(id *)a0;
- (BOOL)negotiatePayloads:(id *)a0 withError:(id *)a1;
- (BOOL)negotiateMaxBandwidth:(int *)a0;
- (int)getAllCompatibleVideoPayloads:(int **)a0 forMediaType:(int)a1;
- (id)getCompatibleLocalFeatureListForPayloads:(int *)a0 count:(int)a1;
- (BOOL)createSDP:(int *)a0 audioPayloadCount:(int)a1 secondaryPayloadTypes:(int *)a2 secondaryPayloadCount:(int)a3 videoPayloadTypes:(int *)a4 videoPayloadCount:(int)a5 localFeatureList:(id)a6 answerBandwidth:(int)a7 maxBandwidth:(int)a8 imageSizesSend:(struct imageTag **)a9 imageSendCount:(int *)a10 imageSizesRecv:(struct imageTag **)a11 imageRecvCount:(int *)a12 sdp:(char *)a13 numSDPBytes:(int *)a14 error:(id *)a15;
- (BOOL)stopMediaQueue:(id *)a0;
- (void)releaseRTPHandles;
- (void)getAllPayloadsForAudio:(int **)a0 count:(int *)a1 secondaryPayloads:(int **)a2 secondaryCount:(int *)a3;
- (void)getAllPayloadsForVideo:(int **)a0 count:(int *)a1;
- (id)allPayloadsLocalFeaturesString;
- (BOOL)canSendSIPInviteWithError:(id *)a0;
- (id)createInviteSDPWithError:(id *)a0;
- (BOOL)establishSIPDialogWithSDP:(id)a0 error:(id *)a1;
- (int)fillMediaControlInfo:(void *)a0;
- (int)processMediaControlInfo:(void *)a0 isAudio:(BOOL)a1;
- (int)mapPacketMultiplexModeToRTPMode:(long long)a0;
- (id)pickFeaturesStringForPayload:(int)a0 featureListDict:(id)a1 remote:(BOOL)a2;
- (BOOL)setMatchedFeaturesString:(char *)a0 localFeaturesString:(id)a1 remoteFeaturesString:(id)a2;
- (BOOL)choosePayload:(id)a0;
- (BOOL)chooseSecondaryPayloads:(id)a0;
- (BOOL)chooseDTXPayloads:(id)a0;
- (void)negotiateFeaturesString:(id)a0 forPayload:(int)a1;
- (BOOL)doesVideoPayloadMatchRemoteImageAttributeRules:(id)a0;
- (BOOL)canNegotiateVideoPayload:(int)a0 supportedPayloads:(id)a1 isLocalOnCellular:(BOOL)a2 isRemoteOnCellular:(BOOL)a3;
- (BOOL)isValidVideoPayloadOverride:(id)a0;
- (id)newConfigForPayloadType:(int)a0;
- (BOOL)sendSIPInviteWithError:(id *)a0;
- (BOOL)setupCallerRTPChannelWithError:(id *)a0;
- (BOOL)setupAudioCookies;
- (void)stopAudioIO:(id /* block */)a0;
- (int)interfaceForCurrentCall;
- (void)adjustBitrateForConnectionType;
- (BOOL)initializeVideoTransmitter:(id *)a0 videoRules:(struct VCCSVideoTransmitterVideoRules_t { id x0; id x1; id x2; } *)a1 unpausing:(BOOL)a2 reportingAgent:(struct opaqueRTCReporting { } *)a3 fecHeaderV1Enabled:(BOOL)a4 isFECGeneratorEnabled:(BOOL)a5;
- (BOOL)initializeVideoReceiver:(id *)a0 reportingAgent:(struct opaqueRTCReporting { } *)a1 fecHeaderV1Enabled:(BOOL)a2 videoJBEnabled:(BOOL)a3;
- (BOOL)startVideoReceive:(id *)a0;
- (void)cleanUpVideoTransmitter;
- (void)cleanUpVideoReceiver;
- (BOOL)stopVideoReceive:(id *)a0 isPausing:(BOOL)a1;
- (id)vcrcServerBag;
- (BOOL)startAFRC:(id *)a0;
- (BOOL)startVCRC:(id *)a0;
- (void)setupAACELDPayload:(int)a0;
- (unsigned int)codecBitmapForPayloads:(id)a0;
- (BOOL)sipConnectWithError:(id *)a0;
- (unsigned int)maxBitrateForConnectionType;
- (double)audioReceivingBitrateKbps;
- (double)audioTransmittingBitrateKbps;
- (double)sessionReceivingFramerate;
- (double)sessionTransmittingFramerate;
- (void)reportDashboardEndResult:(BOOL)a0;
- (BOOL)stopRateControl:(id *)a0;
- (void)cleanupMedia;
- (void)notifyDelegateAndEndCall:(long long)a0 didRemoteCancel:(BOOL)a1 error:(id)a2;
- (void)remotePauseDidChangeToState:(BOOL)a0 forVideo:(BOOL)a1;
- (void)addScreenConfigToSDP:(id)a0;
- (void)getAllPayloadsForScreen:(int **)a0 count:(int *)a1;
- (void)doSipEndProc:(id)a0;
- (const char *)matchedFeaturesStringForPayload:(int)a0;
- (void)setupBitrateNegotiation;
- (void)shouldSendBlackFrame:(BOOL)a0;
- (void)sendSymptomToRemote:(id)a0 groupID:(id)a1;
- (void)setDuplicationFlag:(BOOL)a0 withPreferredLocalLinkTypeForDuplication:(int)a1 notifyPeer:(BOOL)a2;
- (void)setupVideoPauseMessages;
- (void)setupAudioPauseMessages;
- (void)setupCellTechChangeMessages;
- (void)setupMomentsMessages;
- (void)setupAudioPausedHBMessages;
- (void)setupCallingModeMessages;
- (void)setupHandoverCandidateChangeMessage;
- (void)setupPiPStateChangeMessage;
- (void)setupPreferredInterfaceMessage;
- (void)setupSymptomEnabledMessage;
- (void)setupWRMAlertStateUpdateMessage;
- (void)setupWRMCoexMetricsMessage;
- (void)setupBasebandCodecInfoMessages;
- (void)setupDisconnectMessage;
- (void)processSymptomFromMessage:(id)a0 participantID:(id)a1 isLocalInitiated:(BOOL)a2 isLocalSideOnly:(BOOL)a3;
- (void)setupAudioOnOffStateMessages;
- (void)controlChannel:(id)a0 receivedData:(id)a1 transactionID:(unsigned int)a2 fromParticipant:(id)a3;
- (void)transportSession:(id)a0 connectionSetupDataDidChange:(id)a1;
- (void)transportSession:(id)a0 cancelRelayRequest:(id)a1;
- (void)transportSession:(id)a0 initiateRelayRequest:(id)a1;
- (void)transportSession:(id)a0 sendRelayResponse:(id)a1;
- (void)packMeters:(char *)a0 withLength:(char *)a1;
- (void)callAlarmsWithRTPTimeStamp:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)a0;
- (void)processResolutionChangeToVideoRule:(id)a0 captureRule:(id)a1 featureListString:(id)a2;
- (BOOL)onCaptureFrame:(struct opaqueCMSampleBuffer { } *)a0 audioTS:(unsigned int)a1 audioHT:(double)a2 videoHT:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3 cameraBits:(unsigned char)a4;
- (void)updateStatistics:(struct { int x0; int x1; double x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; union { struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; double x6; double x7; double x8; double x9; double x10; char x11[64]; int x12; } x0; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; double x12; double x13; unsigned int x14; unsigned int x15; double x16; unsigned int x17; BOOL x18; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x19; struct { unsigned short x0; BOOL x1; BOOL x2; unsigned int x3; } x20; } x1; struct { double x0; double x1; double x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; unsigned int x9; } x2; struct { unsigned int x0; BOOL x1; BOOL x2; BOOL x3; unsigned int x4; unsigned int x5; double x6; unsigned int x7; BOOL x8; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x9; } x3; struct { unsigned char x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; double x10; double x11; double x12; unsigned int x13; unsigned int x14; unsigned int x15; } x4; struct { unsigned int x0; unsigned int x1; unsigned int x2; double x3; } x5; struct { int x0; unsigned int x1; unsigned int x2; unsigned int x3; double x4; double x5; double x6; unsigned int x7; unsigned int x8; } x6; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } x7; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; BOOL x6; unsigned int x7; } x8; struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; float x4; BOOL x5; BOOL x6; double x7; double x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned long long x12; } x9; struct { unsigned char x0; unsigned char x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned long long x8; int x9; unsigned int x10; unsigned char x11; unsigned char x12; unsigned short x13; unsigned short x14; unsigned char x15; unsigned char x16; unsigned char x17; unsigned char x18; unsigned char x19; unsigned char x20; float x21; BOOL x22; } x10; } x7; })a0;
- (void)processBlackFrame:(struct opaqueCMSampleBuffer { } *)a0;
- (void)updateVideoQualityNotification:(double)a0;
- (void)nofityDelegateReceivedRemoteFrame:(struct __CVBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 cameraStatusBits:(unsigned char)a2 newRemoteVideoAttributes:(id)a3 remoteScreenAttributes:(id)a4;
- (void)onPlayVideo:(struct __CVBuffer { } *)a0 frameTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 cameraStatusBits:(unsigned char)a2;
- (unsigned int)parameterSetForPayload:(int)a0;
- (void)cleanUpVideoRTP;
- (BOOL)initializeDisplayLinkWithError:(id *)a0;
- (BOOL)videoReceiverInitializationError:(id *)a0 withDescription:(id)a1;
- (BOOL)createVideoReceiverWithReportingAgent:(struct opaqueRTCReporting { } *)a0 fecHeaderV1Enabled:(BOOL)a1 videoJBEnabled:(BOOL)a2 error:(id *)a3;
- (void)handleVideoReceiverInitializationFailed;

@end

@class PVEffect, NSString, NSDictionary, PVTransformAnimation, NSMutableDictionary, PVMatrix44Double, NSLock;
@protocol JFXEffectContentDataSource;

@interface JFXEffect : NSObject <JFXEffectAssetProviderProtocol, JFXEffectPreviewAssetProviderProtocol, JFXEffectRenderingAssetProviderProtocol, NSSecureCoding, NSCopying> {
    int _type;
    PVEffect *_renderEffect;
    NSMutableDictionary *_effectParameters;
    NSMutableDictionary *_dirtyEffectParameters;
    NSLock *_paramLock;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL arePreviewingAssetsLocal;
@property (readonly, nonatomic) BOOL areRenderingAssetsLocal;
@property (nonatomic) double outputAspect;
@property (readonly, nonatomic) NSString *effectID;
@property (readonly, nonatomic) BOOL isNone;
@property (readonly, nonatomic) int type;
@property (nonatomic) float opacity;
@property (nonatomic, getter=isHidden) BOOL hidden;
@property (readonly, nonatomic) id<JFXEffectContentDataSource> contentDataSource;
@property (readonly, nonatomic) unsigned long long contentAvailability;
@property (readonly, nonatomic) BOOL isContentAvailable;
@property (readonly, nonatomic) BOOL isContentNew;
@property (readonly, nonatomic) NSString *contentVersion;
@property BOOL forceRenderAtPosterFrame;
@property (nonatomic) struct CGSize { double width; double height; } renderSize;
@property (nonatomic) long long playableAspectRatio;
@property (nonatomic) long long playableAspectRatioPreservationMode;
@property (copy, nonatomic) NSString *motionDocumentFolderPath;
@property (copy, nonatomic) NSDictionary *effectParameters;
@property BOOL forceDisableLooping;
@property (readonly, nonatomic) BOOL renderEffectResourcesAreReady;
@property (retain, nonatomic) PVMatrix44Double *topLevelTransformObject;
@property (nonatomic) struct { void /* unknown type, empty encoding */ x0[4]; } topLevelTransform;
@property (retain, nonatomic) PVTransformAnimation *transformAnimation;

+ (BOOL)effectIDIsNone:(id)a0;
+ (long long)defaultPlayableAspectRatio;
+ (long long)defaultPlayableAspectRatioPreservationMode;

- (id)displayName;
- (void)setParameter:(id)a0 forKey:(id)a1;
- (void)encodeWithCoder:(id)a0;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)a0;
- (id)accessibilityName;
- (id)initWithCoder:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)dealloc;
- (void)setHDR:(BOOL)a0;
- (id)parameterForKey:(id)a0;
- (id)contentProperties;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })playableRectInOutputSize:(struct CGSize { double x0; double x1; })a0;
- (id)renderEffect;
- (BOOL)enablePresentationState:(BOOL)a0;
- (id)initWithEffectID:(id)a0;
- (id)serializableEffectParameters;
- (BOOL)isAppearanceEqual:(id)a0 forPurpose:(unsigned long long)a1;
- (void)renderEffectWillLoad;
- (void)addEffectParameters:(id)a0;
- (void)removeEffectParameters:(id)a0;
- (double)playableScaleInOutputSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })addTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 withComponentTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 relativeTo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 basisOrigin:(int)a3 ignoreTranslation:(BOOL)a4;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })addTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a0 withComponentTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 relativeTo:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 basisOrigin:(int)a3;
- (BOOL)loopedRangeRenderIsCacheable;
- (BOOL)isConfiguredForOutputAspect:(double)a0;
- (void)_createCachedRenderEffect_noLock;
- (id)JFX_defaultMotionDocumentFolderLocalURL;
- (id)parametersClassWhitelist;
- (id)requestAllAssetsWithOptions:(id)a0 progressHandler:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (id)requestAssetWithOptions:(id)a0 progressHandler:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (void)cancelAssetRequest:(id)a0;
- (id)availableAssetsWithFilteringOptionsArray:(id)a0;
- (id)availableAssetsWithFilteringOptions:(id)a0;
- (id)localAssetsWithFilteringOptions:(id)a0;
- (id)describeRequest:(id)a0;
- (void)updatePriorityForAssetRequest:(id)a0 newPriority:(long long)a1;
- (void)setBuildInAnimation:(BOOL)a0;
- (BOOL)buildInAnimation;
- (BOOL)isConfiguredForOutputAspectMatchingSize:(struct CGSize { double x0; double x1; })a0;
- (void)setRenderStartOffset:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })rangeForPresentationRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0;
- (BOOL)isAppearanceEqual:(id)a0;
- (BOOL)loadRenderEffect;
- (void)loadRenderEffectInBackgroundWithCompletionOnMainQueue:(id /* block */)a0;
- (void)loadRenderEffectOnQueue:(id)a0 completion:(id /* block */)a1;
- (struct PVCGPointQuad { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; })_convertRenderEffectPoints:(struct PVCGPointQuad { struct CGPoint { double x0; double x1; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct CGPoint { double x0; double x1; } x3; })a0 toBasisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 basisOrigin:(int)a2;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x0; double x1; } *)a0 numPoints:(unsigned long long)a1 toBasisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 basisOrigin:(int)a3;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x0; double x1; } *)a0 numPoints:(unsigned long long)a1 fromBasisRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2 basisOrigin:(int)a3;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_affineTransformFromEffectRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toSize:(struct CGSize { double x0; double x1; })a1 basisOrigin:(int)a2;
- (struct { void /* unknown type, empty encoding */ x0[4]; })topLevelTransformRelativeTo:(struct CGSize { double x0; double x1; })a0 basisOrigin:(int)a1;
- (void)setTopLevelTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0 relativeTo:(struct CGSize { double x0; double x1; })a1 basisOrigin:(int)a2;
- (void)setParentTransformAnimation:(id)a0;
- (void)setTopLevelAdditionalScale:(struct CGPoint { double x0; double x1; })a0;
- (void)removeTopLevelAdditionalScale;
- (id)requestAssetWithOptions:(id)a0 progressAndCancellationHandler:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (void)registerMotionDocumentWithinAssets:(id)a0;
- (id)requestAllAssetsWithOptions:(id)a0 progressAndCancellationHandler:(id /* block */)a1 completionHandler:(id /* block */)a2;
- (id)requestPreviewingAssetsWithPriority:(long long)a0 onlyThumbnailAssetWhenAvailable:(BOOL)a1 progressHandler:(id /* block */)a2 completionHandler:(id /* block */)a3;
- (id)effectWillRenderPreviewWithOptions:(id)a0;
- (id)requestRenderingAssetsWithPriority:(long long)a0 progressHandler:(id /* block */)a1 completionHandler:(id /* block */)a2;

@end

@class Normalization, FRCScaler, LiteSynthesis, OpticalFlow, NSDate, NSDictionary, Synthesis, NSObject, FRCFrameDropDetector, OpticalFlowAnalyzer;
@protocol OS_dispatch_group, OS_os_log, FRCSynthesis, OS_dispatch_semaphore, OS_dispatch_queue;

@interface FRCFrameInterpolator : NSObject {
    OpticalFlow *_opticalFlow;
    Synthesis *_deepSynthesis;
    LiteSynthesis *_liteSynthesis;
    id<FRCSynthesis> _synthesis;
    Normalization *_normalization;
    FRCScaler *_scaler;
    OpticalFlowAnalyzer *_flowAnalyzer;
    struct { struct { int numLevels; struct __CVBuffer *feature[6]; struct { unsigned long long width; unsigned long long height; unsigned long long channels; } tensorSize[6]; } imageFeature; struct { int numLevels; struct __CVBuffer *feature[6]; struct { unsigned long long width; unsigned long long height; unsigned long long channels; } tensorSize[6]; } baseImageFeature; } _features[2];
    struct { struct { struct __CVBuffer *correlations[6]; struct __CVBuffer *flows[6]; struct __CVBuffer *upscaledFlows[6]; struct __CVBuffer *warpedImages[6]; unsigned int numLevels; } storage; struct { struct __CVBuffer *correlations[6]; struct __CVBuffer *flows[6]; struct __CVBuffer *upscaledFlows[6]; struct __CVBuffer *warpedImages[6]; unsigned int numLevels; } baseStorage; } _opticalFlowStroages[2];
    struct __CVBuffer { } *_flowForward;
    struct __CVBuffer { } *_flowBackward;
    struct __CVBuffer { } *_flowForwardGating;
    struct __CVBuffer { } *_flowBackwardGating;
    struct __CVBuffer { } *_prevFlowBackwardGating;
    BOOL _enableCrossFlowAnalysis;
    unsigned long long _width;
    unsigned long long _height;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastFramePts;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastFrameDuration;
    unsigned long long _lastFramesToInterpolate;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _ptsForLiteDebugging;
    NSObject<OS_dispatch_semaphore> *_completion_semaphore;
    FRCFrameDropDetector *_frameDropDetector;
    struct __CFDictionary { } *_anchorFrameCMAttachment;
    long long _inputRotation;
    BOOL _concurrentOpticalFlow;
    NSObject<OS_dispatch_semaphore> *_postProcessingComletionSemaphore;
    NSObject<OS_dispatch_semaphore> *_initializationSemaphore;
    BOOL _fullRange;
    NSObject<OS_os_log> *_logger;
    NSObject<OS_dispatch_group> *_dispatchGroup;
    NSObject<OS_dispatch_queue> *_concurrentQueue;
    NSDate *_startTime;
    unsigned long long _totalFramesInterpolated;
    unsigned long long _totalFramePairsProcessed;
    BOOL _onDemandSynthesisBufferAllocation;
    BOOL _onDemandOpticalFlowBuffersAllocation;
    BOOL _isFrameDropRecovery;
    unsigned long long _timesDidRunDetection;
    long long _sessionResult;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _maxTimeGap;
}

@property (nonatomic) BOOL tilingEnabled;
@property (nonatomic) BOOL fastSynthesis;
@property (nonatomic) BOOL hybridSynthesis;
@property (nonatomic) BOOL inputScaling;
@property (nonatomic) BOOL gatingEnabled;
@property (nonatomic) unsigned long long opticalFlowDownsampling;
@property (nonatomic) BOOL singleFlow;
@property (nonatomic) BOOL twoStageFlow;
@property (nonatomic) BOOL sloMo;
@property (nonatomic, setter=setSharpSynthesis:) BOOL gpuSynthesis;
@property (nonatomic) BOOL forceFrameOutput;
@property (nonatomic) long long usage;
@property (nonatomic) long long qualityMode;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } preferredTransform;
@property (readonly, nonatomic) long long state;
@property (readonly, nonatomic) BOOL gated;
@property (readonly, nonatomic) NSDictionary *sessionStatistics;

+ (void)getInputFrameSizeForUsage:(long long)a0 width:(unsigned long long *)a1 height:(unsigned long long *)a2;
+ (long long)getUsageFromSizeWidth:(unsigned long long)a0 height:(unsigned long long)a1;

- (long long)endSession;
- (id)initWithMode:(long long)a0;
- (void).cxx_destruct;
- (id)init;
- (id)errorWithErrorCode:(long long)a0;
- (void)dealloc;
- (void)initSubModules;
- (long long)getFrameRotation:(long long)a0;
- (long long)adjustUsage:(long long)a0;
- (void)configureSynthesis;
- (void)allocateInternalBuffers;
- (void)setPropertiesFromDefaults;
- (void)releaseOpticalFlowResources;
- (void)releaseInternalBuffers;
- (void)constructSessionStatisticsWithSessionDuration:(double)a0;
- (id)interpolateBetweenFirstFrame:(id)a0 secondFrame:(id)a1 numberOfFrames:(unsigned long long)a2 outputSize:(struct CGSize { double x0; double x1; })a3 outputPixelFormat:(unsigned int)a4 withError:(id *)a5;
- (void)preserveCMAttachmentFirstFrame:(id)a0 secondFrame:(id)a1;
- (BOOL)shallReusePreviousFlowPts0:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 Pts1:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (struct { float x0; float x1; float x2[2]; float x3[2]; int x4; })preprocessFirstFrame:(struct __CVBuffer { } *)a0 secondFrame:(struct __CVBuffer { } *)a1 normalizedFirst:(struct __CVBuffer **)a2 normalizedSecond:(struct __CVBuffer **)a3 scalerEnabled:(BOOL)a4;
- (void)allocateOpticalFlowResources;
- (void)opticalFlowFirstFrame:(struct __CVBuffer { } *)a0 secondFrame:(struct __CVBuffer { } *)a1 flowForward:(struct __CVBuffer { } *)a2 flowBackward:(struct __CVBuffer { } *)a3 reUseFlow:(BOOL)a4;
- (void)preprocessForSynthesisFirstFrame:(struct __CVBuffer { } *)a0 secondFrame:(struct __CVBuffer { } *)a1 normalizedFirst:(struct __CVBuffer **)a2 normalizedSecond:(struct __CVBuffer **)a3 normalization:(struct { float x0; float x1; float x2[2]; float x3[2]; int x4; })a4;
- (id)synthesizeInterpolatedFrames:(id)a0 second:(id)a1 normalizedFirst:(struct __CVBuffer { } *)a2 normalizedSecond:(struct __CVBuffer { } *)a3 framesToInterpolate:(unsigned long long)a4 outputSize:(struct CGSize { double x0; double x1; })a5 outputPixelFormat:(unsigned int)a6 norm_params:(const struct { float x0; float x1; float x2[2]; float x3[2]; int x4; } *)a7 scalerEnabled:(BOOL)a8;
- (void)restoreCMAttachmentToFirstFrame:(id)a0 secondFrame:(id)a1 interpolatedFrames:(id)a2;
- (void)updateLastFramePts:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 toInterpolate:(unsigned long long)a2;
- (void)updateBackwardFlow;
- (void)postProcessFrame:(struct __CVBuffer { } *)a0 destination:(struct __CVBuffer { } *)a1 normParams:(const struct { float x0; float x1; float x2[2]; float x3[2]; int x4; } *)a2 timeScale:(float)a3 scalerEnabled:(BOOL)a4 waitForCompletion:(BOOL)a5;
- (BOOL)shallDumpDebugInfoForCurrPts:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 prevPts:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (struct __CVBuffer { } *)synthesisFirstImage:(struct __CVBuffer { } *)a0 secondImage:(struct __CVBuffer { } *)a1 outputSize:(struct CGSize { double x0; double x1; })a2 outputPixelFormat:(unsigned int)a3 normParams:(const struct { float x0; float x1; float x2[2]; float x3[2]; int x4; } *)a4 scalerEnabled:(BOOL)a5 timeStep:(float)a6 frameIndex:(unsigned long long)a7 lastFrame:(BOOL)a8;
- (void)setFlowAnalysisFromDefaults;
- (void)setLiteSynthesisDebugFromDefaults;
- (void)setNormalizationModeFromDefaults;
- (void)setCrossFlowAnalysisFromDefaults;
- (long long)startSessionWithUsage:(long long)a0;
- (id)createOutputFramesWithWidth:(unsigned long long)a0 height:(unsigned long long)a1 pixelFormat:(unsigned int)a2 numberOframes:(unsigned long long)a3;
- (id)interpolateBetweenFirstFrame:(id)a0 secondFrame:(id)a1 numberOfFrames:(unsigned long long)a2 withError:(id *)a3;
- (id)selectFrameInsertionPointsFromTimingList:(id)a0 preModifiedTimingList:(id)a1;
- (id)selectFrameInsertionPointsFromTimingList:(id)a0 metadataList:(id)a1 withError:(id *)a2;

@end

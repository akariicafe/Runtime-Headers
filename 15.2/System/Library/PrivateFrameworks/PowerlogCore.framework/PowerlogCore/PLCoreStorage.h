@class PLTimer, PLNSNotificationOperatorComposition, PLKQueue, NSString, NSMutableDictionary, PLCFNotificationOperatorComposition, PLSQLiteConnection, NSMutableSet, NSObject, PLXPCResponderOperatorComposition, PLStorageOperator;
@protocol OS_dispatch_queue;

@interface PLCoreStorage : NSObject <UMUserSwitchStakeholder>

@property (nonatomic) BOOL storageLocked;
@property (retain) PLKQueue *profileDefaultsKQueue;
@property (retain) PLTimer *dailyTaskTimer;
@property (retain) PLTimer *flushCachesTimer;
@property (retain) PLNSNotificationOperatorComposition *dailyTaskNotification;
@property (retain) PLCFNotificationOperatorComposition *flushCachesCFNotification;
@property (retain) PLCFNotificationOperatorComposition *blockingFlushCachesCFNotification;
@property (retain) PLCFNotificationOperatorComposition *keybagFirstUnlockNotification;
@property (retain) PLXPCResponderOperatorComposition *safeFileResponder;
@property (retain) PLXPCResponderOperatorComposition *XPCFlushCacheResponder;
@property (retain) PLXPCResponderOperatorComposition *blPathResponder;
@property (retain) PLXPCResponderOperatorComposition *archivesResponder;
@property (retain) PLXPCResponderOperatorComposition *quarantineResponder;
@property (retain) PLXPCResponderOperatorComposition *batteryUIPlistsResponder;
@property (retain) PLXPCResponderOperatorComposition *upgradeLogsResponder;
@property (retain) PLStorageOperator *storageOperator;
@property (retain) NSMutableSet *safeCopyInProgress;
@property (retain) NSObject<OS_dispatch_queue> *backgroundQueue;
@property (retain) NSObject<OS_dispatch_queue> *utilityQueue;
@property (retain, nonatomic) NSMutableDictionary *processIDCache;
@property (retain) PLSQLiteConnection *connection;
@property BOOL storageReady;
@property (retain) NSString *uuid;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)logMessage:(id)a0 fromFile:(id)a1 fromFunction:(id)a2 fromLineNumber:(long long)a3;
+ (id)additionalTables;
+ (id)allOperatorTablesToTrimConditionsForTrimDate:(id)a0;
+ (id)storageQueueNameForClass:(Class)a0;
+ (id)storageQueueNameForEntryKey:(id)a0;

- (void)deleteAllEntriesForKey:(id)a0 withFilters:(id)a1;
- (void)deleteEntryForKey:(id)a0 WithRowID:(long long)a1;
- (long long)blockingWriteEntry:(id)a0 withCompletionBlock:(id /* block */)a1;
- (id)lastEntryForKey:(id)a0 withSubEntryKey:(id)a1;
- (id)entriesForKey:(id)a0 inTimeRange:(struct _PLTimeIntervalRange { double x0; double x1; })a1 withFilters:(id)a2;
- (id)lastEntriesForKey:(id)a0 count:(long long)a1 withFilters:(id)a2;
- (void)updateEntry:(id)a0 withBlock:(id /* block */)a1;
- (void)deleteAllEntriesForKey:(id)a0;
- (id)entriesForKey:(id)a0 inTimeRange:(struct _PLTimeIntervalRange { double x0; double x1; })a1 withCountOfEntriesBefore:(long long)a2 withCountOfEntriesAfter:(long long)a3 withFilters:(id)a4;
- (void)dailyTasks;
- (void)removeStorageForEntryKey:(id)a0;
- (void)flushCachesWithReason:(id)a0;
- (id)entriesForKey:(id)a0 before:(BOOL)a1 timeInterval:(double)a2 count:(long long)a3 withFilters:(id)a4;
- (void)blockingUpdateEntry:(id)a0 withBlock:(id /* block */)a1;
- (void)attemptToSendTaskingStartNotification;
- (void)checkCacheSizeForFlush;
- (void)writeProportionateAggregateEntry:(id)a0 withStartDate:(id)a1 withEndDate:(id)a2;
- (void)startStorage;
- (BOOL)setFileProtectionForPath:(id)a0 withLevel:(id)a1;
- (void)handleSchemaMismatchForTable:(id)a0 expectedVersion:(double)a1 schemaMatch:(short)a2;
- (void)removeProcessIDCacheForPid:(int)a0;
- (void)removeErroneousQualificationEntries;
- (id)entriesForKey:(id)a0 withComparisons:(id)a1;
- (BOOL)flushCachesIfRequiredForEntryKey:(id)a0;
- (void)blockingFlushCachesWithReason:(id)a0;
- (id)entriesForKey:(id)a0;
- (void)deleteAllEntriesForKey:(id)a0 beforeTimestamp:(id)a1;
- (void)processEntriesForKey:(id)a0 withProperties:(id)a1 withBlock:(id /* block */)a2;
- (void)writeEntries:(id)a0 withCompletionBlock:(id /* block */)a1;
- (id)processIDEntryForPid:(int)a0;
- (void)addAggdModeKeys;
- (void)cleanupTmp;
- (void)enumerateProcessIDCacheWithBlock:(id /* block */)a0;
- (id)lastEntryForKey:(id)a0 withIDLessThan:(long long)a1;
- (short)verifySchemaVersionOfTable:(id)a0 matchesExpectedVersion:(double)a1;
- (void)deleteAllEntriesForKey:(id)a0 beforeTimestamp:(id)a1 withFilters:(id)a2;
- (void)setupStorageForEntryKey:(id)a0;
- (void)cleanupQuarantine;
- (id)firstEntryForKey:(id)a0;
- (void)dispatchSyncForEntryKey:(id)a0 withBlock:(id /* block */)a1;
- (void)cacheProcessIDEntry:(id)a0;
- (id)lastEntryForKey:(id)a0 withComparisons:(id)a1 isSingleton:(BOOL)a2;
- (long long)countOfEntriesForKey:(id)a0;
- (void)logMessage:(id)a0 fromFile:(id)a1 fromFunction:(id)a2 fromLineNumber:(long long)a3;
- (long long)generalEntryCacheSizeLimit;
- (void).cxx_destruct;
- (void)moveUpgradePowerlogsAtPath:(id)a0 toPath:(id)a1;
- (void)setupStorageForOperatorClass:(Class)a0;
- (id)entriesForKey:(id)a0 startingFromRowID:(long long)a1 count:(long long)a2 withFilters:(id)a3;
- (long long)writeEntry:(id)a0;
- (id)init;
- (void)setAllNullValuesForEntryKey:(id)a0 forKey:(id)a1 toValue:(id)a2 withFilters:(id)a3;
- (void)setupStorageForOperatorName:(id)a0;
- (id)entriesForKey:(id)a0 withProperties:(id)a1;
- (void)deleteEntry:(id)a0;
- (void)writeEntry:(id)a0 withCompletionBlock:(id /* block */)a1;
- (void)blockingFlushQueues:(id)a0;
- (void)_updateEntry:(id)a0 withBlock:(id /* block */)a1;
- (void)willSwitchUser;
- (id)entriesForKey:(id)a0 withQuery:(id)a1;
- (void)removeOldPowerlogFiles;
- (void)stopStorage;
- (id)lastEntryForKey:(id)a0 withFilters:(id)a1;
- (id)aggregateEntriesForKey:(id)a0 withBucketLength:(double)a1 inTimeIntervalRange:(struct _PLTimeIntervalRange { double x0; double x1; })a2;
- (void)setupTableName:(id)a0 withEntryKeyConfig:(id)a1 withKeyOrder:(id)a2 isDynamic:(BOOL)a3 withShouldIndexFKID:(BOOL)a4;
- (void)loadDynamicValuesIntoEntry:(id)a0;
- (void)setupCoveringIndexOnTable:(id)a0 withColumns:(id)a1;
- (void)dealloc;
- (void)removeProcessIDCacheForPidNumber:(id)a0;
- (id)entryForKey:(id)a0 withID:(long long)a1;
- (void)setupStorageForOperator:(id)a0;
- (void)writeAggregateEntry:(id)a0;
- (void)setupArrayForTableName:(id)a0 forColumnNamed:(id)a1 withValueType:(short)a2 withShouldIndexFKID:(BOOL)a3;
- (void)initOperatorDependancies;
- (id)lastEntryForKey:(id)a0;
- (void)setupStorageVersions;
- (void)dispatchAsyncForEntryKey:(id)a0 withBlock:(id /* block */)a1;

@end

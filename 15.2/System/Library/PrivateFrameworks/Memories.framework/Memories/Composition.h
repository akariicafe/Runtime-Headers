@class AVMutableVideoComposition, Project, NSArray, AVPlayerItem, CompositionTrackGroup, AVMutableAudioMix, AVMutableComposition, CompositionDuckingTimes, NSMutableArray, AVMutableCompositionTrack, NSMutableDictionary;

@interface Composition : NSObject {
    AVMutableComposition *m_avComposition;
    AVPlayerItem *m_avPlayerItem;
    CompositionTrackGroup *m_trackGroupA;
    CompositionTrackGroup *m_trackGroupB;
    CompositionTrackGroup *m_backgroundAudioTrackGroup[1];
    CompositionTrackGroup *m_foregroundAudioTrackGroup[3];
    CompositionTrackGroup *m_transitionAudioTrackGroup;
    CompositionTrackGroup *m_cutawayTrackGroup;
    AVMutableCompositionTrack *m_audioWorkaroundEmptyTrack;
    NSMutableArray *m_videoCompositionInstructions;
    NSMutableArray *m_audioMixParameters;
    long long m_backgroundAudioTrackCount;
    long long m_foregroundAudioTrackCount;
    struct CGSize { double width; double height; } m_previousRenderSize;
    unsigned char m_setNeedsUpdate : 1;
    NSMutableDictionary *m_assetsUsed;
}

@property (readonly, nonatomic) Project *project;
@property (retain) NSMutableArray *switchEffects;
@property (retain) NSMutableArray *titleEffectCopies;
@property (readonly, nonatomic) AVPlayerItem *playerItem;
@property (readonly, nonatomic) AVMutableComposition *AVComposition;
@property (readonly, nonatomic) AVMutableVideoComposition *videoComposition;
@property (readonly, nonatomic) AVMutableAudioMix *audioMix;
@property (nonatomic) float globalAudioVolume;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } duration;
@property (nonatomic) NSArray *editList;
@property (retain, nonatomic) CompositionDuckingTimes *compositionDuckingTimes;
@property (nonatomic) BOOL useShortenedCompositionToEditClip;
@property (readonly, nonatomic) int videotrackAStartAt;
@property (readonly, nonatomic) int videotrackBStartAt;
@property (nonatomic) BOOL isExporting;
@property (nonatomic) struct CGSize { double width; double height; } viewSize;
@property (nonatomic) BOOL fullScreen;
@property (nonatomic) BOOL isDynamicPlayBack;
@property (nonatomic) float dynamicScale;
@property (nonatomic) double aspect;
@property (nonatomic) BOOL hasMemoryConstraints;
@property (nonatomic) BOOL fullScreenPlaybackOnExternalDisplay;
@property (retain, nonatomic) NSArray *transitionInputs;
@property (copy, nonatomic) id /* block */ compositionDuckingTimesCreationBlock;

- (void)refresh:(id)a0;
- (BOOL)validate;
- (void)update;
- (id)init;
- (void)markDirty;
- (void)dealloc;
- (void)playerItemDidReachEnd:(id)a0;
- (float)volumeForClip:(id)a0;
- (BOOL)emptySegments:(id)a0;
- (void)removeTrackFromAudioMix:(int)a0;
- (BOOL)removeTrackIfEmpty:(id)a0;
- (void)logRemovedTrack:(id)a0 trackID:(int)a1;
- (void)setRenderScale;
- (void)logAddedTrack:(id)a0 trackID:(int)a1;
- (void)addBackTracksIfRemoved;
- (BOOL)CARenderingRequiredForClip:(id)a0;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })compositionItemsForState:(id)a0 compositionItem:(id *)a1 backfillCompositionItem:(id *)a2;
- (void)assetUsed:(id)a0;
- (void)burnInPlaybackSettings:(id)a0;
- (id)instructionToHideTrackID:(int)a0 whileHidingTrackID:(int)a1 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a2 requiresCARendering:(BOOL)a3;
- (void)removeEmptyTracks;
- (id)compositionOutputColorSpace;
- (int)outputFrameRate;
- (void)applyPlayerItemProperties;
- (void)clearPlayerItemProperties;
- (void)setProject:(id)a0 frameDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 viewSize:(struct CGSize { double x0; double x1; })a2 forFullScreen:(BOOL)a3;
- (void)finalizeVideoComposition;
- (void)discardPlayerItem;
- (BOOL)shouldInsertASilentAudioTrackAsWorkaround;
- (void)noteEffectChanged:(id)a0;
- (void)noteTitleScaleChanged:(id)a0;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })extensionForTransitionsSupportingEatLeftRight:(id)a0 leftSideOfTransition:(BOOL)a1 splitClip:(BOOL *)a2;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })transitionExtensionForClip:(id)a0 left:(BOOL)a1 splitClip:(BOOL *)a2;
- (id)transitionTopTrack;
- (id)transitionBottomTrack;
- (id)newInstructionGraphNodeForClip:(id)a0 clipTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 compositionTrackID:(int)a2 requiresTweening:(BOOL *)a3 isContainedClip:(BOOL)a4 applyTitleEffect:(BOOL)a5;
- (id)instructionToShowClip:(id)a0 withTrackID:(int)a1 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a3 requiresCARendering:(BOOL)a4 isFreezeFrame:(BOOL)a5 applyTitleEffect:(BOOL)a6;
- (void)addVideoInstructionsForTransition:(id)a0 forRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1 toInstructions:(id)a2 previousTrackID:(int)a3 previousClip:(id)a4 previousClipRequiresCA:(BOOL)a5 nextTrackID:(int)a6 nextClip:(id)a7 nextClipRequiresCA:(BOOL)a8 cutawaysIntersection:(id)a9;
- (BOOL)cutIsContiguous:(id)a0 transition:(id)a1 next:(id)a2;
- (void)addTransitionSoundsForState:(id)a0;
- (id)instructionToShowImageWithClip:(id)a0 withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a2 requiresCARendering:(BOOL)a3 applyTitleEffect:(BOOL)a4;
- (void)addTitleSoundsForState:(id)a0;
- (void)addAlternatesForClip:(id)a0 toInstruction:(id)a1 trackID:(int)a2;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })fadeToBlackStartCMTime;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })fadeToBlackDurationCMTime;
- (void)addAudioPointsToArray:(id)a0 atFrameTime:(int)a1 volume:(double)a2;
- (id)makeAudioPointsArrayForClip:(id)a0 shouldUseDuckingArrays:(BOOL)a1;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })sourceTimeRangeForClip:(id)a0 endOfComposition:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 projectStartTime:(struct { long long x0; int x1; unsigned int x2; long long x3; } *)a2;
- (BOOL)addVolumeRampToTrackGroup:(id)a0 forClip:(id)a1 shouldUseDucking:(BOOL)a2;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })sourceTimeRangeForAudioClip:(id)a0 endOfComposition:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (BOOL)assembleAudioCompositionTrackGroups:(id *)a0 destinationTrackGroupCount:(long long)a1 audioItem:(id)a2 clip:(id)a3 shouldUseDucking:(BOOL)a4 shouldLoopClipContents:(BOOL)a5;
- (BOOL)writeVolumeRampToCompositionFromTrackGroup:(id)a0 endOfComposition:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (float)percentBetweenRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 forTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 firstRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } *)a2 secondRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } *)a3;
- (id)splitCompositionInstruction:(id)a0 atTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 options:(int)a2;
- (void)compositeAlternateNodes:(id)a0 intoOriginalInstruction:(id)a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForCutaway:(id)a0 underlayTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } *)a1 forSize:(struct CGSize { double x0; double x1; })a2;
- (void)addCutaway:(id)a0 toInstruction:(id)a1 transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a2 underlayTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a3;
- (id)newInstructionGraphNodeForClipTitleEffect:(id)a0 inputIGNode:(id)a1;
- (struct CGSize { double x0; double x1; })naturalSizeForClipAfterTransform:(id)a0;
- (id)splitCompositionState:(id)a0 forCutaways:(id)a1 searchIndex:(int *)a2 projectDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3;
- (void)updateVideoAndAudioInstructionForState:(id)a0 cutSwaped:(BOOL)a1 originalState:(id)a2;
- (void)updateCutawayCompositionTracks:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)updateInstructionsWithTitles:(id)a0;
- (void)updateBackgroundAudioCompositionTracks:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)updateForegroundAudioCompositionTracks:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (BOOL)insertASilentAudioTrackAsWorkaround;
- (id)splitCompositionState:(id)a0 atTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)addIntersectingCutaways:(id)a0 toInstruction:(id)a1;
- (id)instructionToTransitionTracksForRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 requiresCARendering:(BOOL)a1 incomingClipIsNarrower:(BOOL)a2 incomingClipRequiresBG:(BOOL)a3 outgoingClipRequiresBG:(BOOL)a4 incomingClipIsZoomed:(BOOL)a5 outgoingClipIsZoomed:(BOOL)a6 transitionClip:(id)a7 applyTitleEffect:(BOOL)a8;
- (id)cutawaysIntersectingWithClip:(id)a0 previousTransition:(id)a1 nextTransition:(id)a2 cutaways:(id)a3;
- (void)rebuildCompositionInstructionsForMovieKenBurnsExtra:(id)a0;
- (void)rebuildCompositionInstructionsForClip:(id)a0;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })timeRangeForClipIncludingTransitions:(id)a0;
- (void)refreshCompositionInstructionsWithinRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0;
- (id)newInstructionGraphNodeToShowImageWithClip:(id)a0 clipTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 isContainedClip:(BOOL)a2;
- (id)newInstructionGraphNodeToShowMultiUpClip:(id)a0 clipTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 compositionTrackID:(int)a2 requiresTweening:(BOOL *)a3 applyTitleEffect:(BOOL)a4;
- (id)newInstructionGraphNodeToShowGeneratorClip:(id)a0;
- (id)newInstructionGraphNodeToShowMovieClip:(id)a0 clipTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })a1 compositionTrackID:(int)a2 dataTrackID:(int)a3;
- (id)newInstructionGraphNodeToShowKenBurnsEffect:(id)a0 withInfo:(id)a1 inputNode:(id)a2 isContainedClip:(BOOL)a3;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformKBForVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 imageSize:(struct CGSize { double x0; double x1; })a1 aspect:(double)a2 isContainedClip:(BOOL)a3;
- (void)splitCompositionInstructionListAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 options:(int)a1;
- (void)setDynamicPlayBack:(BOOL)a0;
- (void)lowerDynamicResolution;
- (void)raiseDynamicResolution;
- (void)checkIt:(id)a0 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1;

@end

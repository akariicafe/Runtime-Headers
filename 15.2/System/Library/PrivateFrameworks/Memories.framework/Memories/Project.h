@class NSDate, NSString, NSArray, FIFOCache, PVEffect, NSMutableDictionary, TitleDefinition, NSMutableArray, ProjectAssetManager, NSDictionary, NSUndoManager;
@protocol ProjectDelegate;

@interface Project : NSObject <PVImageDelegate, PVStabilizationDelegate, NSKeyedUnarchiverDelegate> {
    NSMutableDictionary *m_project;
    BOOL m_dirty;
    int m_isEditingCount;
    int m_duration;
    int m_editListDuration;
    NSString *m_identifier;
    NSMutableDictionary *m_contentModesForOrientation;
    NSMutableArray *m_projectChangeLogs;
    FIFOCache *m_kenBurnsImageCache;
    int m_suspendMusicValidate;
    int m_suspendUpdateAnchors;
    BOOL m_needsToUpdateAnchors;
    int m_kenBurnsAcceptability;
    NSDictionary *m_editedRanges;
    BOOL m_validate;
    NSMutableArray *m_unusedBkgdAudioClips;
    NSMutableArray *m_deletedMediaFiles;
    struct CGSize { double width; double height; } m_currentSize;
    int m_exportHeight;
    BOOL m_missingKBSourceImage;
    NSString *m_displayName;
    int m_frameRate;
    FIFOCache *m_trailerShotCache;
    int m_suspendSave;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) id<ProjectDelegate> delegate;
@property (retain, nonatomic) NSMutableDictionary *projectDictionary;
@property (copy, nonatomic) NSString *path;
@property (readonly, nonatomic) NSString *persistedStorageName;
@property (retain, nonatomic) NSString *displayName;
@property (retain, nonatomic) NSArray *lastArchiveNameAndDate;
@property (readonly, nonatomic) NSString *assetsDirectory;
@property (readonly, nonatomic) NSString *exportDirectory;
@property (nonatomic) BOOL modifiedSincePublish;
@property (nonatomic) BOOL readOnly;
@property (readonly, nonatomic) NSString *identifier;
@property (readonly, nonatomic) NSString *temporaryUniqueIdentifier;
@property (readonly, nonatomic) int aspect;
@property (readonly, nonatomic) int projectID;
@property (readonly, nonatomic) NSString *projectVersion;
@property (copy, nonatomic) NSDate *modificationDate;
@property (readonly, nonatomic) NSUndoManager *undoManager;
@property (retain, nonatomic) TitleDefinition *defaultTitle;
@property (retain, nonatomic) NSString *themeID;
@property (readonly, nonatomic, getter=isTrailer) BOOL trailer;
@property (nonatomic) BOOL isMiro;
@property (readonly, nonatomic) BOOL isSimpleProject;
@property (nonatomic) BOOL useThemeAudio;
@property (nonatomic) BOOL allowOriginalMusicForNoneTheme;
@property (nonatomic) BOOL fadeInFromBlack;
@property (nonatomic) BOOL fadeOutToBlack;
@property (retain, nonatomic) NSString *audioTimePitchAlgorithm;
@property (copy, nonatomic) NSString *defaultTransitionType;
@property (nonatomic) BOOL allowsSplits;
@property (nonatomic) unsigned long long frameRateMode;
@property (retain, nonatomic) PVEffect *filterEffect;
@property (retain, nonatomic) NSString *filterEffectID;
@property (readonly, nonatomic) unsigned int filterSeed;
@property (nonatomic) BOOL hasBeenModified;
@property (nonatomic) int currentTime;
@property (retain, nonatomic) NSMutableArray *deletedMediaFiles;
@property (retain, nonatomic) ProjectAssetManager *assetManager;
@property (retain, nonatomic) NSArray *savedEditList;
@property (nonatomic) double fadeToBlackStartTime;
@property (nonatomic) double fadeToBlackDuration;
@property (nonatomic) BOOL fadeSongForce;
@property (nonatomic) BOOL isExportingPlist;
@property (retain, nonatomic) NSDictionary *stabilizationDict;
@property (readonly, nonatomic) double aspectHorizontal;
@property (readonly, nonatomic) double aspectVertical;
@property (readonly, nonatomic) double aspectSquare;
@property (retain, nonatomic) NSMutableArray *editList;
@property (retain, nonatomic) NSMutableArray *backgroundAudioClips;
@property (retain, nonatomic) NSMutableArray *foregroundAudioClips;
@property (retain, nonatomic) NSMutableArray *cutaways;
@property (retain, nonatomic) NSMutableDictionary *trailerDict;
@property (nonatomic) struct CGSize { double width; double height; } explicitOutputSize;
@property (nonatomic) double aspectRatio;
@property (readonly, nonatomic) BOOL playbackAt60fps;
@property (readonly, nonatomic) BOOL exportAt60fps;
@property (nonatomic) int durationForAllAssets;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGSize { double x0; double x1; })playBackImageSize:(struct CGSize { double x0; double x1; })a0;
+ (struct CGSize { double x0; double x1; })exportImageSize:(struct CGSize { double x0; double x1; })a0;
+ (struct CGSize { double x0; double x1; })sizeForMaxPixels:(double)a0 sourceSize:(struct CGSize { double x0; double x1; })a1;
+ (struct CGSize { double x0; double x1; })thumbImageSize:(struct CGSize { double x0; double x1; })a0;
+ (void)setProjectClass:(Class)a0;
+ (struct CGSize { double x0; double x1; })sizeForRenderIntent:(int)a0 sourceSize:(struct CGSize { double x0; double x1; })a1;
+ (id)defaultProjectImage;
+ (void)findSharedMediaItems:(id)a0 inProjectPlist:(id)a1 addingToResultsMap:(id *)a2;
+ (void)replaceProjectsURL:(id)a0 withURL:(id)a1 inProjectPlist:(id)a2;
+ (id)firstClipDictInEditListOfProjectPlist:(id)a0;
+ (id)projectWithSingleMovieClip:(id)a0;
+ (BOOL)trailerIsSuitableForThisDevice:(id)a0;
+ (id)projectFilePathFromProjectPath:(id)a0 forWriting:(BOOL)a1;
+ (id)projectHolderPathFromProjectPath:(id)a0 forWriting:(BOOL)a1;
+ (id)assetsDirectory:(id)a0;

- (struct CGSize { double x0; double x1; })naturalSize;
- (BOOL)save;
- (id)clips;
- (double)durationInSeconds;
- (void)validate;
- (id)endEditing;
- (id)initWithContentsOfFile:(id)a0;
- (id)thumbnailImage;
- (BOOL)isDirty;
- (BOOL)isEmpty;
- (int)duration;
- (id)init;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (BOOL)isExporting;
- (void)markDirty;
- (BOOL)isEditing;
- (void)dealloc;
- (BOOL)saveToPath:(id)a0;
- (void)startEditing;
- (void)sizeChanged;
- (BOOL)use2160Pcontent:(BOOL)a0;
- (struct CGImage { } *)imageForURL:(id)a0 renderingIntent:(int)a1;
- (BOOL)isImageValid:(id)a0 renderingIntent:(int)a1 size:(struct CGSize { double x0; double x1; } *)a2;
- (id)hasExportedFile:(id)a0;
- (id)_keyForRenderingIntent:(int)a0;
- (id)_detectedFacesInImage:(id)a0 clip:(id)a1;
- (id)clipsForClipType:(int)a0;
- (int)naturalFrameRate;
- (id)imageAtTime:(int)a0 withSize:(struct CGSize { double x0; double x1; })a1;
- (void)didInitWithContentsOfFile;
- (id)videoPreviewImageOfSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)hasMissingAssets;
- (void)saveClipAssetToProject:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void)beginUndoGroup:(id)a0;
- (void)endUndoGroup;
- (void)removeClip:(id)a0 releaseAnchor:(BOOL)a1;
- (void)appendVideoClip:(id)a0;
- (void)saveClipAssetToProject:(id)a0 withCompletionHandler:(id /* block */)a1 excludedRenderingIntents:(id)a2;
- (void)captureContentsOfClip:(id)a0 needsDisplay:(BOOL)a1;
- (id)backgroundAudioClipsInUseAtTime:(int)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustKBRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toContainRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 withinImageSize:(struct CGSize { double x0; double x1; })a2;
- (unsigned long long)bytesNeededForExport:(id)a0;
- (void)_enumerateMediaClipsUsingBlock:(id /* block */)a0;
- (id)copyMediaClipsOmittingFirstClip:(BOOL)a0;
- (id)mediaClipsInfoOmittingFirstClip:(BOOL)a0;
- (void)replaceClip:(id)a0 withClip:(id)a1;
- (id)previousClipOfType:(int)a0 beforeClip:(id)a1;
- (id)clipBeforeClip:(id)a0;
- (id)clipAfterClip:(id)a0;
- (id)editListClipInUseAtTime:(int)a0;
- (id)clipBeforeClip:(id)a0 inClips:(id)a1;
- (id)clipAfterClip:(id)a0 inClips:(id)a1;
- (int)editListDuration;
- (void)setupUndo;
- (id)initWithValidState:(BOOL)a0;
- (void)cleanupMalformedAudioPaths:(id)a0;
- (void)convertPlistToCustomObjects:(id)a0;
- (void)cleanupProjectDictionary:(id)a0;
- (void)setProjectDictionary:(id)a0 validate:(BOOL)a1;
- (void)createSubDirectories;
- (void)checkForReadOnlyCookie;
- (void)updateModificationDate;
- (BOOL)usesOriginalNoneThemeMusic;
- (BOOL)isURL:(id)a0 usedInList:(id)a1;
- (void)cleanupUnusedMediaFiles;
- (id)firstMovieClip;
- (id)usedTrackNames;
- (int)minimumClipDurationForValidation;
- (void)validateEditListTrack;
- (void)updateAnchors;
- (void)validateCutaways;
- (void)validateMusic;
- (void)validateForegroundAudioTracks;
- (void)validateBackgroundAudioTracks;
- (id)convertToPlist;
- (BOOL)use1080Pcontent:(BOOL)a0;
- (BOOL)useHEVCcontent:(BOOL)a0;
- (float)maxSourceFrameRate;
- (id)plistAsDataWithError:(id *)a0;
- (void)trailerIsSavingToPath:(id)a0;
- (BOOL)rename:(id)a0 to:(id)a1 withPath:(id)a2;
- (void)updateTrailerMovieNameFieldsFromUnformattedString:(id)a0;
- (id)saveAnchoredClipsInList:(id)a0;
- (id)restoredAnchoredClips:(id)a0;
- (int)movieOrKBDurationGoodFor60fps:(id)a0;
- (int)clipDurationGoodFor60fps:(id)a0;
- (BOOL)miroContainsSufficient60fpsContent;
- (BOOL)containsSufficient60fpsContent;
- (BOOL)has1080Content:(id)a0 clipType:(int)a1 onlyMovies:(BOOL)a2;
- (BOOL)has2160PContent:(id)a0 clipType:(int)a1 onlyMovies:(BOOL)a2;
- (BOOL)hasHEVCContent:(id)a0 clipType:(int)a1 onlyMovies:(BOOL)a2;
- (int)minClipDurationForLeftEatDuration:(int)a0 rightEatDuration:(int)a1 totalDuration:(BOOL)a2;
- (void)detachTransitions;
- (int)allowedTransitionDuration:(int)a0;
- (void)reattachTransitions;
- (void)rebuildFingerprints:(BOOL)a0;
- (void)deleteAllExportedFiles;
- (void)undoProjectChanges:(id)a0;
- (void)noteClipsChangedInLog:(id)a0;
- (int)startOffsetForEditListClip:(id)a0;
- (long long)indexOfEditListClipAtTime:(int)a0;
- (int)startOffsetForEditListIndex:(long long)a0;
- (void)updateAnchorsForClip:(id)a0;
- (id)anchoredSegmentsIgnoringClip:(id)a0 clipType:(int)a1;
- (void)endEditingOfTrailer;
- (id)addAutomaticTransitions;
- (unsigned int)numberOfForegroundAudioTracks;
- (int)snapToGuideTimeWithinInEditListWithStartOrEndPointsWithin:(float)a0 ofProjectTime:(int)a1 ignoringClip:(id)a2;
- (id)availableAnchoredRangesIgnoringClip:(id)a0 clipType:(int)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })availableAnchoredRangeAtTime:(int)a0 ignoringClip:(id)a1 clipType:(int)a2;
- (int)anchoredSlotAtTime:(int)a0 duration:(int)a1 inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (BOOL)isMovie:(id)a0 usedInList:(id)a1;
- (id)nonEditListClipsIn:(id)a0 inUseAtTime:(int)a1;
- (id)editListClipInUseAtTime:(int)a0 timeFromPreviousEdit:(int *)a1;
- (int)startOffsetForClip:(id)a0;
- (id)keyframeTimesForEditListClips:(id)a0;
- (id)keyframeTimesForClips:(id)a0;
- (void)moveClipsInArray:(id)a0 afterTime:(int)a1 duration:(int)a2 except:(id)a3;
- (void)moveClipsInArray:(id)a0 afterTime:(int)a1 duration:(int)a2;
- (id)audioClipsAnchoredToClip:(id)a0;
- (id)cutawaysAnchoredToClip:(id)a0;
- (void)removeAnchorForClip:(id)a0;
- (BOOL)insertClip:(id)a0 atTime:(int)a1;
- (int)availableSpaceStartingAtTime:(int)a0 ignoringClip:(id)a1 clipType:(int)a2;
- (BOOL)insertMovieClip:(id)a0 afterClip:(id)a1;
- (BOOL)moveClipsAfterTime:(int)a0 duration:(int)a1;
- (unsigned long long)clipIndexInArray:(id)a0 atTime:(int)a1;
- (BOOL)insertClip:(id)a0 atTime:(int)a1 adjustOtherClips:(BOOL)a2;
- (BOOL)canMoveAudioToForegroundFromClip:(id)a0;
- (void)deleteMediaFileAtURL:(id)a0;
- (void)audioOffsetBoundsForClip:(id)a0 minStart:(int *)a1 maxStart:(int *)a2 minEnd:(int *)a3 maxEnd:(int *)a4;
- (id)localExportDirectory;
- (id)fileNameFromPreset:(id)a0;
- (BOOL)hasKBOnly;
- (void)deleteExportedFile:(id)a0;
- (id)trailerShotCacheDirectory;
- (id)thumbnailTrailerKeyForURL:(id)a0 index:(int)a1 time:(int)a2 size:(struct CGSize { double x0; double x1; })a3;
- (void)assetTrailerShotCache;
- (void)updateClipsForCapriWithKonaProject:(id)a0;
- (long long)compareModificationDates:(id)a0;
- (BOOL)clipsOnlyHaveAudioCharacteristics;
- (void)suspendMusicValidate;
- (void)resumeMusicValidate;
- (void)willBeginTrimmingClip:(id)a0;
- (void)didFinishTrimmingClip;
- (int)numberOfNewsIntroTitlesUsed:(id)a0 matchesClip:(BOOL *)a1;
- (id)simpleEditInfo;
- (void)suspendSave;
- (BOOL)resumeSave;
- (void)flushMajorChanges;
- (id)lastContentModeForOrientation:(long long)a0;
- (void)setLastContentMode:(long long)a0 forOrientation:(long long)a1;
- (id)firstClip;
- (id)lastClip;
- (id)nextClipOfType:(int)a0 afterClip:(id)a1;
- (BOOL)useClipWithRotation;
- (double)secondsFromProjectTime:(int)a0;
- (double)durationSecondsFromFrameTime:(int)a0;
- (int)minTotalDurationOfClip:(id)a0;
- (int)maxAllowedDurationOfTransition:(id)a0 simple:(int *)a1;
- (void)suspendUpdateAnchors;
- (void)resumeUpdateAnchors;
- (void)updateAnchorsIfNeeded;
- (int)snapToGuideTimeWithin:(float)a0 ofProjectTime:(int)a1 ignoringClip:(id)a2 forceSnap:(BOOL *)a3;
- (int)timeForNearestEdgeOfClip:(id)a0 projectTime:(int)a1;
- (int)availableSpaceEndingAtTime:(int)a0 ignoringClip:(id)a1 clipType:(int)a2;
- (int)nearestAnchoredSlotAtTime:(int)a0 duration:(int)a1 ignoringClip:(id)a2 clipType:(int)a3;
- (id)editedRangeList;
- (BOOL)isMovieUsed:(id)a0;
- (id)clipsInUseAtTime:(int)a0;
- (id)clipsOfType:(int)a0 inUseAtTime:(int)a1;
- (id)clipsOfType:(int)a0 inUseFromTime:(int)a1 toTime:(int)a2;
- (int)convertClipStartTimeToProjectTime:(id)a0;
- (id)editListClipInUseNearTime:(int)a0;
- (id)foregroundAudioClipsInUseAtTime:(int)a0;
- (id)clipBeforeTransitionClip:(id)a0;
- (id)clipAfterTransitionClip:(id)a0;
- (id)nonTransitionClipBeforeClip:(id)a0;
- (BOOL)clip:(id)a0 isInUseAtTime:(int)a1;
- (id)keyframeTimes;
- (BOOL)canSplitClip:(id)a0 atTime:(int)a1;
- (id)splitClip:(id)a0 atTime:(int)a1;
- (id)moveTitleToBlack:(id)a0;
- (BOOL)canDuplicateClip:(id)a0;
- (id)duplicateClip:(id)a0;
- (BOOL)canDetachAudioFromClip:(id)a0;
- (id)detachMovieAudioFromClip:(id)a0;
- (void)addForegroundAudioClips:(id)a0 withAnchor:(id)a1;
- (double)durationOfEditListClipInSeconds:(id)a0;
- (void)audioRangeForClip:(id)a0 start:(int *)a1 end:(int *)a2;
- (int)displayedDurationOfClip:(id)a0;
- (BOOL)hasAnyExportedFile;
- (id)exportPresetForATV;
- (id)exportPresetForPlugin;
- (id)thumbnailTrailerShotForURL:(id)a0 index:(int)a1 time:(int)a2 size:(struct CGSize { double x0; double x1; })a3;
- (void)saveThumbnailTrailerShot:(id)a0 forURL:(id)a1 index:(int)a2 time:(int)a3 size:(struct CGSize { double x0; double x1; })a4;
- (void)flushThumbnailTrailerShot;
- (void)fixupShotThumbnailFileNameAfterImport;
- (id)editInfo;
- (id)replaceURL:(id)a0 withURL:(id)a1;
- (void)markDirty:(BOOL)a0;
- (id)replaceURL:(id)a0 inMovie:(id)a1 andEditItem:(id)a2 withURL:(id)a3;
- (unsigned long long)estimatedBundleSizeIncludingExternalAssets:(BOOL)a0 bundleSize:(unsigned long long *)a1 externalMap:(id *)a2;
- (void)replacePhotosToKenBurnsURLs;
- (BOOL)okToDeleteFile:(id)a0;
- (void)audioOffsetsForClip:(id)a0 startOffset:(int *)a1 endOffset:(int *)a2;
- (id)cacheKeyForAssetsLibraryURL:(id)a0 renderingIntent:(int)a1;
- (id)cacheKeyForPhotosIdentifierURL:(id)a0 renderingIntent:(int)a1;
- (id)cacheKeyForKenBurnsIdentifierURL:(id)a0 renderingIntent:(int)a1;
- (id)filePathForCacheKey:(id)a0;
- (BOOL)shouldCopyImages;
- (BOOL)regenerateImagesIfNecessaryForIdentifierURL:(id)a0 kbInfo:(id)a1 exportOnly:(BOOL)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })horizontallyClampedKenBurnsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 imageSize:(struct CGSize { double x0; double x1; })a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })verticallyClampedKenBurnsRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 imageSize:(struct CGSize { double x0; double x1; })a1;
- (id)imageForIdentifierURL:(id)a0 renderingIntent:(int)a1;
- (id)detectedFacesInKenBurnsClip:(id)a0;
- (id)detectedFaceRectsInKenBurnsClip:(id)a0;
- (void)_addPanAndZoomForKenBurnsClip:(id)a0 image:(id)a1;
- (void)nextKenBurnsStart:(struct { float x0; float x1; float x2; } *)a0 end:(struct { float x0; float x1; float x2; } *)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectFromKenBurnsPosition:(struct { float x0; float x1; float x2; })a0 outputAspectRatio:(float)a1 image:(id)a2;
- (void)setKenBurnsImage:(id)a0 forCacheKey:(id)a1 renderingIntent:(int)a2;
- (id)scaleDownOrRotateIfNeeded:(id)a0;
- (id)markFacesInImage:(id)a0 highAccuracy:(BOOL)a1;
- (id)saveImageOfAssetRepresentation:(id)a0 renderingIntent:(int)a1;
- (id)saveImageOfAssetRepresentation:(id)a0;
- (id)saveThumbnailOfAssetRepresentation:(id)a0;
- (id)savePlaybackImageOfAssetRepresentation:(id)a0;
- (void)adjustDurationForKBClip:(id)a0 imageSize:(struct CGSize { double x0; double x1; })a1;
- (id)scaleAndSaveImageToProject:(id)a0 cacheKey:(id)a1 renderingIntent:(int)a2;
- (id)cacheKeyForFileURL:(id)a0 renderingIntent:(int)a1;
- (id)imageMatchingCurrentDeviceSizeForIdentifierURL:(id)a0 sourceSize:(struct CGSize { double x0; double x1; })a1 renderingIntent:(int)a2;
- (void)regenerateKBimageFilesIfNecessary:(BOOL)a0;
- (unsigned long long)numberOfDetectedFacesInKenBurnsClip:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectEnclosingAllFacesInKenBurnsClip:(id)a0;
- (void)addPanAndZoomForKenBurnsClip:(id)a0;
- (void)removePanAndZoomForKenBurnsClip:(id)a0;
- (void)zeroOutPanAndZoomForMultiUpClip:(id)a0;
- (id)md5StringFromData:(id)a0;
- (void)saveClipImageToProject:(id)a0 clip:(id)a1;
- (id)timedStabilizationConfigInArray:(id)a0 useNewMethod:(BOOL)a1 forTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2 frameData:(struct __CVBuffer { } *)a3 irisMovieClip:(id)a4 frameIndex:(out long long *)a5;
- (BOOL)compareTimingMethodsForStabilizationConfigLookup:(id)a0 forTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 frameData:(struct __CVBuffer { } *)a2 irisMovieClip:(id)a3;
- (id)timedStabilizationConfigForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 frameData:(struct __CVBuffer { } *)a1 userContext:(id)a2;
- (BOOL)didStabilize:(id)a0 time:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 frameData:(struct __CVBuffer { } *)a2 inputSize:(struct CGSize { double x0; double x1; })a3 cleanAperture:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a4 centeredCleanAperture:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a5 cleanApertureOriginZero:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a6 cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a7 homography:(struct { void /* unknown type, empty encoding */ x0[3]; })a8 homographyMatrix4x4:(struct { void /* unknown type, empty encoding */ x0[4]; })a9 userContext:(id)a10;
- (unsigned long long)estimatedSizeOfPassThroughExport;
- (void)willStartExport:(id)a0;
- (BOOL)renameTo:(id)a0;
- (id)filePathForIdentifierURL:(id)a0 renderingIntent:(int)a1;
- (id)initWithContentsOfFile:(id)a0 validate:(BOOL)a1;
- (id)hasExportedFileForFullScreen:(BOOL)a0;
- (id)loadFromProjectData:(id)a0;
- (void)prepareForCloudPersistence;
- (unsigned long long)bytesNeededForMultipleExports:(id)a0;
- (id)expandedEditList;
- (id)cutawaysInUseAtTime:(int)a0;
- (id)cacheKeyForIdentifierURL:(id)a0 renderingIntent:(int)a1;
- (struct CGSize { double x0; double x1; })applyAspectRatioTo16by9Size:(struct CGSize { double x0; double x1; })a0;
- (id)exportedFilePath:(id)a0;
- (void)didExport;
- (id)clipsAnchoredToClip:(id)a0;
- (id)saveBackgroundAudioClips;
- (id)saveForegroundAudioClips;
- (id)saveCutaways;
- (void)restoreBackgroundAudioClips:(id)a0;
- (void)restoreForegroundAudioClips:(id)a0;
- (void)restoreCutaways:(id)a0;

@end

@class NSURL, NSMutableDictionary, NSHTTPURLResponse, CoreDAVItem, NSDictionary, NSURLSession, NSDate, CoreDAVErrorItem, NSMutableArray, NSThread, NSRunLoop, NSString, NSURLRequest, NSData, NSURLSessionDataTask, NSError, CoreDAVRequestLogger;
@protocol CoreDAVTaskDelegate, CoreDAVResponseBodyParser, CoreDAVTaskManager, CoreDAVAccountInfoProvider;

@interface CoreDAVTask : NSObject <NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, CoreDAVSubmittable> {
    long long _numDownloadedElements;
    NSHTTPURLResponse *_response;
    NSURLSession *_session;
    NSURLSessionDataTask *_task;
    NSURLRequest *_request;
    NSDate *_dateConnectionWentOut;
    BOOL _didSendRequest;
    BOOL _didFailWithError;
    BOOL _didCancel;
    BOOL _didReceiveResponse;
    BOOL _didReceiveData;
    BOOL _didFinishLoading;
    BOOL _finished;
    BOOL _receivedBadPasswordResponse;
    BOOL _triedRenewingCredential;
    BOOL _justTriedTokenAuth;
    BOOL _everTriedTokenAuth;
    BOOL _shouldRetryWithClientToken;
    BOOL _didRetryWithClientToken;
    BOOL _requestIsCompressed;
    BOOL _compressedRequestFailed;
    NSError *_passwordNotificationError;
    CoreDAVRequestLogger *_logger;
    NSMutableDictionary *_overriddenHeaders;
    NSMutableArray *_redirectHistory;
    NSData *_fakeResponseData;
    BOOL _haveParsedFakeResponseData;
    CoreDAVErrorItem *_forbiddenErrorItem;
    NSString *_uniqueID;
    NSThread *_callbackThread;
    BOOL _callbackThreadSet;
}

@property (nonatomic) long long responseStatusCode;
@property (nonatomic) unsigned long long totalBytesReceived;
@property (retain, nonatomic) NSError *error;
@property BOOL totalBytesWasProcessedAsAbnormallyLarge;
@property (copy, nonatomic) id /* block */ requestProgressBlock;
@property (copy, nonatomic) id /* block */ responseProgressBlock;
@property (copy, nonatomic) id /* block */ completionBlock;
@property (readonly, nonatomic, getter=isFinished) BOOL finished;
@property (readonly, nonatomic) NSRunLoop *workRunLoop;
@property (weak, nonatomic) id<CoreDAVTaskManager> taskManager;
@property (weak, nonatomic) id<CoreDAVAccountInfoProvider> accountInfoProvider;
@property (weak, nonatomic) id<CoreDAVTaskDelegate> delegate;
@property (retain, nonatomic) id context;
@property (nonatomic) int depth;
@property (nonatomic) double timeoutInterval;
@property (nonatomic) BOOL allowAutomaticRedirects;
@property (retain, nonatomic) id<CoreDAVResponseBodyParser> responseBodyParser;
@property (readonly, nonatomic) CoreDAVItem *rootElement;
@property (readonly, nonatomic) NSDictionary *responseHeaders;
@property (nonatomic) BOOL ignoresGuardianRestrictions;
@property (readonly, nonatomic) NSURL *url;
@property (retain, nonatomic) NSDictionary *requestProperties;
@property (nonatomic) BOOL simulated;
@property (retain, nonatomic) NSMutableDictionary *simulatedResponseHeaders;
@property (nonatomic) long long simulatedStatusCode;
@property (retain, nonatomic) CoreDAVItem *simulatedRootElement;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (unsigned int)uniqueQueryID;
+ (id)stringFromDepth:(int)a0;

- (id)httpMethod;
- (BOOL)markAsFinished;
- (void)finishCoreDAVTaskWithError:(id)a0;
- (id)requestBody;
- (id)additionalHeaderValues;
- (unsigned long long)cachePolicy;
- (id)copyDefaultParserForContentType:(id)a0;
- (void)URLSession:(id)a0 task:(id)a1 didSendBodyData:(long long)a2 totalBytesSent:(long long)a3 totalBytesExpectedToSend:(long long)a4;
- (void)URLSession:(id)a0 didReceiveChallenge:(id)a1 completionHandler:(id /* block */)a2;
- (id)initWithURL:(id)a0;
- (void)URLSession:(id)a0 task:(id)a1 needNewBodyStream:(id /* block */)a2;
- (void)URLSession:(id)a0 dataTask:(id)a1 didReceiveResponse:(id)a2 completionHandler:(id /* block */)a3;
- (void).cxx_destruct;
- (void)URLSession:(id)a0 task:(id)a1 didReceiveChallenge:(id)a2 completionHandler:(id /* block */)a3;
- (void)URLSession:(id)a0 dataTask:(id)a1 didReceiveData:(id)a2;
- (void)URLSession:(id)a0 task:(id)a1 didCompleteWithError:(id)a2;
- (id)redactedDescription;
- (BOOL)validate:(id *)a0;
- (void)dealloc;
- (void)reset;
- (void)loadRequest:(id)a0;
- (void)URLSession:(id)a0 task:(id)a1 willPerformHTTPRedirection:(id)a2 newRequest:(id)a3 completionHandler:(id /* block */)a4;
- (void)URLSession:(id)a0 didBecomeInvalidWithError:(id)a1;
- (void)startModal;
- (long long)numDownloadedElements;
- (void)finishEarlyWithError:(id)a0;
- (void)performCoreDAVTask;
- (BOOL)_canAuthenticateAgainstProtectionSpace:(id)a0;
- (void)submitWithTaskManager:(id)a0;
- (id)lastRedirectURL;
- (id)requestBodyStream;
- (id)_sessionForLogging;
- (id)_requestForLogging;
- (void)tearDownResources;
- (void)_logSantizedRequest:(id)a0 withTaskID:(id)a1;
- (void)_assignConnectionProperties:(id)a0 toSessionConfiguration:(id)a1;
- (id)_compressBodyData:(id)a0;
- (void)_failImmediately;
- (id)_createBodyData;
- (BOOL)_includeGeneralHeaders;
- (id)_applyAuthenticationChain:(struct __CFArray { } *)a0 toRequest:(id)a1;
- (id)_applyStorageSession:(struct __CFURLStorageSession { } *)a0 toRequest:(id)a1;
- (void)reportStatusWithError:(id)a0;
- (void)_sendTimeSpentInNetworkingToProvider;
- (void)handleWebLoginRequestWithCompletionBlock:(id /* block */)a0;
- (void)_runOnThisThread:(id /* block */)a0;
- (void)_handleAuthenticationChallenge:(id)a0 task:(id)a1 completionHandler:(id /* block */)a2;
- (void)_runOnCallbackThread:(id /* block */)a0;
- (void)_session:(id)a0 dataTask:(id)a1 didReceiveData:(id)a2;
- (BOOL)shouldLogResponseBody;
- (BOOL)_shouldHandleStatusCode:(long long)a0;
- (void)_session:(id)a0 task:(id)a1 willPerformHTTPRedirection:(id)a2 newRequest:(id)a3 completionHandler:(id /* block */)a4;
- (BOOL)_shouldCreateCredentialForBasicOrDigestAuthChallenge:(id)a0;
- (id)credentialForOAuthChallenge:(id)a0;
- (id)credentialForClientCertificateChallenge:(id)a0;
- (void)_didReceiveAuthenticationChallenge:(id)a0 forTask:(id)a1 completionHandler:(id /* block */)a2;
- (void)_taskFinishedLoading:(id)a0;
- (void)_task:(id)a0 didFailWithError:(id)a1;
- (BOOL)_handleUnauthorizedAccessError:(id)a0;
- (void)_session:(id)a0 dataTask:(id)a1 didReceiveResponse:(id)a2 completionHandler:(id /* block */)a3;
- (void)_handleBadPasswordResponse;
- (void)overrideRequestHeader:(id)a0 withValue:(id)a1;

@end

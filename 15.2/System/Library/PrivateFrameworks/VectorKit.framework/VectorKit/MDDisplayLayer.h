@class CALayer, NSString, VKSharedResources;
@protocol GGLRenderQueueSource, GGLLayer;

@interface MDDisplayLayer : NSObject <GGLLayerDelegate, MDRenderTarget> {
    struct shared_ptr<md::TaskContext> { struct TaskContext *__ptr_; struct __shared_weak_count *__cntrl_; } _taskContext;
    void *_activeRenderQueue;
    struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { void /* function */ **_vptr$_retain_ptr; VKSharedResources *_obj; struct _retain_objc { } _retain; struct _release_objc { } _release; } _sharedResources;
    struct deque<std::function<void ()>, std::allocator<std::function<void ()>>> { struct __split_buffer<std::function<void ()> *, std::allocator<std::function<void ()> *>> { void **__first_; void **__begin_; void **__end_; struct __compressed_pair<std::function<void ()> **, std::allocator<std::function<void ()> *>> { void **__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<std::function<void ()>>> { unsigned long long __value_; } __size_; } _completionHandlers;
    struct RenderTargetFormat { int colorFormats[4]; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _sRGBFormat;
    void *_device;
    void *_renderer;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _debugConsoleManagerCreationLock;
    struct unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>> { struct __compressed_pair<md::DebugConsoleManager *, std::default_delete<md::DebugConsoleManager>> { struct DebugConsoleManager *__value_; } __ptr_; } _debugConsoleManager;
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _sRGBRenderTarget;
    struct unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>> { struct __compressed_pair<ggl::RenderBuffer *, std::default_delete<ggl::RenderBuffer>> { struct RenderBuffer *__value_; } __ptr_; } _depthStencil;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBMsaaTexture;
    struct shared_ptr<ggl::Texture2DAbstract> { struct Texture2DAbstract *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBTexture;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _sRGBColorTextures[3];
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _blitRenderTarget;
    struct RenderTargetFormat { int colorFormats[4]; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _blitFormat;
    struct RenderTargetFormat { int colorFormats[4]; unsigned long long colorFormatsCount; unsigned int samples; int depthStencilFormat; } _linearFormat;
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> { struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> { struct RenderTarget *__value_; } __ptr_; } _linearRenderTarget;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearTexture;
    struct shared_ptr<ggl::RenderBuffer> { struct RenderBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _linearColorTextures[3];
    BOOL _requiresMultisampling;
    struct CGContext { } *_snapshotContext;
    BOOL _readPixels;
    BOOL _allowBlitToDrawable;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _bounds;
    double _contentsScale;
    unsigned long long _signpostId;
    id _enableEnhancedCommandBufferErrorsConfigListener;
    id _enableCommandQueueResetOnErrorConfigListener;
    id _commandQueueResetMaxAttemptsCountConfigListener;
}

@property (readonly, nonatomic) CALayer<GGLLayer> *layer;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) double contentScale;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (nonatomic) id<GGLRenderQueueSource> renderSource;
@property (readonly, nonatomic) BOOL multiSample;
@property (readonly, nonatomic) BOOL supportsFramebufferFetch;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } *format;
@property (readonly, nonatomic) void *renderer;
@property (readonly, nonatomic) BOOL shouldRasterize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } sizeInPixels;
@property (readonly, nonatomic) void *finalRenderTarget;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } *linearFormat;
@property (readonly, nonatomic) void *linearRenderTarget;
@property (readonly, nonatomic) void *blitRenderTarget;
@property (readonly, nonatomic) const struct RenderTargetFormat { int x0[4]; unsigned long long x1; unsigned int x2; int x3; } *blitFormat;
@property (readonly, nonatomic) float averageFPS;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setNeedsDisplayOnBoundsChange:(BOOL)a0;
- (void)setContentsGravity:(id)a0;
- (void)didReceiveMemoryWarning;
- (void)drawToTexture:(void *)a0 withRenderQueue:(void *)a1 completionHandler:(id /* block */)a2;
- (void)drawInContext:(struct CGContext { } *)a0;
- (BOOL)isDelayedRenderQueueConsumptionSupported;
- (void)enablePerformanceHUD:(id)a0;
- (void)didEnterBackground;
- (void)createRenderTarget;
- (void)didPresent;
- (void)drawToTexture:(void *)a0 withRenderQueue:(void *)a1;
- (struct shared_ptr<ggl::BitmapDataBase> { struct BitmapDataBase *x0; struct __shared_weak_count *x1; })bitmapData;
- (struct __IOSurface { } *)flipImage;
- (void)_didReadPixels:(void *)a0;
- (void)willUpdateFrameTexture;
- (void)destroyRenderTarget;
- (void).cxx_destruct;
- (void *)renderQueueForTimestamp:(double)a0;
- (void *)_renderQueueForTimestamp:(double)a0 prepareHandler:(id /* block */)a1;
- (void)expandedPerformanceHUD:(id)a0;
- (BOOL)hasRenderTarget;
- (void)prepareTargetsForPlatormsWithFramebufferFetch:(const void *)a0;
- (void)disablePerformanceHUD:(id)a0;
- (void *)debugConsoleForId:(int)a0;
- (void)_prepareTexture:(const void *)a0 isDrawable:(BOOL)a1;
- (void)renderWithTimestamp:(double)a0 completion:(struct function<void ()> { struct __value_func<void ()> { struct type { unsigned char x0[24]; } x0; void *x1; } x0; })a1;
- (void)willPresent;
- (void)setOpaque:(BOOL)a0;
- (void)prepareTargetsForPlatormsWithoutFramebufferFetch:(const void *)a0 isDrawable:(BOOL)a1;
- (void)prepareTexture:(const void *)a0;
- (void)didUpdateFrameTexture;
- (void)dealloc;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toLayer:(id)a1;
- (void)setBackgroundColor:(struct CGColor { } *)a0;
- (id).cxx_construct;
- (id)initWithContentScale:(double)a0 useMultisampling:(BOOL)a1 extraColorFormats:(const void *)a2 shouldRasterize:(BOOL)a3 allowBlitToDrawable:(BOOL)a4 taskContext:(const void *)a5 device:(void *)a6 sharedResources:(id)a7 signpostId:(unsigned long long)a8;

@end

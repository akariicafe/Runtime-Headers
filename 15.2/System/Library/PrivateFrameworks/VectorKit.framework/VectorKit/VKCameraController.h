@class GEOMapRegion, NSString, VKCamera;
@protocol MDRenderTarget, VKMapViewCameraDelegate;

@interface VKCameraController : NSObject <VKCameraController> {
    VKCamera *_vkCamera;
    struct shared_ptr<gdc::Camera> { struct Camera *__ptr_; struct __shared_weak_count *__cntrl_; } _camera;
    id<MDRenderTarget> _canvas;
    id<VKMapViewCameraDelegate> _cameraDelegate;
    BOOL _gesturing;
    unsigned long long _regionChangeCount;
    BOOL _inProgressRegionChangeIsAnimated;
    struct VKEdgeInsets { float top; float left; float bottom; float right; } _edgeInsets;
    BOOL _edgeInsetsAnimating;
}

@property (readonly, nonatomic) double presentationHeading;
@property (nonatomic) BOOL isPitchEnabled;
@property (nonatomic) BOOL isRotateEnabled;
@property (nonatomic) BOOL staysCenteredDuringPinch;
@property (nonatomic) BOOL staysCenteredDuringRotation;
@property (readonly, nonatomic) BOOL canPitch;
@property (readonly, nonatomic) BOOL canRotate;
@property (nonatomic) struct { double x0; double x1; } centerCoordinate;
@property (nonatomic) double distanceFromCenterCoordinate;
@property (nonatomic) double heading;
@property (nonatomic) double pitch;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (readonly, nonatomic) double altitude;
@property (readonly, nonatomic) double minPitch;
@property (readonly, nonatomic) double maxPitch;
@property (readonly, nonatomic) BOOL isPitched;
@property (readonly, nonatomic) BOOL isRotated;
@property (readonly, nonatomic) BOOL isFullyPitched;
@property (readonly, nonatomic) struct MapDataAccess { } *mapDataAccess;
@property (readonly, nonatomic) struct AnimationRunner { } *animationRunner;
@property (readonly, nonatomic) struct RunLoopController { } *runLoopController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (BOOL)canZoomInForTileSize:(long long)a0;
- (void)updateWithTimestamp:(double)a0 withContext:(void *)a1;
- (double)topDownMinimumZoomLevel;
- (BOOL)usesVKCamera;
- (long long)tileSize;
- (double)topDownMinimumZoomLevelForTileSize:(long long)a0;
- (struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; })camera;
- (void)canvasDidLayout;
- (double)currentZoomLevel;
- (void)updateCameraToPositionOrientationLimits;
- (void)setEdgeInsetsAnimating:(BOOL)a0;
- (BOOL)isAnimating;
- (id)vkCamera;
- (double)minimumZoomLevel;
- (double)maximumZoomLevel;
- (double)zoomLevelAdjustmentForTileSize:(long long)a0;
- (id)initWithMapDataAccess:(struct MapDataAccess { } *)a0 animationRunner:(struct AnimationRunner { } *)a1 runLoopController:(struct RunLoopController { } *)a2 cameraDelegate:(id)a3;
- (void)beginRegionChange:(BOOL)a0;
- (void)endRegionChange;
- (void)stylesheetDidReload;
- (double)maximumZoomLevelForTileSize:(long long)a0;
- (BOOL)edgeInsetsAnimating;
- (void).cxx_destruct;
- (BOOL)canZoomOutForTileSize:(long long)a0;
- (id)detailedDescription;
- (BOOL)isChangingRegion;
- (double)minimumZoomLevelForTileSize:(long long)a0;
- (void)checkAndResetRegionChangeCount;
- (struct CGPoint { double x0; double x1; })centerScreenPoint;
- (struct CGPoint { double x0; double x1; })scaledScreenPointForPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct Matrix<int, 2, 1> { int x0[2]; })cursorFromScreenPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)stylesheetDidChange;
- (BOOL)centerCoordinate:(struct { double x0; double x1; } *)a0 andDistanceFromCenter:(double *)a1 forMapRegion:(id)a2;
- (void)setGesturing:(BOOL)a0;
- (BOOL)isGesturing;
- (struct VKEdgeInsets { float x0; float x1; float x2; float x3; })edgeInsets;
- (void)populateDebugNode:(void *)a0 withOptions:(const void *)a1;
- (id)canvas;
- (double)currentZoomLevelForTileSize:(long long)a0;
- (id)cameraDelegate;
- (void)setCamera:(struct shared_ptr<gdc::Camera> { struct Camera *x0; struct __shared_weak_count *x1; })a0;
- (void)dealloc;
- (id).cxx_construct;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x0; float x1; float x2; float x3; })a0;
- (void)setCanvas:(id)a0;
- (void)setVkCamera:(id)a0;
- (void)setCameraDelegate:(id)a0;
- (BOOL)wantsTimerTick;

@end

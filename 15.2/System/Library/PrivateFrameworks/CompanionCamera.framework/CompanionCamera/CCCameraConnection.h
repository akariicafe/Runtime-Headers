@class NSDate, NSString, NSXPCConnection, CCCameraConnectionInternal, FigCameraViewfinder, FigCameraViewfinderSession, NSObject;
@protocol CCCameraConnectionDelegate, OS_dispatch_source;

@interface CCCameraConnection : NSObject <CCCameraConnectionProtocol, FigCameraViewfinderDelegate, FigCameraViewfinderSessionDelegate> {
    CCCameraConnectionInternal *_internal;
    NSXPCConnection *_xpc;
    id _orientationChangeObserver;
    NSString *_previewEndpoint;
    FigCameraViewfinder *_remoteViewfinder;
    FigCameraViewfinderSession *_remoteViewfinderSession;
    unsigned long long _desiredPreviewState;
    unsigned long long _currentPreviewState;
    unsigned long long _interruptionCount;
    NSObject<OS_dispatch_source> *_zoomTimer;
    float _pendingZoomAmount;
    float _lastSentZoomAmount;
    int _deviceConnectedNotificationToken;
    int _deviceDisconnectedNotificationToken;
    BOOL _burstInProgress;
    BOOL _capturing;
    NSDate *_captureStartDate;
    long long _shallowDepthOfFieldStatus;
}

@property (weak, nonatomic) id<CCCameraConnectionDelegate> delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (long long)_captureDevice;
- (oneway void)xpc_ensureSwitchedToOneOfSupportedCaptureModes:(id)a0 reply:(id /* block */)a1;
- (void)_checkin;
- (void)_handleInvalidation;
- (oneway void)xpc_setCaptureDevice:(long long)a0 reply:(id /* block */)a1;
- (oneway void)xpc_setHDRMode:(long long)a0;
- (oneway void)xpc_stopCaptureWithReply:(id /* block */)a0;
- (oneway void)xpc_toggleCameraDevice;
- (oneway void)xpc_endBurstCaptureWithReply:(id /* block */)a0;
- (oneway void)xpc_setFocusPoint:(id)a0;
- (oneway void)xpc_suspend;
- (oneway void)xpc_setIrisMode:(long long)a0;
- (void)_handleInterruption;
- (void)willStartCapturing;
- (void)modeSelected:(long long)a0;
- (void)burstCaptureDidStop;
- (void)didStopCapture;
- (void)burstCaptureNumberOfPhotosDidChange:(unsigned long long)a0;
- (void)didStartCaptureTimer;
- (void)countdownCanceled;
- (void)zoomDidChange:(double)a0;
- (void)cameraViewfinderSessionPreviewStreamDidOpen:(id)a0;
- (long long)_captureMode;
- (void)close;
- (double)_zoomAmount;
- (void)openPreview;
- (BOOL)isPreviewConnected;
- (BOOL)_supportsMomentCapture;
- (BOOL)_isShowingLivePreview;
- (void)irisModeDidChange;
- (long long)_currentOrientation;
- (BOOL)isOpen;
- (oneway void)xpc_startCaptureWithMode:(long long)a0 reply:(id /* block */)a1;
- (BOOL)_zoomSupport;
- (oneway void)xpc_cancelCountdown;
- (void)open;
- (oneway void)xpc_setPreviewEndpoint:(id)a0;
- (void)cameraViewfinder:(id)a0 viewfinderSessionDidEnd:(id)a1;
- (void)switchedOrientation:(long long)a0;
- (long long)_flashMode;
- (void)cameraViewfinder:(id)a0 viewfinderSessionDidBegin:(id)a1;
- (void)_performPreviewStateTransitionsIfNeeded;
- (long long)_hdrSupport;
- (void)captureDeviceDidChange:(long long)a0;
- (void)didUpdateThumbnailWithData:(id)a0 isVideo:(BOOL)a1;
- (void)captureDeviceDidChange;
- (void)flashModeDidChange;
- (id)_supportedCaptureModes;
- (void).cxx_destruct;
- (oneway void)xpc_setZoom:(float)a0 reply:(id /* block */)a1;
- (void)cameraViewfinderSession:(id)a0 previewStreamDidCloseWithStatus:(int)a1;
- (id)init;
- (void)_zoomTimerFired;
- (id)_supportedCaptureDevices;
- (oneway void)xpc_setCaptureMode:(long long)a0 reply:(id /* block */)a1;
- (void)showingLivePreviewDidChange;
- (void)cameraViewfinderSession:(id)a0 didCapturePhotoWithStatus:(int)a1 thumbnailData:(id)a2 timestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })a3;
- (long long)_irisSupport;
- (void)hdrModeDidChange;
- (long long)_flashSupport;
- (void)closePreview;
- (BOOL)_toggleCameraDeviceSupport;
- (void)photoTaken:(id)a0;
- (BOOL)_shouldReportEvent;
- (void)takePhotoWithCountdown:(unsigned long long)a0;
- (oneway void)xpc_setFlashMode:(long long)a0;
- (oneway void)xpc_beginBurstCaptureWithReply:(id /* block */)a0;
- (void)didUpdateShallowDepthOfFieldStatus:(long long)a0;
- (void)dealloc;
- (BOOL)_burstSupport;
- (long long)_irisMode;
- (oneway void)xpc_fetchCurrentStateIncludingSupportedCaptureModes:(BOOL)a0 reply:(id /* block */)a1;
- (long long)_hdrMode;
- (void)burstCaptureWillStart;

@end

@class NSMutableDictionary, NSObject, PXDisplayLink, NSMutableArray, ISWrappedAVAudioSession, AVPlayerItemVideoOutput, NSString, AVPlayerItem, ISWrappedAVPlayer, NSTimer, NSMutableSet, PXVideoContentProvider, PXNumberAnimator, NSError, NSLock;
@protocol OS_dispatch_queue, PXVideoSessionDelegate;

@interface PXVideoSession : PXObservable <ISChangeObserver, AVPlayerItemOutputPullDelegate, PXChangeObserver, ISWrappedAVPlayerDelegate> {
    long long _tokenCounter;
    NSTimer *_playerTimeAdvancementTimer;
    void *_updateQueueIdentifier;
    NSObject<OS_dispatch_queue> *_audioSessionQueue;
    NSObject<OS_dispatch_queue> *_videoWorkQueue;
    NSObject<OS_dispatch_queue> *_stateQueue;
    NSObject<OS_dispatch_queue> *_updateQueue;
    NSMutableArray *_mainQueue_videoViewQueue;
    NSMutableDictionary *_stateQueue_presentationStatesByContext;
    NSMutableSet *_stateQueue_pixelBufferOutputTokens;
    NSMutableDictionary *_stateQueue_pixelBufferOutputSizesByTokens;
    NSMutableSet *_stateQueue_pixelBufferPausedOutputTokens;
    PXDisplayLink *_stateQueue_displayLink;
    id _stateQueue_playbackTimeRangeEndBoundaryObserver;
    long long _stateQueue_playState;
    NSString *_stateQueue_audioSessionCategory;
    unsigned long long _stateQueue_audioSessionCategoryOptions;
    NSString *_stateQueue_audioSessionMode;
    unsigned long long _stateQueue_audioSessionRouteSharingPolicy;
    BOOL _stateQueue_isUpdatingAudioSession;
    BOOL _stateQueue_buffering;
    long long _stateQueue_desiredPlayState;
    AVPlayerItemVideoOutput *_stateQueue_videoOutput;
    struct CGSize { double width; double height; } _stateQueue_videoOutputSize;
    BOOL _stateQueue_videoOutputIsReady;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _stateQueue_videoDuration;
    AVPlayerItem *_stateQueue_currentPlayerItem;
    BOOL _stateQueue_isPlayerTimeAdvancing;
    long long _stateQueue_audioStatus;
    AVPlayerItem *_stateQueue_playerItem;
    struct { struct { long long value; int timescale; unsigned int flags; long long epoch; } start; struct { long long value; int timescale; unsigned int flags; long long epoch; } duration; } _stateQueue_segmentTimeRangeOfOriginalVideo;
    BOOL _stateQueue_isPlayable;
    BOOL _stateQueue_isStalled;
    BOOL _stateQueue_isLoopingEnabled;
    struct { struct { long long value; int timescale; unsigned int flags; long long epoch; } start; struct { long long value; int timescale; unsigned int flags; long long epoch; } duration; } _stateQueue_playbackTimeRange;
    float _stateQueue_volume;
    BOOL _stateQueue_shouldFadeVolumeChange;
    BOOL _stateQueue_seekToBeginningAtEnd;
    BOOL _stateQueue_isAtEnd;
    BOOL _stateQueue_isAtBeginning;
    struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _stateQueue_preferredTransform;
    struct CGSize { double width; double height; } _stateQueue_naturalSize;
    float _stateQueue_nominalFrameRate;
    struct __CVBuffer { } *_stateQueue_currentPixelBuffer;
    BOOL _stateQueue_obtainedFirstPixelBuffer;
    long long _stateQueue_pixelBufferFrameDrops;
    BOOL _stateQueue_readyForSeeking;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _stateQueue_currentTime;
    NSLock *_stateQueue_isPlayableLock;
    NSLock *_stateQueue_readyForSeekingLock;
    NSLock *_stateQueue_videoOutputReadyLock;
    BOOL _stateQueue_shouldDisableAutomaticPixelBufferUpdates;
    ISWrappedAVPlayer *_stateQueue_videoPlayer;
    id _stateQueue_playerTimeObservationToken;
    ISWrappedAVAudioSession *_stateQueue_audioSession;
    struct { unsigned long long needsUpdate; unsigned long long updated; BOOL isPerformingUpdate; BOOL willPerformUpdate; } _updateQueue_updateFlags;
    long long _updateQueue_pendingPlayerItemSeekCount;
    BOOL _updateQueue_didFinishInitializingAudioSession;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _updateQueue_lastPlayerTime;
    long long _updateQueue_playRequestIntervalSignpost;
    PXNumberAnimator *_mainQueue_volumeAnimator;
    BOOL _sharedLock_has4k60Allowance;
}

@property (nonatomic, getter=isBuffering) BOOL buffering;
@property (nonatomic, setter=setAtBeginning:) BOOL isAtBeginning;
@property (nonatomic, setter=setAtEnd:) BOOL isAtEnd;
@property (nonatomic, setter=setStalled:) BOOL isStalled;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } currentTime;
@property (nonatomic) long long audioStatus;
@property (nonatomic, setter=setUpdatingAudioSession:) BOOL isUpdatingAudioSession;
@property (nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } videoDuration;
@property (nonatomic) struct __CVBuffer { } *currentPixelBuffer;
@property (nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } preferredTransform;
@property (nonatomic) struct CGSize { double x0; double x1; } naturalSize;
@property (nonatomic) float nominalFrameRate;
@property (readonly, nonatomic) AVPlayerItemVideoOutput *videoOutput;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } videoOutputSize;
@property (nonatomic) BOOL isVideoOutputReady;
@property (retain, nonatomic) PXDisplayLink *displayLink;
@property (readonly, nonatomic) BOOL isExpectingVideoView;
@property (readonly, nonatomic) ISWrappedAVPlayer *videoPlayer;
@property (weak, nonatomic) id<PXVideoSessionDelegate> delegate;
@property (readonly, nonatomic) PXVideoContentProvider *contentProvider;
@property (readonly, nonatomic) AVPlayerItem *playerItem;
@property (readonly, nonatomic) long long playState;
@property (readonly, nonatomic) BOOL isSegmentOfOriginalVideo;
@property (readonly, nonatomic) struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } segmentTimeRangeOfOriginalVideo;
@property (readonly, nonatomic) float volume;
@property (readonly, copy, nonatomic) NSString *audioSessionCategory;
@property (readonly, nonatomic) NSString *audioSessionMode;
@property (readonly, nonatomic) unsigned long long audioSessionRouteSharingPolicy;
@property (readonly, nonatomic) unsigned long long audioSessionCategoryOptions;
@property (readonly, nonatomic) NSError *error;
@property (readonly, nonatomic) NSString *debugDetailedDescription;
@property (readonly, nonatomic) NSString *statusDescription;
@property (readonly, nonatomic) BOOL isPlayable;
@property (readonly, nonatomic) long long desiredPlayState;
@property (readonly, nonatomic) BOOL preventsSleepDuringVideoPlayback;
@property (readonly, nonatomic) BOOL allowsExternalPlayback;
@property (readonly, nonatomic, getter=isLoopingEnabled) BOOL loopingEnabled;
@property (readonly, nonatomic) struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } playbackTimeRange;
@property (readonly, nonatomic) BOOL seekToBeginningAtEnd;
@property (readonly, nonatomic) BOOL isReadyForSeeking;
@property (readonly, nonatomic) BOOL shouldDisableAutomaticPixelBufferUpdates;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)_performChanges:(id /* block */)a0;
- (void)setPlayable:(BOOL)a0;
- (struct CGImage { } *)generateSnapshotImage;
- (id)mutableChangeObject;
- (void)didPerformChanges;
- (void)performChanges:(id /* block */)a0;
- (void)setVideoPlayer:(id)a0;
- (void)setPreventsSleepDuringVideoPlayback:(BOOL)a0;
- (void)avPlayer:(id)a0 itemDidPlayToEnd:(id)a1;
- (void)_updatePlayerVolume;
- (void)setDesiredPlayState:(long long)a0;
- (void)outputMediaDataWillChange:(id)a0;
- (void)setLoopingEnabled:(BOOL)a0;
- (void)_handleDisplayLink:(id)a0;
- (void)cancelLoading;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 completionHandler:(id /* block */)a1;
- (void)setAudioSession:(id)a0;
- (void)setVolume:(float)a0 withFade:(BOOL)a1;
- (void)performChanges:(id /* block */)a0 withPresentationContext:(long long)a1 presenter:(void *)a2;
- (void)setSeekToBeginningAtEnd:(BOOL)a0;
- (void)setPlaybackTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0;
- (void)loadIfNeededWithPriority:(long long)a0;
- (void).cxx_destruct;
- (void)observable:(id)a0 didChange:(unsigned long long)a1 context:(void *)a2;
- (id)init;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2 completionHandler:(id /* block */)a3;
- (void)setAudioSessionCategory:(id)a0 mode:(id)a1 routeSharingPolicy:(unsigned long long)a2 options:(unsigned long long)a3;
- (void)enterPresentationContext:(long long)a0 presenter:(void *)a1;
- (void)leavePresentationContext:(long long)a0 presenter:(void *)a1;
- (id)audioSession;
- (void)dealloc;
- (void)setAllowsExternalPlayback:(BOOL)a0;
- (void)_updatePlayerItem;
- (void)_handleMediaServicesWereResetNotification:(id)a0;
- (id)performFinalCleanup;
- (id)initWithContentProvider:(id)a0;
- (id)initWithContentProvider:(id)a0 videoPlayer:(id)a1;
- (id)_stateQueue_newPresentationStateFromCurrentWithPresenter:(void *)a0;
- (void)prewarmVideoView;
- (void)_mainQueue_actuallyPrewarmVideoView;
- (id)dequeueVideoView;
- (void)recycleVideoView:(id)a0;
- (void)requestPixelBufferOutputWithRequestIdentifier:(id)a0 maxOutputSize:(struct CGSize { double x0; double x1; })a1;
- (void)cancelPixelBufferOutputWithRequestIdentifier:(id)a0;
- (void)_audioSessionQueue_updateAudioSessionWithCategory:(id)a0 mode:(id)a1 routeSharingPolicy:(unsigned long long)a2 options:(unsigned long long)a3;
- (void)seekToExactTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 updatePixelBuffer:(BOOL)a1 waitUntilComplete:(BOOL)a2;
- (void)_updateCurrenPixelBufferAfterSeekingToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 completionLock:(id)a1;
- (void)setShouldDisableAutomaticPixelBufferUpdates:(BOOL)a0;
- (BOOL)_request4k60StreamAllowance;
- (void)_relinquishAny4k60StreamAllowance;
- (void)_handleContentLoadingResult:(id)a0;
- (void)_updateFromCurrentPresentationState;
- (void)_audioSessionQueue_initializeAudioSession;
- (void)_didFinishInitializingAudioSession;
- (id)playbackTimeRangeEndBoundaryObserver;
- (void)setPlaybackTimeRangeEndBoundaryObserver:(id)a0;
- (id)_newVideoView;
- (void)_updateVideoOutput;
- (void)_addOutput:(id)a0 toPlayerItem:(id)a1;
- (void)_updateCurrentPixelBuffer;
- (void)_videoWorkQueue_updateCurrentPixelBufferWithVideoOutput:(id)a0 outputTime:(double)a1;
- (void)_updateDisplayLinkState;
- (long long)pixelBufferFrameDropsCount;
- (void)incrementPixelBufferFrameDropsCount;
- (void)_updateDuration;
- (void)setVideoOutput:(id)a0 size:(struct CGSize { double x0; double x1; })a1;
- (id)currentPlayerItem;
- (void)setCurrentPlayerItem:(id)a0;
- (BOOL)isPlayerTimeAdvancing;
- (void)setPlayerTimeAdvancing:(BOOL)a0;
- (void)setPlayerItem:(id)a0 segmentTimeRangeOfOriginalVideo:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1;
- (void)setIsReadyForSeeking:(BOOL)a0;
- (void)setPlayState:(long long)a0;
- (unsigned long long)pixelBufferOutputTokenCount;
- (id)pixelBufferOutputSizes;
- (void)_handleTrackGeometryDidLoad;
- (void)_avPlayerTimeDidChange:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)_handlePlayerTimeAdvancementTimer:(id)a0;
- (void)_updatePlayability;
- (void)_handlePlayabilityDidLoadForAsset:(id)a0;
- (void)_setPlayabilityFromAsset:(id)a0;
- (void)_updateAudioStatus;
- (void)_updateTrackGeometry;
- (void)_updateAtBeginningOrEnd;
- (void)_updateAtBeginningOrEndWithPlayerItemDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 success:(BOOL)a1 error:(id)a2;
- (void)_updateBuffering;
- (void)_updateStalled;
- (void)_updatePlayerItemInPlayer;
- (void)_updateVolumeAnimator;
- (void)_updateReadyForSeeking;
- (void)_updatePlayState;
- (void)_updateCurrentPlayerItem;
- (void)_updateAVPlayerPlayState;
- (void)_removeAllVideoOutputs;
- (void)_updateQueue_seekToPlaybackTimeRangeStartIfNeeded;
- (void)_handlePlayerItemSeekDidFinish;
- (void)_updateQueue_decrementPendingPlayerItemSeekCount;
- (void)_handleDidReachPlaybackTimeRangeEnd;
- (void)_logPlaybackState;
- (id)_playbackStateDescription;
- (void)_loadAssetTracksIfNeeded;
- (void)_handleAssetTracksDidLoadForAsset:(id)a0;
- (void)_handleAudioSessionOutputVolumeDidChangeFromVolume:(float)a0 toVolume:(float)a1;
- (BOOL)_isOnUpdateQueue;
- (void)_assertOnUpdateQueue;
- (void)_performBlockOnUpdateQueue:(id /* block */)a0;

@end

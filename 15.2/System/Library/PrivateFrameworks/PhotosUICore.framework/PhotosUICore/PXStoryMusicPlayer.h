@class NSTimer, NSString, NSDate, PXUpdater, PXNumberAnimator, PXAudioPlayer, NSObject, PXStoryModel;
@protocol OS_dispatch_queue, PXAudioAsset, PXStorySongResource, PXAudioCueSource, PXAudioCueProvider;

@interface PXStoryMusicPlayer : PXObservable <PXStoryQueueParticipant, PXChangeObserver, PXStoryDiagnosticHUDContentProvider, PXMutableStoryMusicPlayer, PXSettingsKeyObserver, PXAudioPlayerAVAudioSessionDelegate, PXStoryPacingCueSource>

@property (readonly, nonatomic) PXAudioPlayer *player;
@property (readonly, nonatomic) PXUpdater *updater;
@property (nonatomic) long long cueRequestID;
@property (readonly, nonatomic) PXNumberAnimator *duckingVolumeAnimator;
@property (readonly, nonatomic) PXNumberAnimator *focusVolumeAnimator;
@property (readonly, nonatomic) PXNumberAnimator *fadeOutVolumeAnimator;
@property (retain, nonatomic) id<PXAudioAsset> currentAudioAsset;
@property (retain, nonatomic) id<PXAudioCueSource> cueSource;
@property (nonatomic) long long readinessStatus;
@property (nonatomic) long long desiredPlayState;
@property (nonatomic) struct { long long value; int timescale; unsigned int flags; long long epoch; } targetDuration;
@property (nonatomic) long long cuesVersion;
@property (copy, nonatomic) NSString *pauseReason;
@property (copy, nonatomic) NSString *duckingReason;
@property (retain, nonatomic) NSDate *touchingBeganDate;
@property (nonatomic) BOOL shouldDuckForCurrentTouch;
@property (nonatomic) long long bufferingEvents;
@property (nonatomic) long long currentSongResourceRequestID;
@property (retain, nonatomic) NSTimer *playbackTimer;
@property (nonatomic) BOOL isDucked;
@property (nonatomic) float duckedVolume;
@property (readonly, nonatomic) id<PXStorySongResource> currentSongResource;
@property (readonly, nonatomic) long long audioDesiredPlayState;
@property (retain, nonatomic) id<PXAudioCueProvider> cueProvider;
@property (readonly, nonatomic) PXStoryModel *model;
@property (readonly, nonatomic) BOOL isActive;
@property (nonatomic) long long actionAtEnd;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *storyQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } currentTime;
@property (readonly, nonatomic) id<PXAudioCueSource> audioCueSource;

- (void)setIsActive:(BOOL)a0;
- (void)settings:(id)a0 changedValueForKey:(id)a1;
- (void)didPerformChanges;
- (void)performChanges:(id /* block */)a0;
- (void)_updatePlayerVolume;
- (void)replay;
- (void).cxx_destruct;
- (void)observable:(id)a0 didChange:(unsigned long long)a1 context:(void *)a2;
- (id)init;
- (id)initWithModel:(id)a0;
- (id)diagnosticTextForHUDType:(long long)a0 displaySize:(struct CGSize { double x0; double x1; })a1;
- (id)diagnosticErrorsByComponentForHUDType:(long long)a0;
- (id)diagnosticCueStringForSize:(struct CGSize { double x0; double x1; })a0 withIndicatorTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 rangeIndicatorTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a2;
- (void)_invalidateError;
- (id)diagnosticTextForHUDType:(long long)a0;
- (void)_invalidateCueSource;
- (void)_updateCueSource;
- (void)_invalidateDesiredPlayState;
- (void)_updateDesiredPlayState;
- (void)_invalidateCurrentSongResource;
- (void)_updateCurrentSongResource;
- (void)_updateModelProperties;
- (id)AVAudioSessionForPlayer:(id)a0;
- (void)setCurrentSongResource:(id)a0 requestID:(long long)a1;
- (void)_invalidateTargetDuration;
- (void)_updateTargetDuration;
- (void)_handleTargetDurationFlexAsset:(id)a0 requestID:(long long)a1;
- (void)_invalidateCurrentAudioAsset;
- (void)_updateCurrentAudioAsset;
- (void)_handleAudioCues:(id)a0 asset:(id)a1 error:(id)a2 requestID:(long long)a3;
- (void)_invalidatePlayerCurrentAsset;
- (void)_updatePlayerCurrentAsset;
- (void)_invalidatePlayerDesiredPlayState;
- (void)_updatePlayerDesiredPlayState;
- (void)_invalidatePlaybackTimer;
- (void)_updatePlaybackTimer;
- (void)_invalidateReadinessStatus;
- (void)_updateReadinessStatus;
- (void)_invalidateModelProprties;
- (void)_invalidatePlayerVolume;
- (void)_invalidateTouchingBeganDate;
- (void)_updateTouchingBeganDate;
- (void)_invalidateDucked;
- (void)_updateDucked;
- (void)_invalidateFadeOutVolumeAnimator;
- (void)_updateFadeOutVolumeAnimator;
- (void)_invalidateDuckingVolumeAnimator;
- (void)_updateDuckingVolumeAnimator;
- (void)_invalidateFocusVolumeAnimator;
- (void)_updateFocusVolumeAnimator;
- (void)_updateError;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })playbackStartTimeForIncomingSong:(id)a0;
- (void)_handlePlayerChangedIsAtEnd;
- (void)_replayIfNeeded;
- (void)_handleDuckingDelayPassedForTouchingBeganDate:(id)a0;
- (void)_handlePlaybackFailureIfNeeded;
- (void)setAudioDesiredPlayState:(long long)a0;
- (void)_handlePlaybackTimerFired:(id)a0;

@end

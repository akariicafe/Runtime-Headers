@class MTLRenderPassDescriptor, CAMetalLayer, NSTimer, CADisplayLink, MPSImageGaussianBlur;
@protocol MTLRenderPipelineState, MTLDevice, MTLTexture, MTLCommandQueue, MTLBuffer;

@interface SUICOrbView : UIView {
    CAMetalLayer *_metalLayer;
    CADisplayLink *_displayLink;
    id /* block */ _offCompletion;
    id<MTLDevice> _device;
    id<MTLCommandQueue> _commandQueue;
    id<MTLBuffer> _dynamicUniformBuffer;
    id<MTLRenderPipelineState> _siriChipBackfacePipeline;
    id<MTLRenderPipelineState> _siriChipFrontfacePipeline;
    id<MTLRenderPipelineState> _siriShadowPipeline;
    id<MTLRenderPipelineState> _siriCompositePipeline;
    id<MTLRenderPipelineState> _sphereMaskPipeline;
    id<MTLRenderPipelineState> _siriAddBlitPipeline;
    id<MTLTexture> _siriChipsTexture;
    id<MTLTexture> _sphereMaskTexture;
    id<MTLTexture> _siriChipsTextureMSAA;
    id<MTLTexture> _sphereMaskTextureMSAA;
    id<MTLTexture> _compositeTextureMSAA;
    id<MTLTexture> _blurChipsTexture;
    id<MTLTexture> _blurMaskTexture;
    id<MTLTexture> _smoothStepTexture;
    id<MTLTexture> _noiseTexture;
    MTLRenderPassDescriptor *_siriChipRenderPassDesc;
    MTLRenderPassDescriptor *_sphereMaskRenderPassDesc;
    MTLRenderPassDescriptor *_finalRenderPassDesc;
    MPSImageGaussianBlur *_mpsBlur;
    struct { long long x; long long y; long long z; } _mpsChipBlurOffset;
    id<MTLBuffer> _siriChipGeom;
    int _chipNumIndexes;
    int _chipIndexBufferOffset;
    id<MTLBuffer> _sphereGeom;
    int _sphereNumIndexes;
    int _sphereIndexBufferOffet;
    void *_uniformBufferAddress;
    struct { void /* unknown type, empty encoding */ columns[4]; } _projectionMatrix;
    struct { struct { void /* unknown type, empty encoding */ columns[4]; } projectionMatrix; void /* unknown type, empty encoding */ offsets; float sphereScale; } _sphereUniforms;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _bubbleSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _energySpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _volumeSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _chipsSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _specularSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _thinkingSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _speakingSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _glowSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _onSpring;
    struct { float value; float curVelocity; float maxAcceleration; float springAmount; } _chipSpring[6];
    void /* unknown type, empty encoding */ _setupRasterSize;
    long long _renderMode;
    float _delayUntilThinking;
    float _bubbleDrawnSize;
    float _averageChipSize;
    float _maxChipSize;
    float _chipRotation;
    float _chipRandomOffset[18];
    float _time;
    float _sinTime;
    float _thinkRotation;
    float _rotationEnergy;
    float _frameEnergy;
    float _framerateEnergyModifier;
    float _thinkingTimeStart;
    BOOL _startingThinkingModeNow;
    BOOL _drawingVeryLastFrame;
    BOOL _resetOnNextFrame;
    BOOL _reduceMotion;
    BOOL _reallocTextures;
    float _powerLevel;
    unsigned long long _framerateType;
    int _framesPerSecond;
    float _oneOverFPS;
}

@property (nonatomic) int currentlyShownChannel;
@property (nonatomic) int numberOfChips;
@property (nonatomic) float bias;
@property (nonatomic) float scale;
@property (nonatomic) float power;
@property (retain, nonatomic) NSTimer *invalidateTimer;
@property (nonatomic) long long mode;

+ (Class)layerClass;

- (void)_initSprings;
- (void)_createNoiseTexture;
- (id)_from:(id)a0 getRenderPipeline:(id)a1 err:(id *)a2;
- (void)_setMode:(long long)a0;
- (void)setPowerLevel:(float)a0;
- (void)_initNoiseOffsets;
- (void)animateToOffWithCompletion:(id /* block */)a0;
- (void)_createSphereBuffer;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)pauseAnimationAndReset;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_from:(id)a0 getComputePipeline:(id)a1 err:(id *)a2;
- (void)_updateMetalTextureRasterSize:(struct CGSize { double x0; double x1; })a0;
- (float)linearPowerLevel;
- (void)_setupSpring:(struct { float x0; float x1; float x2; float x3; } *)a0 withType:(unsigned long long)a1 initialValue:(float)a2;
- (void)prewarmOrb;
- (void).cxx_destruct;
- (void)_loadAssets;
- (void)_createSmoothStepTexture;
- (void)_updateSiriPhysics:(float)a0;
- (void)_loadMetalState;
- (void)invalidate;
- (void)_updateChipsSizesForOnOff;
- (void)_loadMetalPipelines;
- (void)_createSiriChipBuffer;
- (void)_didSetRenderModeFrom:(long long)a0 to:(long long)a1;
- (void)_updateSiriGraphicsState:(double)a0;
- (void)_drawSiriFrame:(id)a0;
- (void)_initCommandQueue;
- (void)_updateRenderModeWithDelta:(float)a0;
- (void)_updateDynamicBufferState;
- (void)_invalidateDisplayLink;

@end

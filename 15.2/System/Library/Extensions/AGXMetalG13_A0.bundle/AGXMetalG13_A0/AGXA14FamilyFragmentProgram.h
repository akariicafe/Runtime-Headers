@class NSString, NSArray, NSObject;
@protocol OS_dispatch_group, OS_dispatch_data;

@interface AGXA14FamilyFragmentProgram : NSObject {
    struct FragmentProgram { struct VectorMap<AGX::FragmentProgramKey, AGX::Program<AGX::G13::FragmentProgramVariant, AGX::FragmentProgramKey, AGX::G13::IndirectArgumentLayout, AGXA14FamilyIndirectArgumentBufferLayout>::VariantEntry, 4> { struct Chunk { struct FragmentProgramKey { void /* function */ **_vptr$ProgramKey; int streamType; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int *__begin_; unsigned int *__end_; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int *__value_; } __end_cap_; } stream; struct _AGCFragmentContextStateAGP { union _AGCFragmentState { struct { unsigned char alphaToCoverage : 1; unsigned char alphaToOne : 1; unsigned char sampleCoverage : 1; unsigned char sampleCoverageInvert : 1; unsigned char depthStencilWriteDisabled : 1; unsigned char logicOp : 1; unsigned char logicOpState : 5; unsigned char alphaTest : 1; unsigned char alphaTestFunc : 4; unsigned char smoothPoints : 1; unsigned char pointSpriteEnabled : 1; unsigned char outputPointSize : 1; unsigned char shaderDebugEnable : 1; unsigned short unused : 12; } ; unsigned int key; } fragmentState; union _AGCColorMaskState { struct { unsigned char redEnableBits : 8; unsigned char greenEnableBits : 8; unsigned char blueEnableBits : 8; unsigned char alphaEnableBits : 8; } ; unsigned int key; } colorMaskState; unsigned long long mutableBuffers; union _AGCBlendState { struct { unsigned char enable : 1; unsigned char src : 5; unsigned char dst : 5; unsigned char srcA : 5; unsigned char dstA : 5; unsigned char equation : 3; unsigned char equationA : 3; unsigned char unused : 5; } ; unsigned int key; } blendState[8]; union _AGCPCFStateAGP { struct { unsigned int depthCompareClampMask : 32; } ; unsigned int key; } pcf; union _AGCCommonContextStateAGP { struct { unsigned char genCompilerStatistics : 1; unsigned char genTelemetryStatistics : 1; unsigned char disableTextureRWBoundsCheck : 1; unsigned char debugInstrumentationEnabled : 1; unsigned char bufferBoundsCheckMode : 3; unsigned char disableDMAPromotion : 1; unsigned int unused : 24; } ; unsigned int key; } common; union { struct { unsigned char fragmentOnly : 1; unsigned char openglMode : 1; unsigned char customBorderColor : 1; unsigned char enableHLSLDiscardSemantics : 1; unsigned char textureWriteFPRoundingMode : 2; unsigned char supportExternalVisibleFunctions : 1; unsigned char debugTraceBufferEnabled : 1; unsigned char usesMeshShader : 1; unsigned int unused : 23; } ; unsigned int key; } ; } cs; struct _AGCDrawBufferState { struct array<_AGCDrawBuffer, 8> { union _AGCDrawBuffer { struct { unsigned char pbeSourceFormat : 5; unsigned char numWrittenComponents : 3; unsigned char gammaCorrection : 1; unsigned char colorSpaceConversion : 3; unsigned char preEmitSwizzle : 3; unsigned char outputPartitionOffset : 8; unsigned short unused : 9; } ; unsigned int key; } __elems_[8]; } encoded; union { struct { unsigned char enabledBits : 8; unsigned char sampleCount : 4; unsigned char colorSampleCount : 4; unsigned char outputPartitionSize : 8; unsigned char LIBSpilling : 1; unsigned char unused : 7; } ; unsigned int key; } ; } ds; struct VertexProgramVaryings { struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } varying_semantics; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } varying_types; } vv; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned long long __cap_; } __l; struct __short { char __data_[23]; struct { unsigned char __size_; } ; } __s; struct __raw { unsigned long long __words[3]; } __r; } ; } __value_; } __r_; } fragment_buffer_desc; BOOL supportIndirectCommandBuffers; struct ProgramKeyDynamicLibrariesImpl { struct vector<void *, std::allocator<void *>> { void **__begin_; void **__end_; struct __compressed_pair<void **, std::allocator<void *>> { void **__value_; } __end_cap_; } dynamic_libraries_hash; } dynamic_libraries; struct ProgramKeyVisibleFunctionTableImpl { struct vector<MTLUINT256_t, std::allocator<MTLUINT256_t>> { struct *__begin_; struct *__end_; struct __compressed_pair<MTLUINT256_t *, std::allocator<MTLUINT256_t>> { struct *__value_; } __end_cap_; } visible_functions_hash; } visible_functions; unsigned long long non_reflection_pipeline_options; } keys[4]; struct VariantEntry { NSObject<OS_dispatch_group> *ve_group; struct FragmentProgramVariant *variant; unsigned long long error; NSString *message; BOOL needsReattempt; } values[4]; struct Chunk *next; } initial_chunk; struct Chunk *head; unsigned int count; struct VariantEntry { NSObject<OS_dispatch_group> *ve_group; struct FragmentProgramVariant *variant; unsigned long long error; NSString *message; BOOL needsReattempt; } default_value; } variants; unsigned long long requested_options; unsigned long long completed_options; NSObject<OS_dispatch_data> *reflection_data; struct AGXA_UnfairLock { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } lock; struct IndirectArgumentLayout *argument_layouts[128]; BOOL has_layouts; NSArray *relocations; } _impl;
}

- (void).cxx_destruct;
- (id).cxx_construct;

@end

@class NSString;

@interface MPSExternalCNNBinary : MPSExternalPluginBase <MPSExternalCNNBinary>

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (unsigned long long)encodeWithFilter:(id)a0 encoder:(id)a1 commandBuffer:(id)a2 callInfo:(const struct { struct MPSImageInfo { id x0; struct MPSPixelInfo *x1; unsigned int x2; unsigned long long x3; unsigned long long x4; id x5; unsigned long long x6; } x0; struct MPSImageInfo { id x0; struct MPSPixelInfo *x1; unsigned int x2; unsigned long long x3; unsigned long long x4; id x5; unsigned long long x6; } x1; struct MPSStateInfo { id x0; } x2; struct MPSImageInfo { id x0; struct MPSPixelInfo *x1; unsigned int x2; unsigned long long x3; unsigned long long x4; id x5; unsigned long long x6; } x3; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x4; struct { long long x0; long long x1; long long x2; } x5; struct { long long x0; long long x1; long long x2; } x6; struct { long long x0; long long x1; long long x2; } x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; } *)a3;
- (unsigned long long)encodeBatchWithFilter:(id)a0 encoder:(id)a1 commandBuffer:(id)a2 callInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct *x3; unsigned int x4; id x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; unsigned short x4; unsigned short x5; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x6; } x6; unsigned int x7; id x8; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x9; unsigned int x10; id x11; struct { unsigned short x0; unsigned short x1; unsigned short x2; unsigned short x3; } x12; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x13; struct { long long x0; long long x1; long long x2; } x14; struct { long long x0; long long x1; long long x2; } x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; } *)a3;
- (unsigned long long)encodeToCommandBuffer:(id)a0 computeCommandEncoder:(id)a1 options:(unsigned long long)a2 primaryTexture:(id)a3 primaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a4 secondaryTexture:(id)a5 secondaryInfo:(const struct { unsigned long long x0; unsigned long long x1; struct { long long x0; long long x1; long long x2; } x2; struct { long long x0; long long x1; long long x2; } x3; unsigned long long x4; unsigned long long x5; } *)a6 destinationTexture:(id)a7 destinationInfo:(const struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; struct { struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x0; struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; } x1; } x3; unsigned long long x4; } *)a8;

@end

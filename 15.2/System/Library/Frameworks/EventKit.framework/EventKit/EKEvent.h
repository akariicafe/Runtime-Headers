@class NSURL, NSDate, EKEventStore, EKSuggestedEventInfo, EKVirtualConference, EKCalendarDate, EKParticipant, EKReadWriteLock, NSString, NSSet, EKRecurrenceIdentifier, NSArray, NSNumber, EKStructuredLocation;

@interface EKEvent : EKCalendarItem <EKJunkInvitationProtocol_Private, CalDateRangeProtocol> {
    EKStructuredLocation *_cachedLocationPrediction;
    NSDate *_cachedLocationPredictionExpirationDate;
    BOOL _locationPredictionFrozen;
    BOOL _locationPredictionAllowed;
    EKReadWriteLock *_locationPredictionLock;
}

@property (retain, nonatomic) NSArray *locations;
@property (readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property (copy, nonatomic) EKCalendarDate *occurrenceStartDate;
@property (copy, nonatomic) EKCalendarDate *occurrenceEndDate;
@property (nonatomic) BOOL occurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;
@property (copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;
@property (nonatomic) BOOL requiresDetachDueToSnoozedAlarm;
@property (nonatomic) int clearModifiedFlags;
@property (readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property (readonly, nonatomic) NSDate *recurrenceDate;
@property (readonly, nonatomic) NSString *eventOccurrenceID;
@property (nonatomic) long long privacyLevel;
@property (readonly, nonatomic) BOOL locationIsAConferenceRoom;
@property (readonly, nonatomic) double duration;
@property (nonatomic) double travelTime;
@property (readonly, nonatomic) NSDate *startDateIncludingTravel;
@property (readonly, nonatomic) BOOL isStartDateDirty;
@property (readonly, nonatomic) BOOL isEndDateDirty;
@property (readonly, nonatomic) BOOL allowsTravelTimeModifications;
@property (readonly, nonatomic) BOOL allowsAllDayModifications;
@property (retain, nonatomic) EKStructuredLocation *travelStartLocation;
@property (retain, nonatomic) EKStructuredLocation *endLocation;
@property (readonly, nonatomic) BOOL automaticLocationGeocodingAllowed;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (readonly, nonatomic) BOOL travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (readonly, nonatomic) BOOL eligibleForTravelAdvisories;
@property (readonly, nonatomic) BOOL potentiallyEligibleForTravelAdvisories;
@property (retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
@property (readonly, nonatomic) NSString *locationWithoutPrediction;
@property (readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
@property (retain, nonatomic) NSDate *proposedStartDate;
@property (retain, nonatomic) NSDate *proposedEndDate;
@property (readonly, nonatomic) BOOL allowsProposedTimeModifications;
@property (readonly, nonatomic) BOOL allowsResponseCommentModifications;
@property (nonatomic) BOOL isPhantom;
@property (nonatomic) unsigned long long cachedJunkStatus;
@property (readonly, nonatomic) BOOL isSignificantlyDetached;
@property (readonly, nonatomic) BOOL isSignificantlyDetachedIgnoringParticipation;
@property (readonly, nonatomic) BOOL hasComplexRecurrence;
@property (readonly, nonatomic) NSDate *originalStartDate;
@property (readonly, nonatomic) NSString *UUID;
@property (retain, nonatomic) NSURL *conferenceURL;
@property (nonatomic) BOOL preventConferenceURLDetection;
@property (readonly, nonatomic) NSURL *externalURL;
@property (readonly, nonatomic) NSString *showEventURLString;
@property (readonly, nonatomic) BOOL isEditable;
@property (readonly, nonatomic) BOOL isPrivateEventSharedToMe;
@property (readonly, nonatomic) NSURL *launchURL;
@property (nonatomic) long long participationStatus;
@property (readonly, nonatomic) long long pendingParticipationStatus;
@property (readonly, nonatomic) BOOL allowsParticipationStatusModifications;
@property (readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
@property (readonly, nonatomic, getter=isCurrentUserInvitedAttendee) BOOL currentUserInvitedAttendee;
@property (readonly, nonatomic) BOOL allowsAvailabilityModifications;
@property (readonly, nonatomic) BOOL allowsPrivacyLevelModifications;
@property (readonly, nonatomic) BOOL allowsParticipantStatusModifications;
@property (retain, nonatomic) NSDate *participationStatusModifiedDate;
@property (readonly, nonatomic) BOOL supportsParticipationStatusModificationsWithoutNotification;
@property (nonatomic) long long status;
@property (nonatomic) unsigned long long invitationStatus;
@property (nonatomic) BOOL isAlerted;
@property (nonatomic) BOOL dateChanged;
@property (nonatomic) BOOL timeChanged;
@property (nonatomic) BOOL titleChanged;
@property (nonatomic) BOOL locationChanged;
@property (nonatomic) BOOL videoConferenceChanged;
@property (nonatomic) BOOL attendeeComment;
@property (nonatomic) BOOL attendeeStatus;
@property (nonatomic) BOOL attendeeProposedStartDate;
@property (nonatomic) BOOL attendeeDeclinedStartDate;
@property (nonatomic) BOOL attendeeReplyChanged;
@property (nonatomic) BOOL dontSendNotificationForChanges;
@property (nonatomic) int externalTrackingStatus;
@property (readonly, copy, nonatomic) NSDate *initialStartDate;
@property (readonly, copy, nonatomic) NSDate *initialEndDate;
@property (readonly, nonatomic) BOOL isMaster;
@property (readonly, nonatomic) BOOL isMasterOrDetachedOccurrence;
@property (readonly, nonatomic) BOOL isStatusDirty;
@property (readonly, nonatomic) BOOL isAllDayDirty;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (readonly, nonatomic) double durationIncludingTravel;
@property (readonly, nonatomic) long long travelRoutingMode;
@property (readonly, nonatomic) BOOL canBeRespondedTo;
@property (readonly, nonatomic) BOOL canDetachSingleOccurrence;
@property (readonly, nonatomic) BOOL hasAttachmentChanges;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property (readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property (nonatomic) long long locationPredictionState;
@property (readonly, nonatomic) BOOL hasPredictedLocation;
@property (nonatomic) BOOL firedTTL;
@property (readonly, nonatomic) BOOL responseMustApplyToAll;
@property (nonatomic) unsigned long long junkStatus;
@property (copy, nonatomic) NSSet *actions;
@property (readonly, nonatomic, getter=isPrivacySet) BOOL privacySet;
@property (copy, nonatomic) NSString *recurrenceSet;
@property (retain, nonatomic) EKVirtualConference *virtualConference;
@property (retain, nonatomic) NSString *virtualConferenceTextRepresentation;
@property (readonly, nonatomic) NSString *eventIdentifier;
@property (nonatomic, getter=isAllDay) BOOL allDay;
@property (copy, nonatomic) NSDate *startDate;
@property (copy, nonatomic) NSDate *endDate;
@property (copy, nonatomic) EKStructuredLocation *structuredLocation;
@property (readonly, nonatomic) EKParticipant *organizer;
@property (nonatomic) long long availability;
@property (readonly, nonatomic) BOOL isDetached;
@property (readonly, nonatomic) NSDate *occurrenceDate;
@property (readonly, nonatomic) NSString *birthdayContactIdentifier;
@property (readonly, nonatomic) long long birthdayPersonID;
@property (readonly, nonatomic) NSString *birthdayPersonUniqueID;
@property (readonly, nonatomic) NSString *sendersEmail;
@property (readonly, nonatomic) NSString *sendersPhoneNumber;
@property (readonly, nonatomic) BOOL supportsJunkReporting;
@property (readonly, nonatomic) EKEventStore *eventStore;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)knownKeysToSkipForFutureChanges;
+ (BOOL)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)a0;
+ (id)knownRelationshipSingleValueKeys;
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)a0 supportedAvailabilities:(unsigned long long)a1;
+ (Class)frozenClass;
+ (long long)_eventAvailabilityForParticipantStatus:(long long)a0 supportedEventAvailabilities:(unsigned long long)a1 isAllDayEvent:(BOOL)a2;
+ (id)_modifiedNotificationUserInfoWithIdentifier:(id)a0 forRevert:(BOOL)a1;
+ (id)knownRequireRSVPKeys;
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)a0 error:(id *)a1;
+ (id)externalUriScheme;
+ (id)_relatedCachedTimeKeys;
+ (id)eventWithEventStore:(id)a0;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownKeysToUseForFutureChanges;
+ (id)eventFromICSEvent:(id)a0 inStore:(id)a1;
+ (id)_locationStringForLocations:(id)a0;
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (BOOL)isMultiDayTimedEventWithStartDate:(id)a0 endDate:(id)a1 allDay:(BOOL)a2 inCalendar:(id)a3;
+ (id)knownPerUserPropertyKeys;
+ (id)knownSingleValueKeysForComparison;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (id)_basicChangesRequiringSpanAll;
+ (id)generateUniqueIDWithEvent:(id)a0 originalEvent:(id)a1 calendar:(id)a2;

- (id)uniqueId;
- (unsigned long long)entityType;
- (void)rollback;
- (id)endLocation;
- (id)initWithEventStore:(id)a0;
- (BOOL)_reset;
- (BOOL)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (BOOL)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (BOOL)canMoveToCalendar:(id)a0 fromCalendar:(id)a1 allowedRequirements:(long long)a2 error:(id *)a3;
- (BOOL)_hasAbsoluteAlarms;
- (BOOL)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (BOOL)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
- (void)setBirthdayContactIdentifier:(id)a0;
- (BOOL)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (BOOL)_canMoveOrCopyFromCalendar:(id)a0 toCalendar:(id)a1 allowedRequirements:(long long)a2 error:(id *)a3;
- (id)suggestedStartDateForCurrentRecurrenceRule;
- (BOOL)isValidAttendee:(id)a0 forCalendar:(id)a1;
- (void)setNeedsGeocoding:(BOOL)a0;
- (id)specificIdentifier;
- (void)overrideStartDate:(id)a0;
- (BOOL)needsOccurrenceCacheUpdate;
- (BOOL)_userAddressesRepresentInvitedAttendee:(id)a0 checkEmailAddresses:(BOOL)a1;
- (void)markEventAsAttendeeForward;
- (long long)_parentParticipationStatus;
- (id)lunarCalendarString;
- (void)makeRecurrenceEndDateBased;
- (void)makeRecurrenceEndCountBased;
- (BOOL)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)a0;
- (BOOL)revert;
- (void)setCalendar:(id)a0;
- (void)clearInvitationStatus;
- (void)addEventAction:(id)a0;
- (void)removeEventAction:(id)a0;
- (BOOL)supportsAddingAttachments;
- (void)addConferenceRooms:(id)a0;
- (void)confirmPredictedLocation:(id)a0;
- (void)rejectPredictedLocation;
- (void)setLocationPredictionAllowed:(BOOL)a0;
- (void)forceLocationPredictionUpdate;
- (long long)compareStartDateIncludingTravelWithEvent:(id)a0;
- (BOOL)changingAllDayPropertyIsAllowed;
- (BOOL)hasChangesRequiringSpanAll;
- (id)startOfDayForEndDateInCalendar:(id)a0;
- (BOOL)isMultiDayTimedEventInCalendar:(id)a0;
- (BOOL)saveWithSpan:(long long)a0 error:(id *)a1;
- (id)nextOccurrenceOrDetachmentAfter:(id)a0;
- (BOOL)hasAttendeeProposedTimes;
- (id)duplicateWithOptions:(long long)a0;
- (unsigned long long)countOfAttendeeProposedTimes;
- (BOOL)removeWithSpan:(long long)a0 error:(id *)a1;
- (BOOL)isMainOccurrence;
- (BOOL)isOnlyOccurrence;
- (id)privacyLevelString;
- (BOOL)updateEventToEvent:(id)a0;
- (void)setNeedsOccurrenceCacheUpdate:(BOOL)a0;
- (id)scanForConflicts;
- (BOOL)updateWithGeocodedMapItemAndSaveWithCommit:(id)a0 eventStore:(id)a1 error:(id *)a2;
- (void)acceptProposedTimeNotificationFromAttendee:(id)a0;
- (void)declineProposedTimeNotificationFromAttendee:(id)a0;
- (void)setConferenceURLString:(id)a0;
- (BOOL)isEqual:(id)a0 comparingKeys:(id)a1;
- (BOOL)isDifferentAndHasForwardedAttendeesWithDiff:(id)a0;
- (BOOL)isDifferentAndHasNewProposedTimeWithDiff:(id)a0;
- (BOOL)isDifferentExceptingPerUserPropertiesWithDiff:(id)a0;
- (BOOL)isDifferentFromCommittedEventAndRequiresReschedule;
- (BOOL)isDifferentFromCommittedEventAndRequiresRSVP;
- (BOOL)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (void)setConferencesSet:(id)a0;
- (long long)requirementsToMoveToCalendar:(id)a0;
- (BOOL)requiresCopyToMoveFromCalendar:(id)a0 toCalendar:(id)a1;
- (id)attendeesNotIncludingOrganizer;
- (void)_willSave;
- (void)setOriginalStartDate:(id)a0;
- (id)conferencesSet;
- (id)recurrenceRule;
- (id)structuredLocation;
- (id)title;
- (BOOL)phantomMaster;
- (void)setResponseComment:(id)a0;
- (void)setBirthdayContact:(id)a0;
- (void)setLunarCalendarString:(id)a0;
- (id)endDateRaw;
- (id)responseComment;
- (long long)compareStartDateWithEvent:(id)a0;
- (id)initWithPersistentObject:(id)a0 occurrenceDate:(id)a1;
- (id)initWithPersistentObject:(id)a0;
- (BOOL)couldBeJunk;
- (void)setInvitationChangedProperties:(unsigned int)a0;
- (BOOL)canMoveToCalendar:(id)a0 fromCalendar:(id)a1 error:(id *)a2;
- (BOOL)canMoveOrCopyToCalendar:(id)a0 fromCalendar:(id)a1 error:(id *)a2;
- (id)_generateNewUniqueID;
- (id)_dateForNextOccurrence;
- (void)_adjustAfterRebaseForMovingFromOldSource:(id)a0 toNewSource:(id)a1 savingItem:(id)a2;
- (id)startDateRaw;
- (id)displayNotes;
- (void)markAsSaved;
- (BOOL)isFloating;
- (void)setDisplayNotes:(id)a0;
- (id)defaultAlarms;
- (BOOL)requiresDetach;
- (BOOL)allowsSpansOtherThanThisEvent;
- (BOOL)allowsCalendarModifications;
- (BOOL)allowsRecurrenceModifications;
- (BOOL)allowsAlarmModifications;
- (BOOL)allowsAttendeesModifications;
- (void)snoozeAlarm:(id)a0 withTimeIntervalFromNow:(double)a1;
- (id)startDateForRecurrence;
- (void)setNotes:(id)a0;
- (void)rebaseToEventStore:(id)a0;
- (id)initWithObjectForCopy:(id)a0;
- (void)setStartDateRaw:(id)a0;
- (void)setRecurrenceRule:(id)a0;
- (BOOL)refreshAndNotify:(BOOL)a0;
- (void)setEndDateRaw:(id)a0;
- (void)markAsCommitted;
- (BOOL)isProposedTimeEvent;
- (id)birthdayContactName;
- (void)setURL:(id)a0;
- (id)_nsCalendar;
- (void)setEndLocation:(id)a0;
- (id)committedValueForKey:(id)a0;
- (void)markAsUndeleted;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)a0;
- (unsigned long long)cachedJunkStatus;
- (void)clearDetectedConferenceURL;
- (void)clearParsedConference;
- (id)conferenceURLDetected;
- (id)_detectConferenceURL;
- (id)_prioritizedConferencesSources;
- (void)setIsJunk:(BOOL)a0 shouldSave:(BOOL)a1;
- (void)setCachedJunkStatus:(unsigned long long)a0;
- (BOOL)_couldBeJunkCommon;
- (void)setNotesCommon:(id)a0;
- (void)setURLCommon:(id)a0;
- (id)parsedConference;
- (BOOL)conferenceURLForDisplayCached;
- (id)conferenceURLForDisplay;
- (id)init;
- (BOOL)_isAllDay;
- (id)birthdayID;
- (id)effectiveTimeZone;
- (id)_adjustedPersistedDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1 pinMode:(unsigned long long)a2 clientCalendarDate:(id *)a3;
- (id)_calculateDurationWithStart:(id)a0 end:(id)a1 allDay:(BOOL)a2;
- (void)postModifiedNotificationWithUserInfo:(id)a0;
- (id)_committedStartDate;
- (BOOL)isBirthday;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_updateDefaultAlarms;
- (void)_updateStartDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1;
- (void)_updateEndDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1;
- (void)forceSetTimeZone:(id)a0;
- (void)clearCachedTimeValues;
- (void)_setStartDate:(id)a0 andClearProposedTimes:(BOOL)a1;
- (id)_pinDate:(id)a0 withPinMode:(unsigned long long)a1;
- (BOOL)_settingTimeZoneChangesStartEndDates;
- (BOOL)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
- (id)externalURI;
- (BOOL)currentUserMayActAsOrganizer;
- (void)_removeDefaultAlarms;
- (void)_addDefaultAlarms;
- (BOOL)needsGeocoding;
- (BOOL)refresh;
- (id)_buildConferenceStringFromNotesWithoutConference:(id)a0 serializedConference:(id)a1;
- (id)_originallyCommittedVirtualConference;
- (BOOL)_shouldAlertInviteeDeclines;
- (void)_setInvitationStatusAlertedIfNecessary;
- (void)_setInvitationStatusUnalertedIfNecessary;
- (id)privacyDescription;
- (id)roomAttendees;
- (BOOL)_invitationChangedPropertyForFlag:(unsigned int)a0;
- (void)_setInvitationChangedProperty:(BOOL)a0 forFlag:(unsigned int)a1;
- (BOOL)serverSupportedProposeNewTime;
- (void)setPredictedLocationFrozen:(BOOL)a0;
- (id)_updatePredictedLocationCacheIfNeeded;
- (void)removeConferenceRooms:(id)a0;
- (id)_conferenceRoomDisplayStrings;
- (void)setStructuredLocation:(id)a0 preserveConferenceRooms:(BOOL)a1;
- (BOOL)_needsPredictedLocationCacheUpdateHoldingLock;
- (id)_firstNonConferenceRoomLocationTitle;
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
- (BOOL)_hasBasicChangesRequiringSpanAll;
- (BOOL)_hasRecurrenceRuleChangeRequiringSpanAll;
- (BOOL)_hasOrHadRecurrenceRule;
- (BOOL)_eligibleForTravelAdvisoriesIncludePotential:(BOOL)a0;
- (id)startOfDayForStartDateInCalendar:(id)a0;
- (id)masterEvent;
- (id)conferenceURLString;
- (void)setTitle:(id)a0;
- (long long)daysSpannedInCalendar:(id)a0;
- (BOOL)isTentative;
- (BOOL)validate:(id *)a0;
- (BOOL)hasValidEventAction;
- (BOOL)_hasExternalIDOrDeliverySource;
- (id)_travelTimeInternalDescription;
- (BOOL)validateAndUpdateOccurrenceDateFieldsAfterRefresh;
- (void)postModifiedNotification;
- (id)_committedEndDate;
- (void)setPhantomMaster:(BOOL)a0;
- (void)_resetInternalState;
- (BOOL)validateWithSpan:(long long)a0 error:(id *)a1;
- (BOOL)_isParticipationStatusDirty;
- (BOOL)validateRecurrenceRule:(id)a0 error:(id *)a1;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)a0 error:(id *)a1;
- (void)_adjustForNewCalendarBeforeSave;
- (void)_detachWithStartDate:(id)a0 newStartDate:(id)a1 future:(BOOL)a2;
- (BOOL)_isSimpleRepeatingEvent;
- (BOOL)conformsToRecurrenceRules:(id)a0;
- (BOOL)_isSignificantlyDetachedComparedToMaster:(id)a0 shouldIgnorePartStat:(BOOL)a1;
- (void)_updateVideoConferenceOnlyModified;
- (void)_filterExceptionDatesAndDetachments;
- (void)_propagateChangesToDetachedEvents:(id)a0 significantlyDetachedEvents:(id)a1 startDateOffset:(id)a2 duration:(id)a3 calendar:(id)a4;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates;
- (void)_deleteThisOccurrence;
- (void)_applyTimeChangesToMaster;
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;
- (void)_updateModifiedProperties;
- (BOOL)isFirstOccurrence;
- (id)adjustedPersistedDateForDate:(id)a0 withAdjustmentMode:(unsigned long long)a1;
- (void)_propagateAlarmChangesToDetachedEvents:(id)a0;
- (id)_leftoversInDates:(id)a0 withGeneratedDates:(id)a1;
- (id)_updateMasterDate:(id)a0 forChangeToOccurrenceDate:(id)a1 fromOriginalOccurrenceDate:(id)a2;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)_clearOriginalDateFields;
- (id)_keysToChangeForDuplicateWithOptions:(long long)a0;
- (BOOL)_occurrenceExistsOnDate:(id)a0 timeZone:(id)a1;
- (BOOL)durationOverlapsRecurrenceInterval;
- (void)setStructuredLocation:(id)a0;
- (void)setTimeZone:(id)a0;
- (BOOL)_checkStartDateConstraintAgainstDate:(struct { int x0; char x1; char x2; char x3; char x4; double x5; })a0 timeZone:(id)a1 error:(id *)a2;
- (BOOL)overlapsWithOrIsSameDayAsEventInSeries;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)a0;
- (BOOL)_cancelWithSpan:(long long)a0 error:(id *)a1;
- (void)reset;
- (void)_deleteFromOccurrenceDateOnward:(id)a0;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (void)_cancelDetachedEventsWithSpan:(long long)a0;
- (BOOL)_eventIsTheOnlyRemainingOccurrence;
- (BOOL)_deleteWithSpan:(long long)a0 error:(id *)a1;
- (BOOL)_noRemainingEarlierOccurrences;
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)a0;
- (BOOL)_shouldDeclineInsteadOfDelete;
- (BOOL)_shouldPreserveFutureWhenSlicingWithStartDate:(id)a0 newStartDate:(id)a1;
- (BOOL)updateEventToEvent:(id)a0 commit:(BOOL)a1;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)a0;
- (void)_clearAttendeeChangedFlags;
- (BOOL)_fetchedEventIsConflict:(id)a0 forStartDate:(id)a1 endDate:(id)a2;
- (id)diffFromCommitted;
- (void)dismissAcceptedProposeNewTimeNotification;
- (void)_respondToProposedTimeFromAttendee:(id)a0 shouldAccept:(BOOL)a1;
- (BOOL)isDifferentWithDiff:(id)a0;
- (BOOL)_diff:(id)a0 isDifferentFromCommittedEventHelperRequiresReschedule:(BOOL)a1;
- (BOOL)isDifferentAndModifiedAttendeesWithDiff:(id)a0;
- (BOOL)seriesHasOutOfOrderEvents;
- (unsigned int)invitationChangedProperties;
- (BOOL)attendeeReplyChanged;
- (BOOL)isDifferentAndRequiresRescheduleWithDiff:(id)a0;
- (BOOL)isDifferentAndRequiresRSVPWithDiff:(id)a0;
- (BOOL)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)a0;
- (long long)requirementsToMoveFromCalendar:(id)a0 toCalendar:(id)a1;
- (void)dismissAttendeeRepliedNotification;
- (BOOL)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (BOOL)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)a0 forDate:(id)a1;
- (BOOL)disallowProposeNewTime;
- (BOOL)canForward;
- (BOOL)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)a0 toCalendar:(id)a1;
- (BOOL)isAttendeeSameAsOrganizer:(id)a0;

@end

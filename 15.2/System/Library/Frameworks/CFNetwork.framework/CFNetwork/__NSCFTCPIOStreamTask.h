@class NSObject, CFNetworkTimer, NSData, __NSCFURLLocalStreamTaskWorkWrite, NSMutableArray, __NSCFURLLocalStreamTaskWorkRead;
@protocol OS_dispatch_queue;

@interface __NSCFTCPIOStreamTask : NSURLSessionTask {
    id /* block */ _disavow;
    struct shared_ptr<TCPIO_EstablishBase> { struct TCPIO_EstablishBase *__ptr_; struct __shared_weak_count *__cntrl_; } _establish;
    struct shared_ptr<TransportConnectionObjCPP> { struct TransportConnectionObjCPP *__ptr_; struct __shared_weak_count *__cntrl_; } _ios;
    unsigned char _captureStreamsUponCompletion;
    unsigned char _secure;
    struct shared_ptr<HTTPProtocol> { struct HTTPProtocol *__ptr_; struct __shared_weak_count *__cntrl_; } _httpProtocol;
    NSMutableArray *_pendingWork;
    NSMutableArray *_completedSuspendedWork;
    BOOL _doingWorkOnThisQueue;
    int _connectionState;
    BOOL _goneSecure;
    BOOL _streamsCaptured;
    struct { long long domain; int error; } _readError;
    BOOL _readInProgress;
    BOOL _readClosed;
    struct { long long domain; int error; } _writeError;
    BOOL _writeEOF;
    BOOL _writeInProgress;
    BOOL _writeClosed;
    BOOL _receivedServerTrustChallenge;
    BOOL _receivedEof;
    CFNetworkTimer *_writeTimer;
    CFNetworkTimer *_readTimer;
    __NSCFURLLocalStreamTaskWorkWrite *_currentWriteTask;
    __NSCFURLLocalStreamTaskWorkRead *_currentReadTask;
    NSObject<OS_dispatch_queue> *_workQueueForStreamTask;
}

@property (copy) NSData *_initialDataPayload;

- (void)_onqueue_adjustLoadingPoolPriority;
- (void)_task_onqueue_didFinish;
- (void)startSecureConnection;
- (void)_onqueue_needClientCert:(id)a0 completionHandler:(id /* block */)a1;
- (void)copyStreamProperty:(id)a0 completionHandler:(id /* block */)a1;
- (void)_onqueue_setTransportConnection:(struct shared_ptr<TransportConnection> { struct TransportConnection *x0; struct __shared_weak_count *x1; })a0;
- (void)_onqueue_adjustPoolPriority;
- (void)_onqueue_stopSecureConnection;
- (void)_onqueue_ioTick;
- (void)captureStreams;
- (BOOL)_onqueue_sendSessionChallenge:(id)a0 completionHandler:(id /* block */)a1;
- (id)workQueue;
- (BOOL)isKindOfClass:(Class)a0;
- (void)stopSecureConnection;
- (id)initWithTask:(id)a0 connection:(struct shared_ptr<TransportConnection> { struct TransportConnection *x0; struct __shared_weak_count *x1; })a1 extraBytes:(id)a2 disavow:(id /* block */)a3;
- (void)_onqueue_checkForCompletion;
- (void)_onqueue_tlsDisabled;
- (void)_onqueue_cancel;
- (void)_onqueue_closeRead;
- (void)closeRead;
- (void)_onqueue_tlsCompletion;
- (void)_onqueue_addBlockOp:(id /* block */)a0 description:(const char *)a1 shouldWaitForTls:(BOOL)a2;
- (void)_onqueue_needServerTrust:(id)a0 completionHandler:(id /* block */)a1;
- (void)_onqueue_addBlockOp:(id /* block */)a0 description:(const char *)a1;
- (BOOL)shouldDoWorkConsideringTlsState;
- (void)_onqueue_processReadWork:(id)a0;
- (id)initWithHost:(id)a0 port:(long long)a1 taskGroup:(id)a2 disavow:(id /* block */)a3;
- (BOOL)_onqueue_usingProxy;
- (void).cxx_destruct;
- (void)closeWrite;
- (void)writeData:(id)a0 timeout:(double)a1 completionHandler:(id /* block */)a2;
- (void)_onqueue_suspend;
- (void)_onqueue_timeoutOccured;
- (void)_onqueue_preConnectionConfiguration:(id)a0 parameters:(id)a1 completionHandler:(id /* block */)a2;
- (id)_onqueue_errorOrCancelError;
- (void)_onqueue_startSecureConnection;
- (void)_onqueue_processWriteWork:(id)a0;
- (void)_onqueue_dealWithSessionClientCertAuth:(long long)a0 credential:(id)a1 completionHandler:(id /* block */)a2;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (void)_onSessionQueue_cleanupAndBreakCycles;
- (void)_onqueue_connectionEstablishedWithError:(struct { long long x0; int x1; })a0 callbackReferent:(id)a1;
- (void)_onqueue_postConnectConfiguration:(id)a0 parameters:(id)a1 completionHandler:(id /* block */)a2;
- (void)_onSessionQueue_disavow;
- (void)dealloc;
- (void)_onqueue_captureStreams;
- (void)_onqueue_dealWithSessionTrustAuth:(long long)a0 credential:(id)a1 completionHandler:(id /* block */)a2;
- (void)_onqueue_cleanUpConnectionEstablishmentState;
- (void)_onqueue_closeWrite;
- (void)readDataOfMinLength:(unsigned long long)a0 maxLength:(unsigned long long)a1 timeout:(double)a2 completionHandler:(id /* block */)a3;
- (void)cancel;
- (id).cxx_construct;
- (void)_onqueue_resume;
- (void)_onqueue_callbackCompletedWork;

@end

@class NSArray, NSString, NSXPCConnection, NSObject;
@protocol OS_xpc_object, OS_dispatch_queue;

@interface AVHapticClient : NSObject <NSXPCListenerDelegate, CHHapticClientInterface> {
    NSXPCConnection *_connection;
    struct HapticSharedMemory { void /* function */ **_vptr$SharableMemoryBase; BOOL mIsOwner; BOOL mWasMapped; unsigned long long mSize; void *mBuffer; unsigned int mPort; int mFileDesc; int mSerial; NSObject<OS_xpc_object> *mXPCObject; } _sharedBuffer;
    unsigned long long _uniqueID;
    int _serverTimeout;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _mapMutex;
    struct map<unsigned long, AVHapticSequenceEntry *, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, AVHapticSequenceEntry *>>> { struct __tree<std::__value_type<unsigned long, AVHapticSequenceEntry *>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, AVHapticSequenceEntry *>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, AVHapticSequenceEntry *>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long, AVHapticSequenceEntry *>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, AVHapticSequenceEntry *>, std::less<unsigned long>, true>> { unsigned long long __value_; } __pair3_; } __tree_; } _sequenceEntryMap;
    NSObject<OS_dispatch_queue> *_completionQueue;
    int _state;
}

@property BOOL connected;
@property (readonly) unsigned long long clientID;
@property (readonly) NSArray *channelKeys;
@property (readonly) BOOL prewarmed;
@property (readonly) BOOL running;
@property (readonly) int state;
@property int serverProcessID;
@property (readonly) double hapticLatency;
@property (copy) id /* block */ asyncStopCallback;
@property (copy) id /* block */ completionCallback;
@property (copy) id /* block */ connectionCallback;
@property (readonly) BOOL disconnecting;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)releaseResources;
- (void)prewarm:(id /* block */)a0;
- (void)setState:(int)a0;
- (void)doInit;
- (void)disconnect;
- (BOOL)finish:(id /* block */)a0;
- (void)stopRunning;
- (id)initWithOptions:(id)a0 error:(id *)a1;
- (void)sequenceFinished:(unsigned long long)a0 error:(id)a1;
- (void)clientCompletedWithError:(id)a0;
- (void)startRunning:(id /* block */)a0;
- (void)clientStoppedForReason:(unsigned long long)a0 error:(id)a1;
- (void)clientDisconnectingForReason:(unsigned long long)a0 error:(id)a1;
- (void)queryServerCapabilities:(id)a0 reply:(id /* block */)a1;
- (void)stopRunning:(id /* block */)a0;
- (BOOL)loadHapticEvent:(id)a0 reply:(id /* block */)a1;
- (BOOL)createCustomAudioEvent:(id)a0 format:(id)a1 frames:(unsigned long long)a2 options:(id)a3 reply:(id /* block */)a4;
- (BOOL)copyCustomAudioEvent:(unsigned long long)a0 options:(id)a1 reply:(id /* block */)a2;
- (BOOL)referenceCustomAudioEvent:(unsigned long long)a0 reply:(id /* block */)a1;
- (BOOL)releaseCustomAudioEvent:(unsigned long long)a0 reply:(id /* block */)a1;
- (void)expectNotifyAfter:(double)a0;
- (BOOL)resetChannel:(unsigned long long)a0 atTime:(double)a1;
- (BOOL)setChannelEventBehavior:(unsigned long long)a0 channel:(unsigned long long)a1;
- (BOOL)startEventAndReturnToken:(unsigned long long)a0 type:(unsigned long long)a1 atTime:(double)a2 channel:(unsigned long long)a3 eventToken:(unsigned long long *)a4;
- (void)detachHapticSequence:(unsigned long long)a0;
- (BOOL)doSendEvents:(id)a0 atTime:(double)a1 channel:(unsigned long long)a2 sorted:(BOOL)a3 outToken:(unsigned long long *)a4 error:(id *)a5;
- (BOOL)doScheduleParamCurve:(unsigned long long)a0 atTime:(double)a1 channel:(unsigned long long)a2 paramCurve:(id)a3 error:(id *)a4;
- (BOOL)doScheduleParamCurveWithMemoryReserve:(unsigned long long)a0 atTime:(double)a1 channel:(unsigned long long)a2 memoryReserve:(struct AddressReserve { void *x0; unsigned int x1; void *x2; unsigned int x3; int x4; } *)a3 paramCurve:(id)a4 error:(id *)a5;
- (BOOL)stopHapticSequence:(unsigned long long)a0 atTime:(double)a1;
- (BOOL)sendEvents:(id)a0 atTime:(double)a1 channel:(unsigned long long)a2 outToken:(unsigned long long *)a3 error:(id *)a4;
- (BOOL)stopEventWithToken:(unsigned long long)a0 atTime:(double)a1 channel:(unsigned long long)a2;
- (BOOL)clearEventsFromTime:(double)a0 channel:(unsigned long long)a1;
- (BOOL)setParameter:(unsigned long long)a0 atTime:(double)a1 value:(float)a2 channel:(unsigned long long)a3;
- (BOOL)scheduleParameterCurve:(unsigned long long)a0 curve:(id)a1 atTime:(double)a2 channel:(unsigned long long)a3 error:(id *)a4;
- (void)detachSequenceEntryforID:(unsigned long long)a0;
- (BOOL)loadAndPrepareHapticSequenceFromData:(id)a0 reply:(id /* block */)a1;
- (BOOL)loadAndPrepareHapticSequenceFromEvents:(id)a0 reply:(id /* block */)a1;
- (void)clearAssignedChannels;
- (BOOL)loadAndPrepareHapticSequenceFromVibePattern:(id)a0 reply:(id /* block */)a1;
- (BOOL)setSequenceEventBehavior:(unsigned long long)a0 behavior:(unsigned long long)a1 channel:(unsigned long long)a2;
- (void)setSequenceFinishedHandlerForID:(unsigned long long)a0 finishedHandler:(id /* block */)a1;
- (id /* block */)getSequenceFinishedHandlerForID:(unsigned long long)a0;
- (BOOL)prepareHapticSequence:(unsigned long long)a0 error:(id *)a1;
- (void)callSequenceFinishedHandlersWithError:(id)a0;
- (void)setRunStateForSequenceEntryWithID:(unsigned long long)a0 running:(BOOL)a1;
- (BOOL)pauseHapticSequence:(unsigned long long)a0 atTime:(double)a1;
- (BOOL)enableSequenceLooping:(unsigned long long)a0 enable:(BOOL)a1 error:(id *)a2;
- (BOOL)setSequenceLoopLength:(unsigned long long)a0 length:(float)a1 error:(id *)a2;
- (BOOL)setSequencePlaybackRate:(unsigned long long)a0 rate:(float)a1 error:(id *)a2;
- (BOOL)startHapticSequence:(unsigned long long)a0 atTime:(double)a1 withOffset:(double)a2;
- (BOOL)resumeHapticSequence:(unsigned long long)a0 atTime:(double)a1;
- (BOOL)seekHapticSequence:(unsigned long long)a0 toTime:(double)a1;
- (void)setChannelKeys:(id)a0;
- (BOOL)resetHapticSequence:(unsigned long long)a0 atTime:(double)a1;
- (BOOL)setSequenceChannelParameter:(unsigned long long)a0 atTime:(double)a1 value:(float)a2 sequenceID:(unsigned long long)a3 channel:(unsigned long long)a4;
- (int)setupSharedMemory:(struct object { id x0; })a0 size:(unsigned int)a1;
- (BOOL)clearSequenceEvents:(unsigned long long)a0 atTime:(double)a1;
- (BOOL)setupConnectionWithOptions:(id)a0 error:(id *)a1;
- (id)getAsyncDelegateForMethod:(SEL)a0 errorHandler:(id /* block */)a1;
- (id)getSyncDelegateForMethod:(SEL)a0 errorHandler:(id /* block */)a1;
- (BOOL)setPlayerBehavior:(unsigned long long)a0 error:(id *)a1;
- (BOOL)requestAssignedChannels:(unsigned long long)a0 error:(id *)a1;
- (BOOL)removeAssignedChannelID:(unsigned long long)a0 error:(id *)a1;
- (void)handleServerConnectionInterruption;
- (void)handleServerConnectionInvalidation;
- (unsigned int)calculateHapticCommandParamCurveMemorySize:(unsigned int)a0;
- (void)destroySharedMemory;
- (void).cxx_destruct;
- (void)stopPrewarm;
- (void)allocateResources:(id /* block */)a0;
- (void)dealloc;
- (id).cxx_construct;

@end

@class NSString, NSDictionary, AVAudioFormat;
@protocol AVVoiceControllerPlaybackDelegate, AVVoiceControllerRecordDelegate, Endpointer;

@interface AVVoiceController : NSObject <AVAudioRemoteInputPlugin_PrivateTest> {
    void *_impl;
}

@property (getter=isBargeInDetectEnabled) BOOL bargeInDetectEnabled;
@property (getter=isStopOnBargeInEnabled) BOOL stopOnBargeInEnabled;
@property (readonly, copy) NSString *recordRoute;
@property (readonly, copy) NSString *playbackRoute;
@property (readonly) unsigned long long lastRecordStartTime;
@property (readonly) NSDictionary *voiceTriggerInfo;
@property (getter=isSynchronousCallbackEnabled) BOOL synchronousCallbackEnabled;
@property (readonly) AVAudioFormat *pcmRecordBufferFormat;
@property (setter=setDuckOthersOption:) BOOL duckOthersOption;
@property (readonly) unsigned long long numberOfChannels;
@property (readonly) NSDictionary *recordSettings;
@property (readonly, getter=isRecording) BOOL recording;
@property (retain) id<Endpointer> endpointerDelegate;
@property int recordEndpointMode;
@property double recordStartWaitTime;
@property double recordInterspeechWaitTime;
@property double recordEndWaitTime;
@property id<AVVoiceControllerRecordDelegate> recordDelegate;
@property (getter=isMeteringEnabled) BOOL meteringEnabled;
@property (readonly) NSDictionary *playbackSettings;
@property (readonly, getter=isPlaying) BOOL playing;
@property id<AVVoiceControllerPlaybackDelegate> playbackDelegate;
@property float playbackVolume;
@property (getter=isStopOnEndpointEnabled) BOOL stopOnEndpointEnabled;
@property float alertVolume;
@property (readonly) unsigned long long alertStartTime;
@property (readonly) NSDictionary *metrics;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (struct shared_ptr<ControllerImpl> { struct ControllerImpl *x0; struct __shared_weak_count *x1; })impl;
- (BOOL)startRecording:(id *)a0;
- (void)updateMeters;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (void)decodeError;
- (id)initWithError:(id *)a0;
- (void)stopRecording;
- (BOOL)setAlertSoundFromURL:(id)a0 forType:(int)a1;
- (void)prewarmAudioSession;
- (BOOL)startRecording;
- (void)configureAlertBehavior:(id)a0;
- (BOOL)setRecordBufferDuration:(double)a0;
- (void)finalize;
- (BOOL)prepareRecordWithSettings:(id)a0 error:(id *)a1;
- (id)retain;
- (void)setRecordDelegate:(id)a0;
- (id)initWithContext:(id)a0 error:(id *)a1;
- (void)resetEndpointer;
- (void)releaseAudioSession;
- (float)peakPowerForChannel:(unsigned long long)a0;
- (void)releaseAudioSession:(unsigned long long)a0;
- (double)getRecordBufferDuration;
- (BOOL)setCurrentContext:(id)a0 error:(id *)a1;
- (BOOL)startListening:(id *)a0;
- (BOOL)startRecordingWithSettings:(id)a0 error:(id *)a1;
- (BOOL)playAlertSoundForType:(int)a0;
- (void)dealloc;
- (oneway void)release;
- (void)enableMiniDucking:(BOOL)a0;
- (float)averagePowerForChannel:(unsigned long long)a0;
- (BOOL)startPlaying;
- (void)stopPlaying;
- (id)playbackDelegate;
- (void)setPlaybackDelegate:(id)a0;
- (BOOL)setAnnounceCallsEnabledForStream:(unsigned long long)a0 enable:(BOOL)a1;
- (unsigned long long)setContext:(id)a0 streamType:(long long *)a1 error:(id *)a2;
- (BOOL)setContextForStream:(id)a0 forStream:(unsigned long long)a1 error:(id *)a2;
- (BOOL)prepareRecordForStream:(id)a0 error:(id *)a1;
- (BOOL)playAlertSoundForType:(int)a0 overrideMode:(long long)a1;
- (BOOL)startRecordForStream:(id)a0 error:(id *)a1;
- (BOOL)stopRecordForStream:(unsigned long long)a0 error:(id *)a1;
- (long long)getCurrentSessionState;
- (long long)getCurrentStreamState:(unsigned long long)a0;
- (id)getRecordDeviceInfoForStream:(unsigned long long)a0;
- (id)getRecordSettingsForStream:(unsigned long long)a0;
- (BOOL)activateAudioSessionForStream:(unsigned long long)a0 isPrewarm:(BOOL)a1 error:(id *)a2;
- (BOOL)setRecordModeForStream:(unsigned long long)a0 recordMode:(long long)a1 error:(id *)a2;
- (BOOL)activateAudioSessionForStream:(unsigned long long)a0 isPrewarm:(BOOL)a1 recordMode:(BOOL)a2 error:(id *)a3;
- (void)deactivateAudioSessionWithOptions:(unsigned long long)a0;
- (void)deactivateAudioSessionForStream:(unsigned long long)a0 withOptions:(unsigned long long)a1 error:(id *)a2;
- (BOOL)enableSmartRoutingConsiderationForStream:(unsigned long long)a0 enable:(BOOL)a1 error:(id *)a2;
- (BOOL)setDuckOthersForStream:(unsigned long long)a0 withSettings:(id)a1 error:(id *)a2;
- (BOOL)configureAlertBehaviorForStream:(id)a0 error:(id *)a1;
- (BOOL)updateMeterForStream:(unsigned long long)a0;
- (float)getPeakPowerForStream:(unsigned long long)a0 forChannel:(unsigned long long)a1;
- (float)getAveragePowerForStream:(unsigned long long)a0 forChannel:(unsigned long long)a1;
- (void)endpointDetected;
- (unsigned long long)setContext:(id)a0 error:(id *)a1;
- (id)recordDelegate;
- (id)mockPluginEndpoint;
- (BOOL)willAcceptContext:(id)a0;
- (BOOL)IsDeviceAvailableInLocalRoute:(id)a0 error:(id *)a1;
- (int)doStartRecordingAtTime_v1:(unsigned long long)a0 behavior:(id)a1;
- (void)setupAlertBehavior_v1:(id)a0;
- (BOOL)startRecordingAtTime:(unsigned long long)a0 error:(id *)a1;
- (BOOL)prepareListenWithSettings:(id)a0 error:(id *)a1;
- (BOOL)startListeningWithSettings:(id)a0 error:(id *)a1;
- (BOOL)setRecordMode:(long long)a0 error:(id *)a1;
- (BOOL)releaseAudioSessionForListening:(id *)a0;
- (BOOL)releaseAudioSessionForListening:(unsigned long long)a0 error:(id *)a1;
- (BOOL)preparePlaybackWithSettings:(id)a0 error:(id *)a1;
- (BOOL)preparePlaybackFromURL:(id)a0 error:(id *)a1;
- (double)getPlaybackBufferDuration;
- (BOOL)setPlaybackBufferDuration:(double)a0;
- (unsigned long long)getAlertStartTime;
- (id)currentRecordDeviceInfo;
- (id)initVoiceControllerForClient:(long long)a0 withError:(id *)a1;
- (void)prepareRecordForStream:(id)a0 completion:(id /* block */)a1;
- (void)startRecordWithSettings:(id)a0 completion:(id /* block */)a1 alertCompletion:(id /* block */)a2 audioCallback:(id /* block */)a3;
- (void)stopRecordOnStream:(unsigned long long)a0 completion:(id /* block */)a1;
- (long long)getCurrentSessionStateForStream:(unsigned long long)a0;
- (void)playAlert:(int)a0 withOverride:(long long)a1 completion:(id /* block */)a2;
- (double)getRecordBufferDurationForStream:(unsigned long long)a0;
- (BOOL)isMeteringEnabledForStream:(unsigned long long)a0;
- (void)setRecordStatusChangeBlock:(id /* block */)a0;
- (long long)getRecordModeForStream:(unsigned long long)a0;
- (void)getInputChannelInfoForStream:(unsigned long long)a0 completion:(id /* block */)a1;
- (void)sessionSetup_v1v2;
- (void)sessionCleanup_v1v2;
- (void)removeSessionNotifications:(id)a0;
- (void)hardwareConfigChanged;
- (void)handleInterruption_v1v2:(id)a0;
- (void)handleRouteChange_v1v2:(id)a0;
- (void)handleMediaServerDeath_v1v2:(id)a0;
- (void)handleMediaServerReset_v1v2:(id)a0;
- (void)handlePluginDidPublishDevice:(id)a0 withDevice:(id)a1;
- (void)handlePluginDidUnpublishDevice:(id)a0 withDevice:(id)a1;
- (void)beganRecording_v1v2:(id)a0;
- (void)finishedRecording_v1v2:(id)a0;
- (void)startpointDetected;
- (void)interspeechPointDetected;
- (void)encodeError;
- (void)beganPlaying;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer { unsigned int x0; void *x1; unsigned int x2; void *x3; unsigned int x4; struct AudioStreamPacketDescription *x5; unsigned int x6; struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; } x7; BOOL x8; unsigned char x9; unsigned char x10; BOOL x11; } *)a0;
- (void)finishedPlaying_v1v2;
- (void)alertPlaybackFinishedOfType_v1v2:(int)a0;
- (void)notifyStreamInvalidated_v1v2:(unsigned long long)a0;
- (void)beginRecordInterruption_v1v2;
- (void)beginRecordInterruptionWithContext_v1v2:(id)a0;
- (void)endRecordInterruption_v1v2;
- (void)beginPlaybackInterruption_v1v2;
- (void)endPlaybackInterruption_v1v2;
- (void)beginAudioSessionActivate_v1v2:(BOOL)a0;
- (void)endAudioSessionActivate_v1v2:(BOOL)a0;
- (void)sendRemoteConnectionMessage:(id)a0;
- (void)setSessionNotifications_v1v2:(id)a0;

@end

@class PDFPagePrivate, NSString, NSArray, NSData, PDFDocument, NSAttributedString;

@interface PDFPage : NSObject <NSCopying> {
    PDFPagePrivate *_private;
}

@property (readonly, weak, nonatomic) PDFDocument *document;
@property (readonly, nonatomic) struct CGPDFPage { } *pageRef;
@property (readonly, nonatomic) NSString *label;
@property (nonatomic) long long rotation;
@property (readonly, nonatomic) NSArray *annotations;
@property (nonatomic) BOOL displaysAnnotations;
@property (readonly, nonatomic) unsigned long long numberOfCharacters;
@property (readonly, nonatomic) NSString *string;
@property (readonly, nonatomic) NSAttributedString *attributedString;
@property (readonly, nonatomic) NSData *dataRepresentation;

+ (BOOL)isNativeRotationDrawingEnabledForThisThread;
+ (void)setNativeRotationDrawingEnabledForThisThread:(BOOL)a0;
+ (BOOL)shouldHideAnnotationsForThisThread;
+ (void)setShouldHideAnnotationsForThisThread:(BOOL)a0;
+ (BOOL)isExcludingAKAnnotationRenderingForThisThread;
+ (void)setExcludingAKAnnotationRenderingForThisThread:(BOOL)a0;
+ (BOOL)_getBooleanProperty:(id)a0 forKey:(id)a1 withDefault:(BOOL)a2;
+ (id)fontWithPDFFont:(struct CGPDFFont { } *)a0 size:(float)a1;

- (id)debugQuickLookObject;
- (id)initWithImage:(id)a0;
- (id)view;
- (id)description;
- (void)setView:(id)a0;
- (BOOL)columnAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)addAnnotation:(id)a0;
- (void)purgeAll;
- (void).cxx_destruct;
- (id)init;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)allAnnotations;
- (void)_commonInit;
- (void)setDocument:(id)a0;
- (void)dealloc;
- (void)removeAnnotation:(id)a0;
- (id)initWithImageSource:(struct CGImageSource { } *)a0;
- (id)thumbnailOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsForBox:(long long)a0;
- (struct CGDisplayList { } *)displayList;
- (BOOL)isBookmarked;
- (unsigned long long)_documentIndex;
- (struct CGPDFLayout { } *)pageLayout;
- (void)addAnnotation:(id)a0 withUndo:(BOOL)a1;
- (void)removeAnnotation:(id)a0 withUndo:(BOOL)a1;
- (id)selectionFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 type:(int)a2;
- (id)selectionForRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)changedAnnotation:(id)a0;
- (void)postAnnotationsChangedNotification;
- (id)akPageAdaptor;
- (BOOL)pathIntersectsWithRedactionPath:(struct CGPath { } *)a0;
- (BOOL)rectIntersectsWithRedactionPath:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })getDrawingTransformForBox:(long long)a0;
- (void)drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1;
- (void)transformContext:(struct CGContext { } *)a0 forBox:(long long)a1;
- (void)addAnnotationFormField:(id)a0;
- (id)selectionForAll;
- (id)selectionForCharacterAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)annotationAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionForLineAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)lastAnnotationChange;
- (id)imageOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1 withOptions:(id)a2;
- (id)annotationWithUUID:(id)a0;
- (id)annotationsForFieldName:(id)a0;
- (void)insertAnnotation:(id)a0 atIndex:(long long)a1;
- (void)drawWithBox:(long long)a0 toContext:(struct CGContext { } *)a1;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transformForBox:(long long)a0;
- (struct CGColor { } *)pageBackgroundColorHint;
- (void)fetchAnnotationsWithCompletion:(id /* block */)a0 deliveredOnQueue:(id)a1;
- (id)scannedAnnotationAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)setupAKPageAdaptorIfNecessary;
- (struct __CFDictionary { } *)gcCreateBoxDictionary;
- (const struct CGPath { } *)createRedactionPath;
- (void)drawAnnotationsWithBox:(long long)a0 inContext:(struct CGContext { } *)a1 passingTest:(id /* block */)a2;
- (id)annotationChanges;
- (void)clearAnnotationChanges;
- (BOOL)setPageRef:(struct CGPDFPage { } *)a0;
- (void)createDisplayList;
- (id)initWithPageRef:(struct CGPDFPage { } *)a0;
- (id)initWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 andRotation:(long long)a1;
- (void)setBookmarked:(BOOL)a0 updateBookmarks:(BOOL)a1;
- (BOOL)akDidSetupRealPageModelController;
- (void)setAKDidSetupRealPageModelController:(BOOL)a0;
- (struct CGPDFPage { } *)createPageRefFromImage;
- (id)changedAnnotations;
- (void)resetChangedAnnotations;
- (id)selectionFromPointToBottom:(struct CGPoint { double x0; double x1; })a0 type:(int)a1;
- (id)selectionFromTopToPoint:(struct CGPoint { double x0; double x1; })a0 type:(int)a1;
- (id)scannedAnnotations;
- (BOOL)colorWidgetBackgrounds;
- (BOOL)didChangeBounds;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forBox:(long long)a1;
- (void)postPageDidRotateNotification;
- (void)postPageDidChangeBoundsNotification;
- (void)lazilyLoadAnnotations;
- (void)clearDisplayList;
- (void)getAnnotations;
- (void)_addWidgetAnnotationToLookupDictionary:(id)a0;
- (void)removeAnnotation:(id)a0 atIndex:(long long)a1;
- (void)_removeWidgetAnnotationFromLookupDictionary:(id)a0;
- (void)drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1 isThumbnail:(BOOL)a2;
- (void)_drawWithBox:(long long)a0 inContext:(struct CGContext { } *)a1 withRotation:(BOOL)a2 isThumbnail:(BOOL)a3 withAnnotations:(BOOL)a4 withBookmark:(BOOL)a5 withDelegate:(id)a6;
- (void)_ensureDisplayListIsCreated;
- (void)_drawPageImageInContext:(struct CGContext { } *)a0 withRotation:(BOOL)a1 withDisplayBox:(long long)a2;
- (void)_drawPageCGImageInContext:(struct CGContext { } *)a0 withDisplayBox:(long long)a1;
- (void)_drawAnnotationsWithBox:(long long)a0 inContext:(struct CGContext { } *)a1;
- (void)_drawBookmarkInContext:(struct CGContext { } *)a0;
- (id)thumbnailOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1 withBookmark:(BOOL)a2 withAnnotations:(BOOL)a3;
- (struct CGImage { } *)_newCGImageWithBox:(long long)a0 bitmapSize:(struct PDFSizeIntegral { unsigned long long x0; unsigned long long x1; })a1 scale:(double)a2 offset:(struct CGPoint { double x0; double x1; })a3 backgroundColor:(id)a4 withRotation:(BOOL)a5 withAntialiasing:(BOOL)a6 withAnnotations:(BOOL)a7 withBookmark:(BOOL)a8 withDelegate:(id)a9;
- (id)selectionForRangeCommon:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 isCodeRange:(BOOL)a1;
- (id)_createAttributedString;
- (id)rvItemAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_writeToConsumer:(struct CGDataConsumer { } *)a0;
- (void)_releaseDisplayList;
- (void)_addBox:(int)a0 toDictionary:(struct __CFDictionary { } *)a1 offset:(struct CGPoint { double x0; double x1; })a2;
- (BOOL)hasCropBox;
- (BOOL)hasBleedBox;
- (BOOL)hasTrimBox;
- (BOOL)hasArtBox;
- (void)_scanData:(id)a0;
- (void)_buildPageLayout;
- (void)fetchPageLayoutWithCompletion:(id /* block */)a0 deliveredOnQueue:(id)a1;
- (struct CGPDFLayout { } *)pageLayoutIfAvail;
- (BOOL)disableUndoManagerForAK;
- (void)enableUndoManagerForAK:(BOOL)a0;
- (void)_postAnnotationsChangedNotificationCoalesced;
- (void)addScannedAnnotation:(id)a0;
- (id)pdfScannerResultAtPoint:(struct CGPoint { double x0; double x1; })a0 onPageLayer:(id)a1;
- (id)pdfScannerResultAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)rvItemWithPDFScannerResult:(id)a0;
- (id)_rvItemAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)annotationsIfAvail;
- (id)annotationAtRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)hasPopups;
- (id)thumbnailOfSize:(struct CGSize { double x0; double x1; })a0 forBox:(long long)a1 withBookmark:(BOOL)a2;
- (id)selectionForCodeRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })columnFrameAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })characterBoundsAtIndex:(long long)a0;
- (long long)characterIndexAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)selectionForWordAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)selectionFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
- (void)setBookmarked:(BOOL)a0;
- (void)setColorWidgetBackgrounds:(BOOL)a0;
- (void)addRedactionFromRectangularSelectionWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)columnAtPointIfAvailable:(struct CGPoint { double x0; double x1; })a0;
- (void)setDisplaysMarkupAnnotations:(BOOL)a0;
- (void)printActivePageAnnotations;
- (id)ddScannerResults;
- (id)rvItemAtPoint:(struct CGPoint { double x0; double x1; })a0 onPageLayer:(id)a1;

@end

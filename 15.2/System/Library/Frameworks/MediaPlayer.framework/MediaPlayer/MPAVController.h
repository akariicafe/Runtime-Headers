@class NSMapTable, MPQueueFeeder, MPAVRoutingController, NSObject, NSMutableArray, NSNotification, NSString, MPAVRoute, MPAVItem, MPAVPolicyEnforcer, NSMutableSet, NSArray, MPQueuePlayer;
@protocol MPAVQueueCoordinating, MPAVQueueController, OS_dispatch_source;

@interface MPAVController : NSObject <MPAVRoutingControllerDelegate, MPAVQueueControllerDelegate, AVAudioSessionDelegateMediaPlayerOnly> {
    BOOL _didResolveError;
    BOOL _disableAirPlayMirroringDuringPlayback;
    BOOL _shouldPreventStateChangesForRateChange;
    unsigned long long _stallBackgroundTaskIdentifier;
    BOOL _usesAudioOnlyModeForExternalPlayback;
    BOOL _valid;
    BOOL _allowsItemErrorResolution;
    MPAVRoutingController *_routingController;
    MPAVRoute *_pickedRoute;
    id _periodicTimeObserverToken;
    unsigned long long _tickTimerEnabled;
    struct __CFRunLoopTimer { } *_tickTimer;
    double _tickInterval;
    struct __CFRunLoopTimer { } *_currentItemBookkeepingTimer;
    long long _indexChangeDirection;
    NSString *_contentItemIDAtDeath;
    long long _lastDisconnectReason;
    double _lastKnownTimeBeforeDeath;
    double _lastPlaybackIndexChangeTime;
    double _lastSetTime;
    double _lastSetTimeChangeTime;
    unsigned char _hasDelayedCurrentTimeToSet : 1;
    unsigned char _forceDelayedCurrentTimeToSet : 1;
    double _delayedCurrentTimeToSet;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _pendingCurrentTime;
    long long _delayedCurrentTimeOptions;
    unsigned long long _lastSetTimeMarker;
    double _temporaryChapterTime;
    unsigned char _autoPlayWhenLikelyToKeepUp : 1;
    unsigned char _autoplayDisabledForCurrentItem : 1;
    BOOL _autoPlayBackgroundTaskAssertionEnabled;
    long long _autoPlayBackgroundTaskCount;
    BOOL _appHasBeenSuspended;
    unsigned long long _deactivationReasons;
    unsigned long long _autoPlayBackgroundTaskIdentifier;
    NSObject<OS_dispatch_source> *_autoPlayTimeoutSource;
    BOOL _hasPendingRate;
    BOOL _hasSentTracePlaybackStartDidFinish;
    MPAVItem *_pendingRateItem;
    float _pendingRate;
    BOOL _pendingChangeForScanning;
    id _boundaryTimeObserver;
    NSArray *_boundaryTimes;
    unsigned long long _boundaryTimeIndexLastPosted;
    NSMutableArray *_observerInfos;
    NSMapTable *_observerInfoToCoreMediaObserver;
    float _rateBeforeSeek;
    float _inflightSeekRate;
    unsigned long long _scanLevel;
    long long _scanDirection;
    long long _resetRateAfterSeekingUpdateDisabled;
    long long _seeklessState;
    unsigned char _isSeekingOrScrubbing : 1;
    unsigned char _resetRateAfterSeeking : 1;
    unsigned char _activeRewindHoldingAtStart : 1;
    double _lastSeekableEnd;
    double _whenSawSeekableEnd;
    double _maxSeekableFwd;
    double _seekFwdSlop;
    double _lastSeekableStart;
    double _whenSawSeekableStart;
    double _maxSeekableRev;
    double _seekRevSlop;
    unsigned char _canSeekRev : 1;
    unsigned char _canSeekFwd : 1;
    unsigned char _alwaysPlayWheneverPossible : 1;
    unsigned char _stopAtEnd : 1;
    unsigned char _didReachEnd : 1;
    unsigned char _pausedDuringInterruption : 1;
    unsigned char _resumePlaybackWhenActive : 1;
    unsigned char _useApplicationAudioSession : 1;
    unsigned char _playInBackgroundUserDefaultEnabled : 1;
    unsigned char _canPlayFastForward : 1;
    unsigned char _canPlayFastReverse : 1;
    unsigned char _shouldAutoclearDisplayOverride : 1;
    NSNotification *_delayedPlaybackStateNotification;
    NSObject<OS_dispatch_source> *_stallTimerSource;
    BOOL _hasProvidedAudibleLikelyToKeepUp;
    BOOL _hasProvidedAudiblePlay;
    double _itemInitialBookmarkTime;
    float _rateBeforeResignActive;
    long long _ubiquitousBookkeepingDisabledCount;
    double _secondsSinceUbiquitousCheckpoint;
    Class _videoViewClass;
    double _lastInterruptionEnd;
    NSMutableSet *_clientsWantingExternalPlayback;
    long long _currentItemRevisionID;
}

@property (class, readonly, nonatomic) BOOL outputSupportsAC3;
@property (class, readonly, nonatomic) BOOL prefersApplicationAudioSession;

@property (retain, nonatomic) MPAVPolicyEnforcer *policyEnforcer;
@property (nonatomic) long long actionAfterQueueLoadOverride;
@property (readonly, nonatomic) MPQueuePlayer *avPlayer;
@property (retain, nonatomic) MPQueuePlayer *queuePlayer;
@property (retain, nonatomic) id<MPAVQueueCoordinating> queueCoordinator;
@property (readonly, nonatomic) id<MPAVQueueController> queueController;
@property (readonly, nonatomic) long long externalPlaybackType;
@property (nonatomic) BOOL ubiquitousBookkeepingEnabled;
@property (nonatomic) BOOL alwaysPlayWheneverPossible;
@property (nonatomic) long long displayOverridePlaybackState;
@property (nonatomic) BOOL disableAirPlayMirroringDuringPlayback;
@property (readonly, nonatomic) double durationOfCurrentItemIfAvailable;
@property (nonatomic) double nextFadeOutDuration;
@property (readonly, nonatomic) double playableDurationOfCurrentItemIfAvailable;
@property (nonatomic) BOOL stopAtEnd;
@property (nonatomic) BOOL autoPlayWhenLikelyToKeepUp;
@property (readonly, nonatomic, getter=isExternalPlaybackActive) BOOL externalPlaybackActive;
@property (nonatomic) BOOL shouldEnforceHDCP;
@property (readonly, nonatomic) BOOL showPlaybackStateOverlaysOnTVOut;
@property (nonatomic) BOOL useApplicationAudioSession;
@property (nonatomic) BOOL shouldPostCompatibilityNotifications;
@property (nonatomic) BOOL isReloadingForPlaybackContextChange;
@property (readonly, nonatomic) BOOL canAttemptErrorResolution;
@property (readonly, copy, nonatomic) NSString *identifier;
@property (copy, nonatomic) NSString *externalPlaybackVideoGravity;
@property (nonatomic) long long state;
@property (readonly, nonatomic) long long _displayPlaybackState;
@property (readonly, nonatomic) BOOL shouldDisplayAsPlaying;
@property (nonatomic) BOOL useAirPlayMusicMode;
@property (nonatomic) BOOL managesAirPlayBehaviors;
@property (readonly, nonatomic) float rate;
@property (readonly, nonatomic) long long stateBeforeInterruption;
@property (readonly, nonatomic) MPQueueFeeder *feeder;
@property (readonly, nonatomic) MPAVItem *currentItem;
@property (readonly, nonatomic) MPAVRoutingController *routingController;
@property (readonly, nonatomic) long long lastDirection;
@property (readonly, nonatomic) BOOL hasVolumeControl;
@property (nonatomic) float volume;
@property (readonly, nonatomic) BOOL muted;
@property (nonatomic) double currentTime;
@property (readonly, nonatomic) unsigned long long bufferingState;
@property (readonly, nonatomic, getter=isCurrentItemReady) BOOL currentItemReady;
@property (nonatomic) long long playbackMode;
@property (readonly, nonatomic, getter=isPlaying) BOOL playing;
@property (readonly, nonatomic, getter=isValid) BOOL valid;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)_itemKeysToObserve;
+ (id)_playerKeysToObserve;
+ (BOOL)isNetworkSupportedPath:(id)a0;
+ (id)keyPathsForValuesAffectingCurrentItem;
+ (BOOL)automaticallyNotifiesObserversOfPlaylistManager;

- (BOOL)setRate:(float)a0;
- (void)_setState:(long long)a0;
- (double)timeOfSeekableStart;
- (double)timeOfSeekableEnd;
- (void)endPlayback;
- (void)queueController:(id)a0 didChangeActionAtQueueEnd:(long long)a1;
- (void)loadSessionWithQueueController:(id)a0 completionHandler:(id /* block */)a1;
- (id)_pickedRoute;
- (void)queueControllerDidChangeContents:(id)a0;
- (void)playWithOptions:(unsigned long long)a0;
- (void)_updateStateForPlaybackPrevention;
- (void)endInterruptionFromInterruptor:(id)a0 category:(id)a1 flags:(unsigned long long)a2;
- (void)beginInterruption;
- (void)routingControllerExternalScreenTypeDidChange:(id)a0;
- (void)routingControllerDidPauseFromActiveRouteChange:(id)a0;
- (void)_clearLastSetTimeIfPlayerTimeIsValid;
- (BOOL)_hasValidPlayerTime;
- (void)_updateLastSetTimeForCurrentItemIfNeeded;
- (BOOL)changePlaybackIndexBy:(long long)a0 deltaType:(long long)a1;
- (BOOL)changePlaybackIndexBy:(long long)a0 deltaType:(long long)a1 ignoreElapsedTime:(BOOL)a2;
- (void)endTickTimer;
- (BOOL)changePlaybackIndexBy:(long long)a0 deltaType:(long long)a1 ignoreElapsedTime:(BOOL)a2 error:(id *)a3;
- (BOOL)isSeekingOrScrubbing;
- (double)currentTimeForBookmarking;
- (void)_pauseWithFadeout:(float)a0 forScanning:(BOOL)a1;
- (void)_playWithOptions:(unsigned long long)a0 allowsEnablingAutoPlay:(BOOL)a1;
- (void)togglePlaybackWithOptions:(unsigned long long)a0;
- (BOOL)forceRestartPlaybackIfNecessary;
- (void)beginTickTimerWithInterval:(double)a0;
- (BOOL)isTickTimerEnabled;
- (long long)_seeklessStateForState:(long long)a0;
- (void)setClient:(id)a0 wantsToAllowExternalPlayback:(BOOL)a1;
- (void)setClient:(id)a0 wantsToAllowExternalPlayback:(BOOL)a1 shouldIgnorePlaybackQueueTransactions:(BOOL)a2;
- (BOOL)_showsPlayingWhenInState:(long long)a0;
- (void)_sendTracePlaybackStartDidFinishIfNeededForItem:(id)a0;
- (void)setDisableAirPlayMirroringDuringPlayback:(BOOL)a0 shouldIgnorePlaybackQueueTransactions:(BOOL)a1;
- (BOOL)setRate:(float)a0 completion:(id /* block */)a1;
- (BOOL)_setRate:(float)a0 forScanning:(BOOL)a1 withItem:(id)a2 completion:(id /* block */)a3;
- (void)disableAutoplayForCurrentItem;
- (id)_playerAVAudioSession;
- (void)enableAutoplayForCurrentItem;
- (id)_expectedAssetTypesForPlaybackMode:(long long)a0;
- (void)setCurrentTime:(double)a0 options:(long long)a1;
- (void)setCurrentTime:(double)a0 options:(long long)a1 completion:(id /* block */)a2;
- (void)setUsesAudioOnlyModeForExternalPlayback:(BOOL)a0;
- (void)setUsesAudioOnlyModeForExternalPlayback:(BOOL)a0 shouldIgnorePlaybackQueueTransactions:(BOOL)a1;
- (void)_setLastSetTime:(double)a0;
- (void)reloadWithPlaybackContext:(id)a0;
- (void)reloadWithPlaybackContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)updateBookkeepingNow;
- (void)_setValid:(BOOL)a0;
- (void)finalizeBookkeepingNow;
- (BOOL)shouldHaveNoActionAtEndForState:(long long)a0;
- (double)timeOfPlayableStart;
- (double)timeOfPlayableEnd;
- (BOOL)isLiveStreaming;
- (BOOL)canSeekBackwards;
- (BOOL)canSeekForwards;
- (BOOL)canPlayFastReverse;
- (BOOL)canSkipToSeekableEnd;
- (void)_streamRanDry:(id)a0;
- (void)skipToSeekableStart;
- (void)skipToSeekableEnd;
- (void)_isExternalPlaybackActiveDidChange:(id)a0;
- (void)_itemDidChange:(id)a0;
- (BOOL)_canPlayItem:(id)a0;
- (void)_itemAssetIsLoadedNotification:(id)a0;
- (void)_itemBookmarkTimeDidChangeNotification:(id)a0;
- (void)_itemTypeAvailableNotification:(id)a0;
- (id)_playerFailedToQueueNotification:(id)a0;
- (void)_itemFailedToPlayToEndNotification:(id)a0;
- (void)_itemFailedToPlayToEnd:(id)a0;
- (void)_applicationDidEnterBackgroundNotification:(id)a0;
- (void)_itemPlaybackDidEndNotification:(id)a0;
- (void)_itemReadyToPlay:(id)a0;
- (void)_itemWillChange:(id)a0;
- (void)_updateCurrentItemBookkeepingMarkedAsCheckpoint:(BOOL)a0;
- (void)_updateCurrentItemBookkeepingForTimerCallback;
- (void)_rateDidChange:(id)a0;
- (void)_configureAudioSession;
- (void)_connectAVPlayer;
- (void)_connectAVPlayerDeferringItemLoading:(BOOL)a0;
- (void)_disconnectAVPlayerWithReason:(long long)a0;
- (void)_serverConnectionDidDie:(id)a0;
- (void)_streamBufferFull:(id)a0;
- (void)_streamLikelyToKeepUp:(id)a0;
- (void)_streamUnlikelyToKeepUp:(id)a0;
- (void)_timeHasJumpedNotification:(id)a0;
- (void)airPlayVideoEnded;
- (void)_canPlayFastForwardDidChange:(id)a0;
- (void)airPlayFailedRentalDownloadRequired;
- (void)_airPlayFailedUnsupportedVideoFormatForDeviceWithError:(id)a0;
- (void)_canPlayFastReverseDidChange:(id)a0;
- (void)_tracksDidChange:(id)a0;
- (void)_durationDidChange:(id)a0;
- (void)_delayedPlaybackIndexChange;
- (BOOL)_shouldPausePlaybackForDeactivationReasons:(unsigned long long)a0;
- (void)_audioSessionMediaServicesWereResetNotification:(id)a0;
- (void)_itemPlayerItemWillChangeNotification:(id)a0;
- (void)_itemPlayerItemDidChangeNotification:(id)a0;
- (void)_delayedUpdateScanningRate;
- (void)_verifyDisplayProtection;
- (void)_applyAirPlayMusicMode;
- (double)_currentTimeWithPreloadedPlayerTime:(BOOL)a0 value:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1;
- (void)_applyAirPlayMusicModeForItem:(id)a0 shouldIgnorePlaybackQueueTransactions:(BOOL)a1;
- (void)_cancelStallTimer;
- (void)_attemptAutoPlay;
- (BOOL)_shouldProvideAudiblePlaybackPerformance;
- (void)_unregisterForPlayer:(id)a0;
- (void)_setQueueController:(id)a0 deferItemLoading:(BOOL)a1;
- (void)_endSeekAndChangeRate:(BOOL)a0;
- (void)_prepareToPlayItem:(id)a0;
- (unsigned long long)_currentIndexInBoundaryCMTimes:(id)a0;
- (void)_setBufferingState:(unsigned long long)a0;
- (void)_registerForAVItemNotifications:(id)a0;
- (void)_setAutoPlayBackgroundTaskAssertionEnabled:(BOOL)a0;
- (BOOL)_hasEnoughDataToPlay;
- (void)_setActionAtEndAttributeForState:(long long)a0;
- (void)_delayedPostPlaybackStateChangedNotification;
- (void)autoclearDisplayOverride;
- (void)_postPlaybackStateChangedNotificationWithOriginalState:(long long)a0 newState:(long long)a1 delayable:(BOOL)a2;
- (void)_resumeBookkeepingTimer;
- (void)setAutoclearingDisplayOverridePlaybackState:(long long)a0;
- (void)_pauseBookkeepingTimer;
- (void)_scheduleUpdateCurrentItemBookkeepingTimer;
- (void)_cancelUpdateCurrentItemBookkeepingTimer;
- (void)_updateProgress:(struct __CFRunLoopTimer { } *)a0;
- (void)_configureUpdateCurrentItemBookkeepingTimer;
- (void)_clearResetRateAfterSeeking;
- (void)_setAllowsItemErrorResolution:(BOOL)a0;
- (void)_unregisterForAVItemNotifications:(id)a0;
- (void)setRateForScanning:(float)a0;
- (void)_updateHasProtectedContentForItem:(id)a0;
- (void)_updateScanningRate;
- (void)_updateTypeForItem:(id)a0;
- (void)_delayedSetCurrentTime;
- (void)_updateSeekingIntervalsForStreaming;
- (void)_clearSeekingIntervalsForStreaming;
- (id)_extractImageFromMetadata:(id)a0;
- (void)_pauseTickTimer;
- (void)_resumeTickTimer;
- (void)_playbackFailedWithError:(id)a0 canResolve:(BOOL)a1;
- (void)playbackHasStartedForItem:(id)a0;
- (void)handlePlaybackErrorWithUserInfo:(id)a0;
- (void)_handlePlaybackErrorResolutionType:(long long)a0 forItem:(id)a1 playbackError:(id)a2 resolutionError:(id)a3;
- (void)_pausePlaybackIfNecessary;
- (void)_pausePlaybackIfNecessaryIgnoringVideoLayerAttachment:(BOOL)a0;
- (void)_resumePlaybackIfNecessary;
- (void)_enforcingPolicy:(BOOL)a0;
- (void)_updateCurrentItemDurationSnapshotWithPlayerTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)_updateDirectionForChangeDelta:(long long)a0;
- (void)removeTimeObserver:(id)a0;
- (void)_queueDidEndWithReason:(id)a0 lastItem:(id)a1;
- (void)_itemDidSignificantlyChangeElapsedTime:(double)a0 rate:(float)a1;
- (id)addPeriodicTimeObserverForInterval:(double)a0 usingBlock:(id /* block */)a1;
- (void)routingControllerAvailableRoutesDidChange:(id)a0;
- (void)queueController:(id)a0 didChangeShuffleType:(long long)a1;
- (void)togglePlayback;
- (void)_contentsChanged;
- (void)queueController:(id)a0 didIncrementVersionForSegment:(id)a1;
- (void)pauseWithFadeout:(float)a0;
- (void)queueController:(id)a0 didChangeContentsWithReplacementPlaybackContext:(id)a1;
- (void).cxx_destruct;
- (id)init;
- (void)pause;
- (void)_applicationWillEnterForegroundNotification:(id)a0;
- (BOOL)changePlaybackIndexBy:(long long)a0 deltaType:(long long)a1 ignoreElapsedTime:(BOOL)a2 force:(BOOL)a3 error:(id *)a4;
- (void)becomeActiveWithCompletion:(id /* block */)a0;
- (void)play;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)_applicationDidRemoveDeactivationReason:(id)a0;
- (void)dealloc;
- (void)_resetInternalState;
- (void)beginSeek:(int)a0;
- (void)endSeek;
- (void)queueController:(id)a0 failedToLoadItem:(id)a1;
- (void)queueController:(id)a0 didChangeRepeatType:(long long)a1;
- (void)setActive:(BOOL)a0;
- (void)_applicationWillAddDeactivationReason:(id)a0;
- (BOOL)allowsExternalPlayback;

@end

@class PKTool, NSString, UIView, PKInk, PKDrawing, UIScrollView, PKTiledView, PKCanvasAttachmentView, UIGestureRecognizer;
@protocol PKCanvasViewDelegate, PKRulerHostingDelegate;

@interface PKCanvasView : UIScrollView <PKTiledViewDelegate, PKRulerHostingDelegate, PKToolPickerObserverPrivate, PKToolPickerObserver> {
    PKTiledView *_tiledView;
    PKCanvasAttachmentView *_pageView;
    UIScrollView *_fixedPixelSizeScrollView;
    UIView *_fixedPixelSizeScrollViewWrapper;
    struct { unsigned char delegateCanvasViewDrawingDidChange : 1; unsigned char delegateCanvasViewDidFinishRendering : 1; unsigned char delegateCanvasViewDidBeginDrawing : 1; unsigned char delegateCanvasViewDidEndDrawing : 1; unsigned char delegateCanvasViewDidBeginUsingTool : 1; unsigned char delegateCanvasViewDidEndUsingTool : 1; unsigned char delegateCanvasViewBeganStroke : 1; unsigned char delegateCanvasViewUpdatedStroke : 1; unsigned char delegateCanvasViewEndedStroke : 1; unsigned char delegateCanvasViewCancelledStroke : 1; unsigned char delegateShouldBeginDrawingWithTouch : 1; unsigned char delegateCanvasViewWillBeginDrawing : 1; } _canvasViewFlags;
}

@property (readonly, nonatomic) UIView *contentView;
@property (readonly, nonatomic) PKTiledView *_tiledView;
@property (copy, nonatomic) PKDrawing *nonNullDrawing;
@property (retain, nonatomic) PKInk *ink;
@property (nonatomic) long long _maxFileFormatVersion;
@property (nonatomic) BOOL disableWideGamut;
@property (nonatomic) BOOL rulerEnabled;
@property (weak, nonatomic) id drawingUndoTarget;
@property (nonatomic) SEL drawingUndoSelector;
@property (nonatomic) BOOL predictionDisabled;
@property (readonly, nonatomic) UIView *selectionView;
@property (readonly, nonatomic) UIView *rulerView;
@property (weak, nonatomic) id<PKRulerHostingDelegate> rulerHostingDelegate;
@property (nonatomic) BOOL supportsCopyAsText;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } _fixedPixelSize;
@property (nonatomic) struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } drawingTransform;
@property (readonly, nonatomic) struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } strokeTransform;
@property (readonly, nonatomic) UIGestureRecognizer *_drawingGestureRecognizer;
@property (weak, nonatomic) id<PKCanvasViewDelegate> delegate;
@property (copy, nonatomic) PKDrawing *drawing;
@property (copy, nonatomic) PKTool *tool;
@property (nonatomic, getter=isRulerActive) BOOL rulerActive;
@property (readonly, nonatomic) UIGestureRecognizer *drawingGestureRecognizer;
@property (nonatomic) BOOL allowsFingerDrawing;
@property (nonatomic) unsigned long long drawingPolicy;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

- (void)setContentSize:(struct CGSize { double x0; double x1; })a0;
- (void)layoutSubviews;
- (void)paste:(id)a0;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (id)_getDelegateZoomView;
- (id)_pinchGestureRecognizer;
- (void)setDelegate:(id)a0;
- (void).cxx_destruct;
- (BOOL)canBecomeFirstResponder;
- (void)_flushCaches;
- (void)setOpaque:(BOOL)a0;
- (void)setMaximumZoomScale:(double)a0;
- (id)_selectionController;
- (void)setBackgroundColor:(id)a0;
- (void)performUndo:(id)a0;
- (BOOL)_hasSelection;
- (void)_canvasViewWillBeginDrawing:(id)a0;
- (void)canvasViewDidBeginDrawing:(id)a0;
- (void)canvasViewDidEndDrawing:(id)a0;
- (void)canvasView:(id)a0 beganStroke:(id)a1;
- (void)canvasView:(id)a0 endedStroke:(id)a1;
- (void)canvasView:(id)a0 cancelledStroke:(id)a1;
- (void)canvasViewDidEraseStrokes:(id)a0;
- (BOOL)canvasView:(id)a0 shouldBeginDrawingWithTouch:(id)a1;
- (id)rulerHostingView;
- (BOOL)rulerHostWantsSharedRuler;
- (id)_currentStroke;
- (id)_adornmentViewsToHitTest;
- (void)commitSelectionIfNecessaryWithCompletion:(id /* block */)a0;
- (double)_latestLatency;
- (void)set_fixedPixelSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)predictionDisabled;
- (struct CGSize { double x0; double x1; })_metalViewDrawableSize;
- (struct CGSize { double x0; double x1; })_rendererControllerPixelSize;
- (void)setPredictionDisabled:(BOOL)a0;
- (void)toolPickerSelectedToolDidChange:(id)a0;
- (void)toolPickerIsRulerActiveDidChange:(id)a0;
- (void)_toolPicker:(id)a0 didChangeColor:(id)a1;
- (void)_drawingDidChange;
- (void)_fullyRendered;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 drawingWidth:(double)a1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 drawingWidth:(double)a1 fixedPixelSizeScrollView:(id)a2;
- (void)setupDrawingWidth:(double)a0 fixedPixelSizeScrollView:(id)a1;
- (void)_setChildrenBackgroundColor:(id)a0;
- (void)updateFixedPixelSizeViewForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setContentViewOpaqueBackgroundColorIfApplicable;
- (void)_updateChildrenOpaque;
- (void)updateSubviewsForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_setSelectedStrokesColor:(id)a0;
- (void)_setDrawing:(id)a0 fullyRenderedCompletionBlock:(id /* block */)a1;
- (id)_allowedDrawingTouchTypes;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 fixedPixelSize:(struct CGSize { double x0; double x1; })a1 drawingScale:(double)a2 layerFixedPixelSize:(BOOL)a3;
- (void)_setDrawing:(id)a0 alreadyRenderedDrawing:(id)a1 imageForAlreadyRenderedDrawing:(id)a2 fullyRenderedCompletionBlock:(id /* block */)a3;
- (void)imageWithCompletionBlock:(id /* block */)a0;
- (void)_updateCanvas;
- (void)_setFixedPixelSize:(struct CGSize { double x0; double x1; })a0 drawingScale:(double)a1;
- (id)_selectionInteraction;

@end

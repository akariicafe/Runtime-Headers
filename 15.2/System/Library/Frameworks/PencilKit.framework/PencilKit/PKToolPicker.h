@class NSHashTable, NSString, NSArray, PKTool, PKPaletteViewInteraction, PKDrawingPaletteView, NSMutableArray, UIViewController, PKPaletteHostView;
@protocol PKPaletteViewAnnotationDelegate, PKToolPickerPrivateDelegate, PKToolPickerSelectionContext, PKToolPickerPopoverPresentationConfiguring;

@interface PKToolPicker : NSObject <PKDrawingPaletteViewDelegate, PKPaletteViewInteractionDelegate, PKToolPickerPopoverPresentationConfiguring, PKToolPickerSelectionContext> {
    NSMutableArray *_mutableTools;
}

@property (class, readonly, nonatomic) BOOL _canShowHandwritingTool;

@property (retain, nonatomic) NSHashTable *_observers;
@property (retain, nonatomic) NSHashTable *_firstRespondersForVisibleUI;
@property (retain, nonatomic, setter=_setInteraction:) PKPaletteViewInteraction *_interaction;
@property (nonatomic) BOOL _paletteWasCompact;
@property (nonatomic, getter=_isPencilInteractionEnabledWhenNotVisible) BOOL _pencilInteractionEnabledWhenNotVisible;
@property (nonatomic, getter=_isInputViewVisible, setter=_setInputViewVisible:) BOOL _inputViewVisible;
@property (nonatomic) BOOL _wasVisibleBeforeResponderChanges;
@property (nonatomic) BOOL _didCalculateVisibleBeforeResponderChanges;
@property (nonatomic) BOOL _toolPickerVisible;
@property (readonly, nonatomic) NSString *_paletteViewStateRestorationDefaultsKey;
@property (weak, nonatomic, setter=_setPresentationController:) UIViewController *_presentationController;
@property (weak, nonatomic, setter=_setAnnotationDelegate:) id<PKPaletteViewAnnotationDelegate> _annotationDelegate;
@property (weak, nonatomic) id<PKToolPickerPrivateDelegate> _delegate;
@property (readonly, nonatomic) BOOL _interactionIsValid;
@property (readonly, nonatomic) long long _palettePosition;
@property (readonly, weak, nonatomic) id<PKToolPickerPopoverPresentationConfiguring> _popoverPresentationConfiguration;
@property (readonly, nonatomic) PKPaletteHostView *_paletteHostView;
@property (readonly, nonatomic) PKDrawingPaletteView *_paletteView;
@property (nonatomic, setter=_setShowsHandwritingTool:) BOOL _showsHandwritingTool;
@property (readonly, nonatomic, getter=_isHandwritingToolSelected) BOOL _handwritingToolSelected;
@property (readonly, nonatomic, getter=_isAnimatingToVisible) BOOL _animatingToVisible;
@property (nonatomic, setter=_setShowsPlusButton:) BOOL _showsPlusButton;
@property (nonatomic, setter=_setWantsClearBackgroundColorInCompactSize:) BOOL _wantsClearBackgroundColorInCompactSize;
@property (nonatomic, setter=_setWantsUndoRedoButtonsVisibleInCompactSize:) BOOL _wantsUndoRedoButtonsVisibleInCompactSize;
@property (readonly, nonatomic) BOOL _canShowEllipsisButtonInCompactSize;
@property (nonatomic, setter=_setWantsEllipsisButtonVisibleInCompactSize:) BOOL _wantsEllipsisButtonVisibleInCompactSize;
@property (nonatomic, setter=_setWantsBottomLineDividerVisibleInCompactSize:) BOOL _wantsBottomLineDividerVisibleInCompactSize;
@property (nonatomic, setter=_setIgnoresSafeAreaInsetsInCompactSize:) BOOL _ignoresSafeAreaInsetsInCompactSize;
@property (nonatomic, setter=_setEdgeInsetsInCompactSize:) struct NSDirectionalEdgeInsets { double top; double leading; double bottom; double trailing; } _edgeInsetsInCompactSize;
@property (nonatomic, setter=_setInterItemToolsSpacingInCompactSize:) double _interItemToolsSpacingInCompactSize;
@property (nonatomic, setter=_setInterItemUndoRedoButtonsSpacingInCompactSize:) double _interItemUndoRedoButtonsSpacingInCompactSize;
@property (nonatomic, setter=_setUseEqualSpacingLayoutInCompactSize:) BOOL _useEqualSpacingLayoutInCompactSize;
@property (nonatomic, setter=_setShowsRuler:) BOOL _showsRuler;
@property (readonly, nonatomic) NSArray *_tools;
@property (readonly, nonatomic) id<PKToolPickerSelectionContext> _selectionContext;
@property (retain, nonatomic) PKTool *selectedTool;
@property (nonatomic, getter=isRulerActive) BOOL rulerActive;
@property (readonly, nonatomic) BOOL isVisible;
@property (copy, nonatomic) NSString *stateAutosaveName;
@property (nonatomic) long long overrideUserInterfaceStyle;
@property (nonatomic) long long colorUserInterfaceStyle;
@property (nonatomic) BOOL showsDrawingPolicyControls;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *passthroughViews;
@property (readonly, nonatomic) unsigned long long permittedArrowDirections;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } layoutSceneMargins;
@property (nonatomic) unsigned long long selectionMask;

+ (id)activeToolPickerForWindow:(id)a0;
+ (BOOL)isActiveToolPickerVisibleForWindow:(id)a0;
+ (BOOL)_internalClassWantsToolPicker:(id)a0 visibleForResponder:(id)a1;
+ (BOOL)_textInputWantsToolPickerVisible:(id)a0 forFirstResponder:(id)a1;
+ (id)_toolPickerForWindow:(id)a0;
+ (id)_windowForToolPicker:(id)a0;
+ (id)_windowSceneForToolPicker:(id)a0;
+ (id)sharedToolPickerForWindow:(id)a0;
+ (void)_setPrefersPencilOnlyDrawingForiWork:(BOOL)a0;

- (void)keyboardSceneDelegate:(id)a0 inputViewSetVisibilityDidChange:(BOOL)a1 includedReset:(BOOL)a2;
- (void)_updateUI;
- (void)addObserver:(id)a0;
- (void)removeObserver:(id)a0;
- (void).cxx_destruct;
- (id)init;
- (void)dealloc;
- (void)_saveStateIfNecessary;
- (void)paletteViewDidChangePosition:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })paletteViewColorPickerPopoverPresentationSourceRect:(id)a0;
- (id)paletteViewColorPickerPopoverPresentationSourceView:(id)a0;
- (void)paletteViewInteractionDidActivate:(id)a0;
- (void)paletteViewInteractionWillEnterForeground:(id)a0;
- (void)_updatePaletteTraitCollection:(id)a0;
- (void)_updatePaletteUserInterfaceStyle:(long long)a0;
- (void)calculateIsVisibleBeforeResponderChangesForCurrentRunLoopIfNecessary;
- (void)_updateToolPickerVisibility;
- (id)_currentFirstResponder;
- (void)_setVisibleInWindow:(id)a0;
- (void)_setSelectedTool:(id)a0 saveState:(BOOL)a1 updateUI:(BOOL)a2;
- (BOOL)_canSelectTool:(id)a0;
- (void)_saveToolPickerState;
- (void)_notifySelectedToolDidChange;
- (void)_setVisibleInWindow:(id)a0 animated:(BOOL)a1 notify:(BOOL)a2;
- (id)_configuredPaletteViewInteractionForWindow:(id)a0;
- (void)_notifyVisibilityDidChangeIsAnimationFinished:(BOOL)a0;
- (void)_restoreToolPickerState;
- (BOOL)_hasHandwritingTool;
- (void)_removeTool:(id)a0 updateUI:(BOOL)a1;
- (void)_insertTool:(id)a0 atIndex:(unsigned long long)a1 updateUI:(BOOL)a2;
- (id)_paletteAccessibilityIdentifier;
- (BOOL)_hasToolPassingTest:(id /* block */)a0;
- (void)_updateVisibilityForFirstResponder:(id)a0;
- (void)_recognitionLocaleIdentifierDidChange:(id)a0;
- (void)_hasSeenPencilPairingUIDidChange:(id)a0;
- (BOOL)_canRestoreToolWithIdentifier:(id)a0;
- (void)_resetTools:(id)a0 selectedTool:(id)a1;
- (id)_toolsState;
- (BOOL)_internalClassesAcceptingFirstResponderContainsObject:(id)a0;
- (id)_handwritingTool;
- (BOOL)_canRemoveTool:(id)a0;
- (void)_insertTool:(id)a0 atIndex:(unsigned long long)a1;
- (BOOL)_canInsertTool:(id)a0;
- (BOOL)_hasLassoTool;
- (BOOL)_hasEraserTool;
- (BOOL)_canResetToolsFrom:(id)a0;
- (void)_addTool:(id)a0 updateUI:(BOOL)a1;
- (void)_performPencilPreferredActionSwitchEraser;
- (void)_performPencilPreferredActionSwitchPrevious;
- (void)_performPencilPreferredActionShowColorPalette;
- (id)paletteViewUndoManager:(id)a0;
- (void)paletteViewToolsDidChange:(id)a0;
- (void)paletteView:(id)a0 didChangeColor:(id)a1;
- (BOOL)paletteView:(id)a0 shouldChangeSelectedToolColor:(id)a1;
- (void)paletteViewDidToggleRuler:(id)a0;
- (void)paletteView:(id)a0 didSelectTool:(id)a1 atIndex:(unsigned long long)a2;
- (BOOL)shouldHandlePencilInteractionWhenNotVisible:(id)a0;
- (id)paletteViewCurrentFirstResponder:(id)a0;
- (void)paletteViewFirstResponderDidUpdate:(id)a0;
- (void)setVisible:(BOOL)a0 forFirstResponder:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameObscuredInView:(id)a0;
- (void)_enableTapInteractionForWindow:(id)a0;
- (void)_tellDelegateToHideToolPicker;
- (void)_addTool:(id)a0;
- (void)_removeTool:(id)a0;

@end

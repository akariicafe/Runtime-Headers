@class UIView, NSString, LPVideo, LPFullScreenVideoController, LPVideoViewStyle, UIImageView, CATextLayer, LPVideoViewConfiguration, LPImage, LPImageViewStyle, UIGestureRecognizer;

@interface LPVideoView : LPComponentView <CALayerDelegate, UIGestureRecognizerDelegate, LPInProcessMediaPlayable, LPComponentMediaPlayable> {
    LPVideoViewStyle *_style;
    LPImage *_posterFrame;
    LPImageViewStyle *_posterFrameStyle;
    LPVideoViewConfiguration *_configuration;
    UIView *_playButtonContainerView;
    UIView *_playButtonView;
    UIView *_muteButtonContainerView;
    UIImageView *_muteButtonView;
    UIImageView *_unmuteButtonView;
    UIView *_videoPlaceholderView;
    UIView *_visualEffectView;
    UIView *_pulsingLoadView;
    UIView *_containerView;
    CATextLayer *_debugIndicator;
    UIGestureRecognizer *_tapRecognizer;
    UIGestureRecognizer *_playButtonTapRecognizer;
    LPFullScreenVideoController *_fullScreenController;
    BOOL _playing;
    BOOL _hasBuilt;
    BOOL _wasPlayingOrWaitingToPlayWhenUnparented;
    BOOL _wasPlayingWhenSuspended;
    BOOL _showingPlayButton;
    BOOL _waitingForPlaybackDueToAutoPlay;
    unsigned long long _lastInteractionTimestamp;
    unsigned long long _playbackWatchdogTimerID;
}

@property (readonly, copy, nonatomic) LPVideoViewConfiguration *configuration;
@property (readonly, nonatomic) BOOL shouldAutoPlay;
@property (readonly, nonatomic) BOOL shouldShowMuteButton;
@property (readonly, nonatomic) BOOL usesSharedAudioSession;
@property (nonatomic) BOOL allowsUserInteractionWithVideoPlayer;
@property (nonatomic, getter=isMuted) BOOL muted;
@property (nonatomic, getter=isPlaying) BOOL playing;
@property (nonatomic, getter=isWaitingForPlayback) BOOL waitingForPlayback;
@property (nonatomic, getter=isFullScreen) BOOL fullScreen;
@property (nonatomic) BOOL hasEverPlayed;
@property (nonatomic) double volume;
@property (readonly, nonatomic) LPVideo *video;
@property (readonly, nonatomic) UIView *playbackView;
@property (readonly, nonatomic) unsigned int loggingID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, getter=isActive) BOOL active;
@property (readonly, nonatomic) BOOL shouldUnmuteWhenUserAdjustsVolume;
@property (readonly, nonatomic) unsigned long long lastInteractionTimestamp;
@property (readonly, nonatomic) double unobscuredAreaFraction;
@property (readonly, nonatomic) BOOL hasMuteControl;

- (void)applicationDidEnterBackground:(id)a0;
- (void)applicationWillEnterForeground:(id)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (void)enterFullScreen;
- (id)playable;
- (void).cxx_destruct;
- (BOOL)isParented;
- (void)tapRecognized:(id)a0;
- (id)initWithHost:(id)a0;
- (void)dealloc;
- (void)prepareForDisplayWithCompletionHandler:(id /* block */)a0;
- (id)initWithHost:(id)a0 video:(id)a1 style:(id)a2 posterFrame:(id)a3 posterFrameStyle:(id)a4 configuration:(id)a5;
- (void)recreateFullScreenViewControllerIfNeeded;
- (void)destroyFullScreenViewController;
- (void)didChangePlayingState:(BOOL)a0;
- (void)resetToPlaceholderView;
- (void)_swapVideoPlaceholderForVideoForAutoPlay:(BOOL)a0;
- (void)removePlaceholderViews;
- (void)swapVideoPlaceholderForPlaybackIfNeeded;
- (void)didChangeMutedState:(BOOL)a0;
- (void)layoutComponentView;
- (void)fullScreenVideoDidPresent;
- (void)fullScreenVideoWillDismiss;
- (void)beginLoadingMediaForPreroll;
- (id)createFullScreenVideoViewController;
- (BOOL)usesCustomFullScreenImplementation;
- (id)createVideoPlayerView;
- (void)didEncounterPossiblyTransientPlaybackError;
- (void)didEncounterPlaybackError;
- (void)fullScreenVideoDidDismiss;
- (void)enterCustomFullScreen;
- (void)_buildVideoPlaceholderView;
- (void)buildSubviewsIfNeeded;
- (void)updatePlayButtonVisibility;
- (id)_createPulsingLoadIndicator;
- (void)_startPlaybackWatchdogTimer;
- (void)showMuteButton;
- (id)_createPosterFrameView;
- (void)updateMuteButton;
- (void)showPlayButtonAnimated:(BOOL)a0;
- (void)hidePlayButtonAnimated:(BOOL)a0;
- (void)_muteButtonHighlightLongPressRecognized:(id)a0;
- (void)_muteButtonTapRecognized:(id)a0;
- (void)userInteractedWithVideoView;
- (void)hideMuteButton;
- (void)fadeInMuteButton;
- (void)resetPlaybackState;
- (void)componentViewDidMoveToWindow;
- (BOOL)shouldAllowHighlightToRecognizeSimultaneouslyWithGesture:(id)a0;

@end

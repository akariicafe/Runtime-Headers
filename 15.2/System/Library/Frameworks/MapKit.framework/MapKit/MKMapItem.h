@class GEOAddress, NSDictionary, GEOLabelGeometry, GEOPDFlyover, GEOMapItemStorage, _MKMapItemReviewsAttribution, _MKPlaceReservationInfo, MKMapItemIdentifier, GEOFeatureStyleAttributes, MKMapItemMetadata, GEOMapRegion, GEOBusinessHours, GEOPDBusinessClaim, GEOMuninViewState, NSData, GEOPlace, UIColor, NSNumberFormatter, GEOEnhancedPlacement, NSURL, NSNumber, GEOViewportFrame, GEOMiniBrowseCategories, GEOExploreGuides, GEOMapItemStorageUserValues, NSArray, MKPlacemark, NSString, NSTimeZone, _MKMapItemAttribution, GEOMapItemDetourInfo, _MKMapItemPhotosAttribution, _MKMapItemPlaceAttribution, geo_isolater, GEOModuleLayoutEntry, NSDate;
@protocol GEOEncyclopedicInfo, MKTransitInfoPreload, GEOMapItemPrivate, GEOMapItemVenueInfo, GEOMapItem, NSObject, GEOAnnotatedItemList, GEOTransitAttribution, GEOMapItemTransitInfo;

@interface MKMapItem : NSObject <NSSecureCoding, NSItemProviderReading, NSItemProviderWriting, GEOURLSerializable> {
    id<GEOMapItem> _geoMapItem;
    MKMapItemIdentifier *_identifier;
    BOOL _isTransitInfoUpdated;
    NSDate *_transitInfoUpdatedDate;
    id<GEOMapItemTransitInfo> _updatedTransitInfo;
    id<GEOMapItemTransitInfo> _defaultTransitInfo;
    id<GEOTransitAttribution> _updatedTransitAttribution;
    GEOMapItemStorageUserValues *_userValues;
    id<NSObject> _didResolveAttributionToken;
    BOOL _hasLoadedAttribution;
    NSString *_shortAddress;
    NSString *_firstLocalizedCategoryName;
    NSNumberFormatter *_numberFormatterForAdamId;
    NSString *_localizedSampleSizeForUserRatingScoreString;
    NSDictionary *_cachedHoursBuilder;
    geo_isolater *_isolation;
}

@property (class, readonly) BOOL supportsSecureCoding;
@property (class, readonly, copy, nonatomic) NSArray *readableTypeIdentifiersForItemProvider;
@property (class, readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;

@property (readonly, nonatomic) NSString *formattedNumberOfReviews;
@property (readonly, nonatomic) NSString *formattedNumberOfReviewsIncludingProvider;
@property (readonly, nonatomic, getter=_transitInfoUpdatedDate) NSDate *transitInfoUpdatedDate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy, nonatomic) NSArray *writableTypeIdentifiersForItemProvider;
@property (readonly, getter=_isEmptyContactMapItem) BOOL isEmptyContactMapItem;
@property (nonatomic) BOOL isCurrentLocation;
@property (readonly, nonatomic) GEOMapItemStorageUserValues *userValues;
@property (readonly, nonatomic) MKMapItemMetadata *metadata;
@property (readonly, nonatomic) GEOPlace *place;
@property (readonly, nonatomic, getter=_geoMapItem) id<GEOMapItemPrivate> geoMapItem;
@property (readonly, nonatomic, getter=_geoMapItemStorageForPersistence) GEOMapItemStorage *geoMapItemStorageForPersistence;
@property (readonly, nonatomic, getter=_geoMapItemStorageForDragAndDrop) GEOMapItemStorage *geoMapItemStorageForDragAndDrop;
@property (readonly, nonatomic) NSString *yelpID;
@property (readonly, nonatomic) BOOL isPlaceHolder;
@property (readonly, nonatomic, getter=_coordinate) struct CLLocationCoordinate2D { double x0; double x1; } coordinate;
@property (readonly, nonatomic, getter=_displayMapRegion) GEOMapRegion *displayMapRegion;
@property (readonly, nonatomic, getter=_hasDisplayMinZoom) BOOL hasDisplayMinZoom;
@property (readonly, nonatomic, getter=_displayMinZoom) float displayMinZoom;
@property (readonly, nonatomic, getter=_hasDisplayMaxZoom) BOOL hasDisplayMaxZoom;
@property (readonly, nonatomic, getter=_displayMaxZoom) float displayMaxZoom;
@property (readonly, nonatomic, getter=_geoFenceMapRegion) GEOMapRegion *geoFenceMapRegion;
@property (readonly, nonatomic, getter=_hasTransit) BOOL hasTransit;
@property (readonly, nonatomic, getter=_hasTransitDisplayName) BOOL hasTransitDisplayName;
@property (readonly, nonatomic, getter=_transitDisplayName) NSString *transitDisplayName;
@property (readonly, nonatomic, getter=_hasTransitLabels) BOOL hasTransitLabels;
@property (readonly, nonatomic, getter=_transitAttribution) id<GEOTransitAttribution> transitAttribution;
@property (readonly, nonatomic, getter=_transitInfo) id<GEOMapItemTransitInfo> transitInfo;
@property (readonly, nonatomic, getter=_preloadedTransitInfo) id<MKTransitInfoPreload> preloadedTransitInfo;
@property (readonly, nonatomic, getter=_geoAddress) GEOAddress *geoAddress;
@property (readonly, nonatomic, getter=_hasFlyover) BOOL hasFlyover;
@property (readonly, nonatomic, getter=_flyover) GEOPDFlyover *flyover;
@property (readonly, nonatomic, getter=_flyoverAnnouncementMessage) NSString *flyoverAnnouncementMessage;
@property (readonly, nonatomic, getter=_identifier) MKMapItemIdentifier *identifier;
@property (readonly, nonatomic, getter=_hasMUID) BOOL hasMUID;
@property (readonly, nonatomic, getter=_muid) unsigned long long muid;
@property (readonly, nonatomic, getter=_hasResultProviderID) BOOL hasResultProviderID;
@property (readonly, nonatomic, getter=_resultProviderID) int resultProviderID;
@property (readonly, nonatomic, getter=_phoneNumberOptsOutOfAds) BOOL phoneNumberOptsOutOfAds;
@property (readonly, nonatomic, getter=_firstLocalizedCategoryName) NSString *firstLocalizedCategoryName;
@property (readonly, nonatomic, getter=_hasUserRatingScore) BOOL hasUserRatingScore;
@property (readonly, nonatomic, getter=_sampleSizeForUserRatingScore) unsigned int sampleSizeForUserRatingScore;
@property (readonly, nonatomic, getter=_localizedSampleSizeForUserRatingScoreString) NSString *localizedSampleSizeForUserRatingScoreString;
@property (readonly, nonatomic, getter=_normalizedUserRatingScore) float normalizedUserRatingScore;
@property (readonly, nonatomic, getter=_hasPriceDescription) BOOL hasPriceDescription;
@property (readonly, nonatomic, getter=_priceDescription) NSString *priceDescription;
@property (readonly, nonatomic, getter=_hasPriceRange) BOOL hasPriceRange;
@property (readonly, nonatomic, getter=_priceRangeString) NSString *priceRangeString;
@property (readonly, nonatomic, getter=_shortAddress) NSString *shortAddress;
@property (readonly, nonatomic, getter=_hasAnyAmenities) BOOL hasAnyAmenities;
@property (readonly, nonatomic, getter=_hasAcceptsApplePayAmenity) BOOL hasAcceptsApplePayAmenity;
@property (readonly, nonatomic, getter=_acceptsApplePay) BOOL acceptsApplePay;
@property (readonly, nonatomic, getter=_amenities) NSArray *amenities;
@property (readonly, nonatomic, getter=_hasResolvablePartialInformation) BOOL hasResolvablePartialInformation;
@property (readonly, nonatomic, getter=_responseStatusIsIncomplete) BOOL responseStatusIncomplete;
@property (readonly, nonatomic, getter=_hasOperatingHours) BOOL hasOperatingHours;
@property (readonly, nonatomic, getter=_hasLocalizedOperatingHours) BOOL hasLocalizedOperatingHours;
@property (readonly, nonatomic, getter=_parsecSectionType) int parsecSectionType;
@property (readonly, nonatomic, getter=_isStandAloneBrand) BOOL isStandAloneBrand;
@property (readonly, nonatomic, getter=_hasBrandMUID) BOOL hasBrandMUID;
@property (readonly, nonatomic, getter=_brandMUID) unsigned long long brand;
@property (readonly, nonatomic, getter=_isMapItemTypeUnknown) BOOL isMapItemTypeUnknown;
@property (readonly, nonatomic, getter=_isMapItemTypeBusiness) BOOL isMapItemTypeBusiness;
@property (readonly, nonatomic, getter=_isMapItemTypeSettlement) BOOL isMapItemTypeSettlement;
@property (readonly, nonatomic, getter=_isMapItemTypeAddress) BOOL isMapItemTypeAddress;
@property (nonatomic, getter=_isMapItemTypeTransit) BOOL isMapItemTypeTransit;
@property (readonly, nonatomic, getter=_isMapItemTypeBrand) BOOL isMapItemTypeBrand;
@property (readonly, nonatomic, getter=_localizedResponseTime) NSString *localizedResponseTime;
@property (readonly, nonatomic, getter=_messageBusinessHours) GEOBusinessHours *messageBusinessHours;
@property (readonly, nonatomic, getter=_hasEncyclopedicInfo) BOOL hasEncyclopedicInfo;
@property (readonly, nonatomic, getter=_encyclopedicInfo) id<GEOEncyclopedicInfo> encyclopedicInfo;
@property (readonly, nonatomic, getter=_hasChargerNumberString) BOOL hasChargerNumberString;
@property (readonly, nonatomic, getter=_chargerNumberString) NSString *chargerNumberString;
@property (readonly, nonatomic, getter=_openingHoursOptions) unsigned long long openingHoursOptions;
@property (readonly, nonatomic, getter=_placeDataAsData) NSData *placeDataAsData;
@property (readonly, nonatomic, getter=_poiSurveyURLString) NSString *poiSurveyURLString;
@property (readonly, nonatomic, getter=_poiPinpointURLString) NSString *poiPinpointURLString;
@property (readonly, nonatomic, getter=_hasCorrectedHomeWorkCoordinate) BOOL hasCorrectedHomeWorkCoordinate;
@property (readonly, nonatomic, getter=_hasCorrectedHomeWorkAddress) BOOL hasCorrectedHomeWorkAddress;
@property (readonly, nonatomic, getter=_hasVenueFeatureType) BOOL hasVenueFeatureType;
@property (readonly, nonatomic, getter=_venueFeatureType) long long venueFeatureType;
@property (readonly, nonatomic, getter=_venueInfo) id<GEOMapItemVenueInfo> venueInfo;
@property (readonly, nonatomic, getter=_browseCategories) NSArray *browseCategories;
@property (readonly, nonatomic, getter=_miniBrowseCategories) GEOMiniBrowseCategories *miniBrowseCategories;
@property (readonly, nonatomic, getter=_placeDisplayStyle) int placeDisplayStyle;
@property (readonly, nonatomic, getter=_annotatedItemList) id<GEOAnnotatedItemList> annotatedItemList;
@property (readonly, nonatomic, getter=_hasMuninViewState) BOOL hasMuninViewState;
@property (readonly, nonatomic, getter=_muninViewState) GEOMuninViewState *muninViewState;
@property (readonly, nonatomic, getter=_needsAttribution) BOOL needsAttribution;
@property (readonly, copy, nonatomic, getter=_webURL) NSURL *webURL;
@property (readonly, copy, nonatomic, getter=_providerURL) NSURL *providerURL;
@property (readonly, copy, nonatomic, getter=_vendorID) NSString *vendorID;
@property (readonly, nonatomic, getter=_reviewsDisplayName) NSString *reviewsDisplayName;
@property (readonly, nonatomic, getter=_attribution) _MKMapItemPlaceAttribution *attribution;
@property (readonly, nonatomic, getter=_allPhotoAttributions) NSArray *allPhotoAttributions;
@property (readonly, nonatomic, getter=_photosAttribution) _MKMapItemPhotosAttribution *photosAttribution;
@property (readonly, nonatomic, getter=_reviewsAttribution) _MKMapItemReviewsAttribution *reviewsAttribution;
@property (readonly, nonatomic, getter=_encyclopedicInfoAttribution) _MKMapItemAttribution *encyclopedicInfoAttribution;
@property (readonly, nonatomic, getter=_styleAttributes) GEOFeatureStyleAttributes *styleAttributes;
@property (readonly, nonatomic, getter=_customIconID) unsigned long long customIconID;
@property (readonly, nonatomic, getter=_reviews) NSArray *reviews;
@property (readonly, nonatomic, getter=_tips) NSArray *tips;
@property (readonly, nonatomic) NSString *reviewsProviderDisplayName;
@property (readonly, nonatomic, getter=_handle) NSData *handle;
@property (readonly, nonatomic, getter=_hasBusinessClaim) BOOL hasBusinessClaim;
@property (readonly, nonatomic, getter=_businessClaim) GEOPDBusinessClaim *businessClaim;
@property (retain, nonatomic) _MKPlaceReservationInfo *reservationInfo;
@property (readonly, nonatomic, getter=_detourInfo) GEOMapItemDetourInfo *detourInfo;
@property (readonly, nonatomic, getter=_externalTransitStationCode) NSData *externalTransitStationCode;
@property (readonly, nonatomic, getter=_messageID) NSString *messageID;
@property (readonly, nonatomic, getter=_messageURLString) NSString *messageURLString;
@property (readonly, nonatomic, getter=_isMessageIDVerified) BOOL isMessageIDVerified;
@property (readonly, nonatomic, getter=_quickLinks) NSArray *quickLinks;
@property (readonly, nonatomic, getter=_secondaryQuickLinks) NSArray *secondaryQuickLinks;
@property (readonly, nonatomic, getter=_placeCollections) NSArray *placeCollections;
@property (readonly, nonatomic, getter=_exploreGuides) GEOExploreGuides *exploreGuides;
@property (readonly, nonatomic, getter=_placeCollectionIds) NSArray *collectionIds;
@property (readonly, nonatomic, getter=_relatedPlaceLists) NSArray *relatedPlaceLists;
@property (readonly, nonatomic, getter=_preferedAppAdamID) NSNumber *preferedAppAdamID;
@property (readonly, nonatomic, getter=_alternativeAppAdamIds) NSArray *alternativeAppAdamIds;
@property (readonly, nonatomic, getter=_placecardLayout) GEOModuleLayoutEntry *placecardLayout;
@property (readonly, nonatomic, getter=_navTintBrandColor) UIColor *navTintBrandColor;
@property (readonly, nonatomic, getter=_navBackgroundbrandColor) UIColor *navBackgroundbrandColor;
@property (readonly, nonatomic, getter=_secondaryName) NSString *secondaryName;
@property (readonly, nonatomic, getter=_secondarySpokenName) NSString *secondarySpokenName;
@property (readonly, nonatomic, getter=_hasBusinessHours) BOOL hasBusinessHours;
@property (readonly, nonatomic, getter=_businessHours) NSArray *businessHours;
@property (readonly, nonatomic, getter=_hasLinkedServices) BOOL hasLinkedServices;
@property (readonly, nonatomic, getter=_linkedServices) NSArray *linkedServices;
@property (readonly, nonatomic, getter=_enhancedPlacement) GEOEnhancedPlacement *enhancedPlacement;
@property (readonly, nonatomic, getter=_labelGeometry) GEOLabelGeometry *labelGeometry;
@property (readonly, nonatomic, getter=_viewportFrame) GEOViewportFrame *viewportFrame;
@property (readonly, nonatomic, getter=_hasMuninStorefront) BOOL hasMuninStorefront;
@property (readonly, nonatomic) MKPlacemark *placemark;
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSString *phoneNumber;
@property (retain, nonatomic) NSURL *url;
@property (copy, nonatomic) NSTimeZone *timeZone;
@property (copy, nonatomic) NSString *pointOfInterestCategory;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)objectWithItemProviderData:(id)a0 typeIdentifier:(id)a1 error:(id *)a2;
+ (void)openMapsWithItems:(id)a0 launchOptions:(id)a1 completionHandler:(id /* block */)a2;
+ (id)urlForMapItem:(id)a0 options:(id)a1;
+ (id)_localizedNextOpeningHoursFormatter;
+ (id)_localizedNextOpeningDayOftheWeekFormatter;
+ (id)_deserializeResourceOptionsFromURL:(id)a0 error:(out id *)a1;
+ (id)sanitizeDictionary:(id)a0;
+ (id)_launchOptionsFromResourceOptionsDictionary:(id)a0;
+ (id)_launchOptionsWithOptions:(id)a0;
+ (id)standardOptionsFromPlistCompatibleDictionary:(id)a0;
+ (BOOL)valueIsValid:(id)a0 forKey:(id)a1;
+ (id)sanitizeArray:(id)a0 forKey:(id)a1;
+ (id)sanitizeObject:(id)a0 forKey:(id)a1;
+ (id)_mapItemBackedByURL:(id)a0;
+ (id)mapItemWithDictionary:(id)a0;
+ (id)plistCompatibleDictionaryFromStandardOptions:(id)a0;
+ (BOOL)openMapsWithItems:(id)a0 launchOptions:(id)a1;
+ (void)openMapsWithItems:(id)a0 launchOptions:(id)a1 fromScene:(id)a2 completionHandler:(id /* block */)a3;
+ (id)_sharedSessionURLForPunchoutURL:(id)a0;
+ (id)_sourceAppIdFromLaunchURL:(id)a0;
+ (id)_sourceAppIdFromLaunchUserInfo:(id)a0;
+ (id)launchOptionsFromURL:(id)a0;
+ (id)_sharedSessionUserInfoForPunchoutUserInfo:(id)a0;
+ (id)_itemWithContact:(id)a0 geoMapItem:(id)a1;
+ (id)mapItemWithSerializedPlaceData:(id)a0 serializedDetourInfo:(id)a1 currentLocation:(BOOL)a2;
+ (id)mapItemWithSerializedPlaceData:(id)a0;
+ (void)_mapItemsWithSerializedPlaceDataResponse:(id)a0 handler:(id /* block */)a1;
+ (id)_mapItemWithWithLocation:(id)a0 addressDictionary:(id)a1 name:(id)a2 businessURL:(id)a3 phoneNumber:(id)a4 sessionID:(id)a5 muid:(unsigned long long)a6 attributionID:(id)a7 sampleSizeForUserRatingScore:(unsigned int)a8 normalizedUserRatingScore:(float)a9;
+ (id)mapItemForCurrentLocation;
+ (id)contactsAddressKeysForGeoAddressKeys;
+ (id)contactsAddressDictionaryFromGeoAddressDictionary:(id)a0;
+ (id)ticketForMapsDataString:(id)a0 name:(id)a1;
+ (id)_mapItemFromVCardRepresentation:(id)a0 error:(id *)a1;
+ (id)_urlForMapItemHandles:(id)a0 options:(id)a1;
+ (id)_urlForLocation:(id)a0 address:(id)a1 label:(id)a2 options:(id)a3;
+ (void)_mapItemFromHandle:(id)a0 completionHandler:(id /* block */)a1;
+ (id)mapItemsFromURL:(id)a0 options:(id *)a1;
+ (void)_mapItemsFromHandleURL:(id)a0 completionHandler:(id /* block */)a1;
+ (id)_itemWithGeoMapItem:(id)a0;
+ (void)_fillOutRequest:(id)a0 withMapsDataString:(id)a1;
+ (id)urlForMapItems:(id)a0 options:(id)a1;

- (id)initWithContact:(id)a0;
- (id)_activityURLWithMuninViewState:(id)a0;
- (id)loadDataWithTypeIdentifier:(id)a0 forItemProviderCompletionHandler:(id /* block */)a1;
- (BOOL)_browseCategory_isVenueItem;
- (BOOL)_browseCategory_canDisplayBrowseCategoriesForVenue;
- (BOOL)_browseCategory_canDisplayBrowseCategoriesForPlace;
- (BOOL)_restaurantLink_hasFeatureType:(unsigned long long)a0;
- (id)_restaurantLink_firstProviderDisplayName;
- (void)_getFirstAvailableAppClipLinkWithCompletion:(id /* block */)a0;
- (void)_getFirstAvailableSecondaryAppClipLinkWithCompletion:(id /* block */)a0;
- (BOOL)_hasRestaurantExtensionInfo;
- (unsigned long long)_restaurantExtensionModeForFirstProvider;
- (void)_getHasAvailableAppClipWithCompletion:(id /* block */)a0;
- (void)_getHasAvailableSecondaryAppClipWithCompletion:(id /* block */)a0;
- (id)_restaurantLink_firstProviderIdentifier;
- (id)_mapkit_preferredFirstPhotoVendor;
- (void)encodeWithCoder:(id)a0;
- (void)openInMapsWithLaunchOptions:(id)a0 completionHandler:(id /* block */)a1;
- (id)_addressFormattedAsMultilineAddress;
- (void)_launchActivityForBrandItem;
- (void)_refreshAttribution;
- (id)initWithPlace:(id)a0 isPlaceHolderPlace:(BOOL)a1;
- (id)initWithCLLocation:(id)a0 placeType:(int)a1;
- (id)_isolatedPlace;
- (id)_addressFormattedAsShortenedAddress;
- (id)hoursBuilderForSearchResultCellForOptions:(unsigned long long)a0;
- (id)_getBusiness;
- (int)_browseCategory_placeCardType;
- (id)_urlExtraStorage;
- (id)_addressFormattedAsWeatherDisplayName;
- (id)_addressFormattedAsWeatherLocationName;
- (id)_addressOrNil:(id)a0;
- (id)_postalAddressFromMeCardUsingAddressIdentifier:(id)a0;
- (id)_addressFormattedAsName;
- (id)_formatterForAdamId;
- (id)_attributionWithDisplayName:(id)a0 attributionFormat:(id)a1 logo:(id)a2 isSnippetLogo:(BOOL)a3;
- (id)initWithGeoMapItemAsCurrentLocation:(id)a0;
- (id)venueLabelWithContext:(unsigned long long)a0;
- (void)preloadTransitInfoWithCompletion:(id /* block */)a0;
- (id)defaultHoursBuilderForSearchResultCell;
- (id)_localizedNextOpeningStringShort:(BOOL)a0;
- (void)openInMapsWithLaunchOptions:(id)a0 fromScene:(id)a1 completionHandler:(id /* block */)a2;
- (id)_fullAddressWithMultiline:(BOOL)a0;
- (id)_weatherDisplayName;
- (id)_weatherLocationName;
- (id)_addressFormattedAsCity;
- (id)_addressFormattedAsStreetOnly;
- (id)_addressFormattedAsTitlesForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0;
- (id)_addressFormattedAsLocation;
- (id)_vCardFilename;
- (BOOL)_hasLocalizedCategoryNamesForType:(unsigned int)a0;
- (id)_vCardRepresentation;
- (id)sharingURL;
- (id)initWithGeoMapItem:(id)a0 isPlaceHolderPlace:(BOOL)a1;
- (id)formattedNumberOfReviewsIncludingProvider:(BOOL)a0 formatter:(id)a1;
- (id)_reviewForIdentifier:(id)a0;
- (id)_restaurantLink_firstVendorID;
- (id)_restaurantLink_overridenBundleIDsForVendorIDs;
- (id)_restaurantLink_firstProviderPlaceIdentifier;
- (id)initWithAddressDictionary:(id)a0;
- (void)_markTransitInfoUpdated;
- (void)_updateTransitInfoWithMapItem:(id)a0;
- (id)_activityURL;
- (id)_cnPostalAddress;
- (id)_firstRelatedPlaceListForType:(int)a0;
- (id)thumbnailWithSize:(struct CGSize { double x0; double x1; })a0 annotationView:(id)a1;
- (id)initWithUrlRepresentation:(id)a0;
- (BOOL)_isEquivalentURLRepresentationTo:(id)a0;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)a0;
- (id)_mapkit_resolvedFlatPhotoList;
- (BOOL)_mapkit_supportsFullScreenExperience;
- (BOOL)_mapkit_hasFlatListOfPhotos;
- (BOOL)_mapkit_hasSinglePhotoVendor;
- (BOOL)_mapkit_hasMultiplePhotoVendors;
- (unsigned long long)_mapkit_numberOfPhotosAvailableForFlatList;
- (BOOL)_mapkit_canAtLeastOneAttributionShowPhotosLocally;
- (id)_initWithLabelMarker:(id)a0;
- (BOOL)_mapkit_canAtLeastOneAttributionShowAddPhotosLocally;
- (id)init;
- (void)_getFirstAvailableAppClipLinkFromQuickLinks:(id)a0 completion:(id /* block */)a1;
- (id)_htmlRepresentation;
- (id)initWithPlacemark:(id)a0;
- (id)initWithCLLocation:(id)a0;
- (id)_localizedCategoryNamesForType:(unsigned int)a0;
- (id)_bestNavbarBrandIconURLForSize:(struct CGSize { double x0; double x1; })a0 allowSmaller:(BOOL)a1;
- (id)initWithCoder:(id)a0;
- (id)_addressFormattedAsSinglelineAddress;
- (id)urlRepresentation;
- (id)_relatedPlaceListForComponentIdentifier:(int)a0;
- (id)initWithPlace:(id)a0;
- (id)_placeCardContact;
- (void)dealloc;
- (id)_attributionFor:(id)a0 sourceStringFormat:(id)a1 moreSourceStringFormat:(id)a2 imageTintColor:(id)a3;
- (BOOL)hasAmenityType:(int)a0;
- (BOOL)valueForAmenityType:(int)a0;
- (BOOL)openInMapsWithLaunchOptions:(id)a0;
- (id)dictionaryRepresentation;
- (id)_mapsDataString;
- (BOOL)_canGetDirections;
- (id)_bestBrandIconURLForSize:(struct CGSize { double x0; double x1; })a0 allowSmaller:(BOOL)a1;

@end

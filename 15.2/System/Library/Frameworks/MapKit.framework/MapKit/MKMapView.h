@class MKUsageCounter, MKLocationManager, NSDictionary, VKLabelMarker, UITapGestureRecognizer, MKUserLocation, NSMutableSet, NSMutableArray, UIPanGestureRecognizer, MKAppleLogoImageView, MKOverlayContainerView, VKNavContext, MKMapGestureController, VKVenueFeatureMarker, VKRouteContext, GEOMapRegion, UIPinchGestureRecognizer, MKMapViewLabelMarkerState, UILongPressGestureRecognizer, UIGestureRecognizer, VKVenueBuildingFeatureMarker, UILayoutGuide, MKScaleView, NSLayoutConstraint, MKMapCamera, MKMapCameraBoundary, MKAnnotationView, MKAnnotationContainerView, VKMapView, UIView, CLLocation, NSArray, UIRotationGestureRecognizer, MKAttributionLabel, _MKEnvironmentLabel, MKDebugLocationConsole, MKMapCameraZoomRange, NSMutableDictionary, NSString, NSObject, UIImageView, MKBasicMapView, UITextView, UITraitCollection, MKRotationFilter, _MKCustomFeatureStore, NSTimer, MKMapViewInternal, MKPointOfInterestFilter, MKAnnotationManager;
@protocol MKMapViewDelegate, OS_dispatch_group, MKCompassView, MKMapViewDelegatePrivate, OS_dispatch_queue;

@interface MKMapView : UIView <MKLocationManagerObserver, MKOverlayContainerViewDelegate, MKMapGestureControllerDelegate, UIGestureRecognizerDelegate, MKVariableDelayTapRecognizerDelegate, VKMapViewDelegate, VKMapViewCameraDelegate, MKAnnotationMarkerContainer, MKAnnotationManagerDelegate, GEOLogContextDelegate, MKRotationFilterDelegate, GEOConfigChangeListenerDelegate, GEOResourceManifestTileGroupObserver, MKAnnotationContainerViewDelegate, NSCoding> {
    NSMutableArray *_whenSizedBlocks;
    NSMutableSet *_annotationViewEventSet;
    NSMutableDictionary *_overlayRendererEventDictionary;
    MKUsageCounter *_usageCounter;
    MKMapViewInternal *_internal;
    UIView *_contentView;
    MKAnnotationManager *_annotationManager;
    MKAnnotationContainerView *_annotationContainer;
    MKAttributionLabel *_attributionLabel;
    MKAppleLogoImageView *_appleLogoImageView;
    id /* block */ _annotationRectTest;
    id /* block */ _annotationCoordinateTest;
    UIImageView *_attributionBadgeView;
    NSTimer *_startEffectsTimer;
    id<MKMapViewDelegate, MKMapViewDelegatePrivate> _safeDelegate;
    id<MKMapViewDelegate, MKMapViewDelegatePrivate> _unsafeDelegate;
    unsigned long long _suspendedEffectsCount;
    unsigned long long _userInteractionDisabledCount;
    unsigned long long _mapType;
    MKDebugLocationConsole *_debugLocationConsole;
    id /* block */ _debugConsoleAdditionalInfoProvider;
    _MKEnvironmentLabel *_debugCurrentEnvironmentLabel;
    double _heading;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    UITapGestureRecognizer *_selectingTapGestureRecognizer;
    UITapGestureRecognizer *_nonselectingTapGestureRecognizer;
    UIGestureRecognizer *_locationConsoleGesture;
    MKMapGestureController *_gestureController;
    MKOverlayContainerView *_overlayContainer;
    long long _userTrackingMode;
    BOOL _userTrackingModeShouldAnimate;
    MKBasicMapView *_basicMapView;
    VKMapView *_mapView;
    VKLabelMarker *_pressedLabelMarker;
    MKScaleView *_scaleView;
    UIView<MKCompassView> *_compassView;
    BOOL _scaleVisible;
    BOOL _compassVisible;
    BOOL _pitchSliderVisible;
    long long _scaleVisibility;
    BOOL _showsCompass;
    UIView *_scrollContainerView;
    MKUserLocation *_userLocation;
    VKRouteContext *_routeContext;
    VKNavContext *_navContext;
    MKMapCamera *_camera;
    id /* block */ _showCalloutAfterRegionChangeBlock;
    id /* block */ _selectAnnotationViewAfterRedrawBlock;
    UITextView *_vectorKitDebugView;
    UIPanGestureRecognizer *_vectorKitStyleDebugGestureRecognizer;
    double _verticalYawOverride;
    long long _originalLoopRate;
    long long _preGesturingLoopRate;
    struct { BOOL shouldZoomToFit; double idealCenterCoordinateDistance; BOOL shouldPreserveUserSpecifiedZoomLevel; BOOL resetAfterTracking; } _annotationTrackingBehavior;
    id _topLayoutGuide;
    id _bottomLayoutGuide;
    NSObject<OS_dispatch_queue> *_lastEffectiveTraitCollectionIsolationQueue;
    UITraitCollection *_lastTraitCollection;
    MKRotationFilter *_rotationFilter;
    MKAnnotationView *_longPressedAnnotationView;
    struct { unsigned char changingRegion : 1; unsigned char debugViewHeading : 1; unsigned char draggingInterrupted : 1; unsigned char didStartSmoothScrolling : 1; unsigned char hasRenderedSomething : 1; unsigned char hasSignaledWillStartRendering : 1; unsigned char ignoreHeadingUpdates : 1; unsigned char ignoreLocationUpdates : 1; unsigned char isSuspended : 1; unsigned char longPressing : 1; unsigned char persistFixedUserLocation : 1; unsigned char regionChangeIsAnimated : 1; unsigned char rotationSupported : 1; unsigned char scrollEnabled : 1; unsigned char scrolling : 1; unsigned char showHeadingIndicator : 1; unsigned char alwaysShowHeadingIndicator : 1; unsigned char showHeadingIndicatorForStepping : 1; unsigned char useVehicleHeading : 1; unsigned char showsUserLocation : 1; unsigned char zoomEnabled : 1; unsigned char zoomIsAnimated : 1; unsigned char zooming : 1; unsigned char isChangingViewSize : 1; unsigned char isChangingEdgeInsets : 1; unsigned char showsAttribution : 1; unsigned char showsAppleLogo : 1; unsigned char canShowAttributionBadge : 1; unsigned char showsVenues : 1; unsigned char rotating : 1; unsigned char pitching : 1; unsigned char rotateEnabled : 1; unsigned char pitchEnabled : 1; unsigned char showsBuildings : 1; unsigned char showsPointsOfInterest : 1; unsigned char showsTraffic : 1; unsigned char hasPendingCameraChange : 1; unsigned char currentRegionChangeShouldUpdateAnnotationsMidstream : 1; unsigned char backdropViewQualityChangingDisabled : 1; unsigned char canSelectPOIs : 1; unsigned char canSelectAllLabels : 1; unsigned char vectorKitConsoleEnabled : 1; unsigned char edgeInsetsAreExplicit : 1; unsigned char locationPropagationEnabled : 1; unsigned char userInteractionPausesLocationUpdates : 1; unsigned char locationPulseEnabled : 1; unsigned char shouldSplitRouteLine : 1; unsigned char shouldAnimatePositionWithRouteMatch : 1; unsigned char clearUserLocationOnLocationReset : 1; unsigned char showsCurrentEnvironmentName : 1; unsigned char processingUserLocationUpdate : 1; unsigned char changingMapType : 1; unsigned char userRotatedAwayFromVerticalYaw : 1; unsigned char goingToDefaultLocation : 1; unsigned char isDraggingAnnotationView : 1; unsigned char showsPressedLabelMarkerEffect : 1; unsigned char shouldLoadFallbackTiles : 1; unsigned char iconPixelAlignmentExplicitlyDisabled : 1; unsigned char userDidRotateDuringCurrentRegionChange : 1; unsigned char isTwoFingerLongPressing : 1; unsigned char useTopBottomLayoutGuides : 1; unsigned char useLayoutMargins : 1; unsigned char delegateShouldReceiveTouch : 1; unsigned char delegateShouldDelayTapResponse : 1; unsigned char delegateDidUpdateUserLocation : 1; unsigned char delegateWillChangeRegion : 1; unsigned char delegateDidChangeUserTrackingModeButton : 1; unsigned char delegateDidChangeUserTrackingMode : 1; } _flags;
    BOOL _hasSetLayoutMargins;
    UILayoutGuide *_edgeInsetsGuide;
    NSLayoutConstraint *_edgeInsetsTopConstraint;
    NSLayoutConstraint *_edgeInsetsLeftConstraint;
    NSLayoutConstraint *_edgeInsetsRightConstraint;
    NSLayoutConstraint *_edgeInsetsBottomConstraint;
    unsigned long long _suspendPropagatingEdgeInsetsCount;
    BOOL _automaticallySnapsToNorth;
    long long _cachedMuninAvailability;
    BOOL _forceLayoutOnBoundsChange;
    BOOL _hasPendingEdgeInsetsChange;
    id _shelbyvilleListener;
    _MKCustomFeatureStore *_annotationsCustomFeatureStore;
    double _lastYaw;
    BOOL _lastPossiblyVisible;
    unsigned long long _cachedVenueIDWithFocus;
    short _cachedDisplayedFloorOrdinalForVenueWithFocus;
    struct CLLocationCoordinate2D { double latitude; double longitude; } _oldCenterCoordinate;
    double _oldHeading;
    double _oldPitch;
    double _oldAltitude;
    unsigned long long _compassInsetEdges;
    BOOL _explicitCompassInsetEdges;
    MKMapViewLabelMarkerState *_selectedLabelMarkerState;
    double _appleLogoImageWidth;
    unsigned long long _compassUpdateNotificationObserversCount;
    unsigned long long _scaleUpdateNotificationObserversCount;
}

@property (nonatomic, getter=_selectedFeatureID, setter=_setSelectedFeatureID:) unsigned long long selectedFeatureID;
@property (nonatomic, getter=isScaleEnabled) BOOL scaleEnabled;
@property (retain, nonatomic) CLLocation *predictedUserLocation;
@property (nonatomic) BOOL ignoreLocationUpdates;
@property (readonly, retain, nonatomic) MKAnnotationView *userLocationView;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, getter=_showHeadingIndicator, setter=_setShowHeadingIndicator:) BOOL showHeadingIndicator;
@property (readonly, nonatomic, getter=_transitLineMarkersInCurrentViewport) NSArray *transitLineMarkersInCurrentViewport;
@property (readonly, nonatomic) NSArray *overlays;
@property (readonly, nonatomic, getter=_visibleTileSets) NSArray *visibleTileSets;
@property (readonly, nonatomic, getter=_detailedDescription) NSString *detailedDescription;
@property (readonly, nonatomic, getter=_detailedDescriptionDictionaryRepresentation) NSDictionary *detailedDescriptionDictionaryRepresentation;
@property (readonly, nonatomic, getter=_isChangingRegionForGesture) BOOL changingRegionForGesture;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic, getter=_locationManager) MKLocationManager *locationManager;
@property (readonly, nonatomic) long long _interfaceOrientation;
@property (readonly, nonatomic, getter=_canShowControls) BOOL canShowControls;
@property (readonly, nonatomic) struct { double x0; double x1; } _centerMapPoint;
@property (readonly, nonatomic) BOOL canRotateForHeading;
@property (readonly, nonatomic) BOOL hasRenderedSomething;
@property (readonly, nonatomic) BOOL effectsEnabled;
@property (nonatomic, getter=isSuspended) BOOL suspended;
@property (retain, nonatomic) NSTimer *_startEffectsTimer;
@property (weak, nonatomic, getter=_safeDelegate, setter=_setSafeDelegate:) id<MKMapViewDelegate> _safeDelegate;
@property (readonly, nonatomic, getter=_calloutShowAnimationGroup) NSObject<OS_dispatch_group> *calloutShowAnimationGroup;
@property (nonatomic, getter=_currentFlyoverAnimationID, setter=_setCurrentFlyoverAnimationID:) unsigned long long currentFlyoverAnimationID;
@property (nonatomic, getter=_cartographicConfiguration, setter=_setCartographicConfiguration:) struct { long long style; long long emphasis; long long projection; long long terrainMode; BOOL gridOnly; } cartographicConfiguration;
@property (readonly, nonatomic) double _zoomScale;
@property (readonly, nonatomic) double _zoomLevel;
@property (readonly, nonatomic, getter=_minimumZoomLevel) double minimumZoomLevel;
@property (readonly, nonatomic, getter=_maximumZoomLevel) double maximumZoomLevel;
@property (nonatomic, getter=_showsScaleDuringZoom, setter=_setShowsScaleDuringZoom:) BOOL showsScaleDuringZoom;
@property (nonatomic, getter=_scaleVisibility, setter=_setScaleVisibility:) long long scaleVisibility;
@property (nonatomic, getter=_showsRoadLabels, setter=_setShowsRoadLabels:) BOOL showsRoadLabels;
@property (nonatomic, getter=_showsRoadShields, setter=_setShowsRoadShields:) BOOL showsRoadShields;
@property (nonatomic, getter=_showsPointLabels, setter=_setShowsPointLabels:) BOOL showsPointLabels;
@property (nonatomic, getter=_showsVenues, setter=_setShowsVenues:) BOOL showsVenues;
@property (nonatomic, getter=_interactionMode, setter=_setInteractionMode:) long long interactionMode;
@property (readonly, nonatomic, getter=isRegionChanging) BOOL regionChanging;
@property (nonatomic) BOOL _annotationViewsAreAddedImmediately;
@property (nonatomic, getter=_allowsPopoverWhenNotInWindow, setter=_setAllowsPopoverWhenNotInWindow:) BOOL allowsPopoverWhenNotInWindow;
@property (readonly, nonatomic) BOOL hasUserLocation;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (nonatomic) int attributionCorner;
@property (nonatomic, getter=_showsAppleLogo, setter=_setShowsAppleLogo:) BOOL showsAppleLogo;
@property (nonatomic) BOOL showsAttribution;
@property (nonatomic) BOOL canShowAttributionBadge;
@property (readonly, nonatomic, getter=_isShowingAttributionBadge) BOOL showingAttributionBadge;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } attributionBadgeBounds;
@property (nonatomic, getter=_attributionLinkDisplayStyle, setter=_setAttributionLinkDisplayStyle:) long long attributionLinkDisplayStyle;
@property (readonly, nonatomic) BOOL canShowCompass;
@property (readonly, nonatomic) BOOL canShowPitch;
@property (readonly, nonatomic) BOOL canShowZoom;
@property (nonatomic, getter=_attributionInsets, setter=_setAttributionInsets:) struct UIEdgeInsets { double top; double left; double bottom; double right; } attributionInsets;
@property (nonatomic, getter=isCompassEnabled) BOOL compassEnabled;
@property (nonatomic, getter=_isCompassSuppressedForFloorPicker, setter=_setCompassSuppressedForFloorPicker:) BOOL compassSuppressedForFloorPicker;
@property (nonatomic, getter=_compassVisibleRotationThreshold, setter=_setCompassVisibleRotationThreshold:) double compassVisibleRotationThreshold;
@property (readonly, nonatomic) double presentationYaw;
@property (nonatomic, getter=_compassInsets, setter=_setCompassInsets:) struct UIEdgeInsets { double top; double left; double bottom; double right; } compassInsets;
@property (nonatomic, getter=_compassInsetEdges, setter=_setCompassInsetEdges:) unsigned long long compassInsetEdges;
@property (readonly, nonatomic) long long compassViewSize;
@property (readonly, nonatomic) long long compassViewStyle;
@property (readonly, nonatomic, getter=_compassDiameter) double compassDiameter;
@property (nonatomic, getter=_showsTrafficIncidents, setter=_setShowsTrafficIncidents:) BOOL showsTrafficIncidents;
@property (nonatomic, getter=_canSelectPOIs, setter=_setCanSelectPOIs:) BOOL canSelectPOIs;
@property (nonatomic, getter=_useBalloonCalloutsForLabels, setter=_setUseBalloonCalloutsForLabels:) BOOL useBalloonCalloutsForLabels;
@property (nonatomic, getter=_canSelectAllLabels, setter=_setCanSelectAllLabels:) BOOL canSelectAllLabels;
@property (readonly, nonatomic, getter=_selectedLabelMarker) VKLabelMarker *selectedLabelMarker;
@property (readonly, nonatomic, getter=_isShowingFlyover) BOOL showingFlyover;
@property (readonly, nonatomic, getter=_canShowFlyover) BOOL canShowFlyover;
@property (nonatomic, getter=_showHeadingIndicatorForStepping, setter=_setShowHeadingIndicatorForStepping:) BOOL showHeadingIndicatorForStepping;
@property (nonatomic, getter=_alwaysShowHeadingIndicator, setter=_setAlwaysShowHeadingIndicatorIfSupported:) BOOL alwaysShowHeadingIndicator;
@property (copy, nonatomic, getter=_debugConsoleAdditionalInfoProvider, setter=_setDebugConsoleAdditionalInfoProvider:) id /* block */ debugConsoleAdditionalInfoProvider;
@property (readonly, nonatomic, getter=_debugConsole) MKDebugLocationConsole *debugConsole;
@property (nonatomic, getter=_isVectorKitConsoleEnabled, setter=_setVectorKitConsoleEnabled:) BOOL vectorKitConsoleEnabled;
@property (nonatomic, getter=_automaticallySnapsToNorth, setter=_setAutomaticallySnapsToNorth:) BOOL automaticallySnapsToNorth;
@property (readonly, nonatomic, getter=_isPitched) BOOL pitched;
@property (readonly, nonatomic, getter=_canEnter3DMode) BOOL canEnter3DMode;
@property (readonly, nonatomic, getter=_canEnter3DModeFlyover) BOOL canEnter3DModeFlyover;
@property (readonly, nonatomic, getter=_canEnterNightMode) BOOL canEnterNightMode;
@property (readonly, nonatomic, getter=_muninAvailability) long long muninAvailability;
@property (nonatomic, getter=_loadMuninAvailability, setter=_setLoadMuninAvailability:) BOOL loadMuninAvailability;
@property (nonatomic, getter=_userTrackingBehavior, setter=_setUserTrackingBehavior:) struct { BOOL x0; double x1; BOOL x2; BOOL x3; } userTrackingBehavior;
@property (nonatomic, getter=_applicationState, setter=_setApplicationState:) int applicationState;
@property (nonatomic, getter=_displayedSearchResultsType, setter=_setDisplayedSearchResultsType:) long long displayedSearchResultsType;
@property (readonly, nonatomic, getter=_isShowingCuratedElevatedGround) BOOL showingCuratedElevatedGround;
@property (readonly, nonatomic, getter=_mapLayer) VKMapView *mapLayer;
@property (readonly, nonatomic, getter=_annotationViews) NSArray *annotationViews;
@property (nonatomic, getter=_localizeLabels, setter=_setLocalizeLabels:) BOOL localizeLabels;
@property (nonatomic, getter=_edgeInsets, setter=_setEdgeInsets:) struct UIEdgeInsets { double top; double left; double bottom; double right; } edgeInsets;
@property (nonatomic, getter=_labelEdgeInsets, setter=_setLabelEdgeInsets:) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } labelEdgeInsets;
@property (nonatomic, getter=_userInteractionPausesLocationUpdates, setter=_setUserInteractionPausesLocationUpdates:) BOOL userInteractionPausesLocationUpdates;
@property (nonatomic, getter=_panWithMomentum, setter=_setPanWithMomentum:) BOOL panWithMomentum;
@property (nonatomic, getter=_isLocationPulseEnabled, setter=_setLocationPulseEnabled:) BOOL locationPulseEnabled;
@property (nonatomic, getter=_shouldSplitRouteLine, setter=_setShouldSplitRouteLine:) BOOL shouldSplitRouteLine;
@property (nonatomic, getter=_shouldAnimatePositionWithRouteMatch, setter=_setShouldAnimatePositionWithRouteMatch:) BOOL shouldAnimatePositionWithRouteMatch;
@property (nonatomic, getter=_shouldLoadFallbackTiles, setter=_setShouldLoadFallbackTiles:) BOOL shouldLoadFallbackTiles;
@property (readonly, nonatomic, getter=_panningGestureRecognizer) UIPanGestureRecognizer *panningGestureRecognizer;
@property (readonly, nonatomic, getter=_pinchGestureRecognizer) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (readonly, nonatomic, getter=_rotationGestureRecognizer) UIRotationGestureRecognizer *rotationGestureRecognizer;
@property (readonly, nonatomic, getter=_selectingTapGestureRecognizer) UITapGestureRecognizer *selectingTapGestureRecognizer;
@property (readonly, nonatomic, getter=_nonselectingTapGestureRecognizer) UITapGestureRecognizer *nonselectingTapGestureRecognizer;
@property (readonly, nonatomic, getter=_longPressGestureRecognizer) UILongPressGestureRecognizer *longPressGestureRecognizer;
@property (readonly, nonatomic, getter=_doubleTapGestureRecognizer) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (readonly, nonatomic, getter=_twoFingerTapGestureRecognizer) UITapGestureRecognizer *twoFingerTapGestureRecognizer;
@property (readonly, nonatomic, getter=_oneHandedZoomGestureRecognizer) UIGestureRecognizer *oneHandedZoomGestureRecognizer;
@property (readonly, nonatomic, getter=_isHandlingNonselectingTap) BOOL handlingNonselectingTap;
@property (nonatomic) BOOL rendersInBackground;
@property (nonatomic, getter=_showsNightMode, setter=_setShowsNightMode:) BOOL showsNightMode;
@property (nonatomic, getter=_showsCurrentEnvironmentName, setter=_setShowsCurrentEnvironmentName:) BOOL showsCurrentEnvironmentName;
@property (readonly, nonatomic, getter=_currentEnvironmentLabelFrame) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentEnvironmentLabelFrame;
@property (nonatomic) long long labelTextSize;
@property (nonatomic, getter=_showsPressedLabelMarkerEffect, setter=_setShowsPressedLabelMarkerEffect:) BOOL showsPressedLabelMarkerEffect;
@property (nonatomic, getter=_isInactive, setter=_setInactive:) BOOL inactive;
@property (readonly, nonatomic, getter=_isAnimating) BOOL animating;
@property (readonly, nonatomic, getter=_edgeInsetsLayoutGuide) UILayoutGuide *edgeInsetsLayoutGuide;
@property (readonly, nonatomic) VKVenueFeatureMarker *venueWithFocus;
@property (readonly, nonatomic) VKVenueBuildingFeatureMarker *venueBuildingWithFocus;
@property (nonatomic, getter=_isDimmingOutsideVenueWithFocus) BOOL dimmingOutsideVenueWithFocus;
@property (copy, nonatomic, getter=_labelsDidLayoutCallback, setter=_setLabelsDidLayoutCallback:) id /* block */ labelsDidLayoutCallback;
@property (weak, nonatomic) id<MKMapViewDelegate> delegate;
@property (nonatomic) unsigned long long mapType;
@property (nonatomic) struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; } region;
@property (nonatomic) struct CLLocationCoordinate2D { double x0; double x1; } centerCoordinate;
@property (nonatomic) struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } visibleMapRect;
@property (copy, nonatomic) MKMapCamera *camera;
@property (copy, nonatomic) MKMapCameraZoomRange *cameraZoomRange;
@property (copy, nonatomic) MKMapCameraBoundary *cameraBoundary;
@property (nonatomic, getter=isZoomEnabled) BOOL zoomEnabled;
@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
@property (nonatomic, getter=isRotateEnabled) BOOL rotateEnabled;
@property (nonatomic, getter=isPitchEnabled) BOOL pitchEnabled;
@property (nonatomic) BOOL showsPitchControl;
@property (nonatomic) BOOL showsZoomControls;
@property (nonatomic) BOOL showsCompass;
@property (nonatomic) BOOL showsScale;
@property (copy, nonatomic) MKPointOfInterestFilter *pointOfInterestFilter;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsTraffic;
@property (nonatomic) BOOL showsUserLocation;
@property (readonly, nonatomic) MKUserLocation *userLocation;
@property (nonatomic) long long userTrackingMode;
@property (readonly, nonatomic, getter=isUserLocationVisible) BOOL userLocationVisible;
@property (readonly, nonatomic) NSArray *annotations;
@property (copy, nonatomic) NSArray *selectedAnnotations;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } annotationVisibleRect;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (unsigned long long)minZoomLevelForMapType:(unsigned long long)a0 viewSize:(struct CGSize { double x0; double x1; })a1;
+ (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_regionThatFitsMapType:(unsigned long long)a0 viewSize:(struct CGSize { double x0; double x1; })a1 viewInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a2 edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a3 region:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a4 minZoomLevel:(double)a5 maxZoomLevel:(double)a6 snapToZoomLevel:(BOOL)a7;
+ (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })regionThatFitsMapType:(unsigned long long)a0 viewSize:(struct CGSize { double x0; double x1; })a1 edgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a2 region:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a3;
+ (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_mapRectThatFitsViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 mapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a1 viewInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a2 edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a3 minZoomLevel:(double)a4 maxZoomLevel:(double)a5 snapToZoomLevel:(BOOL)a6;
+ (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })regionThatFitsMapType:(unsigned long long)a0 viewSize:(struct CGSize { double x0; double x1; })a1 region:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a2;
+ (void)setRendersInBackgroundByDefault:(BOOL)a0;

- (void)_setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })a0;
- (void)applicationWillResignActive:(id)a0;
- (BOOL)_isZooming;
- (void)applicationDidEnterBackground:(id)a0;
- (void)applicationWillEnterForeground:(id)a0;
- (void)valueChangedForGEOConfigKey:(struct { unsigned int x0; void *x1; })a0;
- (void)_sceneWillEnterForeground:(id)a0;
- (void)layoutMarginsDidChange;
- (void)layoutSubviews;
- (void)gestureControllerDidStopTilting:(id)a0 willDecelerate:(BOOL)a1 tiltDirection:(long long)a2;
- (void)gestureControllerDidStopRotating:(id)a0 willDecelerate:(BOOL)a1;
- (void)gestureControllerWillStartRotating:(id)a0;
- (void)gestureControllerDidStopRotatingDecelerating:(id)a0;
- (void)gestureControllerWillStartZooming:(id)a0 animated:(BOOL)a1;
- (void)gestureControllerDidStopZooming:(id)a0 direction:(long long)a1 type:(long long)a2 willDecelerate:(BOOL)a3;
- (void)gestureControllerWillStartTwoFingerLongPress:(id)a0;
- (void)gestureControllerDidStopTwoFingerLongPress:(id)a0;
- (void)removeOverlay:(id)a0;
- (void)safeAreaInsetsDidChange;
- (void)gestureControllerDidStopZoomingDecelerating:(id)a0 direction:(long long)a1 type:(long long)a2;
- (void)gestureControllerWillStartPanning:(id)a0;
- (void)gestureControllerDidStopPanningDecelerating:(id)a0;
- (void)gestureControllerDidStopPanning:(id)a0 willDecelerate:(BOOL)a1;
- (void)_handleLongPressGesture:(id)a0;
- (double)gestureController:(id)a0 shouldWaitForNextTapForDuration:(double)a1 afterTouch:(id)a2;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })gestureControllerSignificantViewFrame:(id)a0;
- (void)gestureControllerDidStopZooming:(id)a0 direction:(long long)a1 willDecelerate:(BOOL)a2;
- (void)gestureControllerDidStopZoomingDecelerating:(id)a0 direction:(long long)a1;
- (BOOL)_shouldAnimatePropertyWithKey:(id)a0;
- (void)_zoomIn;
- (void)setCenter:(struct CGPoint { double x0; double x1; })a0;
- (void)_willChangeStatusBarFrame:(id)a0;
- (BOOL)gestureController:(id)a0 shouldReceiveTouch:(id)a1;
- (void)mapLayerDidStartLoadingTiles:(id)a0;
- (void)mapLayerDidFinishLoadingTiles:(id)a0;
- (void)mapLayerDidDraw:(id)a0;
- (id)vk_mapLayer;
- (void)mapLayerDidFailLoadingTiles:(id)a0 withError:(id)a1;
- (void)mapLayerDidChangeSceneState:(id)a0 withState:(unsigned long long)a1;
- (void)mapLayer:(id)a0 showingFlyoverDidChange:(BOOL)a1;
- (void)mapLayer:(id)a0 canShowFlyoverDidChange:(BOOL)a1;
- (void)mapLayerWillEnterAR:(id)a0;
- (void)mapLayerDidEnterAR:(id)a0;
- (struct CGPoint { double x0; double x1; })_centerPoint;
- (void)mapLayerDidExitAR:(id)a0;
- (void)mapLayer:(id)a0 didEncounterARError:(id)a1;
- (void)mapLayer:(id)a0 arSessionWasInterrupted:(unsigned long long)a1;
- (void)mapLayerARSessionInterruptionEnded:(id)a0;
- (void)mapLayer:(id)a0 arTrackingStateDidChange:(unsigned long long)a1 reason:(unsigned long long)a2;
- (void)mapLayerWillStartFlyoverTour:(id)a0;
- (void)mapLayer:(id)a0 didStopFlyoverTourCompleted:(BOOL)a1;
- (void)mapLayer:(id)a0 flyoverTourLabelDidChange:(id)a1;
- (void)mapLayer:(id)a0 flyoverModeDidChange:(int)a1;
- (void)mapLayer:(id)a0 flyoverModeWillChange:(int)a1;
- (void)zoomIn:(id)a0;
- (long long)_focusItemDeferralMode;
- (struct CLLocationCoordinate2D { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })a0 toCoordinateFromView:(id)a1;
- (void)mapLayer:(id)a0 selectedLabelMarkerWillDisappear:(id)a1;
- (void)mapLayer:(id)a0 selectedLabelMarkerDidChangeState:(id)a1;
- (void)mapLayerLabelsDidLayout:(id)a0;
- (void)mapLayer:(id)a0 willTransitionTo:(long long)a1;
- (void)mapLayer:(id)a0 didUpdateVerticalYawTo:(double)a1;
- (void)mapLayer:(id)a0 venueWithFocusDidChange:(id)a1 building:(id)a2;
- (void)applicationDidBecomeActive:(id)a0;
- (void)mapLayerNavigationCameraDidReturnToDefaultZoom;
- (void)mapLayer:(id)a0 venueCreated:(id)a1 venueCreatedBuilding:(id)a2;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_mapRectWithFraction:(double)a0 ofVisible:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a1;
- (void)snapToNorth:(id)a0;
- (void)didMoveToSuperview;
- (id)overlayContainer;
- (void)pressesCancelled:(id)a0 withEvent:(id)a1;
- (void)mapLayerDidBecomePitched:(BOOL)a0;
- (void)encodeWithCoder:(id)a0;
- (id)scaleView;
- (void)mapLayerNavigationCameraHasStartedPanning;
- (BOOL)gestureRecognizer:(id)a0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a1;
- (void)deselectAnnotation:(id)a0 animated:(BOOL)a1;
- (void)_sceneDidEnterBackground:(id)a0;
- (void)setLayoutMargins:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0;
- (void)_clearGestureRecognizers;
- (void)locationManagerApprovalDidChange:(id)a0;
- (void)removeUserLocation;
- (id)_camera;
- (void)locationManager:(id)a0 didUpdateVehicleHeading:(double)a1 timestamp:(id)a2;
- (void)mapLayerCanZoomOutDidChange:(BOOL)a0;
- (BOOL)_isPoint:(struct CGPoint { double x0; double x1; })a0 nearUserLocationView:(double)a1;
- (void)_setMapType:(unsigned long long)a0 onInit:(BOOL)a1 animated:(BOOL)a2;
- (void)_updateAppearanceIfNeeded;
- (void)deviceOrientationDidChange:(id)a0;
- (void)goToDefaultLocation;
- (void)_configureGestureRecognizers:(id)a0;
- (void)_updateAttribution;
- (void)_updateUserLocation:(id)a0 routeMatch:(id)a1;
- (void)_updateLocationConsole;
- (BOOL)_useVehicleHeading;
- (void)_updateAppleLogoVisibility;
- (void)_stopEffects;
- (id)_commonInitFromIB:(BOOL)a0 gestureRecognizerHostView:(id)a1 locationManager:(id)a2 showsAttribution:(BOOL)a3 showsAppleLogo:(BOOL)a4 allowsAntialiasing:(BOOL)a5;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forViewPrintFormatter:(id)a1;
- (void)_updateUserLocationViewWithLocation:(id)a0 hadUserLocation:(BOOL)a1;
- (void)_updateCourseForMapViewHeading:(id)a0;
- (void)_locationManager:(id)a0 didUpdateVehicleHeading:(double)a1 timestamp:(id)a2;
- (BOOL)_isLocationPropagationEnabled;
- (void)_setLocationPropagationEnabled:(BOOL)a0;
- (void)_clearLayoutGuides;
- (void)_startEffects;
- (void)_unregisterSceneLifecycleNotifications;
- (BOOL)_clearUserLocationOnLocationReset;
- (void)_setClearUserLocationOnLocationReset:(BOOL)a0;
- (BOOL)_userLocationWithinVisibleMapBounds;
- (void)insertOverlay:(id)a0 aboveOverlay:(id)a1;
- (void)_forceManifestUpdateIfNecessary;
- (void)_invalidateAllOverlayRendererColors;
- (long long)_controlsUserInterfaceStyleOverride;
- (void)_setShowsAppleLogo:(BOOL)a0 force:(BOOL)a1;
- (void)_layoutAttribution;
- (BOOL)_canShowAppleLogo;
- (void)_updateCompassVisibility;
- (void)_updateControlsPosition:(BOOL)a0;
- (void)_updateScalePosition;
- (void)locationManagerDidReset:(id)a0;
- (void)locationManagerDidResumeLocationUpdates:(id)a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)mapAttributionWithStringAttributes:(id)a0 underlineText:(BOOL)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentEnvironmentNameFrame;
- (void)_updateEnvironmentLabelText;
- (void)_updateHeadingOrientation;
- (id /* block */)annotationRectTest;
- (BOOL)locationManagerShouldPauseLocationUpdates:(id)a0;
- (void)_setCartographicConfiguration:(struct { long long x0; long long x1; long long x2; long long x3; BOOL x4; })a0 onInit:(BOOL)a1 animated:(BOOL)a2;
- (BOOL)canBecomeFocused;
- (BOOL)_supportsVKMapType:(int)a0;
- (void)_updateIconsShouldAlignToPixels;
- (struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })_mapDisplayStyle;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)annotationsInMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0;
- (void)_updateScrollingAndGestures;
- (double)_boundedZoomLevel:(double)a0;
- (void)_sizeWillChange;
- (void)_sizeDidChangeWithCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0;
- (void)_updateInsetsWithForce:(BOOL)a0;
- (void)_startTrackingHeading;
- (void)_stopTrackingHeading;
- (void)startUpdatingUserLocation;
- (void)stopUpdatingUserLocation;
- (BOOL)_isUserLocationInView:(BOOL)a0;
- (void)setUserTrackingMode:(long long)a0 animated:(BOOL)a1;
- (void)_snapToTrueNorthAndCallBack:(BOOL)a0;
- (void)_setUserTrackingMode:(long long)a0 animated:(BOOL)a1 fromTrackingButton:(BOOL)a2;
- (void)_updateShowHeadingIndicator;
- (void)_zoomOut;
- (void)_updateHeading:(id)a0 animated:(BOOL)a1;
- (BOOL)_rotationPossible;
- (void)_updateHeadingIndicatorAnimated:(BOOL)a0;
- (void)_setUseVehicleHeading:(BOOL)a0;
- (void)pauseUserHeadingUpdates;
- (void)resumeUserHeadingUpdates;
- (void)locationManagerUpdatedHeading:(id)a0;
- (void)locationManager:(id)a0 didUpdateVehicleSpeed:(double)a1 timestamp:(id)a2;
- (void)mapLayerCanZoomInDidChange:(BOOL)a0;
- (void)locationManagerFailedToUpdateHeading:(id)a0 withError:(id)a1;
- (BOOL)_shouldSupportAlwaysShowHeadingIndicator;
- (void)_updateFallbackTileLoading;
- (id)urlForMapAttribution;
- (void)_updateEffects;
- (void)_startFlyoverTourAnimation:(unsigned long long)a0 duration:(double)a1 completion:(id /* block */)a2;
- (void)_selectLabelMarker:(id)a0 animated:(BOOL)a1;
- (BOOL)_isUsingDevResourceStyleSheet;
- (void)_updateCameraState;
- (BOOL)isLocationConsoleEnabled;
- (void)setLocationConsoleEnabled:(BOOL)a0;
- (BOOL)_isHandlingUserEvent;
- (BOOL)_iconsShouldAlignToPixels;
- (void)_dropDraggingAnnotationView:(BOOL)a0;
- (void)_updateRotationAttributes;
- (void)_showOrHideScaleIfNecessary:(BOOL)a0;
- (void)_updateScale;
- (BOOL)_isUserLocationViewCentered:(double)a0;
- (void)pauseUserLocationUpdates;
- (void)resumeUserLocationUpdates;
- (void)_updateShouldDisplayEffects;
- (void)zoomOut:(id)a0;
- (BOOL)_roomForCompass;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })mapRectThatFits:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (void)setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1 animated:(BOOL)a2;
- (int)_viewIndexForSubview:(id)a0;
- (void)_pauseUserLocationUpdates;
- (void)_resumeUserLocationUpdates:(BOOL)a0;
- (void)_fixUserLocationFromPresentationValue;
- (void)_clearFixedUserLocation;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0 toPointToView:(id)a1;
- (BOOL)_updateRotationSupported;
- (void)_updateContentBounds;
- (void)_updateScrollContainerView:(BOOL)a0 forReason:(long long)a1;
- (void)_performWhenSizedBlocks;
- (BOOL)canPossiblyShowCompass;
- (double)_distanceFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1 fromView:(id)a2 withPrecision:(long long)a3;
- (BOOL)_shouldDisplayScaleForCurrentRegion;
- (void)_handleCompassTap:(id)a0;
- (void)mapLayerDidChangeVisibleRegion;
- (void)_setCompassVisible:(BOOL)a0 animationAllowed:(BOOL)a1 force:(BOOL)a2;
- (void)_postDidUpdateYawNotification;
- (void)_updateCompassPositionClassic;
- (int)currentMapViewTargetForAnalytics;
- (void)locationManagerDidPauseLocationUpdates:(id)a0;
- (void)mapLayerMuninAvailabilityDidChange:(long long)a0;
- (void)insertOverlay:(id)a0 belowOverlay:(id)a1;
- (id)_commonVisibilityAnimation:(BOOL)a0;
- (void)_deselectLabelMarkerAnimated:(BOOL)a0;
- (BOOL)_mapViewHasUpdatedCamera;
- (void)_updateVectorKitConsoleFrameWithEdgeInsets;
- (void)setDelegate:(id)a0;
- (void)_didChangeRegionMidstream:(BOOL)a0;
- (void)_willChangeRegionAnimated:(BOOL)a0;
- (void)_snapToNorthIfNecessary;
- (void)_sceneDidFinishSuspensionSnapshot:(id)a0;
- (void)_issueDatasetCheckinCall;
- (BOOL)_canZoomIn;
- (id)_flattenedAnnotationsForAnnotationViews:(id)a0 maxDisplayPriority:(float *)a1;
- (id)viewForAnnotation:(id)a0;
- (void)_updateInsets;
- (void)_displayWorld;
- (double)_goToCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0 zoomLevel:(double)a1 animated:(BOOL)a2;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 animated:(BOOL)a1;
- (void)_selectAnnotation:(id)a0 animated:(BOOL)a1;
- (void)navigationCameraReturnToPuck;
- (void)_addAnnotation:(id)a0 allowAnimation:(BOOL)a1;
- (struct CGPoint { double x0; double x1; })_convertCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0 toPointToView:(id)a1;
- (struct CLLocationCoordinate2D { double x0; double x1; })_convertPoint:(struct CGPoint { double x0; double x1; })a0 toCoordinateFromView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 toRectToView:(id)a1;
- (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toRegionFromView:(id)a1;
- (void)_didEndZoom;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toMapRectFromView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 toRectToView:(id)a1;
- (void)_registerSceneLifecycleNotifications;
- (void)updateLayoutGuides;
- (id)venueWithID:(unsigned long long)a0;
- (void)_willStartZoom:(BOOL)a0;
- (BOOL)_mustWaitUntilSized;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0 animated:(BOOL)a1;
- (void)_addDependentSetRegionBlock:(id /* block */)a0;
- (void)setCamera:(id)a0 animated:(BOOL)a1;
- (void)_addSetRegionBlock:(id /* block */)a0;
- (double)_zoomLevelForRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 includeAccessoryPadding:(BOOL)a1;
- (void)_suspendUserInteraction;
- (void)_setZoomScale:(double)a0 centerMapPoint:(struct { double x0; double x1; })a1 duration:(double)a2 timingFunction:(id)a3 animated:(BOOL)a4;
- (id)_mapRegionWithCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0 zoomScale:(double)a1;
- (void)addAnnotation:(id)a0;
- (void)_goToMapRegion:(id)a0 duration:(double)a1 timingFunction:(id)a2 animated:(BOOL)a3 completionHandler:(id /* block */)a4;
- (void)_setZoomScale:(double)a0 centerMapPoint:(struct { double x0; double x1; })a1 duration:(double)a2 animated:(BOOL)a3;
- (void)_goToMapRegion:(id)a0 duration:(double)a1 animated:(BOOL)a2 completionHandler:(id /* block */)a3;
- (void)_resumeUserInteraction;
- (void)_addSetRegionBlock:(id /* block */)a0 completion:(id /* block */)a1;
- (struct { double x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; })_zoomRegionForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1 maxZoomLevel:(long long)a2 minZoomLevel:(long long)a3;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })mapRectThatFits:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0;
- (double)_zoomLevelForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 includeAccessoryPadding:(BOOL)a1;
- (long long)_roundedZoomLevel;
- (void)_setZoomScale:(double)a0 centerCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a1 duration:(double)a2 animated:(BOOL)a3;
- (void)_setEdgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a0 explicit:(BOOL)a1;
- (void)_setZoomScale:(double)a0 centerCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a1 duration:(double)a2 timingFunction:(id)a3 animated:(BOOL)a4;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a0 zoomLevel:(double)a1 animated:(BOOL)a2;
- (void)_setCamera:(id)a0;
- (void)mapLayerDidChangeRegionAnimated:(BOOL)a0;
- (id)compassView;
- (double)_mapKitZoomLevelForVectorKitTileZoomLevel:(double)a0;
- (id /* block */)annotationCoordinateTest;
- (void)setHidden:(BOOL)a0;
- (void)_populateArchivedSubviews:(id)a0;
- (short)displayedFloorOrdinalForBuildingsInVenue:(id)a0;
- (BOOL)_pressEnded:(id)a0;
- (void)setCustomOverrideInterfaceStyle:(long long)a0;
- (void)makeZoomButtonsIfNeeded;
- (void)zoomControlMinusPressed:(id)a0;
- (void)zoomControlPlusPressed:(id)a0;
- (void)zoomControlMinusReleased:(id)a0;
- (void)zoomControlPlusReleased:(id)a0;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)a0;
- (void)deselectVenuePoiFeatureId;
- (void)_prepareFlyoverAnimation:(id)a0 completion:(id /* block */)a1;
- (void)_addDependentAuxiliaryBlock:(id /* block */)a0;
- (void)_performFlyoverAnimation:(id)a0 animateToStart:(BOOL)a1;
- (void)locationManagerFailedToUpdateLocation:(id)a0 withError:(id)a1;
- (void).cxx_destruct;
- (void)_stopFlyoverAnimation;
- (void)_pauseFlyoverAnimation;
- (void)setFlyoverMode:(int)a0;
- (void)_resumeFlyoverAnimation;
- (void)_addCustomFeatureDataSource:(id)a0;
- (void)_addAnnotationsCustomFeatureStoreIfNeeded;
- (void)selectAnnotationRepresentation:(id)a0 animated:(BOOL)a1;
- (id)_transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)selectAnnotation:(id)a0 animated:(BOOL)a1;
- (void)_setCamera:(id)a0 completionHandler:(id /* block */)a1;
- (void)_setCamera:(id)a0 duration:(double)a1 timingCurve:(long long)a2 completionHandler:(id /* block */)a3;
- (void)_setCamera:(id)a0 duration:(double)a1 timing:(id /* block */)a2 completionHandler:(id /* block */)a3;
- (double)_cameraAltitudeClampedToZoomRange:(id)a0;
- (double)_durationForCamera:(id)a0;
- (void)_updateFromCamera:(id)a0;
- (id /* block */)_vkTimingFunctionForUIViewAnimationCurve:(long long)a0;
- (void)_updateFromCamera:(id)a0 duration:(double)a1 timing:(id /* block */)a2 completionHandler:(id /* block */)a3;
- (double)_animationDurationWhenSettingCameraBoundary:(id)a0;
- (id)_transitLineMarkerForIdentifier:(id)a0;
- (void)_selectTransitLineMarker:(id)a0;
- (void)traitCollectionDidChange:(id)a0;
- (void)mapLayerNavigationCameraDidLeaveDefaultZoom;
- (id)_labelMarkerForCustomFeatureAnnotation:(id)a0;
- (void)_countUsageForAnnotationViewsIfNeeded:(id)a0;
- (void)_setCamera:(id)a0 animated:(BOOL)a1;
- (void)setCamera:(id)a0 animated:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)_setCamera:(id)a0 animated:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)setVehicleState:(struct { BOOL x0; })a0;
- (void)setCamera:(id)a0 duration:(double)a1 springMass:(float)a2 springStiffness:(float)a3 springDamping:(float)a4 springVelocity:(float)a5 completionHandler:(id /* block */)a6;
- (void)_setCamera:(id)a0 duration:(double)a1 springMass:(float)a2 springStiffness:(float)a3 springDamping:(float)a4 springVelocity:(float)a5 completionHandler:(id /* block */)a6;
- (void)setCameraZoomRange:(id)a0 animated:(BOOL)a1;
- (void)_setCamera:(id)a0 springMass:(float)a1 springStiffness:(float)a2 springDamping:(float)a3 springVelocity:(float)a4;
- (void)_setCameraZoomRange:(id)a0 animated:(BOOL)a1;
- (void)setCameraBoundary:(id)a0 animated:(BOOL)a1;
- (void)_setCameraBoundary:(id)a0 animated:(BOOL)a1;
- (void)_zoomWithAmount:(double)a0 completionHandler:(id /* block */)a1;
- (void)_zoomInWithCompletionHandler:(id /* block */)a0;
- (id)delegate;
- (void)_selectTransitLineMarkerWithIdentifier:(id)a0;
- (void)_deselectTransitLineMarker;
- (BOOL)_hasSelectedTransitLines;
- (id)_selectedTransitLineIDs;
- (void)_zoomOutWithCompletionHandler:(id /* block */)a0;
- (void)addAnnotationRepresentation:(id)a0 allowAnimation:(BOOL)a1;
- (void)removeAnnotationRepresentation:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRectInView:(id)a0;
- (void)deselectAnnotationRepresentation:(id)a0 animated:(BOOL)a1;
- (void)moveAnnotationRepresentation:(id)a0 fromCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a1 animated:(BOOL)a2 duration:(double)a3;
- (void)annotationManager:(id)a0 didAddAnnotationRepresentations:(id)a1;
- (void)annotationManager:(id)a0 didRemoveAnnotationRepresentations:(id)a1;
- (void)annotationManagerDidChangeVisibleAnnotationRepresentations:(id)a0;
- (id)annotationManager:(id)a0 representationForAnnotation:(id)a1;
- (void)annotationManager:(id)a0 didSelectAnnotationRepresentation:(id)a1;
- (void)annotationManager:(id)a0 didDeselectAnnotationRepresentation:(id)a1;
- (void)_handleSelectGestureToSelect:(id)a0;
- (void)_handleSelectGestureToDeselect:(id)a0;
- (void)_addDebugGesture;
- (void)annotationManager:(id)a0 willDeselectAnnotationRepresentation:(id)a1;
- (BOOL)annotationManager:(id)a0 shouldAnimateDeselectionOfAnnotation:(id)a1 forSelectionOfAnnotation:(id)a2;
- (BOOL)annotationManager:(id)a0 canSelectAnnotationRepresentation:(id)a1;
- (void)_addDependentSetRegionBlock:(id /* block */)a0 completion:(id /* block */)a1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)a0;
- (int)currentUITargetForAnalytics;
- (void)rotationFilter:(id)a0 didChangeSnapping:(BOOL)a1;
- (BOOL)annotationContainerShouldAlignToPixels:(id)a0;
- (BOOL)annotationContainerIsRotated:(id)a0;
- (id)annotationContainer:(id)a0 requestAddingClusterForAnnotationViews:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleCenteringRectInView:(id)a0;
- (id)mapLayerPresentationForAnnotation:(id)a0;
- (void)annotationContainer:(id)a0 requestRemovingClusterAnnotationView:(id)a1 updateVisible:(BOOL)a2;
- (void)annotationContainer:(id)a0 annotationView:(id)a1 calloutAccessoryControlTapped:(id)a2;
- (void)calloutDidAppearForAnnotationView:(id)a0 inContainer:(id)a1;
- (void)annotationContainerDidAnimateBubble:(id)a0;
- (void)gestureControllerDidStopTiltingDecelerating:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)annotationContainer:(id)a0 calloutPrimaryActionTriggeredForAnnotationView:(id)a1;
- (void)annotationContainer:(id)a0 scrollToRevealCalloutWithOffset:(struct CGPoint { double x0; double x1; })a1 annotationCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a2 completionHandler:(id /* block */)a3;
- (double)annotationContainer:(id)a0 pinDropDistanceForCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })a1 maxDistance:(double *)a2;
- (void)annotationContainerWillAnimateBubble:(id)a0;
- (void)annotationContainerWillDropPins:(id)a0;
- (void)annotationContainerDidDropPins:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })annotationContainerVisibleRect:(id)a0;
- (BOOL)annotationContainer:(id)a0 isAnnotationView:(id)a1 validForDisplayAtPoint:(struct CGPoint { double x0; double x1; })a2;
- (id)initFromIBWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)a0;
- (void)annotationContainerDidFinishMapsTransitionExpanding:(id)a0;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 gestureRecognizerHostView:(id)a1 showsAttribution:(BOOL)a2 showsAppleLogo:(BOOL)a3 allowsAntialiasing:(BOOL)a4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 locationManager:(id)a1;
- (void)setBackdropViewQualityChangingDisabled:(BOOL)a0;
- (void)_withEffectiveTraitCollection:(id /* block */)a0;
- (void)_setCompassViewSize:(long long)a0 style:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })attributionFrame;
- (id)mapAttributionWithStringAttributes:(id)a0;
- (id)mapAttributionWithStringAttributes:(id)a0 allowMultiLine:(BOOL)a1;
- (id)mapAttributionWithStringAttributes:(id)a0 underlineText:(BOOL)a1 linkAttribution:(BOOL)a2;
- (void)_removeCustomFeatureDataSource:(id)a0;
- (BOOL)_canZoomOut;
- (BOOL)isShowingNoDataPlaceholders;
- (void)_setMapType:(unsigned long long)a0 animated:(BOOL)a1;
- (void)_setCartographicConfiguration:(struct { long long x0; long long x1; long long x2; long long x3; BOOL x4; })a0 animated:(BOOL)a1;
- (double)_vectorKitTileZoomLevelForMapKitZoomLevel:(double)a0;
- (void)_setTracePlaybackSpeedMultiplier:(double)a0;
- (BOOL)isCurrentlyRotated;
- (BOOL)postsMapViewInitialRenderingNotification;
- (id)_annotationAtPoint:(struct CGPoint { double x0; double x1; })a0 avoidCurrent:(BOOL)a1;
- (BOOL)calloutViewContainsPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_handleSelectionAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)locationManagerUpdatedLocation:(id)a0;
- (void)toggleLocationConsole:(id)a0;
- (void)_annotationViewDragStateChanged:(id)a0;
- (id)beginStoppingEffects;
- (void)showAnnotations:(id)a0 animated:(BOOL)a1;
- (void)_insertSubview:(id)a0;
- (void)_selectUserLocationTypeWithDeltaZoomLevel:(double)a0;
- (id)_labelMarkersInCurrentViewport;
- (void)_forceFrame;
- (id)_labelMarkersInCurrentViewportForType:(int)a0;
- (BOOL)compassVisible;
- (id)_labelMarkerAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_addAnnotations:(id)a0 allowAnimation:(BOOL)a1;
- (void)_replaceAnnotation:(id)a0 withAnnotation:(id)a1;
- (void)mapLayerCanEnter3DModeDidChange:(BOOL)a0;
- (void)_createAnnotationViewSetIfNeeded;
- (void)_countUsageOfTypeIfNeeded:(unsigned long long)a0 forAnnotationView:(id)a1 countedEventTypes:(id)a2;
- (void)_createOverlayRendererDictionaryIfNeeded;
- (void)mapLayerWillChangeRegionAnimated:(BOOL)a0;
- (BOOL)gestureRecognizer:(id)a0 shouldReceiveTouch:(id)a1;
- (void)_addViewsForAnnotations:(id)a0;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)a0;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)a0 forAnnotation:(id)a1;
- (void)registerClass:(Class)a0 forAnnotationViewWithReuseIdentifier:(id)a1;
- (void)willMoveToWindow:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 toRectToView:(id)a1;
- (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toRegionFromView:(id)a1;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 toMapRectFromView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 toRectToView:(id)a1;
- (void)_enter3DMode;
- (void)_exit3DMode;
- (void)_enterARMode;
- (void)_enterARModeWithLocation:(id)a0;
- (void)_exitARMode;
- (void)_addVectorOverlay:(id)a0;
- (void)_removeVectorOverlay:(id)a0;
- (void)_addPersistentVectorOverlay:(id)a0;
- (void)_removePersistentVectorOverlay:(id)a0;
- (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })regionThatFits:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0;
- (void)_startZoomForExternalGesture;
- (void)_endZoomForExternalGesture;
- (void)_goToMapRegion:(id)a0 duration:(double)a1 animated:(BOOL)a2;
- (void)_setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 animated:(BOOL)a1 completionHandler:(id /* block */)a2;
- (void)_setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 duration:(double)a1 completionHandler:(id /* block */)a2;
- (void)setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 animated:(BOOL)a1;
- (double)_defaultAnimationDurationForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })a0 edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (double)_panDurationFromPoint:(struct CGPoint { double x0; double x1; })a0 toPoint:(struct CGPoint { double x0; double x1; })a1;
- (double)_zoomScaleForMapRegion:(id)a0;
- (void)_suspendPropagatingEdgeInsets;
- (void)_resumePropagatingEdgeInsets;
- (double)zoomToFocusVenue:(id)a0;
- (double)zoomToFocusVenueBuilding:(id)a0;
- (void)setDisplayedFloorOrdinal:(short)a0 forBuildingsInVenue:(id)a1;
- (short)defaultFloorForBuildingsInVenue:(id)a0;
- (void)resetDisplayedFloorOrdinalForAllVenues;
- (BOOL)displayedFloorIsDefaultForBuildingsInVenue:(id)a0;
- (void)_performFlyoverAnimation:(id)a0;
- (void)setCamera:(id)a0 duration:(double)a1 springMass:(float)a2 springStiffness:(float)a3 springDamping:(float)a4 springVelocity:(float)a5;
- (void)_zoomWithAmount:(double)a0;
- (void)setCamera:(id)a0 springMass:(float)a1 springStiffness:(float)a2 springDamping:(float)a3 springVelocity:(float)a4;
- (void)startLinearZoomIn:(BOOL)a0;
- (void)stopZoomingWithInertia;
- (void)_startPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)_updatePanWithTranslation:(struct CGPoint { double x0; double x1; })a0;
- (void)_stopPanningAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)pressesEnded:(id)a0 withEvent:(id)a1;
- (void)_clearGesturesAndAnimations;
- (void)_insertSubviewBelowAnnotationContainerView:(id)a0;
- (void)applicationWillTerminate:(id)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (BOOL)_wantsFocusRing;
- (void)_setRouteContext:(id)a0;
- (void)dealloc;
- (void)addAnnotations:(id)a0;
- (void)pressesBegan:(id)a0 withEvent:(id)a1;
- (void)mapLayerNavigationCameraHasStoppedPanning;
- (void)didMoveToWindow;
- (void)removeAnnotation:(id)a0;
- (void)_setRouteContextForRoutes:(id)a0 selectedRouteIndex:(unsigned long long)a1;
- (BOOL)_shouldUpdateSelectedRouteFromRoutes:(id)a0 selectedRouteIndex:(unsigned long long)a1;
- (id)_routeInfoForRoute:(id)a0;
- (void)_countUsageForRendererIfNeeded:(id)a0;
- (id)createDrawableForOverlay:(id)a0;
- (void)overlayContainerAddedDrawables:(id)a0;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })overlayContainerVisibleMapRect:(id)a0;
- (void)addOverlays:(id)a0;
- (void)_setRouteContextForRoute:(id)a0;
- (void)_setRouteContextInspectedSegmentIndex:(unsigned long long)a0 inspectedStepIndex:(unsigned long long)a1;
- (void)_clearRouteContext;
- (void)_setRouteContextAnnotationText:(id)a0 tollCurrency:(unsigned char)a1 forRoute:(id)a2;
- (void)_setRouteContextAnnotationText:(id)a0 advisoryStyleAttributes:(id)a1 forRoute:(id)a2;
- (void)_updateChargingStationTexts;
- (void)_setRouteContextAnnotationFocus:(BOOL)a0 forRoute:(id)a1;
- (void)_setAlternateRouteContextAnnotationETAComparison:(unsigned char)a0 forRoute:(id)a1;
- (void)addOverlay:(id)a0 level:(long long)a1;
- (void)addOverlays:(id)a0 level:(long long)a1;
- (void)insertOverlay:(id)a0 atIndex:(unsigned long long)a1 level:(long long)a2;
- (void)removeOverlays:(id)a0;
- (void)insertOverlay:(id)a0 atIndex:(unsigned long long)a1;
- (void)exchangeOverlayAtIndex:(unsigned long long)a0 withOverlayAtIndex:(unsigned long long)a1;
- (void)exchangeOverlay:(id)a0 withOverlay:(id)a1;
- (id)overlaysInLevel:(long long)a0;
- (id)viewForOverlay:(id)a0;
- (id)rendererForOverlay:(id)a0;
- (void)addOverlay:(id)a0;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)_sceneDidActivate:(id)a0;
- (void)gestureControllerWillStartUserInteraction:(id)a0;
- (void)mapLayerDidFinishInitialTrackingAnimation;
- (struct { double x0; double x1; })_convertPoint:(struct CGPoint { double x0; double x1; })a0 toMapPointFromView:(id)a1;
- (struct CGPoint { double x0; double x1; })_convertMapPoint:(struct { double x0; double x1; })a0 toPointToView:(id)a1;
- (void)gestureControllerDidStopUserInteraction:(id)a0;
- (struct CGPoint { double x0; double x1; })gestureController:(id)a0 focusPointForPoint:(struct CGPoint { double x0; double x1; })a1 gestureKind:(long long)a2;
- (void)gestureControllerWillStartTilting:(id)a0;
- (void)removeAnnotations:(id)a0;

@end

@class NSHashTable, NSString, NSError, NSTimer, GEOLocationShifter, NSLock, geo_isolater, NSBundle, CLHeading, GEOLocation, CLLocation, NSMutableArray;
@protocol MKLocationProvider, MNLocationRecorder;

@interface MKLocationManager : NSObject <GEOResourceManifestTileGroupObserver, MKLocationProviderDelegate> {
    id<MKLocationProvider> _locationProvider;
    NSHashTable *_locationObservers;
    NSHashTable *_locationListeners;
    NSHashTable *_headingObservers;
    CLLocation *_lastLocation;
    double _lastLocationUpdateTime;
    BOOL _trackingLocation;
    BOOL _trackingHeading;
    double _applicationResumeTime;
    double _applicationSuspendTime;
    double _headingUpdateTime;
    double _locationAccuracyUpdateTime;
    double _locationUpdateStartTime;
    BOOL _isReceivingAccurateLocations;
    NSMutableArray *_waitForAccurateLocationsHandlers;
    NSTimer *_waitForAccurateLocationsTimer;
    double _lastLocationReportTime;
    GEOLocationShifter *_locationShifter;
    NSTimer *_headingThrottlingTimer;
    double _lastVehicleHeading;
    double _lastVehicleSpeed;
    double _lastVehicleHeadingUpdateTime;
    double _lastVehicleSpeedUpdateTime;
    int _consecutiveOutOfCourseCount;
    BOOL _continuedAfterBecomingInactive;
    BOOL _suspended;
    NSMutableArray *_recentLocationUpdateIntervals;
    NSLock *_lastLocationLock;
    NSLock *_observersLock;
    int _accuracyAuthorizationState;
    BOOL _temporaryPreciseLocationAuthorizationPromptShown;
    geo_isolater *_accuracyAuthorizationIsolater;
    BOOL _hasCustomDesiredAccuracy;
}

@property (retain, nonatomic) id<MKLocationProvider> locationProvider;
@property (copy, nonatomic) id /* block */ locationCorrector;
@property (nonatomic) BOOL logStartStopLocationUpdates;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (readonly, nonatomic, getter=isLocationServicesAuthorizationNeeded) BOOL locationServicesAuthorizationNeeded;
@property (readonly, nonatomic) BOOL isLocationServicesAvailable;
@property (readonly, nonatomic) BOOL isLocationServicesPossiblyAvailable;
@property (readonly, nonatomic) BOOL isLocationServicesEnabled;
@property (readonly, nonatomic) BOOL isLocationServicesApproved;
@property (readonly, nonatomic) BOOL isLocationServicesDenied;
@property (readonly, nonatomic) BOOL isLocationServicesRestricted;
@property (readonly, nonatomic) BOOL isHeadingServicesAvailable;
@property (readonly, nonatomic) BOOL isAuthorizedForPreciseLocation;
@property (readonly, nonatomic) BOOL isTemporaryPreciseLocationAuthorizationPromptShown;
@property (nonatomic, getter=isLocationServicesPreferencesDialogEnabled) BOOL locationServicesPreferencesDialogEnabled;
@property (readonly, nonatomic) double headingUpdateTimeInterval;
@property (readonly, nonatomic) GEOLocation *currentLocation;
@property (readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;
@property (readonly, nonatomic) GEOLocation *courseCorrectedLocation;
@property (nonatomic) long long headingOrientation;
@property (copy, nonatomic) id /* block */ authorizationRequestBlock;
@property (readonly, nonatomic) BOOL hasLocation;
@property (readonly, nonatomic) CLLocation *lastLocation;
@property (readonly, nonatomic) CLLocation *lastGoodLocation;
@property (readonly, nonatomic) BOOL isLastLocationStale;
@property (readonly, nonatomic) NSError *locationError;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) double distanceFilter;
@property (nonatomic) BOOL matchInfoEnabled;
@property (nonatomic) BOOL fusionInfoEnabled;
@property (readonly, nonatomic) CLLocation *lastProviderLocation;
@property (nonatomic) long long activityType;
@property (readonly, nonatomic) double expectedGpsUpdateInterval;
@property (readonly, nonatomic) double timeScale;
@property (retain, nonatomic) NSBundle *effectiveBundle;
@property (copy, nonatomic) NSString *effectiveBundleIdentifier;
@property (nonatomic) BOOL useCourseForHeading;
@property (readonly, nonatomic) CLHeading *heading;
@property (retain, nonatomic) CLHeading *throttledHeading;
@property (readonly, nonatomic) double currentVehicleHeading;
@property (readonly, nonatomic) double currentVehicleSpeed;
@property (readonly, nonatomic) double vehicleHeadingOrCourse;
@property (copy, nonatomic) id /* block */ networkActivity;
@property (retain, nonatomic) id<MNLocationRecorder> locationRecorder;
@property (readonly, nonatomic) double navigationCourse;
@property (nonatomic) double minimumLocationUpdateInterval;
@property (nonatomic) BOOL continuesWhileInactive;
@property (readonly, nonatomic, getter=wasLastLocationPushed) BOOL lastLocationPushed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (id)sharedLocationManager;
+ (void)setCanMonitorWiFiStatus:(BOOL)a0;
+ (id)timeoutError;

- (void)_reportLocationSuccess;
- (void)dismissHeadingCalibrationDisplay;
- (void)applicationWillResignActive:(id)a0;
- (void)_suspend;
- (void)_setTrackingHeading:(BOOL)a0;
- (void)resourceManifestManager:(id)a0 didChangeActiveTileGroup:(id)a1 fromOldTileGroup:(id)a2;
- (void)requestWhenInUseAuthorization;
- (void)locationProvider:(id)a0 didUpdateVehicleSpeed:(double)a1 timestamp:(id)a2;
- (BOOL)locationProviderShouldPauseLocationUpdates:(id)a0;
- (void)stopHeadingUpdateWithObserver:(id)a0;
- (void)_reportLocationStatus:(SEL)a0;
- (void)startLocationUpdateWithObserver:(id)a0;
- (id)initWithCLLocationManager:(id)a0;
- (void)setLastLocation:(id)a0;
- (void)locationProvider:(id)a0 didUpdateVehicleHeading:(double)a1 timestamp:(id)a2;
- (void)requestWhenInUseAuthorizationWithPrompt;
- (void)stopLocationUpdateWithObserver:(id)a0;
- (void)locationProvider:(id)a0 didUpdateHeading:(id)a1;
- (void)_setTrackingLocation:(BOOL)a0;
- (void)locationProvider:(id)a0 didUpdateLocation:(id)a1;
- (void)_reportLocationReset;
- (void)locationProvider:(id)a0 didReceiveError:(id)a1;
- (void)startHeadingUpdateWithObserver:(id)a0;
- (void)locationProviderDidChangeAuthorizationStatus:(id)a0;
- (void)_reportLocationFailureWithError:(id)a0;
- (void)pushLocation:(id)a0;
- (void)locationProviderDidResumeLocationUpdates:(id)a0;
- (id)singleLocationUpdateWithHandler:(id /* block */)a0;
- (BOOL)_shouldAllowLocationUpdateInterval:(double)a0;
- (void)_syncLocationProviderWithTracking;
- (void)waitForAccurateLocationWithTimeout:(double)a0 handler:(id /* block */)a1;
- (void)applicationDidBecomeActive:(id)a0;
- (void)_startLocationUpdateWithObserver:(id)a0 desiredAccuracy:(double)a1;
- (void)requestTemporaryPreciseLocationAuthorizationWithPurposeKey:(id)a0 completion:(id /* block */)a1;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)a0 handler:(id /* block */)a1;
- (void)_setIsReceivingAccurateLocations:(BOOL)a0;
- (void)stopVehicleSpeedUpdate;
- (void)stopListeningForLocationUpdates:(id)a0;
- (void)dampenGPSLocationAccuracy:(id *)a0;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)a0 handler:(id /* block */)a1 timeout:(double)a2 maxLocationAge:(double)a3;
- (id)observersDescription;
- (void)_waitForAccurateLocationsTimerFired:(id)a0;
- (void)resetAfterResumeIfNecessary;
- (BOOL)_isTimeToResetOnResume;
- (void)locationProvider:(id)a0 didUpdateLocation:(id)a1 lastKnownNavCourse:(double)a2;
- (void).cxx_destruct;
- (id)init;
- (void)_reportHeadingFailureWithError:(id)a0;
- (void)_locationProvider:(id)a0 didUpdateLocation:(id)a1 lastKnownNavCourse:(double)a2;
- (void)startVehicleHeadingUpdate;
- (void)startVehicleSpeedUpdate;
- (void)stopVehicleHeadingUpdate;
- (void)locationProviderDidPauseLocationUpdates:(id)a0;
- (void)setHeading:(id)a0;
- (void)dealloc;
- (BOOL)isLocationServicesPossiblyAvailable:(id *)a0;
- (void)listenForLocationUpdates:(id)a0;
- (void)reset;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)a0 handler:(id /* block */)a1 timeout:(double)a2;
- (void)_reportHeadingSuccess;
- (void)_useDefaultCoreLocationProvider;

@end

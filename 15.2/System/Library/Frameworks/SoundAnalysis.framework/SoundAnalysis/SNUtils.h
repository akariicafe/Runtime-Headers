@interface SNUtils : NSObject

+ (BOOL)isRunningInDaemon;
+ (BOOL)isInternalBuild;
+ (struct { long long x0; int x1; unsigned int x2; long long x3; })roundTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toAllowableTime:(id)a1;
+ (id)vggishFrontEndProcessingModelDescription;
+ (id)anyInputMultiArrayShape:(id)a0;
+ (unsigned int)modelBlockSize:(id)a0;
+ (unsigned int)modelSampleRate:(id)a0 orDefaultRate:(unsigned int)a1;
+ (id)vggishFeatureEmbeddingInputShape;
+ (int)numberOfElements:(id)a0;
+ (id)vggishFeatureEmbeddingOutputShape;
+ (id)vggishFrontEndProcessingInputShape;
+ (struct _NSRange { unsigned long long x0; unsigned long long x1; })lastDimensionSizeRange:(id)a0;
+ (id)windowDurationConstraintFromMultiArrayShapeConstraint:(id)a0 sampleRate:(unsigned int)a1;
+ (id)anyOutputMultiArrayShape:(id)a0;
+ (id)userSuppliedInputFeatureNames:(id)a0;
+ (id)userSuppliedOutputFeatureNames:(id)a0;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })getTimeRangeEncompassingEntireAudioFileAtURL:(id)a0 error:(id *)a1;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })clipTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 toBounds:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1;
+ (id)loadModelAtURL:(id)a0 withTimeout:(double)a1 error:(id *)a2;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })standardizeTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 directionShouldBePositive:(BOOL)a1 negativeShouldResideInTimescale:(BOOL)a2;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })addOffset:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1;
+ (id)toMLMultiArrayConvertFromFloatScalar:(id)a0 error:(id *)a1;
+ (id)toFloatScalarConvertFromMLMultiArray:(id)a0 error:(id *)a1;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })convertScaleForTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 toValue:(int)a1 preferShrinkingWhenRounding:(BOOL)a2;
+ (void)clipTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 toBounds:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1 handler:(id /* block */)a2;
+ (id /* block */)zeroBufferPopulator;
+ (BOOL)flushBytesFromPreciseTimeRangeInAudioFile:(id)a0 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1 maxFramesPerBuffer:(unsigned int)a2 recycleBuffers:(BOOL)a3 prefixBufferPopulator:(id /* block */)a4 suffixBufferPopulator:(id /* block */)a5 intoSink:(id /* block */)a6 error:(id *)a7;
+ (BOOL)flushBytesFromStreamSource:(id /* block */)a0 toBuffer:(void *)a1 ofSizeInBytes:(unsigned long long)a2 error:(id *)a3;
+ (id)createMultiArrayContainingPreciseTimeRangeOfAudioFile:(id)a0 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1 maxFramesPerBuffer:(unsigned int)a2 recycleBuffers:(BOOL)a3 prefixBufferPopulator:(id /* block */)a4 suffixBufferPopulator:(id /* block */)a5 numDimensions:(unsigned long long)a6 error:(id *)a7;
+ (int)shapeNonUnitaryDimensionCount:(id)a0;
+ (id)feedbackConnections:(id)a0;
+ (id)denylistFromModelDescription:(id)a0;
+ (id)filterClassLabelsInDictionary:(id)a0 usingDenylist:(id)a1;
+ (id)filteredClassLabelsFromModelDescription:(id)a0;
+ (unsigned int)modelChannelCount:(id)a0;
+ (id)valueForEntitlement:(id)a0 error:(id *)a1;
+ (BOOL)isFormatPCM:(id)a0;
+ (id)splitBuffer:(id)a0 intoBuffersWithFrameCount:(unsigned int)a1;
+ (long long)audioFileFrameCount:(id)a0;
+ (long long)detectionCountInResults:(id)a0;
+ (id)vggishFrontEndProcessingOutputShape;
+ (unsigned int)modelBlockSize:(id)a0 channelCount:(unsigned int)a1;
+ (id)parseFeedbackConnectionsString:(id)a0;
+ (id)userSuppliedFeatureNames:(id)a0 direction:(long long)a1;
+ (id)subtractSet:(id)a0 from:(id)a1;
+ (void)_deleteWAVAndTextFilesInDirectory:(id)a0 createdBeforeDate:(id)a1 withRemainingDirectoryByteSizeLessThan:(long long)a2;
+ (id)fileCreationDate:(id)a0;
+ (id)diskSpaceRemainingBytesContainingDirectory:(id)a0;
+ (id)fileSizeBytes:(id)a0;
+ (id)valueForEntitlement:(id)a0 fromTask:(struct __SecTask { } *)a1 error:(id *)a2;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })convertScaleForTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 toValue:(int)a1 startRoundingMethod:(unsigned int)a2 durationRoundingMethod:(unsigned int)a3;
+ (struct { long long x0; int x1; unsigned int x2; long long x3; })standardizeTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 negativeShouldResideInTimescale:(BOOL)a1;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })standardizeTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 directionShouldBePositive:(BOOL)a1;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })standardizeTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 negativeShouldResideInTimescale:(BOOL)a1;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })makeInvalidTimeRange;
+ (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })getTimeRangeEncompassingEntireAudioFile:(id)a0;
+ (void)processFrameCount:(unsigned int)a0 bufferFactory:(id /* block */)a1 populator:(id /* block */)a2 handler:(id /* block */)a3 completionHandler:(id /* block */)a4;
+ (unsigned int)readFramesFromAudioFile:(id)a0 frameCount:(unsigned int)a1 maxFramesPerBuffer:(unsigned int)a2 recycleBuffers:(BOOL)a3 handler:(id /* block */)a4 error:(id *)a5;
+ (unsigned int)readFramesFromAudioFile:(id)a0 frameCount:(unsigned int)a1 atSampleRate:(double)a2 maxFramesPerBuffer:(unsigned int)a3 recycleBuffers:(BOOL)a4 handler:(id /* block */)a5 error:(id *)a6;
+ (struct { long long x0; int x1; unsigned int x2; long long x3; })readPreciseTimeDurationFromAudioFile:(id)a0 timeDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 maxFramesPerBuffer:(unsigned int)a2 recycleBuffers:(BOOL)a3 handler:(id /* block */)a4 error:(id *)a5;
+ (BOOL)readPreciseTimeRangeFromAudioFile:(id)a0 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1 maxFramesPerBuffer:(unsigned int)a2 recycleBuffers:(BOOL)a3 prefixBufferPopulator:(id /* block */)a4 suffixBufferPopulator:(id /* block */)a5 handler:(id /* block */)a6 error:(id *)a7;
+ (BOOL)flushAudioBuffer:(id)a0 channelIndex:(unsigned long long)a1 intoSink:(id /* block */)a2 error:(id *)a3;
+ (void)silenceUnfilledFramesInBuffer:(id)a0;
+ (void)copyAudioBufferList:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)a0 to:(struct AudioBufferList { unsigned int x0; struct AudioBuffer { unsigned int x0; unsigned int x1; void *x2; } x1[1]; } *)a1 frameCount:(unsigned int)a2 bytesPerFrame:(unsigned int)a3;
+ (BOOL)multiArrayConstraintLastDimensionIsFlexible:(id)a0;
+ (id)loggingPrefixForRequest:(id)a0;
+ (void)deleteWAVAndTextFilesInDirectory:(id)a0 createdBeforeDate:(id)a1 withRemainingDirectoryByteSizeLessThan:(long long)a2;
+ (BOOL)checkTimeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a0 isIdenticalToOther:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1;
+ (struct { long long x0; int x1; unsigned int x2; long long x3; })readApproximateTimeDurationFromAudioFile:(id)a0 timeDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 roundingMethod:(unsigned int)a2 maxFramesPerBuffer:(unsigned int)a3 recycleBuffers:(BOOL)a4 handler:(id /* block */)a5 error:(id *)a6;
+ (BOOL)readApproximateTimeRangeFromAudioFile:(id)a0 timeRange:(struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })a1 preferShrinkingWhenRounding:(BOOL)a2 maxFramesPerBuffer:(unsigned int)a3 recycleBuffers:(BOOL)a4 prefixBufferPopulator:(id /* block */)a5 suffixBufferPopulator:(id /* block */)a6 handler:(id /* block */)a7 error:(id *)a8;

@end

@class NSURL, NSNumber, WKWebViewConfiguration, WKBackForwardList, UIScrollView, WKBrowsingContextHandle, UIColor, UIView, NSString, _WKInspector, WKWebViewContentProviderRegistry, UIGestureRecognizer, _WKFrameHandle, UIEventAttribution, NSArray, NSData, _WKSessionState, WKPasswordView, _WKWebViewPrintFormatter;
@protocol WKNavigationDelegate, WKHistoryDelegatePrivate, WKUIDelegate, _WKResourceLoadDelegate, _WKDiagnosticLoggingDelegate, _WKAppHighlightDelegate, _WKFindDelegate, _WKIconLoadingDelegate, _WKInputDelegate, _WKFullscreenDelegate, _WKWebViewPrintProvider, _WKTextManipulationDelegate;

@interface WKWebView : UIView <UIScrollViewDelegate, UIResponderStandardEditActions> {
    struct RetainPtr<WKWebViewConfiguration> { void *m_ptr; } _configuration;
    struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> { struct WebPageProxy *m_ptr; } _page;
    struct unique_ptr<WebKit::NavigationState, std::default_delete<WebKit::NavigationState>> { struct __compressed_pair<WebKit::NavigationState *, std::default_delete<WebKit::NavigationState>> { struct NavigationState *__value_; } __ptr_; } _navigationState;
    struct unique_ptr<WebKit::UIDelegate, std::default_delete<WebKit::UIDelegate>> { struct __compressed_pair<WebKit::UIDelegate *, std::default_delete<WebKit::UIDelegate>> { struct UIDelegate *__value_; } __ptr_; } _uiDelegate;
    struct unique_ptr<WebKit::IconLoadingDelegate, std::default_delete<WebKit::IconLoadingDelegate>> { struct __compressed_pair<WebKit::IconLoadingDelegate *, std::default_delete<WebKit::IconLoadingDelegate>> { struct IconLoadingDelegate *__value_; } __ptr_; } _iconLoadingDelegate;
    struct unique_ptr<WebKit::ResourceLoadDelegate, std::default_delete<WebKit::ResourceLoadDelegate>> { struct __compressed_pair<WebKit::ResourceLoadDelegate *, std::default_delete<WebKit::ResourceLoadDelegate>> { struct ResourceLoadDelegate *__value_; } __ptr_; } _resourceLoadDelegate;
    struct WeakObjCPtr<id<_WKTextManipulationDelegate>> { id m_weakReference; } _textManipulationDelegate;
    struct WeakObjCPtr<id<_WKInputDelegate>> { id m_weakReference; } _inputDelegate;
    struct WeakObjCPtr<id<_WKAppHighlightDelegate>> { id m_weakReference; } _appHighlightDelegate;
    struct RetainPtr<WKSafeBrowsingWarning> { void *m_ptr; } _safeBrowsingWarning;
    struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } _resolutionForShareSheetImmediateCompletionForTesting;
    unsigned long long _selectionAttributes;
    unsigned long long _observedRenderingProgressEvents;
    BOOL _usePlatformFindUI;
    struct RetainPtr<WKScrollView> { void *m_ptr; } _scrollView;
    struct RetainPtr<WKContentView> { void *m_ptr; } _contentView;
    struct unique_ptr<WebKit::ViewGestureController, std::default_delete<WebKit::ViewGestureController>> { struct __compressed_pair<WebKit::ViewGestureController *, std::default_delete<WebKit::ViewGestureController>> { struct ViewGestureController *__value_; } __ptr_; } _gestureController;
    struct Vector<WTF::BlockPtr<void ()>, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _visibleContentRectUpdateCallbacks;
    struct RetainPtr<WKFullScreenWindowController> { void *m_ptr; } _fullScreenWindowController;
    struct RetainPtr<_WKRemoteObjectRegistry> { void *m_ptr; } _remoteObjectRegistry;
    struct optional<CGSize> { union { char __null_state_; struct CGSize { double width; double height; } __val_; } ; BOOL __engaged_; } _viewLayoutSizeOverride;
    struct optional<WebCore::FloatSize> { union { char __null_state_; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } __val_; } ; BOOL __engaged_; } _lastSentViewLayoutSize;
    struct optional<CGSize> { union { char __null_state_; struct CGSize { double width; double height; } __val_; } ; BOOL __engaged_; } _maximumUnobscuredSizeOverride;
    struct optional<WebCore::FloatSize> { union { char __null_state_; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } __val_; } ; BOOL __engaged_; } _lastSentMaximumUnobscuredSize;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _inputViewBoundsInWindow;
    double _viewportMetaTagWidth;
    BOOL _viewportMetaTagWidthWasExplicit;
    BOOL _viewportMetaTagCameFromImageDocument;
    double _initialScaleFactor;
    BOOL _fastClickingIsDisabled;
    BOOL _allowsLinkPreview;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _obscuredInsets;
    BOOL _haveSetObscuredInsets;
    BOOL _isChangingObscuredInsetsInteractively;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _unobscuredSafeAreaInsets;
    BOOL _haveSetUnobscuredSafeAreaInsets;
    BOOL _avoidsUnsafeArea;
    unsigned long long _obscuredInsetEdgesAffectedBySafeArea;
    long long _interfaceOrientationOverride;
    BOOL _overridesInterfaceOrientation;
    struct optional<int> { union { char __null_state_; int __val_; } ; BOOL __engaged_; } _lastSentDeviceOrientation;
    BOOL _allowsViewportShrinkToFit;
    BOOL _hasCommittedLoadForMainFrame;
    BOOL _needsResetViewStateAfterCommitLoadForMainFrame;
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { unsigned long long m_identifier; } _firstPaintAfterCommitLoadTransactionID;
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { unsigned long long m_identifier; } _lastTransactionID;
    int _dynamicViewportUpdateMode;
    unsigned long long _currentDynamicViewportSizeUpdateID;
    struct CATransform3D { double m11; double m12; double m13; double m14; double m21; double m22; double m23; double m24; double m31; double m32; double m33; double m34; double m41; double m42; double m43; double m44; } _resizeAnimationTransformAdjustments;
    double _animatedResizeOriginalContentWidth;
    struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _animatedResizeOldBounds;
    double _animatedResizeOldMinimumEffectiveDeviceWidth;
    int _animatedResizeOldOrientation;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _animatedResizeOldObscuredInsets;
    struct RetainPtr<UIView> { void *m_ptr; } _resizeAnimationView;
    double _lastAdjustmentForScroller;
    struct optional<CGRect> { union { char __null_state_; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } __val_; } ; BOOL __engaged_; } _frozenVisibleContentRect;
    struct optional<CGRect> { union { char __null_state_; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } __val_; } ; BOOL __engaged_; } _frozenUnobscuredContentRect;
    BOOL _commitDidRestoreScrollPosition;
    struct optional<WebCore::FloatPoint> { union { char __null_state_; struct FloatPoint { float m_x; float m_y; } __val_; } ; BOOL __engaged_; } _scrollOffsetToRestore;
    struct RectEdges<float> { struct array<float, 4> { float __elems_[4]; } m_sides; } _obscuredInsetsWhenSaved;
    struct optional<WebCore::FloatPoint> { union { char __null_state_; struct FloatPoint { float m_x; float m_y; } __val_; } ; BOOL __engaged_; } _unobscuredCenterToRestore;
    struct optional<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>> { union { char __null_state_; struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { unsigned long long m_identifier; } __val_; } ; BOOL __engaged_; } _firstTransactionIDAfterPageRestore;
    double _scaleToRestore;
    BOOL _allowsBackForwardNavigationGestures;
    struct RetainPtr<UIView<WKWebViewContentProvider>> { void *m_ptr; } _customContentView;
    struct RetainPtr<UIView> { void *m_ptr; } _customContentFixedOverlayView;
    struct RetainPtr<NSTimer> { void *m_ptr; } _enclosingScrollViewScrollTimer;
    BOOL _didScrollSinceLastTimerFire;
    struct Color { unsigned long long m_colorAndFlags; } _scrollViewBackgroundColor;
    double _totalScrollViewBottomInsetAdjustmentForKeyboard;
    BOOL _currentlyAdjustingScrollViewInsetsForKeyboard;
    BOOL _invokingUIScrollViewDelegateCallback;
    BOOL _didDeferUpdateVisibleContentRectsForUIScrollViewDelegateCallback;
    BOOL _didDeferUpdateVisibleContentRectsForAnyReason;
    BOOL _didDeferUpdateVisibleContentRectsForUnstableScrollView;
    BOOL _alwaysSendNextVisibleContentRectUpdate;
    BOOL _contentViewShouldBecomeFirstResponderAfterNavigationGesture;
    BOOL _waitingForEndAnimatedResize;
    BOOL _waitingForCommitAfterAnimatedResize;
    struct Vector<WTF::Function<void ()>, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _callbacksDeferredDuringResize;
    struct RetainPtr<NSMutableArray> { void *m_ptr; } _stableStatePresentationUpdateCallbacks;
    struct RetainPtr<WKPasswordView> { void *m_ptr; } _passwordView;
    BOOL _hasScheduledVisibleRectUpdate;
    struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char m_storage; } _viewStabilityWhenVisibleContentRectUpdateScheduled;
    struct optional<WebCore::WheelScrollGestureState> { union { char __null_state_; unsigned char __val_; } ; BOOL __engaged_; } _currentScrollGestureState;
    unsigned long long _wheelEventCountInCurrentScrollGesture;
    unsigned long long _dragInteractionPolicy;
    struct MonotonicTime { double m_value; } _timeOfRequestForVisibleContentRectUpdate;
    struct MonotonicTime { double m_value; } _timeOfLastVisibleContentRectUpdate;
    struct optional<WTF::MonotonicTime> { union { char __null_state_; struct MonotonicTime { double m_value; } __val_; } ; BOOL __engaged_; } _timeOfFirstVisibleContentRectUpdateWithPendingCommit;
    unsigned long long _focusPreservationCount;
    unsigned long long _activeFocusedStateRetainCount;
}

@property (class, copy, nonatomic, setter=_setStringForFind:) NSString *_stringForFind;

@property (readonly, nonatomic) id _remoteObjectRegistry;
@property (readonly, nonatomic) WKBrowsingContextHandle *_handle;
@property (nonatomic, setter=_setObservedRenderingProgressEvents:) unsigned long long _observedRenderingProgressEvents;
@property (weak, nonatomic, setter=_setHistoryDelegate:) id<WKHistoryDelegatePrivate> _historyDelegate;
@property (weak, nonatomic, setter=_setIconLoadingDelegate:) id<_WKIconLoadingDelegate> _iconLoadingDelegate;
@property (weak, nonatomic, setter=_setResourceLoadDelegate:) id<_WKResourceLoadDelegate> _resourceLoadDelegate;
@property (readonly, nonatomic) NSURL *_unreachableURL;
@property (readonly, nonatomic) NSURL *_mainFrameURL;
@property (readonly, nonatomic) NSURL *_resourceDirectoryURL;
@property (readonly, nonatomic) NSArray *_certificateChain;
@property (readonly, nonatomic) NSURL *_committedURL;
@property (readonly, nonatomic) NSString *_MIMEType;
@property (readonly, nonatomic) NSString *_userAgent;
@property (copy, setter=_setApplicationNameForUserAgent:) NSString *_applicationNameForUserAgent;
@property (copy, setter=_setCustomUserAgent:) NSString *_customUserAgent;
@property (readonly, nonatomic, getter=_isPlayingAudio) BOOL _playingAudio;
@property (nonatomic, setter=_setUserContentExtensionsEnabled:) BOOL _userContentExtensionsEnabled;
@property (readonly, nonatomic) int _webProcessIdentifier;
@property (readonly, nonatomic) int _provisionalWebProcessIdentifier;
@property (nonatomic, getter=_isEditable, setter=_setEditable:) BOOL _editable;
@property (readonly, nonatomic) BOOL _negotiatedLegacyTLS;
@property (readonly, nonatomic) NSData *_sessionStateData;
@property (readonly, nonatomic) _WKSessionState *_sessionState;
@property (nonatomic, setter=_setAllowsRemoteInspection:) BOOL _allowsRemoteInspection;
@property (copy, nonatomic, setter=_setRemoteInspectionNameOverride:) NSString *_remoteInspectionNameOverride;
@property (readonly, nonatomic) BOOL _isBeingInspected;
@property (readonly, nonatomic) _WKInspector *_inspector;
@property (readonly, nonatomic) _WKFrameHandle *_mainFrame;
@property (weak, nonatomic, setter=_setTextManipulationDelegate:) id<_WKTextManipulationDelegate> _textManipulationDelegate;
@property (nonatomic, setter=_setAddsVisitedLinks:) BOOL _addsVisitedLinks;
@property (readonly, nonatomic) BOOL _networkRequestsInProgress;
@property (readonly, nonatomic, getter=_isShowingNavigationGestureSnapshot) BOOL _showingNavigationGestureSnapshot;
@property (readonly, nonatomic) BOOL _deferrableUserScriptsNeedNotification;
@property (nonatomic, setter=_setLayoutMode:) unsigned long long _layoutMode;
@property (nonatomic, setter=_setFixedLayoutSize:) struct CGSize { double x0; double x1; } _fixedLayoutSize;
@property (nonatomic, setter=_setViewportSizeForCSSViewportUnits:) struct CGSize { double x0; double x1; } _viewportSizeForCSSViewportUnits;
@property (nonatomic, setter=_setViewScale:) double _viewScale;
@property (copy, nonatomic, setter=_setCORSDisablingPatterns:) NSArray *_corsDisablingPatterns;
@property (nonatomic, setter=_setMinimumEffectiveDeviceWidth:) double _minimumEffectiveDeviceWidth;
@property (nonatomic, setter=_setBackgroundExtendsBeyondPage:) BOOL _backgroundExtendsBeyondPage;
@property (readonly, nonatomic) unsigned long long _selectionAttributes;
@property (readonly, nonatomic) BOOL _webProcessIsResponsive;
@property (nonatomic, setter=_setPaginationMode:) long long _paginationMode;
@property (nonatomic, setter=_setPaginationBehavesLikeColumns:) BOOL _paginationBehavesLikeColumns;
@property (nonatomic, setter=_setPageLength:) double _pageLength;
@property (nonatomic, setter=_setGapBetweenPages:) double _gapBetweenPages;
@property (nonatomic, setter=_setPaginationLineGridEnabled:) BOOL _paginationLineGridEnabled;
@property (readonly) unsigned long long _pageCount;
@property (readonly, nonatomic) BOOL _supportsTextZoom;
@property (nonatomic, setter=_setTextZoomFactor:) double _textZoomFactor;
@property (nonatomic, setter=_setPageZoomFactor:) double _pageZoomFactor;
@property (weak, nonatomic, setter=_setDiagnosticLoggingDelegate:) id<_WKDiagnosticLoggingDelegate> _diagnosticLoggingDelegate;
@property (weak, nonatomic, setter=_setFindDelegate:) id<_WKFindDelegate> _findDelegate;
@property (weak, nonatomic, setter=_setInputDelegate:) id<_WKInputDelegate> _inputDelegate;
@property (readonly, nonatomic, getter=_isDisplayingStandaloneImageDocument) BOOL _displayingStandaloneImageDocument;
@property (readonly, nonatomic, getter=_isDisplayingStandaloneMediaDocument) BOOL _displayingStandaloneMediaDocument;
@property (nonatomic, setter=_setScrollPerformanceDataCollectionEnabled:) BOOL _scrollPerformanceDataCollectionEnabled;
@property (readonly, nonatomic) NSArray *_scrollPerformanceData;
@property (nonatomic, getter=_allowsMediaDocumentInlinePlayback, setter=_setAllowsMediaDocumentInlinePlayback:) BOOL _allowsMediaDocumentInlinePlayback;
@property (nonatomic, setter=_setFullscreenDelegate:) id<_WKFullscreenDelegate> _fullscreenDelegate;
@property (readonly, nonatomic) BOOL _isInFullscreen;
@property (readonly, nonatomic) unsigned long long _mediaCaptureState;
@property (readonly, nonatomic) unsigned long long _mediaMutedState;
@property (nonatomic, setter=_setMediaCaptureEnabled:) BOOL _mediaCaptureEnabled;
@property (readonly, nonatomic) BOOL _canTogglePictureInPicture;
@property (readonly, nonatomic) BOOL _isPictureInPictureActive;
@property (nonatomic, setter=_setCanUseCredentialStorage:) BOOL _canUseCredentialStorage;
@property (weak, nonatomic, setter=_setAppHighlightDelegate:) id<_WKAppHighlightDelegate> _appHighlightDelegate;
@property (readonly, nonatomic) UIColor *_themeColor;
@property (readonly, nonatomic) UIColor *_pageExtendedBackgroundColor;
@property (readonly, nonatomic) UIColor *_sampledPageTopColor;
@property (readonly, nonatomic) BOOL _needsSiteSpecificViewportQuirks;
@property (readonly, copy, nonatomic) NSArray *certificateChain;
@property (nonatomic, setter=_setMediaCaptureReportingDelayForTesting:) double _mediaCaptureReportingDelayForTesting;
@property (readonly, nonatomic) BOOL _wirelessVideoPlaybackDisabled;
@property (nonatomic, setter=_setScrollingUpdatesDisabledForTesting:) BOOL _scrollingUpdatesDisabledForTesting;
@property (readonly, nonatomic) BOOL _hasServiceWorkerBackgroundActivityForTesting;
@property (readonly, nonatomic) BOOL _hasServiceWorkerForegroundActivityForTesting;
@property (readonly, nonatomic) WKPasswordView *_passwordView;
@property (readonly, nonatomic) WKWebViewContentProviderRegistry *_contentProviderRegistry;
@property (readonly, nonatomic) long long _selectionGranularity;
@property (readonly, nonatomic) BOOL _isBackground;
@property (readonly, nonatomic) BOOL _allowsDoubleTapGestures;
@property (readonly, nonatomic) BOOL _haveSetObscuredInsets;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _computedObscuredInset;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _computedUnobscuredSafeAreaInset;
@property (readonly, nonatomic, getter=_isRetainingActiveFocusedState) BOOL _retainingActiveFocusedState;
@property (readonly, nonatomic) int _deviceOrientation;
@property (copy, nonatomic, setter=_setUIEventAttribution:) UIEventAttribution *_uiEventAttribution;
@property (copy, nonatomic, setter=_setEphemeralUIEventAttribution:) UIEventAttribution *_ephemeralUIEventAttribution;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _contentVisibleRect;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } _minimumLayoutSizeOverride;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } _maximumUnobscuredSizeOverride;
@property (nonatomic, setter=_setObscuredInsets:) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _obscuredInsets;
@property (nonatomic, setter=_setUnobscuredSafeAreaInsets:) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _unobscuredSafeAreaInsets;
@property (readonly, nonatomic) BOOL _safeAreaShouldAffectObscuredInsets;
@property (nonatomic, setter=_setObscuredInsetEdgesAffectedBySafeArea:) unsigned long long _obscuredInsetEdgesAffectedBySafeArea;
@property (readonly, nonatomic) UIView *_enclosingViewForExposedRectComputation;
@property (nonatomic, setter=_setInterfaceOrientationOverride:) long long _interfaceOrientationOverride;
@property (nonatomic, setter=_setAllowsViewportShrinkToFit:) BOOL _allowsViewportShrinkToFit;
@property (readonly, nonatomic, getter=_isDisplayingPDF) BOOL _displayingPDF;
@property (readonly, nonatomic) NSData *_dataForDisplayedPDF;
@property (readonly, nonatomic) NSString *_suggestedFilenameForDisplayedPDF;
@property (readonly, nonatomic) _WKWebViewPrintFormatter *_webViewPrintFormatter;
@property (nonatomic, setter=_setDragInteractionPolicy:) unsigned long long _dragInteractionPolicy;
@property (readonly, nonatomic) BOOL _shouldAvoidResizingWhenInputViewBoundsChange;
@property (readonly, nonatomic) BOOL _contentViewIsFirstResponder;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _uiTextCaretRect;
@property (readonly, nonatomic) UIView *_safeBrowsingWarning;
@property (readonly, nonatomic) id<_WKWebViewPrintProvider> _printProvider;
@property (readonly, nonatomic) NSString *textContentTypeForTesting;
@property (readonly, nonatomic) NSString *selectFormPopoverTitle;
@property (readonly, nonatomic) NSString *formInputLabel;
@property (readonly, nonatomic) NSArray *_uiTextSelectionRects;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _inputViewBoundsInWindow;
@property (readonly, nonatomic) NSString *_scrollingTreeAsText;
@property (readonly, nonatomic) NSString *_uiViewTreeAsText;
@property (readonly, nonatomic) NSNumber *_stableStateOverride;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _dragCaretRect;
@property (readonly, nonatomic, getter=_isAnimatingDragCancel) BOOL _animatingDragCancel;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _tapHighlightViewRect;
@property (readonly, nonatomic) UIGestureRecognizer *_imageAnalysisGestureRecognizer;
@property (readonly, copy, nonatomic) WKWebViewConfiguration *configuration;
@property (weak, nonatomic) id<WKNavigationDelegate> navigationDelegate;
@property (weak, nonatomic) id<WKUIDelegate> UIDelegate;
@property (readonly, nonatomic) WKBackForwardList *backForwardList;
@property (readonly, copy, nonatomic) NSString *title;
@property (readonly, copy, nonatomic) NSURL *URL;
@property (readonly, nonatomic, getter=isLoading) BOOL loading;
@property (readonly, nonatomic) double estimatedProgress;
@property (readonly, nonatomic) BOOL hasOnlySecureContent;
@property (readonly, nonatomic) struct __SecTrust { } *serverTrust;
@property (readonly, nonatomic) BOOL canGoBack;
@property (readonly, nonatomic) BOOL canGoForward;
@property (readonly, nonatomic) long long cameraCaptureState;
@property (readonly, nonatomic) long long microphoneCaptureState;
@property (nonatomic) BOOL allowsBackForwardNavigationGestures;
@property (copy, nonatomic) NSString *customUserAgent;
@property (nonatomic) BOOL allowsLinkPreview;
@property (readonly, nonatomic) UIScrollView *scrollView;
@property (nonatomic) double pageZoom;
@property (copy, nonatomic) NSString *mediaType;
@property (copy, nonatomic) id interactionState;
@property (readonly, nonatomic) UIColor *themeColor;
@property (copy, nonatomic) UIColor *underPageBackgroundColor;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)handlesURLScheme:(id)a0;
+ (BOOL)automaticallyNotifiesObserversOfUnderPageBackgroundColor;
+ (BOOL)_handlesSafeBrowsing;
+ (BOOL)_willUpgradeToHTTPS:(id)a0;
+ (id)_confirmMalwareSentinel;
+ (id)_visitUnsafeWebsiteSentinel;
+ (void)_setApplicationBundleIdentifier:(id)a0;
+ (void)_clearApplicationBundleIdentifierTestingOverride;

- (void)toggleBoldface:(id)a0;
- (void)_keyboardWillChangeFrame:(id)a0;
- (void)increaseSize:(id)a0;
- (double)_contentZoomScale;
- (id)valueForUndefinedKey:(id)a0;
- (void)_share:(id)a0;
- (id)inputAssistantItem;
- (void)replace:(id)a0;
- (void)_transliterateChinese:(id)a0;
- (id)reloadFromOrigin;
- (struct NakedPtr<WebKit::WebPageProxy> { struct WebPageProxy *x0; })_page;
- (void)_promptForReplace:(id)a0;
- (void)select:(id)a0;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (void)_processDidExit;
- (id)_contentsOfUserInterfaceItem:(id)a0;
- (void)setSelectedColorForColorPicker:(id)a0;
- (void)_define:(id)a0;
- (void)_accessibilityClearSelection;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (void)_showTextStyleOptions:(id)a0;
- (void)selectFormAccessoryPickerRow:(int)a0;
- (void)_previousAccessoryTab:(id)a0;
- (void)_insertOrderedList:(id)a0;
- (void)_nextAccessoryTab:(id)a0;
- (void)_focusTextInputContext:(id)a0 placeCaretAt:(struct CGPoint { double x0; double x1; })a1 completionHandler:(id /* block */)a2;
- (BOOL)selectFormAccessoryHasCheckedItemAtRow:(long long)a0;
- (void)_accessibilityStoreSelection;
- (void)_zoomToFocusRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } *)a0 selectionRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } *)a1 fontSize:(float)a2 minimumScale:(double)a3 maximumScale:(double)a4 allowScaling:(BOOL)a5 forceScroll:(BOOL)a6;
- (void)_simulateTextEntered:(id)a0;
- (void)layoutSubviews;
- (void)_alignRight:(id)a0;
- (id)browsingContextController;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(id /* block */)a0;
- (void)_dynamicUserInterfaceTraitDidChange;
- (void)pasteAndMatchStyle:(id)a0;
- (void)_insertNestedUnorderedList:(id)a0;
- (void)_didCommitLoadForMainFrame;
- (id)goForward;
- (void)_becomeFirstResponderWithSelectionMovingForward:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_handleKeyUIEvent:(id)a0;
- (void)captureTextFromCamera:(id)a0;
- (void)_selectDataListOption:(int)a0;
- (void)toggleItalics:(id)a0;
- (void)_simulateElementAction:(long long)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (void)_outdent:(id)a0;
- (void)_contentSizeCategoryDidChange:(id)a0;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)a0 withText:(id)a1 completionHandler:(id /* block */)a2;
- (void)_increaseListLevel:(id)a0;
- (id)viewForZoomingInScrollView:(id)a0;
- (void)_pasteAsQuotation:(id)a0;
- (void)_dispatchSetDeviceOrientation:(int)a0;
- (void)paste:(id)a0;
- (void)_didStartProvisionalLoadForMainFrame;
- (void)_keyboardWillHide:(id)a0;
- (id)_dataDetectionResults;
- (void)setTimePickerValueToHour:(long long)a0 minute:(long long)a1;
- (void)safeAreaInsetsDidChange;
- (double)_initialScaleFactor;
- (void)decreaseSize:(id)a0;
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;
- (void)_alignJustified:(id)a0;
- (void)scrollViewWillBeginDragging:(id)a0;
- (void)_pasteAndMatchStyle:(id)a0;
- (void)_addShortcut:(id)a0;
- (void)_keyboardDidShow:(id)a0;
- (BOOL)_zoomToRect:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; })a0 withOrigin:(struct FloatPoint { float x0; float x1; })a1 fitEntireRect:(BOOL)a2 minimumScale:(double)a3 maximumScale:(double)a4 minimumScrollDistance:(float)a5;
- (id)inputAccessoryView;
- (void)_alignCenter:(id)a0;
- (void)_translate:(id)a0;
- (void)_didRelaunchProcess;
- (void)_lookup:(id)a0;
- (void)_simulateLongPressActionAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (id)reload;
- (void)_indent:(id)a0;
- (void)_accessibilitySettingsDidChange:(id)a0;
- (id)_currentContentView;
- (void)_setTextColor:(id)a0 sender:(id)a1;
- (void)_setFontSize:(double)a0 sender:(id)a1;
- (void)_setFont:(id)a0 sender:(id)a1;
- (struct CGPoint { double x0; double x1; })_initialContentOffsetForScrollView;
- (void)_setAvoidsUnsafeArea:(BOOL)a0;
- (id)goBack;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_computedContentInset;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_scrollViewSystemContentInset;
- (unsigned long long)_effectiveObscuredInsetEdgesAffectedBySafeArea;
- (void)cut:(id)a0;
- (void)_registerForNotifications;
- (void)_hidePasswordView;
- (void)_cancelAnimatedResize;
- (void)_processWillSwapOrDidExit;
- (BOOL)_scrollViewIsRubberBandingForRefreshControl;
- (struct CGPoint { double x0; double x1; })_contentOffsetAdjustedForObscuredInset:(struct CGPoint { double x0; double x1; })a0;
- (void)_didCompleteAnimatedResize;
- (void)copy:(id)a0;
- (void)scrollViewDidEndZooming:(id)a0 withView:(id)a1 atScale:(double)a2;
- (void)_trackTransactionCommit:(const void *)a0;
- (void)_didCommitLayerTreeDuringAnimatedResize:(const void *)a0;
- (void)_updateScrollViewForTransaction:(const void *)a0;
- (BOOL)_restoreScrollAndZoomStateForTransaction:(const void *)a0;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; })visibleRectInViewCoordinates;
- (double)timePickerValueHour;
- (void)_keyboardDidChangeFrame:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentRectForUserInteraction;
- (void)_zoomToPoint:(struct FloatPoint { float x0; float x1; })a0 atScale:(double)a1 animated:(BOOL)a2;
- (void)_scheduleForcedVisibleContentRectUpdate;
- (float)_adjustScrollRectToAvoidHighlightOverlay:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; })a0;
- (BOOL)_scrollToRect:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; })a0 origin:(struct FloatPoint { float x0; float x1; })a1 minimumScrollDistance:(float)a2;
- (void)_didFinishScrolling;
- (void)_zoomToRect:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; })a0 atScale:(double)a1 origin:(struct FloatPoint { float x0; float x1; })a2 animated:(BOOL)a3;
- (void)_scheduleVisibleContentRectUpdateAfterScrollInView:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRectInEnclosingView:(id)a0;
- (void)_enclosingScrollerScrollingEnded:(id)a0;
- (struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; })activeViewLayoutSize:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0;
- (void)_dispatchSetViewLayoutSize:(struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; })a0;
- (void)_dispatchSetMaximumUnobscuredSize:(struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; })a0;
- (BOOL)_scrollViewIsRubberBanding:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleContentRect;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_computedObscuredInsetForSafeBrowsingWarning;
- (struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char x0; })_viewStabilityState:(id)a0;
- (void)_addUpdateVisibleContentRectPreCommitHandler;
- (BOOL)_updateScrollViewContentInsetsIfNecessary;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_contentBoundsExtendedForRubberbandingWithScale:(double)a0;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })currentlyVisibleContentInsetsWithScale:(double)a0 obscuredInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })a1;
- (BOOL)_selectionRectIsFullyVisibleAndNonEmpty;
- (void)_scrollToAndRevealSelectionIfNeeded;
- (BOOL)_shouldUpdateKeyboardWithInfo:(id)a0;
- (void)_keyboardChangedWithInfo:(id)a0 adjustScrollView:(BOOL)a1;
- (BOOL)_isShowingVideoPictureInPicture;
- (BOOL)_mayAutomaticallyShowVideoPictureInPicture;
- (void)_incrementFocusPreservationCount;
- (void)_decrementFocusPreservationCount;
- (void)_resetFocusPreservationCount;
- (BOOL)_effectiveUserInterfaceLevelIsElevated;
- (void)_setHasCustomContentView:(BOOL)a0 loadedMIMEType:(const void *)a1;
- (void)_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:(const void *)a0 data:(id)a1;
- (void)_willInvokeUIScrollViewDelegateCallback;
- (struct RefPtr<WebKit::ViewSnapshot, WTF::RawPtrTraits<WebKit::ViewSnapshot>, WTF::DefaultRefDerefTraits<WebKit::ViewSnapshot>> { struct ViewSnapshot *x0; })_takeViewSnapshot;
- (void)scrollViewDidEndDecelerating:(id)a0;
- (void)_didInvokeUIScrollViewDelegateCallback;
- (void)_videoControlsManagerDidChange;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_contentInsetsFromSystemMinimumLayoutMargins;
- (void)_couldNotRestorePageState;
- (void)_restorePageScrollPosition:(struct optional<WebCore::FloatPoint> { union { char x0; struct FloatPoint { float x0; float x1; } x1; } x0; BOOL x1; })a0 scrollOrigin:(struct FloatPoint { float x0; float x1; })a1 previousObscuredInset:(struct RectEdges<float> { struct array<float, 4> { float x0[4]; } x0; })a2 scale:(double)a3;
- (void)_restorePageStateToUnobscuredCenter:(struct optional<WebCore::FloatPoint> { union { char x0; struct FloatPoint { float x0; float x1; } x1; } x0; BOOL x1; })a0 scale:(double)a1;
- (void)_scrollToContentScrollPosition:(struct FloatPoint { float x0; float x1; })a0 scrollOrigin:(struct IntPoint { int x0; int x1; })a1;
- (void)_zoomOutWithOrigin:(struct FloatPoint { float x0; float x1; })a0 animated:(BOOL)a1;
- (void)_zoomToInitialScaleWithOrigin:(struct FloatPoint { float x0; float x1; })a0 animated:(BOOL)a1;
- (void)_updateVisibleContentRects;
- (void)_didFinishNavigation:(struct Navigation { } *)a0;
- (void)encodeWithCoder:(id)a0;
- (void)_didFailNavigation:(struct Navigation { } *)a0;
- (void)_didSameDocumentNavigationForMainFrame:(int)a0;
- (void)_navigationGestureDidBegin;
- (void)_navigationGestureDidEnd;
- (void)_showPasswordViewWithDocumentName:(id)a0 passwordHandler:(id /* block */)a1;
- (void)_firePresentationUpdateForPendingStableStatePresentationCallbacks;
- (void)_close;
- (void)_setEphemeralUIEventAttribution:(id)a0 forApplicationWithBundleID:(id)a1;
- (void)_beginAnimatedResizeWithUpdates:(id /* block */)a0;
- (void)_setViewLayoutSizeOverride:(struct CGSize { double x0; double x1; })a0;
- (void)_setMaximumUnobscuredSizeOverride:(struct CGSize { double x0; double x1; })a0;
- (Class)_printFormatterClass;
- (void)_clearInterfaceOrientationOverride;
- (void)scrollViewWillBeginZooming:(id)a0 withView:(id)a1;
- (BOOL)_isNavigationSwipeGestureRecognizer:(id)a0;
- (struct CGPoint { double x0; double x1; })_convertPointFromContentsToView:(struct CGPoint { double x0; double x1; })a0;
- (void)_endAnimatedResize;
- (struct CGPoint { double x0; double x1; })_convertPointFromViewToContents:(struct CGPoint { double x0; double x1; })a0;
- (void)_doAfterNextStablePresentationUpdate:(id /* block */)a0;
- (void)_detectDataWithTypes:(unsigned long long)a0 completionHandler:(id /* block */)a1;
- (void)_requestActivatedElementAtPosition:(struct CGPoint { double x0; double x1; })a0 completionBlock:(id /* block */)a1;
- (void)_beginInteractiveObscuredInsetsChange;
- (struct CGSize { double x0; double x1; })scrollView:(id)a0 contentSizeForZoomScale:(double)a1 withProposedSize:(struct CGSize { double x0; double x1; })a2;
- (void)_endInteractiveObscuredInsetsChange;
- (void)_hideContentUntilNextUpdate;
- (void)_resizeWhileHidingContentWithUpdates:(id /* block */)a0;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { double x0; double x1; })a0 maximumUnobscuredSizeOverride:(struct CGSize { double x0; double x1; })a1;
- (void)_clearOverrideLayoutParameters;
- (void)_overrideViewportWithArguments:(id)a0;
- (id)_viewForFindUI;
- (void)_setOverlaidAccessoryViewsInset:(struct CGSize { double x0; double x1; })a0;
- (id /* block */)_retainActiveFocusedState;
- (id)_snapshotLayerContentsForBackForwardListItem:(id)a0;
- (void)_accessibilityRetrieveSpeakSelectionContent;
- (void)_willOpenAppLink;
- (void)_accessibilityDidGetSpeakSelectionContent:(id)a0;
- (id)_fullScreenPlaceholderView;
- (void)_isNavigatingToAppBoundDomain:(id /* block */)a0;
- (void)_isForcedIntoAppBoundMode:(id /* block */)a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)scrollViewDidZoom:(id)a0;
- (void)_layerTreeCommitComplete;
- (BOOL)hasFullScreenWindowController;
- (void)closeFullScreenWindowController;
- (id)fullScreenWindowController;
- (void)_requestDocumentContext:(id)a0 completionHandler:(id /* block */)a1;
- (void)_adjustSelectionWithDelta:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 completionHandler:(id /* block */)a1;
- (void)_didTapAtPoint:(struct CGPoint { double x0; double x1; })a0 withResult:(long long)a1;
- (BOOL)_mayContainEditableElementsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)keyboardAccessoryBarNext;
- (void)keyboardAccessoryBarPrevious;
- (void)dismissFormAccessoryView;
- (id)_filePickerAcceptedTypeIdentifiers;
- (void)_dismissFilePicker;
- (BOOL)_isShowingDataListSuggestions;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 configuration:(id)a1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_propertiesOfLayerWithID:(unsigned long long)a0;
- (void)_triggerSystemPreviewActionOnElement:(unsigned long long)a0 document:(unsigned long long)a1 page:(unsigned long long)a2;
- (void)_setDeviceOrientationUserPermissionHandlerForTesting:(id /* block */)a0;
- (void)_setDeviceHasAGXCompilerServiceForTesting;
- (id)_serializedSelectionCaretBackgroundColorForTesting;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (void)_changeListType:(id)a0;
- (void)scrollViewWillEndDragging:(id)a0 withVelocity:(struct CGPoint { double x0; double x1; })a1 targetContentOffset:(inout struct CGPoint { double x0; double x1; } *)a2;
- (BOOL)_tryClose;
- (struct CGPoint { double x0; double x1; })_scrollView:(id)a0 adjustedOffsetForOffset:(struct CGPoint { double x0; double x1; })a1 translation:(struct CGPoint { double x0; double x1; })a2 startPoint:(struct CGPoint { double x0; double x1; })a3 locationInView:(struct CGPoint { double x0; double x1; })a4 horizontalVelocity:(inout double *)a5 verticalVelocity:(inout double *)a6;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_frames:(id /* block */)a0;
- (void)_setupScrollAndContentViews;
- (void)_setOpaqueInternal:(BOOL)a0;
- (double)timePickerValueMinute;
- (void)_keyboardWillShow:(id)a0;
- (void)_setupPageConfiguration:(void *)a0;
- (void)_updateScrollViewBackground;
- (void)_initializeWithConfiguration:(id)a0;
- (void)_evaluateJavaScript:(id)a0 asAsyncFunction:(BOOL)a1 withSourceURL:(id)a2 withArguments:(id)a3 forceUserGesture:(BOOL)a4 inFrame:(id)a5 inWorld:(id)a6 completionHandler:(id /* block */)a7;
- (void)closeAllMediaPresentationsWithCompletionHandler:(id /* block */)a0;
- (void)pauseAllMediaPlaybackWithCompletionHandler:(id /* block */)a0;
- (void)setAllMediaPlaybackSuspended:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)requestMediaPlaybackStateWithCompletionHandler:(id /* block */)a0;
- (void)_clearSafeBrowsingWarning;
- (BOOL)usesStandardContentView;
- (id)loadSimulatedRequest:(id)a0 response:(id)a1 responseData:(id)a2;
- (id)loadSimulatedRequest:(id)a0 responseHTMLString:(id)a1;
- (void)startDownloadUsingRequest:(id)a0 completionHandler:(id /* block */)a1;
- (void)resumeDownloadFromResumeData:(id)a0 completionHandler:(id /* block */)a1;
- (void)evaluateJavaScript:(id)a0 completionHandler:(id /* block */)a1;
- (void)evaluateJavaScript:(id)a0 inFrame:(id)a1 inContentWorld:(id)a2 completionHandler:(id /* block */)a3;
- (void)callAsyncJavaScript:(id)a0 arguments:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 completionHandler:(id /* block */)a4;
- (void)closeAllMediaPresentations;
- (void)closeAllMediaPresentations:(id /* block */)a0;
- (void)pauseAllMediaPlayback:(id /* block */)a0;
- (void)resumeAllMediaPlayback:(id /* block */)a0;
- (void)suspendAllMediaPlayback:(id /* block */)a0;
- (void)requestMediaPlaybackState:(id /* block */)a0;
- (void)setMicrophoneCaptureState:(long long)a0 completionHandler:(id /* block */)a1;
- (void)setCameraCaptureState:(long long)a0 completionHandler:(id /* block */)a1;
- (void)takeSnapshotWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (void)_didRemoveAttachment:(void *)a0;
- (void)findString:(id)a0 withConfiguration:(id)a1 completionHandler:(id /* block */)a2;
- (void)_showSafeBrowsingWarning:(const void *)a0 completionHandler:(void *)a1;
- (void)_clearSafeBrowsingWarningIfForMainFrameNavigation;
- (void)_didInsertAttachment:(void *)a0 withSource:(id)a1;
- (void)_didInvalidateDataForAttachment:(void *)a0;
- (void)_internalDoAfterNextPresentationUpdate:(id /* block */)a0 withoutWaitingForPainting:(BOOL)a1 withoutWaitingForAnimatedResize:(BOOL)a2;
- (void)_storeAppHighlight:(const void *)a0;
- (struct OpaqueWKPage { } *)_pageForTesting;
- (void)createPDFWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; })_resolutionForShareSheetImmediateCompletionForTesting;
- (void)createWebArchiveDataWithCompletionHandler:(id /* block */)a0;
- (void)_didChangeEditorState;
- (id)loadSimulatedRequest:(id)a0 withResponse:(id)a1 responseData:(id)a2;
- (id)loadSimulatedRequest:(id)a0 withResponseHTMLString:(id)a1;
- (id)loadFileRequest:(id)a0 allowingReadAccessToURL:(id)a1;
- (void)scrollViewDidEndScrollingAnimation:(id)a0;
- (void)_didFinishTextInteractionInTextInputContext:(id)a0;
- (void)applyAutocorrection:(id)a0 toString:(id)a1 withCompletionHandler:(id /* block */)a2;
- (void)_insertUnorderedList:(id)a0;
- (void)_addAppHighlightInNewGroup:(BOOL)a0 originatedInApp:(BOOL)a1;
- (id)_loadRequest:(id)a0 shouldOpenExternalURLsPolicy:(long long)a1;
- (void)_hideFindUI;
- (id)_insertAttachmentWithFileWrapper:(id)a0 contentType:(id)a1 completion:(id /* block */)a2;
- (void)_showSafeBrowsingWarningWithURL:(id)a0 title:(id)a1 warning:(id)a2 detailsWithLinks:(id)a3 completionHandler:(id /* block */)a4;
- (void)_preconnectToServer:(id)a0;
- (void)_willBeginTextInteractionInTextInputContext:(id)a0;
- (void)_populateArchivedSubviews:(id)a0;
- (void)scrollViewDidEndDragging:(id)a0 willDecelerate:(BOOL)a1;
- (void)_didEnableBrowserExtensions:(id)a0;
- (void)_didDisableBrowserExtensions:(id)a0;
- (void)_executeEditCommand:(id)a0 argument:(id)a1 completion:(id /* block */)a2;
- (void)_startTextManipulationsWithConfiguration:(id)a0 completion:(id /* block */)a1;
- (void)_completeTextManipulation:(id)a0 completion:(id /* block */)a1;
- (void)_completeTextManipulationForItems:(id)a0 completion:(id /* block */)a1;
- (void)_takeFindStringFromSelection:(id)a0;
- (void)_updateMediaPlaybackControlsManager;
- (void)_togglePictureInPicture;
- (void)setSemanticContentAttribute:(long long)a0;
- (void)_closeAllMediaPresentations;
- (void)_stopMediaCapture;
- (void)_stopAllMediaPlayback;
- (void)_suspendAllMediaPlayback;
- (void)_resumeAllMediaPlayback;
- (void)_restoreAppHighlights:(id)a0;
- (void)_restoreAndScrollToAppHighlight:(id)a0;
- (void)_addAppHighlight;
- (void)_loadAlternateHTMLString:(id)a0 baseURL:(id)a1 forUnreachableURL:(id)a2;
- (id)_loadData:(id)a0 MIMEType:(id)a1 characterEncodingName:(id)a2 baseURL:(id)a3 userData:(id)a4;
- (id)_loadRequest:(id)a0 shouldOpenExternalURLs:(BOOL)a1;
- (void)_grantAccessToAssetServices;
- (void)_revokeAccessToAssetServices;
- (void)_switchFromStaticFontRegistryToUserFontRegistry;
- (void)_didLoadAppInitiatedRequest:(id /* block */)a0;
- (void)_didLoadNonAppInitiatedRequest:(id /* block */)a0;
- (void)_suspendPage:(id /* block */)a0;
- (void)_resumePage:(id /* block */)a0;
- (void).cxx_destruct;
- (void)_killWebContentProcess;
- (id)_contentSizeCategory;
- (id)_reloadWithoutContentBlockers;
- (id)_reloadExpiredOnly;
- (void)_killWebContentProcessAndResetState;
- (void)_takePDFSnapshotWithConfiguration:(id)a0 completionHandler:(id /* block */)a1;
- (void)_getPDFFirstPageSizeInFrame:(id)a0 completionHandler:(id /* block */)a1;
- (void)_dismissContactPickerWithContacts:(id)a0;
- (id)_sessionStateWithFilter:(id /* block */)a0;
- (void)_restoreFromSessionStateData:(id)a0;
- (id)_restoreSessionState:(id)a0 andNavigate:(BOOL)a1;
- (id)_insertAttachmentWithFilename:(id)a0 contentType:(id)a1 data:(id)a2 options:(id)a3 completion:(id /* block */)a4;
- (id)_attachmentForIdentifier:(id)a0;
- (BOOL)_allMediaPresentationsClosed;
- (id)_insertAttachmentWithFileWrapper:(id)a0 contentType:(id)a1 options:(id)a2 completion:(id /* block */)a3;
- (void)_simulateDeviceOrientationChangeWithAlpha:(double)a0 beta:(double)a1 gamma:(double)a2;
- (void)_showSafeBrowsingWarningWithTitle:(id)a0 warning:(id)a1 details:(id)a2 completionHandler:(id /* block */)a3;
- (void)_isJITEnabled:(id /* block */)a0;
- (void)_showSafeBrowsingWarningWithURL:(id)a0 title:(id)a1 warning:(id)a2 details:(id)a3 completionHandler:(id /* block */)a4;
- (void)_evaluateJavaScriptWithoutUserGesture:(id)a0 completionHandler:(id /* block */)a1;
- (void)_callAsyncJavaScript:(id)a0 arguments:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 completionHandler:(id /* block */)a4;
- (void)_evaluateJavaScript:(id)a0 inFrame:(id)a1 inContentWorld:(id)a2 completionHandler:(id /* block */)a3;
- (void)_evaluateJavaScript:(id)a0 withSourceURL:(id)a1 inFrame:(id)a2 inContentWorld:(id)a3 completionHandler:(id /* block */)a4;
- (void)_updateWebpagePreferences:(id)a0;
- (void)_notifyUserScripts;
- (void)scrollViewDidScroll:(id)a0;
- (void)_getMainResourceDataWithCompletionHandler:(id /* block */)a0;
- (void)_getWebArchiveDataWithCompletionHandler:(id /* block */)a0;
- (void)_getContentsAsStringWithCompletionHandler:(id /* block */)a0;
- (void)_getApplicationManifestWithCompletionHandler:(id /* block */)a0;
- (void)_getContentsOfAllFramesAsStringWithCompletionHandler:(id /* block */)a0;
- (id)urlSchemeHandlerForURLScheme:(id)a0;
- (void)_countStringMatches:(id)a0 options:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (void)_findString:(id)a0 options:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (void)_saveBackForwardSnapshotForItem:(id)a0;
- (void)_serviceWorkersEnabled:(id /* block */)a0;
- (void)_clearServiceWorkerEntitlementOverride:(id /* block */)a0;
- (void)_getProcessDisplayNameWithCompletionHandler:(id /* block */)a0;
- (void)_grantAccessToPreferenceService;
- (void)_setPageMuted:(unsigned long long)a0;
- (void)_removeDataDetectedLinks:(id /* block */)a0;
- (void)_doAfterNextPresentationUpdate:(id /* block */)a0;
- (BOOL)_isClosed;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForPainting:(id /* block */)a0;
- (BOOL)canBecomeFirstResponder;
- (void)_requestTextInputContextsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 completionHandler:(id /* block */)a1;
- (BOOL)resignFirstResponder;
- (id)inputView;
- (id)initWithCoder:(id)a0;
- (void)_didCommitLayerTree:(const void *)a0;
- (double)_pageScale;
- (void)_setSuppressSoftwareKeyboard:(BOOL)a0;
- (void)scrollViewDidScrollToTop:(id)a0;
- (void)_didScroll;
- (void)stopLoading;
- (void)didStartFormControlInteraction;
- (void)_decreaseListLevel:(id)a0;
- (void)_snapshotRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 intoImageOfWidth:(double)a1 completionHandler:(id /* block */)a2;
- (BOOL)_hasSleepDisabler;
- (void)_insertNestedOrderedList:(id)a0;
- (void)removeFromSuperview;
- (void)selectAll:(id)a0;
- (id)goToBackForwardListItem:(id)a0;
- (void)_didDismissContextMenu;
- (void)didEndFormControlInteraction;
- (void)setOpaque:(BOOL)a0;
- (void)_alignLeft:(id)a0;
- (void)_setFormDelegate:(id)a0;
- (void)_scheduleVisibleContentRectUpdate;
- (void)_addEventAttributionWithSourceID:(unsigned char)a0 destinationURL:(id)a1 sourceDescription:(id)a2 purchaser:(id)a3 reportEndpoint:(id)a4 optionalNonce:(id)a5 applicationBundleID:(id)a6 ephemeral:(BOOL)a7;
- (void)_setPageScale:(double)a0 withOrigin:(struct CGPoint { double x0; double x1; })a1;
- (void)_setContinuousSpellCheckingEnabledForTesting:(BOOL)a0;
- (void)_requestActiveNowPlayingSessionInfo:(id /* block */)a0;
- (void)_doAfterNextVisibleContentRectUpdate:(id /* block */)a0;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForAnimatedResizeForTesting:(id /* block */)a0;
- (void)_disableBackForwardSnapshotVolatilityForTesting;
- (BOOL)_beginBackSwipeForTesting;
- (BOOL)_completeBackSwipeForTesting;
- (void)_setDefersLoadingForTesting:(BOOL)a0;
- (void)_scrollView:(id)a0 asynchronouslyHandleScrollEvent:(id)a1 completion:(id /* block */)a2;
- (void)makeTextWritingDirectionNatural:(id)a0;
- (void)_resetNavigationGestureStateForTesting;
- (void)_setShareSheetCompletesImmediatelyWithResolutionForTesting:(BOOL)a0;
- (void)_processWillSuspendForTesting:(id /* block */)a0;
- (void)_processWillSuspendImminentlyForTesting;
- (void)_processDidResumeForTesting;
- (void)_setAssertionTypeForTesting:(int)a0;
- (void)_denyNextUserMediaRequest;
- (void)_didPresentContactPicker;
- (BOOL)becomeFirstResponder;
- (id)_formDelegate;
- (void)dealloc;
- (void)_doAfterProcessingAllPendingMouseEvents:(id /* block */)a0;
- (int)_audioRoutingArbitrationStatus;
- (double)_audioRoutingArbitrationUpdateTime;
- (void)_doAfterActivityStateUpdate:(id /* block */)a0;
- (void)_toggleStrikeThrough:(id)a0;
- (id)_suspendMediaPlaybackCounter;
- (void)_setPrivateClickMeasurementOverrideTimerForTesting:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_setPrivateClickMeasurementAttributionReportURLsForTesting:(id)a0 destinationURL:(id)a1 completionHandler:(id /* block */)a2;
- (void)_didShowContextMenu;
- (void)_setPrivateClickMeasurementAttributionTokenPublicKeyURLForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_setPrivateClickMeasurementAttributionTokenSignatureURLForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_dumpPrivateClickMeasurement:(id /* block */)a0;
- (void)_setPrivateClickMeasurementAppBundleIDForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (void)_didDismissContactPicker;
- (void)_lastNavigationWasAppInitiated:(id /* block */)a0;
- (void)_appPrivacyReportTestingData:(id /* block */)a0;
- (void)_clearAppPrivacyReportTestingData:(id /* block */)a0;
- (void)didMoveToWindow;
- (void)_createMediaSessionCoordinatorForTesting:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)_isValid;
- (void)toggleUnderline:(id)a0;
- (void)setBackgroundColor:(id)a0;
- (id).cxx_construct;
- (void)_windowDidRotate:(id)a0;
- (id)loadRequest:(id)a0;
- (id)targetForAction:(SEL)a0 withSender:(id)a1;
- (void)_processWillSwap;
- (void)_getContentsAsAttributedStringWithCompletionHandler:(id /* block */)a0;
- (id)loadFileURL:(id)a0 allowingReadAccessToURL:(id)a1;
- (double)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } *)a0 currentScale:(double)a1 fitEntireRect:(BOOL)a2 minimumScale:(double)a3 maximumScale:(double)a4;
- (id)loadHTMLString:(id)a0 baseURL:(id)a1;
- (id)loadData:(id)a0 MIMEType:(id)a1 characterEncodingName:(id)a2 baseURL:(id)a3;
- (void)_updateScrollViewInsetAdjustmentBehavior;
- (BOOL)_effectiveAppearanceIsDark;
- (void)_frameOrBoundsChanged;
- (void)_scrollViewDidInterruptDecelerating:(id)a0;

@end

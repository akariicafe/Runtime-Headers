@class NSString, NSData, UIView;

@interface WKPDFView : WKApplicationStateTrackingView <_WKWebViewPrintProvider, PDFHostViewControllerDelegate, WKActionSheetAssistantDelegate, WKShareSheetDelegate, WKWebViewContentProvider> {
    struct RetainPtr<WKActionSheetAssistant> { void *m_ptr; } _actionSheetAssistant;
    struct RetainPtr<NSData> { void *m_ptr; } _data;
    struct RetainPtr<CGPDFDocument *> { void *m_ptr; } _documentForPrinting;
    struct BlockPtr<void ()> { id /* block */ m_block; } _findCompletion;
    struct RetainPtr<NSString> { void *m_ptr; } _findString;
    unsigned long long _findStringCount;
    unsigned long long _findStringMaxCount;
    struct RetainPtr<UIView> { void *m_ptr; } _fixedOverlayView;
    struct optional<unsigned long> { union { char __null_state_; unsigned long long __val_; } ; BOOL __engaged_; } _focusedSearchResultIndex;
    long long _focusedSearchResultPendingOffset;
    struct RetainPtr<PDFHostViewController> { void *m_ptr; } _hostViewController;
    struct CGSize { double width; double height; } _overlaidAccessoryViewsInset;
    struct RetainPtr<UIView> { void *m_ptr; } _pageNumberIndicator;
    struct CString { struct RefPtr<WTF::CStringBuffer, WTF::RawPtrTraits<WTF::CStringBuffer>, WTF::DefaultRefDerefTraits<WTF::CStringBuffer>> { struct CStringBuffer *m_ptr; } m_buffer; } _passwordForPrinting;
    struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int m_x; int m_y; } point; BOOL includeSnapshot; BOOL includeLinkIndicator; BOOL includeCaretContext; BOOL includeHasDoubleClickHandler; BOOL includeImageData; BOOL linkIndicatorShouldHaveLegacyMargins; BOOL disallowUserAgentShadowContent; } request; BOOL canBeValid; struct optional<bool> { union { char __null_state_; BOOL __val_; } ; BOOL __engaged_; } nodeAtPositionHasDoubleClickHandler; unsigned char selectability; BOOL isSelected; BOOL prefersDraggingOverTextSelection; BOOL isNearMarkedText; BOOL touchCalloutEnabled; BOOL isLink; BOOL isImage; BOOL isAttachment; BOOL isAnimatedImage; BOOL isElement; BOOL isContentEditable; unsigned long long containerScrollingNodeID; BOOL isDataDetectorLink; BOOL preventTextInteraction; BOOL shouldNotUseIBeamInEditableContent; BOOL isImageOverlayText; BOOL isVerticalWritingMode; struct FloatPoint { float m_x; float m_y; } adjustedPointForNodeRespondingToClickEvents; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } url; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned char m_isValid : 1; unsigned char m_protocolIsInHTTPFamily : 1; unsigned char m_cannotBeABaseURL : 1; unsigned char m_portLength : 3; unsigned int m_schemeEnd : 26; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } imageURL; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } title; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } idAttribute; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } bounds; struct RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>> { struct ShareableBitmap *m_ptr; } image; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } textBefore; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } textAfter; float caretLength; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } m_size; } lineCaretExtent; struct optional<WebCore::Cursor> { union { char __null_state_; struct Cursor { int m_type; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } m_image; struct IntPoint { int m_x; int m_y; } m_hotSpot; void *m_platformCursor; } __val_; } ; BOOL __engaged_; } cursor; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } m_size; } selectionRectInRootViewCoordinates; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } m_size; } textBoundingRectInRootViewCoordinates; struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } m_size; } contentImageWithoutSelectionRectInRootViewCoordinates; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatRect *m_buffer; unsigned int m_capacity; unsigned int m_size; } textRectsInBoundingRectCoordinates; float contentImageScaleFactor; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImageWithHighlight; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImageWithoutSelection; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *m_ptr; } contentImage; struct Color { unsigned long long m_colorAndFlags; } estimatedBackgroundColor; unsigned char presentationTransition; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short m_storage; } options; } linkIndicator; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } dataDetectorIdentifier; struct RetainPtr<NSArray> { void *m_ptr; } dataDetectorResults; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } dataDetectorBounds; struct optional<WebCore::ElementContext> { union { char __null_state_; struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long m_identifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } __val_; } ; BOOL __engaged_; } elementContext; struct optional<WebCore::ElementContext> { union { char __null_state_; struct ElementContext { struct FloatRect { struct FloatPoint { float m_x; float m_y; } m_location; struct FloatSize { BOOL hasIntrinsicWidth; BOOL hasIntrinsicHeight; float m_width; float m_height; } m_size; } boundingRect; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long m_identifier; } webPageIdentifier; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long m_identifier; } documentIdentifier; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long m_identifier; } elementIdentifier; } __val_; } ; BOOL __engaged_; } imageElementContext; } _positionInformation;
    struct RetainPtr<NSString> { void *m_ptr; } _suggestedFilename;
    struct WeakObjCPtr<WKWebView> { id m_weakReference; } _webView;
    struct RetainPtr<WKKeyboardScrollViewAnimator> { void *m_ptr; } _keyboardScrollingAnimator;
    struct RetainPtr<WKShareSheet> { void *m_ptr; } _shareSheet;
}

@property (class, readonly, nonatomic) BOOL web_requiresCustomSnapshotting;

@property (readonly, nonatomic) struct CGPDFDocument { } *_wk_printedDocument;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIView *web_contentView;
@property (readonly, nonatomic) NSData *web_dataRepresentation;
@property (readonly, nonatomic) NSString *web_suggestedFilename;
@property (readonly, nonatomic) BOOL web_isBackground;

- (void)shareSheetDidDismiss:(id)a0;
- (id)dataDetectionContextForActionSheetAssistant:(id)a0 positionInformation:(const void *)a1;
- (BOOL)actionSheetAssistant:(id)a0 shouldIncludeAppLinkActionsForElement:(id)a1;
- (void)actionSheetAssistant:(id)a0 shareElementWithURL:(id)a1 rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (id)web_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 webView:(id)a1 mimeType:(id)a2;
- (void)web_setMinimumSize:(struct CGSize { double x0; double x1; })a0;
- (void)web_setFixedOverlayView:(id)a0;
- (BOOL)web_handleKeyEvent:(id)a0;
- (void)web_setContentProviderData:(id)a0 suggestedFilename:(id)a1;
- (void)web_scrollViewWillBeginZooming:(id)a0 withView:(id)a1;
- (void)web_scrollViewDidScroll:(id)a0;
- (void)web_scrollViewDidZoom:(id)a0;
- (void)web_scrollViewDidEndZooming:(id)a0 withView:(id)a1 atScale:(double)a2;
- (void)web_computedContentInsetDidChange;
- (void)web_didSameDocumentNavigation:(unsigned int)a0;
- (void)web_beginAnimatedResizeWithUpdates:(id /* block */)a0;
- (void)web_snapshotRectInContentViewCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 snapshotWidth:(double)a1 completionHandler:(id /* block */)a2;
- (void)web_setOverlaidAccessoryViewsInset:(struct CGSize { double x0; double x1; })a0;
- (void)_resetFind;
- (void)web_hideFindUI;
- (void)web_countStringMatches:(id)a0 options:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (void)web_findString:(id)a0 options:(unsigned long long)a1 maxCount:(unsigned long long)a2;
- (void)actionSheetAssistant:(id)a0 openElementAtLocation:(struct CGPoint { double x0; double x1; })a1;
- (void).cxx_destruct;
- (void)actionSheetAssistant:(id)a0 performAction:(BOOL)a1;
- (struct RetainPtr<NSArray> { void *x0; })actionSheetAssistant:(id)a0 decideActionsForElement:(id)a1 defaultActions:(struct RetainPtr<NSArray> { void *x0; })a2;
- (struct CGPoint { double x0; double x1; })_offsetForPageNumberIndicator;
- (void)_movePageNumberIndicatorToPoint:(struct CGPoint { double x0; double x1; })a0 animated:(BOOL)a1;
- (void)_updateLayoutAnimated:(BOOL)a0;
- (void)_scrollToURLFragment:(id)a0;
- (void)_findString:(id)a0 withOptions:(unsigned long long)a1 maxCount:(unsigned long long)a2 completion:(id /* block */)a3;
- (BOOL)_computeFocusedSearchResultIndexWithOptions:(unsigned long long)a0 didWrapAround:(BOOL *)a1;
- (void)_focusOnSearchResultWithOptions:(unsigned long long)a0;
- (void)_goToURL:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1;
- (id)_URLWithPageIndex:(long long)a0;
- (void)_showActionSheetForURL:(id)a0 atLocation:(struct CGPoint { double x0; double x1; })a1 withAnnotationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)pdfHostViewController:(id)a0 updatePageCount:(long long)a1;
- (void)pdfHostViewController:(id)a0 documentDidUnlockWithPassword:(id)a1;
- (void)pdfHostViewController:(id)a0 findStringUpdate:(unsigned long long)a1 done:(BOOL)a2;
- (void)pdfHostViewController:(id)a0 goToURL:(id)a1;
- (void)pdfHostViewController:(id)a0 goToPageIndex:(long long)a1 withViewFrustum:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (void)pdfHostViewController:(id)a0 didLongPressURL:(id)a1 atLocation:(struct CGPoint { double x0; double x1; })a2 withAnnotationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (void)pdfHostViewController:(id)a0 didLongPressPageIndex:(long long)a1 atLocation:(struct CGPoint { double x0; double x1; })a2 withAnnotationRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a3;
- (void)pdfHostViewControllerExtensionProcessDidCrash:(id)a0;
- (struct CGPDFDocument { } *)_ensureDocumentForPrinting;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (id)_contentView;
- (void)dealloc;
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)a0;
- (id).cxx_construct;
- (struct optional<WebKit::InteractionInformationAtPosition> { union { char x0; struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; } x0; BOOL x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; unsigned long long x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; struct FloatPoint { float x0; float x1; } x20; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x0; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 3; unsigned int x5 : 26; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; } x21; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x0; unsigned char x1 : 1; unsigned char x2 : 1; unsigned char x3 : 1; unsigned char x4 : 3; unsigned int x5 : 26; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; } x22; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x23; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x24; struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } x25; struct RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>> { struct ShareableBitmap *x0; } x26; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x27; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x28; float x29; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } x30; struct optional<WebCore::Cursor> { union { char x0; struct Cursor { int x0; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x1; struct IntPoint { int x0; int x1; } x2; void *x3; } x1; } x0; BOOL x1; } x31; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } x1; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } x2; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc> { struct FloatRect *x0; unsigned int x1; unsigned int x2; } x3; float x4; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x5; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x6; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image *x0; } x7; struct Color { unsigned long long x0; } x8; unsigned char x9; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short x0; } x10; } x32; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *x0; } x0; } x33; struct RetainPtr<NSArray> { void *x0; } x34; struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } x35; struct optional<WebCore::ElementContext> { union { char x0; struct ElementContext { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } x0; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x0; } x1; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long x0; } x2; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x0; } x3; } x1; } x0; BOOL x1; } x36; struct optional<WebCore::ElementContext> { union { char x0; struct ElementContext { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { BOOL x0; BOOL x1; float x2; float x3; } x1; } x0; struct ObjectIdentifier<WebCore::PageIdentifierType> { unsigned long long x0; } x1; struct ObjectIdentifier<WebCore::DocumentIdentifierType> { unsigned long long x0; } x2; struct ObjectIdentifier<WebCore::ElementIdentifierType> { unsigned long long x0; } x3; } x1; } x0; BOOL x1; } x37; } x1; } x0; BOOL x1; })positionInformationForActionSheetAssistant:(id)a0;

@end

@class WKProcessPool, WKUserContentController, _WKWebsiteDataStore, NSString, NSSet, WKWebViewContentProviderRegistry, _WKApplicationManifest, WKWebsiteDataStore, WKWebView, NSArray, WKWebpagePreferences, WKPreferences, _WKVisitedLinkStore;
@protocol _UIClickInteractionDriving;

@interface WKWebViewConfiguration : NSObject <NSSecureCoding, NSCopying> {
    struct RefPtr<API::PageConfiguration, WTF::RawPtrTraits<API::PageConfiguration>, WTF::DefaultRefDerefTraits<API::PageConfiguration>> { struct PageConfiguration *m_ptr; } _pageConfiguration;
    struct LazyInitialized<WTF::RetainPtr<WKProcessPool>> { BOOL m_isInitialized; struct RetainPtr<WKProcessPool> { void *m_ptr; } m_value; } _processPool;
    struct LazyInitialized<WTF::RetainPtr<WKPreferences>> { BOOL m_isInitialized; struct RetainPtr<WKPreferences> { void *m_ptr; } m_value; } _preferences;
    struct LazyInitialized<WTF::RetainPtr<WKUserContentController>> { BOOL m_isInitialized; struct RetainPtr<WKUserContentController> { void *m_ptr; } m_value; } _userContentController;
    struct LazyInitialized<WTF::RetainPtr<_WKVisitedLinkStore>> { BOOL m_isInitialized; struct RetainPtr<_WKVisitedLinkStore> { void *m_ptr; } m_value; } _visitedLinkStore;
    struct LazyInitialized<WTF::RetainPtr<WKWebsiteDataStore>> { BOOL m_isInitialized; struct RetainPtr<WKWebsiteDataStore> { void *m_ptr; } m_value; } _websiteDataStore;
    struct LazyInitialized<WTF::RetainPtr<WKWebpagePreferences>> { BOOL m_isInitialized; struct RetainPtr<WKWebpagePreferences> { void *m_ptr; } m_value; } _defaultWebpagePreferences;
    struct WeakObjCPtr<WKWebView> { id m_weakReference; } _relatedWebView;
    struct WeakObjCPtr<WKWebView> { id m_weakReference; } _alternateWebViewForNavigationGestures;
    struct RetainPtr<NSString> { void *m_ptr; } _groupIdentifier;
    struct optional<WTF::RetainPtr<NSString>> { union { char __null_state_; struct RetainPtr<NSString> { void *m_ptr; } __val_; } ; BOOL __engaged_; } _applicationNameForUserAgent;
    double _incrementalRenderingSuppressionTimeout;
    BOOL _respectsImageOrientation;
    BOOL _printsBackgrounds;
    BOOL _allowsJavaScriptMarkup;
    BOOL _convertsPositionStyleOnCopy;
    BOOL _allowsMetaRefresh;
    BOOL _allowUniversalAccessFromFileURLs;
    BOOL _allowTopNavigationToDataURLs;
    struct LazyInitialized<WTF::RetainPtr<WKWebViewContentProviderRegistry>> { BOOL m_isInitialized; struct RetainPtr<WKWebViewContentProviderRegistry> { void *m_ptr; } m_value; } _contentProviderRegistry;
    BOOL _inlineMediaPlaybackRequiresPlaysInlineAttribute;
    BOOL _allowsInlineMediaPlaybackAfterFullscreen;
    unsigned long long _dragLiftDelay;
    BOOL _textInteractionGesturesEnabled;
    BOOL _longPressActionsEnabled;
    BOOL _systemPreviewEnabled;
    BOOL _shouldDecidePolicyBeforeLoadingQuickLookPreview;
    BOOL _invisibleAutoplayNotPermitted;
    BOOL _mediaDataLoadsAutomatically;
    BOOL _attachmentElementEnabled;
    Class _attachmentFileWrapperClass;
    BOOL _mainContentUserGestureOverrideEnabled;
    BOOL _waitsForPaintAfterViewDidMoveToWindow;
    BOOL _controlledByAutomation;
    BOOL _applePayEnabled;
    BOOL _needsStorageAccessFromFileURLsQuirk;
    BOOL _legacyEncryptedMediaAPIEnabled;
    BOOL _allowMediaContentTypesRequiringHardwareSupportAsFallback;
    BOOL _colorFilterEnabled;
    BOOL _incompleteImageBorderEnabled;
    BOOL _shouldDeferAsynchronousScriptsUntilAfterDocumentLoad;
    BOOL _drawsBackground;
    BOOL _undoManagerAPIEnabled;
    BOOL _appHighlightsEnabled;
    double _sampledPageTopColorMaxDifference;
    double _sampledPageTopColorMinHeight;
    struct RetainPtr<NSString> { void *m_ptr; } _mediaContentTypesRequiringHardwareSupport;
    struct RetainPtr<NSArray<NSString *>> { void *m_ptr; } _additionalSupportedImageTypes;
}

@property (class, readonly) BOOL supportsSecureCoding;

@property (weak, nonatomic, setter=_setRelatedWebView:) WKWebView *_relatedWebView;
@property (copy, nonatomic, setter=_setGroupIdentifier:) NSString *_groupIdentifier;
@property (retain, nonatomic, setter=_setVisitedLinkStore:) _WKVisitedLinkStore *_visitedLinkStore;
@property (weak, nonatomic, setter=_setAlternateWebViewForNavigationGestures:) WKWebView *_alternateWebViewForNavigationGestures;
@property (nonatomic, setter=_setRespectsImageOrientation:) BOOL _respectsImageOrientation;
@property (nonatomic, setter=_setPrintsBackgrounds:) BOOL _printsBackgrounds;
@property (nonatomic, setter=_setIncrementalRenderingSuppressionTimeout:) double _incrementalRenderingSuppressionTimeout;
@property (nonatomic, setter=_setAllowsJavaScriptMarkup:) BOOL _allowsJavaScriptMarkup;
@property (nonatomic, setter=_setConvertsPositionStyleOnCopy:) BOOL _convertsPositionStyleOnCopy;
@property (nonatomic, setter=_setAllowsMetaRefresh:) BOOL _allowsMetaRefresh;
@property (nonatomic, setter=_setAllowUniversalAccessFromFileURLs:) BOOL _allowUniversalAccessFromFileURLs;
@property (nonatomic, setter=_setAllowTopNavigationToDataURLs:) BOOL _allowTopNavigationToDataURLs;
@property (nonatomic, setter=_setNeedsStorageAccessFromFileURLsQuirk:) BOOL _needsStorageAccessFromFileURLsQuirk;
@property (nonatomic, setter=_setMainContentUserGestureOverrideEnabled:) BOOL _mainContentUserGestureOverrideEnabled;
@property (nonatomic, setter=_setInvisibleAutoplayNotPermitted:) BOOL _invisibleAutoplayNotPermitted;
@property (nonatomic, setter=_setMediaDataLoadsAutomatically:) BOOL _mediaDataLoadsAutomatically;
@property (nonatomic, setter=_setAttachmentElementEnabled:) BOOL _attachmentElementEnabled;
@property (nonatomic, setter=_setAttachmentFileWrapperClass:) Class _attachmentFileWrapperClass;
@property (nonatomic, setter=_setInitialCapitalizationEnabled:) BOOL _initialCapitalizationEnabled;
@property (nonatomic, setter=_setApplePayEnabled:) BOOL _applePayEnabled;
@property (nonatomic, setter=_setWaitsForPaintAfterViewDidMoveToWindow:) BOOL _waitsForPaintAfterViewDidMoveToWindow;
@property (nonatomic, getter=_isControlledByAutomation, setter=_setControlledByAutomation:) BOOL _controlledByAutomation;
@property (nonatomic, setter=_setApplicationManifest:) _WKApplicationManifest *_applicationManifest;
@property (nonatomic, setter=_setColorFilterEnabled:) BOOL _colorFilterEnabled;
@property (nonatomic, setter=_setIncompleteImageBorderEnabled:) BOOL _incompleteImageBorderEnabled;
@property (nonatomic, setter=_setDrawsBackground:) BOOL _drawsBackground;
@property (nonatomic, setter=_setShouldDeferAsynchronousScriptsUntilAfterDocumentLoad:) BOOL _shouldDeferAsynchronousScriptsUntilAfterDocumentLoad;
@property (readonly, nonatomic) WKWebsiteDataStore *_websiteDataStoreIfExists;
@property (copy, nonatomic, setter=_setCORSDisablingPatterns:) NSArray *_corsDisablingPatterns;
@property (nonatomic, setter=_setDeferrableUserScriptsShouldWaitUntilNotification:) BOOL _deferrableUserScriptsShouldWaitUntilNotification;
@property (nonatomic, setter=_setCrossOriginAccessControlCheckEnabled:) BOOL _crossOriginAccessControlCheckEnabled;
@property (nonatomic, setter=_setLoadsFromNetwork:) BOOL _loadsFromNetwork;
@property (copy, nonatomic, setter=_setAllowedNetworkHosts:) NSSet *_allowedNetworkHosts;
@property (nonatomic, setter=_setLoadsSubresources:) BOOL _loadsSubresources;
@property (nonatomic, setter=_setIgnoresAppBoundDomains:) BOOL _ignoresAppBoundDomains;
@property (nonatomic, setter=_setClientNavigationsRunAtForegroundPriority:) BOOL _clientNavigationsRunAtForegroundPriority;
@property (nonatomic, setter=_setAlwaysRunsAtForegroundPriority:) BOOL _alwaysRunsAtForegroundPriority;
@property (nonatomic, setter=_setInlineMediaPlaybackRequiresPlaysInlineAttribute:) BOOL _inlineMediaPlaybackRequiresPlaysInlineAttribute;
@property (nonatomic, setter=_setAllowsInlineMediaPlaybackAfterFullscreen:) BOOL _allowsInlineMediaPlaybackAfterFullscreen;
@property (nonatomic, setter=_setDragLiftDelay:) unsigned long long _dragLiftDelay;
@property (nonatomic, setter=_setLongPressActionsEnabled:) BOOL _longPressActionsEnabled;
@property (nonatomic, setter=_setSystemPreviewEnabled:) BOOL _systemPreviewEnabled;
@property (nonatomic, setter=_setShouldDecidePolicyBeforeLoadingQuickLookPreview:) BOOL _shouldDecidePolicyBeforeLoadingQuickLookPreview;
@property (nonatomic, setter=_setCanShowWhileLocked:) BOOL _canShowWhileLocked;
@property (nonatomic, setter=_setClickInteractionDriverForTesting:) id<_UIClickInteractionDriving> _clickInteractionDriverForTesting;
@property (nonatomic, setter=_setAppInitiatedOverrideValueForTesting:) unsigned long long _appInitiatedOverrideValueForTesting;
@property (retain, nonatomic, setter=_setWebsiteDataStore:) _WKWebsiteDataStore *_websiteDataStore;
@property (nonatomic, setter=_setRequiresUserActionForAudioPlayback:) BOOL _requiresUserActionForAudioPlayback;
@property (nonatomic, setter=_setRequiresUserActionForVideoPlayback:) BOOL _requiresUserActionForVideoPlayback;
@property (nonatomic, setter=_setOverrideContentSecurityPolicy:) NSString *_overrideContentSecurityPolicy;
@property (nonatomic, setter=_setMediaContentTypesRequiringHardwareSupport:) NSString *_mediaContentTypesRequiringHardwareSupport;
@property (nonatomic, setter=_setLegacyEncryptedMediaAPIEnabled:) BOOL _legacyEncryptedMediaAPIEnabled;
@property (nonatomic, setter=_setAllowMediaContentTypesRequiringHardwareSupportAsFallback:) BOOL _allowMediaContentTypesRequiringHardwareSupportAsFallback;
@property (nonatomic, setter=_setMediaCaptureEnabled:) BOOL _mediaCaptureEnabled;
@property (copy, nonatomic, setter=_setAdditionalSupportedImageTypes:) NSArray *_additionalSupportedImageTypes;
@property (nonatomic, setter=_setUndoManagerAPIEnabled:) BOOL _undoManagerAPIEnabled;
@property (nonatomic, setter=_setShouldRelaxThirdPartyCookieBlocking:) BOOL _shouldRelaxThirdPartyCookieBlocking;
@property (nonatomic, setter=_setProcessDisplayName:) NSString *_processDisplayName;
@property (nonatomic, setter=_setAppHighlightsEnabled:) BOOL _appHighlightsEnabled;
@property (nonatomic, setter=_setSampledPageTopColorMaxDifference:) double _sampledPageTopColorMaxDifference;
@property (nonatomic, setter=_setSampledPageTopColorMinHeight:) double _sampledPageTopColorMinHeight;
@property (nonatomic, setter=_setAttributedBundleIdentifier:) NSString *_attributedBundleIdentifier;
@property (nonatomic) BOOL mediaPlaybackRequiresUserAction;
@property (nonatomic) BOOL mediaPlaybackAllowsAirPlay;
@property (nonatomic) BOOL requiresUserActionForMediaPlayback;
@property (nonatomic, setter=_setTextInteractionGesturesEnabled:) BOOL _textInteractionGesturesEnabled;
@property (nonatomic, setter=_setContentProviderRegistry:) WKWebViewContentProviderRegistry *_contentProviderRegistry;
@property (readonly, nonatomic) NSString *_applicationNameForDesktopUserAgent;
@property (retain, nonatomic) WKProcessPool *processPool;
@property (retain, nonatomic) WKPreferences *preferences;
@property (retain, nonatomic) WKUserContentController *userContentController;
@property (retain, nonatomic) WKWebsiteDataStore *websiteDataStore;
@property (nonatomic) BOOL suppressesIncrementalRendering;
@property (copy, nonatomic) NSString *applicationNameForUserAgent;
@property (nonatomic) BOOL allowsAirPlayForMediaPlayback;
@property (nonatomic) BOOL upgradeKnownHostsToHTTPS;
@property (nonatomic) unsigned long long mediaTypesRequiringUserActionForPlayback;
@property (copy, nonatomic) WKWebpagePreferences *defaultWebpagePreferences;
@property (nonatomic) BOOL limitsNavigationsToAppBoundDomains;
@property (nonatomic) BOOL allowsInlineMediaPlayback;
@property (nonatomic) long long selectionGranularity;
@property (nonatomic) BOOL allowsPictureInPictureMediaPlayback;
@property (nonatomic) unsigned long long dataDetectorTypes;
@property (nonatomic) BOOL ignoresViewportScaleLimits;

- (id)_visitedLinkProvider;
- (void)encodeWithCoder:(id)a0;
- (struct Ref<API::PageConfiguration, WTF::RawPtrTraits<API::PageConfiguration>> { struct PageConfiguration *x0; })copyPageConfiguration;
- (void)setURLSchemeHandler:(id)a0 forURLScheme:(id)a1;
- (id)description;
- (void)_setVisitedLinkProvider:(id)a0;
- (void)setLimitsNavigationsToAppBoundDomains:(BOOL)a0;
- (void).cxx_destruct;
- (id)init;
- (id)urlSchemeHandlerForURLScheme:(id)a0;
- (id)initWithCoder:(id)a0;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id).cxx_construct;
- (BOOL)limitsNavigationsToAppBoundDomains;

@end
